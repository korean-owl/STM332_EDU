
TouchGFX_Training_MVP_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002168c  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be8  0802193c  0802193c  0002293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08023524  08023524  00024524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802353c  0802353c  0002453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000014  08023544  08023544  00024544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000008  08023558  08023558  00024558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000110  24000000  08023560  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001c048  24000110  08023670  00025110  2**2
                  ALLOC
  9 ._user_heap_stack 00002000  2401c158  08023670  00025158  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000b3358  2**0
                  CONTENTS, READONLY
 11 FramebufferSection 0005fa00  24040000  24040000  00026000  2**2
                  ALLOC
 12 FontFlashSection 000001a8  90000000  90000000  00026000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 TextFlashSection 00000010  900001a8  900001a8  000261a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 ExtFlashSection 0008d1a0  900001b8  900001b8  000261b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0008b7d8  00000000  00000000  000b3386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00010374  00000000  00000000  0013eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003898  00000000  00000000  0014eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002a5d  00000000  00000000  00152770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003f56c  00000000  00000000  001551cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004730d  00000000  00000000  00194739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0016f5b8  00000000  00000000  001dba46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c2  00000000  00000000  0034affe  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f5ec  00000000  00000000  0034b0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000057  00000000  00000000  0035a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08021924 	.word	0x08021924

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08021924 	.word	0x08021924

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003a6:	f000 fbeb 	bl	8000b80 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003aa:	4b4a      	ldr	r3, [pc, #296]	@ (80004d4 <main+0x134>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d11b      	bne.n	80003ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003b6:	f3bf 8f4f 	dsb	sy
}
 80003ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003bc:	f3bf 8f6f 	isb	sy
}
 80003c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003c2:	4b44      	ldr	r3, [pc, #272]	@ (80004d4 <main+0x134>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ca:	f3bf 8f4f 	dsb	sy
}
 80003ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d0:	f3bf 8f6f 	isb	sy
}
 80003d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003d6:	4b3f      	ldr	r3, [pc, #252]	@ (80004d4 <main+0x134>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a3e      	ldr	r2, [pc, #248]	@ (80004d4 <main+0x134>)
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003e2:	f3bf 8f4f 	dsb	sy
}
 80003e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e8:	f3bf 8f6f 	isb	sy
}
 80003ec:	e000      	b.n	80003f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003f0:	4b38      	ldr	r3, [pc, #224]	@ (80004d4 <main+0x134>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d138      	bne.n	800046e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003fc:	4b35      	ldr	r3, [pc, #212]	@ (80004d4 <main+0x134>)
 80003fe:	2200      	movs	r2, #0
 8000400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000404:	f3bf 8f4f 	dsb	sy
}
 8000408:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800040a:	4b32      	ldr	r3, [pc, #200]	@ (80004d4 <main+0x134>)
 800040c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000410:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	0b5b      	lsrs	r3, r3, #13
 8000416:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800041a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	08db      	lsrs	r3, r3, #3
 8000420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000424:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	015a      	lsls	r2, r3, #5
 800042a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800042e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000434:	4927      	ldr	r1, [pc, #156]	@ (80004d4 <main+0x134>)
 8000436:	4313      	orrs	r3, r2
 8000438:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d1ef      	bne.n	8000426 <main+0x86>
    } while(sets-- != 0U);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	1e5a      	subs	r2, r3, #1
 800044a:	60ba      	str	r2, [r7, #8]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d1e5      	bne.n	800041c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000450:	f3bf 8f4f 	dsb	sy
}
 8000454:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <main+0x134>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a1e      	ldr	r2, [pc, #120]	@ (80004d4 <main+0x134>)
 800045c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000460:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000462:	f3bf 8f4f 	dsb	sy
}
 8000466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000468:	f3bf 8f6f 	isb	sy
}
 800046c:	e000      	b.n	8000470 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800046e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000470:	f003 fd3e 	bl	8003ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000474:	f000 f840 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000478:	f000 fa2e 	bl	80008d8 <MX_GPIO_Init>
  MX_DMA2D_Init();
 800047c:	f000 f8d2 	bl	8000624 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000480:	f000 f90a 	bl	8000698 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8000484:	f000 f9ca 	bl	800081c <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8000488:	f000 f8aa 	bl	80005e0 <MX_CRC_Init>
  MX_LTDC_Init();
 800048c:	f000 f944 	bl	8000718 <MX_LTDC_Init>
  MX_TouchGFX_Init();
 8000490:	f00d fa3b 	bl	800d90a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000494:	f00d fa32 	bl	800d8fc <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000498:	f009 fdc6 	bl	800a028 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of buttonQueue */
  buttonQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &buttonQueue_attributes);
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <main+0x138>)
 800049e:	2102      	movs	r1, #2
 80004a0:	2010      	movs	r0, #16
 80004a2:	f009 ffd7 	bl	800a454 <osMessageQueueNew>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <main+0x13c>)
 80004aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ac:	4a0c      	ldr	r2, [pc, #48]	@ (80004e0 <main+0x140>)
 80004ae:	2100      	movs	r1, #0
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <main+0x144>)
 80004b2:	f009 fe03 	bl	800a0bc <osThreadNew>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <main+0x148>)
 80004ba:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80004bc:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <main+0x14c>)
 80004be:	2100      	movs	r1, #0
 80004c0:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <main+0x150>)
 80004c2:	f009 fdfb 	bl	800a0bc <osThreadNew>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4a0a      	ldr	r2, [pc, #40]	@ (80004f4 <main+0x154>)
 80004ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004cc:	f009 fdd0 	bl	800a070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x130>
 80004d4:	e000ed00 	.word	0xe000ed00
 80004d8:	080223e8 	.word	0x080223e8
 80004dc:	24000318 	.word	0x24000318
 80004e0:	080223a0 	.word	0x080223a0
 80004e4:	08000b71 	.word	0x08000b71
 80004e8:	24000310 	.word	0x24000310
 80004ec:	080223c4 	.word	0x080223c4
 80004f0:	0800d91b 	.word	0x0800d91b
 80004f4:	24000314 	.word	0x24000314

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	@ 0x70
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000502:	224c      	movs	r2, #76	@ 0x4c
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f020 fb9d 	bl	8020c46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2220      	movs	r2, #32
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f020 fb97 	bl	8020c46 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000518:	4b2f      	ldr	r3, [pc, #188]	@ (80005d8 <SystemClock_Config+0xe0>)
 800051a:	f04f 32ff 	mov.w	r2, #4294967295
 800051e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000522:	2004      	movs	r0, #4
 8000524:	f006 fef2 	bl	800730c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	4b2b      	ldr	r3, [pc, #172]	@ (80005dc <SystemClock_Config+0xe4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a2a      	ldr	r2, [pc, #168]	@ (80005dc <SystemClock_Config+0xe4>)
 8000532:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <SystemClock_Config+0xe4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000544:	bf00      	nop
 8000546:	4b25      	ldr	r3, [pc, #148]	@ (80005dc <SystemClock_Config+0xe4>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000552:	d1f8      	bne.n	8000546 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000554:	2301      	movs	r3, #1
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800055c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	2302      	movs	r3, #2
 8000564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000566:	230c      	movs	r3, #12
 8000568:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 800056a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800056e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800057c:	2304      	movs	r3, #4
 800057e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000580:	2300      	movs	r3, #0
 8000582:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800058c:	4618      	mov	r0, r3
 800058e:	f006 ff17 	bl	80073c0 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000598:	f000 fb52 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	233f      	movs	r3, #63	@ 0x3f
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a8:	2308      	movs	r3, #8
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2103      	movs	r1, #3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f007 fb2f 	bl	8007c24 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005cc:	f000 fb38 	bl	8000c40 <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3770      	adds	r7, #112	@ 0x70
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	58024400 	.word	0x58024400
 80005dc:	58024800 	.word	0x58024800

080005e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	@ (800061c <MX_CRC_Init+0x3c>)
 80005e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <MX_CRC_Init+0x40>)
 80005e8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <MX_CRC_Init+0x3c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <MX_CRC_Init+0x3c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f6:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_CRC_Init+0x3c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005fc:	4b07      	ldr	r3, [pc, #28]	@ (800061c <MX_CRC_Init+0x3c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_CRC_Init+0x3c>)
 8000604:	2201      	movs	r2, #1
 8000606:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <MX_CRC_Init+0x3c>)
 800060a:	f003 fe7b 	bl	8004304 <HAL_CRC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000614:	f000 fb14 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2400012c 	.word	0x2400012c
 8000620:	40023000 	.word	0x40023000

08000624 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000628:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800062a:	4a1a      	ldr	r2, [pc, #104]	@ (8000694 <MX_DMA2D_Init+0x70>)
 800062c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000634:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000636:	2202      	movs	r2, #2
 8000638:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000640:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000642:	2200      	movs	r2, #0
 8000644:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000646:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000648:	2202      	movs	r2, #2
 800064a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800064e:	2200      	movs	r2, #0
 8000650:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000652:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000654:	2200      	movs	r2, #0
 8000656:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800065a:	2200      	movs	r2, #0
 800065c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800065e:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000660:	2200      	movs	r2, #0
 8000662:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 8000666:	2200      	movs	r2, #0
 8000668:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800066a:	4809      	ldr	r0, [pc, #36]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800066c:	f003 ff3c 	bl	80044e8 <HAL_DMA2D_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000676:	f000 fae3 	bl	8000c40 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800067a:	2101      	movs	r1, #1
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_DMA2D_Init+0x6c>)
 800067e:	f004 f8a7 	bl	80047d0 <HAL_DMA2D_ConfigLayer>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000688:	f000 fada 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	24000150 	.word	0x24000150
 8000694:	52001000 	.word	0x52001000

08000698 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_I2C4_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <MX_I2C4_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <MX_I2C4_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000714 <MX_I2C4_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80006a8:	4b18      	ldr	r3, [pc, #96]	@ (800070c <MX_I2C4_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_I2C4_Init+0x74>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <MX_I2C4_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_I2C4_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_I2C4_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_I2C4_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_I2C4_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	@ (800070c <MX_I2C4_Init+0x74>)
 80006d4:	f004 fc32 	bl	8004f3c <HAL_I2C_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80006de:	f000 faaf 	bl	8000c40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80006e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e6:	4809      	ldr	r0, [pc, #36]	@ (800070c <MX_I2C4_Init+0x74>)
 80006e8:	f005 f9fe 	bl	8005ae8 <HAL_I2CEx_ConfigAnalogFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 faa5 	bl	8000c40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_I2C4_Init+0x74>)
 80006fa:	f005 fa40 	bl	8005b7e <HAL_I2CEx_ConfigDigitalFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 fa9c 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	240001b8 	.word	0x240001b8
 8000710:	58001c00 	.word	0x58001c00
 8000714:	30808bd0 	.word	0x30808bd0

08000718 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	@ 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2234      	movs	r2, #52	@ 0x34
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f020 fa8e 	bl	8020c46 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800072a:	4b3a      	ldr	r3, [pc, #232]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800072c:	4a3a      	ldr	r2, [pc, #232]	@ (8000818 <MX_LTDC_Init+0x100>)
 800072e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000736:	4b37      	ldr	r3, [pc, #220]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800073c:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000742:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800074a:	2228      	movs	r2, #40	@ 0x28
 800074c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800074e:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000750:	2209      	movs	r2, #9
 8000752:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000754:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000756:	222a      	movs	r2, #42	@ 0x2a
 8000758:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800075c:	220b      	movs	r2, #11
 800075e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8000760:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000762:	f240 220a 	movw	r2, #522	@ 0x20a
 8000766:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000768:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800076a:	f240 121b 	movw	r2, #283	@ 0x11b
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 554;
 8000770:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000772:	f240 222a 	movw	r2, #554	@ 0x22a
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000778:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800077a:	f240 121d 	movw	r2, #285	@ 0x11d
 800077e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000780:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000790:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_LTDC_Init+0xfc>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000798:	481e      	ldr	r0, [pc, #120]	@ (8000814 <MX_LTDC_Init+0xfc>)
 800079a:	f005 fa3d 	bl	8005c18 <HAL_LTDC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 fa4c 	bl	8000c40 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80007b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007b6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80007ba:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80007bc:	2301      	movs	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007c0:	23ff      	movs	r3, #255	@ 0xff
 80007c2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007ce:	2305      	movs	r3, #5
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007d2:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80007d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80007d8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80007de:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80007e4:	23ff      	movs	r3, #255	@ 0xff
 80007e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_LTDC_Init+0xfc>)
 80007fe:	f005 fb93 	bl	8005f28 <HAL_LTDC_ConfigLayer>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000808:	f000 fa1a 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3738      	adds	r7, #56	@ 0x38
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2400020c 	.word	0x2400020c
 8000818:	50001000 	.word	0x50001000

0800081c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000824:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <MX_OCTOSPI1_Init+0xb8>)
 8000826:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800082a:	2201      	movs	r2, #1
 800082c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000834:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 800083a:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800083c:	221a      	movs	r2, #26
 800083e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000842:	2202      	movs	r2, #2
 8000844:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800084c:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800085a:	2203      	movs	r2, #3
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000872:	2208      	movs	r2, #8
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000878:	2200      	movs	r2, #0
 800087a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000882:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <MX_OCTOSPI1_Init+0xb4>)
 8000884:	f005 fde2 	bl	800644c <HAL_OSPI_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 800088e:	f000 f9d7 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000892:	2301      	movs	r3, #1
 8000894:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000896:	2301      	movs	r3, #1
 8000898:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f002 fb16 	bl	8002ecc <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 80008a0:	463b      	mov	r3, r7
 80008a2:	4619      	mov	r1, r3
 80008a4:	2000      	movs	r0, #0
 80008a6:	f002 fa87 	bl	8002db8 <BSP_OSPI_NOR_Init>
 80008aa:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80008b2:	f000 f9c5 	bl	8000c40 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f002 fba4 	bl	8003004 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80008bc:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80008c4:	f000 f9bc 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240002b4 	.word	0x240002b4
 80008d4:	52005000 	.word	0x52005000

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	@ 0x38
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ee:	4b8b      	ldr	r3, [pc, #556]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80008f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008f4:	4a89      	ldr	r2, [pc, #548]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008fe:	4b87      	ldr	r3, [pc, #540]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000900:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000908:	623b      	str	r3, [r7, #32]
 800090a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090c:	4b83      	ldr	r3, [pc, #524]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800090e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000912:	4a82      	ldr	r2, [pc, #520]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000918:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800091c:	4b7f      	ldr	r3, [pc, #508]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800091e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000926:	61fb      	str	r3, [r7, #28]
 8000928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800092a:	4b7c      	ldr	r3, [pc, #496]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800092c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000930:	4a7a      	ldr	r2, [pc, #488]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000936:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800093a:	4b78      	ldr	r3, [pc, #480]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800093c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000948:	4b74      	ldr	r3, [pc, #464]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800094a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800094e:	4a73      	ldr	r2, [pc, #460]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000954:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000958:	4b70      	ldr	r3, [pc, #448]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800095a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000966:	4b6d      	ldr	r3, [pc, #436]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000968:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800096c:	4a6b      	ldr	r2, [pc, #428]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000972:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000976:	4b69      	ldr	r3, [pc, #420]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000978:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800097c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b65      	ldr	r3, [pc, #404]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000986:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800098a:	4a64      	ldr	r2, [pc, #400]	@ (8000b1c <MX_GPIO_Init+0x244>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000994:	4b61      	ldr	r3, [pc, #388]	@ (8000b1c <MX_GPIO_Init+0x244>)
 8000996:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009a8:	4a5c      	ldr	r2, [pc, #368]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009b2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b56      	ldr	r3, [pc, #344]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009c6:	4a55      	ldr	r2, [pc, #340]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009d0:	4b52      	ldr	r3, [pc, #328]	@ (8000b1c <MX_GPIO_Init+0x244>)
 80009d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f640 0104 	movw	r1, #2052	@ 0x804
 80009e4:	484e      	ldr	r0, [pc, #312]	@ (8000b20 <MX_GPIO_Init+0x248>)
 80009e6:	f004 fa5b 	bl	8004ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 41c4 	mov.w	r1, #25088	@ 0x6200
 80009f0:	484c      	ldr	r0, [pc, #304]	@ (8000b24 <MX_GPIO_Init+0x24c>)
 80009f2:	f004 fa55 	bl	8004ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009fc:	484a      	ldr	r0, [pc, #296]	@ (8000b28 <MX_GPIO_Init+0x250>)
 80009fe:	f004 fa4f 	bl	8004ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2106      	movs	r1, #6
 8000a06:	4849      	ldr	r0, [pc, #292]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000a08:	f004 fa4a 	bl	8004ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000a0c:	f640 0304 	movw	r3, #2052	@ 0x804
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	483e      	ldr	r0, [pc, #248]	@ (8000b20 <MX_GPIO_Init+0x248>)
 8000a26:	f003 ff81 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8000a2a:	f44f 43c4 	mov.w	r3, #25088	@ 0x6200
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4838      	ldr	r0, [pc, #224]	@ (8000b24 <MX_GPIO_Init+0x24c>)
 8000a44:	f003 ff72 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4831      	ldr	r0, [pc, #196]	@ (8000b28 <MX_GPIO_Init+0x250>)
 8000a62:	f003 ff63 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000a66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	482c      	ldr	r0, [pc, #176]	@ (8000b30 <MX_GPIO_Init+0x258>)
 8000a7e:	f003 ff55 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a82:	2304      	movs	r3, #4
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	4823      	ldr	r0, [pc, #140]	@ (8000b24 <MX_GPIO_Init+0x24c>)
 8000a98:	f003 ff48 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH5 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8000a9c:	23e0      	movs	r3, #224	@ 0xe0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <MX_GPIO_Init+0x24c>)
 8000ab8:	f003 ff38 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000abc:	2302      	movs	r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000ad4:	f003 ff2a 	bl	800492c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <MX_GPIO_Init+0x254>)
 8000af0:	f003 ff1c 	bl	800492c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2105      	movs	r1, #5
 8000af8:	2008      	movs	r0, #8
 8000afa:	f003 fb55 	bl	80041a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000afe:	2008      	movs	r0, #8
 8000b00:	f003 fb6c 	bl	80041dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2105      	movs	r1, #5
 8000b08:	2028      	movs	r0, #40	@ 0x28
 8000b0a:	f003 fb4d 	bl	80041a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b0e:	2028      	movs	r0, #40	@ 0x28
 8000b10:	f003 fb64 	bl	80041dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b14:	bf00      	nop
 8000b16:	3738      	adds	r7, #56	@ 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	58024400 	.word	0x58024400
 8000b20:	58021800 	.word	0x58021800
 8000b24:	58021c00 	.word	0x58021c00
 8000b28:	58022000 	.word	0x58022000
 8000b2c:	58020000 	.word	0x58020000
 8000b30:	58020800 	.word	0x58020800

08000b34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
static uint32_t button_state = RESET;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b44:	d10c      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x2c>
		button_state ^= SET;
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f083 0301 	eor.w	r3, r3, #1
 8000b4e:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b50:	6013      	str	r3, [r2, #0]
		osMessageQueuePut(buttonQueueHandle, &button_state, 0, 0);
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_GPIO_EXTI_Callback+0x38>)
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4903      	ldr	r1, [pc, #12]	@ (8000b68 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b5c:	f009 fcee 	bl	800a53c <osMessageQueuePut>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2400031c 	.word	0x2400031c
 8000b6c:	24000318 	.word	0x24000318

08000b70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f009 fb31 	bl	800a1e0 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <StartDefaultTask+0x8>

08000b80 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b86:	463b      	mov	r3, r7
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b92:	f003 fb3f 	bl	8004214 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b9e:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000ba2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ba4:	231b      	movs	r3, #27
 8000ba6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fb5c 	bl	8004284 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000bd0:	2319      	movs	r3, #25
 8000bd2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fb50 	bl	8004284 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000be8:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000bec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000bee:	2313      	movs	r3, #19
 8000bf0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fb45 	bl	8004284 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bfe:	2311      	movs	r3, #17
 8000c00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c06:	463b      	mov	r3, r7
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fb3b 	bl	8004284 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c0e:	2004      	movs	r0, #4
 8000c10:	f003 fb18 	bl	8004244 <HAL_MPU_Enable>

}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f003 f99b 	bl	8003f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <Error_Handler+0x8>

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c62:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_MspInit+0x38>)
 8000c64:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	210f      	movs	r1, #15
 8000c74:	f06f 0001 	mvn.w	r0, #1
 8000c78:	f003 fa96 	bl	80041a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58024400 	.word	0x58024400

08000c88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_CRC_MspInit+0x3c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d10e      	bne.n	8000cb8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_CRC_MspInit+0x40>)
 8000c9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ca0:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <HAL_CRC_MspInit+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000caa:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_CRC_MspInit+0x40>)
 8000cac:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40023000 	.word	0x40023000
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <HAL_DMA2D_MspInit+0x48>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d116      	bne.n	8000d0c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_DMA2D_MspInit+0x4c>)
 8000ce0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d18 <HAL_DMA2D_MspInit+0x4c>)
 8000ce6:	f043 0310 	orr.w	r3, r3, #16
 8000cea:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_DMA2D_MspInit+0x4c>)
 8000cf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2105      	movs	r1, #5
 8000d00:	205a      	movs	r0, #90	@ 0x5a
 8000d02:	f003 fa51 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d06:	205a      	movs	r0, #90	@ 0x5a
 8000d08:	f003 fa68 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	52001000 	.word	0x52001000
 8000d18:	58024400 	.word	0x58024400

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	22c0      	movs	r2, #192	@ 0xc0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f01f ff82 	bl	8020c46 <memset>
  if(hi2c->Instance==I2C4)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_I2C_MspInit+0xc8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d146      	bne.n	8000dda <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d4c:	f04f 0210 	mov.w	r2, #16
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 fb2c 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000d6e:	f7ff ff67 	bl	8000c40 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000d7a:	f043 0308 	orr.w	r3, r3, #8
 8000d7e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000d84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000d90:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000daa:	2304      	movs	r3, #4
 8000dac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db4:	4619      	mov	r1, r3
 8000db6:	480d      	ldr	r0, [pc, #52]	@ (8000dec <HAL_I2C_MspInit+0xd0>)
 8000db8:	f003 fdb8 	bl	800492c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000dbe:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_I2C_MspInit+0xcc>)
 8000dce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	37e8      	adds	r7, #232	@ 0xe8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	58001c00 	.word	0x58001c00
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020c00 	.word	0x58020c00

08000df0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e30 <HAL_I2C_MspDeInit+0x40>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d111      	bne.n	8000e26 <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <HAL_I2C_MspDeInit+0x44>)
 8000e04:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_I2C_MspDeInit+0x44>)
 8000e0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000e0e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8000e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e16:	4808      	ldr	r0, [pc, #32]	@ (8000e38 <HAL_I2C_MspDeInit+0x48>)
 8000e18:	f003 ff38 	bl	8004c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8000e1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_I2C_MspDeInit+0x48>)
 8000e22:	f003 ff33 	bl	8004c8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	58001c00 	.word	0x58001c00
 8000e34:	58024400 	.word	0x58024400
 8000e38:	58020c00 	.word	0x58020c00

08000e3c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0bc      	sub	sp, #240	@ 0xf0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	22c0      	movs	r2, #192	@ 0xc0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f01f fef2 	bl	8020c46 <memset>
  if(hltdc->Instance==LTDC)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a57      	ldr	r2, [pc, #348]	@ (8000fc4 <HAL_LTDC_MspInit+0x188>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	f040 80a6 	bne.w	8000fba <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e6e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000e7a:	2318      	movs	r3, #24
 8000e7c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8000e7e:	23c9      	movs	r3, #201	@ 0xc9
 8000e80:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8000e8a:	2315      	movs	r3, #21
 8000e8c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8000e96:	f241 5356 	movw	r3, #5462	@ 0x1556
 8000e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	f107 0318 	add.w	r3, r7, #24
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f007 fa8d 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000eac:	f7ff fec8 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000eb0:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000eb2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8000eb6:	4a44      	ldr	r2, [pc, #272]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000eb8:	f043 0308 	orr.w	r3, r3, #8
 8000ebc:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
 8000ec0:	4b41      	ldr	r3, [pc, #260]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000ec2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ece:	4b3e      	ldr	r3, [pc, #248]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ede:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef2:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000ef4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f10:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f16:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <HAL_LTDC_MspInit+0x18c>)
 8000f1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000f28:	23ff      	movs	r3, #255	@ 0xff
 8000f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f40:	230e      	movs	r3, #14
 8000f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481f      	ldr	r0, [pc, #124]	@ (8000fcc <HAL_LTDC_MspInit+0x190>)
 8000f4e:	f003 fced 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f6c:	230e      	movs	r3, #14
 8000f6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f72:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f76:	4619      	mov	r1, r3
 8000f78:	4815      	ldr	r0, [pc, #84]	@ (8000fd0 <HAL_LTDC_MspInit+0x194>)
 8000f7a:	f003 fcd7 	bl	800492c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8000f7e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f98:	230e      	movs	r3, #14
 8000f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <HAL_LTDC_MspInit+0x198>)
 8000fa6:	f003 fcc1 	bl	800492c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2105      	movs	r1, #5
 8000fae:	2058      	movs	r0, #88	@ 0x58
 8000fb0:	f003 f8fa 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fb4:	2058      	movs	r0, #88	@ 0x58
 8000fb6:	f003 f911 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000fba:	bf00      	nop
 8000fbc:	37f0      	adds	r7, #240	@ 0xf0
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	50001000 	.word	0x50001000
 8000fc8:	58024400 	.word	0x58024400
 8000fcc:	58022800 	.word	0x58022800
 8000fd0:	58022400 	.word	0x58022400
 8000fd4:	58022000 	.word	0x58022000

08000fd8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0b4      	sub	sp, #208	@ 0xd0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	22c0      	movs	r2, #192	@ 0xc0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f01f fe2c 	bl	8020c46 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8001070 <HAL_OSPI_MspInit+0x98>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d137      	bne.n	8001068 <HAL_OSPI_MspInit+0x90>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000ff8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001004:	2300      	movs	r3, #0
 8001006:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4618      	mov	r0, r3
 800100e:	f007 f9d7 	bl	80083c0 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_OSPI_MspInit+0x44>
    {
      Error_Handler();
 8001018:	f7ff fe12 	bl	8000c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 800101e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001022:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 8001024:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001028:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 800102e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001032:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 800103c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001046:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_OSPI_MspInit+0x9c>)
 800104c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2105      	movs	r1, #5
 800105c:	205c      	movs	r0, #92	@ 0x5c
 800105e:	f003 f8a3 	bl	80041a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8001062:	205c      	movs	r0, #92	@ 0x5c
 8001064:	f003 f8ba 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	37d0      	adds	r7, #208	@ 0xd0
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	52005000 	.word	0x52005000
 8001074:	58024400 	.word	0x58024400

08001078 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_OSPI_MspDeInit+0x40>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d112      	bne.n	80010b0 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <HAL_OSPI_MspDeInit+0x44>)
 800108c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_OSPI_MspDeInit+0x44>)
 8001092:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001096:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_OSPI_MspDeInit+0x44>)
 800109c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <HAL_OSPI_MspDeInit+0x44>)
 80010a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010a6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 80010aa:	205c      	movs	r0, #92	@ 0x5c
 80010ac:	f003 f8a4 	bl	80041f8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	52005000 	.word	0x52005000
 80010bc:	58024400 	.word	0x58024400

080010c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	@ 0x40
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b0f      	cmp	r3, #15
 80010cc:	d827      	bhi.n	800111e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010ce:	2200      	movs	r2, #0
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	2036      	movs	r0, #54	@ 0x36
 80010d4:	f003 f868 	bl	80041a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010d8:	2036      	movs	r0, #54	@ 0x36
 80010da:	f003 f87f 	bl	80041dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010de:	4a29      	ldr	r2, [pc, #164]	@ (8001184 <HAL_InitTick+0xc4>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010e4:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <HAL_InitTick+0xc8>)
 80010e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010ea:	4a27      	ldr	r2, [pc, #156]	@ (8001188 <HAL_InitTick+0xc8>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <HAL_InitTick+0xc8>)
 80010f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001102:	f107 0210 	add.w	r2, r7, #16
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f007 f915 	bl	800833c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001114:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <HAL_InitTick+0x6a>
 800111c:	e001      	b.n	8001122 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e02b      	b.n	800117a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001122:	f007 f8df 	bl	80082e4 <HAL_RCC_GetPCLK1Freq>
 8001126:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001128:	e004      	b.n	8001134 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800112a:	f007 f8db 	bl	80082e4 <HAL_RCC_GetPCLK1Freq>
 800112e:	4603      	mov	r3, r0
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <HAL_InitTick+0xcc>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	3b01      	subs	r3, #1
 8001140:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_InitTick+0xd0>)
 8001144:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <HAL_InitTick+0xd4>)
 8001146:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_InitTick+0xd0>)
 800114a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800114e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001150:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <HAL_InitTick+0xd0>)
 8001152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001154:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_InitTick+0xd0>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_InitTick+0xd0>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001162:	480b      	ldr	r0, [pc, #44]	@ (8001190 <HAL_InitTick+0xd0>)
 8001164:	f008 fc4e 	bl	8009a04 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d104      	bne.n	8001178 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <HAL_InitTick+0xd0>)
 8001170:	f008 fcaa 	bl	8009ac8 <HAL_TIM_Base_Start_IT>
 8001174:	4603      	mov	r3, r0
 8001176:	e000      	b.n	800117a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3740      	adds	r7, #64	@ 0x40
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2400003c 	.word	0x2400003c
 8001188:	58024400 	.word	0x58024400
 800118c:	431bde83 	.word	0x431bde83
 8001190:	24000320 	.word	0x24000320
 8001194:	40001000 	.word	0x40001000

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <NMI_Handler+0x4>

080011a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <MemManage_Handler+0x4>

080011b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <UsageFault_Handler+0x4>

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 80011d2:	2004      	movs	r0, #4
 80011d4:	f003 fe97 	bl	8004f06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80011e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011e4:	f003 fe8f 	bl	8004f06 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <TIM6_DAC_IRQHandler+0x10>)
 80011f2:	f008 fce1 	bl	8009bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	24000320 	.word	0x24000320

08001200 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001204:	4802      	ldr	r0, [pc, #8]	@ (8001210 <LTDC_IRQHandler+0x10>)
 8001206:	f004 fdd7 	bl	8005db8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2400020c 	.word	0x2400020c

08001214 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001218:	4802      	ldr	r0, [pc, #8]	@ (8001224 <DMA2D_IRQHandler+0x10>)
 800121a:	f003 f9c9 	bl	80045b0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	24000150 	.word	0x24000150

08001228 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <OCTOSPI1_IRQHandler+0x10>)
 800122e:	f005 f9f1 	bl	8006614 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	240002b4 	.word	0x240002b4

0800123c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_kill>:

int _kill(int pid, int sig)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001256:	f01f fdef 	bl	8020e38 <__errno>
 800125a:	4603      	mov	r3, r0
 800125c:	2216      	movs	r2, #22
 800125e:	601a      	str	r2, [r3, #0]
  return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_exit>:

void _exit (int status)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffe7 	bl	800124c <_kill>
  while (1) {}    /* Make sure we hang here */
 800127e:	bf00      	nop
 8001280:	e7fd      	b.n	800127e <_exit+0x12>

08001282 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	e00a      	b.n	80012aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001294:	f3af 8000 	nop.w
 8001298:	4601      	mov	r1, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	60ba      	str	r2, [r7, #8]
 80012a0:	b2ca      	uxtb	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dbf0      	blt.n	8001294 <_read+0x12>
  }

  return len;
 80012b2:	687b      	ldr	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e009      	b.n	80012e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf1      	blt.n	80012ce <_write+0x12>
  }
  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_close>:

int _close(int file)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800131c:	605a      	str	r2, [r3, #4]
  return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_isatty>:

int _isatty(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001334:	2301      	movs	r3, #1
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	@ (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f01f fd54 	bl	8020e38 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24040000 	.word	0x24040000
 80013bc:	00001000 	.word	0x00001000
 80013c0:	2400036c 	.word	0x2400036c
 80013c4:	2401c158 	.word	0x2401c158

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013cc:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <SystemInit+0xd0>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013d2:	4a31      	ldr	r2, [pc, #196]	@ (8001498 <SystemInit+0xd0>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <SystemInit+0xd4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d807      	bhi.n	80013f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <SystemInit+0xd4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	4a2a      	ldr	r2, [pc, #168]	@ (800149c <SystemInit+0xd4>)
 80013f2:	f043 0303 	orr.w	r3, r3, #3
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <SystemInit+0xd8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a28      	ldr	r2, [pc, #160]	@ (80014a0 <SystemInit+0xd8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001404:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <SystemInit+0xd8>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <SystemInit+0xd8>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4924      	ldr	r1, [pc, #144]	@ (80014a0 <SystemInit+0xd8>)
 8001410:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <SystemInit+0xdc>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001416:	4b21      	ldr	r3, [pc, #132]	@ (800149c <SystemInit+0xd4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001422:	4b1e      	ldr	r3, [pc, #120]	@ (800149c <SystemInit+0xd4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <SystemInit+0xd4>)
 800142c:	f043 0303 	orr.w	r3, r3, #3
 8001430:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001432:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <SystemInit+0xd8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <SystemInit+0xd8>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <SystemInit+0xd8>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <SystemInit+0xd8>)
 8001446:	4a18      	ldr	r2, [pc, #96]	@ (80014a8 <SystemInit+0xe0>)
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <SystemInit+0xd8>)
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <SystemInit+0xe4>)
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <SystemInit+0xd8>)
 8001452:	4a17      	ldr	r2, [pc, #92]	@ (80014b0 <SystemInit+0xe8>)
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <SystemInit+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <SystemInit+0xd8>)
 800145e:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <SystemInit+0xe8>)
 8001460:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <SystemInit+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001468:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <SystemInit+0xd8>)
 800146a:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <SystemInit+0xe8>)
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800146e:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <SystemInit+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <SystemInit+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <SystemInit+0xd8>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <SystemInit+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <SystemInit+0xec>)
 8001488:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800148c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	52002000 	.word	0x52002000
 80014a0:	58024400 	.word	0x58024400
 80014a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014a8:	02020200 	.word	0x02020200
 80014ac:	01ff0000 	.word	0x01ff0000
 80014b0:	01010280 	.word	0x01010280
 80014b4:	52004000 	.word	0x52004000

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014bc:	f7ff ff84 	bl	80013c8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f01f fcad 	bl	8020e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7fe ff59 	bl	80003a0 <main>
  bx  lr
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80014f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f8:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 80014fc:	08023560 	.word	0x08023560
  ldr r2, =_sbss
 8001500:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8001504:	2401c158 	.word	0x2401c158

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>
	...

0800150c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	e02c      	b.n	800157e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	891a      	ldrh	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <FT5336_RegisterBusIO+0x7c>)
 8001558:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0b      	ldr	r2, [pc, #44]	@ (800158c <FT5336_RegisterBusIO+0x80>)
 800155e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d004      	beq.n	8001578 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4798      	blx	r3
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	e002      	b.n	800157e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	08001985 	.word	0x08001985
 800158c:	080019b9 	.word	0x080019b9

08001590 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2205      	movs	r2, #5
 80015aa:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80015b2:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80015ba:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f987 	bl	80018fa <FT5336_DisableIT>
 80015ec:	4602      	mov	r2, r0
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d002      	beq.n	8001608 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d103      	bne.n	8001630 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 8001630:	68fb      	ldr	r3, [r7, #12]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 0218 	add.w	r2, r3, #24
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4619      	mov	r1, r3
 8001656:	4610      	mov	r0, r2
 8001658:	f000 fa25 	bl	8001aa6 <ft5336_radian_value>
 800165c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0218 	add.w	r2, r3, #24
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f000 fa2b 	bl	8001ac8 <ft5336_offset_left_right>
 8001672:	4602      	mov	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f103 0218 	add.w	r2, r3, #24
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f000 fa2e 	bl	8001aea <ft5336_offset_up_down>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f103 0218 	add.w	r2, r3, #24
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f000 fa31 	bl	8001b0c <ft5336_disatnce_left_right>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f103 0218 	add.w	r2, r3, #24
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	4610      	mov	r0, r2
 80016c2:	f000 fa34 	bl	8001b2e <ft5336_distance_up_down>
 80016c6:	4602      	mov	r2, r0
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0218 	add.w	r2, r3, #24
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f000 fa37 	bl	8001b50 <ft5336_distance_zoom>
 80016e2:	4602      	mov	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3318      	adds	r3, #24
 800170e:	6839      	ldr	r1, [r7, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fa3f 	bl	8001b94 <ft5336_chip_id>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f908 	bl	8001944 <FT5336_DetectTouch>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f103 0018 	add.w	r0, r3, #24
 8001742:	f107 0208 	add.w	r2, r7, #8
 8001746:	2304      	movs	r3, #4
 8001748:	2103      	movs	r1, #3
 800174a:	f000 f94f 	bl	80019ec <ft5336_read_reg>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e00f      	b.n	800177c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001764:	7a7a      	ldrb	r2, [r7, #9]
 8001766:	431a      	orrs	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800176c:	7abb      	ldrb	r3, [r7, #10]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001774:	7afa      	ldrb	r2, [r7, #11]
 8001776:	431a      	orrs	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b08c      	sub	sp, #48	@ 0x30
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f8d5 	bl	8001944 <FT5336_DetectTouch>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0018 	add.w	r0, r3, #24
 80017a8:	f107 0208 	add.w	r2, r7, #8
 80017ac:	231e      	movs	r3, #30
 80017ae:	2103      	movs	r1, #3
 80017b0:	f000 f91c 	bl	80019ec <ft5336_read_reg>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c0:	e077      	b.n	80018b2 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017c6:	e071      	b.n	80018ac <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 80017c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	3330      	adds	r3, #48	@ 0x30
 80017d4:	443b      	add	r3, r7
 80017d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 80017e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3301      	adds	r3, #1
 80017ec:	3330      	adds	r3, #48	@ 0x30
 80017ee:	443b      	add	r3, r7
 80017f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017f4:	ea41 0203 	orr.w	r2, r1, r3
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8001802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	3302      	adds	r3, #2
 800180e:	3330      	adds	r3, #48	@ 0x30
 8001810:	443b      	add	r3, r7
 8001812:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800181c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	3303      	adds	r3, #3
 8001828:	3330      	adds	r3, #48	@ 0x30
 800182a:	443b      	add	r3, r7
 800182c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001830:	4319      	orrs	r1, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001836:	3206      	adds	r2, #6
 8001838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800183c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3330      	adds	r3, #48	@ 0x30
 8001848:	443b      	add	r3, r7
 800184a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001858:	3210      	adds	r2, #16
 800185a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800185e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	3304      	adds	r3, #4
 800186a:	3330      	adds	r3, #48	@ 0x30
 800186c:	443b      	add	r3, r7
 800186e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001872:	4619      	mov	r1, r3
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001878:	330a      	adds	r3, #10
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8001880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3305      	adds	r3, #5
 800188c:	3330      	adds	r3, #48	@ 0x30
 800188e:	443b      	add	r3, r7
 8001890:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	b2db      	uxtb	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189e:	3314      	adds	r3, #20
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80018a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a8:	3301      	adds	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d98a      	bls.n	80017c8 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3730      	adds	r7, #48	@ 0x30
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3318      	adds	r3, #24
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f8bb 	bl	8001a48 <ft5336_gest_id>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3318      	adds	r3, #24
 80018e8:	2101      	movs	r1, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f941 	bl	8001b72 <ft5336_g_mode>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3318      	adds	r3, #24
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f932 	bl	8001b72 <ft5336_g_mode>
 800190e:	4603      	mov	r3, r0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3318      	adds	r3, #24
 8001950:	f107 020b 	add.w	r2, r7, #11
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f886 	bl	8001a68 <ft5336_td_status>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e007      	b.n	800197a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d902      	bls.n	8001976 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e001      	b.n	800197a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8001976:	7afb      	ldrb	r3, [r7, #11]
 8001978:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	461a      	mov	r2, r3
 8001990:	460b      	mov	r3, r1
 8001992:	72fb      	strb	r3, [r7, #11]
 8001994:	4613      	mov	r3, r2
 8001996:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	691c      	ldr	r4, [r3, #16]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	8918      	ldrh	r0, [r3, #8]
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b299      	uxth	r1, r3
 80019a8:	893b      	ldrh	r3, [r7, #8]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	47a0      	blx	r4
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	461a      	mov	r2, r3
 80019c4:	460b      	mov	r3, r1
 80019c6:	72fb      	strb	r3, [r7, #11]
 80019c8:	4613      	mov	r3, r2
 80019ca:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	68dc      	ldr	r4, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	8918      	ldrh	r0, [r3, #8]
 80019d8:	7afb      	ldrb	r3, [r7, #11]
 80019da:	b299      	uxth	r1, r3
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	47a0      	blx	r4
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd90      	pop	{r4, r7, pc}

080019ec <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	461a      	mov	r2, r3
 80019f8:	460b      	mov	r3, r1
 80019fa:	72fb      	strb	r3, [r7, #11]
 80019fc:	4613      	mov	r3, r2
 80019fe:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685c      	ldr	r4, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6898      	ldr	r0, [r3, #8]
 8001a08:	893b      	ldrh	r3, [r7, #8]
 8001a0a:	7af9      	ldrb	r1, [r7, #11]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	47a0      	blx	r4
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}

08001a1a <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001a1a:	b590      	push	{r4, r7, lr}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	461a      	mov	r2, r3
 8001a26:	460b      	mov	r3, r1
 8001a28:	72fb      	strb	r3, [r7, #11]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6898      	ldr	r0, [r3, #8]
 8001a36:	893b      	ldrh	r3, [r7, #8]
 8001a38:	7af9      	ldrb	r1, [r7, #11]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	47a0      	blx	r4
 8001a3e:	4603      	mov	r3, r0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd90      	pop	{r4, r7, pc}

08001a48 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8001a52:	2301      	movs	r3, #1
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ffc7 	bl	80019ec <ft5336_read_reg>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8001a72:	2301      	movs	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	2102      	movs	r1, #2
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffb7 	bl	80019ec <ft5336_read_reg>
 8001a7e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10a      	bne.n	8001a9c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8001ab2:	1cfa      	adds	r2, r7, #3
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2191      	movs	r1, #145	@ 0x91
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffae 	bl	8001a1a <ft5336_write_reg>
 8001abe:	4603      	mov	r3, r0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8001ad4:	1cfa      	adds	r2, r7, #3
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	2192      	movs	r1, #146	@ 0x92
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff9d 	bl	8001a1a <ft5336_write_reg>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8001af6:	1cfa      	adds	r2, r7, #3
 8001af8:	2301      	movs	r3, #1
 8001afa:	2193      	movs	r1, #147	@ 0x93
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff8c 	bl	8001a1a <ft5336_write_reg>
 8001b02:	4603      	mov	r3, r0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8001b18:	1cfa      	adds	r2, r7, #3
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2194      	movs	r1, #148	@ 0x94
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff7b 	bl	8001a1a <ft5336_write_reg>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8001b3a:	1cfa      	adds	r2, r7, #3
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	2195      	movs	r1, #149	@ 0x95
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff6a 	bl	8001a1a <ft5336_write_reg>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8001b5c:	1cfa      	adds	r2, r7, #3
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2196      	movs	r1, #150	@ 0x96
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff59 	bl	8001a1a <ft5336_write_reg>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8001b7e:	1cfa      	adds	r2, r7, #3
 8001b80:	2301      	movs	r3, #1
 8001b82:	21a4      	movs	r1, #164	@ 0xa4
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff48 	bl	8001a1a <ft5336_write_reg>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	21a8      	movs	r1, #168	@ 0xa8
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff21 	bl	80019ec <ft5336_read_reg>
 8001baa:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bda:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001be2:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bea:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf2:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bfa:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c02:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c0a:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c12:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c1a:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8001c1c:	2300      	movs	r3, #0
};
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b09c      	sub	sp, #112	@ 0x70
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
 8001c36:	4613      	mov	r3, r2
 8001c38:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2250      	movs	r2, #80	@ 0x50
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f01e ffff 	bl	8020c46 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <MX25LM51245G_AutoPollingMemReady+0x40>
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	e088      	b.n	8001d7c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <MX25LM51245G_AutoPollingMemReady+0x52>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <MX25LM51245G_AutoPollingMemReady+0x54>
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001c80:	78bb      	ldrb	r3, [r7, #2]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <MX25LM51245G_AutoPollingMemReady+0x60>
 8001c86:	2308      	movs	r3, #8
 8001c88:	e000      	b.n	8001c8c <MX25LM51245G_AutoPollingMemReady+0x62>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <MX25LM51245G_AutoPollingMemReady+0x6e>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <MX25LM51245G_AutoPollingMemReady+0x70>
 8001c98:	2310      	movs	r3, #16
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <MX25LM51245G_AutoPollingMemReady+0x7c>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e001      	b.n	8001caa <MX25LM51245G_AutoPollingMemReady+0x80>
 8001ca6:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <MX25LM51245G_AutoPollingMemReady+0x8c>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e001      	b.n	8001cba <MX25LM51245G_AutoPollingMemReady+0x90>
 8001cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001cbc:	78bb      	ldrb	r3, [r7, #2]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <MX25LM51245G_AutoPollingMemReady+0x9e>
 8001cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cc6:	e000      	b.n	8001cca <MX25LM51245G_AutoPollingMemReady+0xa0>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001ccc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <MX25LM51245G_AutoPollingMemReady+0xbc>
 8001ce0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ce4:	e001      	b.n	8001cea <MX25LM51245G_AutoPollingMemReady+0xc0>
 8001ce6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001cea:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <MX25LM51245G_AutoPollingMemReady+0xce>
 8001cf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001cf6:	e000      	b.n	8001cfa <MX25LM51245G_AutoPollingMemReady+0xd0>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <MX25LM51245G_AutoPollingMemReady+0xdc>
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <MX25LM51245G_AutoPollingMemReady+0xde>
 8001d06:	2305      	movs	r3, #5
 8001d08:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001d0a:	78bb      	ldrb	r3, [r7, #2]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <MX25LM51245G_AutoPollingMemReady+0xea>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e000      	b.n	8001d16 <MX25LM51245G_AutoPollingMemReady+0xec>
 8001d14:	2301      	movs	r3, #1
 8001d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8001d18:	78bb      	ldrb	r3, [r7, #2]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d102      	bne.n	8001d24 <MX25LM51245G_AutoPollingMemReady+0xfa>
 8001d1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d22:	e000      	b.n	8001d26 <MX25LM51245G_AutoPollingMemReady+0xfc>
 8001d24:	2300      	movs	r3, #0
 8001d26:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.Match         = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001d3c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d40:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f004 fda3 	bl	8006898 <HAL_OSPI_Command>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e00e      	b.n	8001d7c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f004 ff38 	bl	8006bde <HAL_OSPI_AutoPolling>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e000      	b.n	8001d7c <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3770      	adds	r7, #112	@ 0x70
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b098      	sub	sp, #96	@ 0x60
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
 8001d90:	4613      	mov	r3, r2
 8001d92:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2250      	movs	r2, #80	@ 0x50
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f01e ff52 	bl	8020c46 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8001db2:	78bb      	ldrb	r3, [r7, #2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e088      	b.n	8001ed0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8001de2:	2310      	movs	r3, #16
 8001de4:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8001dec:	78bb      	ldrb	r3, [r7, #2]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8001df2:	230b      	movs	r3, #11
 8001df4:	e003      	b.n	8001dfe <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8001df6:	230c      	movs	r3, #12
 8001df8:	e001      	b.n	8001dfe <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8001dfa:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8001dfe:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8001e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0a:	e001      	b.n	8001e10 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8001e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8001e16:	78bb      	ldrb	r3, [r7, #2]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8001e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e20:	e001      	b.n	8001e26 <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8001e22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8001e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e36:	e001      	b.n	8001e3c <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8001e38:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8001e48:	2308      	movs	r3, #8
 8001e4a:	e000      	b.n	8001e4e <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001e54:	2300      	movs	r3, #0
 8001e56:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f004 fd18 	bl	8006898 <HAL_OSPI_Command>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e02d      	b.n	8001ed0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8001e7e:	78bb      	ldrb	r3, [r7, #2]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e003      	b.n	8001e90 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8001e88:	2312      	movs	r3, #18
 8001e8a:	e001      	b.n	8001e90 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8001e8c:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001e90:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e96:	f107 0310 	add.w	r3, r7, #16
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f004 fcf9 	bl	8006898 <HAL_OSPI_Command>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	e00e      	b.n	8001ed0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f004 ff15 	bl	8006cec <HAL_OSPI_MemoryMapped>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	e000      	b.n	8001ed0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3760      	adds	r7, #96	@ 0x60
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b098      	sub	sp, #96	@ 0x60
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2250      	movs	r2, #80	@ 0x50
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f01e feaa 	bl	8020c46 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001f04:	2304      	movs	r3, #4
 8001f06:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001f08:	2308      	movs	r3, #8
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8001f10:	f64e 6311 	movw	r3, #60945	@ 0xee11
 8001f14:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f20:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001f22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001f2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f30:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001f32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001f36:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8001f38:	2306      	movs	r3, #6
 8001f3a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001f3c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f40:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001f42:	2300      	movs	r3, #0
 8001f44:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f004 fca1 	bl	8006898 <HAL_OSPI_Command>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	e025      	b.n	8001fae <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001f66:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001f6a:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f004 fc8a 	bl	8006898 <HAL_OSPI_Command>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e00e      	b.n	8001fae <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f004 fea6 	bl	8006cec <HAL_OSPI_MemoryMapped>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e000      	b.n	8001fae <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3760      	adds	r7, #96	@ 0x60
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b09c      	sub	sp, #112	@ 0x70
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2250      	movs	r2, #80	@ 0x50
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f01e fe39 	bl	8020c46 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <MX25LM51245G_WriteEnable+0x40>
 8001fea:	78bb      	ldrb	r3, [r7, #2]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d102      	bne.n	8001ff6 <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	e0a6      	b.n	8002144 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <MX25LM51245G_WriteEnable+0x52>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <MX25LM51245G_WriteEnable+0x54>
 8002008:	2304      	movs	r3, #4
 800200a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800200c:	78bb      	ldrb	r3, [r7, #2]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <MX25LM51245G_WriteEnable+0x60>
 8002012:	2308      	movs	r3, #8
 8002014:	e000      	b.n	8002018 <MX25LM51245G_WriteEnable+0x62>
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <MX25LM51245G_WriteEnable+0x6e>
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <MX25LM51245G_WriteEnable+0x70>
 8002024:	2310      	movs	r3, #16
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <MX25LM51245G_WriteEnable+0x7c>
 800202e:	2306      	movs	r3, #6
 8002030:	e001      	b.n	8002036 <MX25LM51245G_WriteEnable+0x80>
 8002032:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8002040:	2300      	movs	r3, #0
 8002042:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800204c:	2300      	movs	r3, #0
 800204e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002050:	f107 0320 	add.w	r3, r7, #32
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	4619      	mov	r1, r3
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f004 fc1c 	bl	8006898 <HAL_OSPI_Command>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e06b      	b.n	8002144 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <MX25LM51245G_WriteEnable+0xc0>
 8002072:	2305      	movs	r3, #5
 8002074:	e001      	b.n	800207a <MX25LM51245G_WriteEnable+0xc4>
 8002076:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <MX25LM51245G_WriteEnable+0xd0>
 8002082:	2300      	movs	r3, #0
 8002084:	e001      	b.n	800208a <MX25LM51245G_WriteEnable+0xd4>
 8002086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800208c:	78bb      	ldrb	r3, [r7, #2]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <MX25LM51245G_WriteEnable+0xe2>
 8002092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002096:	e000      	b.n	800209a <MX25LM51245G_WriteEnable+0xe4>
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 800209c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020a0:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <MX25LM51245G_WriteEnable+0xfc>
 80020ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020b0:	e001      	b.n	80020b6 <MX25LM51245G_WriteEnable+0x100>
 80020b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80020b8:	78bb      	ldrb	r3, [r7, #2]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d102      	bne.n	80020c4 <MX25LM51245G_WriteEnable+0x10e>
 80020be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80020c2:	e000      	b.n	80020c6 <MX25LM51245G_WriteEnable+0x110>
 80020c4:	2300      	movs	r3, #0
 80020c6:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <MX25LM51245G_WriteEnable+0x11c>
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <MX25LM51245G_WriteEnable+0x11e>
 80020d2:	2305      	movs	r3, #5
 80020d4:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80020d6:	78bb      	ldrb	r3, [r7, #2]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <MX25LM51245G_WriteEnable+0x12a>
 80020dc:	2302      	movs	r3, #2
 80020de:	e000      	b.n	80020e2 <MX25LM51245G_WriteEnable+0x12c>
 80020e0:	2301      	movs	r3, #1
 80020e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80020e4:	78bb      	ldrb	r3, [r7, #2]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <MX25LM51245G_WriteEnable+0x13a>
 80020ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020ee:	e000      	b.n	80020f2 <MX25LM51245G_WriteEnable+0x13c>
 80020f0:	2300      	movs	r3, #0
 80020f2:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80020f4:	f107 0320 	add.w	r3, r7, #32
 80020f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fc:	4619      	mov	r1, r3
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f004 fbca 	bl	8006898 <HAL_OSPI_Command>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e019      	b.n	8002144 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8002110:	2302      	movs	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 800211c:	2310      	movs	r3, #16
 800211e:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002120:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002124:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f004 fd54 	bl	8006bde <HAL_OSPI_AutoPolling>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	e000      	b.n	8002144 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3770      	adds	r7, #112	@ 0x70
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b098      	sub	sp, #96	@ 0x60
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	72fb      	strb	r3, [r7, #11]
 800215a:	4613      	mov	r3, r2
 800215c:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	2250      	movs	r2, #80	@ 0x50
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f01e fd6d 	bl	8020c46 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <MX25LM51245G_WriteCfg2Register+0x32>
 8002172:	7abb      	ldrb	r3, [r7, #10]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	e077      	b.n	800226e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002186:	7afb      	ldrb	r3, [r7, #11]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <MX25LM51245G_WriteCfg2Register+0x44>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <MX25LM51245G_WriteCfg2Register+0x46>
 8002190:	2304      	movs	r3, #4
 8002192:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002194:	7abb      	ldrb	r3, [r7, #10]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <MX25LM51245G_WriteCfg2Register+0x52>
 800219a:	2308      	movs	r3, #8
 800219c:	e000      	b.n	80021a0 <MX25LM51245G_WriteCfg2Register+0x54>
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <MX25LM51245G_WriteCfg2Register+0x60>
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <MX25LM51245G_WriteCfg2Register+0x62>
 80021ac:	2310      	movs	r3, #16
 80021ae:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <MX25LM51245G_WriteCfg2Register+0x6e>
 80021b6:	2372      	movs	r3, #114	@ 0x72
 80021b8:	e001      	b.n	80021be <MX25LM51245G_WriteCfg2Register+0x72>
 80021ba:	f247 238d 	movw	r3, #29325	@ 0x728d
 80021be:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <MX25LM51245G_WriteCfg2Register+0x80>
 80021c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ca:	e001      	b.n	80021d0 <MX25LM51245G_WriteCfg2Register+0x84>
 80021cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80021d2:	7abb      	ldrb	r3, [r7, #10]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <MX25LM51245G_WriteCfg2Register+0x92>
 80021d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021dc:	e000      	b.n	80021e0 <MX25LM51245G_WriteCfg2Register+0x94>
 80021de:	2300      	movs	r3, #0
 80021e0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80021e2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80021f0:	7afb      	ldrb	r3, [r7, #11]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <MX25LM51245G_WriteCfg2Register+0xb0>
 80021f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021fa:	e001      	b.n	8002200 <MX25LM51245G_WriteCfg2Register+0xb4>
 80021fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002200:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002202:	7abb      	ldrb	r3, [r7, #10]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d102      	bne.n	800220e <MX25LM51245G_WriteCfg2Register+0xc2>
 8002208:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800220c:	e000      	b.n	8002210 <MX25LM51245G_WriteCfg2Register+0xc4>
 800220e:	2300      	movs	r3, #0
 8002210:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <MX25LM51245G_WriteCfg2Register+0xde>
 800221c:	7abb      	ldrb	r3, [r7, #10]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <MX25LM51245G_WriteCfg2Register+0xda>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <MX25LM51245G_WriteCfg2Register+0xe0>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <MX25LM51245G_WriteCfg2Register+0xe0>
 800222a:	2301      	movs	r3, #1
 800222c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002232:	2300      	movs	r3, #0
 8002234:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002236:	f107 0310 	add.w	r3, r7, #16
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4619      	mov	r1, r3
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f004 fb29 	bl	8006898 <HAL_OSPI_Command>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	e00d      	b.n	800226e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f004 fba9 	bl	80069b2 <HAL_OSPI_Transmit>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e000      	b.n	800226e <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3760      	adds	r7, #96	@ 0x60
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b098      	sub	sp, #96	@ 0x60
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	72fb      	strb	r3, [r7, #11]
 8002284:	4613      	mov	r3, r2
 8002286:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2250      	movs	r2, #80	@ 0x50
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f01e fcd8 	bl	8020c46 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002296:	7afb      	ldrb	r3, [r7, #11]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <MX25LM51245G_ReadCfg2Register+0x32>
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e07c      	b.n	80023a2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <MX25LM51245G_ReadCfg2Register+0x44>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <MX25LM51245G_ReadCfg2Register+0x46>
 80022ba:	2304      	movs	r3, #4
 80022bc:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80022be:	7abb      	ldrb	r3, [r7, #10]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <MX25LM51245G_ReadCfg2Register+0x52>
 80022c4:	2308      	movs	r3, #8
 80022c6:	e000      	b.n	80022ca <MX25LM51245G_ReadCfg2Register+0x54>
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <MX25LM51245G_ReadCfg2Register+0x60>
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <MX25LM51245G_ReadCfg2Register+0x62>
 80022d6:	2310      	movs	r3, #16
 80022d8:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <MX25LM51245G_ReadCfg2Register+0x6e>
 80022e0:	2371      	movs	r3, #113	@ 0x71
 80022e2:	e001      	b.n	80022e8 <MX25LM51245G_ReadCfg2Register+0x72>
 80022e4:	f247 138e 	movw	r3, #29070	@ 0x718e
 80022e8:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80022ea:	7afb      	ldrb	r3, [r7, #11]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <MX25LM51245G_ReadCfg2Register+0x80>
 80022f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f4:	e001      	b.n	80022fa <MX25LM51245G_ReadCfg2Register+0x84>
 80022f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80022fc:	7abb      	ldrb	r3, [r7, #10]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <MX25LM51245G_ReadCfg2Register+0x92>
 8002302:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002306:	e000      	b.n	800230a <MX25LM51245G_ReadCfg2Register+0x94>
 8002308:	2300      	movs	r3, #0
 800230a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800230c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002316:	2300      	movs	r3, #0
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800231a:	7afb      	ldrb	r3, [r7, #11]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <MX25LM51245G_ReadCfg2Register+0xb0>
 8002320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002324:	e001      	b.n	800232a <MX25LM51245G_ReadCfg2Register+0xb4>
 8002326:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800232a:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800232c:	7abb      	ldrb	r3, [r7, #10]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <MX25LM51245G_ReadCfg2Register+0xc2>
 8002332:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002336:	e000      	b.n	800233a <MX25LM51245G_ReadCfg2Register+0xc4>
 8002338:	2300      	movs	r3, #0
 800233a:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <MX25LM51245G_ReadCfg2Register+0xd0>
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <MX25LM51245G_ReadCfg2Register+0xd2>
 8002346:	2305      	movs	r3, #5
 8002348:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800234a:	7abb      	ldrb	r3, [r7, #10]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <MX25LM51245G_ReadCfg2Register+0xde>
 8002350:	2302      	movs	r3, #2
 8002352:	e000      	b.n	8002356 <MX25LM51245G_ReadCfg2Register+0xe0>
 8002354:	2301      	movs	r3, #1
 8002356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8002358:	7abb      	ldrb	r3, [r7, #10]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d102      	bne.n	8002364 <MX25LM51245G_ReadCfg2Register+0xee>
 800235e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002362:	e000      	b.n	8002366 <MX25LM51245G_ReadCfg2Register+0xf0>
 8002364:	2300      	movs	r3, #0
 8002366:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002368:	2300      	movs	r3, #0
 800236a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002374:	4619      	mov	r1, r3
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f004 fa8e 	bl	8006898 <HAL_OSPI_Command>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e00c      	b.n	80023a2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f004 fb82 	bl	8006a98 <HAL_OSPI_Receive>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e000      	b.n	80023a2 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3760      	adds	r7, #96	@ 0x60
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b096      	sub	sp, #88	@ 0x58
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
 80023b6:	4613      	mov	r3, r2
 80023b8:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	2250      	movs	r2, #80	@ 0x50
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f01e fc3f 	bl	8020c46 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <MX25LM51245G_ResetEnable+0x30>
 80023ce:	78bb      	ldrb	r3, [r7, #2]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295
 80023d8:	e03b      	b.n	8002452 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <MX25LM51245G_ResetEnable+0x42>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <MX25LM51245G_ResetEnable+0x44>
 80023ec:	2304      	movs	r3, #4
 80023ee:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023f0:	78bb      	ldrb	r3, [r7, #2]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <MX25LM51245G_ResetEnable+0x50>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e000      	b.n	80023fc <MX25LM51245G_ResetEnable+0x52>
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <MX25LM51245G_ResetEnable+0x5e>
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <MX25LM51245G_ResetEnable+0x60>
 8002408:	2310      	movs	r3, #16
 800240a:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <MX25LM51245G_ResetEnable+0x6c>
 8002412:	2366      	movs	r3, #102	@ 0x66
 8002414:	e001      	b.n	800241a <MX25LM51245G_ResetEnable+0x70>
 8002416:	f246 6399 	movw	r3, #26265	@ 0x6699
 800241a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002430:	2300      	movs	r3, #0
 8002432:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002434:	f107 0308 	add.w	r3, r7, #8
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f004 fa2a 	bl	8006898 <HAL_OSPI_Command>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d002      	beq.n	8002450 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e000      	b.n	8002452 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3758      	adds	r7, #88	@ 0x58
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b096      	sub	sp, #88	@ 0x58
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	460b      	mov	r3, r1
 8002464:	70fb      	strb	r3, [r7, #3]
 8002466:	4613      	mov	r3, r2
 8002468:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	2250      	movs	r2, #80	@ 0x50
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f01e fbe7 	bl	8020c46 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <MX25LM51245G_ResetMemory+0x30>
 800247e:	78bb      	ldrb	r3, [r7, #2]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	e03b      	b.n	8002502 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <MX25LM51245G_ResetMemory+0x42>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <MX25LM51245G_ResetMemory+0x44>
 800249c:	2304      	movs	r3, #4
 800249e:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80024a0:	78bb      	ldrb	r3, [r7, #2]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <MX25LM51245G_ResetMemory+0x50>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e000      	b.n	80024ac <MX25LM51245G_ResetMemory+0x52>
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <MX25LM51245G_ResetMemory+0x5e>
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <MX25LM51245G_ResetMemory+0x60>
 80024b8:	2310      	movs	r3, #16
 80024ba:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <MX25LM51245G_ResetMemory+0x6c>
 80024c2:	2399      	movs	r3, #153	@ 0x99
 80024c4:	e001      	b.n	80024ca <MX25LM51245G_ResetMemory+0x70>
 80024c6:	f649 1366 	movw	r3, #39270	@ 0x9966
 80024ca:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80024e0:	2300      	movs	r3, #0
 80024e2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f004 f9d2 	bl	8006898 <HAL_OSPI_Command>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e000      	b.n	8002502 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3758      	adds	r7, #88	@ 0x58
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <BSP_I2C4_Init+0x64>)
 8002518:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <BSP_I2C4_Init+0x68>)
 800251a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800251c:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <BSP_I2C4_Init+0x6c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11f      	bne.n	8002564 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <BSP_I2C4_Init+0x6c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <BSP_I2C4_Init+0x6c>)
 800252c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800252e:	4810      	ldr	r0, [pc, #64]	@ (8002570 <BSP_I2C4_Init+0x64>)
 8002530:	f002 fffe 	bl	8005530 <HAL_I2C_GetState>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800253a:	480d      	ldr	r0, [pc, #52]	@ (8002570 <BSP_I2C4_Init+0x64>)
 800253c:	f000 fb60 	bl	8002c00 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002540:	f005 fee6 	bl	8008310 <HAL_RCC_GetPCLK2Freq>
 8002544:	4603      	mov	r3, r0
 8002546:	490d      	ldr	r1, [pc, #52]	@ (800257c <BSP_I2C4_Init+0x70>)
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f8e3 	bl	8002714 <I2C_GetTiming>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	4807      	ldr	r0, [pc, #28]	@ (8002570 <BSP_I2C4_Init+0x64>)
 8002554:	f000 f838 	bl	80025c8 <MX_I2C4_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800255e:	f06f 0307 	mvn.w	r3, #7
 8002562:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002564:	687b      	ldr	r3, [r7, #4]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	24000d78 	.word	0x24000d78
 8002574:	58001c00 	.word	0x58001c00
 8002578:	24000370 	.word	0x24000370
 800257c:	00061a80 	.word	0x00061a80

08002580 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <BSP_I2C4_DeInit+0x40>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3b01      	subs	r3, #1
 8002590:	4a0b      	ldr	r2, [pc, #44]	@ (80025c0 <BSP_I2C4_DeInit+0x40>)
 8002592:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <BSP_I2C4_DeInit+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800259c:	4809      	ldr	r0, [pc, #36]	@ (80025c4 <BSP_I2C4_DeInit+0x44>)
 800259e:	f000 fb9b 	bl	8002cd8 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80025a2:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <BSP_I2C4_DeInit+0x44>)
 80025a4:	f002 fd66 	bl	8005074 <HAL_I2C_DeInit>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80025ae:	f06f 0307 	mvn.w	r3, #7
 80025b2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80025b4:	687b      	ldr	r3, [r7, #4]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	24000370 	.word	0x24000370
 80025c4:	24000d78 	.word	0x24000d78

080025c8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f002 fc98 	bl	8004f3c <HAL_I2C_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
 8002616:	e014      	b.n	8002642 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f003 fa62 	bl	8005ae8 <HAL_I2CEx_ConfigAnalogFilter>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e008      	b.n	8002642 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002630:	2100      	movs	r1, #0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f003 faa3 	bl	8005b7e <HAL_I2CEx_ConfigDigitalFilter>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af02      	add	r7, sp, #8
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	81fb      	strh	r3, [r7, #14]
 800265a:	460b      	mov	r3, r1
 800265c:	81bb      	strh	r3, [r7, #12]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002662:	89b9      	ldrh	r1, [r7, #12]
 8002664:	89f8      	ldrh	r0, [r7, #14]
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2201      	movs	r2, #1
 800266e:	f000 fb57 	bl	8002d20 <I2C4_WriteReg>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e00c      	b.n	8002698 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800267e:	4809      	ldr	r0, [pc, #36]	@ (80026a4 <BSP_I2C4_WriteReg+0x58>)
 8002680:	f002 ff64 	bl	800554c <HAL_I2C_GetError>
 8002684:	4603      	mov	r3, r0
 8002686:	2b04      	cmp	r3, #4
 8002688:	d103      	bne.n	8002692 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800268a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e002      	b.n	8002698 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002692:	f06f 0303 	mvn.w	r3, #3
 8002696:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002698:	697b      	ldr	r3, [r7, #20]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	24000d78 	.word	0x24000d78

080026a8 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60ba      	str	r2, [r7, #8]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	81fb      	strh	r3, [r7, #14]
 80026b6:	460b      	mov	r3, r1
 80026b8:	81bb      	strh	r3, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80026be:	89b9      	ldrh	r1, [r7, #12]
 80026c0:	89f8      	ldrh	r0, [r7, #14]
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f000 fb4f 	bl	8002d6c <I2C4_ReadReg>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e00c      	b.n	80026f4 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80026da:	4809      	ldr	r0, [pc, #36]	@ (8002700 <BSP_I2C4_ReadReg+0x58>)
 80026dc:	f002 ff36 	bl	800554c <HAL_I2C_GetError>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d103      	bne.n	80026ee <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026e6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e002      	b.n	80026f4 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80026ee:	f06f 0303 	mvn.w	r3, #3
 80026f2:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80026f4:	697b      	ldr	r3, [r7, #20]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	24000d78 	.word	0x24000d78

08002704 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002708:	f001 fc42 	bl	8003f90 <HAL_GetTick>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06b      	beq.n	8002800 <I2C_GetTiming+0xec>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d068      	beq.n	8002800 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e060      	b.n	80027f6 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002734:	4a35      	ldr	r2, [pc, #212]	@ (800280c <I2C_GetTiming+0xf8>)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	212c      	movs	r1, #44	@ 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3304      	adds	r3, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d352      	bcc.n	80027f0 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800274a:	4a30      	ldr	r2, [pc, #192]	@ (800280c <I2C_GetTiming+0xf8>)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	212c      	movs	r1, #44	@ 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	3308      	adds	r3, #8
 8002758:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d847      	bhi.n	80027f0 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002760:	6939      	ldr	r1, [r7, #16]
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f856 	bl	8002814 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002768:	6939      	ldr	r1, [r7, #16]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f940 	bl	80029f0 <I2C_Compute_SCLL_SCLH>
 8002770:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b7f      	cmp	r3, #127	@ 0x7f
 8002776:	d842      	bhi.n	80027fe <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002778:	4925      	ldr	r1, [pc, #148]	@ (8002810 <I2C_GetTiming+0xfc>)
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800278a:	4821      	ldr	r0, [pc, #132]	@ (8002810 <I2C_GetTiming+0xfc>)
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4403      	add	r3, r0
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80027a2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80027a4:	481a      	ldr	r0, [pc, #104]	@ (8002810 <I2C_GetTiming+0xfc>)
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4403      	add	r3, r0
 80027b2:	3308      	adds	r3, #8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80027bc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80027be:	4814      	ldr	r0, [pc, #80]	@ (8002810 <I2C_GetTiming+0xfc>)
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4403      	add	r3, r0
 80027cc:	330c      	adds	r3, #12
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80027d4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80027d6:	480e      	ldr	r0, [pc, #56]	@ (8002810 <I2C_GetTiming+0xfc>)
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4403      	add	r3, r0
 80027e4:	3310      	adds	r3, #16
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80027ea:	430b      	orrs	r3, r1
 80027ec:	617b      	str	r3, [r7, #20]
        }
        break;
 80027ee:	e006      	b.n	80027fe <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	3301      	adds	r3, #1
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d99b      	bls.n	8002734 <I2C_GetTiming+0x20>
 80027fc:	e000      	b.n	8002800 <I2C_GetTiming+0xec>
        break;
 80027fe:	bf00      	nop
      }
    }
  }

  return ret;
 8002800:	697b      	ldr	r3, [r7, #20]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08022410 	.word	0x08022410
 8002810:	24000374 	.word	0x24000374

08002814 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002814:	b480      	push	{r7}
 8002816:	b08f      	sub	sp, #60	@ 0x3c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800281e:	2310      	movs	r3, #16
 8002820:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	085a      	lsrs	r2, r3, #1
 8002826:	4b6e      	ldr	r3, [pc, #440]	@ (80029e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002828:	4413      	add	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002830:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002832:	2332      	movs	r3, #50	@ 0x32
 8002834:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002836:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800283a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800283c:	4a69      	ldr	r2, [pc, #420]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	212c      	movs	r1, #44	@ 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3324      	adds	r3, #36	@ 0x24
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	4a65      	ldr	r2, [pc, #404]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	212c      	movs	r1, #44	@ 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	330c      	adds	r3, #12
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002860:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002862:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002864:	495f      	ldr	r1, [pc, #380]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	202c      	movs	r0, #44	@ 0x2c
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	440b      	add	r3, r1
 8002870:	3328      	adds	r3, #40	@ 0x28
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3303      	adds	r3, #3
 8002876:	69f9      	ldr	r1, [r7, #28]
 8002878:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002880:	4a58      	ldr	r2, [pc, #352]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	212c      	movs	r1, #44	@ 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3310      	adds	r3, #16
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	4a54      	ldr	r2, [pc, #336]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	212c      	movs	r1, #44	@ 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3320      	adds	r3, #32
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80028a4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80028a6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80028a8:	494e      	ldr	r1, [pc, #312]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	202c      	movs	r0, #44	@ 0x2c
 80028ae:	fb00 f303 	mul.w	r3, r0, r3
 80028b2:	440b      	add	r3, r1
 80028b4:	3328      	adds	r3, #40	@ 0x28
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3304      	adds	r3, #4
 80028ba:	69f9      	ldr	r1, [r7, #28]
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80028c4:	4a47      	ldr	r2, [pc, #284]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	212c      	movs	r1, #44	@ 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3320      	adds	r3, #32
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	4a43      	ldr	r2, [pc, #268]	@ (80029e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	212c      	movs	r1, #44	@ 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3314      	adds	r3, #20
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4403      	add	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dc01      	bgt.n	80028f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dc01      	bgt.n	80028fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80028fe:	2300      	movs	r3, #0
 8002900:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002902:	e062      	b.n	80029ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
 8002908:	e059      	b.n	80029be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002910:	3201      	adds	r2, #1
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	429a      	cmp	r2, r3
 8002924:	d348      	bcc.n	80029b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002926:	2300      	movs	r3, #0
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	e042      	b.n	80029b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	3301      	adds	r3, #1
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fb02 f303 	mul.w	r3, r2, r3
 800293c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d332      	bcc.n	80029ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d82e      	bhi.n	80029ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800294e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002952:	429a      	cmp	r2, r3
 8002954:	d02a      	beq.n	80029ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002956:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4924      	ldr	r1, [pc, #144]	@ (80029ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002968:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800296a:	4b1f      	ldr	r3, [pc, #124]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	491f      	ldr	r1, [pc, #124]	@ (80029ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3304      	adds	r3, #4
 800297c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002980:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4919      	ldr	r1, [pc, #100]	@ (80029ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3308      	adds	r3, #8
 8002992:	6a3a      	ldr	r2, [r7, #32]
 8002994:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800299a:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	3301      	adds	r3, #1
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029a2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80029a4:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80029aa:	d812      	bhi.n	80029d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	3301      	adds	r3, #1
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2b0f      	cmp	r3, #15
 80029b6:	d9b9      	bls.n	800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	3301      	adds	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d9a2      	bls.n	800290a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80029c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c6:	3301      	adds	r3, #1
 80029c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d999      	bls.n	8002904 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80029d0:	e000      	b.n	80029d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80029d2:	bf00      	nop
          }
        }
      }
    }
  }
}
 80029d4:	373c      	adds	r7, #60	@ 0x3c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	3b9aca00 	.word	0x3b9aca00
 80029e4:	08022410 	.word	0x08022410
 80029e8:	24000d74 	.word	0x24000d74
 80029ec:	24000374 	.word	0x24000374

080029f0 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b093      	sub	sp, #76	@ 0x4c
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
 80029fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	085a      	lsrs	r2, r3, #1
 8002a04:	4b7a      	ldr	r3, [pc, #488]	@ (8002bf0 <I2C_Compute_SCLL_SCLH+0x200>)
 8002a06:	4413      	add	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002a10:	4a78      	ldr	r2, [pc, #480]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	212c      	movs	r1, #44	@ 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	085a      	lsrs	r2, r3, #1
 8002a20:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <I2C_Compute_SCLL_SCLH+0x200>)
 8002a22:	4413      	add	r3, r2
 8002a24:	4973      	ldr	r1, [pc, #460]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	202c      	movs	r0, #44	@ 0x2c
 8002a2a:	fb00 f202 	mul.w	r2, r0, r2
 8002a2e:	440a      	add	r2, r1
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002a38:	2332      	movs	r3, #50	@ 0x32
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002a3c:	4a6d      	ldr	r2, [pc, #436]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	212c      	movs	r1, #44	@ 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3328      	adds	r3, #40	@ 0x28
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002a54:	4a67      	ldr	r2, [pc, #412]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	212c      	movs	r1, #44	@ 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a62      	ldr	r2, [pc, #392]	@ (8002bf0 <I2C_Compute_SCLL_SCLH+0x200>)
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002a6c:	4a61      	ldr	r2, [pc, #388]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	212c      	movs	r1, #44	@ 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3308      	adds	r3, #8
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bf0 <I2C_Compute_SCLL_SCLH+0x200>)
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a8c:	e0a3      	b.n	8002bd6 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002a8e:	495a      	ldr	r1, [pc, #360]	@ (8002bf8 <I2C_Compute_SCLL_SCLH+0x208>)
 8002a90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aac:	e08c      	b.n	8002bc8 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	6979      	ldr	r1, [r7, #20]
 8002aba:	fb03 f101 	mul.w	r1, r3, r1
 8002abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	440b      	add	r3, r1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	212c      	movs	r1, #44	@ 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d971      	bls.n	8002bc2 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d268      	bcs.n	8002bc2 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002af4:	e062      	b.n	8002bbc <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	441a      	add	r2, r3
 8002afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afe:	3301      	adds	r3, #1
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	fb03 f101 	mul.w	r1, r3, r1
 8002b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	441a      	add	r2, r3
 8002b16:	4937      	ldr	r1, [pc, #220]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	202c      	movs	r0, #44	@ 0x2c
 8002b1c:	fb00 f303 	mul.w	r3, r0, r3
 8002b20:	440b      	add	r3, r1
 8002b22:	3320      	adds	r3, #32
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	441a      	add	r2, r3
 8002b28:	4932      	ldr	r1, [pc, #200]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	202c      	movs	r0, #44	@ 0x2c
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	440b      	add	r3, r1
 8002b34:	3324      	adds	r3, #36	@ 0x24
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d338      	bcc.n	8002bb6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d834      	bhi.n	8002bb6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b4c:	4a29      	ldr	r2, [pc, #164]	@ (8002bf4 <I2C_Compute_SCLL_SCLH+0x204>)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	212c      	movs	r1, #44	@ 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	331c      	adds	r3, #28
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d329      	bcc.n	8002bb6 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d225      	bcs.n	8002bb6 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	da02      	bge.n	8002b7e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d917      	bls.n	8002bb6 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8002b8a:	491b      	ldr	r1, [pc, #108]	@ (8002bf8 <I2C_Compute_SCLL_SCLH+0x208>)
 8002b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3310      	adds	r3, #16
 8002b9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b9c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002b9e:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <I2C_Compute_SCLL_SCLH+0x208>)
 8002ba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	330c      	adds	r3, #12
 8002bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bb0:	601a      	str	r2, [r3, #0]
              ret = count;
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb8:	3301      	adds	r3, #1
 8002bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bbe:	2bff      	cmp	r3, #255	@ 0xff
 8002bc0:	d999      	bls.n	8002af6 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bca:	2bff      	cmp	r3, #255	@ 0xff
 8002bcc:	f67f af6f 	bls.w	8002aae <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <I2C_Compute_SCLL_SCLH+0x20c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f4ff af56 	bcc.w	8002a8e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	374c      	adds	r7, #76	@ 0x4c
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	3b9aca00 	.word	0x3b9aca00
 8002bf4:	08022410 	.word	0x08022410
 8002bf8:	24000374 	.word	0x24000374
 8002bfc:	24000d74 	.word	0x24000d74

08002c00 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002c08:	4b31      	ldr	r3, [pc, #196]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c0e:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c18:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c2c:	4a28      	ldr	r2, [pc, #160]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c2e:	f043 0308 	orr.w	r3, r3, #8
 8002c32:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c36:	4b26      	ldr	r3, [pc, #152]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002c4a:	2312      	movs	r3, #18
 8002c4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002c56:	2304      	movs	r3, #4
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002c5a:	f107 0314 	add.w	r3, r7, #20
 8002c5e:	4619      	mov	r1, r3
 8002c60:	481c      	ldr	r0, [pc, #112]	@ (8002cd4 <I2C4_MspInit+0xd4>)
 8002c62:	f001 fe63 	bl	800492c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c6a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002c6c:	2312      	movs	r3, #18
 8002c6e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002c74:	2302      	movs	r3, #2
 8002c76:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4619      	mov	r1, r3
 8002c82:	4814      	ldr	r0, [pc, #80]	@ (8002cd4 <I2C4_MspInit+0xd4>)
 8002c84:	f001 fe52 	bl	800492c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c8a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002c8e:	4a10      	ldr	r2, [pc, #64]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c94:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002c98:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002c9a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002ca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cac:	4a08      	ldr	r2, [pc, #32]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <I2C4_MspInit+0xd0>)
 8002cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cc2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002cc6:	bf00      	nop
 8002cc8:	3728      	adds	r7, #40	@ 0x28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58020c00 	.word	0x58020c00

08002cd8 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <I2C4_MspDeInit+0x40>)
 8002cec:	f001 ffce 	bl	8004c8c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <I2C4_MspDeInit+0x40>)
 8002cfc:	f001 ffc6 	bl	8004c8c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <I2C4_MspDeInit+0x44>)
 8002d02:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <I2C4_MspDeInit+0x44>)
 8002d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d0c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
}
 8002d10:	bf00      	nop
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	58020c00 	.word	0x58020c00
 8002d1c:	58024400 	.word	0x58024400

08002d20 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af04      	add	r7, sp, #16
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	4603      	mov	r3, r0
 8002d2a:	81fb      	strh	r3, [r7, #14]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	81bb      	strh	r3, [r7, #12]
 8002d30:	4613      	mov	r3, r2
 8002d32:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002d34:	8978      	ldrh	r0, [r7, #10]
 8002d36:	89ba      	ldrh	r2, [r7, #12]
 8002d38:	89f9      	ldrh	r1, [r7, #14]
 8002d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	8b3b      	ldrh	r3, [r7, #24]
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <I2C4_WriteReg+0x48>)
 8002d4c:	f002 f9c2 	bl	80050d4 <HAL_I2C_Mem_Write>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e001      	b.n	8002d5e <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002d5a:	f06f 0307 	mvn.w	r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	24000d78 	.word	0x24000d78

08002d6c <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	4603      	mov	r3, r0
 8002d76:	81fb      	strh	r3, [r7, #14]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	81bb      	strh	r3, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002d80:	8978      	ldrh	r0, [r7, #10]
 8002d82:	89ba      	ldrh	r2, [r7, #12]
 8002d84:	89f9      	ldrh	r1, [r7, #14]
 8002d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	8b3b      	ldrh	r3, [r7, #24]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4603      	mov	r3, r0
 8002d96:	4807      	ldr	r0, [pc, #28]	@ (8002db4 <I2C4_ReadReg+0x48>)
 8002d98:	f002 fab0 	bl	80052fc <HAL_I2C_Mem_Read>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e001      	b.n	8002daa <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002da6:	f06f 0307 	mvn.w	r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	24000d78 	.word	0x24000d78

08002db8 <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b094      	sub	sp, #80	@ 0x50
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002dcc:	f06f 0301 	mvn.w	r3, #1
 8002dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd2:	e071      	b.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8002dd4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ec4 <BSP_OSPI_NOR_Init+0x10c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d16b      	bne.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	225c      	movs	r2, #92	@ 0x5c
 8002de4:	fb02 f303 	mul.w	r3, r2, r3
 8002de8:	4a37      	ldr	r2, [pc, #220]	@ (8002ec8 <BSP_OSPI_NOR_Init+0x110>)
 8002dea:	4413      	add	r3, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fa09 	bl	8003204 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fee8 	bl	8001bcc <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e003      	b.n	8002e22 <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	785b      	ldrb	r3, [r3, #1]
 8002e2c:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	225c      	movs	r2, #92	@ 0x5c
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <BSP_OSPI_NOR_Init+0x110>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	f107 020c 	add.w	r2, r7, #12
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f895 	bl	8002f70 <MX_OSPI_NOR_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8002e4c:	f06f 0303 	mvn.w	r3, #3
 8002e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e52:	e031      	b.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fb7f 	bl	8003558 <OSPI_NOR_ResetMemory>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e60:	f06f 0304 	mvn.w	r3, #4
 8002e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e66:	e027      	b.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	225c      	movs	r2, #92	@ 0x5c
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	4a15      	ldr	r2, [pc, #84]	@ (8002ec8 <BSP_OSPI_NOR_Init+0x110>)
 8002e72:	1898      	adds	r0, r3, r2
 8002e74:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <BSP_OSPI_NOR_Init+0x10c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	7859      	ldrb	r1, [r3, #1]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <BSP_OSPI_NOR_Init+0x10c>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	789b      	ldrb	r3, [r3, #2]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f7fe fece 	bl	8001c2a <MX25LM51245G_AutoPollingMemReady>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e94:	f06f 0304 	mvn.w	r3, #4
 8002e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9a:	e00d      	b.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7819      	ldrb	r1, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f936 	bl	8003118 <BSP_OSPI_NOR_ConfigFlash>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8002eb2:	f06f 0304 	mvn.w	r3, #4
 8002eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3750      	adds	r7, #80	@ 0x50
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24000e28 	.word	0x24000e28
 8002ec8:	24000dcc 	.word	0x24000dcc

08002ecc <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ede:	f06f 0301 	mvn.w	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e03a      	b.n	8002f5c <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8002ee6:	4a20      	ldr	r2, [pc, #128]	@ (8002f68 <BSP_OSPI_NOR_DeInit+0x9c>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d108      	bne.n	8002f04 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8da 	bl	80030ac <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002efe:	f06f 0304 	mvn.w	r3, #4
 8002f02:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d128      	bne.n	8002f5c <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8002f0a:	4a17      	ldr	r2, [pc, #92]	@ (8002f68 <BSP_OSPI_NOR_DeInit+0x9c>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8002f14:	4a14      	ldr	r2, [pc, #80]	@ (8002f68 <BSP_OSPI_NOR_DeInit+0x9c>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <BSP_OSPI_NOR_DeInit+0x9c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	2200      	movs	r2, #0
 8002f2a:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	225c      	movs	r2, #92	@ 0x5c
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <BSP_OSPI_NOR_DeInit+0xa0>)
 8002f36:	4413      	add	r3, r2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fab3 	bl	80034a4 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	225c      	movs	r2, #92	@ 0x5c
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	4a09      	ldr	r2, [pc, #36]	@ (8002f6c <BSP_OSPI_NOR_DeInit+0xa0>)
 8002f48:	4413      	add	r3, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fb3a 	bl	80065c4 <HAL_OSPI_DeInit>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002f56:	f06f 0303 	mvn.w	r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	24000e28 	.word	0x24000e28
 8002f6c:	24000dcc 	.word	0x24000dcc

08002f70 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	@ (8003000 <MX_OSPI_NOR_Init+0x90>)
 8002f7e:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2204      	movs	r2, #4
 8002f84:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d108      	bne.n	8002fe2 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002fd6:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fe0:	e005      	b.n	8002fee <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f003 fa2c 	bl	800644c <HAL_OSPI_Init>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	52005000 	.word	0x52005000

08003004 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003016:	f06f 0301 	mvn.w	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e03d      	b.n	800309a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 800301e:	4a21      	ldr	r2, [pc, #132]	@ (80030a4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	789b      	ldrb	r3, [r3, #2]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11b      	bne.n	8003064 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	225c      	movs	r2, #92	@ 0x5c
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8003036:	1898      	adds	r0, r3, r2
 8003038:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2201      	movs	r2, #1
 8003044:	4619      	mov	r1, r3
 8003046:	f7fe fe9d 	bl	8001d84 <MX25LM51245G_EnableMemoryMappedModeSTR>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003050:	f06f 0304 	mvn.w	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e020      	b.n	800309a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003058:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2102      	movs	r1, #2
 800305e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8003062:	e01a      	b.n	800309a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	225c      	movs	r2, #92	@ 0x5c
 8003068:	fb02 f303 	mul.w	r3, r2, r3
 800306c:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 800306e:	441a      	add	r2, r3
 8003070:	490c      	ldr	r1, [pc, #48]	@ (80030a4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f7fe ff2b 	bl	8001ed8 <MX25LM51245G_EnableMemoryMappedModeDTR>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003088:	f06f 0304 	mvn.w	r3, #4
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e004      	b.n	800309a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003090:	4a04      	ldr	r2, [pc, #16]	@ (80030a4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2102      	movs	r1, #2
 8003096:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	24000e28 	.word	0x24000e28
 80030a8:	24000dcc 	.word	0x24000dcc

080030ac <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80030be:	f06f 0301 	mvn.w	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e01e      	b.n	8003104 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 80030c6:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d003      	beq.n	80030da <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 80030d2:	f06f 031a 	mvn.w	r3, #26
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e014      	b.n	8003104 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	225c      	movs	r2, #92	@ 0x5c
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 80030e4:	4413      	add	r3, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fe9e 	bl	8006e28 <HAL_OSPI_Abort>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80030f2:	f06f 0303 	mvn.w	r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e004      	b.n	8003104 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80030fa:	4a05      	ldr	r2, [pc, #20]	@ (8003110 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2101      	movs	r1, #1
 8003100:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8003104:	68fb      	ldr	r3, [r7, #12]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	24000e28 	.word	0x24000e28
 8003114:	24000dcc 	.word	0x24000dcc

08003118 <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
 8003124:	4613      	mov	r3, r2
 8003126:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003132:	f06f 0301 	mvn.w	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e05d      	b.n	80031f6 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800313a:	4a31      	ldr	r2, [pc, #196]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d103      	bne.n	800314e <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8003146:	f06f 0319 	mvn.w	r3, #25
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e053      	b.n	80031f6 <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d125      	bne.n	80031a8 <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 8003162:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	789b      	ldrb	r3, [r3, #2]
 800316c:	78ba      	ldrb	r2, [r7, #2]
 800316e:	429a      	cmp	r2, r3
 8003170:	d02a      	beq.n	80031c8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fbfc 	bl	8003970 <OSPI_NOR_ExitOPIMode>
 8003178:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d123      	bne.n	80031c8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d120      	bne.n	80031c8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003186:	4a1e      	ldr	r2, [pc, #120]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa6f 	bl	8003678 <OSPI_NOR_EnterDOPIMode>
 800319a:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 800319c:	e014      	b.n	80031c8 <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fb3a 	bl	8003818 <OSPI_NOR_EnterSOPIMode>
 80031a4:	60f8      	str	r0, [r7, #12]
      break;
 80031a6:	e00f      	b.n	80031c8 <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10e      	bne.n	80031cc <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80031ae:	78bb      	ldrb	r3, [r7, #2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb2f 	bl	8003818 <OSPI_NOR_EnterSOPIMode>
 80031ba:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 80031bc:	e006      	b.n	80031cc <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fa5a 	bl	8003678 <OSPI_NOR_EnterDOPIMode>
 80031c4:	60f8      	str	r0, [r7, #12]
      break;
 80031c6:	e001      	b.n	80031cc <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 80031c8:	bf00      	nop
 80031ca:	e000      	b.n	80031ce <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 80031cc:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 80031d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2101      	movs	r1, #1
 80031da:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 80031de:	4a08      	ldr	r2, [pc, #32]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 80031ea:	4a05      	ldr	r2, [pc, #20]	@ (8003200 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4413      	add	r3, r2
 80031f2:	78ba      	ldrb	r2, [r7, #2]
 80031f4:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	24000e28 	.word	0x24000e28

08003204 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	@ 0x50
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 800320c:	4b9e      	ldr	r3, [pc, #632]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800320e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003212:	4a9d      	ldr	r2, [pc, #628]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003218:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 800321c:	4b9a      	ldr	r3, [pc, #616]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800321e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800322a:	4b97      	ldr	r3, [pc, #604]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800322c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322e:	4a96      	ldr	r2, [pc, #600]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003234:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RELEASE_RESET();
 8003236:	4b94      	ldr	r3, [pc, #592]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323a:	4a93      	ldr	r2, [pc, #588]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800323c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003240:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8003242:	4b91      	ldr	r3, [pc, #580]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003244:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003248:	4a8f      	ldr	r2, [pc, #572]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800324a:	f043 0302 	orr.w	r3, r3, #2
 800324e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003252:	4b8d      	ldr	r3, [pc, #564]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003254:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	637b      	str	r3, [r7, #52]	@ 0x34
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 8003260:	4b89      	ldr	r3, [pc, #548]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003262:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003266:	4a88      	ldr	r2, [pc, #544]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003270:	4b85      	ldr	r3, [pc, #532]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003272:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	633b      	str	r3, [r7, #48]	@ 0x30
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 800327e:	4b82      	ldr	r3, [pc, #520]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003284:	4a80      	ldr	r2, [pc, #512]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800328e:	4b7e      	ldr	r3, [pc, #504]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 800329c:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800329e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032a2:	4a79      	ldr	r2, [pc, #484]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032ac:	4b76      	ldr	r3, [pc, #472]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 80032ba:	4b73      	ldr	r3, [pc, #460]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032c0:	4a71      	ldr	r2, [pc, #452]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032c2:	f043 0320 	orr.w	r3, r3, #32
 80032c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 80032d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032de:	4a6a      	ldr	r2, [pc, #424]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032e0:	f043 0320 	orr.w	r3, r3, #32
 80032e4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032e8:	4b67      	ldr	r3, [pc, #412]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	623b      	str	r3, [r7, #32]
 80032f4:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 80032f6:	4b64      	ldr	r3, [pc, #400]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032fc:	4a62      	ldr	r2, [pc, #392]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 80032fe:	f043 0320 	orr.w	r3, r3, #32
 8003302:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003306:	4b60      	ldr	r3, [pc, #384]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003308:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 8003314:	4b5c      	ldr	r3, [pc, #368]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003316:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003324:	4b58      	ldr	r3, [pc, #352]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003326:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 8003332:	4b55      	ldr	r3, [pc, #340]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003334:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003338:	4a53      	ldr	r2, [pc, #332]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 800333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800333e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003342:	4b51      	ldr	r3, [pc, #324]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003344:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8003350:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003352:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003356:	4a4c      	ldr	r2, [pc, #304]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800335c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003360:	4b49      	ldr	r3, [pc, #292]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003362:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 800336e:	4b46      	ldr	r3, [pc, #280]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003370:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003374:	4a44      	ldr	r2, [pc, #272]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800337a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800337e:	4b42      	ldr	r3, [pc, #264]	@ (8003488 <OSPI_NOR_MspInit+0x284>)
 8003380:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 800338c:	2340      	movs	r3, #64	@ 0x40
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8003394:	2301      	movs	r3, #1
 8003396:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003398:	2303      	movs	r3, #3
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 800339c:	230a      	movs	r3, #10
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80033a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033a4:	4619      	mov	r1, r3
 80033a6:	4839      	ldr	r0, [pc, #228]	@ (800348c <OSPI_NOR_MspInit+0x288>)
 80033a8:	f001 fac0 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80033ac:	2320      	movs	r3, #32
 80033ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80033b0:	230a      	movs	r3, #10
 80033b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80033b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033b8:	4619      	mov	r1, r3
 80033ba:	4835      	ldr	r0, [pc, #212]	@ (8003490 <OSPI_NOR_MspInit+0x28c>)
 80033bc:	f001 fab6 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 80033c0:	2304      	movs	r3, #4
 80033c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 80033c8:	2309      	movs	r3, #9
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 80033cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033d0:	4619      	mov	r1, r3
 80033d2:	4830      	ldr	r0, [pc, #192]	@ (8003494 <OSPI_NOR_MspInit+0x290>)
 80033d4:	f001 faaa 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 80033d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 80033de:	2309      	movs	r3, #9
 80033e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 80033e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033e6:	4619      	mov	r1, r3
 80033e8:	482b      	ldr	r0, [pc, #172]	@ (8003498 <OSPI_NOR_MspInit+0x294>)
 80033ea:	f001 fa9f 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 80033ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 80033f4:	230a      	movs	r3, #10
 80033f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 80033f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033fc:	4619      	mov	r1, r3
 80033fe:	4827      	ldr	r0, [pc, #156]	@ (800349c <OSPI_NOR_MspInit+0x298>)
 8003400:	f001 fa94 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 8003408:	230a      	movs	r3, #10
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 800340c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003410:	4619      	mov	r1, r3
 8003412:	4822      	ldr	r0, [pc, #136]	@ (800349c <OSPI_NOR_MspInit+0x298>)
 8003414:	f001 fa8a 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 8003418:	2340      	movs	r3, #64	@ 0x40
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 800341c:	230a      	movs	r3, #10
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8003420:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003424:	4619      	mov	r1, r3
 8003426:	481d      	ldr	r0, [pc, #116]	@ (800349c <OSPI_NOR_MspInit+0x298>)
 8003428:	f001 fa80 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 800342c:	2302      	movs	r3, #2
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8003430:	230a      	movs	r3, #10
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8003434:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003438:	4619      	mov	r1, r3
 800343a:	4815      	ldr	r0, [pc, #84]	@ (8003490 <OSPI_NOR_MspInit+0x28c>)
 800343c:	f001 fa76 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8003440:	2308      	movs	r3, #8
 8003442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8003444:	2309      	movs	r3, #9
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 8003448:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800344c:	4619      	mov	r1, r3
 800344e:	4814      	ldr	r0, [pc, #80]	@ (80034a0 <OSPI_NOR_MspInit+0x29c>)
 8003450:	f001 fa6c 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8003454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800345a:	2309      	movs	r3, #9
 800345c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 800345e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003462:	4619      	mov	r1, r3
 8003464:	4809      	ldr	r0, [pc, #36]	@ (800348c <OSPI_NOR_MspInit+0x288>)
 8003466:	f001 fa61 	bl	800492c <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 800346a:	2380      	movs	r3, #128	@ 0x80
 800346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 800346e:	230a      	movs	r3, #10
 8003470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 8003472:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003476:	4619      	mov	r1, r3
 8003478:	4807      	ldr	r0, [pc, #28]	@ (8003498 <OSPI_NOR_MspInit+0x294>)
 800347a:	f001 fa57 	bl	800492c <HAL_GPIO_Init>
}
 800347e:	bf00      	nop
 8003480:	3750      	adds	r7, #80	@ 0x50
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	58024400 	.word	0x58024400
 800348c:	58021800 	.word	0x58021800
 8003490:	58020800 	.word	0x58020800
 8003494:	58020400 	.word	0x58020400
 8003498:	58020c00 	.word	0x58020c00
 800349c:	58021400 	.word	0x58021400
 80034a0:	58021c00 	.word	0x58021c00

080034a4 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80034ac:	2104      	movs	r1, #4
 80034ae:	4823      	ldr	r0, [pc, #140]	@ (800353c <OSPI_NOR_MspDeInit+0x98>)
 80034b0:	f001 fbec 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80034b4:	2120      	movs	r1, #32
 80034b6:	4822      	ldr	r0, [pc, #136]	@ (8003540 <OSPI_NOR_MspDeInit+0x9c>)
 80034b8:	f001 fbe8 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 80034bc:	2140      	movs	r1, #64	@ 0x40
 80034be:	4821      	ldr	r0, [pc, #132]	@ (8003544 <OSPI_NOR_MspDeInit+0xa0>)
 80034c0:	f001 fbe4 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 80034c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80034c8:	481f      	ldr	r0, [pc, #124]	@ (8003548 <OSPI_NOR_MspDeInit+0xa4>)
 80034ca:	f001 fbdf 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 80034ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034d2:	481e      	ldr	r0, [pc, #120]	@ (800354c <OSPI_NOR_MspDeInit+0xa8>)
 80034d4:	f001 fbda 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 80034d8:	2180      	movs	r1, #128	@ 0x80
 80034da:	481c      	ldr	r0, [pc, #112]	@ (800354c <OSPI_NOR_MspDeInit+0xa8>)
 80034dc:	f001 fbd6 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 80034e0:	2140      	movs	r1, #64	@ 0x40
 80034e2:	481a      	ldr	r0, [pc, #104]	@ (800354c <OSPI_NOR_MspDeInit+0xa8>)
 80034e4:	f001 fbd2 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 80034e8:	2102      	movs	r1, #2
 80034ea:	4815      	ldr	r0, [pc, #84]	@ (8003540 <OSPI_NOR_MspDeInit+0x9c>)
 80034ec:	f001 fbce 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 80034f0:	2108      	movs	r1, #8
 80034f2:	4817      	ldr	r0, [pc, #92]	@ (8003550 <OSPI_NOR_MspDeInit+0xac>)
 80034f4:	f001 fbca 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 80034f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034fc:	4811      	ldr	r0, [pc, #68]	@ (8003544 <OSPI_NOR_MspDeInit+0xa0>)
 80034fe:	f001 fbc5 	bl	8004c8c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	4810      	ldr	r0, [pc, #64]	@ (8003548 <OSPI_NOR_MspDeInit+0xa4>)
 8003506:	f001 fbc1 	bl	8004c8c <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800350a:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 800350c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800350e:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003514:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RELEASE_RESET();
 8003516:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 8003518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351a:	4a0e      	ldr	r2, [pc, #56]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 800351c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003520:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 8003522:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 8003524:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003528:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <OSPI_NOR_MspDeInit+0xb0>)
 800352a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800352e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	58020400 	.word	0x58020400
 8003540:	58020800 	.word	0x58020800
 8003544:	58021800 	.word	0x58021800
 8003548:	58020c00 	.word	0x58020c00
 800354c:	58021400 	.word	0x58021400
 8003550:	58021c00 	.word	0x58021c00
 8003554:	58024400 	.word	0x58024400

08003558 <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	225c      	movs	r2, #92	@ 0x5c
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	4a40      	ldr	r2, [pc, #256]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 800356e:	4413      	add	r3, r2
 8003570:	2200      	movs	r2, #0
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe ff18 	bl	80023aa <MX25LM51245G_ResetEnable>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003580:	f06f 0304 	mvn.w	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	e06d      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	225c      	movs	r2, #92	@ 0x5c
 800358c:	fb02 f303 	mul.w	r3, r2, r3
 8003590:	4a37      	ldr	r2, [pc, #220]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 8003592:	4413      	add	r3, r2
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff5e 	bl	800245a <MX25LM51245G_ResetMemory>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80035a4:	f06f 0304 	mvn.w	r3, #4
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	e05b      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	225c      	movs	r2, #92	@ 0x5c
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 80035b6:	4413      	add	r3, r2
 80035b8:	2200      	movs	r2, #0
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fef4 	bl	80023aa <MX25LM51245G_ResetEnable>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80035c8:	f06f 0304 	mvn.w	r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e049      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	225c      	movs	r2, #92	@ 0x5c
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 80035da:	4413      	add	r3, r2
 80035dc:	2200      	movs	r2, #0
 80035de:	2101      	movs	r1, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe ff3a 	bl	800245a <MX25LM51245G_ResetMemory>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80035ec:	f06f 0304 	mvn.w	r3, #4
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e037      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	225c      	movs	r2, #92	@ 0x5c
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 80035fe:	4413      	add	r3, r2
 8003600:	2201      	movs	r2, #1
 8003602:	2101      	movs	r1, #1
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fed0 	bl	80023aa <MX25LM51245G_ResetEnable>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003610:	f06f 0304 	mvn.w	r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e025      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	225c      	movs	r2, #92	@ 0x5c
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <OSPI_NOR_ResetMemory+0x118>)
 8003622:	4413      	add	r3, r2
 8003624:	2201      	movs	r2, #1
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe ff16 	bl	800245a <MX25LM51245G_ResetMemory>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003634:	f06f 0304 	mvn.w	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e013      	b.n	8003664 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800363c:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <OSPI_NOR_ResetMemory+0x11c>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2101      	movs	r1, #1
 8003642:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 8003646:	4a0b      	ldr	r2, [pc, #44]	@ (8003674 <OSPI_NOR_ResetMemory+0x11c>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <OSPI_NOR_ResetMemory+0x11c>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	2200      	movs	r2, #0
 800365c:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800365e:	2064      	movs	r0, #100	@ 0x64
 8003660:	f000 fca2 	bl	8003fa8 <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 8003664:	68fb      	ldr	r3, [r7, #12]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	24000dcc 	.word	0x24000dcc
 8003674:	24000e28 	.word	0x24000e28

08003678 <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	225c      	movs	r2, #92	@ 0x5c
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	4a60      	ldr	r2, [pc, #384]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 800368e:	1898      	adds	r0, r3, r2
 8003690:	4a60      	ldr	r2, [pc, #384]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	7859      	ldrb	r1, [r3, #1]
 800369a:	4a5e      	ldr	r2, [pc, #376]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	789b      	ldrb	r3, [r3, #2]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f7fe fc86 	bl	8001fb6 <MX25LM51245G_WriteEnable>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80036b0:	f06f 0304 	mvn.w	r3, #4
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e0a6      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	225c      	movs	r2, #92	@ 0x5c
 80036bc:	fb02 f303 	mul.w	r3, r2, r3
 80036c0:	4a53      	ldr	r2, [pc, #332]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036c2:	1898      	adds	r0, r3, r2
 80036c4:	4a53      	ldr	r2, [pc, #332]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4413      	add	r3, r2
 80036cc:	7859      	ldrb	r1, [r3, #1]
 80036ce:	4a51      	ldr	r2, [pc, #324]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	789a      	ldrb	r2, [r3, #2]
 80036d8:	2307      	movs	r3, #7
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036e0:	f7fe fd34 	bl	800214c <MX25LM51245G_WriteCfg2Register>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80036ea:	f06f 0304 	mvn.w	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e089      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	225c      	movs	r2, #92	@ 0x5c
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	4a45      	ldr	r2, [pc, #276]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036fc:	1898      	adds	r0, r3, r2
 80036fe:	4a45      	ldr	r2, [pc, #276]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	7859      	ldrb	r1, [r3, #1]
 8003708:	4a42      	ldr	r2, [pc, #264]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	789b      	ldrb	r3, [r3, #2]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fe fc4f 	bl	8001fb6 <MX25LM51245G_WriteEnable>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800371e:	f06f 0304 	mvn.w	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e06f      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	225c      	movs	r2, #92	@ 0x5c
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	4a38      	ldr	r2, [pc, #224]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003730:	1898      	adds	r0, r3, r2
 8003732:	4a38      	ldr	r2, [pc, #224]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4413      	add	r3, r2
 800373a:	7859      	ldrb	r1, [r3, #1]
 800373c:	4a35      	ldr	r2, [pc, #212]	@ (8003814 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	789a      	ldrb	r2, [r3, #2]
 8003746:	2302      	movs	r3, #2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	f7fe fcfe 	bl	800214c <MX25LM51245G_WriteCfg2Register>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003756:	f06f 0304 	mvn.w	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e053      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 800375e:	2028      	movs	r0, #40	@ 0x28
 8003760:	f000 fc22 	bl	8003fa8 <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003764:	4a2a      	ldr	r2, [pc, #168]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	215c      	movs	r1, #92	@ 0x5c
 800376a:	fb01 f303 	mul.w	r3, r1, r3
 800376e:	4413      	add	r3, r2
 8003770:	330c      	adds	r3, #12
 8003772:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003776:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003778:	4a25      	ldr	r2, [pc, #148]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	215c      	movs	r1, #92	@ 0x5c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	332c      	adds	r3, #44	@ 0x2c
 8003786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	225c      	movs	r2, #92	@ 0x5c
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	4a1e      	ldr	r2, [pc, #120]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003796:	4413      	add	r3, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f002 fe57 	bl	800644c <HAL_OSPI_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80037a4:	f06f 0303 	mvn.w	r3, #3
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e02c      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	225c      	movs	r2, #92	@ 0x5c
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	4a16      	ldr	r2, [pc, #88]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 80037b6:	4413      	add	r3, r2
 80037b8:	2201      	movs	r2, #1
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fa34 	bl	8001c2a <MX25LM51245G_AutoPollingMemReady>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80037c8:	f06f 0304 	mvn.w	r3, #4
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e01a      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	225c      	movs	r2, #92	@ 0x5c
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003810 <OSPI_NOR_EnterDOPIMode+0x198>)
 80037da:	1898      	adds	r0, r3, r2
 80037dc:	f107 0308 	add.w	r3, r7, #8
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	2201      	movs	r2, #1
 80037e6:	2101      	movs	r1, #1
 80037e8:	f7fe fd45 	bl	8002276 <MX25LM51245G_ReadCfg2Register>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80037f2:	f06f 0304 	mvn.w	r3, #4
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e005      	b.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 80037fa:	7a3b      	ldrb	r3, [r7, #8]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d002      	beq.n	8003806 <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003800:	f06f 0304 	mvn.w	r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	24000dcc 	.word	0x24000dcc
 8003814:	24000e28 	.word	0x24000e28

08003818 <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af02      	add	r7, sp, #8
 800381e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	225c      	movs	r2, #92	@ 0x5c
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	4a4e      	ldr	r2, [pc, #312]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 800382e:	1898      	adds	r0, r3, r2
 8003830:	4a4e      	ldr	r2, [pc, #312]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	7859      	ldrb	r1, [r3, #1]
 800383a:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	789b      	ldrb	r3, [r3, #2]
 8003844:	461a      	mov	r2, r3
 8003846:	f7fe fbb6 	bl	8001fb6 <MX25LM51245G_WriteEnable>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003850:	f06f 0304 	mvn.w	r3, #4
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e082      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	225c      	movs	r2, #92	@ 0x5c
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	4a41      	ldr	r2, [pc, #260]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 8003862:	1898      	adds	r0, r3, r2
 8003864:	4a41      	ldr	r2, [pc, #260]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	7859      	ldrb	r1, [r3, #1]
 800386e:	4a3f      	ldr	r2, [pc, #252]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4413      	add	r3, r2
 8003876:	789a      	ldrb	r2, [r3, #2]
 8003878:	2307      	movs	r3, #7
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003880:	f7fe fc64 	bl	800214c <MX25LM51245G_WriteCfg2Register>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800388a:	f06f 0304 	mvn.w	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	e065      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	225c      	movs	r2, #92	@ 0x5c
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a33      	ldr	r2, [pc, #204]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 800389c:	1898      	adds	r0, r3, r2
 800389e:	4a33      	ldr	r2, [pc, #204]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	7859      	ldrb	r1, [r3, #1]
 80038a8:	4a30      	ldr	r2, [pc, #192]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	789b      	ldrb	r3, [r3, #2]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7fe fb7f 	bl	8001fb6 <MX25LM51245G_WriteEnable>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80038be:	f06f 0304 	mvn.w	r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e04b      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	225c      	movs	r2, #92	@ 0x5c
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	4a26      	ldr	r2, [pc, #152]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 80038d0:	1898      	adds	r0, r3, r2
 80038d2:	4a26      	ldr	r2, [pc, #152]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	7859      	ldrb	r1, [r3, #1]
 80038dc:	4a23      	ldr	r2, [pc, #140]	@ (800396c <OSPI_NOR_EnterSOPIMode+0x154>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	789a      	ldrb	r2, [r3, #2]
 80038e6:	2301      	movs	r3, #1
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	f7fe fc2e 	bl	800214c <MX25LM51245G_WriteCfg2Register>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80038f6:	f06f 0304 	mvn.w	r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e02f      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80038fe:	2028      	movs	r0, #40	@ 0x28
 8003900:	f000 fb52 	bl	8003fa8 <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	225c      	movs	r2, #92	@ 0x5c
 8003908:	fb02 f303 	mul.w	r3, r2, r3
 800390c:	4a16      	ldr	r2, [pc, #88]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 800390e:	4413      	add	r3, r2
 8003910:	2200      	movs	r2, #0
 8003912:	2101      	movs	r1, #1
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe f988 	bl	8001c2a <MX25LM51245G_AutoPollingMemReady>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003920:	f06f 0304 	mvn.w	r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e01a      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	225c      	movs	r2, #92	@ 0x5c
 800392c:	fb02 f303 	mul.w	r3, r2, r3
 8003930:	4a0d      	ldr	r2, [pc, #52]	@ (8003968 <OSPI_NOR_EnterSOPIMode+0x150>)
 8003932:	1898      	adds	r0, r3, r2
 8003934:	f107 0308 	add.w	r3, r7, #8
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2300      	movs	r3, #0
 800393c:	2200      	movs	r2, #0
 800393e:	2101      	movs	r1, #1
 8003940:	f7fe fc99 	bl	8002276 <MX25LM51245G_ReadCfg2Register>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800394a:	f06f 0304 	mvn.w	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	e005      	b.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8003952:	7a3b      	ldrb	r3, [r7, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d002      	beq.n	800395e <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003958:	f06f 0304 	mvn.w	r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	24000dcc 	.word	0x24000dcc
 800396c:	24000e28 	.word	0x24000e28

08003970 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	225c      	movs	r2, #92	@ 0x5c
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	4a49      	ldr	r2, [pc, #292]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003986:	1898      	adds	r0, r3, r2
 8003988:	4a49      	ldr	r2, [pc, #292]	@ (8003ab0 <OSPI_NOR_ExitOPIMode+0x140>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	7859      	ldrb	r1, [r3, #1]
 8003992:	4a47      	ldr	r2, [pc, #284]	@ (8003ab0 <OSPI_NOR_ExitOPIMode+0x140>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	789b      	ldrb	r3, [r3, #2]
 800399c:	461a      	mov	r2, r3
 800399e:	f7fe fb0a 	bl	8001fb6 <MX25LM51245G_WriteEnable>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80039a8:	f06f 0304 	mvn.w	r3, #4
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	e077      	b.n	8003aa0 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	225c      	movs	r2, #92	@ 0x5c
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	4a3a      	ldr	r2, [pc, #232]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 80039c2:	1898      	adds	r0, r3, r2
 80039c4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ab0 <OSPI_NOR_ExitOPIMode+0x140>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	7859      	ldrb	r1, [r3, #1]
 80039ce:	4a38      	ldr	r2, [pc, #224]	@ (8003ab0 <OSPI_NOR_ExitOPIMode+0x140>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	789a      	ldrb	r2, [r3, #2]
 80039d8:	7a3b      	ldrb	r3, [r7, #8]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	f7fe fbb5 	bl	800214c <MX25LM51245G_WriteCfg2Register>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80039e8:	f06f 0304 	mvn.w	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e057      	b.n	8003aa0 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80039f0:	2028      	movs	r0, #40	@ 0x28
 80039f2:	f000 fad9 	bl	8003fa8 <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 80039f6:	4a2e      	ldr	r2, [pc, #184]	@ (8003ab0 <OSPI_NOR_ExitOPIMode+0x140>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	789b      	ldrb	r3, [r3, #2]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d120      	bne.n	8003a46 <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003a04:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	215c      	movs	r1, #92	@ 0x5c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	330c      	adds	r3, #12
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003a16:	4a25      	ldr	r2, [pc, #148]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	215c      	movs	r1, #92	@ 0x5c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	332c      	adds	r3, #44	@ 0x2c
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	225c      	movs	r2, #92	@ 0x5c
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003a32:	4413      	add	r3, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 fd09 	bl	800644c <HAL_OSPI_Init>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8003a40:	f06f 0303 	mvn.w	r3, #3
 8003a44:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	225c      	movs	r2, #92	@ 0x5c
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003a50:	4413      	add	r3, r2
 8003a52:	2200      	movs	r2, #0
 8003a54:	2100      	movs	r1, #0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe f8e7 	bl	8001c2a <MX25LM51245G_AutoPollingMemReady>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a62:	f06f 0304 	mvn.w	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e01a      	b.n	8003aa0 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	225c      	movs	r2, #92	@ 0x5c
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	4a0e      	ldr	r2, [pc, #56]	@ (8003aac <OSPI_NOR_ExitOPIMode+0x13c>)
 8003a74:	1898      	adds	r0, r3, r2
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2100      	movs	r1, #0
 8003a82:	f7fe fbf8 	bl	8002276 <MX25LM51245G_ReadCfg2Register>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a8c:	f06f 0304 	mvn.w	r3, #4
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e005      	b.n	8003aa0 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 8003a94:	7a3b      	ldrb	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8003a9a:	f06f 0304 	mvn.w	r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000dcc 	.word	0x24000dcc
 8003ab0:	24000e28 	.word	0x24000e28

08003ab4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11c      	bne.n	8003b02 <BSP_TS_Init+0x4e>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d018      	beq.n	8003b02 <BSP_TS_Init+0x4e>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003ad8:	d813      	bhi.n	8003b02 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00f      	beq.n	8003b02 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003aea:	d80a      	bhi.n	8003b02 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	428b      	cmp	r3, r1
 8003afa:	bf28      	it	cs
 8003afc:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d903      	bls.n	8003b0a <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b02:	f06f 0301 	mvn.w	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e06e      	b.n	8003be8 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f98c 	bl	8003e28 <FT5336_Probe>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e064      	b.n	8003be8 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4934      	ldr	r1, [pc, #208]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	440b      	add	r3, r1
 8003b2a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	4930      	ldr	r1, [pc, #192]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	440b      	add	r3, r1
 8003b38:	3304      	adds	r3, #4
 8003b3a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	492c      	ldr	r1, [pc, #176]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	440b      	add	r3, r1
 8003b48:	3308      	adds	r3, #8
 8003b4a:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	4928      	ldr	r1, [pc, #160]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	015b      	lsls	r3, r3, #5
 8003b56:	440b      	add	r3, r1
 8003b58:	330c      	adds	r3, #12
 8003b5a:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003b5c:	4b26      	ldr	r3, [pc, #152]	@ (8003bf8 <BSP_TS_Init+0x144>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	4926      	ldr	r1, [pc, #152]	@ (8003bfc <BSP_TS_Init+0x148>)
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b6a:	f107 010c 	add.w	r1, r7, #12
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4798      	blx	r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da03      	bge.n	8003b80 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b78:	f06f 0304 	mvn.w	r3, #4
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	e033      	b.n	8003be8 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	491c      	ldr	r1, [pc, #112]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	015b      	lsls	r3, r3, #5
 8003b88:	440b      	add	r3, r1
 8003b8a:	3310      	adds	r3, #16
 8003b8c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4918      	ldr	r1, [pc, #96]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	015b      	lsls	r3, r3, #5
 8003b96:	440b      	add	r3, r1
 8003b98:	3314      	adds	r3, #20
 8003b9a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e01f      	b.n	8003be2 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	4811      	ldr	r0, [pc, #68]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	00d9      	lsls	r1, r3, #3
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3306      	adds	r3, #6
 8003bba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	480a      	ldr	r0, [pc, #40]	@ (8003bf4 <BSP_TS_Init+0x140>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	00d9      	lsls	r1, r3, #3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3306      	adds	r3, #6
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4403      	add	r3, r0
 8003bda:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	3301      	adds	r3, #1
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0dc      	beq.n	8003ba2 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8003be8:	69fb      	ldr	r3, [r7, #28]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	24000e38 	.word	0x24000e38
 8003bf8:	24000e30 	.word	0x24000e30
 8003bfc:	24000e34 	.word	0x24000e34

08003c00 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c14:	f06f 0301 	mvn.w	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1a:	e0f9      	b.n	8003e10 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8003c1c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e1c <BSP_TS_GetState+0x21c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	497f      	ldr	r1, [pc, #508]	@ (8003e20 <BSP_TS_GetState+0x220>)
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c2a:	f107 0108 	add.w	r1, r7, #8
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4798      	blx	r3
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da03      	bge.n	8003c40 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c38:	f06f 0304 	mvn.w	r3, #4
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3e:	e0e7      	b.n	8003e10 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 80d1 	beq.w	8003dea <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003c50:	4a74      	ldr	r2, [pc, #464]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	015b      	lsls	r3, r3, #5
 8003c56:	4413      	add	r3, r2
 8003c58:	3308      	adds	r3, #8
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003c6c:	4a6d      	ldr	r2, [pc, #436]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	4413      	add	r3, r2
 8003c74:	3308      	adds	r3, #8
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003c80:	4a68      	ldr	r2, [pc, #416]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	015b      	lsls	r3, r3, #5
 8003c86:	4413      	add	r3, r2
 8003c88:	3310      	adds	r3, #16
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8003c94:	4a63      	ldr	r2, [pc, #396]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	015b      	lsls	r3, r3, #5
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003ca8:	4a5e      	ldr	r2, [pc, #376]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	015b      	lsls	r3, r3, #5
 8003cae:	4413      	add	r3, r2
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003cba:	4a5a      	ldr	r2, [pc, #360]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	015b      	lsls	r3, r3, #5
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	fb03 f202 	mul.w	r2, r3, r2
 8003cca:	4956      	ldr	r1, [pc, #344]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	015b      	lsls	r3, r3, #5
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003cde:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	015b      	lsls	r3, r3, #5
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
 8003cf0:	494c      	ldr	r1, [pc, #304]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4945      	ldr	r1, [pc, #276]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	015b      	lsls	r3, r3, #5
 8003d14:	440b      	add	r3, r1
 8003d16:	3318      	adds	r3, #24
 8003d18:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d909      	bls.n	8003d32 <BSP_TS_GetState+0x132>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4940      	ldr	r1, [pc, #256]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	015b      	lsls	r3, r3, #5
 8003d28:	440b      	add	r3, r1
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	e008      	b.n	8003d44 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8003d32:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	015b      	lsls	r3, r3, #5
 8003d38:	4413      	add	r3, r2
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003d42:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003d44:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	4936      	ldr	r1, [pc, #216]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	015b      	lsls	r3, r3, #5
 8003d50:	440b      	add	r3, r1
 8003d52:	331c      	adds	r3, #28
 8003d54:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d909      	bls.n	8003d6e <BSP_TS_GetState+0x16e>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	4931      	ldr	r1, [pc, #196]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	015b      	lsls	r3, r3, #5
 8003d64:	440b      	add	r3, r1
 8003d66:	331c      	adds	r3, #28
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	e008      	b.n	8003d80 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	4413      	add	r3, r2
 8003d76:	331c      	adds	r3, #28
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003d7e:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003d80:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003d82:	4a28      	ldr	r2, [pc, #160]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	4413      	add	r3, r2
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d808      	bhi.n	8003da6 <BSP_TS_GetState+0x1a6>
 8003d94:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	015b      	lsls	r3, r3, #5
 8003d9a:	4413      	add	r3, r2
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d910      	bls.n	8003dc8 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	491e      	ldr	r1, [pc, #120]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	440b      	add	r3, r1
 8003db2:	3318      	adds	r3, #24
 8003db4:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	491a      	ldr	r1, [pc, #104]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	015b      	lsls	r3, r3, #5
 8003dc0:	440b      	add	r3, r1
 8003dc2:	331c      	adds	r3, #28
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e023      	b.n	8003e10 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003dc8:	4a16      	ldr	r2, [pc, #88]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	015b      	lsls	r3, r3, #5
 8003dce:	4413      	add	r3, r2
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003dd8:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	015b      	lsls	r3, r3, #5
 8003dde:	4413      	add	r3, r2
 8003de0:	331c      	adds	r3, #28
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	e012      	b.n	8003e10 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003df0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	4413      	add	r3, r2
 8003df8:	3318      	adds	r3, #24
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003e00:	4a08      	ldr	r2, [pc, #32]	@ (8003e24 <BSP_TS_GetState+0x224>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	015b      	lsls	r3, r3, #5
 8003e06:	4413      	add	r3, r2
 8003e08:	331c      	adds	r3, #28
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3728      	adds	r7, #40	@ 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	24000e30 	.word	0x24000e30
 8003e20:	24000e34 	.word	0x24000e34
 8003e24:	24000e38 	.word	0x24000e38

08003e28 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003e38:	2370      	movs	r3, #112	@ 0x70
 8003e3a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003e3c:	4b23      	ldr	r3, [pc, #140]	@ (8003ecc <FT5336_Probe+0xa4>)
 8003e3e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003e40:	4b23      	ldr	r3, [pc, #140]	@ (8003ed0 <FT5336_Probe+0xa8>)
 8003e42:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003e44:	4b23      	ldr	r3, [pc, #140]	@ (8003ed4 <FT5336_Probe+0xac>)
 8003e46:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003e48:	4b23      	ldr	r3, [pc, #140]	@ (8003ed8 <FT5336_Probe+0xb0>)
 8003e4a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003e4c:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <FT5336_Probe+0xb4>)
 8003e4e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4619      	mov	r1, r3
 8003e56:	4822      	ldr	r0, [pc, #136]	@ (8003ee0 <FT5336_Probe+0xb8>)
 8003e58:	f7fd fb58 	bl	800150c <FT5336_RegisterBusIO>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003e62:	f06f 0307 	mvn.w	r3, #7
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e68:	e02a      	b.n	8003ec0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003e6a:	f107 0308 	add.w	r3, r7, #8
 8003e6e:	4619      	mov	r1, r3
 8003e70:	481b      	ldr	r0, [pc, #108]	@ (8003ee0 <FT5336_Probe+0xb8>)
 8003e72:	f7fd fc45 	bl	8001700 <FT5336_ReadID>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e7c:	f06f 0304 	mvn.w	r3, #4
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e82:	e01d      	b.n	8003ec0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b51      	cmp	r3, #81	@ 0x51
 8003e88:	d003      	beq.n	8003e92 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003e8a:	f06f 0306 	mvn.w	r3, #6
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e90:	e016      	b.n	8003ec0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <FT5336_Probe+0xbc>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <FT5336_Probe+0xb8>)
 8003e98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003e9c:	4b12      	ldr	r3, [pc, #72]	@ (8003ee8 <FT5336_Probe+0xc0>)
 8003e9e:	4a13      	ldr	r2, [pc, #76]	@ (8003eec <FT5336_Probe+0xc4>)
 8003ea0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003ea2:	4b11      	ldr	r3, [pc, #68]	@ (8003ee8 <FT5336_Probe+0xc0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <FT5336_Probe+0xbc>)
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003eba:	f06f 0304 	mvn.w	r3, #4
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3728      	adds	r7, #40	@ 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	0800250d 	.word	0x0800250d
 8003ed0:	08002581 	.word	0x08002581
 8003ed4:	080026a9 	.word	0x080026a9
 8003ed8:	0800264d 	.word	0x0800264d
 8003edc:	08002705 	.word	0x08002705
 8003ee0:	24000e58 	.word	0x24000e58
 8003ee4:	24000e34 	.word	0x24000e34
 8003ee8:	24000e30 	.word	0x24000e30
 8003eec:	2400000c 	.word	0x2400000c

08003ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef6:	2003      	movs	r0, #3
 8003ef8:	f000 f94b 	bl	8004192 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003efc:	f004 f848 	bl	8007f90 <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <HAL_Init+0x68>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	4913      	ldr	r1, [pc, #76]	@ (8003f5c <HAL_Init+0x6c>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <HAL_Init+0x68>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a0e      	ldr	r2, [pc, #56]	@ (8003f5c <HAL_Init+0x6c>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	4a0b      	ldr	r2, [pc, #44]	@ (8003f60 <HAL_Init+0x70>)
 8003f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f34:	4a0b      	ldr	r2, [pc, #44]	@ (8003f64 <HAL_Init+0x74>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f3a:	200f      	movs	r0, #15
 8003f3c:	f7fd f8c0 	bl	80010c0 <HAL_InitTick>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e002      	b.n	8003f50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f4a:	f7fc fe7f 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	58024400 	.word	0x58024400
 8003f5c:	08022400 	.word	0x08022400
 8003f60:	24000008 	.word	0x24000008
 8003f64:	24000004 	.word	0x24000004

08003f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_IncTick+0x20>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_IncTick+0x24>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	@ (8003f8c <HAL_IncTick+0x24>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	24000040 	.word	0x24000040
 8003f8c:	24000e80 	.word	0x24000e80

08003f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return uwTick;
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_GetTick+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	24000e80 	.word	0x24000e80

08003fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7ff ffee 	bl	8003f90 <HAL_GetTick>
 8003fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d005      	beq.n	8003fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <HAL_Delay+0x44>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fce:	bf00      	nop
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d8f7      	bhi.n	8003fd0 <HAL_Delay+0x28>
  {
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	24000040 	.word	0x24000040

08003ff0 <__NVIC_SetPriorityGrouping>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004000:	4b0b      	ldr	r3, [pc, #44]	@ (8004030 <__NVIC_SetPriorityGrouping+0x40>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800400c:	4013      	ands	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004018:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <__NVIC_SetPriorityGrouping+0x44>)
 800401a:	4313      	orrs	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401e:	4a04      	ldr	r2, [pc, #16]	@ (8004030 <__NVIC_SetPriorityGrouping+0x40>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	60d3      	str	r3, [r2, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	05fa0000 	.word	0x05fa0000

08004038 <__NVIC_GetPriorityGrouping>:
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__NVIC_GetPriorityGrouping+0x18>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	f003 0307 	and.w	r3, r3, #7
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <__NVIC_EnableIRQ>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800405e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db0b      	blt.n	800407e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	f003 021f 	and.w	r2, r3, #31
 800406c:	4907      	ldr	r1, [pc, #28]	@ (800408c <__NVIC_EnableIRQ+0x38>)
 800406e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2001      	movs	r0, #1
 8004076:	fa00 f202 	lsl.w	r2, r0, r2
 800407a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000e100 	.word	0xe000e100

08004090 <__NVIC_DisableIRQ>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	db12      	blt.n	80040c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	490a      	ldr	r1, [pc, #40]	@ (80040d4 <__NVIC_DisableIRQ+0x44>)
 80040aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2001      	movs	r0, #1
 80040b2:	fa00 f202 	lsl.w	r2, r0, r2
 80040b6:	3320      	adds	r3, #32
 80040b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040bc:	f3bf 8f4f 	dsb	sy
}
 80040c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040c2:	f3bf 8f6f 	isb	sy
}
 80040c6:	bf00      	nop
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100

080040d8 <__NVIC_SetPriority>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	6039      	str	r1, [r7, #0]
 80040e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db0a      	blt.n	8004102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	490c      	ldr	r1, [pc, #48]	@ (8004124 <__NVIC_SetPriority+0x4c>)
 80040f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f6:	0112      	lsls	r2, r2, #4
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004100:	e00a      	b.n	8004118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4908      	ldr	r1, [pc, #32]	@ (8004128 <__NVIC_SetPriority+0x50>)
 8004108:	88fb      	ldrh	r3, [r7, #6]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	3b04      	subs	r3, #4
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	440b      	add	r3, r1
 8004116:	761a      	strb	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000e100 	.word	0xe000e100
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <NVIC_EncodePriority>:
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	@ 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f1c3 0307 	rsb	r3, r3, #7
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf28      	it	cs
 800414a:	2304      	movcs	r3, #4
 800414c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3304      	adds	r3, #4
 8004152:	2b06      	cmp	r3, #6
 8004154:	d902      	bls.n	800415c <NVIC_EncodePriority+0x30>
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3b03      	subs	r3, #3
 800415a:	e000      	b.n	800415e <NVIC_EncodePriority+0x32>
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	f04f 32ff 	mov.w	r2, #4294967295
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	401a      	ands	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004174:	f04f 31ff 	mov.w	r1, #4294967295
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	43d9      	mvns	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004184:	4313      	orrs	r3, r2
}
 8004186:	4618      	mov	r0, r3
 8004188:	3724      	adds	r7, #36	@ 0x24
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ff28 	bl	8003ff0 <__NVIC_SetPriorityGrouping>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041b6:	f7ff ff3f 	bl	8004038 <__NVIC_GetPriorityGrouping>
 80041ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7ff ffb3 	bl	800412c <NVIC_EncodePriority>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff82 	bl	80040d8 <__NVIC_SetPriority>
}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff32 	bl	8004054 <__NVIC_EnableIRQ>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff42 	bl	8004090 <__NVIC_DisableIRQ>
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004218:	f3bf 8f5f 	dmb	sy
}
 800421c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <HAL_MPU_Disable+0x28>)
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	4a06      	ldr	r2, [pc, #24]	@ (800423c <HAL_MPU_Disable+0x28>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004228:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800422a:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_MPU_Disable+0x2c>)
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000ed00 	.word	0xe000ed00
 8004240:	e000ed90 	.word	0xe000ed90

08004244 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800424c:	4a0b      	ldr	r2, [pc, #44]	@ (800427c <HAL_MPU_Enable+0x38>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_MPU_Enable+0x3c>)
 8004258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425a:	4a09      	ldr	r2, [pc, #36]	@ (8004280 <HAL_MPU_Enable+0x3c>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004262:	f3bf 8f4f 	dsb	sy
}
 8004266:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004268:	f3bf 8f6f 	isb	sy
}
 800426c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000ed90 	.word	0xe000ed90
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	785a      	ldrb	r2, [r3, #1]
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <HAL_MPU_ConfigRegion+0x7c>)
 8004292:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004294:	4b1a      	ldr	r3, [pc, #104]	@ (8004300 <HAL_MPU_ConfigRegion+0x7c>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4a19      	ldr	r2, [pc, #100]	@ (8004300 <HAL_MPU_ConfigRegion+0x7c>)
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <HAL_MPU_ConfigRegion+0x7c>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	7b1b      	ldrb	r3, [r3, #12]
 80042ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7adb      	ldrb	r3, [r3, #11]
 80042b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7a9b      	ldrb	r3, [r3, #10]
 80042ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80042bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7b5b      	ldrb	r3, [r3, #13]
 80042c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80042c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7b9b      	ldrb	r3, [r3, #14]
 80042ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80042cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7bdb      	ldrb	r3, [r3, #15]
 80042d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80042d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7a5b      	ldrb	r3, [r3, #9]
 80042da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80042dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7a1b      	ldrb	r3, [r3, #8]
 80042e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80042e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042ec:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80042ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042f0:	6113      	str	r3, [r2, #16]
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	e000ed90 	.word	0xe000ed90

08004304 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e054      	b.n	80043c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7f5b      	ldrb	r3, [r3, #29]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fc fcae 	bl	8000c88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	791b      	ldrb	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_CRC_Init+0xc4>)
 8004340:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0218 	bic.w	r2, r2, #24
 8004350:	609a      	str	r2, [r3, #8]
 8004352:	e00c      	b.n	800436e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6899      	ldr	r1, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f834 	bl	80043cc <HAL_CRCEx_Polynomial_Set>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e028      	b.n	80043c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	795b      	ldrb	r3, [r3, #5]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d105      	bne.n	8004382 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f04f 32ff 	mov.w	r2, #4294967295
 800437e:	611a      	str	r2, [r3, #16]
 8004380:	e004      	b.n	800438c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6912      	ldr	r2, [r2, #16]
 800438a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	04c11db7 	.word	0x04c11db7

080043cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80043dc:	231f      	movs	r3, #31
 80043de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
 80043ee:	e063      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80043f0:	bf00      	nop
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	613a      	str	r2, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <HAL_CRCEx_Polynomial_Set+0x44>
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b18      	cmp	r3, #24
 8004414:	d846      	bhi.n	80044a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004416:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	080044ab 	.word	0x080044ab
 8004420:	080044a5 	.word	0x080044a5
 8004424:	080044a5 	.word	0x080044a5
 8004428:	080044a5 	.word	0x080044a5
 800442c:	080044a5 	.word	0x080044a5
 8004430:	080044a5 	.word	0x080044a5
 8004434:	080044a5 	.word	0x080044a5
 8004438:	080044a5 	.word	0x080044a5
 800443c:	08004499 	.word	0x08004499
 8004440:	080044a5 	.word	0x080044a5
 8004444:	080044a5 	.word	0x080044a5
 8004448:	080044a5 	.word	0x080044a5
 800444c:	080044a5 	.word	0x080044a5
 8004450:	080044a5 	.word	0x080044a5
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044a5 	.word	0x080044a5
 800445c:	0800448d 	.word	0x0800448d
 8004460:	080044a5 	.word	0x080044a5
 8004464:	080044a5 	.word	0x080044a5
 8004468:	080044a5 	.word	0x080044a5
 800446c:	080044a5 	.word	0x080044a5
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080044a5 	.word	0x080044a5
 8004478:	080044a5 	.word	0x080044a5
 800447c:	08004481 	.word	0x08004481
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d913      	bls.n	80044ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800448a:	e010      	b.n	80044ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	2b07      	cmp	r3, #7
 8004490:	d90f      	bls.n	80044b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004496:	e00c      	b.n	80044b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	d90b      	bls.n	80044b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80044a2:	e008      	b.n	80044b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	75fb      	strb	r3, [r7, #23]
        break;
 80044a8:	e006      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80044aa:	bf00      	nop
 80044ac:	e004      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80044ae:	bf00      	nop
 80044b0:	e002      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80044b2:	bf00      	nop
 80044b4:	e000      	b.n	80044b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80044b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f023 0118 	bic.w	r1, r3, #24
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e04f      	b.n	800459a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc fbdc 	bl	8000ccc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b20      	ldr	r3, [pc, #128]	@ (80045a4 <HAL_DMA2D_Init+0xbc>)
 8004524:	4013      	ands	r3, r2
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6851      	ldr	r1, [r2, #4]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	69d2      	ldr	r2, [r2, #28]
 800452e:	4311      	orrs	r1, r2
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	430b      	orrs	r3, r1
 8004536:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_DMA2D_Init+0xc0>)
 8004540:	4013      	ands	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6891      	ldr	r1, [r2, #8]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800455a:	4b14      	ldr	r3, [pc, #80]	@ (80045ac <HAL_DMA2D_Init+0xc4>)
 800455c:	4013      	ands	r3, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68d1      	ldr	r1, [r2, #12]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	430b      	orrs	r3, r1
 8004568:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004570:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	051a      	lsls	r2, r3, #20
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	055b      	lsls	r3, r3, #21
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	fff8ffbf 	.word	0xfff8ffbf
 80045a8:	fffffef8 	.word	0xfffffef8
 80045ac:	ffff0000 	.word	0xffff0000

080045b0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d026      	beq.n	8004620 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d021      	beq.n	8004620 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045ea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2201      	movs	r2, #1
 80045fe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d026      	beq.n	8004678 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d021      	beq.n	8004678 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004642:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004650:	f043 0202 	orr.w	r2, r3, #2
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2204      	movs	r2, #4
 800465c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d026      	beq.n	80046d0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004688:	2b00      	cmp	r3, #0
 800468a:	d021      	beq.n	80046d0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800469a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2208      	movs	r2, #8
 80046a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2204      	movs	r2, #4
 80046b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d013      	beq.n	8004702 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2204      	movs	r2, #4
 80046fa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f853 	bl	80047a8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d024      	beq.n	8004756 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01f      	beq.n	8004756 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2202      	movs	r2, #2
 800472c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01f      	beq.n	80047a0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01a      	beq.n	80047a0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004778:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2210      	movs	r2, #16
 8004780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f80e 	bl	80047bc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_DMA2D_ConfigLayer+0x24>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e092      	b.n	800491a <HAL_DMA2D_ConfigLayer+0x14a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004828:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004834:	4b3c      	ldr	r3, [pc, #240]	@ (8004928 <HAL_DMA2D_ConfigLayer+0x158>)
 8004836:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b0a      	cmp	r3, #10
 800483e:	d003      	beq.n	8004848 <HAL_DMA2D_ConfigLayer+0x78>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b09      	cmp	r3, #9
 8004846:	d107      	bne.n	8004858 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e005      	b.n	8004864 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d120      	bne.n	80048ac <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	43db      	mvns	r3, r3
 8004874:	ea02 0103 	and.w	r1, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	430a      	orrs	r2, r1
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b0a      	cmp	r3, #10
 8004892:	d003      	beq.n	800489c <HAL_DMA2D_ConfigLayer+0xcc>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b09      	cmp	r3, #9
 800489a:	d135      	bne.n	8004908 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80048aa:	e02d      	b.n	8004908 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b0b      	cmp	r3, #11
 80048b2:	d109      	bne.n	80048c8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	049b      	lsls	r3, r3, #18
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80048c6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	ea02 0103 	and.w	r1, r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	430a      	orrs	r2, r1
 80048de:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b0a      	cmp	r3, #10
 80048f0:	d003      	beq.n	80048fa <HAL_DMA2D_ConfigLayer+0x12a>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	d106      	bne.n	8004908 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004906:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	ff33000f 	.word	0xff33000f

0800492c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800493a:	4b89      	ldr	r3, [pc, #548]	@ (8004b60 <HAL_GPIO_Init+0x234>)
 800493c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800493e:	e194      	b.n	8004c6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8186 	beq.w	8004c64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d005      	beq.n	8004970 <HAL_GPIO_Init+0x44>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d130      	bne.n	80049d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	2203      	movs	r2, #3
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049a6:	2201      	movs	r2, #1
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0201 	and.w	r2, r3, #1
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d017      	beq.n	8004a0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4013      	ands	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d123      	bne.n	8004a62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	08da      	lsrs	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3208      	adds	r2, #8
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	220f      	movs	r2, #15
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	08da      	lsrs	r2, r3, #3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3208      	adds	r2, #8
 8004a5c:	69b9      	ldr	r1, [r7, #24]
 8004a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	4013      	ands	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0203 	and.w	r2, r3, #3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69ba      	ldr	r2, [r7, #24]
 8004a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80e0 	beq.w	8004c64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004b64 <HAL_GPIO_Init+0x238>)
 8004aa6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004aaa:	4a2e      	ldr	r2, [pc, #184]	@ (8004b64 <HAL_GPIO_Init+0x238>)
 8004aac:	f043 0302 	orr.w	r3, r3, #2
 8004ab0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <HAL_GPIO_Init+0x238>)
 8004ab6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac2:	4a29      	ldr	r2, [pc, #164]	@ (8004b68 <HAL_GPIO_Init+0x23c>)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	3302      	adds	r3, #2
 8004aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	@ (8004b6c <HAL_GPIO_Init+0x240>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d052      	beq.n	8004b94 <HAL_GPIO_Init+0x268>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b70 <HAL_GPIO_Init+0x244>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d031      	beq.n	8004b5a <HAL_GPIO_Init+0x22e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b74 <HAL_GPIO_Init+0x248>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02b      	beq.n	8004b56 <HAL_GPIO_Init+0x22a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <HAL_GPIO_Init+0x24c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d025      	beq.n	8004b52 <HAL_GPIO_Init+0x226>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	@ (8004b7c <HAL_GPIO_Init+0x250>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <HAL_GPIO_Init+0x222>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_GPIO_Init+0x254>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d019      	beq.n	8004b4a <HAL_GPIO_Init+0x21e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_GPIO_Init+0x258>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_GPIO_Init+0x21a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a19      	ldr	r2, [pc, #100]	@ (8004b88 <HAL_GPIO_Init+0x25c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00d      	beq.n	8004b42 <HAL_GPIO_Init+0x216>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a18      	ldr	r2, [pc, #96]	@ (8004b8c <HAL_GPIO_Init+0x260>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <HAL_GPIO_Init+0x212>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a17      	ldr	r2, [pc, #92]	@ (8004b90 <HAL_GPIO_Init+0x264>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_GPIO_Init+0x20e>
 8004b36:	2309      	movs	r3, #9
 8004b38:	e02d      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b3a:	230a      	movs	r3, #10
 8004b3c:	e02b      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b3e:	2308      	movs	r3, #8
 8004b40:	e029      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b42:	2307      	movs	r3, #7
 8004b44:	e027      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b46:	2306      	movs	r3, #6
 8004b48:	e025      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b4a:	2305      	movs	r3, #5
 8004b4c:	e023      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b4e:	2304      	movs	r3, #4
 8004b50:	e021      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b52:	2303      	movs	r3, #3
 8004b54:	e01f      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e01d      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e01b      	b.n	8004b96 <HAL_GPIO_Init+0x26a>
 8004b5e:	bf00      	nop
 8004b60:	58000080 	.word	0x58000080
 8004b64:	58024400 	.word	0x58024400
 8004b68:	58000400 	.word	0x58000400
 8004b6c:	58020000 	.word	0x58020000
 8004b70:	58020400 	.word	0x58020400
 8004b74:	58020800 	.word	0x58020800
 8004b78:	58020c00 	.word	0x58020c00
 8004b7c:	58021000 	.word	0x58021000
 8004b80:	58021400 	.word	0x58021400
 8004b84:	58021800 	.word	0x58021800
 8004b88:	58021c00 	.word	0x58021c00
 8004b8c:	58022000 	.word	0x58022000
 8004b90:	58022400 	.word	0x58022400
 8004b94:	2300      	movs	r3, #0
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	f002 0203 	and.w	r2, r2, #3
 8004b9c:	0092      	lsls	r2, r2, #2
 8004b9e:	4093      	lsls	r3, r2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba6:	4938      	ldr	r1, [pc, #224]	@ (8004c88 <HAL_GPIO_Init+0x35c>)
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	3302      	adds	r3, #2
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	fa22 f303 	lsr.w	r3, r2, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f ae63 	bne.w	8004940 <HAL_GPIO_Init+0x14>
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	3724      	adds	r7, #36	@ 0x24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	58000400 	.word	0x58000400

08004c8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c9a:	4b75      	ldr	r3, [pc, #468]	@ (8004e70 <HAL_GPIO_DeInit+0x1e4>)
 8004c9c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004c9e:	e0d9      	b.n	8004e54 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	4013      	ands	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80cc 	beq.w	8004e4e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004cb6:	4a6f      	ldr	r2, [pc, #444]	@ (8004e74 <HAL_GPIO_DeInit+0x1e8>)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	089b      	lsrs	r3, r3, #2
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	220f      	movs	r2, #15
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a67      	ldr	r2, [pc, #412]	@ (8004e78 <HAL_GPIO_DeInit+0x1ec>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d037      	beq.n	8004d50 <HAL_GPIO_DeInit+0xc4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a66      	ldr	r2, [pc, #408]	@ (8004e7c <HAL_GPIO_DeInit+0x1f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d031      	beq.n	8004d4c <HAL_GPIO_DeInit+0xc0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a65      	ldr	r2, [pc, #404]	@ (8004e80 <HAL_GPIO_DeInit+0x1f4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d02b      	beq.n	8004d48 <HAL_GPIO_DeInit+0xbc>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a64      	ldr	r2, [pc, #400]	@ (8004e84 <HAL_GPIO_DeInit+0x1f8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d025      	beq.n	8004d44 <HAL_GPIO_DeInit+0xb8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a63      	ldr	r2, [pc, #396]	@ (8004e88 <HAL_GPIO_DeInit+0x1fc>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d01f      	beq.n	8004d40 <HAL_GPIO_DeInit+0xb4>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a62      	ldr	r2, [pc, #392]	@ (8004e8c <HAL_GPIO_DeInit+0x200>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d019      	beq.n	8004d3c <HAL_GPIO_DeInit+0xb0>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a61      	ldr	r2, [pc, #388]	@ (8004e90 <HAL_GPIO_DeInit+0x204>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d013      	beq.n	8004d38 <HAL_GPIO_DeInit+0xac>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a60      	ldr	r2, [pc, #384]	@ (8004e94 <HAL_GPIO_DeInit+0x208>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00d      	beq.n	8004d34 <HAL_GPIO_DeInit+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8004e98 <HAL_GPIO_DeInit+0x20c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <HAL_GPIO_DeInit+0xa4>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a5e      	ldr	r2, [pc, #376]	@ (8004e9c <HAL_GPIO_DeInit+0x210>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_GPIO_DeInit+0xa0>
 8004d28:	2309      	movs	r3, #9
 8004d2a:	e012      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d2c:	230a      	movs	r3, #10
 8004d2e:	e010      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d30:	2308      	movs	r3, #8
 8004d32:	e00e      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d34:	2307      	movs	r3, #7
 8004d36:	e00c      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d38:	2306      	movs	r3, #6
 8004d3a:	e00a      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d3c:	2305      	movs	r3, #5
 8004d3e:	e008      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d40:	2304      	movs	r3, #4
 8004d42:	e006      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d44:	2303      	movs	r3, #3
 8004d46:	e004      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e002      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_GPIO_DeInit+0xc6>
 8004d50:	2300      	movs	r3, #0
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	f002 0203 	and.w	r2, r2, #3
 8004d58:	0092      	lsls	r2, r2, #2
 8004d5a:	4093      	lsls	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d136      	bne.n	8004dd0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	401a      	ands	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	43db      	mvns	r3, r3
 8004d78:	401a      	ands	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	43db      	mvns	r3, r3
 8004d88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d9e:	4013      	ands	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f003 0303 	and.w	r3, r3, #3
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	220f      	movs	r2, #15
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004db2:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <HAL_GPIO_DeInit+0x1e8>)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	3302      	adds	r3, #2
 8004dba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	43da      	mvns	r2, r3
 8004dc2:	482c      	ldr	r0, [pc, #176]	@ (8004e74 <HAL_GPIO_DeInit+0x1e8>)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	400a      	ands	r2, r1
 8004dca:	3302      	adds	r3, #2
 8004dcc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	2103      	movs	r1, #3
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	08da      	lsrs	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3208      	adds	r2, #8
 8004dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	220f      	movs	r2, #15
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	08d2      	lsrs	r2, r2, #3
 8004e04:	4019      	ands	r1, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	2103      	movs	r1, #3
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	401a      	ands	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	2103      	movs	r1, #3
 8004e42:	fa01 f303 	lsl.w	r3, r1, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	401a      	ands	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	3301      	adds	r3, #1
 8004e52:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f47f af1f 	bne.w	8004ca0 <HAL_GPIO_DeInit+0x14>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	58000080 	.word	0x58000080
 8004e74:	58000400 	.word	0x58000400
 8004e78:	58020000 	.word	0x58020000
 8004e7c:	58020400 	.word	0x58020400
 8004e80:	58020800 	.word	0x58020800
 8004e84:	58020c00 	.word	0x58020c00
 8004e88:	58021000 	.word	0x58021000
 8004e8c:	58021400 	.word	0x58021400
 8004e90:	58021800 	.word	0x58021800
 8004e94:	58021c00 	.word	0x58021c00
 8004e98:	58022000 	.word	0x58022000
 8004e9c:	58022400 	.word	0x58022400

08004ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	807b      	strh	r3, [r7, #2]
 8004eac:	4613      	mov	r3, r2
 8004eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004eb0:	787b      	ldrb	r3, [r7, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb6:	887a      	ldrh	r2, [r7, #2]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ebc:	e003      	b.n	8004ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ebe:	887b      	ldrh	r3, [r7, #2]
 8004ec0:	041a      	lsls	r2, r3, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	619a      	str	r2, [r3, #24]
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	460b      	mov	r3, r1
 8004edc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ee4:	887a      	ldrh	r2, [r7, #2]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	041a      	lsls	r2, r3, #16
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	43d9      	mvns	r1, r3
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	619a      	str	r2, [r3, #24]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f14:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f18:	88fb      	ldrh	r3, [r7, #6]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fb fe01 	bl	8000b34 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e08b      	b.n	8005066 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fb feda 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2224      	movs	r2, #36	@ 0x24
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	e006      	b.n	8004fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d108      	bne.n	8004fde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	e007      	b.n	8004fee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8005070 <HAL_I2C_Init+0x134>)
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800500c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	69d9      	ldr	r1, [r3, #28]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	02008000 	.word	0x02008000

08005074 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e021      	b.n	80050ca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2224      	movs	r2, #36	@ 0x24
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fb fea6 	bl	8000df0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	817b      	strh	r3, [r7, #10]
 80050e6:	460b      	mov	r3, r1
 80050e8:	813b      	strh	r3, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	f040 80f9 	bne.w	80052ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_I2C_Mem_Write+0x34>
 8005102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800510e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0ed      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_I2C_Mem_Write+0x4e>
 800511e:	2302      	movs	r3, #2
 8005120:	e0e6      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800512a:	f7fe ff31 	bl	8003f90 <HAL_GetTick>
 800512e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	2319      	movs	r3, #25
 8005136:	2201      	movs	r2, #1
 8005138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fadd 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0d1      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2221      	movs	r2, #33	@ 0x21
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2240      	movs	r2, #64	@ 0x40
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005174:	88f8      	ldrh	r0, [r7, #6]
 8005176:	893a      	ldrh	r2, [r7, #8]
 8005178:	8979      	ldrh	r1, [r7, #10]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4603      	mov	r3, r0
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f9ed 	bl	8005564 <I2C_RequestMemoryWrite>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0a9      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2bff      	cmp	r3, #255	@ 0xff
 80051a4:	d90e      	bls.n	80051c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	@ 0xff
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fc61 	bl	8005a84 <I2C_TransferConfig>
 80051c2:	e00f      	b.n	80051e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	8979      	ldrh	r1, [r7, #10]
 80051d6:	2300      	movs	r3, #0
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fc50 	bl	8005a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fae0 	bl	80057ae <I2C_WaitOnTXISFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e07b      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d034      	beq.n	800529c <HAL_I2C_Mem_Write+0x1c8>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d130      	bne.n	800529c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	2200      	movs	r2, #0
 8005242:	2180      	movs	r1, #128	@ 0x80
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fa59 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e04d      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	2bff      	cmp	r3, #255	@ 0xff
 800525c:	d90e      	bls.n	800527c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	22ff      	movs	r2, #255	@ 0xff
 8005262:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005268:	b2da      	uxtb	r2, r3
 800526a:	8979      	ldrh	r1, [r7, #10]
 800526c:	2300      	movs	r3, #0
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fc05 	bl	8005a84 <I2C_TransferConfig>
 800527a:	e00f      	b.n	800529c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528a:	b2da      	uxtb	r2, r3
 800528c:	8979      	ldrh	r1, [r7, #10]
 800528e:	2300      	movs	r3, #0
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fbf4 	bl	8005a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d19e      	bne.n	80051e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fac6 	bl	800583c <I2C_WaitOnSTOPFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e01a      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2220      	movs	r2, #32
 80052c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <HAL_I2C_Mem_Write+0x224>)
 80052ce:	400b      	ands	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e000      	b.n	80052f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
  }
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	fe00e800 	.word	0xfe00e800

080052fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	f040 80fd 	bne.w	800551e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_I2C_Mem_Read+0x34>
 800532a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005336:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0f1      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_I2C_Mem_Read+0x4e>
 8005346:	2302      	movs	r3, #2
 8005348:	e0ea      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005352:	f7fe fe1d 	bl	8003f90 <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2319      	movs	r3, #25
 800535e:	2201      	movs	r2, #1
 8005360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 f9c9 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0d5      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2222      	movs	r2, #34	@ 0x22
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2240      	movs	r2, #64	@ 0x40
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800539c:	88f8      	ldrh	r0, [r7, #6]
 800539e:	893a      	ldrh	r2, [r7, #8]
 80053a0:	8979      	ldrh	r1, [r7, #10]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4603      	mov	r3, r0
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f92d 	bl	800560c <I2C_RequestMemoryRead>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0ad      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2bff      	cmp	r3, #255	@ 0xff
 80053cc:	d90e      	bls.n	80053ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	22ff      	movs	r2, #255	@ 0xff
 80053d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	4b52      	ldr	r3, [pc, #328]	@ (8005528 <HAL_I2C_Mem_Read+0x22c>)
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fb4d 	bl	8005a84 <I2C_TransferConfig>
 80053ea:	e00f      	b.n	800540c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	8979      	ldrh	r1, [r7, #10]
 80053fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005528 <HAL_I2C_Mem_Read+0x22c>)
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fb3c 	bl	8005a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	2200      	movs	r2, #0
 8005414:	2104      	movs	r1, #4
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f970 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07c      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d034      	beq.n	80054cc <HAL_I2C_Mem_Read+0x1d0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	2b00      	cmp	r3, #0
 8005468:	d130      	bne.n	80054cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005470:	2200      	movs	r2, #0
 8005472:	2180      	movs	r1, #128	@ 0x80
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f941 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e04d      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2bff      	cmp	r3, #255	@ 0xff
 800548c:	d90e      	bls.n	80054ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	22ff      	movs	r2, #255	@ 0xff
 8005492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005498:	b2da      	uxtb	r2, r3
 800549a:	8979      	ldrh	r1, [r7, #10]
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 faed 	bl	8005a84 <I2C_TransferConfig>
 80054aa:	e00f      	b.n	80054cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	8979      	ldrh	r1, [r7, #10]
 80054be:	2300      	movs	r3, #0
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fadc 	bl	8005a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d19a      	bne.n	800540c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f9ae 	bl	800583c <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e01a      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2220      	movs	r2, #32
 80054f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <HAL_I2C_Mem_Read+0x230>)
 80054fe:	400b      	ands	r3, r1
 8005500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e000      	b.n	8005520 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	80002400 	.word	0x80002400
 800552c:	fe00e800 	.word	0xfe00e800

08005530 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	8979      	ldrh	r1, [r7, #10]
 8005584:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <I2C_RequestMemoryWrite+0xa4>)
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fa79 	bl	8005a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	69b9      	ldr	r1, [r7, #24]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f909 	bl	80057ae <I2C_WaitOnTXISFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e02c      	b.n	8005600 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d105      	bne.n	80055b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055ac:	893b      	ldrh	r3, [r7, #8]
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80055b6:	e015      	b.n	80055e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055b8:	893b      	ldrh	r3, [r7, #8]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	69b9      	ldr	r1, [r7, #24]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f8ef 	bl	80057ae <I2C_WaitOnTXISFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e012      	b.n	8005600 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2180      	movs	r1, #128	@ 0x80
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f884 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	80002000 	.word	0x80002000

0800560c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	461a      	mov	r2, r3
 800561a:	4603      	mov	r3, r0
 800561c:	817b      	strh	r3, [r7, #10]
 800561e:	460b      	mov	r3, r1
 8005620:	813b      	strh	r3, [r7, #8]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	8979      	ldrh	r1, [r7, #10]
 800562c:	4b20      	ldr	r3, [pc, #128]	@ (80056b0 <I2C_RequestMemoryRead+0xa4>)
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa26 	bl	8005a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f8b6 	bl	80057ae <I2C_WaitOnTXISFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e02c      	b.n	80056a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d105      	bne.n	800565e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005652:	893b      	ldrh	r3, [r7, #8]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	629a      	str	r2, [r3, #40]	@ 0x28
 800565c:	e015      	b.n	800568a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800565e:	893b      	ldrh	r3, [r7, #8]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	b29b      	uxth	r3, r3
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	69b9      	ldr	r1, [r7, #24]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f89c 	bl	80057ae <I2C_WaitOnTXISFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e012      	b.n	80056a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2200      	movs	r2, #0
 8005692:	2140      	movs	r1, #64	@ 0x40
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 f831 	bl	80056fc <I2C_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	80002000 	.word	0x80002000

080056b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d103      	bne.n	80056d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d007      	beq.n	80056f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	619a      	str	r2, [r3, #24]
  }
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800570c:	e03b      	b.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f8d6 	bl	80058c4 <I2C_IsErrorOccurred>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e041      	b.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d02d      	beq.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fe fc31 	bl	8003f90 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x44>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d122      	bne.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	d113      	bne.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e00f      	b.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d0b4      	beq.n	800570e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057ba:	e033      	b.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f87f 	bl	80058c4 <I2C_IsErrorOccurred>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e031      	b.n	8005834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d025      	beq.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d8:	f7fe fbda 	bl	8003f90 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11a      	bne.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d013      	beq.n	8005824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e007      	b.n	8005834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b02      	cmp	r3, #2
 8005830:	d1c4      	bne.n	80057bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005848:	e02f      	b.n	80058aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f838 	bl	80058c4 <I2C_IsErrorOccurred>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e02d      	b.n	80058ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fe fb97 	bl	8003f90 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11a      	bne.n	80058aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b20      	cmp	r3, #32
 8005880:	d013      	beq.n	80058aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f043 0220 	orr.w	r2, r3, #32
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e007      	b.n	80058ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d1c8      	bne.n	800584a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d068      	beq.n	80059c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2210      	movs	r2, #16
 80058f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058f8:	e049      	b.n	800598e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d045      	beq.n	800598e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fe fb45 	bl	8003f90 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <I2C_IsErrorOccurred+0x54>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d13a      	bne.n	800598e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800592a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800593a:	d121      	bne.n	8005980 <I2C_IsErrorOccurred+0xbc>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005942:	d01d      	beq.n	8005980 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005944:	7cfb      	ldrb	r3, [r7, #19]
 8005946:	2b20      	cmp	r3, #32
 8005948:	d01a      	beq.n	8005980 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800595a:	f7fe fb19 	bl	8003f90 <HAL_GetTick>
 800595e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005960:	e00e      	b.n	8005980 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005962:	f7fe fb15 	bl	8003f90 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b19      	cmp	r3, #25
 800596e:	d907      	bls.n	8005980 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f043 0320 	orr.w	r3, r3, #32
 8005976:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800597e:	e006      	b.n	800598e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b20      	cmp	r3, #32
 800598c:	d1e9      	bne.n	8005962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b20      	cmp	r3, #32
 800599a:	d003      	beq.n	80059a4 <I2C_IsErrorOccurred+0xe0>
 800599c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0aa      	beq.n	80058fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80059a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d103      	bne.n	80059b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2220      	movs	r2, #32
 80059b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f043 0304 	orr.w	r3, r3, #4
 80059ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f043 0308 	orr.w	r3, r3, #8
 80059fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01c      	beq.n	8005a72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fe3b 	bl	80056b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6859      	ldr	r1, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b0d      	ldr	r3, [pc, #52]	@ (8005a80 <I2C_IsErrorOccurred+0x1bc>)
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3728      	adds	r7, #40	@ 0x28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	fe00e800 	.word	0xfe00e800

08005a84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	817b      	strh	r3, [r7, #10]
 8005a92:	4613      	mov	r3, r2
 8005a94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a96:	897b      	ldrh	r3, [r7, #10]
 8005a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a9c:	7a7b      	ldrb	r3, [r7, #9]
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	0d5b      	lsrs	r3, r3, #21
 8005abe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005ac2:	4b08      	ldr	r3, [pc, #32]	@ (8005ae4 <I2C_TransferConfig+0x60>)
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	ea02 0103 	and.w	r1, r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	03ff63ff 	.word	0x03ff63ff

08005ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d138      	bne.n	8005b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e032      	b.n	8005b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2224      	movs	r2, #36	@ 0x24
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6819      	ldr	r1, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d139      	bne.n	8005c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e033      	b.n	8005c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	@ 0x24
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0201 	bic.w	r2, r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	e000      	b.n	8005c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c08:	2302      	movs	r3, #2
  }
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0bf      	b.n	8005daa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb f8fc 	bl	8000e3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68d9      	ldr	r1, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005cba:	400b      	ands	r3, r1
 8005cbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6919      	ldr	r1, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b33      	ldr	r3, [pc, #204]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005ce8:	400b      	ands	r3, r1
 8005cea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6959      	ldr	r1, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6959      	ldr	r1, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0206 	orr.w	r2, r2, #6
 8005d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	f000f800 	.word	0xf000f800

08005db8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d023      	beq.n	8005e22 <HAL_LTDC_IRQHandler+0x6a>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01e      	beq.n	8005e22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f86f 	bl	8005f00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d023      	beq.n	8005e74 <HAL_LTDC_IRQHandler+0xbc>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01e      	beq.n	8005e74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0202 	bic.w	r2, r2, #2
 8005e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e54:	f043 0202 	orr.w	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f846 	bl	8005f00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01b      	beq.n	8005eb6 <HAL_LTDC_IRQHandler+0xfe>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d016      	beq.n	8005eb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f00c f901 	bl	80120b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_LTDC_IRQHandler+0x140>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0208 	bic.w	r2, r2, #8
 8005ed8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f80e 	bl	8005f14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_LTDC_ConfigLayer+0x1a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e02c      	b.n	8005f9c <HAL_LTDC_ConfigLayer+0x74>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2134      	movs	r1, #52	@ 0x34
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4614      	mov	r4, r2
 8005f66:	461d      	mov	r5, r3
 8005f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f849 	bl	8006014 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2201      	movs	r2, #1
 8005f88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bdb0      	pop	{r4, r5, r7, pc}

08005fa4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_LTDC_ProgramLineEvent+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e023      	b.n	8006004 <HAL_LTDC_ProgramLineEvent+0x60>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0201 	orr.w	r2, r2, #1
 8005ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	50001000 	.word	0x50001000

08006014 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006030:	4413      	add	r3, r2
 8006032:	041b      	lsls	r3, r3, #16
 8006034:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	01db      	lsls	r3, r3, #7
 8006040:	4413      	add	r3, r2
 8006042:	3384      	adds	r3, #132	@ 0x84
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	4611      	mov	r1, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	01d2      	lsls	r2, r2, #7
 8006050:	440a      	add	r2, r1
 8006052:	3284      	adds	r2, #132	@ 0x84
 8006054:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006058:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800606a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800606c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	01db      	lsls	r3, r3, #7
 8006078:	440b      	add	r3, r1
 800607a:	3384      	adds	r3, #132	@ 0x84
 800607c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006082:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006092:	4413      	add	r3, r2
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	4413      	add	r3, r2
 80060a4:	3384      	adds	r3, #132	@ 0x84
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	4611      	mov	r1, r2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	01d2      	lsls	r2, r2, #7
 80060b2:	440a      	add	r2, r1
 80060b4:	3284      	adds	r2, #132	@ 0x84
 80060b6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80060ba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ca:	4413      	add	r3, r2
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	01db      	lsls	r3, r3, #7
 80060d8:	440b      	add	r3, r1
 80060da:	3384      	adds	r3, #132	@ 0x84
 80060dc:	4619      	mov	r1, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	01db      	lsls	r3, r3, #7
 80060ee:	4413      	add	r3, r2
 80060f0:	3384      	adds	r3, #132	@ 0x84
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	4611      	mov	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	01d2      	lsls	r2, r2, #7
 80060fe:	440a      	add	r2, r1
 8006100:	3284      	adds	r2, #132	@ 0x84
 8006102:	f023 0307 	bic.w	r3, r3, #7
 8006106:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	@ 0x84
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	061b      	lsls	r3, r3, #24
 8006138:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	01db      	lsls	r3, r3, #7
 8006144:	4413      	add	r3, r2
 8006146:	3384      	adds	r3, #132	@ 0x84
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	01db      	lsls	r3, r3, #7
 8006154:	4413      	add	r3, r2
 8006156:	3384      	adds	r3, #132	@ 0x84
 8006158:	461a      	mov	r2, r3
 800615a:	2300      	movs	r3, #0
 800615c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006164:	461a      	mov	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	431a      	orrs	r2, r3
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	431a      	orrs	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4619      	mov	r1, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	440b      	add	r3, r1
 800617a:	3384      	adds	r3, #132	@ 0x84
 800617c:	4619      	mov	r1, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	01db      	lsls	r3, r3, #7
 800618e:	4413      	add	r3, r2
 8006190:	3384      	adds	r3, #132	@ 0x84
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	4611      	mov	r1, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	01d2      	lsls	r2, r2, #7
 800619e:	440a      	add	r2, r1
 80061a0:	3284      	adds	r2, #132	@ 0x84
 80061a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	@ 0x84
 80061b6:	461a      	mov	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	01db      	lsls	r3, r3, #7
 80061c8:	4413      	add	r3, r2
 80061ca:	3384      	adds	r3, #132	@ 0x84
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4619      	mov	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	01db      	lsls	r3, r3, #7
 80061d8:	440b      	add	r3, r1
 80061da:	3384      	adds	r3, #132	@ 0x84
 80061dc:	4619      	mov	r1, r3
 80061de:	4b58      	ldr	r3, [pc, #352]	@ (8006340 <LTDC_SetConfig+0x32c>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	6809      	ldr	r1, [r1, #0]
 80061f0:	4608      	mov	r0, r1
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	01c9      	lsls	r1, r1, #7
 80061f6:	4401      	add	r1, r0
 80061f8:	3184      	adds	r1, #132	@ 0x84
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	01db      	lsls	r3, r3, #7
 8006208:	4413      	add	r3, r2
 800620a:	3384      	adds	r3, #132	@ 0x84
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4413      	add	r3, r2
 800621a:	3384      	adds	r3, #132	@ 0x84
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	01db      	lsls	r3, r3, #7
 800622c:	4413      	add	r3, r2
 800622e:	3384      	adds	r3, #132	@ 0x84
 8006230:	461a      	mov	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006240:	2304      	movs	r3, #4
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e01b      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d102      	bne.n	8006254 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800624e:	2303      	movs	r3, #3
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	e014      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d00b      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006260:	2b02      	cmp	r3, #2
 8006262:	d007      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006268:	2b03      	cmp	r3, #3
 800626a:	d003      	beq.n	8006274 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006270:	2b07      	cmp	r3, #7
 8006272:	d102      	bne.n	800627a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006274:	2302      	movs	r3, #2
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e001      	b.n	800627e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800627a:	2301      	movs	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	4413      	add	r3, r2
 800628a:	3384      	adds	r3, #132	@ 0x84
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	4611      	mov	r1, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	01d2      	lsls	r2, r2, #7
 8006298:	440a      	add	r2, r1
 800629a:	3284      	adds	r2, #132	@ 0x84
 800629c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80062a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1acb      	subs	r3, r1, r3
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80062c0:	68f9      	ldr	r1, [r7, #12]
 80062c2:	6809      	ldr	r1, [r1, #0]
 80062c4:	4608      	mov	r0, r1
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	01c9      	lsls	r1, r1, #7
 80062ca:	4401      	add	r1, r0
 80062cc:	3184      	adds	r1, #132	@ 0x84
 80062ce:	4313      	orrs	r3, r2
 80062d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	4413      	add	r3, r2
 80062de:	3384      	adds	r3, #132	@ 0x84
 80062e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4619      	mov	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	440b      	add	r3, r1
 80062ee:	3384      	adds	r3, #132	@ 0x84
 80062f0:	4619      	mov	r1, r3
 80062f2:	4b14      	ldr	r3, [pc, #80]	@ (8006344 <LTDC_SetConfig+0x330>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	01db      	lsls	r3, r3, #7
 8006302:	4413      	add	r3, r2
 8006304:	3384      	adds	r3, #132	@ 0x84
 8006306:	461a      	mov	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	4413      	add	r3, r2
 800631a:	3384      	adds	r3, #132	@ 0x84
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	4611      	mov	r1, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	01d2      	lsls	r2, r2, #7
 8006328:	440a      	add	r2, r1
 800632a:	3284      	adds	r2, #132	@ 0x84
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6013      	str	r3, [r2, #0]
}
 8006332:	bf00      	nop
 8006334:	3724      	adds	r7, #36	@ 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	fffff8f8 	.word	0xfffff8f8
 8006344:	fffff800 	.word	0xfffff800

08006348 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8006350:	f7fd fe1e 	bl	8003f90 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e04a      	b.n	80063f6 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d008      	beq.n	800637e <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2280      	movs	r2, #128	@ 0x80
 8006370:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e03b      	b.n	80063f6 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800638c:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800639e:	e016      	b.n	80063ce <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80063a0:	f7fd fdf6 	bl	8003f90 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b05      	cmp	r3, #5
 80063ac:	d90f      	bls.n	80063ce <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2203      	movs	r2, #3
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e013      	b.n	80063f6 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e1      	bne.n	80063a0 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	221f      	movs	r2, #31
 80063e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e017      	b.n	8006440 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d004      	beq.n	8006426 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2280      	movs	r2, #128	@ 0x80
 8006420:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e00c      	b.n	8006440 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2204      	movs	r2, #4
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af02      	add	r7, sp, #8
 8006452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006458:	f7fd fd9a 	bl	8003f90 <HAL_GetTick>
 800645c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e0a5      	b.n	80065b6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 809e 	bne.w	80065b6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fa fdac 	bl	8000fd8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006480:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fd44 	bl	8006f12 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	4b4b      	ldr	r3, [pc, #300]	@ (80065c0 <HAL_OSPI_Init+0x174>)
 8006492:	4013      	ands	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68d1      	ldr	r1, [r2, #12]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6912      	ldr	r2, [r2, #16]
 800649c:	3a01      	subs	r2, #1
 800649e:	0412      	lsls	r2, r2, #16
 80064a0:	4311      	orrs	r1, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6952      	ldr	r2, [r2, #20]
 80064a6:	3a01      	subs	r2, #1
 80064a8:	0212      	lsls	r2, r2, #8
 80064aa:	4311      	orrs	r1, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	69d2      	ldr	r2, [r2, #28]
 80064b6:	4311      	orrs	r1, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	430b      	orrs	r3, r1
 80064be:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064f0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	3b01      	subs	r3, #1
 8006502:	021a      	lsls	r2, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2200      	movs	r2, #0
 8006516:	2120      	movs	r1, #32
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd45 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d146      	bne.n	80065b6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	1e5a      	subs	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800655e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d107      	bne.n	800659e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0202 	orr.w	r2, r2, #2
 800659c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065a6:	d103      	bne.n	80065b0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80065ae:	e002      	b.n	80065b6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	f8e0f8f4 	.word	0xf8e0f8f4

080065c4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	e015      	b.n	8006608 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0201 	bic.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0202 	bic.w	r2, r2, #2
 80065fa:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fa fd3b 	bl	8001078 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3350      	adds	r3, #80	@ 0x50
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006638:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d03a      	beq.n	80066ba <HAL_OSPI_IRQHandler+0xa6>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d035      	beq.n	80066ba <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b18      	cmp	r3, #24
 8006652:	d10f      	bne.n	8006674 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	781a      	ldrb	r2, [r3, #0]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666c:	1e5a      	subs	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	649a      	str	r2, [r3, #72]	@ 0x48
 8006672:	e012      	b.n	800669a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b28      	cmp	r3, #40	@ 0x28
 8006678:	d10f      	bne.n	800669a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006694:	1e5a      	subs	r2, r3, #1
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d107      	bne.n	80066b2 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80066b0:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb7c 	bl	8006db0 <HAL_OSPI_FifoThresholdCallback>
 80066b8:	e0e7      	b.n	800688a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d067      	beq.n	8006794 <HAL_OSPI_IRQHandler+0x180>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d062      	beq.n	8006794 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b28      	cmp	r3, #40	@ 0x28
 80066d2:	d131      	bne.n	8006738 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d015      	beq.n	8006708 <HAL_OSPI_IRQHandler+0xf4>
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d010      	beq.n	8006708 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006700:	1e5a      	subs	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006706:	e0bd      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 80b9 	bne.w	8006884 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2202      	movs	r2, #2
 8006718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006728:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fb51 	bl	8006dd8 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006736:	e0a5      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2202      	movs	r2, #2
 800673e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 800674e:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b18      	cmp	r3, #24
 800675a:	d103      	bne.n	8006764 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb45 	bl	8006dec <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006762:	e08f      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b08      	cmp	r3, #8
 8006768:	d103      	bne.n	8006772 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fb2a 	bl	8006dc4 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006770:	e088      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006778:	f040 8084 	bne.w	8006884 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb09 	bl	8006d9c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800678a:	e07b      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fafb 	bl	8006d88 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006792:	e077      	b.n	8006884 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01e      	beq.n	80067dc <HAL_OSPI_IRQHandler+0x1c8>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d019      	beq.n	80067dc <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2208      	movs	r2, #8
 80067ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 80067cc:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fb13 	bl	8006e00 <HAL_OSPI_StatusMatchCallback>
 80067da:	e056      	b.n	800688a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d03c      	beq.n	8006860 <HAL_OSPI_IRQHandler+0x24c>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d037      	beq.n	8006860 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006806:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01a      	beq.n	8006852 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0204 	bic.w	r2, r2, #4
 800682a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006830:	4a18      	ldr	r2, [pc, #96]	@ (8006894 <HAL_OSPI_IRQHandler+0x280>)
 8006832:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fde0 	bl	80063fe <HAL_MDMA_Abort_IT>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d021      	beq.n	8006888 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa9c 	bl	8006d88 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006850:	e01a      	b.n	8006888 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fa95 	bl	8006d88 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800685e:	e013      	b.n	8006888 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f003 0310 	and.w	r3, r3, #16
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00f      	beq.n	800688a <HAL_OSPI_IRQHandler+0x276>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2210      	movs	r2, #16
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fac9 	bl	8006e14 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006882:	e002      	b.n	800688a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006884:	bf00      	nop
 8006886:	e000      	b.n	800688a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006888:	bf00      	nop
}
 800688a:	bf00      	nop
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	08006f31 	.word	0x08006f31

08006898 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	@ 0x28
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80068a4:	f7fd fb74 	bl	8003f90 <HAL_GetTick>
 80068a8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d104      	bne.n	80068c6 <HAL_OSPI_Command+0x2e>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068c4:	d115      	bne.n	80068f2 <HAL_OSPI_Command+0x5a>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b14      	cmp	r3, #20
 80068ca:	d107      	bne.n	80068dc <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d00e      	beq.n	80068f2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d00a      	beq.n	80068f2 <HAL_OSPI_Command+0x5a>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b24      	cmp	r3, #36	@ 0x24
 80068e0:	d15b      	bne.n	800699a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d003      	beq.n	80068f2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d153      	bne.n	800699a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2200      	movs	r2, #0
 80068fa:	2120      	movs	r1, #32
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fb53 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006906:	7ffb      	ldrb	r3, [r7, #31]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d14c      	bne.n	80069a6 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb7f 	bl	8007018 <OSPI_ConfigCmd>
 800691a:	4603      	mov	r3, r0
 800691c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800691e:	7ffb      	ldrb	r3, [r7, #31]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d140      	bne.n	80069a6 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10e      	bne.n	800694a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2201      	movs	r2, #1
 8006934:	2102      	movs	r1, #2
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fb36 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2202      	movs	r2, #2
 8006946:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006948:	e02d      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2204      	movs	r2, #4
 8006956:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006958:	e025      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10b      	bne.n	800697a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006966:	2b24      	cmp	r3, #36	@ 0x24
 8006968:	d103      	bne.n	8006972 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2204      	movs	r2, #4
 800696e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006970:	e019      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2214      	movs	r2, #20
 8006976:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006978:	e015      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d111      	bne.n	80069a6 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006986:	2b14      	cmp	r3, #20
 8006988:	d103      	bne.n	8006992 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2204      	movs	r2, #4
 800698e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006990:	e009      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2224      	movs	r2, #36	@ 0x24
 8006996:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006998:	e005      	b.n	80069a6 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2210      	movs	r2, #16
 80069a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80069a4:	e000      	b.n	80069a8 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80069a6:	bf00      	nop
  }

  /* Return function status */
  return status;
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b08a      	sub	sp, #40	@ 0x28
 80069b6:	af02      	add	r7, sp, #8
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069be:	f7fd fae7 	bl	8003f90 <HAL_GetTick>
 80069c2:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3350      	adds	r3, #80	@ 0x50
 80069ca:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2208      	movs	r2, #8
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
 80069dc:	e057      	b.n	8006a8e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d14e      	bne.n	8006a84 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a0e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2201      	movs	r2, #1
 8006a18:	2104      	movs	r1, #4
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fac4 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006a24:	7ffb      	ldrb	r3, [r7, #31]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d113      	bne.n	8006a52 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a42:	1e5a      	subs	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1df      	bne.n	8006a10 <HAL_OSPI_Transmit+0x5e>
 8006a50:	e000      	b.n	8006a54 <HAL_OSPI_Transmit+0xa2>
          break;
 8006a52:	bf00      	nop

      if (status == HAL_OK)
 8006a54:	7ffb      	ldrb	r3, [r7, #31]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d119      	bne.n	8006a8e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2201      	movs	r2, #1
 8006a62:	2102      	movs	r1, #2
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 fa9f 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10c      	bne.n	8006a8e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a82:	e004      	b.n	8006a8e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2210      	movs	r2, #16
 8006a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8006a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	@ 0x30
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006aa4:	f7fd fa74 	bl	8003f90 <HAL_GetTick>
 8006aa8:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3350      	adds	r3, #80	@ 0x50
 8006ab0:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ab8:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ad6:	e07c      	b.n	8006bd2 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d172      	bne.n	8006bc6 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006b0c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b16:	d104      	bne.n	8006b22 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	649a      	str	r2, [r3, #72]	@ 0x48
 8006b20:	e011      	b.n	8006b46 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006b2a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d004      	beq.n	8006b3c <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	649a      	str	r2, [r3, #72]	@ 0x48
 8006b3a:	e004      	b.n	8006b46 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	6a3b      	ldr	r3, [r7, #32]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	2106      	movs	r1, #6
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fa29 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d114      	bne.n	8006b8e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7e:	1e5a      	subs	r2, r3, #1
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1dc      	bne.n	8006b46 <HAL_OSPI_Receive+0xae>
 8006b8c:	e000      	b.n	8006b90 <HAL_OSPI_Receive+0xf8>
          break;
 8006b8e:	bf00      	nop

      if (status == HAL_OK)
 8006b90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11c      	bne.n	8006bd2 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2102      	movs	r1, #2
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fa00 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8006bae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8006bc4:	e005      	b.n	8006bd2 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8006bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3728      	adds	r7, #40	@ 0x28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b08a      	sub	sp, #40	@ 0x28
 8006be2:	af02      	add	r7, sp, #8
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006bea:	f7fd f9d1 	bl	8003f90 <HAL_GetTick>
 8006bee:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf6:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006c00:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d164      	bne.n	8006cd4 <HAL_OSPI_AutoPolling+0xf6>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c12:	d15f      	bne.n	8006cd4 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2120      	movs	r1, #32
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f9c2 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006c28:	7ffb      	ldrb	r3, [r7, #31]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d158      	bne.n	8006ce0 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	6812      	ldr	r2, [r2, #0]
 8006c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	6852      	ldr	r2, [r2, #4]
 8006c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	6912      	ldr	r2, [r2, #16]
 8006c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6899      	ldr	r1, [r3, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	431a      	orrs	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006c70:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c7a:	d104      	bne.n	8006c86 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	697a      	ldr	r2, [r7, #20]
 8006c82:	649a      	str	r2, [r3, #72]	@ 0x48
 8006c84:	e011      	b.n	8006caa <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006c8e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	649a      	str	r2, [r3, #72]	@ 0x48
 8006c9e:	e004      	b.n	8006caa <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2108      	movs	r1, #8
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f977 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10d      	bne.n	8006ce0 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006cd2:	e005      	b.n	8006ce0 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	655a      	str	r2, [r3, #84]	@ 0x54
 8006cde:	e000      	b.n	8006ce2 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8006ce0:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006cf6:	f7fd f94b 	bl	8003f90 <HAL_GetTick>
 8006cfa:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d134      	bne.n	8006d6e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	2120      	movs	r1, #32
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f949 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d12b      	bne.n	8006d78 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2288      	movs	r2, #136	@ 0x88
 8006d24:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d111      	bne.n	8006d52 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006d50:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b0a      	ldr	r3, [pc, #40]	@ (8006d84 <HAL_OSPI_MemoryMapped+0x98>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e004      	b.n	8006d78 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2210      	movs	r2, #16
 8006d76:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	cffffff7 	.word	0xcffffff7

08006d88 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006e34:	f7fd f8ac 	bl	8003f90 <HAL_GetTick>
 8006e38:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d104      	bne.n	8006e54 <HAL_OSPI_Abort+0x2c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d052      	beq.n	8006efa <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d014      	beq.n	8006e8c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0204 	bic.w	r2, r2, #4
 8006e70:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fa66 	bl	8006348 <HAL_MDMA_Abort>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	f003 0320 	and.w	r3, r3, #32
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d02b      	beq.n	8006ef2 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0202 	orr.w	r2, r2, #2
 8006ea8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	2102      	movs	r1, #2
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f876 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11f      	bne.n	8006f06 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2120      	movs	r1, #32
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f864 	bl	8006fa8 <OSPI_WaitFlagStateUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ef0:	e009      	b.n	8006f06 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ef8:	e005      	b.n	8006f06 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2210      	movs	r2, #16
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
 8006f04:	e000      	b.n	8006f08 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006f06:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3c:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4c:	d122      	bne.n	8006f94 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d014      	beq.n	8006f86 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2202      	movs	r2, #2
 8006f62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006f72:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0202 	orr.w	r2, r2, #2
 8006f82:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8006f84:	e00c      	b.n	8006fa0 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2202      	movs	r2, #2
 8006f8a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f7ff ff05 	bl	8006d9c <HAL_OSPI_AbortCpltCallback>
}
 8006f92:	e005      	b.n	8006fa0 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2202      	movs	r2, #2
 8006f98:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fef4 	bl	8006d88 <HAL_OSPI_ErrorCallback>
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006fb8:	e01a      	b.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d016      	beq.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fc ffe5 	bl	8003f90 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fde:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe4:	f043 0201 	orr.w	r2, r3, #1
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e00e      	b.n	800700e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	429a      	cmp	r2, r3
 800700a:	d1d6      	bne.n	8006fba <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8007018:	b480      	push	{r7}
 800701a:	b089      	sub	sp, #36	@ 0x24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007034:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d114      	bne.n	8007086 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007064:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800706e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007078:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e02c      	b.n	80070e0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d114      	bne.n	80070b8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007096:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80070a0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80070aa:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e013      	b.n	80070e0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80070c0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80070ca:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80070d4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80070de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e8:	431a      	orrs	r2, r3
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d012      	beq.n	800711c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710e:	4319      	orrs	r1, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007114:	430b      	orrs	r3, r1
 8007116:	431a      	orrs	r2, r3
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f023 021f 	bic.w	r2, r3, #31
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007128:	431a      	orrs	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d105      	bne.n	800714a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3a01      	subs	r2, #1
 8007148:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8095 	beq.w	800727e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d053      	beq.n	8007204 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01e      	beq.n	80071a2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b64      	ldr	r3, [pc, #400]	@ (80072fc <OSPI_ConfigCmd+0x2e4>)
 800716a:	4013      	ands	r3, r2
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	68d1      	ldr	r1, [r2, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	6952      	ldr	r2, [r2, #20]
 8007174:	4311      	orrs	r1, r2
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	6912      	ldr	r2, [r2, #16]
 800717a:	4311      	orrs	r1, r2
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	69d2      	ldr	r2, [r2, #28]
 8007180:	4311      	orrs	r1, r2
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007186:	4311      	orrs	r1, r2
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	6a12      	ldr	r2, [r2, #32]
 800718c:	4311      	orrs	r1, r2
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007192:	4311      	orrs	r1, r2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007198:	430a      	orrs	r2, r1
 800719a:	431a      	orrs	r2, r3
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	e026      	b.n	80071f0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	4b56      	ldr	r3, [pc, #344]	@ (8007300 <OSPI_ConfigCmd+0x2e8>)
 80071a8:	4013      	ands	r3, r2
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	68d1      	ldr	r1, [r2, #12]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	6952      	ldr	r2, [r2, #20]
 80071b2:	4311      	orrs	r1, r2
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	6912      	ldr	r2, [r2, #16]
 80071b8:	4311      	orrs	r1, r2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	69d2      	ldr	r2, [r2, #28]
 80071be:	4311      	orrs	r1, r2
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071c4:	4311      	orrs	r1, r2
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	6a12      	ldr	r2, [r2, #32]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	431a      	orrs	r2, r3
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071da:	d109      	bne.n	80071f0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d105      	bne.n	80071f0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	6992      	ldr	r2, [r2, #24]
 8007200:	649a      	str	r2, [r3, #72]	@ 0x48
 8007202:	e074      	b.n	80072ee <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b3c      	ldr	r3, [pc, #240]	@ (8007304 <OSPI_ConfigCmd+0x2ec>)
 8007212:	4013      	ands	r3, r2
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	68d1      	ldr	r1, [r2, #12]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	6952      	ldr	r2, [r2, #20]
 800721c:	4311      	orrs	r1, r2
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	6912      	ldr	r2, [r2, #16]
 8007222:	4311      	orrs	r1, r2
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007228:	4311      	orrs	r1, r2
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800722e:	430a      	orrs	r2, r1
 8007230:	431a      	orrs	r2, r3
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e01d      	b.n	8007274 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	68d9      	ldr	r1, [r3, #12]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	4319      	orrs	r1, r3
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	430b      	orrs	r3, r1
 8007250:	431a      	orrs	r2, r3
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800725e:	d109      	bne.n	8007274 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007264:	2b08      	cmp	r3, #8
 8007266:	d105      	bne.n	8007274 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e037      	b.n	80072ee <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d02e      	beq.n	80072e4 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b1d      	ldr	r3, [pc, #116]	@ (8007308 <OSPI_ConfigCmd+0x2f0>)
 8007294:	4013      	ands	r3, r2
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	69d1      	ldr	r1, [r2, #28]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800729e:	4311      	orrs	r1, r2
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	6a12      	ldr	r2, [r2, #32]
 80072a4:	4311      	orrs	r1, r2
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80072aa:	4311      	orrs	r1, r2
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80072b0:	430a      	orrs	r2, r1
 80072b2:	431a      	orrs	r2, r3
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e00e      	b.n	80072d8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	69d9      	ldr	r1, [r3, #28]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	4319      	orrs	r1, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	430b      	orrs	r3, r1
 80072d2:	431a      	orrs	r2, r3
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	6992      	ldr	r2, [r2, #24]
 80072e0:	649a      	str	r2, [r3, #72]	@ 0x48
 80072e2:	e004      	b.n	80072ee <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2208      	movs	r2, #8
 80072ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80072ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3724      	adds	r7, #36	@ 0x24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	f0ffc0c0 	.word	0xf0ffc0c0
 8007300:	ffffc0c0 	.word	0xffffc0c0
 8007304:	f0ffffc0 	.word	0xf0ffffc0
 8007308:	f0ffc0ff 	.word	0xf0ffc0ff

0800730c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007314:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	2b06      	cmp	r3, #6
 800731e:	d00a      	beq.n	8007336 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007320:	4b26      	ldr	r3, [pc, #152]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	429a      	cmp	r2, r3
 800732c:	d001      	beq.n	8007332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e040      	b.n	80073b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	e03e      	b.n	80073b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007336:	4b21      	ldr	r3, [pc, #132]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800733e:	491f      	ldr	r1, [pc, #124]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4313      	orrs	r3, r2
 8007344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007346:	f7fc fe23 	bl	8003f90 <HAL_GetTick>
 800734a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800734c:	e009      	b.n	8007362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800734e:	f7fc fe1f 	bl	8003f90 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800735c:	d901      	bls.n	8007362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e028      	b.n	80073b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007362:	4b16      	ldr	r3, [pc, #88]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800736e:	d1ee      	bne.n	800734e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b1e      	cmp	r3, #30
 8007374:	d008      	beq.n	8007388 <HAL_PWREx_ConfigSupply+0x7c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b2e      	cmp	r3, #46	@ 0x2e
 800737a:	d005      	beq.n	8007388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b1d      	cmp	r3, #29
 8007380:	d002      	beq.n	8007388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b2d      	cmp	r3, #45	@ 0x2d
 8007386:	d114      	bne.n	80073b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007388:	f7fc fe02 	bl	8003f90 <HAL_GetTick>
 800738c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800738e:	e009      	b.n	80073a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007390:	f7fc fdfe 	bl	8003f90 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800739e:	d901      	bls.n	80073a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e007      	b.n	80073b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073a4:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <HAL_PWREx_ConfigSupply+0xb0>)
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b0:	d1ee      	bne.n	8007390 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	58024800 	.word	0x58024800

080073c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	@ 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f000 bc1f 	b.w	8007c12 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 80b3 	beq.w	8007548 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e2:	4b95      	ldr	r3, [pc, #596]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ec:	4b92      	ldr	r3, [pc, #584]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d007      	beq.n	8007408 <HAL_RCC_OscConfig+0x48>
 80073f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fa:	2b18      	cmp	r3, #24
 80073fc:	d112      	bne.n	8007424 <HAL_RCC_OscConfig+0x64>
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d10d      	bne.n	8007424 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007408:	4b8b      	ldr	r3, [pc, #556]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8098 	beq.w	8007546 <HAL_RCC_OscConfig+0x186>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f040 8093 	bne.w	8007546 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e3f6      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742c:	d106      	bne.n	800743c <HAL_RCC_OscConfig+0x7c>
 800742e:	4b82      	ldr	r3, [pc, #520]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a81      	ldr	r2, [pc, #516]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	e058      	b.n	80074ee <HAL_RCC_OscConfig+0x12e>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d112      	bne.n	800746a <HAL_RCC_OscConfig+0xaa>
 8007444:	4b7c      	ldr	r3, [pc, #496]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a7b      	ldr	r2, [pc, #492]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800744a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	4b79      	ldr	r3, [pc, #484]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a78      	ldr	r2, [pc, #480]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007456:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	4b76      	ldr	r3, [pc, #472]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a75      	ldr	r2, [pc, #468]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	e041      	b.n	80074ee <HAL_RCC_OscConfig+0x12e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007472:	d112      	bne.n	800749a <HAL_RCC_OscConfig+0xda>
 8007474:	4b70      	ldr	r3, [pc, #448]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a6f      	ldr	r2, [pc, #444]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800747a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	4b6d      	ldr	r3, [pc, #436]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a6c      	ldr	r2, [pc, #432]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007486:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800748a:	6013      	str	r3, [r2, #0]
 800748c:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a69      	ldr	r2, [pc, #420]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007492:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e029      	b.n	80074ee <HAL_RCC_OscConfig+0x12e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80074a2:	d112      	bne.n	80074ca <HAL_RCC_OscConfig+0x10a>
 80074a4:	4b64      	ldr	r3, [pc, #400]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a63      	ldr	r2, [pc, #396]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b61      	ldr	r3, [pc, #388]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a60      	ldr	r2, [pc, #384]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	4b5e      	ldr	r3, [pc, #376]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5d      	ldr	r2, [pc, #372]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	e011      	b.n	80074ee <HAL_RCC_OscConfig+0x12e>
 80074ca:	4b5b      	ldr	r3, [pc, #364]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a5a      	ldr	r2, [pc, #360]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	4b58      	ldr	r3, [pc, #352]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a57      	ldr	r2, [pc, #348]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	4b55      	ldr	r3, [pc, #340]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a54      	ldr	r2, [pc, #336]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80074e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80074ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d013      	beq.n	800751e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f6:	f7fc fd4b 	bl	8003f90 <HAL_GetTick>
 80074fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074fe:	f7fc fd47 	bl	8003f90 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b64      	cmp	r3, #100	@ 0x64
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e380      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007510:	4b49      	ldr	r3, [pc, #292]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <HAL_RCC_OscConfig+0x13e>
 800751c:	e014      	b.n	8007548 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751e:	f7fc fd37 	bl	8003f90 <HAL_GetTick>
 8007522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007526:	f7fc fd33 	bl	8003f90 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b64      	cmp	r3, #100	@ 0x64
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e36c      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007538:	4b3f      	ldr	r3, [pc, #252]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f0      	bne.n	8007526 <HAL_RCC_OscConfig+0x166>
 8007544:	e000      	b.n	8007548 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007546:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 808c 	beq.w	800766e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007556:	4b38      	ldr	r3, [pc, #224]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800755e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007560:	4b35      	ldr	r3, [pc, #212]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <HAL_RCC_OscConfig+0x1bc>
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	2b18      	cmp	r3, #24
 8007570:	d137      	bne.n	80075e2 <HAL_RCC_OscConfig+0x222>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d132      	bne.n	80075e2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800757c:	4b2e      	ldr	r3, [pc, #184]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_OscConfig+0x1d4>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e33e      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007594:	4b28      	ldr	r3, [pc, #160]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f023 0219 	bic.w	r2, r3, #25
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	4925      	ldr	r1, [pc, #148]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a6:	f7fc fcf3 	bl	8003f90 <HAL_GetTick>
 80075aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ac:	e008      	b.n	80075c0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075ae:	f7fc fcef 	bl	8003f90 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d901      	bls.n	80075c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e328      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0304 	and.w	r3, r3, #4
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d0f0      	beq.n	80075ae <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075cc:	4b1a      	ldr	r3, [pc, #104]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	061b      	lsls	r3, r3, #24
 80075da:	4917      	ldr	r1, [pc, #92]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075e0:	e045      	b.n	800766e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d028      	beq.n	800763c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075ea:	4b13      	ldr	r3, [pc, #76]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f023 0219 	bic.w	r2, r3, #25
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	4910      	ldr	r1, [pc, #64]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fc:	f7fc fcc8 	bl	8003f90 <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007604:	f7fc fcc4 	bl	8003f90 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e2fd      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007616:	4b08      	ldr	r3, [pc, #32]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007622:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	061b      	lsls	r3, r3, #24
 8007630:	4901      	ldr	r1, [pc, #4]	@ (8007638 <HAL_RCC_OscConfig+0x278>)
 8007632:	4313      	orrs	r3, r2
 8007634:	604b      	str	r3, [r1, #4]
 8007636:	e01a      	b.n	800766e <HAL_RCC_OscConfig+0x2ae>
 8007638:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800763c:	4b97      	ldr	r3, [pc, #604]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a96      	ldr	r2, [pc, #600]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007648:	f7fc fca2 	bl	8003f90 <HAL_GetTick>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800764e:	e008      	b.n	8007662 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007650:	f7fc fc9e 	bl	8003f90 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b02      	cmp	r3, #2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e2d7      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007662:	4b8e      	ldr	r3, [pc, #568]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1f0      	bne.n	8007650 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d06a      	beq.n	8007750 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800767a:	4b88      	ldr	r3, [pc, #544]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007682:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007684:	4b85      	ldr	r3, [pc, #532]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007688:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b08      	cmp	r3, #8
 800768e:	d007      	beq.n	80076a0 <HAL_RCC_OscConfig+0x2e0>
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	2b18      	cmp	r3, #24
 8007694:	d11b      	bne.n	80076ce <HAL_RCC_OscConfig+0x30e>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d116      	bne.n	80076ce <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076a0:	4b7e      	ldr	r3, [pc, #504]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <HAL_RCC_OscConfig+0x2f8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	2b80      	cmp	r3, #128	@ 0x80
 80076b2:	d001      	beq.n	80076b8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e2ac      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076b8:	4b78      	ldr	r3, [pc, #480]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	061b      	lsls	r3, r3, #24
 80076c6:	4975      	ldr	r1, [pc, #468]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076cc:	e040      	b.n	8007750 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d023      	beq.n	800771e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80076d6:	4b71      	ldr	r3, [pc, #452]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a70      	ldr	r2, [pc, #448]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e2:	f7fc fc55 	bl	8003f90 <HAL_GetTick>
 80076e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076e8:	e008      	b.n	80076fc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80076ea:	f7fc fc51 	bl	8003f90 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d901      	bls.n	80076fc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e28a      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80076fc:	4b67      	ldr	r3, [pc, #412]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f0      	beq.n	80076ea <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007708:	4b64      	ldr	r3, [pc, #400]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	4961      	ldr	r1, [pc, #388]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007718:	4313      	orrs	r3, r2
 800771a:	60cb      	str	r3, [r1, #12]
 800771c:	e018      	b.n	8007750 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800771e:	4b5f      	ldr	r3, [pc, #380]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a5e      	ldr	r2, [pc, #376]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800772a:	f7fc fc31 	bl	8003f90 <HAL_GetTick>
 800772e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007732:	f7fc fc2d 	bl	8003f90 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e266      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007744:	4b55      	ldr	r3, [pc, #340]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d036      	beq.n	80077ca <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d019      	beq.n	8007798 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007764:	4b4d      	ldr	r3, [pc, #308]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007768:	4a4c      	ldr	r2, [pc, #304]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fc fc0e 	bl	8003f90 <HAL_GetTick>
 8007774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007778:	f7fc fc0a 	bl	8003f90 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e243      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800778a:	4b44      	ldr	r3, [pc, #272]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800778c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x3b8>
 8007796:	e018      	b.n	80077ca <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007798:	4b40      	ldr	r3, [pc, #256]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800779a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800779c:	4a3f      	ldr	r2, [pc, #252]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a4:	f7fc fbf4 	bl	8003f90 <HAL_GetTick>
 80077a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ac:	f7fc fbf0 	bl	8003f90 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e229      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80077be:	4b37      	ldr	r3, [pc, #220]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80077c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1f0      	bne.n	80077ac <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d036      	beq.n	8007844 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d019      	beq.n	8007812 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077de:	4b2f      	ldr	r3, [pc, #188]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a2e      	ldr	r2, [pc, #184]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 80077e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80077e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80077ea:	f7fc fbd1 	bl	8003f90 <HAL_GetTick>
 80077ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077f2:	f7fc fbcd 	bl	8003f90 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e206      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007804:	4b25      	ldr	r3, [pc, #148]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x432>
 8007810:	e018      	b.n	8007844 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007812:	4b22      	ldr	r3, [pc, #136]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a21      	ldr	r2, [pc, #132]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800781c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800781e:	f7fc fbb7 	bl	8003f90 <HAL_GetTick>
 8007822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007824:	e008      	b.n	8007838 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007826:	f7fc fbb3 	bl	8003f90 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e1ec      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f0      	bne.n	8007826 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80af 	beq.w	80079b0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007852:	4b13      	ldr	r3, [pc, #76]	@ (80078a0 <HAL_RCC_OscConfig+0x4e0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a12      	ldr	r2, [pc, #72]	@ (80078a0 <HAL_RCC_OscConfig+0x4e0>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800785c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800785e:	f7fc fb97 	bl	8003f90 <HAL_GetTick>
 8007862:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007866:	f7fc fb93 	bl	8003f90 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b64      	cmp	r3, #100	@ 0x64
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e1cc      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007878:	4b09      	ldr	r3, [pc, #36]	@ (80078a0 <HAL_RCC_OscConfig+0x4e0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d10b      	bne.n	80078a4 <HAL_RCC_OscConfig+0x4e4>
 800788c:	4b03      	ldr	r3, [pc, #12]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 800788e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007890:	4a02      	ldr	r2, [pc, #8]	@ (800789c <HAL_RCC_OscConfig+0x4dc>)
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	6713      	str	r3, [r2, #112]	@ 0x70
 8007898:	e05b      	b.n	8007952 <HAL_RCC_OscConfig+0x592>
 800789a:	bf00      	nop
 800789c:	58024400 	.word	0x58024400
 80078a0:	58024800 	.word	0x58024800
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d112      	bne.n	80078d2 <HAL_RCC_OscConfig+0x512>
 80078ac:	4b9d      	ldr	r3, [pc, #628]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b0:	4a9c      	ldr	r2, [pc, #624]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078b2:	f023 0301 	bic.w	r3, r3, #1
 80078b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80078b8:	4b9a      	ldr	r3, [pc, #616]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078bc:	4a99      	ldr	r2, [pc, #612]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80078c4:	4b97      	ldr	r3, [pc, #604]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c8:	4a96      	ldr	r2, [pc, #600]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078ca:	f023 0304 	bic.w	r3, r3, #4
 80078ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80078d0:	e03f      	b.n	8007952 <HAL_RCC_OscConfig+0x592>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d112      	bne.n	8007900 <HAL_RCC_OscConfig+0x540>
 80078da:	4b92      	ldr	r3, [pc, #584]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	4a91      	ldr	r2, [pc, #580]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078e0:	f043 0304 	orr.w	r3, r3, #4
 80078e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80078e6:	4b8f      	ldr	r3, [pc, #572]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ea:	4a8e      	ldr	r2, [pc, #568]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80078f2:	4b8c      	ldr	r3, [pc, #560]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f6:	4a8b      	ldr	r2, [pc, #556]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80078fe:	e028      	b.n	8007952 <HAL_RCC_OscConfig+0x592>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b85      	cmp	r3, #133	@ 0x85
 8007906:	d112      	bne.n	800792e <HAL_RCC_OscConfig+0x56e>
 8007908:	4b86      	ldr	r3, [pc, #536]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800790a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790c:	4a85      	ldr	r2, [pc, #532]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800790e:	f043 0304 	orr.w	r3, r3, #4
 8007912:	6713      	str	r3, [r2, #112]	@ 0x70
 8007914:	4b83      	ldr	r3, [pc, #524]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007918:	4a82      	ldr	r2, [pc, #520]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800791a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800791e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007920:	4b80      	ldr	r3, [pc, #512]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007924:	4a7f      	ldr	r2, [pc, #508]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	6713      	str	r3, [r2, #112]	@ 0x70
 800792c:	e011      	b.n	8007952 <HAL_RCC_OscConfig+0x592>
 800792e:	4b7d      	ldr	r3, [pc, #500]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007932:	4a7c      	ldr	r2, [pc, #496]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007934:	f023 0301 	bic.w	r3, r3, #1
 8007938:	6713      	str	r3, [r2, #112]	@ 0x70
 800793a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793e:	4a79      	ldr	r2, [pc, #484]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007940:	f023 0304 	bic.w	r3, r3, #4
 8007944:	6713      	str	r3, [r2, #112]	@ 0x70
 8007946:	4b77      	ldr	r3, [pc, #476]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794a:	4a76      	ldr	r2, [pc, #472]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800794c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007950:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d015      	beq.n	8007986 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800795a:	f7fc fb19 	bl	8003f90 <HAL_GetTick>
 800795e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007960:	e00a      	b.n	8007978 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007962:	f7fc fb15 	bl	8003f90 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007970:	4293      	cmp	r3, r2
 8007972:	d901      	bls.n	8007978 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e14c      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007978:	4b6a      	ldr	r3, [pc, #424]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0ee      	beq.n	8007962 <HAL_RCC_OscConfig+0x5a2>
 8007984:	e014      	b.n	80079b0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007986:	f7fc fb03 	bl	8003f90 <HAL_GetTick>
 800798a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800798c:	e00a      	b.n	80079a4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800798e:	f7fc faff 	bl	8003f90 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800799c:	4293      	cmp	r3, r2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e136      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079a4:	4b5f      	ldr	r3, [pc, #380]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1ee      	bne.n	800798e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 812b 	beq.w	8007c10 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079ba:	4b5a      	ldr	r3, [pc, #360]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c2:	2b18      	cmp	r3, #24
 80079c4:	f000 80bb 	beq.w	8007b3e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f040 8095 	bne.w	8007afc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d2:	4b54      	ldr	r3, [pc, #336]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a53      	ldr	r2, [pc, #332]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80079d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fc fad7 	bl	8003f90 <HAL_GetTick>
 80079e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079e6:	f7fc fad3 	bl	8003f90 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e10c      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079f8:	4b4a      	ldr	r3, [pc, #296]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a04:	4b47      	ldr	r3, [pc, #284]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a08:	4b47      	ldr	r3, [pc, #284]	@ (8007b28 <HAL_RCC_OscConfig+0x768>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a14:	0112      	lsls	r2, r2, #4
 8007a16:	430a      	orrs	r2, r1
 8007a18:	4942      	ldr	r1, [pc, #264]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	3b01      	subs	r3, #1
 8007a24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	025b      	lsls	r3, r3, #9
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a46:	3b01      	subs	r3, #1
 8007a48:	061b      	lsls	r3, r3, #24
 8007a4a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a4e:	4935      	ldr	r1, [pc, #212]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007a54:	4b33      	ldr	r3, [pc, #204]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	4a32      	ldr	r2, [pc, #200]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a60:	4b30      	ldr	r3, [pc, #192]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a64:	4b31      	ldr	r3, [pc, #196]	@ (8007b2c <HAL_RCC_OscConfig+0x76c>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a6c:	00d2      	lsls	r2, r2, #3
 8007a6e:	492d      	ldr	r1, [pc, #180]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a74:	4b2b      	ldr	r3, [pc, #172]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	f023 020c 	bic.w	r2, r3, #12
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	4928      	ldr	r1, [pc, #160]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a86:	4b27      	ldr	r3, [pc, #156]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8a:	f023 0202 	bic.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a92:	4924      	ldr	r1, [pc, #144]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a98:	4b22      	ldr	r3, [pc, #136]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9c:	4a21      	ldr	r2, [pc, #132]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007abc:	4b19      	ldr	r3, [pc, #100]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac0:	4a18      	ldr	r2, [pc, #96]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ac8:	4b16      	ldr	r3, [pc, #88]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a15      	ldr	r2, [pc, #84]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7fc fa5c 	bl	8003f90 <HAL_GetTick>
 8007ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007adc:	f7fc fa58 	bl	8003f90 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e091      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007aee:	4b0d      	ldr	r3, [pc, #52]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x71c>
 8007afa:	e089      	b.n	8007c10 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afc:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a08      	ldr	r2, [pc, #32]	@ (8007b24 <HAL_RCC_OscConfig+0x764>)
 8007b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b08:	f7fc fa42 	bl	8003f90 <HAL_GetTick>
 8007b0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b0e:	e00f      	b.n	8007b30 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b10:	f7fc fa3e 	bl	8003f90 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d908      	bls.n	8007b30 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e077      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
 8007b28:	fffffc0c 	.word	0xfffffc0c
 8007b2c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b30:	4b3a      	ldr	r3, [pc, #232]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e9      	bne.n	8007b10 <HAL_RCC_OscConfig+0x750>
 8007b3c:	e068      	b.n	8007c10 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b3e:	4b37      	ldr	r3, [pc, #220]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b44:	4b35      	ldr	r3, [pc, #212]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b48:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d031      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f003 0203 	and.w	r2, r3, #3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d12a      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	091b      	lsrs	r3, r3, #4
 8007b64:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d122      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d11a      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	0a5b      	lsrs	r3, r3, #9
 8007b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d111      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	0c1b      	lsrs	r3, r3, #16
 8007b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d108      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	0e1b      	lsrs	r3, r3, #24
 8007ba8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d001      	beq.n	8007bba <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e02b      	b.n	8007c12 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007bba:	4b18      	ldr	r3, [pc, #96]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bbe:	08db      	lsrs	r3, r3, #3
 8007bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bc4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d01f      	beq.n	8007c10 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007bd0:	4b12      	ldr	r3, [pc, #72]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	4a11      	ldr	r2, [pc, #68]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007bdc:	f7fc f9d8 	bl	8003f90 <HAL_GetTick>
 8007be0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007be2:	bf00      	nop
 8007be4:	f7fc f9d4 	bl	8003f90 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d0f9      	beq.n	8007be4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007c20 <HAL_RCC_OscConfig+0x860>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007bfc:	00d2      	lsls	r2, r2, #3
 8007bfe:	4907      	ldr	r1, [pc, #28]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c04:	4b05      	ldr	r3, [pc, #20]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a04      	ldr	r2, [pc, #16]	@ (8007c1c <HAL_RCC_OscConfig+0x85c>)
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3730      	adds	r7, #48	@ 0x30
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	58024400 	.word	0x58024400
 8007c20:	ffff0007 	.word	0xffff0007

08007c24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e19c      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c38:	4b8a      	ldr	r3, [pc, #552]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d910      	bls.n	8007c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c46:	4b87      	ldr	r3, [pc, #540]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f023 020f 	bic.w	r2, r3, #15
 8007c4e:	4985      	ldr	r1, [pc, #532]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c56:	4b83      	ldr	r3, [pc, #524]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d001      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e184      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d010      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	4b7b      	ldr	r3, [pc, #492]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d908      	bls.n	8007c96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c84:	4b78      	ldr	r3, [pc, #480]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	4975      	ldr	r1, [pc, #468]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d010      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695a      	ldr	r2, [r3, #20]
 8007ca6:	4b70      	ldr	r3, [pc, #448]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d908      	bls.n	8007cc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	496a      	ldr	r1, [pc, #424]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d010      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	4b64      	ldr	r3, [pc, #400]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d908      	bls.n	8007cf2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ce0:	4b61      	ldr	r3, [pc, #388]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	495e      	ldr	r1, [pc, #376]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	4b59      	ldr	r3, [pc, #356]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d908      	bls.n	8007d20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d0e:	4b56      	ldr	r3, [pc, #344]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	4953      	ldr	r1, [pc, #332]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d010      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	4b4d      	ldr	r3, [pc, #308]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d908      	bls.n	8007d4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f023 020f 	bic.w	r2, r3, #15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4947      	ldr	r1, [pc, #284]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d055      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d5a:	4b43      	ldr	r3, [pc, #268]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	4940      	ldr	r1, [pc, #256]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d107      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d74:	4b3c      	ldr	r3, [pc, #240]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d121      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0f6      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d8c:	4b36      	ldr	r3, [pc, #216]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d115      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0ea      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d107      	bne.n	8007db4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007da4:	4b30      	ldr	r3, [pc, #192]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0de      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007db4:	4b2c      	ldr	r3, [pc, #176]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0d6      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dc4:	4b28      	ldr	r3, [pc, #160]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	f023 0207 	bic.w	r2, r3, #7
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4925      	ldr	r1, [pc, #148]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd6:	f7fc f8db 	bl	8003f90 <HAL_GetTick>
 8007dda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ddc:	e00a      	b.n	8007df4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dde:	f7fc f8d7 	bl	8003f90 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e0be      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007df4:	4b1c      	ldr	r3, [pc, #112]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d1eb      	bne.n	8007dde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d010      	beq.n	8007e34 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	4b14      	ldr	r3, [pc, #80]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d208      	bcs.n	8007e34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e22:	4b11      	ldr	r3, [pc, #68]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f023 020f 	bic.w	r2, r3, #15
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	490e      	ldr	r1, [pc, #56]	@ (8007e68 <HAL_RCC_ClockConfig+0x244>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e34:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d214      	bcs.n	8007e6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e42:	4b08      	ldr	r3, [pc, #32]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f023 020f 	bic.w	r2, r3, #15
 8007e4a:	4906      	ldr	r1, [pc, #24]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e52:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <HAL_RCC_ClockConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d005      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e086      	b.n	8007f72 <HAL_RCC_ClockConfig+0x34e>
 8007e64:	52002000 	.word	0x52002000
 8007e68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d010      	beq.n	8007e9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d208      	bcs.n	8007e9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e88:	4b3c      	ldr	r3, [pc, #240]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	4939      	ldr	r1, [pc, #228]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d010      	beq.n	8007ec8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695a      	ldr	r2, [r3, #20]
 8007eaa:	4b34      	ldr	r3, [pc, #208]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d208      	bcs.n	8007ec8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007eb6:	4b31      	ldr	r3, [pc, #196]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	492e      	ldr	r1, [pc, #184]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699a      	ldr	r2, [r3, #24]
 8007ed8:	4b28      	ldr	r3, [pc, #160]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d208      	bcs.n	8007ef6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ee4:	4b25      	ldr	r3, [pc, #148]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	4922      	ldr	r1, [pc, #136]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d010      	beq.n	8007f24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69da      	ldr	r2, [r3, #28]
 8007f06:	4b1d      	ldr	r3, [pc, #116]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d208      	bcs.n	8007f24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f12:	4b1a      	ldr	r3, [pc, #104]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	4917      	ldr	r1, [pc, #92]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007f24:	f000 f834 	bl	8007f90 <HAL_RCC_GetSysClockFreq>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	4b14      	ldr	r3, [pc, #80]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	4912      	ldr	r1, [pc, #72]	@ (8007f80 <HAL_RCC_ClockConfig+0x35c>)
 8007f36:	5ccb      	ldrb	r3, [r1, r3]
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007f42:	4b0e      	ldr	r3, [pc, #56]	@ (8007f7c <HAL_RCC_ClockConfig+0x358>)
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007f80 <HAL_RCC_ClockConfig+0x35c>)
 8007f4c:	5cd3      	ldrb	r3, [r2, r3]
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
 8007f58:	4a0a      	ldr	r2, [pc, #40]	@ (8007f84 <HAL_RCC_ClockConfig+0x360>)
 8007f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f88 <HAL_RCC_ClockConfig+0x364>)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007f62:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <HAL_RCC_ClockConfig+0x368>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7f9 f8aa 	bl	80010c0 <HAL_InitTick>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	08022400 	.word	0x08022400
 8007f84:	24000008 	.word	0x24000008
 8007f88:	24000004 	.word	0x24000004
 8007f8c:	2400003c 	.word	0x2400003c

08007f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b089      	sub	sp, #36	@ 0x24
 8007f94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f96:	4bb3      	ldr	r3, [pc, #716]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f9e:	2b18      	cmp	r3, #24
 8007fa0:	f200 8155 	bhi.w	800824e <HAL_RCC_GetSysClockFreq+0x2be>
 8007fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08008011 	.word	0x08008011
 8007fb0:	0800824f 	.word	0x0800824f
 8007fb4:	0800824f 	.word	0x0800824f
 8007fb8:	0800824f 	.word	0x0800824f
 8007fbc:	0800824f 	.word	0x0800824f
 8007fc0:	0800824f 	.word	0x0800824f
 8007fc4:	0800824f 	.word	0x0800824f
 8007fc8:	0800824f 	.word	0x0800824f
 8007fcc:	08008037 	.word	0x08008037
 8007fd0:	0800824f 	.word	0x0800824f
 8007fd4:	0800824f 	.word	0x0800824f
 8007fd8:	0800824f 	.word	0x0800824f
 8007fdc:	0800824f 	.word	0x0800824f
 8007fe0:	0800824f 	.word	0x0800824f
 8007fe4:	0800824f 	.word	0x0800824f
 8007fe8:	0800824f 	.word	0x0800824f
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	0800824f 	.word	0x0800824f
 8007ff4:	0800824f 	.word	0x0800824f
 8007ff8:	0800824f 	.word	0x0800824f
 8007ffc:	0800824f 	.word	0x0800824f
 8008000:	0800824f 	.word	0x0800824f
 8008004:	0800824f 	.word	0x0800824f
 8008008:	0800824f 	.word	0x0800824f
 800800c:	08008043 	.word	0x08008043
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008010:	4b94      	ldr	r3, [pc, #592]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800801c:	4b91      	ldr	r3, [pc, #580]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	08db      	lsrs	r3, r3, #3
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	4a90      	ldr	r2, [pc, #576]	@ (8008268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
 800802c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800802e:	e111      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008030:	4b8d      	ldr	r3, [pc, #564]	@ (8008268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008032:	61bb      	str	r3, [r7, #24]
      break;
 8008034:	e10e      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008036:	4b8d      	ldr	r3, [pc, #564]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008038:	61bb      	str	r3, [r7, #24]
      break;
 800803a:	e10b      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800803c:	4b8c      	ldr	r3, [pc, #560]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800803e:	61bb      	str	r3, [r7, #24]
      break;
 8008040:	e108      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008042:	4b88      	ldr	r3, [pc, #544]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800804c:	4b85      	ldr	r3, [pc, #532]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008056:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008058:	4b82      	ldr	r3, [pc, #520]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008062:	4b80      	ldr	r3, [pc, #512]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80e1 	beq.w	8008248 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b02      	cmp	r3, #2
 800808a:	f000 8083 	beq.w	8008194 <HAL_RCC_GetSysClockFreq+0x204>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b02      	cmp	r3, #2
 8008092:	f200 80a1 	bhi.w	80081d8 <HAL_RCC_GetSysClockFreq+0x248>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_RCC_GetSysClockFreq+0x114>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d056      	beq.n	8008150 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080a2:	e099      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080a4:	4b6f      	ldr	r3, [pc, #444]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d02d      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	08db      	lsrs	r3, r3, #3
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008268 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080bc:	fa22 f303 	lsr.w	r3, r2, r3
 80080c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	ee07 3a90 	vmov	s15, r3
 80080c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080da:	4b62      	ldr	r3, [pc, #392]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e2:	ee07 3a90 	vmov	s15, r3
 80080e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008106:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800810a:	e087      	b.n	800821c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008116:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008278 <HAL_RCC_GetSysClockFreq+0x2e8>
 800811a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800811e:	4b51      	ldr	r3, [pc, #324]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008126:	ee07 3a90 	vmov	s15, r3
 800812a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800812e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008132:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800813e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800814e:	e065      	b.n	800821c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2ec>
 800815e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008162:	4b40      	ldr	r3, [pc, #256]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008172:	ed97 6a02 	vldr	s12, [r7, #8]
 8008176:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008274 <HAL_RCC_GetSysClockFreq+0x2e4>
 800817a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800817e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008192:	e043      	b.n	800821c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008280 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a6:	4b2f      	ldr	r3, [pc, #188]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008274 <HAL_RCC_GetSysClockFreq+0x2e4>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081d6:	e021      	b.n	800821c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2ec>
 80081e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80081fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008274 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800820e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800821a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800821c:	4b11      	ldr	r3, [pc, #68]	@ (8008264 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	0a5b      	lsrs	r3, r3, #9
 8008222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008226:	3301      	adds	r3, #1
 8008228:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	ee07 3a90 	vmov	s15, r3
 8008230:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008234:	edd7 6a07 	vldr	s13, [r7, #28]
 8008238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800823c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008240:	ee17 3a90 	vmov	r3, s15
 8008244:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008246:	e005      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
      break;
 800824c:	e002      	b.n	8008254 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800824e:	4b07      	ldr	r3, [pc, #28]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008250:	61bb      	str	r3, [r7, #24]
      break;
 8008252:	bf00      	nop
  }

  return sysclockfreq;
 8008254:	69bb      	ldr	r3, [r7, #24]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3724      	adds	r7, #36	@ 0x24
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	58024400 	.word	0x58024400
 8008268:	03d09000 	.word	0x03d09000
 800826c:	003d0900 	.word	0x003d0900
 8008270:	016e3600 	.word	0x016e3600
 8008274:	46000000 	.word	0x46000000
 8008278:	4c742400 	.word	0x4c742400
 800827c:	4a742400 	.word	0x4a742400
 8008280:	4bb71b00 	.word	0x4bb71b00

08008284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800828a:	f7ff fe81 	bl	8007f90 <HAL_RCC_GetSysClockFreq>
 800828e:	4602      	mov	r2, r0
 8008290:	4b10      	ldr	r3, [pc, #64]	@ (80082d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	f003 030f 	and.w	r3, r3, #15
 800829a:	490f      	ldr	r1, [pc, #60]	@ (80082d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800829c:	5ccb      	ldrb	r3, [r1, r3]
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	fa22 f303 	lsr.w	r3, r2, r3
 80082a6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f003 030f 	and.w	r3, r3, #15
 80082b0:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80082b2:	5cd3      	ldrb	r3, [r2, r3]
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	fa22 f303 	lsr.w	r3, r2, r3
 80082be:	4a07      	ldr	r2, [pc, #28]	@ (80082dc <HAL_RCC_GetHCLKFreq+0x58>)
 80082c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082c2:	4a07      	ldr	r2, [pc, #28]	@ (80082e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082c8:	4b04      	ldr	r3, [pc, #16]	@ (80082dc <HAL_RCC_GetHCLKFreq+0x58>)
 80082ca:	681b      	ldr	r3, [r3, #0]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	58024400 	.word	0x58024400
 80082d8:	08022400 	.word	0x08022400
 80082dc:	24000008 	.word	0x24000008
 80082e0:	24000004 	.word	0x24000004

080082e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80082e8:	f7ff ffcc 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 80082ec:	4602      	mov	r2, r0
 80082ee:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	091b      	lsrs	r3, r3, #4
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	4904      	ldr	r1, [pc, #16]	@ (800830c <HAL_RCC_GetPCLK1Freq+0x28>)
 80082fa:	5ccb      	ldrb	r3, [r1, r3]
 80082fc:	f003 031f 	and.w	r3, r3, #31
 8008300:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008304:	4618      	mov	r0, r3
 8008306:	bd80      	pop	{r7, pc}
 8008308:	58024400 	.word	0x58024400
 800830c:	08022400 	.word	0x08022400

08008310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008314:	f7ff ffb6 	bl	8008284 <HAL_RCC_GetHCLKFreq>
 8008318:	4602      	mov	r2, r0
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	4904      	ldr	r1, [pc, #16]	@ (8008338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008326:	5ccb      	ldrb	r3, [r1, r3]
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008330:	4618      	mov	r0, r3
 8008332:	bd80      	pop	{r7, pc}
 8008334:	58024400 	.word	0x58024400
 8008338:	08022400 	.word	0x08022400

0800833c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	223f      	movs	r2, #63	@ 0x3f
 800834a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800834c:	4b1a      	ldr	r3, [pc, #104]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0207 	and.w	r2, r3, #7
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8008358:	4b17      	ldr	r3, [pc, #92]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8008364:	4b14      	ldr	r3, [pc, #80]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	f003 020f 	and.w	r2, r3, #15
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8008370:	4b11      	ldr	r3, [pc, #68]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800837c:	4b0e      	ldr	r3, [pc, #56]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8008388:	4b0b      	ldr	r3, [pc, #44]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8008394:	4b08      	ldr	r3, [pc, #32]	@ (80083b8 <HAL_RCC_GetClockConfig+0x7c>)
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80083a0:	4b06      	ldr	r3, [pc, #24]	@ (80083bc <HAL_RCC_GetClockConfig+0x80>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	58024400 	.word	0x58024400
 80083bc:	52002000 	.word	0x52002000

080083c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083c4:	b0c8      	sub	sp, #288	@ 0x120
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083cc:	2300      	movs	r3, #0
 80083ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083d2:	2300      	movs	r3, #0
 80083d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80083e4:	2500      	movs	r5, #0
 80083e6:	ea54 0305 	orrs.w	r3, r4, r5
 80083ea:	d049      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80083ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083f6:	d02f      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80083f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80083fc:	d828      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008402:	d01a      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008404:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008408:	d822      	bhi.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800840e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008412:	d007      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008414:	e01c      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008416:	4ba7      	ldr	r3, [pc, #668]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	4aa6      	ldr	r2, [pc, #664]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800841c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008422:	e01a      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008428:	3308      	adds	r3, #8
 800842a:	2102      	movs	r1, #2
 800842c:	4618      	mov	r0, r3
 800842e:	f001 f985 	bl	800973c <RCCEx_PLL2_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008438:	e00f      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800843a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843e:	3328      	adds	r3, #40	@ 0x28
 8008440:	2102      	movs	r1, #2
 8008442:	4618      	mov	r0, r3
 8008444:	f001 fa2c 	bl	80098a0 <RCCEx_PLL3_Config>
 8008448:	4603      	mov	r3, r0
 800844a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800844e:	e004      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008456:	e000      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008462:	4b94      	ldr	r3, [pc, #592]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008466:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800846a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800846e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008470:	4a90      	ldr	r2, [pc, #576]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008472:	430b      	orrs	r3, r1
 8008474:	6513      	str	r3, [r2, #80]	@ 0x50
 8008476:	e003      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008478:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800847c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008480:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800848c:	f04f 0900 	mov.w	r9, #0
 8008490:	ea58 0309 	orrs.w	r3, r8, r9
 8008494:	d047      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008496:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849c:	2b04      	cmp	r3, #4
 800849e:	d82a      	bhi.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80084a0:	a201      	add	r2, pc, #4	@ (adr r2, 80084a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084bd 	.word	0x080084bd
 80084ac:	080084cb 	.word	0x080084cb
 80084b0:	080084e1 	.word	0x080084e1
 80084b4:	080084ff 	.word	0x080084ff
 80084b8:	080084ff 	.word	0x080084ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084bc:	4b7d      	ldr	r3, [pc, #500]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	4a7c      	ldr	r2, [pc, #496]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084c8:	e01a      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ce:	3308      	adds	r3, #8
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f001 f932 	bl	800973c <RCCEx_PLL2_Config>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084de:	e00f      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	3328      	adds	r3, #40	@ 0x28
 80084e6:	2100      	movs	r1, #0
 80084e8:	4618      	mov	r0, r3
 80084ea:	f001 f9d9 	bl	80098a0 <RCCEx_PLL3_Config>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084f4:	e004      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084fc:	e000      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80084fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008508:	4b6a      	ldr	r3, [pc, #424]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850c:	f023 0107 	bic.w	r1, r3, #7
 8008510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008516:	4a67      	ldr	r2, [pc, #412]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008518:	430b      	orrs	r3, r1
 800851a:	6513      	str	r3, [r2, #80]	@ 0x50
 800851c:	e003      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008522:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008526:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008532:	f04f 0b00 	mov.w	fp, #0
 8008536:	ea5a 030b 	orrs.w	r3, sl, fp
 800853a:	d054      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800853c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008542:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008546:	d036      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008548:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800854c:	d82f      	bhi.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800854e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008552:	d032      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008558:	d829      	bhi.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800855a:	2bc0      	cmp	r3, #192	@ 0xc0
 800855c:	d02f      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800855e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008560:	d825      	bhi.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008562:	2b80      	cmp	r3, #128	@ 0x80
 8008564:	d018      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008566:	2b80      	cmp	r3, #128	@ 0x80
 8008568:	d821      	bhi.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d007      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8008572:	e01c      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008574:	4b4f      	ldr	r3, [pc, #316]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	4a4e      	ldr	r2, [pc, #312]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800857a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800857e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008580:	e01e      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008586:	3308      	adds	r3, #8
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f001 f8d6 	bl	800973c <RCCEx_PLL2_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008596:	e013      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800859c:	3328      	adds	r3, #40	@ 0x28
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 f97d 	bl	80098a0 <RCCEx_PLL3_Config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80085ac:	e008      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085b4:	e004      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80085be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80085c8:	4b3a      	ldr	r3, [pc, #232]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80085d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d6:	4a37      	ldr	r2, [pc, #220]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085d8:	430b      	orrs	r3, r1
 80085da:	6513      	str	r3, [r2, #80]	@ 0x50
 80085dc:	e003      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80085e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80085f2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80085fc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d05c      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008606:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800860a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800860c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008610:	d03b      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008612:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008616:	d834      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800861c:	d037      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800861e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008622:	d82e      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008624:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008628:	d033      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800862a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800862e:	d828      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008634:	d01a      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800863a:	d822      	bhi.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008644:	d007      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008646:	e01c      	b.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008648:	4b1a      	ldr	r3, [pc, #104]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800864a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800864c:	4a19      	ldr	r2, [pc, #100]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800864e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008654:	e01e      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865a:	3308      	adds	r3, #8
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f86c 	bl	800973c <RCCEx_PLL2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800866a:	e013      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800866c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008670:	3328      	adds	r3, #40	@ 0x28
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f001 f913 	bl	80098a0 <RCCEx_PLL3_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008680:	e008      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008688:	e004      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800868a:	bf00      	nop
 800868c:	e002      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800868e:	bf00      	nop
 8008690:	e000      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10d      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800869c:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800869e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086a0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80086a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086aa:	4a02      	ldr	r2, [pc, #8]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80086ac:	430b      	orrs	r3, r1
 80086ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80086b0:	e006      	b.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80086b2:	bf00      	nop
 80086b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80086c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80086cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80086d0:	2300      	movs	r3, #0
 80086d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80086d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80086da:	460b      	mov	r3, r1
 80086dc:	4313      	orrs	r3, r2
 80086de:	d03a      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80086e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e6:	2b30      	cmp	r3, #48	@ 0x30
 80086e8:	d01f      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80086ea:	2b30      	cmp	r3, #48	@ 0x30
 80086ec:	d819      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d00c      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	d815      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d019      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80086fa:	2b10      	cmp	r3, #16
 80086fc:	d111      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086fe:	4bae      	ldr	r3, [pc, #696]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4aad      	ldr	r2, [pc, #692]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800870a:	e011      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800870c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008710:	3308      	adds	r3, #8
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f811 	bl	800973c <RCCEx_PLL2_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008728:	e002      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800872e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008738:	4b9f      	ldr	r3, [pc, #636]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800873a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800873c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008746:	4a9c      	ldr	r2, [pc, #624]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008748:	430b      	orrs	r3, r1
 800874a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800874c:	e003      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008752:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008762:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800876c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d051      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800877a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800877c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008780:	d035      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008786:	d82e      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800878c:	d031      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800878e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008792:	d828      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008798:	d01a      	beq.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800879a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800879e:	d822      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80087a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a8:	d007      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80087aa:	e01c      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ac:	4b82      	ldr	r3, [pc, #520]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	4a81      	ldr	r2, [pc, #516]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087b8:	e01c      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087be:	3308      	adds	r3, #8
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 ffba 	bl	800973c <RCCEx_PLL2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087ce:	e011      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d4:	3328      	adds	r3, #40	@ 0x28
 80087d6:	2100      	movs	r1, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 f861 	bl	80098a0 <RCCEx_PLL3_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80087f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80087fc:	4b6e      	ldr	r3, [pc, #440]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80087fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008800:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800880a:	4a6b      	ldr	r2, [pc, #428]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008810:	e003      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008812:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008816:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800881a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008830:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d053      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800883a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008844:	d033      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800884a:	d82c      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800884c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008850:	d02f      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8008852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008856:	d826      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008858:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800885c:	d02b      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800885e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008862:	d820      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008868:	d012      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800886a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800886e:	d81a      	bhi.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d022      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008878:	d115      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887e:	3308      	adds	r3, #8
 8008880:	2101      	movs	r1, #1
 8008882:	4618      	mov	r0, r3
 8008884:	f000 ff5a 	bl	800973c <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800888e:	e015      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008894:	3328      	adds	r3, #40	@ 0x28
 8008896:	2101      	movs	r1, #1
 8008898:	4618      	mov	r0, r3
 800889a:	f001 f801 	bl	80098a0 <RCCEx_PLL3_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088a4:	e00a      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088ac:	e006      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80088ae:	bf00      	nop
 80088b0:	e004      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80088b2:	bf00      	nop
 80088b4:	e002      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80088b6:	bf00      	nop
 80088b8:	e000      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80088ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088c4:	4b3c      	ldr	r3, [pc, #240]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80088cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088d2:	4a39      	ldr	r2, [pc, #228]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088d4:	430b      	orrs	r3, r1
 80088d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80088d8:	e003      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80088e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80088ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088f2:	2300      	movs	r3, #0
 80088f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80088f8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4313      	orrs	r3, r2
 8008900:	d060      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800890a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800890e:	d039      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008910:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008914:	d832      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800891a:	d035      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800891c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008920:	d82c      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008926:	d031      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800892c:	d826      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800892e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008932:	d02d      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008938:	d820      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800893a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800893e:	d012      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008944:	d81a      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008946:	2b00      	cmp	r3, #0
 8008948:	d024      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800894a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800894e:	d115      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008954:	3308      	adds	r3, #8
 8008956:	2101      	movs	r1, #1
 8008958:	4618      	mov	r0, r3
 800895a:	f000 feef 	bl	800973c <RCCEx_PLL2_Config>
 800895e:	4603      	mov	r3, r0
 8008960:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008964:	e017      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896a:	3328      	adds	r3, #40	@ 0x28
 800896c:	2101      	movs	r1, #1
 800896e:	4618      	mov	r0, r3
 8008970:	f000 ff96 	bl	80098a0 <RCCEx_PLL3_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800897a:	e00c      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008982:	e008      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008984:	bf00      	nop
 8008986:	e006      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008988:	bf00      	nop
 800898a:	e004      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800898c:	bf00      	nop
 800898e:	e002      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008990:	bf00      	nop
 8008992:	e000      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008996:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10e      	bne.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800899e:	4b06      	ldr	r3, [pc, #24]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80089a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089ae:	4a02      	ldr	r2, [pc, #8]	@ (80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80089b4:	e006      	b.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80089d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089d4:	2300      	movs	r3, #0
 80089d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089de:	460b      	mov	r3, r1
 80089e0:	4313      	orrs	r3, r2
 80089e2:	d037      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80089e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ee:	d00e      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f4:	d816      	bhi.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d018      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80089fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089fe:	d111      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a00:	4bc4      	ldr	r3, [pc, #784]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a04:	4ac3      	ldr	r2, [pc, #780]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a0c:	e00f      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a12:	3308      	adds	r3, #8
 8008a14:	2101      	movs	r1, #1
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fe90 	bl	800973c <RCCEx_PLL2_Config>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a22:	e004      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a2a:	e000      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a36:	4bb7      	ldr	r3, [pc, #732]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a44:	4ab3      	ldr	r2, [pc, #716]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d039      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d81c      	bhi.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008ac1 	.word	0x08008ac1
 8008a88:	08008a95 	.word	0x08008a95
 8008a8c:	08008aa3 	.word	0x08008aa3
 8008a90:	08008ac1 	.word	0x08008ac1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a94:	4b9f      	ldr	r3, [pc, #636]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	4a9e      	ldr	r2, [pc, #632]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008aa0:	e00f      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	2102      	movs	r1, #2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fe46 	bl	800973c <RCCEx_PLL2_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ab6:	e004      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008abe:	e000      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008aca:	4b92      	ldr	r3, [pc, #584]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ace:	f023 0103 	bic.w	r1, r3, #3
 8008ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	4a8e      	ldr	r2, [pc, #568]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ada:	430b      	orrs	r3, r1
 8008adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ade:	e003      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ae4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008afe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008b02:	460b      	mov	r3, r1
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f000 8099 	beq.w	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b0a:	4b83      	ldr	r3, [pc, #524]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a82      	ldr	r2, [pc, #520]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b16:	f7fb fa3b 	bl	8003f90 <HAL_GetTick>
 8008b1a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b1e:	e00b      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b20:	f7fb fa36 	bl	8003f90 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b64      	cmp	r3, #100	@ 0x64
 8008b2e:	d903      	bls.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b36:	e005      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b38:	4b77      	ldr	r3, [pc, #476]	@ (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0ed      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008b44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d173      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b4c:	4b71      	ldr	r3, [pc, #452]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b58:	4053      	eors	r3, r2
 8008b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d015      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b62:	4b6c      	ldr	r3, [pc, #432]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b6a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b6e:	4b69      	ldr	r3, [pc, #420]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b72:	4a68      	ldr	r2, [pc, #416]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b7a:	4b66      	ldr	r3, [pc, #408]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b7e:	4a65      	ldr	r2, [pc, #404]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008b86:	4a63      	ldr	r2, [pc, #396]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b9a:	d118      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b9c:	f7fb f9f8 	bl	8003f90 <HAL_GetTick>
 8008ba0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ba4:	e00d      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba6:	f7fb f9f3 	bl	8003f90 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008bb0:	1ad2      	subs	r2, r2, r3
 8008bb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d903      	bls.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008bc0:	e005      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc2:	4b54      	ldr	r3, [pc, #336]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0eb      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008bce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d129      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008be2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008be6:	d10e      	bne.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008be8:	4b4a      	ldr	r3, [pc, #296]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bf8:	091a      	lsrs	r2, r3, #4
 8008bfa:	4b48      	ldr	r3, [pc, #288]	@ (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	4a45      	ldr	r2, [pc, #276]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6113      	str	r3, [r2, #16]
 8008c04:	e005      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008c06:	4b43      	ldr	r3, [pc, #268]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	4a42      	ldr	r2, [pc, #264]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008c10:	6113      	str	r3, [r2, #16]
 8008c12:	4b40      	ldr	r3, [pc, #256]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c14:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c22:	4a3c      	ldr	r2, [pc, #240]	@ (8008d14 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c24:	430b      	orrs	r3, r1
 8008c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c28:	e008      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008c32:	e003      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f002 0301 	and.w	r3, r2, #1
 8008c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f000 8090 	beq.w	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c66:	2b28      	cmp	r3, #40	@ 0x28
 8008c68:	d870      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c70 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008d55 	.word	0x08008d55
 8008c74:	08008d4d 	.word	0x08008d4d
 8008c78:	08008d4d 	.word	0x08008d4d
 8008c7c:	08008d4d 	.word	0x08008d4d
 8008c80:	08008d4d 	.word	0x08008d4d
 8008c84:	08008d4d 	.word	0x08008d4d
 8008c88:	08008d4d 	.word	0x08008d4d
 8008c8c:	08008d4d 	.word	0x08008d4d
 8008c90:	08008d21 	.word	0x08008d21
 8008c94:	08008d4d 	.word	0x08008d4d
 8008c98:	08008d4d 	.word	0x08008d4d
 8008c9c:	08008d4d 	.word	0x08008d4d
 8008ca0:	08008d4d 	.word	0x08008d4d
 8008ca4:	08008d4d 	.word	0x08008d4d
 8008ca8:	08008d4d 	.word	0x08008d4d
 8008cac:	08008d4d 	.word	0x08008d4d
 8008cb0:	08008d37 	.word	0x08008d37
 8008cb4:	08008d4d 	.word	0x08008d4d
 8008cb8:	08008d4d 	.word	0x08008d4d
 8008cbc:	08008d4d 	.word	0x08008d4d
 8008cc0:	08008d4d 	.word	0x08008d4d
 8008cc4:	08008d4d 	.word	0x08008d4d
 8008cc8:	08008d4d 	.word	0x08008d4d
 8008ccc:	08008d4d 	.word	0x08008d4d
 8008cd0:	08008d55 	.word	0x08008d55
 8008cd4:	08008d4d 	.word	0x08008d4d
 8008cd8:	08008d4d 	.word	0x08008d4d
 8008cdc:	08008d4d 	.word	0x08008d4d
 8008ce0:	08008d4d 	.word	0x08008d4d
 8008ce4:	08008d4d 	.word	0x08008d4d
 8008ce8:	08008d4d 	.word	0x08008d4d
 8008cec:	08008d4d 	.word	0x08008d4d
 8008cf0:	08008d55 	.word	0x08008d55
 8008cf4:	08008d4d 	.word	0x08008d4d
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008d4d 	.word	0x08008d4d
 8008d00:	08008d4d 	.word	0x08008d4d
 8008d04:	08008d4d 	.word	0x08008d4d
 8008d08:	08008d4d 	.word	0x08008d4d
 8008d0c:	08008d4d 	.word	0x08008d4d
 8008d10:	08008d55 	.word	0x08008d55
 8008d14:	58024400 	.word	0x58024400
 8008d18:	58024800 	.word	0x58024800
 8008d1c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d24:	3308      	adds	r3, #8
 8008d26:	2101      	movs	r1, #1
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fd07 	bl	800973c <RCCEx_PLL2_Config>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d34:	e00f      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3a:	3328      	adds	r3, #40	@ 0x28
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fdae 	bl	80098a0 <RCCEx_PLL3_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d4a:	e004      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d52:	e000      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d5e:	4bc0      	ldr	r3, [pc, #768]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d62:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d6e:	4abc      	ldr	r2, [pc, #752]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d74:	e003      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f002 0302 	and.w	r3, r2, #2
 8008d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d94:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	d043      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d824      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dfd 	.word	0x08008dfd
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008ddf 	.word	0x08008ddf
 8008dbc:	08008dfd 	.word	0x08008dfd
 8008dc0:	08008dfd 	.word	0x08008dfd
 8008dc4:	08008dfd 	.word	0x08008dfd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	3308      	adds	r3, #8
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fcb3 	bl	800973c <RCCEx_PLL2_Config>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ddc:	e00f      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de2:	3328      	adds	r3, #40	@ 0x28
 8008de4:	2101      	movs	r1, #1
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fd5a 	bl	80098a0 <RCCEx_PLL3_Config>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008df2:	e004      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dfa:	e000      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10b      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e06:	4b96      	ldr	r3, [pc, #600]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e0a:	f023 0107 	bic.w	r1, r3, #7
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e16:	4a92      	ldr	r2, [pc, #584]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e1c:	e003      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f002 0304 	and.w	r3, r2, #4
 8008e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e36:	2300      	movs	r3, #0
 8008e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e3c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d043      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d824      	bhi.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008e52:	a201      	add	r2, pc, #4	@ (adr r2, 8008e58 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008e71 	.word	0x08008e71
 8008e60:	08008e87 	.word	0x08008e87
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e74:	3308      	adds	r3, #8
 8008e76:	2101      	movs	r1, #1
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f000 fc5f 	bl	800973c <RCCEx_PLL2_Config>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e84:	e00f      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8a:	3328      	adds	r3, #40	@ 0x28
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fd06 	bl	80098a0 <RCCEx_PLL3_Config>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008e9a:	e004      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10b      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008eae:	4b6c      	ldr	r3, [pc, #432]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb2:	f023 0107 	bic.w	r1, r3, #7
 8008eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ebe:	4a68      	ldr	r2, [pc, #416]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ec4:	e003      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f002 0320 	and.w	r3, r2, #32
 8008eda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ee4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4313      	orrs	r3, r2
 8008eec:	d055      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008efa:	d033      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f00:	d82c      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f06:	d02f      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f0c:	d826      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f12:	d02b      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008f14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f18:	d820      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f1e:	d012      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f24:	d81a      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d022      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2e:	d115      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f34:	3308      	adds	r3, #8
 8008f36:	2100      	movs	r1, #0
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fbff 	bl	800973c <RCCEx_PLL2_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f44:	e015      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f4a:	3328      	adds	r3, #40	@ 0x28
 8008f4c:	2102      	movs	r1, #2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fca6 	bl	80098a0 <RCCEx_PLL3_Config>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f5a:	e00a      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f62:	e006      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f64:	bf00      	nop
 8008f66:	e004      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f68:	bf00      	nop
 8008f6a:	e002      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10b      	bne.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f7a:	4b39      	ldr	r3, [pc, #228]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f8a:	4a35      	ldr	r2, [pc, #212]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f96:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008fa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008faa:	2300      	movs	r3, #0
 8008fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	d058      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008fc6:	d033      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008fc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008fcc:	d82c      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fd2:	d02f      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fd8:	d826      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fde:	d02b      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe4:	d820      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fea:	d012      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff0:	d81a      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d022      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ffa:	d115      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009000:	3308      	adds	r3, #8
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fb99 	bl	800973c <RCCEx_PLL2_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009010:	e015      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009016:	3328      	adds	r3, #40	@ 0x28
 8009018:	2102      	movs	r1, #2
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fc40 	bl	80098a0 <RCCEx_PLL3_Config>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009026:	e00a      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800902e:	e006      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009030:	bf00      	nop
 8009032:	e004      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800903c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10e      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009046:	4b06      	ldr	r3, [pc, #24]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800904a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800904e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009052:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009056:	4a02      	ldr	r2, [pc, #8]	@ (8009060 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009058:	430b      	orrs	r3, r1
 800905a:	6593      	str	r3, [r2, #88]	@ 0x58
 800905c:	e006      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800905e:	bf00      	nop
 8009060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009064:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009068:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800906c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800907c:	2300      	movs	r3, #0
 800907e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009082:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009086:	460b      	mov	r3, r1
 8009088:	4313      	orrs	r3, r2
 800908a:	d055      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800908c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009090:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009094:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009098:	d033      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800909a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800909e:	d82c      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80090a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090a4:	d02f      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80090a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090aa:	d826      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80090ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80090b0:	d02b      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80090b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80090b6:	d820      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80090b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090bc:	d012      	beq.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80090be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090c2:	d81a      	bhi.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d022      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80090c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090cc:	d115      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090d2:	3308      	adds	r3, #8
 80090d4:	2100      	movs	r1, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fb30 	bl	800973c <RCCEx_PLL2_Config>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090e2:	e015      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e8:	3328      	adds	r3, #40	@ 0x28
 80090ea:	2102      	movs	r1, #2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fbd7 	bl	80098a0 <RCCEx_PLL3_Config>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090f8:	e00a      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009100:	e006      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009102:	bf00      	nop
 8009104:	e004      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009106:	bf00      	nop
 8009108:	e002      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800910e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009110:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10b      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009118:	4ba1      	ldr	r3, [pc, #644]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800911a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800911c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009124:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009128:	4a9d      	ldr	r2, [pc, #628]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800912a:	430b      	orrs	r3, r1
 800912c:	6593      	str	r3, [r2, #88]	@ 0x58
 800912e:	e003      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009130:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009134:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f002 0308 	and.w	r3, r2, #8
 8009144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009148:	2300      	movs	r3, #0
 800914a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800914e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009152:	460b      	mov	r3, r1
 8009154:	4313      	orrs	r3, r2
 8009156:	d01e      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009164:	d10c      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916a:	3328      	adds	r3, #40	@ 0x28
 800916c:	2102      	movs	r1, #2
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fb96 	bl	80098a0 <RCCEx_PLL3_Config>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009180:	4b87      	ldr	r3, [pc, #540]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009184:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800918c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009190:	4a83      	ldr	r2, [pc, #524]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009192:	430b      	orrs	r3, r1
 8009194:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f002 0310 	and.w	r3, r2, #16
 80091a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091a6:	2300      	movs	r3, #0
 80091a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80091b0:	460b      	mov	r3, r1
 80091b2:	4313      	orrs	r3, r2
 80091b4:	d01e      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80091b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c2:	d10c      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c8:	3328      	adds	r3, #40	@ 0x28
 80091ca:	2102      	movs	r1, #2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fb67 	bl	80098a0 <RCCEx_PLL3_Config>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091de:	4b70      	ldr	r3, [pc, #448]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80091e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091ee:	4a6c      	ldr	r2, [pc, #432]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091f0:	430b      	orrs	r3, r1
 80091f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009204:	2300      	movs	r3, #0
 8009206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800920a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800920e:	460b      	mov	r3, r1
 8009210:	4313      	orrs	r3, r2
 8009212:	d03e      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800921c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009220:	d022      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8009222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009226:	d81b      	bhi.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800922c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009230:	d00b      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8009232:	e015      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009234:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009238:	3308      	adds	r3, #8
 800923a:	2100      	movs	r1, #0
 800923c:	4618      	mov	r0, r3
 800923e:	f000 fa7d 	bl	800973c <RCCEx_PLL2_Config>
 8009242:	4603      	mov	r3, r0
 8009244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009248:	e00f      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800924a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800924e:	3328      	adds	r3, #40	@ 0x28
 8009250:	2102      	movs	r1, #2
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fb24 	bl	80098a0 <RCCEx_PLL3_Config>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800925e:	e004      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8009268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009272:	4b4b      	ldr	r3, [pc, #300]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009276:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800927a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800927e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009282:	4a47      	ldr	r2, [pc, #284]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009284:	430b      	orrs	r3, r1
 8009286:	6593      	str	r3, [r2, #88]	@ 0x58
 8009288:	e003      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800928e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800929e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092a0:	2300      	movs	r3, #0
 80092a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80092a8:	460b      	mov	r3, r1
 80092aa:	4313      	orrs	r3, r2
 80092ac:	d03b      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80092ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092ba:	d01f      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80092bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092c0:	d818      	bhi.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80092c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092c6:	d003      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80092c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092cc:	d007      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80092ce:	e011      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d0:	4b33      	ldr	r3, [pc, #204]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d4:	4a32      	ldr	r2, [pc, #200]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80092dc:	e00f      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092e2:	3328      	adds	r3, #40	@ 0x28
 80092e4:	2101      	movs	r1, #1
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fada 	bl	80098a0 <RCCEx_PLL3_Config>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80092f2:	e004      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092fa:	e000      	b.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80092fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009306:	4b26      	ldr	r3, [pc, #152]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800930a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800930e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009316:	4a22      	ldr	r2, [pc, #136]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009318:	430b      	orrs	r3, r1
 800931a:	6553      	str	r3, [r2, #84]	@ 0x54
 800931c:	e003      	b.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800931e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009322:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009332:	673b      	str	r3, [r7, #112]	@ 0x70
 8009334:	2300      	movs	r3, #0
 8009336:	677b      	str	r3, [r7, #116]	@ 0x74
 8009338:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800933c:	460b      	mov	r3, r1
 800933e:	4313      	orrs	r3, r2
 8009340:	d034      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009348:	2b00      	cmp	r3, #0
 800934a:	d003      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009350:	d007      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8009352:	e011      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009354:	4b12      	ldr	r3, [pc, #72]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009358:	4a11      	ldr	r2, [pc, #68]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800935a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800935e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009360:	e00e      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009366:	3308      	adds	r3, #8
 8009368:	2102      	movs	r1, #2
 800936a:	4618      	mov	r0, r3
 800936c:	f000 f9e6 	bl	800973c <RCCEx_PLL2_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009376:	e003      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800937e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009380:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10d      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009388:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800938a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800938c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009396:	4a02      	ldr	r2, [pc, #8]	@ (80093a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009398:	430b      	orrs	r3, r1
 800939a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800939c:	e006      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800939e:	bf00      	nop
 80093a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80093b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093ba:	2300      	movs	r3, #0
 80093bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80093c2:	460b      	mov	r3, r1
 80093c4:	4313      	orrs	r3, r2
 80093c6:	d00c      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093cc:	3328      	adds	r3, #40	@ 0x28
 80093ce:	2102      	movs	r1, #2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fa65 	bl	80098a0 <RCCEx_PLL3_Config>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80093ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80093f0:	2300      	movs	r3, #0
 80093f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80093f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80093f8:	460b      	mov	r3, r1
 80093fa:	4313      	orrs	r3, r2
 80093fc:	d038      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80093fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009406:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800940a:	d018      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800940c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009410:	d811      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009412:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009416:	d014      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800941c:	d80b      	bhi.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d011      	beq.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8009422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009426:	d106      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009428:	4bc3      	ldr	r3, [pc, #780]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800942a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942c:	4ac2      	ldr	r2, [pc, #776]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800942e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009432:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009434:	e008      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800943c:	e004      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800943e:	bf00      	nop
 8009440:	e002      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009442:	bf00      	nop
 8009444:	e000      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10b      	bne.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009450:	4bb9      	ldr	r3, [pc, #740]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009454:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800945c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009460:	4ab5      	ldr	r2, [pc, #724]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009462:	430b      	orrs	r3, r1
 8009464:	6553      	str	r3, [r2, #84]	@ 0x54
 8009466:	e003      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800946c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800947c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800947e:	2300      	movs	r3, #0
 8009480:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009482:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009486:	460b      	mov	r3, r1
 8009488:	4313      	orrs	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800948c:	4baa      	ldr	r3, [pc, #680]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800948e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800949a:	4aa7      	ldr	r2, [pc, #668]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80094ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ae:	2300      	movs	r3, #0
 80094b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80094b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80094b6:	460b      	mov	r3, r1
 80094b8:	4313      	orrs	r3, r2
 80094ba:	d009      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094bc:	4b9e      	ldr	r3, [pc, #632]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80094c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ca:	4a9b      	ldr	r2, [pc, #620]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094cc:	430b      	orrs	r3, r1
 80094ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80094d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80094dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094de:	2300      	movs	r3, #0
 80094e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80094e6:	460b      	mov	r3, r1
 80094e8:	4313      	orrs	r3, r2
 80094ea:	d009      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80094ec:	4b92      	ldr	r3, [pc, #584]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094fa:	4a8f      	ldr	r2, [pc, #572]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094fc:	430b      	orrs	r3, r1
 80094fe:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800950c:	643b      	str	r3, [r7, #64]	@ 0x40
 800950e:	2300      	movs	r3, #0
 8009510:	647b      	str	r3, [r7, #68]	@ 0x44
 8009512:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009516:	460b      	mov	r3, r1
 8009518:	4313      	orrs	r3, r2
 800951a:	d00e      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800951c:	4b86      	ldr	r3, [pc, #536]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	4a85      	ldr	r2, [pc, #532]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009522:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009526:	6113      	str	r3, [r2, #16]
 8009528:	4b83      	ldr	r3, [pc, #524]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800952a:	6919      	ldr	r1, [r3, #16]
 800952c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009530:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009534:	4a80      	ldr	r2, [pc, #512]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009536:	430b      	orrs	r3, r1
 8009538:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800953a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800954c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009550:	460b      	mov	r3, r1
 8009552:	4313      	orrs	r3, r2
 8009554:	d009      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009556:	4b78      	ldr	r3, [pc, #480]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800955a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800955e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009564:	4a74      	ldr	r2, [pc, #464]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009566:	430b      	orrs	r3, r1
 8009568:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800956a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009576:	633b      	str	r3, [r7, #48]	@ 0x30
 8009578:	2300      	movs	r3, #0
 800957a:	637b      	str	r3, [r7, #52]	@ 0x34
 800957c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009580:	460b      	mov	r3, r1
 8009582:	4313      	orrs	r3, r2
 8009584:	d00a      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009586:	4b6c      	ldr	r3, [pc, #432]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800958a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800958e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009596:	4a68      	ldr	r2, [pc, #416]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009598:	430b      	orrs	r3, r1
 800959a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800959c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	2100      	movs	r1, #0
 80095a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80095b2:	460b      	mov	r3, r1
 80095b4:	4313      	orrs	r3, r2
 80095b6:	d011      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095bc:	3308      	adds	r3, #8
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f8bb 	bl	800973c <RCCEx_PLL2_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80095cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80095dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	2100      	movs	r1, #0
 80095e6:	6239      	str	r1, [r7, #32]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d011      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fc:	3308      	adds	r3, #8
 80095fe:	2101      	movs	r1, #1
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f89b 	bl	800973c <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800960c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009614:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009618:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800961c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009624:	2100      	movs	r1, #0
 8009626:	61b9      	str	r1, [r7, #24]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	d011      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963c:	3308      	adds	r3, #8
 800963e:	2102      	movs	r1, #2
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f87b 	bl	800973c <RCCEx_PLL2_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800964c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009650:	2b00      	cmp	r3, #0
 8009652:	d003      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009658:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800965c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	2100      	movs	r1, #0
 8009666:	6139      	str	r1, [r7, #16]
 8009668:	f003 0308 	and.w	r3, r3, #8
 800966c:	617b      	str	r3, [r7, #20]
 800966e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009672:	460b      	mov	r3, r1
 8009674:	4313      	orrs	r3, r2
 8009676:	d011      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800967c:	3328      	adds	r3, #40	@ 0x28
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f000 f90d 	bl	80098a0 <RCCEx_PLL3_Config>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800968c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009694:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009698:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800969c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	2100      	movs	r1, #0
 80096a6:	60b9      	str	r1, [r7, #8]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80096b2:	460b      	mov	r3, r1
 80096b4:	4313      	orrs	r3, r2
 80096b6:	d011      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096bc:	3328      	adds	r3, #40	@ 0x28
 80096be:	2101      	movs	r1, #1
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f8ed 	bl	80098a0 <RCCEx_PLL3_Config>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80096cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80096d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80096dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	2100      	movs	r1, #0
 80096e6:	6039      	str	r1, [r7, #0]
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	607b      	str	r3, [r7, #4]
 80096ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80096f2:	460b      	mov	r3, r1
 80096f4:	4313      	orrs	r3, r2
 80096f6:	d011      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	2102      	movs	r1, #2
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f8cd 	bl	80098a0 <RCCEx_PLL3_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800970c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009718:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800971c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
}
 800972a:	4618      	mov	r0, r3
 800972c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009730:	46bd      	mov	sp, r7
 8009732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400

0800973c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800974a:	4b53      	ldr	r3, [pc, #332]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800974c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b03      	cmp	r3, #3
 8009754:	d101      	bne.n	800975a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e099      	b.n	800988e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800975a:	4b4f      	ldr	r3, [pc, #316]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a4e      	ldr	r2, [pc, #312]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009760:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009766:	f7fa fc13 	bl	8003f90 <HAL_GetTick>
 800976a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800976c:	e008      	b.n	8009780 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800976e:	f7fa fc0f 	bl	8003f90 <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	2b02      	cmp	r3, #2
 800977a:	d901      	bls.n	8009780 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e086      	b.n	800988e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009780:	4b45      	ldr	r3, [pc, #276]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f0      	bne.n	800976e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800978c:	4b42      	ldr	r3, [pc, #264]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800978e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009790:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	031b      	lsls	r3, r3, #12
 800979a:	493f      	ldr	r1, [pc, #252]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800979c:	4313      	orrs	r3, r2
 800979e:	628b      	str	r3, [r1, #40]	@ 0x28
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	025b      	lsls	r3, r3, #9
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	041b      	lsls	r3, r3, #16
 80097be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097c2:	431a      	orrs	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	061b      	lsls	r3, r3, #24
 80097cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097d0:	4931      	ldr	r1, [pc, #196]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097d6:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	492d      	ldr	r1, [pc, #180]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ec:	f023 0220 	bic.w	r2, r3, #32
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	4928      	ldr	r1, [pc, #160]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097fa:	4b27      	ldr	r3, [pc, #156]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	4a26      	ldr	r2, [pc, #152]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009800:	f023 0310 	bic.w	r3, r3, #16
 8009804:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009806:	4b24      	ldr	r3, [pc, #144]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009808:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800980a:	4b24      	ldr	r3, [pc, #144]	@ (800989c <RCCEx_PLL2_Config+0x160>)
 800980c:	4013      	ands	r3, r2
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	69d2      	ldr	r2, [r2, #28]
 8009812:	00d2      	lsls	r2, r2, #3
 8009814:	4920      	ldr	r1, [pc, #128]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800981a:	4b1f      	ldr	r3, [pc, #124]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800981c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981e:	4a1e      	ldr	r2, [pc, #120]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009820:	f043 0310 	orr.w	r3, r3, #16
 8009824:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800982c:	4b1a      	ldr	r3, [pc, #104]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	4a19      	ldr	r2, [pc, #100]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009832:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009838:	e00f      	b.n	800985a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d106      	bne.n	800984e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009840:	4b15      	ldr	r3, [pc, #84]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009844:	4a14      	ldr	r2, [pc, #80]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800984a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800984c:	e005      	b.n	800985a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800984e:	4b12      	ldr	r3, [pc, #72]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009852:	4a11      	ldr	r2, [pc, #68]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009854:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009858:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800985a:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a0e      	ldr	r2, [pc, #56]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009860:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009866:	f7fa fb93 	bl	8003f90 <HAL_GetTick>
 800986a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800986c:	e008      	b.n	8009880 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800986e:	f7fa fb8f 	bl	8003f90 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	2b02      	cmp	r3, #2
 800987a:	d901      	bls.n	8009880 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e006      	b.n	800988e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009880:	4b05      	ldr	r3, [pc, #20]	@ (8009898 <RCCEx_PLL2_Config+0x15c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d0f0      	beq.n	800986e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
 800989c:	ffff0007 	.word	0xffff0007

080098a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ae:	4b53      	ldr	r3, [pc, #332]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80098b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d101      	bne.n	80098be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e099      	b.n	80099f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80098be:	4b4f      	ldr	r3, [pc, #316]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a4e      	ldr	r2, [pc, #312]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80098c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ca:	f7fa fb61 	bl	8003f90 <HAL_GetTick>
 80098ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098d0:	e008      	b.n	80098e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80098d2:	f7fa fb5d 	bl	8003f90 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d901      	bls.n	80098e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e086      	b.n	80099f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098e4:	4b45      	ldr	r3, [pc, #276]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1f0      	bne.n	80098d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098f0:	4b42      	ldr	r3, [pc, #264]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80098f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	051b      	lsls	r3, r3, #20
 80098fe:	493f      	ldr	r1, [pc, #252]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009900:	4313      	orrs	r3, r2
 8009902:	628b      	str	r3, [r1, #40]	@ 0x28
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	3b01      	subs	r3, #1
 800990a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	3b01      	subs	r3, #1
 8009914:	025b      	lsls	r3, r3, #9
 8009916:	b29b      	uxth	r3, r3
 8009918:	431a      	orrs	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	3b01      	subs	r3, #1
 8009920:	041b      	lsls	r3, r3, #16
 8009922:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	3b01      	subs	r3, #1
 800992e:	061b      	lsls	r3, r3, #24
 8009930:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009934:	4931      	ldr	r1, [pc, #196]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800993a:	4b30      	ldr	r3, [pc, #192]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	492d      	ldr	r1, [pc, #180]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009948:	4313      	orrs	r3, r2
 800994a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800994c:	4b2b      	ldr	r3, [pc, #172]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 800994e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009950:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	4928      	ldr	r1, [pc, #160]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 800995a:	4313      	orrs	r3, r2
 800995c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800995e:	4b27      	ldr	r3, [pc, #156]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	4a26      	ldr	r2, [pc, #152]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009968:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800996a:	4b24      	ldr	r3, [pc, #144]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 800996c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800996e:	4b24      	ldr	r3, [pc, #144]	@ (8009a00 <RCCEx_PLL3_Config+0x160>)
 8009970:	4013      	ands	r3, r2
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	69d2      	ldr	r2, [r2, #28]
 8009976:	00d2      	lsls	r2, r2, #3
 8009978:	4920      	ldr	r1, [pc, #128]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 800997a:	4313      	orrs	r3, r2
 800997c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800997e:	4b1f      	ldr	r3, [pc, #124]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	4a1e      	ldr	r2, [pc, #120]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009990:	4b1a      	ldr	r3, [pc, #104]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	4a19      	ldr	r2, [pc, #100]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 8009996:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800999a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800999c:	e00f      	b.n	80099be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d106      	bne.n	80099b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80099a4:	4b15      	ldr	r3, [pc, #84]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	4a14      	ldr	r2, [pc, #80]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099b0:	e005      	b.n	80099be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80099b2:	4b12      	ldr	r3, [pc, #72]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	4a11      	ldr	r2, [pc, #68]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80099bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80099be:	4b0f      	ldr	r3, [pc, #60]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a0e      	ldr	r2, [pc, #56]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ca:	f7fa fae1 	bl	8003f90 <HAL_GetTick>
 80099ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099d0:	e008      	b.n	80099e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099d2:	f7fa fadd 	bl	8003f90 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d901      	bls.n	80099e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e006      	b.n	80099f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099e4:	4b05      	ldr	r3, [pc, #20]	@ (80099fc <RCCEx_PLL3_Config+0x15c>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f0      	beq.n	80099d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	58024400 	.word	0x58024400
 8009a00:	ffff0007 	.word	0xffff0007

08009a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e049      	b.n	8009aaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f841 	bl	8009ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f000 f9e8 	bl	8009e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d001      	beq.n	8009ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e054      	b.n	8009b8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68da      	ldr	r2, [r3, #12]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0201 	orr.w	r2, r2, #1
 8009af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a26      	ldr	r2, [pc, #152]	@ (8009b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d022      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b0a:	d01d      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a22      	ldr	r2, [pc, #136]	@ (8009b9c <HAL_TIM_Base_Start_IT+0xd4>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d018      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a21      	ldr	r2, [pc, #132]	@ (8009ba0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d013      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00e      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ba8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d009      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a1c      	ldr	r2, [pc, #112]	@ (8009bac <HAL_TIM_Base_Start_IT+0xe4>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d004      	beq.n	8009b48 <HAL_TIM_Base_Start_IT+0x80>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a1b      	ldr	r2, [pc, #108]	@ (8009bb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d115      	bne.n	8009b74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	4b19      	ldr	r3, [pc, #100]	@ (8009bb4 <HAL_TIM_Base_Start_IT+0xec>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b06      	cmp	r3, #6
 8009b58:	d015      	beq.n	8009b86 <HAL_TIM_Base_Start_IT+0xbe>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b60:	d011      	beq.n	8009b86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f042 0201 	orr.w	r2, r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b72:	e008      	b.n	8009b86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0201 	orr.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	e000      	b.n	8009b88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	40010000 	.word	0x40010000
 8009b9c:	40000400 	.word	0x40000400
 8009ba0:	40000800 	.word	0x40000800
 8009ba4:	40000c00 	.word	0x40000c00
 8009ba8:	40010400 	.word	0x40010400
 8009bac:	40001800 	.word	0x40001800
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	00010007 	.word	0x00010007

08009bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d020      	beq.n	8009c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01b      	beq.n	8009c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0202 	mvn.w	r2, #2
 8009bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d003      	beq.n	8009c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f8e9 	bl	8009dda <HAL_TIM_IC_CaptureCallback>
 8009c08:	e005      	b.n	8009c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f8db 	bl	8009dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f8ec 	bl	8009dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d020      	beq.n	8009c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01b      	beq.n	8009c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f06f 0204 	mvn.w	r2, #4
 8009c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f8c3 	bl	8009dda <HAL_TIM_IC_CaptureCallback>
 8009c54:	e005      	b.n	8009c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f8b5 	bl	8009dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8c6 	bl	8009dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 0308 	and.w	r3, r3, #8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d020      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01b      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f06f 0208 	mvn.w	r2, #8
 8009c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2204      	movs	r2, #4
 8009c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f89d 	bl	8009dda <HAL_TIM_IC_CaptureCallback>
 8009ca0:	e005      	b.n	8009cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f88f 	bl	8009dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f8a0 	bl	8009dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f003 0310 	and.w	r3, r3, #16
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d020      	beq.n	8009d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01b      	beq.n	8009d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f06f 0210 	mvn.w	r2, #16
 8009cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f877 	bl	8009dda <HAL_TIM_IC_CaptureCallback>
 8009cec:	e005      	b.n	8009cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f869 	bl	8009dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f87a 	bl	8009dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00c      	beq.n	8009d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f06f 0201 	mvn.w	r2, #1
 8009d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7f6 ff7c 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00c      	beq.n	8009d52 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f913 	bl	8009f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00c      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f90b 	bl	8009f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00c      	beq.n	8009d9a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f834 	bl	8009e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f003 0320 	and.w	r3, r3, #32
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00c      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0320 	and.w	r3, r3, #32
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d007      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f06f 0220 	mvn.w	r2, #32
 8009db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f8d3 	bl	8009f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dce:	bf00      	nop
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a46      	ldr	r2, [pc, #280]	@ (8009f44 <TIM_Base_SetConfig+0x12c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d013      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e36:	d00f      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a43      	ldr	r2, [pc, #268]	@ (8009f48 <TIM_Base_SetConfig+0x130>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00b      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a42      	ldr	r2, [pc, #264]	@ (8009f4c <TIM_Base_SetConfig+0x134>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d007      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a41      	ldr	r2, [pc, #260]	@ (8009f50 <TIM_Base_SetConfig+0x138>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <TIM_Base_SetConfig+0x40>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a40      	ldr	r2, [pc, #256]	@ (8009f54 <TIM_Base_SetConfig+0x13c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d108      	bne.n	8009e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a35      	ldr	r2, [pc, #212]	@ (8009f44 <TIM_Base_SetConfig+0x12c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d01f      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e78:	d01b      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a32      	ldr	r2, [pc, #200]	@ (8009f48 <TIM_Base_SetConfig+0x130>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d017      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a31      	ldr	r2, [pc, #196]	@ (8009f4c <TIM_Base_SetConfig+0x134>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d013      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a30      	ldr	r2, [pc, #192]	@ (8009f50 <TIM_Base_SetConfig+0x138>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00f      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a2f      	ldr	r2, [pc, #188]	@ (8009f54 <TIM_Base_SetConfig+0x13c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d00b      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009f58 <TIM_Base_SetConfig+0x140>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d007      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8009f5c <TIM_Base_SetConfig+0x144>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <TIM_Base_SetConfig+0x9a>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a2c      	ldr	r2, [pc, #176]	@ (8009f60 <TIM_Base_SetConfig+0x148>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d108      	bne.n	8009ec4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a16      	ldr	r2, [pc, #88]	@ (8009f44 <TIM_Base_SetConfig+0x12c>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00f      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a18      	ldr	r2, [pc, #96]	@ (8009f54 <TIM_Base_SetConfig+0x13c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00b      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a17      	ldr	r2, [pc, #92]	@ (8009f58 <TIM_Base_SetConfig+0x140>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d007      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a16      	ldr	r2, [pc, #88]	@ (8009f5c <TIM_Base_SetConfig+0x144>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d003      	beq.n	8009f10 <TIM_Base_SetConfig+0xf8>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a15      	ldr	r2, [pc, #84]	@ (8009f60 <TIM_Base_SetConfig+0x148>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d103      	bne.n	8009f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d105      	bne.n	8009f36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	f023 0201 	bic.w	r2, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	611a      	str	r2, [r3, #16]
  }
}
 8009f36:	bf00      	nop
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	40010000 	.word	0x40010000
 8009f48:	40000400 	.word	0x40000400
 8009f4c:	40000800 	.word	0x40000800
 8009f50:	40000c00 	.word	0x40000c00
 8009f54:	40010400 	.word	0x40010400
 8009f58:	40014000 	.word	0x40014000
 8009f5c:	40014400 	.word	0x40014400
 8009f60:	40014800 	.word	0x40014800

08009f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <__NVIC_SetPriority>:
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	6039      	str	r1, [r7, #0]
 8009faa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db0a      	blt.n	8009fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	490c      	ldr	r1, [pc, #48]	@ (8009fec <__NVIC_SetPriority+0x4c>)
 8009fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fbe:	0112      	lsls	r2, r2, #4
 8009fc0:	b2d2      	uxtb	r2, r2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009fc8:	e00a      	b.n	8009fe0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	b2da      	uxtb	r2, r3
 8009fce:	4908      	ldr	r1, [pc, #32]	@ (8009ff0 <__NVIC_SetPriority+0x50>)
 8009fd0:	88fb      	ldrh	r3, [r7, #6]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	3b04      	subs	r3, #4
 8009fd8:	0112      	lsls	r2, r2, #4
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	440b      	add	r3, r1
 8009fde:	761a      	strb	r2, [r3, #24]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	e000e100 	.word	0xe000e100
 8009ff0:	e000ed00 	.word	0xe000ed00

08009ff4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ff8:	4b05      	ldr	r3, [pc, #20]	@ (800a010 <SysTick_Handler+0x1c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ffc:	f002 fafe 	bl	800c5fc <xTaskGetSchedulerState>
 800a000:	4603      	mov	r3, r0
 800a002:	2b01      	cmp	r3, #1
 800a004:	d001      	beq.n	800a00a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a006:	f003 f9f7 	bl	800d3f8 <xPortSysTickHandler>
  }
}
 800a00a:	bf00      	nop
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	e000e010 	.word	0xe000e010

0800a014 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a018:	2100      	movs	r1, #0
 800a01a:	f06f 0004 	mvn.w	r0, #4
 800a01e:	f7ff ffbf 	bl	8009fa0 <__NVIC_SetPriority>
#endif
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	603b      	str	r3, [r7, #0]
  return(result);
 800a034:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a03a:	f06f 0305 	mvn.w	r3, #5
 800a03e:	607b      	str	r3, [r7, #4]
 800a040:	e00c      	b.n	800a05c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a042:	4b0a      	ldr	r3, [pc, #40]	@ (800a06c <osKernelInitialize+0x44>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a04a:	4b08      	ldr	r3, [pc, #32]	@ (800a06c <osKernelInitialize+0x44>)
 800a04c:	2201      	movs	r2, #1
 800a04e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a050:	2300      	movs	r3, #0
 800a052:	607b      	str	r3, [r7, #4]
 800a054:	e002      	b.n	800a05c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a056:	f04f 33ff 	mov.w	r3, #4294967295
 800a05a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a05c:	687b      	ldr	r3, [r7, #4]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	24000e84 	.word	0x24000e84

0800a070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a076:	f3ef 8305 	mrs	r3, IPSR
 800a07a:	603b      	str	r3, [r7, #0]
  return(result);
 800a07c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a082:	f06f 0305 	mvn.w	r3, #5
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	e010      	b.n	800a0ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a08a:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b8 <osKernelStart+0x48>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d109      	bne.n	800a0a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a092:	f7ff ffbf 	bl	800a014 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <osKernelStart+0x48>)
 800a098:	2202      	movs	r2, #2
 800a09a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a09c:	f001 fe16 	bl	800bccc <vTaskStartScheduler>
      stat = osOK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	e002      	b.n	800a0ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0ac:	687b      	ldr	r3, [r7, #4]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	24000e84 	.word	0x24000e84

0800a0bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08e      	sub	sp, #56	@ 0x38
 800a0c0:	af04      	add	r7, sp, #16
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0cc:	f3ef 8305 	mrs	r3, IPSR
 800a0d0:	617b      	str	r3, [r7, #20]
  return(result);
 800a0d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d17e      	bne.n	800a1d6 <osThreadNew+0x11a>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d07b      	beq.n	800a1d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a0de:	2380      	movs	r3, #128	@ 0x80
 800a0e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0e2:	2318      	movs	r3, #24
 800a0e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d045      	beq.n	800a182 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <osThreadNew+0x48>
        name = attr->name;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <osThreadNew+0x6e>
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b38      	cmp	r3, #56	@ 0x38
 800a11c:	d805      	bhi.n	800a12a <osThreadNew+0x6e>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <osThreadNew+0x72>
        return (NULL);
 800a12a:	2300      	movs	r3, #0
 800a12c:	e054      	b.n	800a1d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	695b      	ldr	r3, [r3, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	089b      	lsrs	r3, r3, #2
 800a13c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00e      	beq.n	800a164 <osThreadNew+0xa8>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2bab      	cmp	r3, #171	@ 0xab
 800a14c:	d90a      	bls.n	800a164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a152:	2b00      	cmp	r3, #0
 800a154:	d006      	beq.n	800a164 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <osThreadNew+0xa8>
        mem = 1;
 800a15e:	2301      	movs	r3, #1
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e010      	b.n	800a186 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10c      	bne.n	800a186 <osThreadNew+0xca>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d108      	bne.n	800a186 <osThreadNew+0xca>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <osThreadNew+0xca>
          mem = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	e001      	b.n	800a186 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d110      	bne.n	800a1ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a194:	9202      	str	r2, [sp, #8]
 800a196:	9301      	str	r3, [sp, #4]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6a3a      	ldr	r2, [r7, #32]
 800a1a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f001 fb9c 	bl	800b8e0 <xTaskCreateStatic>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	e013      	b.n	800a1d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	f107 0310 	add.w	r3, r7, #16
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f001 fbea 	bl	800b9a0 <xTaskCreate>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d001      	beq.n	800a1d6 <osThreadNew+0x11a>
            hTask = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1d6:	693b      	ldr	r3, [r7, #16]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3728      	adds	r7, #40	@ 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e8:	f3ef 8305 	mrs	r3, IPSR
 800a1ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <osDelay+0x1c>
    stat = osErrorISR;
 800a1f4:	f06f 0305 	mvn.w	r3, #5
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e007      	b.n	800a20c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 fd2a 	bl	800bc60 <vTaskDelay>
    }
  }

  return (stat);
 800a20c:	68fb      	ldr	r3, [r7, #12]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a216:	b580      	push	{r7, lr}
 800a218:	b08a      	sub	sp, #40	@ 0x28
 800a21a:	af02      	add	r7, sp, #8
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a226:	f3ef 8305 	mrs	r3, IPSR
 800a22a:	613b      	str	r3, [r7, #16]
  return(result);
 800a22c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d175      	bne.n	800a31e <osSemaphoreNew+0x108>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d072      	beq.n	800a31e <osSemaphoreNew+0x108>
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d86e      	bhi.n	800a31e <osSemaphoreNew+0x108>
    mem = -1;
 800a240:	f04f 33ff 	mov.w	r3, #4294967295
 800a244:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d015      	beq.n	800a278 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <osSemaphoreNew+0x4c>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2b4f      	cmp	r3, #79	@ 0x4f
 800a25a:	d902      	bls.n	800a262 <osSemaphoreNew+0x4c>
        mem = 1;
 800a25c:	2301      	movs	r3, #1
 800a25e:	61bb      	str	r3, [r7, #24]
 800a260:	e00c      	b.n	800a27c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d108      	bne.n	800a27c <osSemaphoreNew+0x66>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <osSemaphoreNew+0x66>
          mem = 0;
 800a272:	2300      	movs	r3, #0
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	e001      	b.n	800a27c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d04c      	beq.n	800a31e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d128      	bne.n	800a2dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10a      	bne.n	800a2a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	689b      	ldr	r3, [r3, #8]
 800a294:	2203      	movs	r2, #3
 800a296:	9200      	str	r2, [sp, #0]
 800a298:	2200      	movs	r2, #0
 800a29a:	2100      	movs	r1, #0
 800a29c:	2001      	movs	r0, #1
 800a29e:	f000 fb5d 	bl	800a95c <xQueueGenericCreateStatic>
 800a2a2:	61f8      	str	r0, [r7, #28]
 800a2a4:	e005      	b.n	800a2b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	f000 fbd3 	bl	800aa56 <xQueueGenericCreate>
 800a2b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d022      	beq.n	800a2fe <osSemaphoreNew+0xe8>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01f      	beq.n	800a2fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a2be:	2300      	movs	r3, #0
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	69f8      	ldr	r0, [r7, #28]
 800a2c6:	f000 fc93 	bl	800abf0 <xQueueGenericSend>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d016      	beq.n	800a2fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a2d0:	69f8      	ldr	r0, [r7, #28]
 800a2d2:	f001 f931 	bl	800b538 <vQueueDelete>
            hSemaphore = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	e010      	b.n	800a2fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d108      	bne.n	800a2f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	68b9      	ldr	r1, [r7, #8]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fc11 	bl	800ab12 <xQueueCreateCountingSemaphoreStatic>
 800a2f0:	61f8      	str	r0, [r7, #28]
 800a2f2:	e004      	b.n	800a2fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f000 fc44 	bl	800ab84 <xQueueCreateCountingSemaphore>
 800a2fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	e001      	b.n	800a316 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a316:	6979      	ldr	r1, [r7, #20]
 800a318:	69f8      	ldr	r0, [r7, #28]
 800a31a:	f001 fa59 	bl	800b7d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a31e:	69fb      	ldr	r3, [r7, #28]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a336:	2300      	movs	r3, #0
 800a338:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d103      	bne.n	800a348 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a340:	f06f 0303 	mvn.w	r3, #3
 800a344:	617b      	str	r3, [r7, #20]
 800a346:	e039      	b.n	800a3bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a348:	f3ef 8305 	mrs	r3, IPSR
 800a34c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a34e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a350:	2b00      	cmp	r3, #0
 800a352:	d022      	beq.n	800a39a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a35a:	f06f 0303 	mvn.w	r3, #3
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	e02c      	b.n	800a3bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a362:	2300      	movs	r3, #0
 800a364:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a366:	f107 0308 	add.w	r3, r7, #8
 800a36a:	461a      	mov	r2, r3
 800a36c:	2100      	movs	r1, #0
 800a36e:	6938      	ldr	r0, [r7, #16]
 800a370:	f001 f860 	bl	800b434 <xQueueReceiveFromISR>
 800a374:	4603      	mov	r3, r0
 800a376:	2b01      	cmp	r3, #1
 800a378:	d003      	beq.n	800a382 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a37a:	f06f 0302 	mvn.w	r3, #2
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e01c      	b.n	800a3bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d019      	beq.n	800a3bc <osSemaphoreAcquire+0x94>
 800a388:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c8 <osSemaphoreAcquire+0xa0>)
 800a38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	e010      	b.n	800a3bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6938      	ldr	r0, [r7, #16]
 800a39e:	f000 ff39 	bl	800b214 <xQueueSemaphoreTake>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d009      	beq.n	800a3bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a3ae:	f06f 0301 	mvn.w	r3, #1
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	e002      	b.n	800a3bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a3b6:	f06f 0302 	mvn.w	r3, #2
 800a3ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a3bc:	697b      	ldr	r3, [r7, #20]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d103      	bne.n	800a3ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a3e2:	f06f 0303 	mvn.w	r3, #3
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e02c      	b.n	800a444 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3ea:	f3ef 8305 	mrs	r3, IPSR
 800a3ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01a      	beq.n	800a42c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a3fa:	f107 0308 	add.w	r3, r7, #8
 800a3fe:	4619      	mov	r1, r3
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f000 fd95 	bl	800af30 <xQueueGiveFromISR>
 800a406:	4603      	mov	r3, r0
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d003      	beq.n	800a414 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a40c:	f06f 0302 	mvn.w	r3, #2
 800a410:	617b      	str	r3, [r7, #20]
 800a412:	e017      	b.n	800a444 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d014      	beq.n	800a444 <osSemaphoreRelease+0x78>
 800a41a:	4b0d      	ldr	r3, [pc, #52]	@ (800a450 <osSemaphoreRelease+0x84>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	e00b      	b.n	800a444 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a42c:	2300      	movs	r3, #0
 800a42e:	2200      	movs	r2, #0
 800a430:	2100      	movs	r1, #0
 800a432:	6938      	ldr	r0, [r7, #16]
 800a434:	f000 fbdc 	bl	800abf0 <xQueueGenericSend>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d002      	beq.n	800a444 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a43e:	f06f 0302 	mvn.w	r3, #2
 800a442:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a444:	697b      	ldr	r3, [r7, #20]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	e000ed04 	.word	0xe000ed04

0800a454 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	@ 0x28
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a460:	2300      	movs	r3, #0
 800a462:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a464:	f3ef 8305 	mrs	r3, IPSR
 800a468:	613b      	str	r3, [r7, #16]
  return(result);
 800a46a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d15f      	bne.n	800a530 <osMessageQueueNew+0xdc>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d05c      	beq.n	800a530 <osMessageQueueNew+0xdc>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d059      	beq.n	800a530 <osMessageQueueNew+0xdc>
    mem = -1;
 800a47c:	f04f 33ff 	mov.w	r3, #4294967295
 800a480:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d029      	beq.n	800a4dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d012      	beq.n	800a4b6 <osMessageQueueNew+0x62>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	2b4f      	cmp	r3, #79	@ 0x4f
 800a496:	d90e      	bls.n	800a4b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00a      	beq.n	800a4b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695a      	ldr	r2, [r3, #20]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d302      	bcc.n	800a4b6 <osMessageQueueNew+0x62>
        mem = 1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	61bb      	str	r3, [r7, #24]
 800a4b4:	e014      	b.n	800a4e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d110      	bne.n	800a4e0 <osMessageQueueNew+0x8c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10c      	bne.n	800a4e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d108      	bne.n	800a4e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d104      	bne.n	800a4e0 <osMessageQueueNew+0x8c>
          mem = 0;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	61bb      	str	r3, [r7, #24]
 800a4da:	e001      	b.n	800a4e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d10b      	bne.n	800a4fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691a      	ldr	r2, [r3, #16]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2100      	movs	r1, #0
 800a4f0:	9100      	str	r1, [sp, #0]
 800a4f2:	68b9      	ldr	r1, [r7, #8]
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 fa31 	bl	800a95c <xQueueGenericCreateStatic>
 800a4fa:	61f8      	str	r0, [r7, #28]
 800a4fc:	e008      	b.n	800a510 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a504:	2200      	movs	r2, #0
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 faa4 	bl	800aa56 <xQueueGenericCreate>
 800a50e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00c      	beq.n	800a530 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	e001      	b.n	800a528 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a528:	6979      	ldr	r1, [r7, #20]
 800a52a:	69f8      	ldr	r0, [r7, #28]
 800a52c:	f001 f950 	bl	800b7d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a530:	69fb      	ldr	r3, [r7, #28]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a554:	f3ef 8305 	mrs	r3, IPSR
 800a558:	617b      	str	r3, [r7, #20]
  return(result);
 800a55a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d028      	beq.n	800a5b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <osMessageQueuePut+0x36>
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <osMessageQueuePut+0x36>
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d003      	beq.n	800a57a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a572:	f06f 0303 	mvn.w	r3, #3
 800a576:	61fb      	str	r3, [r7, #28]
 800a578:	e038      	b.n	800a5ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a57a:	2300      	movs	r3, #0
 800a57c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a57e:	f107 0210 	add.w	r2, r7, #16
 800a582:	2300      	movs	r3, #0
 800a584:	68b9      	ldr	r1, [r7, #8]
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f000 fc34 	bl	800adf4 <xQueueGenericSendFromISR>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d003      	beq.n	800a59a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a592:	f06f 0302 	mvn.w	r3, #2
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	e028      	b.n	800a5ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d025      	beq.n	800a5ec <osMessageQueuePut+0xb0>
 800a5a0:	4b15      	ldr	r3, [pc, #84]	@ (800a5f8 <osMessageQueuePut+0xbc>)
 800a5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	e01c      	b.n	800a5ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <osMessageQueuePut+0x82>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d103      	bne.n	800a5c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a5be:	f06f 0303 	mvn.w	r3, #3
 800a5c2:	61fb      	str	r3, [r7, #28]
 800a5c4:	e012      	b.n	800a5ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	68b9      	ldr	r1, [r7, #8]
 800a5cc:	69b8      	ldr	r0, [r7, #24]
 800a5ce:	f000 fb0f 	bl	800abf0 <xQueueGenericSend>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d009      	beq.n	800a5ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a5de:	f06f 0301 	mvn.w	r3, #1
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	e002      	b.n	800a5ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a5e6:	f06f 0302 	mvn.w	r3, #2
 800a5ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a5ec:	69fb      	ldr	r3, [r7, #28]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3720      	adds	r7, #32
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b088      	sub	sp, #32
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a612:	f3ef 8305 	mrs	r3, IPSR
 800a616:	617b      	str	r3, [r7, #20]
  return(result);
 800a618:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d028      	beq.n	800a670 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <osMessageQueueGet+0x34>
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <osMessageQueueGet+0x34>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a630:	f06f 0303 	mvn.w	r3, #3
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	e037      	b.n	800a6a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a638:	2300      	movs	r3, #0
 800a63a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a63c:	f107 0310 	add.w	r3, r7, #16
 800a640:	461a      	mov	r2, r3
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	69b8      	ldr	r0, [r7, #24]
 800a646:	f000 fef5 	bl	800b434 <xQueueReceiveFromISR>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d003      	beq.n	800a658 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a650:	f06f 0302 	mvn.w	r3, #2
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	e027      	b.n	800a6a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d024      	beq.n	800a6a8 <osMessageQueueGet+0xac>
 800a65e:	4b15      	ldr	r3, [pc, #84]	@ (800a6b4 <osMessageQueueGet+0xb8>)
 800a660:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	e01b      	b.n	800a6a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <osMessageQueueGet+0x80>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a67c:	f06f 0303 	mvn.w	r3, #3
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	e011      	b.n	800a6a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	69b8      	ldr	r0, [r7, #24]
 800a68a:	f000 fce1 	bl	800b050 <xQueueReceive>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b01      	cmp	r3, #1
 800a692:	d009      	beq.n	800a6a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a69a:	f06f 0301 	mvn.w	r3, #1
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e002      	b.n	800a6a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a6a2:	f06f 0302 	mvn.w	r3, #2
 800a6a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a6a8:	69fb      	ldr	r3, [r7, #28]
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3720      	adds	r7, #32
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	e000ed04 	.word	0xe000ed04

0800a6b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4a07      	ldr	r2, [pc, #28]	@ (800a6e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a6c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4a06      	ldr	r2, [pc, #24]	@ (800a6e8 <vApplicationGetIdleTaskMemory+0x30>)
 800a6ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2280      	movs	r2, #128	@ 0x80
 800a6d4:	601a      	str	r2, [r3, #0]
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	24000e88 	.word	0x24000e88
 800a6e8:	24000f34 	.word	0x24000f34

0800a6ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	4a07      	ldr	r2, [pc, #28]	@ (800a718 <vApplicationGetTimerTaskMemory+0x2c>)
 800a6fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4a06      	ldr	r2, [pc, #24]	@ (800a71c <vApplicationGetTimerTaskMemory+0x30>)
 800a702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a70a:	601a      	str	r2, [r3, #0]
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	24001134 	.word	0x24001134
 800a71c:	240011e0 	.word	0x240011e0

0800a720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f103 0208 	add.w	r2, r3, #8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f04f 32ff 	mov.w	r2, #4294967295
 800a738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f103 0208 	add.w	r2, r3, #8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f103 0208 	add.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a77a:	b480      	push	{r7}
 800a77c:	b085      	sub	sp, #20
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	689a      	ldr	r2, [r3, #8]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	601a      	str	r2, [r3, #0]
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b085      	sub	sp, #20
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d8:	d103      	bne.n	800a7e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	e00c      	b.n	800a7fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	e002      	b.n	800a7f0 <vListInsert+0x2e>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d2f6      	bcs.n	800a7ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	1c5a      	adds	r2, r3, #1
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	601a      	str	r2, [r3, #0]
}
 800a828:	bf00      	nop
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6892      	ldr	r2, [r2, #8]
 800a84a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	6852      	ldr	r2, [r2, #4]
 800a854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d103      	bne.n	800a868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	1e5a      	subs	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d10b      	bne.n	800a8b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a0:	f383 8811 	msr	BASEPRI, r3
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8ae:	bf00      	nop
 800a8b0:	bf00      	nop
 800a8b2:	e7fd      	b.n	800a8b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a8b4:	f002 fd10 	bl	800d2d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c0:	68f9      	ldr	r1, [r7, #12]
 800a8c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8c4:	fb01 f303 	mul.w	r3, r1, r3
 800a8c8:	441a      	add	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	68f9      	ldr	r1, [r7, #12]
 800a8e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a8ea:	fb01 f303 	mul.w	r3, r1, r3
 800a8ee:	441a      	add	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	22ff      	movs	r2, #255	@ 0xff
 800a8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	22ff      	movs	r2, #255	@ 0xff
 800a900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d114      	bne.n	800a934 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01a      	beq.n	800a948 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3310      	adds	r3, #16
 800a916:	4618      	mov	r0, r3
 800a918:	f001 fca8 	bl	800c26c <xTaskRemoveFromEventList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d012      	beq.n	800a948 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a922:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <xQueueGenericReset+0xd0>)
 800a924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	e009      	b.n	800a948 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3310      	adds	r3, #16
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fef1 	bl	800a720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3324      	adds	r3, #36	@ 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff feec 	bl	800a720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a948:	f002 fcf8 	bl	800d33c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a94c:	2301      	movs	r3, #1
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08e      	sub	sp, #56	@ 0x38
 800a960:	af02      	add	r7, sp, #8
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10b      	bne.n	800a9a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9a0:	bf00      	nop
 800a9a2:	bf00      	nop
 800a9a4:	e7fd      	b.n	800a9a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <xQueueGenericCreateStatic+0x56>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <xQueueGenericCreateStatic+0x5a>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <xQueueGenericCreateStatic+0x5c>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	623b      	str	r3, [r7, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	e7fd      	b.n	800a9d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <xQueueGenericCreateStatic+0x84>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <xQueueGenericCreateStatic+0x88>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <xQueueGenericCreateStatic+0x8a>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10b      	bne.n	800aa02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	61fb      	str	r3, [r7, #28]
}
 800a9fc:	bf00      	nop
 800a9fe:	bf00      	nop
 800aa00:	e7fd      	b.n	800a9fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa02:	2350      	movs	r3, #80	@ 0x50
 800aa04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	2b50      	cmp	r3, #80	@ 0x50
 800aa0a:	d00b      	beq.n	800aa24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	61bb      	str	r3, [r7, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aa2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00d      	beq.n	800aa4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	4613      	mov	r3, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 f840 	bl	800aacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3730      	adds	r7, #48	@ 0x30
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b08a      	sub	sp, #40	@ 0x28
 800aa5a:	af02      	add	r7, sp, #8
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	4613      	mov	r3, r2
 800aa62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10b      	bne.n	800aa82 <xQueueGenericCreate+0x2c>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	613b      	str	r3, [r7, #16]
}
 800aa7c:	bf00      	nop
 800aa7e:	bf00      	nop
 800aa80:	e7fd      	b.n	800aa7e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
 800aa8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	3350      	adds	r3, #80	@ 0x50
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 fd43 	bl	800d51c <pvPortMalloc>
 800aa96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d011      	beq.n	800aac2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	3350      	adds	r3, #80	@ 0x50
 800aaa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aab0:	79fa      	ldrb	r2, [r7, #7]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	4613      	mov	r3, r2
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f805 	bl	800aacc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aac2:	69bb      	ldr	r3, [r7, #24]
	}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3720      	adds	r7, #32
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d103      	bne.n	800aae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	69ba      	ldr	r2, [r7, #24]
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	e002      	b.n	800aaee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aafa:	2101      	movs	r1, #1
 800aafc:	69b8      	ldr	r0, [r7, #24]
 800aafe:	f7ff fec3 	bl	800a888 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	78fa      	ldrb	r2, [r7, #3]
 800ab06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b08a      	sub	sp, #40	@ 0x28
 800ab16:	af02      	add	r7, sp, #8
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10b      	bne.n	800ab3c <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d90b      	bls.n	800ab5c <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	617b      	str	r3, [r7, #20]
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	2100      	movs	r1, #0
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7ff fef8 	bl	800a95c <xQueueGenericCreateStatic>
 800ab6c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ab7a:	69fb      	ldr	r3, [r7, #28]
	}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3720      	adds	r7, #32
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	613b      	str	r3, [r7, #16]
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d90b      	bls.n	800abcc <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	60fb      	str	r3, [r7, #12]
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	e7fd      	b.n	800abc8 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800abcc:	2202      	movs	r2, #2
 800abce:	2100      	movs	r1, #0
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff ff40 	bl	800aa56 <xQueueGenericCreate>
 800abd6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800abe4:	697b      	ldr	r3, [r7, #20]
	}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08e      	sub	sp, #56	@ 0x38
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800abfe:	2300      	movs	r3, #0
 800ac00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10b      	bne.n	800ac24 <xQueueGenericSend+0x34>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	e7fd      	b.n	800ac20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d103      	bne.n	800ac32 <xQueueGenericSend+0x42>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <xQueueGenericSend+0x46>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueGenericSend+0x48>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10b      	bne.n	800ac54 <xQueueGenericSend+0x64>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	e7fd      	b.n	800ac50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b02      	cmp	r3, #2
 800ac58:	d103      	bne.n	800ac62 <xQueueGenericSend+0x72>
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d101      	bne.n	800ac66 <xQueueGenericSend+0x76>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <xQueueGenericSend+0x78>
 800ac66:	2300      	movs	r3, #0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10b      	bne.n	800ac84 <xQueueGenericSend+0x94>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	623b      	str	r3, [r7, #32]
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	e7fd      	b.n	800ac80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac84:	f001 fcba 	bl	800c5fc <xTaskGetSchedulerState>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d102      	bne.n	800ac94 <xQueueGenericSend+0xa4>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <xQueueGenericSend+0xa8>
 800ac94:	2301      	movs	r3, #1
 800ac96:	e000      	b.n	800ac9a <xQueueGenericSend+0xaa>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10b      	bne.n	800acb6 <xQueueGenericSend+0xc6>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	61fb      	str	r3, [r7, #28]
}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	e7fd      	b.n	800acb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acb6:	f002 fb0f 	bl	800d2d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d302      	bcc.n	800accc <xQueueGenericSend+0xdc>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d129      	bne.n	800ad20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	68b9      	ldr	r1, [r7, #8]
 800acd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acd2:	f000 fc6d 	bl	800b5b0 <prvCopyDataToQueue>
 800acd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d010      	beq.n	800ad02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	3324      	adds	r3, #36	@ 0x24
 800ace4:	4618      	mov	r0, r3
 800ace6:	f001 fac1 	bl	800c26c <xTaskRemoveFromEventList>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d013      	beq.n	800ad18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800acf0:	4b3f      	ldr	r3, [pc, #252]	@ (800adf0 <xQueueGenericSend+0x200>)
 800acf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	e00a      	b.n	800ad18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d007      	beq.n	800ad18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad08:	4b39      	ldr	r3, [pc, #228]	@ (800adf0 <xQueueGenericSend+0x200>)
 800ad0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad18:	f002 fb10 	bl	800d33c <vPortExitCritical>
				return pdPASS;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e063      	b.n	800ade8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d103      	bne.n	800ad2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad26:	f002 fb09 	bl	800d33c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e05c      	b.n	800ade8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d106      	bne.n	800ad42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 fafb 	bl	800c334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad42:	f002 fafb 	bl	800d33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad46:	f001 f837 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad4a:	f002 fac5 	bl	800d2d8 <vPortEnterCritical>
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad54:	b25b      	sxtb	r3, r3
 800ad56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad5a:	d103      	bne.n	800ad64 <xQueueGenericSend+0x174>
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad6a:	b25b      	sxtb	r3, r3
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d103      	bne.n	800ad7a <xQueueGenericSend+0x18a>
 800ad72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad7a:	f002 fadf 	bl	800d33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad7e:	1d3a      	adds	r2, r7, #4
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	4611      	mov	r1, r2
 800ad86:	4618      	mov	r0, r3
 800ad88:	f001 faea 	bl	800c360 <xTaskCheckForTimeOut>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d124      	bne.n	800addc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad94:	f000 fd04 	bl	800b7a0 <prvIsQueueFull>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	3310      	adds	r3, #16
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f001 fa0e 	bl	800c1c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800adac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adae:	f000 fc8f 	bl	800b6d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800adb2:	f001 f80f 	bl	800bdd4 <xTaskResumeAll>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f47f af7c 	bne.w	800acb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800adbe:	4b0c      	ldr	r3, [pc, #48]	@ (800adf0 <xQueueGenericSend+0x200>)
 800adc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	e772      	b.n	800acb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800add0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800add2:	f000 fc7d 	bl	800b6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800add6:	f000 fffd 	bl	800bdd4 <xTaskResumeAll>
 800adda:	e76c      	b.n	800acb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800addc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adde:	f000 fc77 	bl	800b6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ade2:	f000 fff7 	bl	800bdd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ade6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3738      	adds	r7, #56	@ 0x38
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b090      	sub	sp, #64	@ 0x40
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ae06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10b      	bne.n	800ae24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae1e:	bf00      	nop
 800ae20:	bf00      	nop
 800ae22:	e7fd      	b.n	800ae20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d103      	bne.n	800ae32 <xQueueGenericSendFromISR+0x3e>
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <xQueueGenericSendFromISR+0x42>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e000      	b.n	800ae38 <xQueueGenericSendFromISR+0x44>
 800ae36:	2300      	movs	r3, #0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10b      	bne.n	800ae54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	e7fd      	b.n	800ae50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d103      	bne.n	800ae62 <xQueueGenericSendFromISR+0x6e>
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d101      	bne.n	800ae66 <xQueueGenericSendFromISR+0x72>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <xQueueGenericSendFromISR+0x74>
 800ae66:	2300      	movs	r3, #0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10b      	bne.n	800ae84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	623b      	str	r3, [r7, #32]
}
 800ae7e:	bf00      	nop
 800ae80:	bf00      	nop
 800ae82:	e7fd      	b.n	800ae80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae84:	f002 fb08 	bl	800d498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae88:	f3ef 8211 	mrs	r2, BASEPRI
 800ae8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	61fa      	str	r2, [r7, #28]
 800ae9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aea0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aea2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d302      	bcc.n	800aeb6 <xQueueGenericSendFromISR+0xc2>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b02      	cmp	r3, #2
 800aeb4:	d12f      	bne.n	800af16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aebc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	68b9      	ldr	r1, [r7, #8]
 800aeca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aecc:	f000 fb70 	bl	800b5b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aed0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed8:	d112      	bne.n	800af00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d016      	beq.n	800af10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee4:	3324      	adds	r3, #36	@ 0x24
 800aee6:	4618      	mov	r0, r3
 800aee8:	f001 f9c0 	bl	800c26c <xTaskRemoveFromEventList>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00e      	beq.n	800af10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	e007      	b.n	800af10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af04:	3301      	adds	r3, #1
 800af06:	b2db      	uxtb	r3, r3
 800af08:	b25a      	sxtb	r2, r3
 800af0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af10:	2301      	movs	r3, #1
 800af12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800af14:	e001      	b.n	800af1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af16:	2300      	movs	r3, #0
 800af18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3740      	adds	r7, #64	@ 0x40
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	@ 0x38
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800af44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af48:	f383 8811 	msr	BASEPRI, r3
 800af4c:	f3bf 8f6f 	isb	sy
 800af50:	f3bf 8f4f 	dsb	sy
 800af54:	623b      	str	r3, [r7, #32]
}
 800af56:	bf00      	nop
 800af58:	bf00      	nop
 800af5a:	e7fd      	b.n	800af58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	61fb      	str	r3, [r7, #28]
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	e7fd      	b.n	800af78 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <xQueueGiveFromISR+0x5c>
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGiveFromISR+0x60>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGiveFromISR+0x62>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10b      	bne.n	800afae <xQueueGiveFromISR+0x7e>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	61bb      	str	r3, [r7, #24]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afae:	f002 fa73 	bl	800d498 <vPortValidateInterruptPriority>
	__asm volatile
 800afb2:	f3ef 8211 	mrs	r2, BASEPRI
 800afb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	617a      	str	r2, [r7, #20]
 800afc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800afca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afda:	429a      	cmp	r2, r3
 800afdc:	d22b      	bcs.n	800b036 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afea:	1c5a      	adds	r2, r3, #1
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff8:	d112      	bne.n	800b020 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d016      	beq.n	800b030 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	3324      	adds	r3, #36	@ 0x24
 800b006:	4618      	mov	r0, r3
 800b008:	f001 f930 	bl	800c26c <xTaskRemoveFromEventList>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00e      	beq.n	800b030 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2201      	movs	r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e007      	b.n	800b030 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b024:	3301      	adds	r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	b25a      	sxtb	r2, r3
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b030:	2301      	movs	r3, #1
 800b032:	637b      	str	r3, [r7, #52]	@ 0x34
 800b034:	e001      	b.n	800b03a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b036:	2300      	movs	r3, #0
 800b038:	637b      	str	r3, [r7, #52]	@ 0x34
 800b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f383 8811 	msr	BASEPRI, r3
}
 800b044:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3738      	adds	r7, #56	@ 0x38
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08c      	sub	sp, #48	@ 0x30
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b05c:	2300      	movs	r3, #0
 800b05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10b      	bne.n	800b082 <xQueueReceive+0x32>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	623b      	str	r3, [r7, #32]
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d103      	bne.n	800b090 <xQueueReceive+0x40>
 800b088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d101      	bne.n	800b094 <xQueueReceive+0x44>
 800b090:	2301      	movs	r3, #1
 800b092:	e000      	b.n	800b096 <xQueueReceive+0x46>
 800b094:	2300      	movs	r3, #0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10b      	bne.n	800b0b2 <xQueueReceive+0x62>
	__asm volatile
 800b09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	61fb      	str	r3, [r7, #28]
}
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
 800b0b0:	e7fd      	b.n	800b0ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b2:	f001 faa3 	bl	800c5fc <xTaskGetSchedulerState>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xQueueReceive+0x72>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <xQueueReceive+0x76>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <xQueueReceive+0x78>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10b      	bne.n	800b0e4 <xQueueReceive+0x94>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	61bb      	str	r3, [r7, #24]
}
 800b0de:	bf00      	nop
 800b0e0:	bf00      	nop
 800b0e2:	e7fd      	b.n	800b0e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e4:	f002 f8f8 	bl	800d2d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d01f      	beq.n	800b134 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0f4:	68b9      	ldr	r1, [r7, #8]
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f8:	f000 fac4 	bl	800b684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	1e5a      	subs	r2, r3, #1
 800b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b102:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00f      	beq.n	800b12c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10e:	3310      	adds	r3, #16
 800b110:	4618      	mov	r0, r3
 800b112:	f001 f8ab 	bl	800c26c <xTaskRemoveFromEventList>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d007      	beq.n	800b12c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b11c:	4b3c      	ldr	r3, [pc, #240]	@ (800b210 <xQueueReceive+0x1c0>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b12c:	f002 f906 	bl	800d33c <vPortExitCritical>
				return pdPASS;
 800b130:	2301      	movs	r3, #1
 800b132:	e069      	b.n	800b208 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b13a:	f002 f8ff 	bl	800d33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b13e:	2300      	movs	r3, #0
 800b140:	e062      	b.n	800b208 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b148:	f107 0310 	add.w	r3, r7, #16
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f8f1 	bl	800c334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b156:	f002 f8f1 	bl	800d33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b15a:	f000 fe2d 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15e:	f002 f8bb 	bl	800d2d8 <vPortEnterCritical>
 800b162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d103      	bne.n	800b178 <xQueueReceive+0x128>
 800b170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b184:	d103      	bne.n	800b18e <xQueueReceive+0x13e>
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b18e:	f002 f8d5 	bl	800d33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b192:	1d3a      	adds	r2, r7, #4
 800b194:	f107 0310 	add.w	r3, r7, #16
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f8e0 	bl	800c360 <xTaskCheckForTimeOut>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d123      	bne.n	800b1ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1a8:	f000 fae4 	bl	800b774 <prvIsQueueEmpty>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d017      	beq.n	800b1e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b4:	3324      	adds	r3, #36	@ 0x24
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f804 	bl	800c1c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c2:	f000 fa85 	bl	800b6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1c6:	f000 fe05 	bl	800bdd4 <xTaskResumeAll>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d189      	bne.n	800b0e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b210 <xQueueReceive+0x1c0>)
 800b1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d6:	601a      	str	r2, [r3, #0]
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	e780      	b.n	800b0e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1e4:	f000 fa74 	bl	800b6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1e8:	f000 fdf4 	bl	800bdd4 <xTaskResumeAll>
 800b1ec:	e77a      	b.n	800b0e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1f0:	f000 fa6e 	bl	800b6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1f4:	f000 fdee 	bl	800bdd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1fa:	f000 fabb 	bl	800b774 <prvIsQueueEmpty>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	f43f af6f 	beq.w	800b0e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b206:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3730      	adds	r7, #48	@ 0x30
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	@ 0x38
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b21e:	2300      	movs	r3, #0
 800b220:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b226:	2300      	movs	r3, #0
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10b      	bne.n	800b248 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	623b      	str	r3, [r7, #32]
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d00b      	beq.n	800b268 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	61fb      	str	r3, [r7, #28]
}
 800b262:	bf00      	nop
 800b264:	bf00      	nop
 800b266:	e7fd      	b.n	800b264 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b268:	f001 f9c8 	bl	800c5fc <xTaskGetSchedulerState>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <xQueueSemaphoreTake+0x64>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <xQueueSemaphoreTake+0x68>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <xQueueSemaphoreTake+0x6a>
 800b27c:	2300      	movs	r3, #0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d10b      	bne.n	800b29a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61bb      	str	r3, [r7, #24]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b29a:	f002 f81d 	bl	800d2d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d024      	beq.n	800b2f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	1e5a      	subs	r2, r3, #1
 800b2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d104      	bne.n	800b2c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b2ba:	f001 fb19 	bl	800c8f0 <pvTaskIncrementMutexHeldCount>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00f      	beq.n	800b2ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ce:	3310      	adds	r3, #16
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 ffcb 	bl	800c26c <xTaskRemoveFromEventList>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d007      	beq.n	800b2ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b2dc:	4b54      	ldr	r3, [pc, #336]	@ (800b430 <xQueueSemaphoreTake+0x21c>)
 800b2de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e2:	601a      	str	r2, [r3, #0]
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b2ec:	f002 f826 	bl	800d33c <vPortExitCritical>
				return pdPASS;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e098      	b.n	800b426 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d112      	bne.n	800b320 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	617b      	str	r3, [r7, #20]
}
 800b312:	bf00      	nop
 800b314:	bf00      	nop
 800b316:	e7fd      	b.n	800b314 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b318:	f002 f810 	bl	800d33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b31c:	2300      	movs	r3, #0
 800b31e:	e082      	b.n	800b426 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 f802 	bl	800c334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b334:	f002 f802 	bl	800d33c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b338:	f000 fd3e 	bl	800bdb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b33c:	f001 ffcc 	bl	800d2d8 <vPortEnterCritical>
 800b340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b346:	b25b      	sxtb	r3, r3
 800b348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34c:	d103      	bne.n	800b356 <xQueueSemaphoreTake+0x142>
 800b34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b350:	2200      	movs	r2, #0
 800b352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b35c:	b25b      	sxtb	r3, r3
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d103      	bne.n	800b36c <xQueueSemaphoreTake+0x158>
 800b364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b36c:	f001 ffe6 	bl	800d33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b370:	463a      	mov	r2, r7
 800b372:	f107 030c 	add.w	r3, r7, #12
 800b376:	4611      	mov	r1, r2
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fff1 	bl	800c360 <xTaskCheckForTimeOut>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d132      	bne.n	800b3ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b386:	f000 f9f5 	bl	800b774 <prvIsQueueEmpty>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d026      	beq.n	800b3de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b398:	f001 ff9e 	bl	800d2d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f001 f949 	bl	800c638 <xTaskPriorityInherit>
 800b3a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b3a8:	f001 ffc8 	bl	800d33c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ae:	3324      	adds	r3, #36	@ 0x24
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 ff07 	bl	800c1c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3bc:	f000 f988 	bl	800b6d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b3c0:	f000 fd08 	bl	800bdd4 <xTaskResumeAll>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f47f af67 	bne.w	800b29a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b3cc:	4b18      	ldr	r3, [pc, #96]	@ (800b430 <xQueueSemaphoreTake+0x21c>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	e75d      	b.n	800b29a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b3de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3e0:	f000 f976 	bl	800b6d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b3e4:	f000 fcf6 	bl	800bdd4 <xTaskResumeAll>
 800b3e8:	e757      	b.n	800b29a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b3ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3ec:	f000 f970 	bl	800b6d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b3f0:	f000 fcf0 	bl	800bdd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3f6:	f000 f9bd 	bl	800b774 <prvIsQueueEmpty>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f43f af4c 	beq.w	800b29a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00d      	beq.n	800b424 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b408:	f001 ff66 	bl	800d2d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b40c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b40e:	f000 f8b7 	bl	800b580 <prvGetDisinheritPriorityAfterTimeout>
 800b412:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b41a:	4618      	mov	r0, r3
 800b41c:	f001 f9e4 	bl	800c7e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b420:	f001 ff8c 	bl	800d33c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b426:	4618      	mov	r0, r3
 800b428:	3738      	adds	r7, #56	@ 0x38
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08e      	sub	sp, #56	@ 0x38
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10b      	bne.n	800b462 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	623b      	str	r3, [r7, #32]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d103      	bne.n	800b470 <xQueueReceiveFromISR+0x3c>
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <xQueueReceiveFromISR+0x40>
 800b470:	2301      	movs	r3, #1
 800b472:	e000      	b.n	800b476 <xQueueReceiveFromISR+0x42>
 800b474:	2300      	movs	r3, #0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	61fb      	str	r3, [r7, #28]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b492:	f002 f801 	bl	800d498 <vPortValidateInterruptPriority>
	__asm volatile
 800b496:	f3ef 8211 	mrs	r2, BASEPRI
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	f383 8811 	msr	BASEPRI, r3
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	61ba      	str	r2, [r7, #24]
 800b4ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b4ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d02f      	beq.n	800b51e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b4c8:	68b9      	ldr	r1, [r7, #8]
 800b4ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4cc:	f000 f8da 	bl	800b684 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	1e5a      	subs	r2, r3, #1
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b4d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4e0:	d112      	bne.n	800b508 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d016      	beq.n	800b518 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	3310      	adds	r3, #16
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 febc 	bl	800c26c <xTaskRemoveFromEventList>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00e      	beq.n	800b518 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00b      	beq.n	800b518 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	e007      	b.n	800b518 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b50c:	3301      	adds	r3, #1
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	b25a      	sxtb	r2, r3
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b518:	2301      	movs	r3, #1
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51c:	e001      	b.n	800b522 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b51e:	2300      	movs	r3, #0
 800b520:	637b      	str	r3, [r7, #52]	@ 0x34
 800b522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b524:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f383 8811 	msr	BASEPRI, r3
}
 800b52c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b530:	4618      	mov	r0, r3
 800b532:	3738      	adds	r7, #56	@ 0x38
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <vQueueDelete+0x2a>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	60bb      	str	r3, [r7, #8]
}
 800b55c:	bf00      	nop
 800b55e:	bf00      	nop
 800b560:	e7fd      	b.n	800b55e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 f95e 	bl	800b824 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d102      	bne.n	800b578 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f002 f8a0 	bl	800d6b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b578:	bf00      	nop
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d006      	beq.n	800b59e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e001      	b.n	800b5a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
	}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10d      	bne.n	800b5ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d14d      	bne.n	800b672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f001 f894 	bl	800c708 <xTaskPriorityDisinherit>
 800b5e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	609a      	str	r2, [r3, #8]
 800b5e8:	e043      	b.n	800b672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d119      	bne.n	800b624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6858      	ldr	r0, [r3, #4]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68b9      	ldr	r1, [r7, #8]
 800b5fc:	f015 fc49 	bl	8020e92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b608:	441a      	add	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	429a      	cmp	r2, r3
 800b618:	d32b      	bcc.n	800b672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	605a      	str	r2, [r3, #4]
 800b622:	e026      	b.n	800b672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	68d8      	ldr	r0, [r3, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62c:	461a      	mov	r2, r3
 800b62e:	68b9      	ldr	r1, [r7, #8]
 800b630:	f015 fc2f 	bl	8020e92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68da      	ldr	r2, [r3, #12]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63c:	425b      	negs	r3, r3
 800b63e:	441a      	add	r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	68da      	ldr	r2, [r3, #12]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d207      	bcs.n	800b660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b658:	425b      	negs	r3, r3
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d105      	bne.n	800b672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	3b01      	subs	r3, #1
 800b670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b67a:	697b      	ldr	r3, [r7, #20]
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d018      	beq.n	800b6c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b69e:	441a      	add	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d303      	bcc.n	800b6b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68d9      	ldr	r1, [r3, #12]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6838      	ldr	r0, [r7, #0]
 800b6c4:	f015 fbe5 	bl	8020e92 <memcpy>
	}
}
 800b6c8:	bf00      	nop
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b6d8:	f001 fdfe 	bl	800d2d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b6e4:	e011      	b.n	800b70a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d012      	beq.n	800b714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3324      	adds	r3, #36	@ 0x24
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fdba 	bl	800c26c <xTaskRemoveFromEventList>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b6fe:	f000 fe93 	bl	800c428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	3b01      	subs	r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	dce9      	bgt.n	800b6e6 <prvUnlockQueue+0x16>
 800b712:	e000      	b.n	800b716 <prvUnlockQueue+0x46>
					break;
 800b714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	22ff      	movs	r2, #255	@ 0xff
 800b71a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b71e:	f001 fe0d 	bl	800d33c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b722:	f001 fdd9 	bl	800d2d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b72c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b72e:	e011      	b.n	800b754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3310      	adds	r3, #16
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fd95 	bl	800c26c <xTaskRemoveFromEventList>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d001      	beq.n	800b74c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b748:	f000 fe6e 	bl	800c428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b74c:	7bbb      	ldrb	r3, [r7, #14]
 800b74e:	3b01      	subs	r3, #1
 800b750:	b2db      	uxtb	r3, r3
 800b752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dce9      	bgt.n	800b730 <prvUnlockQueue+0x60>
 800b75c:	e000      	b.n	800b760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b75e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	22ff      	movs	r2, #255	@ 0xff
 800b764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b768:	f001 fde8 	bl	800d33c <vPortExitCritical>
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b77c:	f001 fdac 	bl	800d2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b788:	2301      	movs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e001      	b.n	800b792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b792:	f001 fdd3 	bl	800d33c <vPortExitCritical>

	return xReturn;
 800b796:	68fb      	ldr	r3, [r7, #12]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7a8:	f001 fd96 	bl	800d2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d102      	bne.n	800b7be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e001      	b.n	800b7c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7c2:	f001 fdbb 	bl	800d33c <vPortExitCritical>

	return xReturn;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e014      	b.n	800b80a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b7e0:	4a0f      	ldr	r2, [pc, #60]	@ (800b820 <vQueueAddToRegistry+0x50>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b7ec:	490c      	ldr	r1, [pc, #48]	@ (800b820 <vQueueAddToRegistry+0x50>)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b7f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b820 <vQueueAddToRegistry+0x50>)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b802:	e006      	b.n	800b812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3301      	adds	r3, #1
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b07      	cmp	r3, #7
 800b80e:	d9e7      	bls.n	800b7e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b810:	bf00      	nop
 800b812:	bf00      	nop
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	240015e0 	.word	0x240015e0

0800b824 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b82c:	2300      	movs	r3, #0
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	e016      	b.n	800b860 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b832:	4a10      	ldr	r2, [pc, #64]	@ (800b874 <vQueueUnregisterQueue+0x50>)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	4413      	add	r3, r2
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d10b      	bne.n	800b85a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b842:	4a0c      	ldr	r2, [pc, #48]	@ (800b874 <vQueueUnregisterQueue+0x50>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2100      	movs	r1, #0
 800b848:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b84c:	4a09      	ldr	r2, [pc, #36]	@ (800b874 <vQueueUnregisterQueue+0x50>)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	4413      	add	r3, r2
 800b854:	2200      	movs	r2, #0
 800b856:	605a      	str	r2, [r3, #4]
				break;
 800b858:	e006      	b.n	800b868 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b07      	cmp	r3, #7
 800b864:	d9e5      	bls.n	800b832 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	240015e0 	.word	0x240015e0

0800b878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b888:	f001 fd26 	bl	800d2d8 <vPortEnterCritical>
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b892:	b25b      	sxtb	r3, r3
 800b894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b898:	d103      	bne.n	800b8a2 <vQueueWaitForMessageRestricted+0x2a>
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8a8:	b25b      	sxtb	r3, r3
 800b8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ae:	d103      	bne.n	800b8b8 <vQueueWaitForMessageRestricted+0x40>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8b8:	f001 fd40 	bl	800d33c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	3324      	adds	r3, #36	@ 0x24
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 fca1 	bl	800c214 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b8d2:	6978      	ldr	r0, [r7, #20]
 800b8d4:	f7ff fefc 	bl	800b6d0 <prvUnlockQueue>
	}
 800b8d8:	bf00      	nop
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08e      	sub	sp, #56	@ 0x38
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	623b      	str	r3, [r7, #32]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10b      	bne.n	800b92a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	61fb      	str	r3, [r7, #28]
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop
 800b928:	e7fd      	b.n	800b926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b92a:	23ac      	movs	r3, #172	@ 0xac
 800b92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2bac      	cmp	r3, #172	@ 0xac
 800b932:	d00b      	beq.n	800b94c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	61bb      	str	r3, [r7, #24]
}
 800b946:	bf00      	nop
 800b948:	bf00      	nop
 800b94a:	e7fd      	b.n	800b948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b94c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01e      	beq.n	800b992 <xTaskCreateStatic+0xb2>
 800b954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01b      	beq.n	800b992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	2202      	movs	r2, #2
 800b968:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b96c:	2300      	movs	r3, #0
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b972:	9302      	str	r3, [sp, #8]
 800b974:	f107 0314 	add.w	r3, r7, #20
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f851 	bl	800ba2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b98a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b98c:	f000 f8f8 	bl	800bb80 <prvAddNewTaskToReadyList>
 800b990:	e001      	b.n	800b996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b996:	697b      	ldr	r3, [r7, #20]
	}
 800b998:	4618      	mov	r0, r3
 800b99a:	3728      	adds	r7, #40	@ 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08c      	sub	sp, #48	@ 0x30
 800b9a4:	af04      	add	r7, sp, #16
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fdb1 	bl	800d51c <pvPortMalloc>
 800b9ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00e      	beq.n	800b9e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9c2:	20ac      	movs	r0, #172	@ 0xac
 800b9c4:	f001 fdaa 	bl	800d51c <pvPortMalloc>
 800b9c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9d6:	e005      	b.n	800b9e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f001 fe6d 	bl	800d6b8 <vPortFree>
 800b9de:	e001      	b.n	800b9e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d017      	beq.n	800ba1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9f2:	88fa      	ldrh	r2, [r7, #6]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9303      	str	r3, [sp, #12]
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	9302      	str	r3, [sp, #8]
 800b9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	68b9      	ldr	r1, [r7, #8]
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f000 f80f 	bl	800ba2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0e:	69f8      	ldr	r0, [r7, #28]
 800ba10:	f000 f8b6 	bl	800bb80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba14:	2301      	movs	r3, #1
 800ba16:	61bb      	str	r3, [r7, #24]
 800ba18:	e002      	b.n	800ba20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba20:	69bb      	ldr	r3, [r7, #24]
	}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	461a      	mov	r2, r3
 800ba44:	21a5      	movs	r1, #165	@ 0xa5
 800ba46:	f015 f8fe 	bl	8020c46 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ba54:	440b      	add	r3, r1
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f023 0307 	bic.w	r3, r3, #7
 800ba62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00b      	beq.n	800ba86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	617b      	str	r3, [r7, #20]
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	e7fd      	b.n	800ba82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01f      	beq.n	800bacc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	61fb      	str	r3, [r7, #28]
 800ba90:	e012      	b.n	800bab8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	4413      	add	r3, r2
 800ba98:	7819      	ldrb	r1, [r3, #0]
 800ba9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	4413      	add	r3, r2
 800baa0:	3334      	adds	r3, #52	@ 0x34
 800baa2:	460a      	mov	r2, r1
 800baa4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	4413      	add	r3, r2
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d006      	beq.n	800bac0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	3301      	adds	r3, #1
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b0f      	cmp	r3, #15
 800babc:	d9e9      	bls.n	800ba92 <prvInitialiseNewTask+0x66>
 800babe:	e000      	b.n	800bac2 <prvInitialiseNewTask+0x96>
			{
				break;
 800bac0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800baca:	e003      	b.n	800bad4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad6:	2b37      	cmp	r3, #55	@ 0x37
 800bad8:	d901      	bls.n	800bade <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bada:	2337      	movs	r3, #55	@ 0x37
 800badc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bae2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bae8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	2200      	movs	r2, #0
 800baee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf2:	3304      	adds	r3, #4
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fe33 	bl	800a760 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	3318      	adds	r3, #24
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fe2e 	bl	800a760 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb32:	3358      	adds	r3, #88	@ 0x58
 800bb34:	224c      	movs	r2, #76	@ 0x4c
 800bb36:	2100      	movs	r1, #0
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f015 f884 	bl	8020c46 <memset>
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb40:	4a0c      	ldr	r2, [pc, #48]	@ (800bb74 <prvInitialiseNewTask+0x148>)
 800bb42:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	4a0c      	ldr	r2, [pc, #48]	@ (800bb78 <prvInitialiseNewTask+0x14c>)
 800bb48:	661a      	str	r2, [r3, #96]	@ 0x60
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	4a0b      	ldr	r2, [pc, #44]	@ (800bb7c <prvInitialiseNewTask+0x150>)
 800bb4e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	69b8      	ldr	r0, [r7, #24]
 800bb56:	f001 fa8d 	bl	800d074 <pxPortInitialiseStack>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb6c:	bf00      	nop
 800bb6e:	3720      	adds	r7, #32
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	2401be7c 	.word	0x2401be7c
 800bb78:	2401bee4 	.word	0x2401bee4
 800bb7c:	2401bf4c 	.word	0x2401bf4c

0800bb80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb88:	f001 fba6 	bl	800d2d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb8c:	4b2d      	ldr	r3, [pc, #180]	@ (800bc44 <prvAddNewTaskToReadyList+0xc4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	4a2c      	ldr	r2, [pc, #176]	@ (800bc44 <prvAddNewTaskToReadyList+0xc4>)
 800bb94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb96:	4b2c      	ldr	r3, [pc, #176]	@ (800bc48 <prvAddNewTaskToReadyList+0xc8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d109      	bne.n	800bbb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bc48 <prvAddNewTaskToReadyList+0xc8>)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bba4:	4b27      	ldr	r3, [pc, #156]	@ (800bc44 <prvAddNewTaskToReadyList+0xc4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d110      	bne.n	800bbce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbac:	f000 fc62 	bl	800c474 <prvInitialiseTaskLists>
 800bbb0:	e00d      	b.n	800bbce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbb2:	4b26      	ldr	r3, [pc, #152]	@ (800bc4c <prvAddNewTaskToReadyList+0xcc>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d109      	bne.n	800bbce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbba:	4b23      	ldr	r3, [pc, #140]	@ (800bc48 <prvAddNewTaskToReadyList+0xc8>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d802      	bhi.n	800bbce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbc8:	4a1f      	ldr	r2, [pc, #124]	@ (800bc48 <prvAddNewTaskToReadyList+0xc8>)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbce:	4b20      	ldr	r3, [pc, #128]	@ (800bc50 <prvAddNewTaskToReadyList+0xd0>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	4a1e      	ldr	r2, [pc, #120]	@ (800bc50 <prvAddNewTaskToReadyList+0xd0>)
 800bbd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bbd8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc50 <prvAddNewTaskToReadyList+0xd0>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe4:	4b1b      	ldr	r3, [pc, #108]	@ (800bc54 <prvAddNewTaskToReadyList+0xd4>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d903      	bls.n	800bbf4 <prvAddNewTaskToReadyList+0x74>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf0:	4a18      	ldr	r2, [pc, #96]	@ (800bc54 <prvAddNewTaskToReadyList+0xd4>)
 800bbf2:	6013      	str	r3, [r2, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	4413      	add	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4a15      	ldr	r2, [pc, #84]	@ (800bc58 <prvAddNewTaskToReadyList+0xd8>)
 800bc02:	441a      	add	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3304      	adds	r3, #4
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fe fdb5 	bl	800a77a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc10:	f001 fb94 	bl	800d33c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc14:	4b0d      	ldr	r3, [pc, #52]	@ (800bc4c <prvAddNewTaskToReadyList+0xcc>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00e      	beq.n	800bc3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc48 <prvAddNewTaskToReadyList+0xc8>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d207      	bcs.n	800bc3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc5c <prvAddNewTaskToReadyList+0xdc>)
 800bc2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	24001af4 	.word	0x24001af4
 800bc48:	24001620 	.word	0x24001620
 800bc4c:	24001b00 	.word	0x24001b00
 800bc50:	24001b10 	.word	0x24001b10
 800bc54:	24001afc 	.word	0x24001afc
 800bc58:	24001624 	.word	0x24001624
 800bc5c:	e000ed04 	.word	0xe000ed04

0800bc60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d018      	beq.n	800bca4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc72:	4b14      	ldr	r3, [pc, #80]	@ (800bcc4 <vTaskDelay+0x64>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00b      	beq.n	800bc92 <vTaskDelay+0x32>
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	60bb      	str	r3, [r7, #8]
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	e7fd      	b.n	800bc8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc92:	f000 f891 	bl	800bdb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc96:	2100      	movs	r1, #0
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fe3d 	bl	800c918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc9e:	f000 f899 	bl	800bdd4 <xTaskResumeAll>
 800bca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d107      	bne.n	800bcba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bcaa:	4b07      	ldr	r3, [pc, #28]	@ (800bcc8 <vTaskDelay+0x68>)
 800bcac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcba:	bf00      	nop
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	24001b1c 	.word	0x24001b1c
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b08a      	sub	sp, #40	@ 0x28
 800bcd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcda:	463a      	mov	r2, r7
 800bcdc:	1d39      	adds	r1, r7, #4
 800bcde:	f107 0308 	add.w	r3, r7, #8
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe fce8 	bl	800a6b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	9202      	str	r2, [sp, #8]
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	460a      	mov	r2, r1
 800bcfa:	4927      	ldr	r1, [pc, #156]	@ (800bd98 <vTaskStartScheduler+0xcc>)
 800bcfc:	4827      	ldr	r0, [pc, #156]	@ (800bd9c <vTaskStartScheduler+0xd0>)
 800bcfe:	f7ff fdef 	bl	800b8e0 <xTaskCreateStatic>
 800bd02:	4603      	mov	r3, r0
 800bd04:	4a26      	ldr	r2, [pc, #152]	@ (800bda0 <vTaskStartScheduler+0xd4>)
 800bd06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bd08:	4b25      	ldr	r3, [pc, #148]	@ (800bda0 <vTaskStartScheduler+0xd4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bd10:	2301      	movs	r3, #1
 800bd12:	617b      	str	r3, [r7, #20]
 800bd14:	e001      	b.n	800bd1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d102      	bne.n	800bd26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bd20:	f000 fe4e 	bl	800c9c0 <xTimerCreateTimerTask>
 800bd24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d121      	bne.n	800bd70 <vTaskStartScheduler+0xa4>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	613b      	str	r3, [r7, #16]
}
 800bd3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd40:	4b18      	ldr	r3, [pc, #96]	@ (800bda4 <vTaskStartScheduler+0xd8>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	3358      	adds	r3, #88	@ 0x58
 800bd46:	4a18      	ldr	r2, [pc, #96]	@ (800bda8 <vTaskStartScheduler+0xdc>)
 800bd48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd4a:	4b18      	ldr	r3, [pc, #96]	@ (800bdac <vTaskStartScheduler+0xe0>)
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd52:	4b17      	ldr	r3, [pc, #92]	@ (800bdb0 <vTaskStartScheduler+0xe4>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd58:	4b16      	ldr	r3, [pc, #88]	@ (800bdb4 <vTaskStartScheduler+0xe8>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800bd5e:	4b11      	ldr	r3, [pc, #68]	@ (800bda4 <vTaskStartScheduler+0xd8>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2100      	movs	r1, #0
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f99d 	bl	800c0a4 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd6a:	f001 fa11 	bl	800d190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd6e:	e00f      	b.n	800bd90 <vTaskStartScheduler+0xc4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd76:	d10b      	bne.n	800bd90 <vTaskStartScheduler+0xc4>
	__asm volatile
 800bd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	60fb      	str	r3, [r7, #12]
}
 800bd8a:	bf00      	nop
 800bd8c:	bf00      	nop
 800bd8e:	e7fd      	b.n	800bd8c <vTaskStartScheduler+0xc0>
}
 800bd90:	bf00      	nop
 800bd92:	3718      	adds	r7, #24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	08021960 	.word	0x08021960
 800bd9c:	0800c441 	.word	0x0800c441
 800bda0:	24001b18 	.word	0x24001b18
 800bda4:	24001620 	.word	0x24001620
 800bda8:	240000bc 	.word	0x240000bc
 800bdac:	24001b14 	.word	0x24001b14
 800bdb0:	24001b00 	.word	0x24001b00
 800bdb4:	24001af8 	.word	0x24001af8

0800bdb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bdbc:	4b04      	ldr	r3, [pc, #16]	@ (800bdd0 <vTaskSuspendAll+0x18>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	4a03      	ldr	r2, [pc, #12]	@ (800bdd0 <vTaskSuspendAll+0x18>)
 800bdc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bdc6:	bf00      	nop
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	24001b1c 	.word	0x24001b1c

0800bdd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bde2:	4b42      	ldr	r3, [pc, #264]	@ (800beec <xTaskResumeAll+0x118>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <xTaskResumeAll+0x2e>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	603b      	str	r3, [r7, #0]
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	e7fd      	b.n	800bdfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800be02:	f001 fa69 	bl	800d2d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800be06:	4b39      	ldr	r3, [pc, #228]	@ (800beec <xTaskResumeAll+0x118>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	4a37      	ldr	r2, [pc, #220]	@ (800beec <xTaskResumeAll+0x118>)
 800be0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be10:	4b36      	ldr	r3, [pc, #216]	@ (800beec <xTaskResumeAll+0x118>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d162      	bne.n	800bede <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800be18:	4b35      	ldr	r3, [pc, #212]	@ (800bef0 <xTaskResumeAll+0x11c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d05e      	beq.n	800bede <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be20:	e02f      	b.n	800be82 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be22:	4b34      	ldr	r3, [pc, #208]	@ (800bef4 <xTaskResumeAll+0x120>)
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3318      	adds	r3, #24
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fe fd00 	bl	800a834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3304      	adds	r3, #4
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fcfb 	bl	800a834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be42:	4b2d      	ldr	r3, [pc, #180]	@ (800bef8 <xTaskResumeAll+0x124>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d903      	bls.n	800be52 <xTaskResumeAll+0x7e>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4e:	4a2a      	ldr	r2, [pc, #168]	@ (800bef8 <xTaskResumeAll+0x124>)
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4a27      	ldr	r2, [pc, #156]	@ (800befc <xTaskResumeAll+0x128>)
 800be60:	441a      	add	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	3304      	adds	r3, #4
 800be66:	4619      	mov	r1, r3
 800be68:	4610      	mov	r0, r2
 800be6a:	f7fe fc86 	bl	800a77a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be72:	4b23      	ldr	r3, [pc, #140]	@ (800bf00 <xTaskResumeAll+0x12c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be78:	429a      	cmp	r2, r3
 800be7a:	d302      	bcc.n	800be82 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800be7c:	4b21      	ldr	r3, [pc, #132]	@ (800bf04 <xTaskResumeAll+0x130>)
 800be7e:	2201      	movs	r2, #1
 800be80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be82:	4b1c      	ldr	r3, [pc, #112]	@ (800bef4 <xTaskResumeAll+0x120>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d1cb      	bne.n	800be22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be90:	f000 fb94 	bl	800c5bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be94:	4b1c      	ldr	r3, [pc, #112]	@ (800bf08 <xTaskResumeAll+0x134>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d010      	beq.n	800bec2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bea0:	f000 f846 	bl	800bf30 <xTaskIncrementTick>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800beaa:	4b16      	ldr	r3, [pc, #88]	@ (800bf04 <xTaskResumeAll+0x130>)
 800beac:	2201      	movs	r2, #1
 800beae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f1      	bne.n	800bea0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bebc:	4b12      	ldr	r3, [pc, #72]	@ (800bf08 <xTaskResumeAll+0x134>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bec2:	4b10      	ldr	r3, [pc, #64]	@ (800bf04 <xTaskResumeAll+0x130>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d009      	beq.n	800bede <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800beca:	2301      	movs	r3, #1
 800becc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bece:	4b0f      	ldr	r3, [pc, #60]	@ (800bf0c <xTaskResumeAll+0x138>)
 800bed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bede:	f001 fa2d 	bl	800d33c <vPortExitCritical>

	return xAlreadyYielded;
 800bee2:	68bb      	ldr	r3, [r7, #8]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	24001b1c 	.word	0x24001b1c
 800bef0:	24001af4 	.word	0x24001af4
 800bef4:	24001ab4 	.word	0x24001ab4
 800bef8:	24001afc 	.word	0x24001afc
 800befc:	24001624 	.word	0x24001624
 800bf00:	24001620 	.word	0x24001620
 800bf04:	24001b08 	.word	0x24001b08
 800bf08:	24001b04 	.word	0x24001b04
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bf16:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <xTaskGetTickCount+0x1c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bf1c:	687b      	ldr	r3, [r7, #4]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	24001af8 	.word	0x24001af8

0800bf30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf3a:	4b4f      	ldr	r3, [pc, #316]	@ (800c078 <xTaskIncrementTick+0x148>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	f040 8090 	bne.w	800c064 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf44:	4b4d      	ldr	r3, [pc, #308]	@ (800c07c <xTaskIncrementTick+0x14c>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf4c:	4a4b      	ldr	r2, [pc, #300]	@ (800c07c <xTaskIncrementTick+0x14c>)
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d121      	bne.n	800bf9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf58:	4b49      	ldr	r3, [pc, #292]	@ (800c080 <xTaskIncrementTick+0x150>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00b      	beq.n	800bf7a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	603b      	str	r3, [r7, #0]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <xTaskIncrementTick+0x46>
 800bf7a:	4b41      	ldr	r3, [pc, #260]	@ (800c080 <xTaskIncrementTick+0x150>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]
 800bf80:	4b40      	ldr	r3, [pc, #256]	@ (800c084 <xTaskIncrementTick+0x154>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a3e      	ldr	r2, [pc, #248]	@ (800c080 <xTaskIncrementTick+0x150>)
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	4a3e      	ldr	r2, [pc, #248]	@ (800c084 <xTaskIncrementTick+0x154>)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6013      	str	r3, [r2, #0]
 800bf8e:	4b3e      	ldr	r3, [pc, #248]	@ (800c088 <xTaskIncrementTick+0x158>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	4a3c      	ldr	r2, [pc, #240]	@ (800c088 <xTaskIncrementTick+0x158>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	f000 fb10 	bl	800c5bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf9c:	4b3b      	ldr	r3, [pc, #236]	@ (800c08c <xTaskIncrementTick+0x15c>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d349      	bcc.n	800c03a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfa6:	4b36      	ldr	r3, [pc, #216]	@ (800c080 <xTaskIncrementTick+0x150>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d104      	bne.n	800bfba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb0:	4b36      	ldr	r3, [pc, #216]	@ (800c08c <xTaskIncrementTick+0x15c>)
 800bfb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfb6:	601a      	str	r2, [r3, #0]
					break;
 800bfb8:	e03f      	b.n	800c03a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfba:	4b31      	ldr	r3, [pc, #196]	@ (800c080 <xTaskIncrementTick+0x150>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d203      	bcs.n	800bfda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfd2:	4a2e      	ldr	r2, [pc, #184]	@ (800c08c <xTaskIncrementTick+0x15c>)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfd8:	e02f      	b.n	800c03a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	3304      	adds	r3, #4
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fc28 	bl	800a834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d004      	beq.n	800bff6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	3318      	adds	r3, #24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe fc1f 	bl	800a834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bffa:	4b25      	ldr	r3, [pc, #148]	@ (800c090 <xTaskIncrementTick+0x160>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d903      	bls.n	800c00a <xTaskIncrementTick+0xda>
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c006:	4a22      	ldr	r2, [pc, #136]	@ (800c090 <xTaskIncrementTick+0x160>)
 800c008:	6013      	str	r3, [r2, #0]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c00e:	4613      	mov	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	4413      	add	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4a1f      	ldr	r2, [pc, #124]	@ (800c094 <xTaskIncrementTick+0x164>)
 800c018:	441a      	add	r2, r3
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	3304      	adds	r3, #4
 800c01e:	4619      	mov	r1, r3
 800c020:	4610      	mov	r0, r2
 800c022:	f7fe fbaa 	bl	800a77a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02a:	4b1b      	ldr	r3, [pc, #108]	@ (800c098 <xTaskIncrementTick+0x168>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c030:	429a      	cmp	r2, r3
 800c032:	d3b8      	bcc.n	800bfa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c034:	2301      	movs	r3, #1
 800c036:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c038:	e7b5      	b.n	800bfa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c03a:	4b17      	ldr	r3, [pc, #92]	@ (800c098 <xTaskIncrementTick+0x168>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c040:	4914      	ldr	r1, [pc, #80]	@ (800c094 <xTaskIncrementTick+0x164>)
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d901      	bls.n	800c056 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c052:	2301      	movs	r3, #1
 800c054:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c056:	4b11      	ldr	r3, [pc, #68]	@ (800c09c <xTaskIncrementTick+0x16c>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d007      	beq.n	800c06e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c05e:	2301      	movs	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	e004      	b.n	800c06e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c064:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a0 <xTaskIncrementTick+0x170>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	3301      	adds	r3, #1
 800c06a:	4a0d      	ldr	r2, [pc, #52]	@ (800c0a0 <xTaskIncrementTick+0x170>)
 800c06c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c06e:	697b      	ldr	r3, [r7, #20]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	24001b1c 	.word	0x24001b1c
 800c07c:	24001af8 	.word	0x24001af8
 800c080:	24001aac 	.word	0x24001aac
 800c084:	24001ab0 	.word	0x24001ab0
 800c088:	24001b0c 	.word	0x24001b0c
 800c08c:	24001b14 	.word	0x24001b14
 800c090:	24001afc 	.word	0x24001afc
 800c094:	24001624 	.word	0x24001624
 800c098:	24001620 	.word	0x24001620
 800c09c:	24001b08 	.word	0x24001b08
 800c0a0:	24001b04 	.word	0x24001b04

0800c0a4 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e4 <xTaskCallApplicationTaskHook+0x40>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	e001      	b.n	800c0c0 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d005      	beq.n	800c0d4 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0cc:	6838      	ldr	r0, [r7, #0]
 800c0ce:	4798      	blx	r3
 800c0d0:	60b8      	str	r0, [r7, #8]
 800c0d2:	e001      	b.n	800c0d8 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
	}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	24001620 	.word	0x24001620

0800c0e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c0ee:	4b30      	ldr	r3, [pc, #192]	@ (800c1b0 <vTaskSwitchContext+0xc8>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c0f6:	4b2f      	ldr	r3, [pc, #188]	@ (800c1b4 <vTaskSwitchContext+0xcc>)
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c0fc:	e053      	b.n	800c1a6 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800c0fe:	4b2d      	ldr	r3, [pc, #180]	@ (800c1b4 <vTaskSwitchContext+0xcc>)
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c104:	4b2c      	ldr	r3, [pc, #176]	@ (800c1b8 <vTaskSwitchContext+0xd0>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2101      	movs	r1, #1
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7ff ffca 	bl	800c0a4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c110:	4b2a      	ldr	r3, [pc, #168]	@ (800c1bc <vTaskSwitchContext+0xd4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	e011      	b.n	800c13c <vTaskSwitchContext+0x54>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <vTaskSwitchContext+0x4e>
	__asm volatile
 800c11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	607b      	str	r3, [r7, #4]
}
 800c130:	bf00      	nop
 800c132:	bf00      	nop
 800c134:	e7fd      	b.n	800c132 <vTaskSwitchContext+0x4a>
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3b01      	subs	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	4920      	ldr	r1, [pc, #128]	@ (800c1c0 <vTaskSwitchContext+0xd8>)
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0e3      	beq.n	800c118 <vTaskSwitchContext+0x30>
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4613      	mov	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4413      	add	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4a19      	ldr	r2, [pc, #100]	@ (800c1c0 <vTaskSwitchContext+0xd8>)
 800c15c:	4413      	add	r3, r2
 800c15e:	60bb      	str	r3, [r7, #8]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	605a      	str	r2, [r3, #4]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	685a      	ldr	r2, [r3, #4]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	3308      	adds	r3, #8
 800c172:	429a      	cmp	r2, r3
 800c174:	d104      	bne.n	800c180 <vTaskSwitchContext+0x98>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	605a      	str	r2, [r3, #4]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b8 <vTaskSwitchContext+0xd0>)
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	4a0c      	ldr	r2, [pc, #48]	@ (800c1bc <vTaskSwitchContext+0xd4>)
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c190:	4b09      	ldr	r3, [pc, #36]	@ (800c1b8 <vTaskSwitchContext+0xd0>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2100      	movs	r1, #0
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff84 	bl	800c0a4 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <vTaskSwitchContext+0xd0>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3358      	adds	r3, #88	@ 0x58
 800c1a2:	4a08      	ldr	r2, [pc, #32]	@ (800c1c4 <vTaskSwitchContext+0xdc>)
 800c1a4:	6013      	str	r3, [r2, #0]
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	24001b1c 	.word	0x24001b1c
 800c1b4:	24001b08 	.word	0x24001b08
 800c1b8:	24001620 	.word	0x24001620
 800c1bc:	24001afc 	.word	0x24001afc
 800c1c0:	24001624 	.word	0x24001624
 800c1c4:	240000bc 	.word	0x240000bc

0800c1c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10b      	bne.n	800c1f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	e7fd      	b.n	800c1ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1f0:	4b07      	ldr	r3, [pc, #28]	@ (800c210 <vTaskPlaceOnEventList+0x48>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3318      	adds	r3, #24
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7fe fae2 	bl	800a7c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1fe:	2101      	movs	r1, #1
 800c200:	6838      	ldr	r0, [r7, #0]
 800c202:	f000 fb89 	bl	800c918 <prvAddCurrentTaskToDelayedList>
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	24001620 	.word	0x24001620

0800c214 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10b      	bne.n	800c23e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22a:	f383 8811 	msr	BASEPRI, r3
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f3bf 8f4f 	dsb	sy
 800c236:	617b      	str	r3, [r7, #20]
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	e7fd      	b.n	800c23a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c23e:	4b0a      	ldr	r3, [pc, #40]	@ (800c268 <vTaskPlaceOnEventListRestricted+0x54>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	3318      	adds	r3, #24
 800c244:	4619      	mov	r1, r3
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7fe fa97 	bl	800a77a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c252:	f04f 33ff 	mov.w	r3, #4294967295
 800c256:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c258:	6879      	ldr	r1, [r7, #4]
 800c25a:	68b8      	ldr	r0, [r7, #8]
 800c25c:	f000 fb5c 	bl	800c918 <prvAddCurrentTaskToDelayedList>
	}
 800c260:	bf00      	nop
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	24001620 	.word	0x24001620

0800c26c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b086      	sub	sp, #24
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10b      	bne.n	800c29a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60fb      	str	r3, [r7, #12]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	3318      	adds	r3, #24
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fe fac8 	bl	800a834 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c31c <xTaskRemoveFromEventList+0xb0>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d11d      	bne.n	800c2e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe fabf 	bl	800a834 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ba:	4b19      	ldr	r3, [pc, #100]	@ (800c320 <xTaskRemoveFromEventList+0xb4>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d903      	bls.n	800c2ca <xTaskRemoveFromEventList+0x5e>
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c6:	4a16      	ldr	r2, [pc, #88]	@ (800c320 <xTaskRemoveFromEventList+0xb4>)
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4a13      	ldr	r2, [pc, #76]	@ (800c324 <xTaskRemoveFromEventList+0xb8>)
 800c2d8:	441a      	add	r2, r3
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	f7fe fa4a 	bl	800a77a <vListInsertEnd>
 800c2e6:	e005      	b.n	800c2f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	3318      	adds	r3, #24
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	480e      	ldr	r0, [pc, #56]	@ (800c328 <xTaskRemoveFromEventList+0xbc>)
 800c2f0:	f7fe fa43 	bl	800a77a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c32c <xTaskRemoveFromEventList+0xc0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d905      	bls.n	800c30e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c302:	2301      	movs	r3, #1
 800c304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c306:	4b0a      	ldr	r3, [pc, #40]	@ (800c330 <xTaskRemoveFromEventList+0xc4>)
 800c308:	2201      	movs	r2, #1
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	e001      	b.n	800c312 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c30e:	2300      	movs	r3, #0
 800c310:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c312:	697b      	ldr	r3, [r7, #20]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	24001b1c 	.word	0x24001b1c
 800c320:	24001afc 	.word	0x24001afc
 800c324:	24001624 	.word	0x24001624
 800c328:	24001ab4 	.word	0x24001ab4
 800c32c:	24001620 	.word	0x24001620
 800c330:	24001b08 	.word	0x24001b08

0800c334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c33c:	4b06      	ldr	r3, [pc, #24]	@ (800c358 <vTaskInternalSetTimeOutState+0x24>)
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c344:	4b05      	ldr	r3, [pc, #20]	@ (800c35c <vTaskInternalSetTimeOutState+0x28>)
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	605a      	str	r2, [r3, #4]
}
 800c34c:	bf00      	nop
 800c34e:	370c      	adds	r7, #12
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr
 800c358:	24001b0c 	.word	0x24001b0c
 800c35c:	24001af8 	.word	0x24001af8

0800c360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	613b      	str	r3, [r7, #16]
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10b      	bne.n	800c3a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	e7fd      	b.n	800c3a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c3a6:	f000 ff97 	bl	800d2d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c3aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c420 <xTaskCheckForTimeOut+0xc0>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c2:	d102      	bne.n	800c3ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	61fb      	str	r3, [r7, #28]
 800c3c8:	e023      	b.n	800c412 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b15      	ldr	r3, [pc, #84]	@ (800c424 <xTaskCheckForTimeOut+0xc4>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d007      	beq.n	800c3e6 <xTaskCheckForTimeOut+0x86>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	69ba      	ldr	r2, [r7, #24]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d302      	bcc.n	800c3e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	61fb      	str	r3, [r7, #28]
 800c3e4:	e015      	b.n	800c412 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d20b      	bcs.n	800c408 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f7ff ff99 	bl	800c334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c402:	2300      	movs	r3, #0
 800c404:	61fb      	str	r3, [r7, #28]
 800c406:	e004      	b.n	800c412 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2200      	movs	r2, #0
 800c40c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c40e:	2301      	movs	r3, #1
 800c410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c412:	f000 ff93 	bl	800d33c <vPortExitCritical>

	return xReturn;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	24001af8 	.word	0x24001af8
 800c424:	24001b0c 	.word	0x24001b0c

0800c428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c428:	b480      	push	{r7}
 800c42a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c42c:	4b03      	ldr	r3, [pc, #12]	@ (800c43c <vTaskMissedYield+0x14>)
 800c42e:	2201      	movs	r2, #1
 800c430:	601a      	str	r2, [r3, #0]
}
 800c432:	bf00      	nop
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	24001b08 	.word	0x24001b08

0800c440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c448:	f000 f854 	bl	800c4f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c44c:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <prvIdleTask+0x2c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d907      	bls.n	800c464 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c454:	4b06      	ldr	r3, [pc, #24]	@ (800c470 <prvIdleTask+0x30>)
 800c456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c464:	f7f3 ff94 	bl	8000390 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c468:	e7ee      	b.n	800c448 <prvIdleTask+0x8>
 800c46a:	bf00      	nop
 800c46c:	24001624 	.word	0x24001624
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c47a:	2300      	movs	r3, #0
 800c47c:	607b      	str	r3, [r7, #4]
 800c47e:	e00c      	b.n	800c49a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	4613      	mov	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4a12      	ldr	r2, [pc, #72]	@ (800c4d4 <prvInitialiseTaskLists+0x60>)
 800c48c:	4413      	add	r3, r2
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f946 	bl	800a720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3301      	adds	r3, #1
 800c498:	607b      	str	r3, [r7, #4]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b37      	cmp	r3, #55	@ 0x37
 800c49e:	d9ef      	bls.n	800c480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c4a0:	480d      	ldr	r0, [pc, #52]	@ (800c4d8 <prvInitialiseTaskLists+0x64>)
 800c4a2:	f7fe f93d 	bl	800a720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c4a6:	480d      	ldr	r0, [pc, #52]	@ (800c4dc <prvInitialiseTaskLists+0x68>)
 800c4a8:	f7fe f93a 	bl	800a720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c4ac:	480c      	ldr	r0, [pc, #48]	@ (800c4e0 <prvInitialiseTaskLists+0x6c>)
 800c4ae:	f7fe f937 	bl	800a720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c4b2:	480c      	ldr	r0, [pc, #48]	@ (800c4e4 <prvInitialiseTaskLists+0x70>)
 800c4b4:	f7fe f934 	bl	800a720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c4b8:	480b      	ldr	r0, [pc, #44]	@ (800c4e8 <prvInitialiseTaskLists+0x74>)
 800c4ba:	f7fe f931 	bl	800a720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c4be:	4b0b      	ldr	r3, [pc, #44]	@ (800c4ec <prvInitialiseTaskLists+0x78>)
 800c4c0:	4a05      	ldr	r2, [pc, #20]	@ (800c4d8 <prvInitialiseTaskLists+0x64>)
 800c4c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <prvInitialiseTaskLists+0x7c>)
 800c4c6:	4a05      	ldr	r2, [pc, #20]	@ (800c4dc <prvInitialiseTaskLists+0x68>)
 800c4c8:	601a      	str	r2, [r3, #0]
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	24001624 	.word	0x24001624
 800c4d8:	24001a84 	.word	0x24001a84
 800c4dc:	24001a98 	.word	0x24001a98
 800c4e0:	24001ab4 	.word	0x24001ab4
 800c4e4:	24001ac8 	.word	0x24001ac8
 800c4e8:	24001ae0 	.word	0x24001ae0
 800c4ec:	24001aac 	.word	0x24001aac
 800c4f0:	24001ab0 	.word	0x24001ab0

0800c4f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4fa:	e019      	b.n	800c530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c4fc:	f000 feec 	bl	800d2d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c500:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <prvCheckTasksWaitingTermination+0x50>)
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3304      	adds	r3, #4
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe f991 	bl	800a834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c512:	4b0d      	ldr	r3, [pc, #52]	@ (800c548 <prvCheckTasksWaitingTermination+0x54>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3b01      	subs	r3, #1
 800c518:	4a0b      	ldr	r2, [pc, #44]	@ (800c548 <prvCheckTasksWaitingTermination+0x54>)
 800c51a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c51c:	4b0b      	ldr	r3, [pc, #44]	@ (800c54c <prvCheckTasksWaitingTermination+0x58>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	3b01      	subs	r3, #1
 800c522:	4a0a      	ldr	r2, [pc, #40]	@ (800c54c <prvCheckTasksWaitingTermination+0x58>)
 800c524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c526:	f000 ff09 	bl	800d33c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f810 	bl	800c550 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c530:	4b06      	ldr	r3, [pc, #24]	@ (800c54c <prvCheckTasksWaitingTermination+0x58>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1e1      	bne.n	800c4fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	24001ac8 	.word	0x24001ac8
 800c548:	24001af4 	.word	0x24001af4
 800c54c:	24001adc 	.word	0x24001adc

0800c550 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3358      	adds	r3, #88	@ 0x58
 800c55c:	4618      	mov	r0, r3
 800c55e:	f014 fbbb 	bl	8020cd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d108      	bne.n	800c57e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c570:	4618      	mov	r0, r3
 800c572:	f001 f8a1 	bl	800d6b8 <vPortFree>
				vPortFree( pxTCB );
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f001 f89e 	bl	800d6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c57c:	e019      	b.n	800c5b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c584:	2b01      	cmp	r3, #1
 800c586:	d103      	bne.n	800c590 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f001 f895 	bl	800d6b8 <vPortFree>
	}
 800c58e:	e010      	b.n	800c5b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c596:	2b02      	cmp	r3, #2
 800c598:	d00b      	beq.n	800c5b2 <prvDeleteTCB+0x62>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	60fb      	str	r3, [r7, #12]
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <prvDeleteTCB+0x5e>
	}
 800c5b2:	bf00      	nop
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f4 <prvResetNextTaskUnblockTime+0x38>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d104      	bne.n	800c5d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c5d4:	e008      	b.n	800c5e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d6:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <prvResetNextTaskUnblockTime+0x38>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68db      	ldr	r3, [r3, #12]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	4a04      	ldr	r2, [pc, #16]	@ (800c5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800c5e6:	6013      	str	r3, [r2, #0]
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	24001aac 	.word	0x24001aac
 800c5f8:	24001b14 	.word	0x24001b14

0800c5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c602:	4b0b      	ldr	r3, [pc, #44]	@ (800c630 <xTaskGetSchedulerState+0x34>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c60a:	2301      	movs	r3, #1
 800c60c:	607b      	str	r3, [r7, #4]
 800c60e:	e008      	b.n	800c622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c610:	4b08      	ldr	r3, [pc, #32]	@ (800c634 <xTaskGetSchedulerState+0x38>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d102      	bne.n	800c61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c618:	2302      	movs	r3, #2
 800c61a:	607b      	str	r3, [r7, #4]
 800c61c:	e001      	b.n	800c622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c61e:	2300      	movs	r3, #0
 800c620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c622:	687b      	ldr	r3, [r7, #4]
	}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	24001b00 	.word	0x24001b00
 800c634:	24001b1c 	.word	0x24001b1c

0800c638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c644:	2300      	movs	r3, #0
 800c646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d051      	beq.n	800c6f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c652:	4b2a      	ldr	r3, [pc, #168]	@ (800c6fc <xTaskPriorityInherit+0xc4>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c658:	429a      	cmp	r2, r3
 800c65a:	d241      	bcs.n	800c6e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	2b00      	cmp	r3, #0
 800c662:	db06      	blt.n	800c672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c664:	4b25      	ldr	r3, [pc, #148]	@ (800c6fc <xTaskPriorityInherit+0xc4>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6959      	ldr	r1, [r3, #20]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c67a:	4613      	mov	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4a1f      	ldr	r2, [pc, #124]	@ (800c700 <xTaskPriorityInherit+0xc8>)
 800c684:	4413      	add	r3, r2
 800c686:	4299      	cmp	r1, r3
 800c688:	d122      	bne.n	800c6d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe f8d0 	bl	800a834 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c694:	4b19      	ldr	r3, [pc, #100]	@ (800c6fc <xTaskPriorityInherit+0xc4>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6a2:	4b18      	ldr	r3, [pc, #96]	@ (800c704 <xTaskPriorityInherit+0xcc>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d903      	bls.n	800c6b2 <xTaskPriorityInherit+0x7a>
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ae:	4a15      	ldr	r2, [pc, #84]	@ (800c704 <xTaskPriorityInherit+0xcc>)
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4a10      	ldr	r2, [pc, #64]	@ (800c700 <xTaskPriorityInherit+0xc8>)
 800c6c0:	441a      	add	r2, r3
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f7fe f856 	bl	800a77a <vListInsertEnd>
 800c6ce:	e004      	b.n	800c6da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c6fc <xTaskPriorityInherit+0xc4>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	e008      	b.n	800c6f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6e4:	4b05      	ldr	r3, [pc, #20]	@ (800c6fc <xTaskPriorityInherit+0xc4>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d201      	bcs.n	800c6f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
	}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3710      	adds	r7, #16
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	24001620 	.word	0x24001620
 800c700:	24001624 	.word	0x24001624
 800c704:	24001afc 	.word	0x24001afc

0800c708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d058      	beq.n	800c7d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c71e:	4b2f      	ldr	r3, [pc, #188]	@ (800c7dc <xTaskPriorityDisinherit+0xd4>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	429a      	cmp	r2, r3
 800c726:	d00b      	beq.n	800c740 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	60fb      	str	r3, [r7, #12]
}
 800c73a:	bf00      	nop
 800c73c:	bf00      	nop
 800c73e:	e7fd      	b.n	800c73c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	60bb      	str	r3, [r7, #8]
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	e7fd      	b.n	800c75c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c764:	1e5a      	subs	r2, r3, #1
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c772:	429a      	cmp	r2, r3
 800c774:	d02c      	beq.n	800c7d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d128      	bne.n	800c7d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	3304      	adds	r3, #4
 800c782:	4618      	mov	r0, r3
 800c784:	f7fe f856 	bl	800a834 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c794:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c7e0 <xTaskPriorityDisinherit+0xd8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d903      	bls.n	800c7b0 <xTaskPriorityDisinherit+0xa8>
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ac:	4a0c      	ldr	r2, [pc, #48]	@ (800c7e0 <xTaskPriorityDisinherit+0xd8>)
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	4413      	add	r3, r2
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	4a09      	ldr	r2, [pc, #36]	@ (800c7e4 <xTaskPriorityDisinherit+0xdc>)
 800c7be:	441a      	add	r2, r3
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	f7fd ffd7 	bl	800a77a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7d0:	697b      	ldr	r3, [r7, #20]
	}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	24001620 	.word	0x24001620
 800c7e0:	24001afc 	.word	0x24001afc
 800c7e4:	24001624 	.word	0x24001624

0800c7e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b088      	sub	sp, #32
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d06c      	beq.n	800c8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10b      	bne.n	800c820 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	60fb      	str	r3, [r7, #12]
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	e7fd      	b.n	800c81c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d902      	bls.n	800c830 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	61fb      	str	r3, [r7, #28]
 800c82e:	e002      	b.n	800c836 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c834:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83a:	69fa      	ldr	r2, [r7, #28]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d04c      	beq.n	800c8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c840:	69bb      	ldr	r3, [r7, #24]
 800c842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	429a      	cmp	r2, r3
 800c848:	d147      	bne.n	800c8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c84a:	4b26      	ldr	r3, [pc, #152]	@ (800c8e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69ba      	ldr	r2, [r7, #24]
 800c850:	429a      	cmp	r2, r3
 800c852:	d10b      	bne.n	800c86c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c858:	f383 8811 	msr	BASEPRI, r3
 800c85c:	f3bf 8f6f 	isb	sy
 800c860:	f3bf 8f4f 	dsb	sy
 800c864:	60bb      	str	r3, [r7, #8]
}
 800c866:	bf00      	nop
 800c868:	bf00      	nop
 800c86a:	e7fd      	b.n	800c868 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c870:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	69fa      	ldr	r2, [r7, #28]
 800c876:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	699b      	ldr	r3, [r3, #24]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	db04      	blt.n	800c88a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	6959      	ldr	r1, [r3, #20]
 800c88e:	693a      	ldr	r2, [r7, #16]
 800c890:	4613      	mov	r3, r2
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4a13      	ldr	r2, [pc, #76]	@ (800c8e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c89a:	4413      	add	r3, r2
 800c89c:	4299      	cmp	r1, r3
 800c89e:	d11c      	bne.n	800c8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	3304      	adds	r3, #4
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fd ffc5 	bl	800a834 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c8ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d903      	bls.n	800c8be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4a07      	ldr	r2, [pc, #28]	@ (800c8e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c8cc:	441a      	add	r2, r3
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7fd ff50 	bl	800a77a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8da:	bf00      	nop
 800c8dc:	3720      	adds	r7, #32
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	24001620 	.word	0x24001620
 800c8e8:	24001624 	.word	0x24001624
 800c8ec:	24001afc 	.word	0x24001afc

0800c8f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c8f0:	b480      	push	{r7}
 800c8f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c8f4:	4b07      	ldr	r3, [pc, #28]	@ (800c914 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c8fc:	4b05      	ldr	r3, [pc, #20]	@ (800c914 <pvTaskIncrementMutexHeldCount+0x24>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c902:	3201      	adds	r2, #1
 800c904:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c906:	4b03      	ldr	r3, [pc, #12]	@ (800c914 <pvTaskIncrementMutexHeldCount+0x24>)
 800c908:	681b      	ldr	r3, [r3, #0]
	}
 800c90a:	4618      	mov	r0, r3
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr
 800c914:	24001620 	.word	0x24001620

0800c918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c922:	4b21      	ldr	r3, [pc, #132]	@ (800c9a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c928:	4b20      	ldr	r3, [pc, #128]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	3304      	adds	r3, #4
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fd ff80 	bl	800a834 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93a:	d10a      	bne.n	800c952 <prvAddCurrentTaskToDelayedList+0x3a>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d007      	beq.n	800c952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c942:	4b1a      	ldr	r3, [pc, #104]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3304      	adds	r3, #4
 800c948:	4619      	mov	r1, r3
 800c94a:	4819      	ldr	r0, [pc, #100]	@ (800c9b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c94c:	f7fd ff15 	bl	800a77a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c950:	e026      	b.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4413      	add	r3, r2
 800c958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c95a:	4b14      	ldr	r3, [pc, #80]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	429a      	cmp	r2, r3
 800c968:	d209      	bcs.n	800c97e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c96a:	4b12      	ldr	r3, [pc, #72]	@ (800c9b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3304      	adds	r3, #4
 800c974:	4619      	mov	r1, r3
 800c976:	4610      	mov	r0, r2
 800c978:	f7fd ff23 	bl	800a7c2 <vListInsert>
}
 800c97c:	e010      	b.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c97e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <prvAddCurrentTaskToDelayedList+0x94>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4610      	mov	r0, r2
 800c98c:	f7fd ff19 	bl	800a7c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c990:	4b0a      	ldr	r3, [pc, #40]	@ (800c9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	429a      	cmp	r2, r3
 800c998:	d202      	bcs.n	800c9a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c99a:	4a08      	ldr	r2, [pc, #32]	@ (800c9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	6013      	str	r3, [r2, #0]
}
 800c9a0:	bf00      	nop
 800c9a2:	3710      	adds	r7, #16
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	24001af8 	.word	0x24001af8
 800c9ac:	24001620 	.word	0x24001620
 800c9b0:	24001ae0 	.word	0x24001ae0
 800c9b4:	24001ab0 	.word	0x24001ab0
 800c9b8:	24001aac 	.word	0x24001aac
 800c9bc:	24001b14 	.word	0x24001b14

0800c9c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08a      	sub	sp, #40	@ 0x28
 800c9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9ca:	f000 fb13 	bl	800cff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9ce:	4b1d      	ldr	r3, [pc, #116]	@ (800ca44 <xTimerCreateTimerTask+0x84>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d021      	beq.n	800ca1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9de:	1d3a      	adds	r2, r7, #4
 800c9e0:	f107 0108 	add.w	r1, r7, #8
 800c9e4:	f107 030c 	add.w	r3, r7, #12
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fd fe7f 	bl	800a6ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	9202      	str	r2, [sp, #8]
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	9300      	str	r3, [sp, #0]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	460a      	mov	r2, r1
 800ca00:	4911      	ldr	r1, [pc, #68]	@ (800ca48 <xTimerCreateTimerTask+0x88>)
 800ca02:	4812      	ldr	r0, [pc, #72]	@ (800ca4c <xTimerCreateTimerTask+0x8c>)
 800ca04:	f7fe ff6c 	bl	800b8e0 <xTaskCreateStatic>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	4a11      	ldr	r2, [pc, #68]	@ (800ca50 <xTimerCreateTimerTask+0x90>)
 800ca0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca0e:	4b10      	ldr	r3, [pc, #64]	@ (800ca50 <xTimerCreateTimerTask+0x90>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca16:	2301      	movs	r3, #1
 800ca18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10b      	bne.n	800ca38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca24:	f383 8811 	msr	BASEPRI, r3
 800ca28:	f3bf 8f6f 	isb	sy
 800ca2c:	f3bf 8f4f 	dsb	sy
 800ca30:	613b      	str	r3, [r7, #16]
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	e7fd      	b.n	800ca34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca38:	697b      	ldr	r3, [r7, #20]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	24001b50 	.word	0x24001b50
 800ca48:	08021968 	.word	0x08021968
 800ca4c:	0800cb8d 	.word	0x0800cb8d
 800ca50:	24001b54 	.word	0x24001b54

0800ca54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08a      	sub	sp, #40	@ 0x28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca62:	2300      	movs	r3, #0
 800ca64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d10b      	bne.n	800ca84 <xTimerGenericCommand+0x30>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	623b      	str	r3, [r7, #32]
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	e7fd      	b.n	800ca80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca84:	4b19      	ldr	r3, [pc, #100]	@ (800caec <xTimerGenericCommand+0x98>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d02a      	beq.n	800cae2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b05      	cmp	r3, #5
 800ca9c:	dc18      	bgt.n	800cad0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca9e:	f7ff fdad 	bl	800c5fc <xTaskGetSchedulerState>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b02      	cmp	r3, #2
 800caa6:	d109      	bne.n	800cabc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800caa8:	4b10      	ldr	r3, [pc, #64]	@ (800caec <xTimerGenericCommand+0x98>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	f107 0110 	add.w	r1, r7, #16
 800cab0:	2300      	movs	r3, #0
 800cab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cab4:	f7fe f89c 	bl	800abf0 <xQueueGenericSend>
 800cab8:	6278      	str	r0, [r7, #36]	@ 0x24
 800caba:	e012      	b.n	800cae2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cabc:	4b0b      	ldr	r3, [pc, #44]	@ (800caec <xTimerGenericCommand+0x98>)
 800cabe:	6818      	ldr	r0, [r3, #0]
 800cac0:	f107 0110 	add.w	r1, r7, #16
 800cac4:	2300      	movs	r3, #0
 800cac6:	2200      	movs	r2, #0
 800cac8:	f7fe f892 	bl	800abf0 <xQueueGenericSend>
 800cacc:	6278      	str	r0, [r7, #36]	@ 0x24
 800cace:	e008      	b.n	800cae2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cad0:	4b06      	ldr	r3, [pc, #24]	@ (800caec <xTimerGenericCommand+0x98>)
 800cad2:	6818      	ldr	r0, [r3, #0]
 800cad4:	f107 0110 	add.w	r1, r7, #16
 800cad8:	2300      	movs	r3, #0
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	f7fe f98a 	bl	800adf4 <xQueueGenericSendFromISR>
 800cae0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3728      	adds	r7, #40	@ 0x28
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	24001b50 	.word	0x24001b50

0800caf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b088      	sub	sp, #32
 800caf4:	af02      	add	r7, sp, #8
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cafa:	4b23      	ldr	r3, [pc, #140]	@ (800cb88 <prvProcessExpiredTimer+0x98>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	3304      	adds	r3, #4
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd fe93 	bl	800a834 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb14:	f003 0304 	and.w	r3, r3, #4
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d023      	beq.n	800cb64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	699a      	ldr	r2, [r3, #24]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	18d1      	adds	r1, r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	6978      	ldr	r0, [r7, #20]
 800cb2a:	f000 f8d5 	bl	800ccd8 <prvInsertTimerInActiveList>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d020      	beq.n	800cb76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb34:	2300      	movs	r3, #0
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	6978      	ldr	r0, [r7, #20]
 800cb40:	f7ff ff88 	bl	800ca54 <xTimerGenericCommand>
 800cb44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d114      	bne.n	800cb76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	60fb      	str	r3, [r7, #12]
}
 800cb5e:	bf00      	nop
 800cb60:	bf00      	nop
 800cb62:	e7fd      	b.n	800cb60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb6a:	f023 0301 	bic.w	r3, r3, #1
 800cb6e:	b2da      	uxtb	r2, r3
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	6978      	ldr	r0, [r7, #20]
 800cb7c:	4798      	blx	r3
}
 800cb7e:	bf00      	nop
 800cb80:	3718      	adds	r7, #24
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	24001b48 	.word	0x24001b48

0800cb8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb94:	f107 0308 	add.w	r3, r7, #8
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 f859 	bl	800cc50 <prvGetNextExpireTime>
 800cb9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4619      	mov	r1, r3
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f000 f805 	bl	800cbb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbaa:	f000 f8d7 	bl	800cd5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbae:	bf00      	nop
 800cbb0:	e7f0      	b.n	800cb94 <prvTimerTask+0x8>
	...

0800cbb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbbe:	f7ff f8fb 	bl	800bdb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbc2:	f107 0308 	add.w	r3, r7, #8
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 f866 	bl	800cc98 <prvSampleTimeNow>
 800cbcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d130      	bne.n	800cc36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10a      	bne.n	800cbf0 <prvProcessTimerOrBlockTask+0x3c>
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d806      	bhi.n	800cbf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbe2:	f7ff f8f7 	bl	800bdd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff ff81 	bl	800caf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbee:	e024      	b.n	800cc3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d008      	beq.n	800cc08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <prvProcessTimerOrBlockTask+0x90>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <prvProcessTimerOrBlockTask+0x50>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e000      	b.n	800cc06 <prvProcessTimerOrBlockTask+0x52>
 800cc04:	2300      	movs	r3, #0
 800cc06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc08:	4b0f      	ldr	r3, [pc, #60]	@ (800cc48 <prvProcessTimerOrBlockTask+0x94>)
 800cc0a:	6818      	ldr	r0, [r3, #0]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4619      	mov	r1, r3
 800cc16:	f7fe fe2f 	bl	800b878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc1a:	f7ff f8db 	bl	800bdd4 <xTaskResumeAll>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10a      	bne.n	800cc3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc24:	4b09      	ldr	r3, [pc, #36]	@ (800cc4c <prvProcessTimerOrBlockTask+0x98>)
 800cc26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	f3bf 8f6f 	isb	sy
}
 800cc34:	e001      	b.n	800cc3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc36:	f7ff f8cd 	bl	800bdd4 <xTaskResumeAll>
}
 800cc3a:	bf00      	nop
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	24001b4c 	.word	0x24001b4c
 800cc48:	24001b50 	.word	0x24001b50
 800cc4c:	e000ed04 	.word	0xe000ed04

0800cc50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc58:	4b0e      	ldr	r3, [pc, #56]	@ (800cc94 <prvGetNextExpireTime+0x44>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <prvGetNextExpireTime+0x16>
 800cc62:	2201      	movs	r2, #1
 800cc64:	e000      	b.n	800cc68 <prvGetNextExpireTime+0x18>
 800cc66:	2200      	movs	r2, #0
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d105      	bne.n	800cc80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc74:	4b07      	ldr	r3, [pc, #28]	@ (800cc94 <prvGetNextExpireTime+0x44>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	e001      	b.n	800cc84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc80:	2300      	movs	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc84:	68fb      	ldr	r3, [r7, #12]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	24001b48 	.word	0x24001b48

0800cc98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cca0:	f7ff f936 	bl	800bf10 <xTaskGetTickCount>
 800cca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cca6:	4b0b      	ldr	r3, [pc, #44]	@ (800ccd4 <prvSampleTimeNow+0x3c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d205      	bcs.n	800ccbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ccb0:	f000 f93a 	bl	800cf28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	e002      	b.n	800ccc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccc2:	4a04      	ldr	r2, [pc, #16]	@ (800ccd4 <prvSampleTimeNow+0x3c>)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	24001b58 	.word	0x24001b58

0800ccd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
 800cce4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cce6:	2300      	movs	r3, #0
 800cce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d812      	bhi.n	800cd24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	1ad2      	subs	r2, r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d302      	bcc.n	800cd12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	617b      	str	r3, [r7, #20]
 800cd10:	e01b      	b.n	800cd4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd12:	4b10      	ldr	r3, [pc, #64]	@ (800cd54 <prvInsertTimerInActiveList+0x7c>)
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3304      	adds	r3, #4
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	f7fd fd50 	bl	800a7c2 <vListInsert>
 800cd22:	e012      	b.n	800cd4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d206      	bcs.n	800cd3a <prvInsertTimerInActiveList+0x62>
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d302      	bcc.n	800cd3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd34:	2301      	movs	r3, #1
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	e007      	b.n	800cd4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd3a:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <prvInsertTimerInActiveList+0x80>)
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3304      	adds	r3, #4
 800cd42:	4619      	mov	r1, r3
 800cd44:	4610      	mov	r0, r2
 800cd46:	f7fd fd3c 	bl	800a7c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd4a:	697b      	ldr	r3, [r7, #20]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3718      	adds	r7, #24
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	24001b4c 	.word	0x24001b4c
 800cd58:	24001b48 	.word	0x24001b48

0800cd5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	@ 0x38
 800cd60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd62:	e0ce      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da19      	bge.n	800cd9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd6a:	1d3b      	adds	r3, r7, #4
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10b      	bne.n	800cd8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	61fb      	str	r3, [r7, #28]
}
 800cd88:	bf00      	nop
 800cd8a:	bf00      	nop
 800cd8c:	e7fd      	b.n	800cd8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd94:	6850      	ldr	r0, [r2, #4]
 800cd96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd98:	6892      	ldr	r2, [r2, #8]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f2c0 80ae 	blt.w	800cf02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d004      	beq.n	800cdbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fd fd3c 	bl	800a834 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdbc:	463b      	mov	r3, r7
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff ff6a 	bl	800cc98 <prvSampleTimeNow>
 800cdc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b09      	cmp	r3, #9
 800cdca:	f200 8097 	bhi.w	800cefc <prvProcessReceivedCommands+0x1a0>
 800cdce:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd4 <prvProcessReceivedCommands+0x78>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800cdfd 	.word	0x0800cdfd
 800cdd8:	0800cdfd 	.word	0x0800cdfd
 800cddc:	0800cdfd 	.word	0x0800cdfd
 800cde0:	0800ce73 	.word	0x0800ce73
 800cde4:	0800ce87 	.word	0x0800ce87
 800cde8:	0800ced3 	.word	0x0800ced3
 800cdec:	0800cdfd 	.word	0x0800cdfd
 800cdf0:	0800cdfd 	.word	0x0800cdfd
 800cdf4:	0800ce73 	.word	0x0800ce73
 800cdf8:	0800ce87 	.word	0x0800ce87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce02:	f043 0301 	orr.w	r3, r3, #1
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	18d1      	adds	r1, r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce1c:	f7ff ff5c 	bl	800ccd8 <prvInsertTimerInActiveList>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d06c      	beq.n	800cf00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce34:	f003 0304 	and.w	r3, r3, #4
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d061      	beq.n	800cf00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce40:	699b      	ldr	r3, [r3, #24]
 800ce42:	441a      	add	r2, r3
 800ce44:	2300      	movs	r3, #0
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	2300      	movs	r3, #0
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4e:	f7ff fe01 	bl	800ca54 <xTimerGenericCommand>
 800ce52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d152      	bne.n	800cf00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	61bb      	str	r3, [r7, #24]
}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	e7fd      	b.n	800ce6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce78:	f023 0301 	bic.w	r3, r3, #1
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce84:	e03d      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10b      	bne.n	800cebe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	617b      	str	r3, [r7, #20]
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	e7fd      	b.n	800ceba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	699a      	ldr	r2, [r3, #24]
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	18d1      	adds	r1, r2, r3
 800cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cecc:	f7ff ff04 	bl	800ccd8 <prvInsertTimerInActiveList>
					break;
 800ced0:	e017      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ced2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d103      	bne.n	800cee8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cee2:	f000 fbe9 	bl	800d6b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cee6:	e00c      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceee:	f023 0301 	bic.w	r3, r3, #1
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cefa:	e002      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cefc:	bf00      	nop
 800cefe:	e000      	b.n	800cf02 <prvProcessReceivedCommands+0x1a6>
					break;
 800cf00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf02:	4b08      	ldr	r3, [pc, #32]	@ (800cf24 <prvProcessReceivedCommands+0x1c8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	1d39      	adds	r1, r7, #4
 800cf08:	2200      	movs	r2, #0
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7fe f8a0 	bl	800b050 <xQueueReceive>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f47f af26 	bne.w	800cd64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	3730      	adds	r7, #48	@ 0x30
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	24001b50 	.word	0x24001b50

0800cf28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf2e:	e049      	b.n	800cfc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf30:	4b2e      	ldr	r3, [pc, #184]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf3a:	4b2c      	ldr	r3, [pc, #176]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	3304      	adds	r3, #4
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fd fc73 	bl	800a834 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d02f      	beq.n	800cfc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf6e:	68ba      	ldr	r2, [r7, #8]
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d90e      	bls.n	800cf94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf82:	4b1a      	ldr	r3, [pc, #104]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	f7fd fc18 	bl	800a7c2 <vListInsert>
 800cf92:	e017      	b.n	800cfc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf94:	2300      	movs	r3, #0
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	2300      	movs	r3, #0
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f7ff fd58 	bl	800ca54 <xTimerGenericCommand>
 800cfa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10b      	bne.n	800cfc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	603b      	str	r3, [r7, #0]
}
 800cfbe:	bf00      	nop
 800cfc0:	bf00      	nop
 800cfc2:	e7fd      	b.n	800cfc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfc4:	4b09      	ldr	r3, [pc, #36]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1b0      	bne.n	800cf30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfce:	4b07      	ldr	r3, [pc, #28]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfd4:	4b06      	ldr	r3, [pc, #24]	@ (800cff0 <prvSwitchTimerLists+0xc8>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a04      	ldr	r2, [pc, #16]	@ (800cfec <prvSwitchTimerLists+0xc4>)
 800cfda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfdc:	4a04      	ldr	r2, [pc, #16]	@ (800cff0 <prvSwitchTimerLists+0xc8>)
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	6013      	str	r3, [r2, #0]
}
 800cfe2:	bf00      	nop
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	24001b48 	.word	0x24001b48
 800cff0:	24001b4c 	.word	0x24001b4c

0800cff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cffa:	f000 f96d 	bl	800d2d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cffe:	4b15      	ldr	r3, [pc, #84]	@ (800d054 <prvCheckForValidListAndQueue+0x60>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d120      	bne.n	800d048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d006:	4814      	ldr	r0, [pc, #80]	@ (800d058 <prvCheckForValidListAndQueue+0x64>)
 800d008:	f7fd fb8a 	bl	800a720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d00c:	4813      	ldr	r0, [pc, #76]	@ (800d05c <prvCheckForValidListAndQueue+0x68>)
 800d00e:	f7fd fb87 	bl	800a720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d012:	4b13      	ldr	r3, [pc, #76]	@ (800d060 <prvCheckForValidListAndQueue+0x6c>)
 800d014:	4a10      	ldr	r2, [pc, #64]	@ (800d058 <prvCheckForValidListAndQueue+0x64>)
 800d016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d018:	4b12      	ldr	r3, [pc, #72]	@ (800d064 <prvCheckForValidListAndQueue+0x70>)
 800d01a:	4a10      	ldr	r2, [pc, #64]	@ (800d05c <prvCheckForValidListAndQueue+0x68>)
 800d01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d01e:	2300      	movs	r3, #0
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	4b11      	ldr	r3, [pc, #68]	@ (800d068 <prvCheckForValidListAndQueue+0x74>)
 800d024:	4a11      	ldr	r2, [pc, #68]	@ (800d06c <prvCheckForValidListAndQueue+0x78>)
 800d026:	2110      	movs	r1, #16
 800d028:	200a      	movs	r0, #10
 800d02a:	f7fd fc97 	bl	800a95c <xQueueGenericCreateStatic>
 800d02e:	4603      	mov	r3, r0
 800d030:	4a08      	ldr	r2, [pc, #32]	@ (800d054 <prvCheckForValidListAndQueue+0x60>)
 800d032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d034:	4b07      	ldr	r3, [pc, #28]	@ (800d054 <prvCheckForValidListAndQueue+0x60>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d005      	beq.n	800d048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d03c:	4b05      	ldr	r3, [pc, #20]	@ (800d054 <prvCheckForValidListAndQueue+0x60>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	490b      	ldr	r1, [pc, #44]	@ (800d070 <prvCheckForValidListAndQueue+0x7c>)
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fbc4 	bl	800b7d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d048:	f000 f978 	bl	800d33c <vPortExitCritical>
}
 800d04c:	bf00      	nop
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	24001b50 	.word	0x24001b50
 800d058:	24001b20 	.word	0x24001b20
 800d05c:	24001b34 	.word	0x24001b34
 800d060:	24001b48 	.word	0x24001b48
 800d064:	24001b4c 	.word	0x24001b4c
 800d068:	24001bfc 	.word	0x24001bfc
 800d06c:	24001b5c 	.word	0x24001b5c
 800d070:	08021970 	.word	0x08021970

0800d074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d074:	b480      	push	{r7}
 800d076:	b085      	sub	sp, #20
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3b04      	subs	r3, #4
 800d084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3b04      	subs	r3, #4
 800d092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f023 0201 	bic.w	r2, r3, #1
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3b04      	subs	r3, #4
 800d0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0a4:	4a0c      	ldr	r2, [pc, #48]	@ (800d0d8 <pxPortInitialiseStack+0x64>)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3b14      	subs	r3, #20
 800d0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3b04      	subs	r3, #4
 800d0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f06f 0202 	mvn.w	r2, #2
 800d0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3b20      	subs	r3, #32
 800d0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	0800d0dd 	.word	0x0800d0dd

0800d0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0e6:	4b13      	ldr	r3, [pc, #76]	@ (800d134 <prvTaskExitError+0x58>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d00b      	beq.n	800d108 <prvTaskExitError+0x2c>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <prvTaskExitError+0x28>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	60bb      	str	r3, [r7, #8]
}
 800d11a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d11c:	bf00      	nop
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d0fc      	beq.n	800d11e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	24000044 	.word	0x24000044
	...

0800d140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d140:	4b07      	ldr	r3, [pc, #28]	@ (800d160 <pxCurrentTCBConst2>)
 800d142:	6819      	ldr	r1, [r3, #0]
 800d144:	6808      	ldr	r0, [r1, #0]
 800d146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14a:	f380 8809 	msr	PSP, r0
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f04f 0000 	mov.w	r0, #0
 800d156:	f380 8811 	msr	BASEPRI, r0
 800d15a:	4770      	bx	lr
 800d15c:	f3af 8000 	nop.w

0800d160 <pxCurrentTCBConst2>:
 800d160:	24001620 	.word	0x24001620
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop

0800d168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d168:	4808      	ldr	r0, [pc, #32]	@ (800d18c <prvPortStartFirstTask+0x24>)
 800d16a:	6800      	ldr	r0, [r0, #0]
 800d16c:	6800      	ldr	r0, [r0, #0]
 800d16e:	f380 8808 	msr	MSP, r0
 800d172:	f04f 0000 	mov.w	r0, #0
 800d176:	f380 8814 	msr	CONTROL, r0
 800d17a:	b662      	cpsie	i
 800d17c:	b661      	cpsie	f
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	df00      	svc	0
 800d188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d18a:	bf00      	nop
 800d18c:	e000ed08 	.word	0xe000ed08

0800d190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d196:	4b47      	ldr	r3, [pc, #284]	@ (800d2b4 <xPortStartScheduler+0x124>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a47      	ldr	r2, [pc, #284]	@ (800d2b8 <xPortStartScheduler+0x128>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d10b      	bne.n	800d1b8 <xPortStartScheduler+0x28>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	613b      	str	r3, [r7, #16]
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	e7fd      	b.n	800d1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b4 <xPortStartScheduler+0x124>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a3f      	ldr	r2, [pc, #252]	@ (800d2bc <xPortStartScheduler+0x12c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d10b      	bne.n	800d1da <xPortStartScheduler+0x4a>
	__asm volatile
 800d1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	60fb      	str	r3, [r7, #12]
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop
 800d1d8:	e7fd      	b.n	800d1d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1da:	4b39      	ldr	r3, [pc, #228]	@ (800d2c0 <xPortStartScheduler+0x130>)
 800d1dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	22ff      	movs	r2, #255	@ 0xff
 800d1ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1f4:	78fb      	ldrb	r3, [r7, #3]
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	4b31      	ldr	r3, [pc, #196]	@ (800d2c4 <xPortStartScheduler+0x134>)
 800d200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d202:	4b31      	ldr	r3, [pc, #196]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d204:	2207      	movs	r2, #7
 800d206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d208:	e009      	b.n	800d21e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d20a:	4b2f      	ldr	r3, [pc, #188]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	3b01      	subs	r3, #1
 800d210:	4a2d      	ldr	r2, [pc, #180]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d214:	78fb      	ldrb	r3, [r7, #3]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d21e:	78fb      	ldrb	r3, [r7, #3]
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d226:	2b80      	cmp	r3, #128	@ 0x80
 800d228:	d0ef      	beq.n	800d20a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d22a:	4b27      	ldr	r3, [pc, #156]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f1c3 0307 	rsb	r3, r3, #7
 800d232:	2b04      	cmp	r3, #4
 800d234:	d00b      	beq.n	800d24e <xPortStartScheduler+0xbe>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	60bb      	str	r3, [r7, #8]
}
 800d248:	bf00      	nop
 800d24a:	bf00      	nop
 800d24c:	e7fd      	b.n	800d24a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d24e:	4b1e      	ldr	r3, [pc, #120]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	021b      	lsls	r3, r3, #8
 800d254:	4a1c      	ldr	r2, [pc, #112]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d258:	4b1b      	ldr	r3, [pc, #108]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d260:	4a19      	ldr	r2, [pc, #100]	@ (800d2c8 <xPortStartScheduler+0x138>)
 800d262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	b2da      	uxtb	r2, r3
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d26c:	4b17      	ldr	r3, [pc, #92]	@ (800d2cc <xPortStartScheduler+0x13c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a16      	ldr	r2, [pc, #88]	@ (800d2cc <xPortStartScheduler+0x13c>)
 800d272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d278:	4b14      	ldr	r3, [pc, #80]	@ (800d2cc <xPortStartScheduler+0x13c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a13      	ldr	r2, [pc, #76]	@ (800d2cc <xPortStartScheduler+0x13c>)
 800d27e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d284:	f000 f8da 	bl	800d43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d288:	4b11      	ldr	r3, [pc, #68]	@ (800d2d0 <xPortStartScheduler+0x140>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d28e:	f000 f8f9 	bl	800d484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d292:	4b10      	ldr	r3, [pc, #64]	@ (800d2d4 <xPortStartScheduler+0x144>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d4 <xPortStartScheduler+0x144>)
 800d298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d29c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d29e:	f7ff ff63 	bl	800d168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2a2:	f7fe ff21 	bl	800c0e8 <vTaskSwitchContext>
	prvTaskExitError();
 800d2a6:	f7ff ff19 	bl	800d0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3718      	adds	r7, #24
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	e000ed00 	.word	0xe000ed00
 800d2b8:	410fc271 	.word	0x410fc271
 800d2bc:	410fc270 	.word	0x410fc270
 800d2c0:	e000e400 	.word	0xe000e400
 800d2c4:	24001c4c 	.word	0x24001c4c
 800d2c8:	24001c50 	.word	0x24001c50
 800d2cc:	e000ed20 	.word	0xe000ed20
 800d2d0:	24000044 	.word	0x24000044
 800d2d4:	e000ef34 	.word	0xe000ef34

0800d2d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	607b      	str	r3, [r7, #4]
}
 800d2f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2f2:	4b10      	ldr	r3, [pc, #64]	@ (800d334 <vPortEnterCritical+0x5c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d334 <vPortEnterCritical+0x5c>)
 800d2fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d334 <vPortEnterCritical+0x5c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d110      	bne.n	800d326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d304:	4b0c      	ldr	r3, [pc, #48]	@ (800d338 <vPortEnterCritical+0x60>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <vPortEnterCritical+0x4e>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	603b      	str	r3, [r7, #0]
}
 800d320:	bf00      	nop
 800d322:	bf00      	nop
 800d324:	e7fd      	b.n	800d322 <vPortEnterCritical+0x4a>
	}
}
 800d326:	bf00      	nop
 800d328:	370c      	adds	r7, #12
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr
 800d332:	bf00      	nop
 800d334:	24000044 	.word	0x24000044
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d342:	4b12      	ldr	r3, [pc, #72]	@ (800d38c <vPortExitCritical+0x50>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10b      	bne.n	800d362 <vPortExitCritical+0x26>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34e:	f383 8811 	msr	BASEPRI, r3
 800d352:	f3bf 8f6f 	isb	sy
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	607b      	str	r3, [r7, #4]
}
 800d35c:	bf00      	nop
 800d35e:	bf00      	nop
 800d360:	e7fd      	b.n	800d35e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d362:	4b0a      	ldr	r3, [pc, #40]	@ (800d38c <vPortExitCritical+0x50>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	3b01      	subs	r3, #1
 800d368:	4a08      	ldr	r2, [pc, #32]	@ (800d38c <vPortExitCritical+0x50>)
 800d36a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d36c:	4b07      	ldr	r3, [pc, #28]	@ (800d38c <vPortExitCritical+0x50>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d105      	bne.n	800d380 <vPortExitCritical+0x44>
 800d374:	2300      	movs	r3, #0
 800d376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	f383 8811 	msr	BASEPRI, r3
}
 800d37e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	24000044 	.word	0x24000044

0800d390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d390:	f3ef 8009 	mrs	r0, PSP
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	4b15      	ldr	r3, [pc, #84]	@ (800d3f0 <pxCurrentTCBConst>)
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	f01e 0f10 	tst.w	lr, #16
 800d3a0:	bf08      	it	eq
 800d3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3aa:	6010      	str	r0, [r2, #0]
 800d3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d3b4:	f380 8811 	msr	BASEPRI, r0
 800d3b8:	f3bf 8f4f 	dsb	sy
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f7fe fe92 	bl	800c0e8 <vTaskSwitchContext>
 800d3c4:	f04f 0000 	mov.w	r0, #0
 800d3c8:	f380 8811 	msr	BASEPRI, r0
 800d3cc:	bc09      	pop	{r0, r3}
 800d3ce:	6819      	ldr	r1, [r3, #0]
 800d3d0:	6808      	ldr	r0, [r1, #0]
 800d3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d6:	f01e 0f10 	tst.w	lr, #16
 800d3da:	bf08      	it	eq
 800d3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3e0:	f380 8809 	msr	PSP, r0
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	f3af 8000 	nop.w

0800d3f0 <pxCurrentTCBConst>:
 800d3f0:	24001620 	.word	0x24001620
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3f4:	bf00      	nop
 800d3f6:	bf00      	nop

0800d3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	607b      	str	r3, [r7, #4]
}
 800d410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d412:	f7fe fd8d 	bl	800bf30 <xTaskIncrementTick>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d41c:	4b06      	ldr	r3, [pc, #24]	@ (800d438 <xPortSysTickHandler+0x40>)
 800d41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	2300      	movs	r3, #0
 800d426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	f383 8811 	msr	BASEPRI, r3
}
 800d42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	e000ed04 	.word	0xe000ed04

0800d43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d43c:	b480      	push	{r7}
 800d43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d440:	4b0b      	ldr	r3, [pc, #44]	@ (800d470 <vPortSetupTimerInterrupt+0x34>)
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d446:	4b0b      	ldr	r3, [pc, #44]	@ (800d474 <vPortSetupTimerInterrupt+0x38>)
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d44c:	4b0a      	ldr	r3, [pc, #40]	@ (800d478 <vPortSetupTimerInterrupt+0x3c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a0a      	ldr	r2, [pc, #40]	@ (800d47c <vPortSetupTimerInterrupt+0x40>)
 800d452:	fba2 2303 	umull	r2, r3, r2, r3
 800d456:	099b      	lsrs	r3, r3, #6
 800d458:	4a09      	ldr	r2, [pc, #36]	@ (800d480 <vPortSetupTimerInterrupt+0x44>)
 800d45a:	3b01      	subs	r3, #1
 800d45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d45e:	4b04      	ldr	r3, [pc, #16]	@ (800d470 <vPortSetupTimerInterrupt+0x34>)
 800d460:	2207      	movs	r2, #7
 800d462:	601a      	str	r2, [r3, #0]
}
 800d464:	bf00      	nop
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	e000e010 	.word	0xe000e010
 800d474:	e000e018 	.word	0xe000e018
 800d478:	24000004 	.word	0x24000004
 800d47c:	10624dd3 	.word	0x10624dd3
 800d480:	e000e014 	.word	0xe000e014

0800d484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d494 <vPortEnableVFP+0x10>
 800d488:	6801      	ldr	r1, [r0, #0]
 800d48a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d48e:	6001      	str	r1, [r0, #0]
 800d490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d492:	bf00      	nop
 800d494:	e000ed88 	.word	0xe000ed88

0800d498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d49e:	f3ef 8305 	mrs	r3, IPSR
 800d4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2b0f      	cmp	r3, #15
 800d4a8:	d915      	bls.n	800d4d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4aa:	4a18      	ldr	r2, [pc, #96]	@ (800d50c <vPortValidateInterruptPriority+0x74>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4b4:	4b16      	ldr	r3, [pc, #88]	@ (800d510 <vPortValidateInterruptPriority+0x78>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	7afa      	ldrb	r2, [r7, #11]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d20b      	bcs.n	800d4d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	607b      	str	r3, [r7, #4]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d514 <vPortValidateInterruptPriority+0x7c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d4de:	4b0e      	ldr	r3, [pc, #56]	@ (800d518 <vPortValidateInterruptPriority+0x80>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d90b      	bls.n	800d4fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	603b      	str	r3, [r7, #0]
}
 800d4f8:	bf00      	nop
 800d4fa:	bf00      	nop
 800d4fc:	e7fd      	b.n	800d4fa <vPortValidateInterruptPriority+0x62>
	}
 800d4fe:	bf00      	nop
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	e000e3f0 	.word	0xe000e3f0
 800d510:	24001c4c 	.word	0x24001c4c
 800d514:	e000ed0c 	.word	0xe000ed0c
 800d518:	24001c50 	.word	0x24001c50

0800d51c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08a      	sub	sp, #40	@ 0x28
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d524:	2300      	movs	r3, #0
 800d526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d528:	f7fe fc46 	bl	800bdb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d52c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6a0 <pvPortMalloc+0x184>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d534:	f000 f924 	bl	800d780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d538:	4b5a      	ldr	r3, [pc, #360]	@ (800d6a4 <pvPortMalloc+0x188>)
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4013      	ands	r3, r2
 800d540:	2b00      	cmp	r3, #0
 800d542:	f040 8095 	bne.w	800d670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d01e      	beq.n	800d58a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d54c:	2208      	movs	r2, #8
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4413      	add	r3, r2
 800d552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f003 0307 	and.w	r3, r3, #7
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d015      	beq.n	800d58a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f023 0307 	bic.w	r3, r3, #7
 800d564:	3308      	adds	r3, #8
 800d566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f003 0307 	and.w	r3, r3, #7
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00b      	beq.n	800d58a <pvPortMalloc+0x6e>
	__asm volatile
 800d572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	617b      	str	r3, [r7, #20]
}
 800d584:	bf00      	nop
 800d586:	bf00      	nop
 800d588:	e7fd      	b.n	800d586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d06f      	beq.n	800d670 <pvPortMalloc+0x154>
 800d590:	4b45      	ldr	r3, [pc, #276]	@ (800d6a8 <pvPortMalloc+0x18c>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	429a      	cmp	r2, r3
 800d598:	d86a      	bhi.n	800d670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d59a:	4b44      	ldr	r3, [pc, #272]	@ (800d6ac <pvPortMalloc+0x190>)
 800d59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d59e:	4b43      	ldr	r3, [pc, #268]	@ (800d6ac <pvPortMalloc+0x190>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5a4:	e004      	b.n	800d5b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d903      	bls.n	800d5c2 <pvPortMalloc+0xa6>
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1f1      	bne.n	800d5a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d5c2:	4b37      	ldr	r3, [pc, #220]	@ (800d6a0 <pvPortMalloc+0x184>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d051      	beq.n	800d670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2208      	movs	r2, #8
 800d5d2:	4413      	add	r3, r2
 800d5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	1ad2      	subs	r2, r2, r3
 800d5e6:	2308      	movs	r3, #8
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d920      	bls.n	800d630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	f003 0307 	and.w	r3, r3, #7
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00b      	beq.n	800d618 <pvPortMalloc+0xfc>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	613b      	str	r3, [r7, #16]
}
 800d612:	bf00      	nop
 800d614:	bf00      	nop
 800d616:	e7fd      	b.n	800d614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	1ad2      	subs	r2, r2, r3
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d62a:	69b8      	ldr	r0, [r7, #24]
 800d62c:	f000 f90c 	bl	800d848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d630:	4b1d      	ldr	r3, [pc, #116]	@ (800d6a8 <pvPortMalloc+0x18c>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6a8 <pvPortMalloc+0x18c>)
 800d63c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d63e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6a8 <pvPortMalloc+0x18c>)
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	4b1b      	ldr	r3, [pc, #108]	@ (800d6b0 <pvPortMalloc+0x194>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	d203      	bcs.n	800d652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d64a:	4b17      	ldr	r3, [pc, #92]	@ (800d6a8 <pvPortMalloc+0x18c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	4a18      	ldr	r2, [pc, #96]	@ (800d6b0 <pvPortMalloc+0x194>)
 800d650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d654:	685a      	ldr	r2, [r3, #4]
 800d656:	4b13      	ldr	r3, [pc, #76]	@ (800d6a4 <pvPortMalloc+0x188>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	431a      	orrs	r2, r3
 800d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d662:	2200      	movs	r2, #0
 800d664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d666:	4b13      	ldr	r3, [pc, #76]	@ (800d6b4 <pvPortMalloc+0x198>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	3301      	adds	r3, #1
 800d66c:	4a11      	ldr	r2, [pc, #68]	@ (800d6b4 <pvPortMalloc+0x198>)
 800d66e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d670:	f7fe fbb0 	bl	800bdd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00b      	beq.n	800d696 <pvPortMalloc+0x17a>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	f383 8811 	msr	BASEPRI, r3
 800d686:	f3bf 8f6f 	isb	sy
 800d68a:	f3bf 8f4f 	dsb	sy
 800d68e:	60fb      	str	r3, [r7, #12]
}
 800d690:	bf00      	nop
 800d692:	bf00      	nop
 800d694:	e7fd      	b.n	800d692 <pvPortMalloc+0x176>
	return pvReturn;
 800d696:	69fb      	ldr	r3, [r7, #28]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3728      	adds	r7, #40	@ 0x28
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	2401a2fc 	.word	0x2401a2fc
 800d6a4:	2401a310 	.word	0x2401a310
 800d6a8:	2401a300 	.word	0x2401a300
 800d6ac:	2401a2f4 	.word	0x2401a2f4
 800d6b0:	2401a304 	.word	0x2401a304
 800d6b4:	2401a308 	.word	0x2401a308

0800d6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d04f      	beq.n	800d76a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6ca:	2308      	movs	r3, #8
 800d6cc:	425b      	negs	r3, r3
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	4b25      	ldr	r3, [pc, #148]	@ (800d774 <vPortFree+0xbc>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10b      	bne.n	800d6fe <vPortFree+0x46>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	60fb      	str	r3, [r7, #12]
}
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
 800d6fc:	e7fd      	b.n	800d6fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00b      	beq.n	800d71e <vPortFree+0x66>
	__asm volatile
 800d706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	60bb      	str	r3, [r7, #8]
}
 800d718:	bf00      	nop
 800d71a:	bf00      	nop
 800d71c:	e7fd      	b.n	800d71a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	685a      	ldr	r2, [r3, #4]
 800d722:	4b14      	ldr	r3, [pc, #80]	@ (800d774 <vPortFree+0xbc>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4013      	ands	r3, r2
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d01e      	beq.n	800d76a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d11a      	bne.n	800d76a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	4b0e      	ldr	r3, [pc, #56]	@ (800d774 <vPortFree+0xbc>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	43db      	mvns	r3, r3
 800d73e:	401a      	ands	r2, r3
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d744:	f7fe fb38 	bl	800bdb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	4b0a      	ldr	r3, [pc, #40]	@ (800d778 <vPortFree+0xc0>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4413      	add	r3, r2
 800d752:	4a09      	ldr	r2, [pc, #36]	@ (800d778 <vPortFree+0xc0>)
 800d754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d756:	6938      	ldr	r0, [r7, #16]
 800d758:	f000 f876 	bl	800d848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d75c:	4b07      	ldr	r3, [pc, #28]	@ (800d77c <vPortFree+0xc4>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	3301      	adds	r3, #1
 800d762:	4a06      	ldr	r2, [pc, #24]	@ (800d77c <vPortFree+0xc4>)
 800d764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d766:	f7fe fb35 	bl	800bdd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d76a:	bf00      	nop
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	2401a310 	.word	0x2401a310
 800d778:	2401a300 	.word	0x2401a300
 800d77c:	2401a30c 	.word	0x2401a30c

0800d780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d786:	4b29      	ldr	r3, [pc, #164]	@ (800d82c <prvHeapInit+0xac>)
 800d788:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d78a:	4b29      	ldr	r3, [pc, #164]	@ (800d830 <prvHeapInit+0xb0>)
 800d78c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f003 0307 	and.w	r3, r3, #7
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00c      	beq.n	800d7b2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	3307      	adds	r3, #7
 800d79c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f023 0307 	bic.w	r3, r3, #7
 800d7a4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	4a20      	ldr	r2, [pc, #128]	@ (800d830 <prvHeapInit+0xb0>)
 800d7ae:	4413      	add	r3, r2
 800d7b0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800d834 <prvHeapInit+0xb4>)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800d834 <prvHeapInit+0xb4>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	1a9b      	subs	r3, r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f023 0307 	bic.w	r3, r3, #7
 800d7d8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4a16      	ldr	r2, [pc, #88]	@ (800d838 <prvHeapInit+0xb8>)
 800d7de:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7e0:	4b15      	ldr	r3, [pc, #84]	@ (800d838 <prvHeapInit+0xb8>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7e8:	4b13      	ldr	r3, [pc, #76]	@ (800d838 <prvHeapInit+0xb8>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	1ad2      	subs	r2, r2, r3
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d838 <prvHeapInit+0xb8>)
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <prvHeapInit+0xbc>)
 800d80c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	4a0b      	ldr	r2, [pc, #44]	@ (800d840 <prvHeapInit+0xc0>)
 800d814:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d816:	4b0b      	ldr	r3, [pc, #44]	@ (800d844 <prvHeapInit+0xc4>)
 800d818:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d81c:	601a      	str	r2, [r3, #0]
}
 800d81e:	bf00      	nop
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	000186a0 	.word	0x000186a0
 800d830:	24001c54 	.word	0x24001c54
 800d834:	2401a2f4 	.word	0x2401a2f4
 800d838:	2401a2fc 	.word	0x2401a2fc
 800d83c:	2401a304 	.word	0x2401a304
 800d840:	2401a300 	.word	0x2401a300
 800d844:	2401a310 	.word	0x2401a310

0800d848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d850:	4b28      	ldr	r3, [pc, #160]	@ (800d8f4 <prvInsertBlockIntoFreeList+0xac>)
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	e002      	b.n	800d85c <prvInsertBlockIntoFreeList+0x14>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	60fb      	str	r3, [r7, #12]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	429a      	cmp	r2, r3
 800d864:	d8f7      	bhi.n	800d856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	4413      	add	r3, r2
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	429a      	cmp	r2, r3
 800d876:	d108      	bne.n	800d88a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	441a      	add	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	441a      	add	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d118      	bne.n	800d8d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b15      	ldr	r3, [pc, #84]	@ (800d8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d00d      	beq.n	800d8c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	685a      	ldr	r2, [r3, #4]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	441a      	add	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e008      	b.n	800d8d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d8c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d8f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	e003      	b.n	800d8d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d002      	beq.n	800d8e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8e6:	bf00      	nop
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	2401a2f4 	.word	0x2401a2f4
 800d8f8:	2401a2fc 	.word	0x2401a2fc

0800d8fc <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
}
 800d900:	bf00      	nop
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800d90e:	f003 ff69 	bl	80117e4 <touchgfx_components_init>
    touchgfx_init();
 800d912:	f003 ff3d 	bl	8011790 <touchgfx_init>
}
 800d916:	bf00      	nop
 800d918:	bd80      	pop	{r7, pc}

0800d91a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800d922:	f003 ff67 	bl	80117f4 <touchgfx_taskEntry>
}
 800d926:	bf00      	nop
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
    {
 800d938:	4a04      	ldr	r2, [pc, #16]	@ (800d94c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	601a      	str	r2, [r3, #0]
    }
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	080224b0 	.word	0x080224b0

0800d950 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
    }
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff ffe9 	bl	800d930 <_ZN8touchgfx12FontProviderD1Ev>
 800d95e:	2104      	movs	r1, #4
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f012 ff3a 	bl	80207da <_ZdlPvj>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4618      	mov	r0, r3
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	460b      	mov	r3, r1
 800d97a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d97c:	887b      	ldrh	r3, [r7, #2]
 800d97e:	2b02      	cmp	r3, #2
 800d980:	d010      	beq.n	800d9a4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d982:	2b02      	cmp	r3, #2
 800d984:	dc13      	bgt.n	800d9ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d986:	2b00      	cmp	r3, #0
 800d988:	d002      	beq.n	800d990 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d005      	beq.n	800d99a <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d98e:	e00e      	b.n	800d9ae <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d990:	f002 f88e 	bl	800fab0 <_ZN17TypedTextDatabase8getFontsEv>
 800d994:	4603      	mov	r3, r0
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	e00a      	b.n	800d9b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d99a:	f002 f889 	bl	800fab0 <_ZN17TypedTextDatabase8getFontsEv>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	e005      	b.n	800d9b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d9a4:	f002 f884 	bl	800fab0 <_ZN17TypedTextDatabase8getFontsEv>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	689b      	ldr	r3, [r3, #8]
 800d9ac:	e000      	b.n	800d9b0 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d9ae:	2300      	movs	r3, #0
    }
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	4a05      	ldr	r2, [pc, #20]	@ (800d9d8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff ffb1 	bl	800d930 <_ZN8touchgfx12FontProviderD1Ev>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	0802249c 	.word	0x0802249c

0800d9dc <_ZN23ApplicationFontProviderD0Ev>:
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff ffe7 	bl	800d9b8 <_ZN23ApplicationFontProviderD1Ev>
 800d9ea:	2104      	movs	r1, #4
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f012 fef4 	bl	80207da <_ZdlPvj>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
    {
 800da04:	4a04      	ldr	r2, [pc, #16]	@ (800da18 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	601a      	str	r2, [r3, #0]
    }
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	080227dc 	.word	0x080227dc

0800da1c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
    }
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7ff ffe9 	bl	800d9fc <_ZN8touchgfx4FontD1Ev>
 800da2a:	2114      	movs	r1, #20
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f012 fed4 	bl	80207da <_ZdlPvj>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800da3c:	b590      	push	{r4, r7, lr}
 800da3e:	b087      	sub	sp, #28
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800da48:	887b      	ldrh	r3, [r7, #2]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d101      	bne.n	800da52 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	e010      	b.n	800da74 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3308      	adds	r3, #8
 800da60:	681c      	ldr	r4, [r3, #0]
 800da62:	f107 030f 	add.w	r3, r7, #15
 800da66:	f107 0210 	add.w	r2, r7, #16
 800da6a:	8879      	ldrh	r1, [r7, #2]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	47a0      	blx	r4
 800da70:	6178      	str	r0, [r7, #20]
        return glyph;
 800da72:	697b      	ldr	r3, [r7, #20]
    }
 800da74:	4618      	mov	r0, r3
 800da76:	371c      	adds	r7, #28
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd90      	pop	{r4, r7, pc}

0800da7c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	89db      	ldrh	r3, [r3, #14]
    }
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8a1b      	ldrh	r3, [r3, #16]
    }
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	88db      	ldrh	r3, [r3, #6]
    }
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	889b      	ldrh	r3, [r3, #4]
    }
 800dad0:	4618      	mov	r0, r3
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	7a9b      	ldrb	r3, [r3, #10]
 800dae8:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800daec:	b2db      	uxtb	r3, r3
    }
 800daee:	4618      	mov	r0, r3
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800dafa:	b480      	push	{r7}
 800dafc:	b083      	sub	sp, #12
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	7a9b      	ldrb	r3, [r3, #10]
 800db06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800db0a:	b2db      	uxtb	r3, r3
    }
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
    {
        return false;
 800db20:	2300      	movs	r3, #0
    }
 800db22:	4618      	mov	r0, r3
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800db36:	f04f 0300 	mov.w	r3, #0
 800db3a:	ee07 3a90 	vmov	s15, r3
    }
 800db3e:	eeb0 0a67 	vmov.f32	s0, s15
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	4a05      	ldr	r2, [pc, #20]	@ (800db6c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7ff ff4d 	bl	800d9fc <_ZN8touchgfx4FontD1Ev>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	080231b0 	.word	0x080231b0

0800db70 <_ZN8touchgfx9ConstFontD0Ev>:
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff ffe7 	bl	800db4c <_ZN8touchgfx9ConstFontD1Ev>
 800db7e:	211c      	movs	r1, #28
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f012 fe2a 	bl	80207da <_ZdlPvj>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	4a05      	ldr	r2, [pc, #20]	@ (800dbb0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	601a      	str	r2, [r3, #0]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff ffd3 	bl	800db4c <_ZN8touchgfx9ConstFontD1Ev>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	080224c4 	.word	0x080224c4

0800dbb4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7ff ffe7 	bl	800db90 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dbc2:	212c      	movs	r1, #44	@ 0x2c
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f012 fe08 	bl	80207da <_ZdlPvj>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08e      	sub	sp, #56	@ 0x38
 800dc08:	af0a      	add	r7, sp, #40	@ 0x28
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	461a      	mov	r2, r3
 800dc12:	460b      	mov	r3, r1
 800dc14:	80fb      	strh	r3, [r7, #6]
 800dc16:	4613      	mov	r3, r2
 800dc18:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	88b9      	ldrh	r1, [r7, #4]
 800dc1e:	88fa      	ldrh	r2, [r7, #6]
 800dc20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc24:	9308      	str	r3, [sp, #32]
 800dc26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dc28:	9307      	str	r3, [sp, #28]
 800dc2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800dc2e:	9306      	str	r3, [sp, #24]
 800dc30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc3a:	9304      	str	r3, [sp, #16]
 800dc3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc40:	9303      	str	r3, [sp, #12]
 800dc42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc46:	9302      	str	r3, [sp, #8]
 800dc48:	7f3b      	ldrb	r3, [r7, #28]
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	8b3b      	ldrh	r3, [r7, #24]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	460b      	mov	r3, r1
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	f007 ff34 	bl	8015ac0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800dc58:	4a09      	ldr	r2, [pc, #36]	@ (800dc80 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc62:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc68:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc6e:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc74:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	080224c4 	.word	0x080224c4

0800dc84 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dc84:	b480      	push	{r7}
 800dc86:	b085      	sub	sp, #20
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	889b      	ldrh	r3, [r3, #4]
 800dc98:	0adb      	lsrs	r3, r3, #11
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	4413      	add	r3, r2
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4413      	add	r3, r2
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dcb6:	b480      	push	{r7}
 800dcb8:	b089      	sub	sp, #36	@ 0x24
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	607a      	str	r2, [r7, #4]
 800dcc2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7b1b      	ldrb	r3, [r3, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d101      	bne.n	800dcd6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e031      	b.n	800dd3a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6a1a      	ldr	r2, [r3, #32]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	7b5b      	ldrb	r3, [r3, #13]
 800dce2:	021b      	lsls	r3, r3, #8
 800dce4:	b21b      	sxth	r3, r3
 800dce6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dcea:	b219      	sxth	r1, r3
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	7adb      	ldrb	r3, [r3, #11]
 800dcf0:	b21b      	sxth	r3, r3
 800dcf2:	430b      	orrs	r3, r1
 800dcf4:	b21b      	sxth	r3, r3
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	4413      	add	r3, r2
 800dcfc:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7b1b      	ldrb	r3, [r3, #12]
 800dd02:	837b      	strh	r3, [r7, #26]
 800dd04:	e013      	b.n	800dd2e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	881b      	ldrh	r3, [r3, #0]
 800dd0a:	897a      	ldrh	r2, [r7, #10]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d103      	bne.n	800dd18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dd16:	e010      	b.n	800dd3a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	897a      	ldrh	r2, [r7, #10]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d309      	bcc.n	800dd36 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dd22:	8b7b      	ldrh	r3, [r7, #26]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	837b      	strh	r3, [r7, #26]
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	61fb      	str	r3, [r7, #28]
 800dd2e:	8b7b      	ldrh	r3, [r7, #26]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1e8      	bne.n	800dd06 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800dd34:	e000      	b.n	800dd38 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800dd36:	bf00      	nop
        }
    }
    return 0;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3724      	adds	r7, #36	@ 0x24
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
	...

0800dd48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	4801      	ldr	r0, [pc, #4]	@ (800dd54 <__tcf_0+0xc>)
 800dd4e:	f7ff ff1f 	bl	800db90 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	2401a314 	.word	0x2401a314

0800dd58 <_Z23getFont_verdana_10_4bppv>:
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08e      	sub	sp, #56	@ 0x38
 800dd5c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dd5e:	4b21      	ldr	r3, [pc, #132]	@ (800dde4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f3bf 8f5b 	dmb	ish
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	bf0c      	ite	eq
 800dd6e:	2301      	moveq	r3, #1
 800dd70:	2300      	movne	r3, #0
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d030      	beq.n	800ddda <_Z23getFont_verdana_10_4bppv+0x82>
 800dd78:	481a      	ldr	r0, [pc, #104]	@ (800dde4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd7a:	f012 fd30 	bl	80207de <__cxa_guard_acquire>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	bf14      	ite	ne
 800dd84:	2301      	movne	r3, #1
 800dd86:	2300      	moveq	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d025      	beq.n	800ddda <_Z23getFont_verdana_10_4bppv+0x82>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd92:	2300      	movs	r3, #0
 800dd94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd96:	2300      	movs	r3, #0
 800dd98:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd9a:	233f      	movs	r3, #63	@ 0x3f
 800dd9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd9e:	4b12      	ldr	r3, [pc, #72]	@ (800dde8 <_Z23getFont_verdana_10_4bppv+0x90>)
 800dda0:	9308      	str	r3, [sp, #32]
 800dda2:	4b12      	ldr	r3, [pc, #72]	@ (800ddec <_Z23getFont_verdana_10_4bppv+0x94>)
 800dda4:	9307      	str	r3, [sp, #28]
 800dda6:	2300      	movs	r3, #0
 800dda8:	9306      	str	r3, [sp, #24]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	9305      	str	r3, [sp, #20]
 800ddae:	2301      	movs	r3, #1
 800ddb0:	9304      	str	r3, [sp, #16]
 800ddb2:	2304      	movs	r3, #4
 800ddb4:	9303      	str	r3, [sp, #12]
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	9302      	str	r3, [sp, #8]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	9301      	str	r3, [sp, #4]
 800ddbe:	230a      	movs	r3, #10
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	230a      	movs	r3, #10
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	490a      	ldr	r1, [pc, #40]	@ (800ddf0 <_Z23getFont_verdana_10_4bppv+0x98>)
 800ddc8:	480a      	ldr	r0, [pc, #40]	@ (800ddf4 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800ddca:	f7ff ff1b 	bl	800dc04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ddce:	480a      	ldr	r0, [pc, #40]	@ (800ddf8 <_Z23getFont_verdana_10_4bppv+0xa0>)
 800ddd0:	f012 fd50 	bl	8020874 <atexit>
 800ddd4:	4803      	ldr	r0, [pc, #12]	@ (800dde4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ddd6:	f012 fd0e 	bl	80207f6 <__cxa_guard_release>
    return verdana_10_4bpp;
 800ddda:	4b06      	ldr	r3, [pc, #24]	@ (800ddf4 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	2401a340 	.word	0x2401a340
 800dde8:	08023524 	.word	0x08023524
 800ddec:	08023530 	.word	0x08023530
 800ddf0:	90000178 	.word	0x90000178
 800ddf4:	2401a314 	.word	0x2401a314
 800ddf8:	0800dd49 	.word	0x0800dd49

0800ddfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	4801      	ldr	r0, [pc, #4]	@ (800de08 <__tcf_0+0xc>)
 800de02:	f7ff fec5 	bl	800db90 <_ZN8touchgfx13GeneratedFontD1Ev>
 800de06:	bd80      	pop	{r7, pc}
 800de08:	2401a344 	.word	0x2401a344

0800de0c <_Z23getFont_verdana_20_4bppv>:
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b08e      	sub	sp, #56	@ 0x38
 800de10:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800de12:	4b21      	ldr	r3, [pc, #132]	@ (800de98 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f3bf 8f5b 	dmb	ish
 800de1a:	f003 0301 	and.w	r3, r3, #1
 800de1e:	2b00      	cmp	r3, #0
 800de20:	bf0c      	ite	eq
 800de22:	2301      	moveq	r3, #1
 800de24:	2300      	movne	r3, #0
 800de26:	b2db      	uxtb	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d030      	beq.n	800de8e <_Z23getFont_verdana_20_4bppv+0x82>
 800de2c:	481a      	ldr	r0, [pc, #104]	@ (800de98 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800de2e:	f012 fcd6 	bl	80207de <__cxa_guard_acquire>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	bf14      	ite	ne
 800de38:	2301      	movne	r3, #1
 800de3a:	2300      	moveq	r3, #0
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d025      	beq.n	800de8e <_Z23getFont_verdana_20_4bppv+0x82>
 800de42:	2300      	movs	r3, #0
 800de44:	930c      	str	r3, [sp, #48]	@ 0x30
 800de46:	2300      	movs	r3, #0
 800de48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de4a:	2300      	movs	r3, #0
 800de4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800de4e:	233f      	movs	r3, #63	@ 0x3f
 800de50:	9309      	str	r3, [sp, #36]	@ 0x24
 800de52:	4b12      	ldr	r3, [pc, #72]	@ (800de9c <_Z23getFont_verdana_20_4bppv+0x90>)
 800de54:	9308      	str	r3, [sp, #32]
 800de56:	4b12      	ldr	r3, [pc, #72]	@ (800dea0 <_Z23getFont_verdana_20_4bppv+0x94>)
 800de58:	9307      	str	r3, [sp, #28]
 800de5a:	2300      	movs	r3, #0
 800de5c:	9306      	str	r3, [sp, #24]
 800de5e:	2300      	movs	r3, #0
 800de60:	9305      	str	r3, [sp, #20]
 800de62:	2301      	movs	r3, #1
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	2304      	movs	r3, #4
 800de68:	9303      	str	r3, [sp, #12]
 800de6a:	2300      	movs	r3, #0
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	2300      	movs	r3, #0
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	2314      	movs	r3, #20
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	2314      	movs	r3, #20
 800de78:	2201      	movs	r2, #1
 800de7a:	490a      	ldr	r1, [pc, #40]	@ (800dea4 <_Z23getFont_verdana_20_4bppv+0x98>)
 800de7c:	480a      	ldr	r0, [pc, #40]	@ (800dea8 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800de7e:	f7ff fec1 	bl	800dc04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de82:	480a      	ldr	r0, [pc, #40]	@ (800deac <_Z23getFont_verdana_20_4bppv+0xa0>)
 800de84:	f012 fcf6 	bl	8020874 <atexit>
 800de88:	4803      	ldr	r0, [pc, #12]	@ (800de98 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800de8a:	f012 fcb4 	bl	80207f6 <__cxa_guard_release>
    return verdana_20_4bpp;
 800de8e:	4b06      	ldr	r3, [pc, #24]	@ (800dea8 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800de90:	4618      	mov	r0, r3
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	2401a370 	.word	0x2401a370
 800de9c:	08023528 	.word	0x08023528
 800dea0:	08023534 	.word	0x08023534
 800dea4:	90000188 	.word	0x90000188
 800dea8:	2401a344 	.word	0x2401a344
 800deac:	0800ddfd 	.word	0x0800ddfd

0800deb0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	4801      	ldr	r0, [pc, #4]	@ (800debc <__tcf_0+0xc>)
 800deb6:	f7ff fe6b 	bl	800db90 <_ZN8touchgfx13GeneratedFontD1Ev>
 800deba:	bd80      	pop	{r7, pc}
 800debc:	2401a374 	.word	0x2401a374

0800dec0 <_Z23getFont_verdana_40_4bppv>:
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08e      	sub	sp, #56	@ 0x38
 800dec4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dec6:	4b21      	ldr	r3, [pc, #132]	@ (800df4c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	f3bf 8f5b 	dmb	ish
 800dece:	f003 0301 	and.w	r3, r3, #1
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bf0c      	ite	eq
 800ded6:	2301      	moveq	r3, #1
 800ded8:	2300      	movne	r3, #0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d030      	beq.n	800df42 <_Z23getFont_verdana_40_4bppv+0x82>
 800dee0:	481a      	ldr	r0, [pc, #104]	@ (800df4c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dee2:	f012 fc7c 	bl	80207de <__cxa_guard_acquire>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bf14      	ite	ne
 800deec:	2301      	movne	r3, #1
 800deee:	2300      	moveq	r3, #0
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	d025      	beq.n	800df42 <_Z23getFont_verdana_40_4bppv+0x82>
 800def6:	2300      	movs	r3, #0
 800def8:	930c      	str	r3, [sp, #48]	@ 0x30
 800defa:	2300      	movs	r3, #0
 800defc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800defe:	2300      	movs	r3, #0
 800df00:	930a      	str	r3, [sp, #40]	@ 0x28
 800df02:	233f      	movs	r3, #63	@ 0x3f
 800df04:	9309      	str	r3, [sp, #36]	@ 0x24
 800df06:	4b12      	ldr	r3, [pc, #72]	@ (800df50 <_Z23getFont_verdana_40_4bppv+0x90>)
 800df08:	9308      	str	r3, [sp, #32]
 800df0a:	4b12      	ldr	r3, [pc, #72]	@ (800df54 <_Z23getFont_verdana_40_4bppv+0x94>)
 800df0c:	9307      	str	r3, [sp, #28]
 800df0e:	2300      	movs	r3, #0
 800df10:	9306      	str	r3, [sp, #24]
 800df12:	2300      	movs	r3, #0
 800df14:	9305      	str	r3, [sp, #20]
 800df16:	2301      	movs	r3, #1
 800df18:	9304      	str	r3, [sp, #16]
 800df1a:	2304      	movs	r3, #4
 800df1c:	9303      	str	r3, [sp, #12]
 800df1e:	2300      	movs	r3, #0
 800df20:	9302      	str	r3, [sp, #8]
 800df22:	2300      	movs	r3, #0
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	2328      	movs	r3, #40	@ 0x28
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	2328      	movs	r3, #40	@ 0x28
 800df2c:	2201      	movs	r2, #1
 800df2e:	490a      	ldr	r1, [pc, #40]	@ (800df58 <_Z23getFont_verdana_40_4bppv+0x98>)
 800df30:	480a      	ldr	r0, [pc, #40]	@ (800df5c <_Z23getFont_verdana_40_4bppv+0x9c>)
 800df32:	f7ff fe67 	bl	800dc04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df36:	480a      	ldr	r0, [pc, #40]	@ (800df60 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800df38:	f012 fc9c 	bl	8020874 <atexit>
 800df3c:	4803      	ldr	r0, [pc, #12]	@ (800df4c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800df3e:	f012 fc5a 	bl	80207f6 <__cxa_guard_release>
    return verdana_40_4bpp;
 800df42:	4b06      	ldr	r3, [pc, #24]	@ (800df5c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800df44:	4618      	mov	r0, r3
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	2401a3a0 	.word	0x2401a3a0
 800df50:	0802352c 	.word	0x0802352c
 800df54:	08023538 	.word	0x08023538
 800df58:	90000198 	.word	0x90000198
 800df5c:	2401a374 	.word	0x2401a374
 800df60:	0800deb1 	.word	0x0800deb1

0800df64 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df86:	bf00      	nop
 800df88:	370c      	adds	r7, #12
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr

0800df92 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800df92:	b480      	push	{r7}
 800df94:	b083      	sub	sp, #12
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800df9c:	bf00      	nop
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dfb2:	bf00      	nop
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr

0800dfbe <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800dfbe:	b480      	push	{r7}
 800dfc0:	b083      	sub	sp, #12
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800dfca:	bf00      	nop
 800dfcc:	370c      	adds	r7, #12
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr

0800dfd6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800dfd6:	b480      	push	{r7}
 800dfd8:	b083      	sub	sp, #12
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
    {
    }
 800dfde:	bf00      	nop
 800dfe0:	370c      	adds	r7, #12
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr

0800dfea <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800dfea:	b480      	push	{r7}
 800dfec:	b083      	sub	sp, #12
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
    {
    }
 800dff2:	bf00      	nop
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
	...

0800e000 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
    {
 800e008:	4a04      	ldr	r2, [pc, #16]	@ (800e01c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	601a      	str	r2, [r3, #0]
    }
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	0802264c 	.word	0x0802264c

0800e020 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
    }
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff ffe9 	bl	800e000 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e02e:	2104      	movs	r1, #4
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f012 fbd2 	bl	80207da <_ZdlPvj>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
    {
    }
 800e048:	bf00      	nop
 800e04a:	370c      	adds	r7, #12
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800e07e:	6810      	ldr	r0, [r2, #0]
 800e080:	6851      	ldr	r1, [r2, #4]
 800e082:	c303      	stmia	r3!, {r0, r1}
    }
 800e084:	bf00      	nop
 800e086:	370c      	adds	r7, #12
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3304      	adds	r3, #4
 800e09c:	4618      	mov	r0, r3
 800e09e:	f006 fc0e 	bl	80148be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
	...

0800e0ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
    {
 800e0b4:	4a04      	ldr	r2, [pc, #16]	@ (800e0c8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	601a      	str	r2, [r3, #0]
    }
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr
 800e0c8:	08022634 	.word	0x08022634

0800e0cc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
    }
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7ff ffe9 	bl	800e0ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e0da:	2104      	movs	r1, #4
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f012 fb7c 	bl	80207da <_ZdlPvj>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
    {
        return instance;
 800e0f0:	4b03      	ldr	r3, [pc, #12]	@ (800e100 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
    }
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	2401b548 	.word	0x2401b548

0800e104 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e108:	4b0b      	ldr	r3, [pc, #44]	@ (800e138 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e110:	2b00      	cmp	r3, #0
 800e112:	d008      	beq.n	800e126 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e114:	4b08      	ldr	r3, [pc, #32]	@ (800e138 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d003      	beq.n	800e126 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e11e:	4b06      	ldr	r3, [pc, #24]	@ (800e138 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e124:	e002      	b.n	800e12c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e126:	4b04      	ldr	r3, [pc, #16]	@ (800e138 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
    }
 800e12c:	4618      	mov	r0, r3
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	2401b548 	.word	0x2401b548

0800e13c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e144:	4a07      	ldr	r2, [pc, #28]	@ (800e164 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2200      	movs	r2, #0
 800e14e:	605a      	str	r2, [r3, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	721a      	strb	r2, [r3, #8]
    {
    }
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	08022610 	.word	0x08022610

0800e168 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
    {
 800e170:	4a04      	ldr	r2, [pc, #16]	@ (800e184 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	601a      	str	r2, [r3, #0]
    }
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	08022610 	.word	0x08022610

0800e188 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
    }
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff ffe9 	bl	800e168 <_ZN8touchgfx10TransitionD1Ev>
 800e196:	210c      	movs	r1, #12
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f012 fb1e 	bl	80207da <_ZdlPvj>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    {
    }
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
    {
    }
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
    {
    }
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e1ec:	f006 fb42 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	323c      	adds	r2, #60	@ 0x3c
 800e1f6:	6812      	ldr	r2, [r2, #0]
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	4790      	blx	r2
    }
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	683a      	ldr	r2, [r7, #0]
 800e212:	605a      	str	r2, [r3, #4]
    }
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	4a05      	ldr	r2, [pc, #20]	@ (800e240 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4618      	mov	r0, r3
 800e232:	f7ff fee5 	bl	800e000 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	080230f4 	.word	0x080230f4

0800e244 <_ZN8touchgfx11ApplicationD0Ev>:
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ffe7 	bl	800e220 <_ZN8touchgfx11ApplicationD1Ev>
 800e252:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f012 fabf 	bl	80207da <_ZdlPvj>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
	...

0800e268 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4618      	mov	r0, r3
 800e274:	f006 fbc4 	bl	8014a00 <_ZN8touchgfx11ApplicationC1Ev>
 800e278:	4a09      	ldr	r2, [pc, #36]	@ (800e2a0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	4a04      	ldr	r2, [pc, #16]	@ (800e2a4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e292:	6013      	str	r3, [r2, #0]
    }
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	080225bc 	.word	0x080225bc
 800e2a4:	2401b594 	.word	0x2401b594

0800e2a8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f804 	bl	800e2be <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e2b6:	bf00      	nop
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00f      	beq.n	800e2f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	330c      	adds	r3, #12
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4798      	blx	r3
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e000      	b.n	800e2f2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00e      	beq.n	800e314 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3308      	adds	r3, #8
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4610      	mov	r0, r2
 800e30a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	601a      	str	r2, [r3, #0]
    }
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	4a05      	ldr	r2, [pc, #20]	@ (800e358 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff ff69 	bl	800e220 <_ZN8touchgfx11ApplicationD1Ev>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	080225bc 	.word	0x080225bc

0800e35c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f7ff ffe7 	bl	800e338 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e36a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f012 fa33 	bl	80207da <_ZdlPvj>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4618      	mov	r0, r3
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	4a08      	ldr	r2, [pc, #32]	@ (800e3ac <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	601a      	str	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e394:	4618      	mov	r0, r3
 800e396:	f000 facb 	bl	800e930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff ffcb 	bl	800e338 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3708      	adds	r7, #8
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	08022550 	.word	0x08022550

0800e3b0 <_ZN23FrontendApplicationBaseD0Ev>:
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ffe1 	bl	800e380 <_ZN23FrontendApplicationBaseD1Ev>
 800e3be:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f012 fa09 	bl	80207da <_ZdlPvj>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
    {
        gotomainScreenScreenNoTransition();
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f880 	bl	800e4e0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 800e3e0:	bf00      	nop
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	721a      	strb	r2, [r3, #8]
    }
 800e3f6:	bf00      	nop
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}

    virtual void ledChangedState(bool state){}

    void bind(Model* m)
 800e402:	b480      	push	{r7}
 800e404:	b083      	sub	sp, #12
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	605a      	str	r2, [r3, #4]
    }
 800e412:	bf00      	nop
 800e414:	370c      	adds	r7, #12
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
	...

0800e420 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff ff1a 	bl	800e268 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e434:	4a15      	ldr	r2, [pc, #84]	@ (800e48c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e440:	4618      	mov	r0, r3
 800e442:	f000 f8a3 	bl	800e58c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e456:	f7ff fe49 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 800e45a:	4603      	mov	r3, r0
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	3208      	adds	r2, #8
 800e460:	6812      	ldr	r2, [r2, #0]
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e468:	f7ff fe4c 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 800e46c:	4603      	mov	r3, r0
 800e46e:	4618      	mov	r0, r3
 800e470:	f00d f8b3 	bl	801b5da <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800e474:	f7ff fe46 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 800e478:	4603      	mov	r3, r0
 800e47a:	4618      	mov	r0, r3
 800e47c:	f00d f924 	bl	801b6c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	08022550 	.word	0x08022550

0800e490 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff ffe9 	bl	800e490 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	605a      	str	r2, [r3, #4]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	683a      	ldr	r2, [r7, #0]
 800e4ca:	3308      	adds	r3, #8
 800e4cc:	3208      	adds	r2, #8
 800e4ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4d2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>:
 */

// mainScreen

void FrontendApplicationBase::gotomainScreenScreenNoTransition()
{
 800e4e0:	b590      	push	{r4, r7, lr}
 800e4e2:	b089      	sub	sp, #36	@ 0x24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800e4ee:	4b10      	ldr	r3, [pc, #64]	@ (800e530 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv+0x50>)
 800e4f0:	61bb      	str	r3, [r7, #24]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	61fb      	str	r3, [r7, #28]
 800e4f6:	f107 0008 	add.w	r0, r7, #8
 800e4fa:	f107 0318 	add.w	r3, r7, #24
 800e4fe:	cb0c      	ldmia	r3, {r2, r3}
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	f000 f85f 	bl	800e5c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e506:	f107 0308 	add.w	r3, r7, #8
 800e50a:	4619      	mov	r1, r3
 800e50c:	4620      	mov	r0, r4
 800e50e:	f7ff ffcb 	bl	800e4a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e512:	f107 0308 	add.w	r3, r7, #8
 800e516:	4618      	mov	r0, r3
 800e518:	f000 fa0a 	bl	800e930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800e528:	bf00      	nop
 800e52a:	3724      	adds	r7, #36	@ 0x24
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}
 800e530:	0800e535 	.word	0x0800e535

0800e534 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotomainScreenScreenNoTransitionImpl()
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af02      	add	r7, sp, #8
 800e53a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<mainScreenView, mainScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800e548:	461a      	mov	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	4b04      	ldr	r3, [pc, #16]	@ (800e564 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x30>)
 800e554:	4804      	ldr	r0, [pc, #16]	@ (800e568 <_ZN23FrontendApplicationBase36gotomainScreenScreenNoTransitionImplEv+0x34>)
 800e556:	f000 f867 	bl	800e628 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e55a:	bf00      	nop
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	2401b588 	.word	0x2401b588
 800e568:	2401b584 	.word	0x2401b584

0800e56c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	4a04      	ldr	r2, [pc, #16]	@ (800e588 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	601a      	str	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr
 800e588:	08022634 	.word	0x08022634

0800e58c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4618      	mov	r0, r3
 800e598:	f7ff ffe8 	bl	800e56c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e59c:	4a08      	ldr	r2, [pc, #32]	@ (800e5c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	605a      	str	r2, [r3, #4]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	609a      	str	r2, [r3, #8]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	60da      	str	r2, [r3, #12]
    {
    }
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	080225a4 	.word	0x080225a4

0800e5c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff ffc8 	bl	800e56c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e5dc:	4a08      	ldr	r2, [pc, #32]	@ (800e600 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	68ba      	ldr	r2, [r7, #8]
 800e5e6:	605a      	str	r2, [r3, #4]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3308      	adds	r3, #8
 800e5ec:	463a      	mov	r2, r7
 800e5ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e5f2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3710      	adds	r7, #16
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	080225a4 	.word	0x080225a4

0800e604 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4618      	mov	r0, r3
 800e610:	f7ff fd94 	bl	800e13c <_ZN8touchgfx10TransitionC1Ev>
 800e614:	4a03      	ldr	r2, [pc, #12]	@ (800e624 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	0802252c 	.word	0x0802252c

0800e628 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b08f      	sub	sp, #60	@ 0x3c
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
 800e634:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	689a      	ldr	r2, [r3, #8]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3320      	adds	r3, #32
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4610      	mov	r0, r2
 800e646:	4798      	blx	r3
 800e648:	4603      	mov	r3, r0
 800e64a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800e64e:	d205      	bcs.n	800e65c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800e650:	4b7d      	ldr	r3, [pc, #500]	@ (800e848 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e652:	4a7e      	ldr	r2, [pc, #504]	@ (800e84c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e654:	21a3      	movs	r1, #163	@ 0xa3
 800e656:	487e      	ldr	r0, [pc, #504]	@ (800e850 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e658:	f012 f8ee 	bl	8020838 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3320      	adds	r3, #32
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4610      	mov	r0, r2
 800e66c:	4798      	blx	r3
 800e66e:	4603      	mov	r3, r0
 800e670:	2b0f      	cmp	r3, #15
 800e672:	d805      	bhi.n	800e680 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e674:	4b77      	ldr	r3, [pc, #476]	@ (800e854 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e676:	4a75      	ldr	r2, [pc, #468]	@ (800e84c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e678:	21a4      	movs	r1, #164	@ 0xa4
 800e67a:	4875      	ldr	r0, [pc, #468]	@ (800e850 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e67c:	f012 f8dc 	bl	8020838 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68da      	ldr	r2, [r3, #12]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3320      	adds	r3, #32
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	4610      	mov	r0, r2
 800e690:	4798      	blx	r3
 800e692:	4603      	mov	r3, r0
 800e694:	2b0b      	cmp	r3, #11
 800e696:	d805      	bhi.n	800e6a4 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800e698:	4b6f      	ldr	r3, [pc, #444]	@ (800e858 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e69a:	4a6c      	ldr	r2, [pc, #432]	@ (800e84c <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e69c:	21a5      	movs	r1, #165	@ 0xa5
 800e69e:	486c      	ldr	r0, [pc, #432]	@ (800e850 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e6a0:	f012 f8ca 	bl	8020838 <__assert_func>
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e6b0:	f006 f8e0 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7ff fcea 	bl	800e090 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d008      	beq.n	800e6d6 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800e6c4:	6a3b      	ldr	r3, [r7, #32]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	330c      	adds	r3, #12
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4798      	blx	r3
    if (*currentTrans)
 800e6d6:	6a3b      	ldr	r3, [r7, #32]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	6a3b      	ldr	r3, [r7, #32]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	4798      	blx	r3
    if (*currentScreen)
 800e6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d008      	beq.n	800e708 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800e6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3314      	adds	r3, #20
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4610      	mov	r0, r2
 800e706:	4798      	blx	r3
    if (*currentPresenter)
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d008      	beq.n	800e722 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800e710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3304      	adds	r3, #4
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4610      	mov	r0, r2
 800e720:	4798      	blx	r3
    if (*currentScreen)
 800e722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d007      	beq.n	800e73a <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4610      	mov	r0, r2
 800e738:	4798      	blx	r3
    if (*currentPresenter)
 800e73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d008      	beq.n	800e754 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3308      	adds	r3, #8
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4610      	mov	r0, r2
 800e752:	4798      	blx	r3
}
 800e754:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	2100      	movs	r1, #0
 800e75c:	4618      	mov	r0, r3
 800e75e:	f000 f87d 	bl	800e85c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e762:	4603      	mov	r3, r0
 800e764:	4619      	mov	r1, r3
 800e766:	200c      	movs	r0, #12
 800e768:	f7ff fbfc 	bl	800df64 <_ZnwjPv>
 800e76c:	4604      	mov	r4, r0
 800e76e:	4620      	mov	r0, r4
 800e770:	f7ff ff48 	bl	800e604 <_ZN8touchgfx12NoTransitionC1Ev>
 800e774:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	2100      	movs	r1, #0
 800e77c:	4618      	mov	r0, r3
 800e77e:	f000 f880 	bl	800e882 <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>
 800e782:	4603      	mov	r3, r0
 800e784:	4619      	mov	r1, r3
 800e786:	f44f 709c 	mov.w	r0, #312	@ 0x138
 800e78a:	f7ff fbeb 	bl	800df64 <_ZnwjPv>
 800e78e:	4604      	mov	r4, r0
 800e790:	4620      	mov	r0, r4
 800e792:	f001 fb8d 	bl	800feb0 <_ZN14mainScreenViewC1Ev>
 800e796:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	2100      	movs	r1, #0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f000 f882 	bl	800e8a8 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	2010      	movs	r0, #16
 800e7aa:	f7ff fbdb 	bl	800df64 <_ZnwjPv>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f001 fab4 	bl	800fd20 <_ZN19mainScreenPresenterC1ER14mainScreenView>
 800e7b8:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7be:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7c4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7ca:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d002      	beq.n	800e7d8 <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800e7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	e000      	b.n	800e7da <_ZN8touchgfx14makeTransitionI14mainScreenView19mainScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	4619      	mov	r1, r3
 800e7dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e7de:	f7ff fd9d 	bl	800e31c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7ff fe0a 	bl	800e402 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f000 f86b 	bl	800e8ce <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fa:	61fb      	str	r3, [r7, #28]
 800e7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fe:	61bb      	str	r3, [r7, #24]
 800e800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e802:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e804:	69fb      	ldr	r3, [r7, #28]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	330c      	adds	r3, #12
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	69f8      	ldr	r0, [r7, #28]
 800e80e:	4798      	blx	r3
    newPresenter->activate();
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	69b8      	ldr	r0, [r7, #24]
 800e818:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e81a:	6979      	ldr	r1, [r7, #20]
 800e81c:	69f8      	ldr	r0, [r7, #28]
 800e81e:	f007 fced 	bl	80161fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	3310      	adds	r3, #16
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6978      	ldr	r0, [r7, #20]
 800e82c:	4798      	blx	r3
    newTransition->invalidate();
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3314      	adds	r3, #20
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	6978      	ldr	r0, [r7, #20]
 800e838:	4798      	blx	r3
}
 800e83a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e83e:	4618      	mov	r0, r3
 800e840:	373c      	adds	r7, #60	@ 0x3c
 800e842:	46bd      	mov	sp, r7
 800e844:	bd90      	pop	{r4, r7, pc}
 800e846:	bf00      	nop
 800e848:	08021978 	.word	0x08021978
 800e84c:	08021a08 	.word	0x08021a08
 800e850:	08021ae0 	.word	0x08021ae0
 800e854:	08021b24 	.word	0x08021b24
 800e858:	08021bc8 	.word	0x08021bc8

0800e85c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	3324      	adds	r3, #36	@ 0x24
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	887a      	ldrh	r2, [r7, #2]
 800e872:	4611      	mov	r1, r2
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	4798      	blx	r3
 800e878:	4603      	mov	r3, r0
    }
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <_ZN8touchgfx17AbstractPartition2atI14mainScreenViewEERT_t>:
    T& at(const uint16_t index)
 800e882:	b580      	push	{r7, lr}
 800e884:	b082      	sub	sp, #8
 800e886:	af00      	add	r7, sp, #0
 800e888:	6078      	str	r0, [r7, #4]
 800e88a:	460b      	mov	r3, r1
 800e88c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	3324      	adds	r3, #36	@ 0x24
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	887a      	ldrh	r2, [r7, #2]
 800e898:	4611      	mov	r1, r2
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	4798      	blx	r3
 800e89e:	4603      	mov	r3, r0
    }
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <_ZN8touchgfx17AbstractPartition2atI19mainScreenPresenterEERT_t>:
    T& at(const uint16_t index)
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	3324      	adds	r3, #36	@ 0x24
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	887a      	ldrh	r2, [r7, #2]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	4798      	blx	r3
 800e8c4:	4603      	mov	r3, r0
    }
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3708      	adds	r7, #8
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}

0800e8ce <_ZN8touchgfx4ViewI19mainScreenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e8ce:	b480      	push	{r7}
 800e8d0:	b083      	sub	sp, #12
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
 800e8d6:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800e8de:	bf00      	nop
 800e8e0:	370c      	adds	r7, #12
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
	...

0800e8ec <_ZN8touchgfx12NoTransitionD1Ev>:
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	4a05      	ldr	r2, [pc, #20]	@ (800e90c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7ff fc33 	bl	800e168 <_ZN8touchgfx10TransitionD1Ev>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	0802252c 	.word	0x0802252c

0800e910 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff ffe7 	bl	800e8ec <_ZN8touchgfx12NoTransitionD1Ev>
 800e91e:	210c      	movs	r1, #12
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f011 ff5a 	bl	80207da <_ZdlPvj>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	4a05      	ldr	r2, [pc, #20]	@ (800e950 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4618      	mov	r0, r3
 800e942:	f7ff fbb3 	bl	800e0ac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	080225a4 	.word	0x080225a4

0800e954 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff ffe7 	bl	800e930 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e962:	2110      	movs	r1, #16
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f011 ff38 	bl	80207da <_ZdlPvj>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	68d2      	ldr	r2, [r2, #12]
 800e984:	1052      	asrs	r2, r2, #1
 800e986:	1899      	adds	r1, r3, r2
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	f003 0301 	and.w	r3, r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	d102      	bne.n	800e99a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	e00a      	b.n	800e9b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	68d2      	ldr	r2, [r2, #12]
 800e9a2:	1052      	asrs	r2, r2, #1
 800e9a4:	4413      	add	r3, r2
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	6892      	ldr	r2, [r2, #8]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4798      	blx	r3
    }
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d010      	beq.n	800e9ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	689b      	ldr	r3, [r3, #8]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d107      	bne.n	800e9e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	f003 0301 	and.w	r3, r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e000      	b.n	800e9e6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d001      	beq.n	800e9ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e000      	b.n	800e9f0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e9ee:	2300      	movs	r3, #0
    }
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
        : color(col)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	601a      	str	r2, [r3, #0]
    {
    }
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	801a      	strh	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	805a      	strh	r2, [r3, #2]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	809a      	strh	r2, [r3, #4]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	80da      	strh	r2, [r3, #6]
    {
    }
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	887a      	ldrh	r2, [r7, #2]
 800ea58:	801a      	strh	r2, [r3, #0]
    {
    }
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800ea70:	4a14      	ldr	r2, [pc, #80]	@ (800eac4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	601a      	str	r2, [r3, #0]
        : rect(),
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	3304      	adds	r3, #4
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff ffcd 	bl	800ea1a <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	330c      	adds	r3, #12
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff ffc8 	bl	800ea1a <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4618      	mov	r0, r3
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	08023148 	.word	0x08023148

0800eac8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
    {
 800ead0:	4a04      	ldr	r2, [pc, #16]	@ (800eae4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
    }
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	08023148 	.word	0x08023148

0800eae8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
    }
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff ffe9 	bl	800eac8 <_ZN8touchgfx8DrawableD1Ev>
 800eaf6:	2128      	movs	r1, #40	@ 0x28
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f011 fe6e 	bl	80207da <_ZdlPvj>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4618      	mov	r0, r3
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d005      	beq.n	800eb26 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3314      	adds	r3, #20
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	4798      	blx	r3
        }
    }
 800eb26:	bf00      	nop
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800eb36:	2300      	movs	r3, #0
    }
 800eb38:	4618      	mov	r0, r3
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60f8      	str	r0, [r7, #12]
 800eb4c:	4608      	mov	r0, r1
 800eb4e:	4611      	mov	r1, r2
 800eb50:	461a      	mov	r2, r3
 800eb52:	4603      	mov	r3, r0
 800eb54:	817b      	strh	r3, [r7, #10]
 800eb56:	460b      	mov	r3, r1
 800eb58:	813b      	strh	r3, [r7, #8]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800eb5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800eb62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800eb66:	4619      	mov	r1, r3
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f000 f82a 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800eb6e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800eb72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eb76:	4619      	mov	r1, r3
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f000 f87e 	bl	800ec7a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800eb86:	b480      	push	{r7}
 800eb88:	b083      	sub	sp, #12
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	887a      	ldrh	r2, [r7, #2]
 800eb96:	809a      	strh	r2, [r3, #4]
    }
 800eb98:	bf00      	nop
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	887a      	ldrh	r2, [r7, #2]
 800ebb4:	80da      	strh	r2, [r3, #6]
    }
 800ebb6:	bf00      	nop
 800ebb8:	370c      	adds	r7, #12
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	807b      	strh	r3, [r7, #2]
 800ebce:	4613      	mov	r3, r2
 800ebd0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	3330      	adds	r3, #48	@ 0x30
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ebde:	4611      	mov	r1, r2
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	4798      	blx	r3
        setY(y);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	3334      	adds	r3, #52	@ 0x34
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
    }
 800ebf6:	bf00      	nop
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ebfe:	b480      	push	{r7}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	460b      	mov	r3, r1
 800ec08:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	887a      	ldrh	r2, [r7, #2]
 800ec0e:	811a      	strh	r2, [r3, #8]
    }
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	887a      	ldrh	r2, [r7, #2]
 800ec2c:	815a      	strh	r2, [r3, #10]
    }
 800ec2e:	bf00      	nop
 800ec30:	370c      	adds	r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr

0800ec3a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ec3a:	b480      	push	{r7}
 800ec3c:	b083      	sub	sp, #12
 800ec3e:	af00      	add	r7, sp, #0
 800ec40:	6078      	str	r0, [r7, #4]
    {
    }
 800ec42:	bf00      	nop
 800ec44:	370c      	adds	r7, #12
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ec4e:	b480      	push	{r7}
 800ec50:	b083      	sub	sp, #12
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ec6e:	bf00      	nop
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800ec7a:	b580      	push	{r7, lr}
 800ec7c:	b082      	sub	sp, #8
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	460b      	mov	r3, r1
 800ec84:	807b      	strh	r3, [r7, #2]
 800ec86:	4613      	mov	r3, r2
 800ec88:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	3338      	adds	r3, #56	@ 0x38
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ec96:	4611      	mov	r1, r2
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	4798      	blx	r3
        setHeight(height);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	333c      	adds	r3, #60	@ 0x3c
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eca8:	4611      	mov	r1, r2
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	4798      	blx	r3
    }
 800ecae:	bf00      	nop
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ecb6:	b480      	push	{r7}
 800ecb8:	b083      	sub	sp, #12
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ecc0:	bf00      	nop
 800ecc2:	370c      	adds	r7, #12
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr

0800eccc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
    {
    }
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	460b      	mov	r3, r1
 800ecea:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	78fa      	ldrb	r2, [r7, #3]
 800ecf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800ed0e:	4618      	mov	r0, r3
 800ed10:	370c      	adds	r7, #12
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800ed28:	4618      	mov	r0, r3
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	807b      	strh	r3, [r7, #2]
 800ed40:	4613      	mov	r3, r2
 800ed42:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	3354      	adds	r3, #84	@ 0x54
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	8879      	ldrh	r1, [r7, #2]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ed54:	b292      	uxth	r2, r2
 800ed56:	1a8a      	subs	r2, r1, r2
 800ed58:	b292      	uxth	r2, r2
 800ed5a:	b210      	sxth	r0, r2
 800ed5c:	8839      	ldrh	r1, [r7, #0]
 800ed5e:	687a      	ldr	r2, [r7, #4]
 800ed60:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ed64:	b292      	uxth	r2, r2
 800ed66:	1a8a      	subs	r2, r1, r2
 800ed68:	b292      	uxth	r2, r2
 800ed6a:	b212      	sxth	r2, r2
 800ed6c:	4601      	mov	r1, r0
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	4798      	blx	r3
    }
 800ed72:	bf00      	nop
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ed7a:	b480      	push	{r7}
 800ed7c:	b083      	sub	sp, #12
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed88:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed90:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed98:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800ed9a:	bf00      	nop
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr

0800eda6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800eda6:	b580      	push	{r7, lr}
 800eda8:	b084      	sub	sp, #16
 800edaa:	af00      	add	r7, sp, #0
 800edac:	60f8      	str	r0, [r7, #12]
 800edae:	60b9      	str	r1, [r7, #8]
 800edb0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7ff ffe1 	bl	800ed7a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68fa      	ldr	r2, [r7, #12]
 800edc4:	601a      	str	r2, [r3, #0]
    }
 800edc6:	bf00      	nop
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800edce:	b580      	push	{r7, lr}
 800edd0:	b084      	sub	sp, #16
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	60f8      	str	r0, [r7, #12]
 800edd6:	607b      	str	r3, [r7, #4]
 800edd8:	460b      	mov	r3, r1
 800edda:	817b      	strh	r3, [r7, #10]
 800eddc:	4613      	mov	r3, r2
 800edde:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff ff8c 	bl	800ed00 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d008      	beq.n	800ee00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff ff92 	bl	800ed1a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d001      	beq.n	800ee00 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800edfc:	2301      	movs	r3, #1
 800edfe:	e000      	b.n	800ee02 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ee00:	2300      	movs	r3, #0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d002      	beq.n	800ee0c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	601a      	str	r2, [r3, #0]
        }
    }
 800ee0c:	bf00      	nop
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b082      	sub	sp, #8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
    {
 800ee1c:	4a06      	ldr	r2, [pc, #24]	@ (800ee38 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	601a      	str	r2, [r3, #0]
    }
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	3304      	adds	r3, #4
 800ee26:	4618      	mov	r0, r3
 800ee28:	f000 fbe0 	bl	800f5ec <_ZN8touchgfx9ContainerD1Ev>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	08023254 	.word	0x08023254

0800ee3c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
    }
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff ffe5 	bl	800ee14 <_ZN8touchgfx6ScreenD1Ev>
 800ee4a:	213c      	movs	r1, #60	@ 0x3c
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f011 fcc4 	bl	80207da <_ZdlPvj>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
    {
    }
 800ee64:	bf00      	nop
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr

0800ee70 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ee70:	b480      	push	{r7}
 800ee72:	b083      	sub	sp, #12
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
    {
    }
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    {
    }
 800ee8c:	bf00      	nop
 800ee8e:	370c      	adds	r7, #12
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr

0800ee98 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
    {
    }
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	3304      	adds	r3, #4
 800eed2:	6839      	ldr	r1, [r7, #0]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f003 f973 	bl	80121c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
	...

0800eee4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f7ff fdba 	bl	800ea68 <_ZN8touchgfx8DrawableC1Ev>
 800eef4:	4a03      	ldr	r2, [pc, #12]	@ (800ef04 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	601a      	str	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	08022710 	.word	0x08022710

0800ef08 <_ZN8touchgfx6WidgetD1Ev>:
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	4a05      	ldr	r2, [pc, #20]	@ (800ef28 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7ff fdd5 	bl	800eac8 <_ZN8touchgfx8DrawableD1Ev>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4618      	mov	r0, r3
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	08022710 	.word	0x08022710

0800ef2c <_ZN8touchgfx6WidgetD0Ev>:
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff ffe7 	bl	800ef08 <_ZN8touchgfx6WidgetD1Ev>
 800ef3a:	2128      	movs	r1, #40	@ 0x28
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f011 fc4c 	bl	80207da <_ZdlPvj>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4618      	mov	r0, r3
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4618      	mov	r0, r3
 800ef58:	2326      	movs	r3, #38	@ 0x26
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f011 fe72 	bl	8020c46 <memset>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff ffbd 	bl	800eee4 <_ZN8touchgfx6WidgetC1Ev>
 800ef6a:	4a09      	ldr	r2, [pc, #36]	@ (800ef90 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	601a      	str	r2, [r3, #0]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	22ff      	movs	r2, #255	@ 0xff
 800ef74:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3328      	adds	r3, #40	@ 0x28
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7ff fd3c 	bl	800e9fc <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	08022f54 	.word	0x08022f54

0800ef94 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	4618      	mov	r0, r3
 800efbe:	2326      	movs	r3, #38	@ 0x26
 800efc0:	461a      	mov	r2, r3
 800efc2:	2100      	movs	r1, #0
 800efc4:	f011 fe3f 	bl	8020c46 <memset>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff ff8a 	bl	800eee4 <_ZN8touchgfx6WidgetC1Ev>
 800efd0:	4a09      	ldr	r2, [pc, #36]	@ (800eff8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	8812      	ldrh	r2, [r2, #0]
 800efdc:	84da      	strh	r2, [r3, #38]	@ 0x26
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	22ff      	movs	r2, #255	@ 0xff
 800efe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f004 fb9d 	bl	8013728 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08023030 	.word	0x08023030

0800effc <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4618      	mov	r0, r3
 800f008:	2326      	movs	r3, #38	@ 0x26
 800f00a:	461a      	mov	r2, r3
 800f00c:	2100      	movs	r1, #0
 800f00e:	f011 fe1a 	bl	8020c46 <memset>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4618      	mov	r0, r3
 800f016:	f7ff ff65 	bl	800eee4 <_ZN8touchgfx6WidgetC1Ev>
 800f01a:	4a0a      	ldr	r2, [pc, #40]	@ (800f044 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	601a      	str	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	629a      	str	r2, [r3, #40]	@ 0x28
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2101      	movs	r1, #1
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fe54 	bl	800ece0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	08022e70 	.word	0x08022e70

0800f048 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	4a05      	ldr	r2, [pc, #20]	@ (800f084 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	601a      	str	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff ff47 	bl	800ef08 <_ZN8touchgfx6WidgetD1Ev>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4618      	mov	r0, r3
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	08022e70 	.word	0x08022e70

0800f088 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f7ff ffe7 	bl	800f064 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f096:	2130      	movs	r1, #48	@ 0x30
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f011 fb9e 	bl	80207da <_ZdlPvj>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff ffa2 	bl	800effc <_ZN8touchgfx14AbstractButtonC1Ev>
 800f0b8:	4a0c      	ldr	r2, [pc, #48]	@ (800f0ec <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	601a      	str	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	332e      	adds	r3, #46	@ 0x2e
 800f0c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7ff fcbe 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	3330      	adds	r3, #48	@ 0x30
 800f0d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7ff fcb7 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	22ff      	movs	r2, #255	@ 0xff
 800f0de:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	08022fbc 	.word	0x08022fbc

0800f0f0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	8812      	ldrh	r2, [r2, #0]
 800f102:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	68b9      	ldr	r1, [r7, #8]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f004 fa62 	bl	80135d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800f110:	bf00      	nop
 800f112:	3710      	adds	r7, #16
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <_ZN18mainScreenViewBase14updateLedStateEv>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void updateLedState()
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in mainScreen
    }
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>:
class View : public Screen
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	4a05      	ldr	r2, [pc, #20]	@ (800f14c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev+0x20>)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff fe69 	bl	800ee14 <_ZN8touchgfx6ScreenD1Ev>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	080226c4 	.word	0x080226c4

0800f150 <_ZN8touchgfx4ViewI19mainScreenPresenterED0Ev>:
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7ff ffe7 	bl	800f12c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f15e:	2140      	movs	r1, #64	@ 0x40
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f011 fb3a 	bl	80207da <_ZdlPvj>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	4a05      	ldr	r2, [pc, #20]	@ (800f190 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	601a      	str	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4618      	mov	r0, r3
 800f182:	f7ff ff6f 	bl	800f064 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	08022fbc 	.word	0x08022fbc

0800f194 <_ZN8touchgfx6ButtonD0Ev>:
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff ffe7 	bl	800f170 <_ZN8touchgfx6ButtonD1Ev>
 800f1a2:	2134      	movs	r1, #52	@ 0x34
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f011 fb18 	bl	80207da <_ZdlPvj>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3708      	adds	r7, #8
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff ff72 	bl	800f0a8 <_ZN8touchgfx6ButtonC1Ev>
 800f1c4:	4a07      	ldr	r2, [pc, #28]	@ (800f1e4 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	601a      	str	r2, [r3, #0]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	3334      	adds	r3, #52	@ 0x34
 800f1ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff fc38 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	08022ee0 	.word	0x08022ee0

0800f1e8 <_ZN18mainScreenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/mainScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

mainScreenViewBase::mainScreenViewBase() :
 800f1e8:	b590      	push	{r4, r7, lr}
 800f1ea:	b091      	sub	sp, #68	@ 0x44
 800f1ec:	af02      	add	r7, sp, #8
 800f1ee:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &mainScreenViewBase::buttonCallbackHandler)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 f972 	bl	800f4dc <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>
 800f1f8:	4a85      	ldr	r2, [pc, #532]	@ (800f410 <_ZN18mainScreenViewBaseC1Ev+0x228>)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	3340      	adds	r3, #64	@ 0x40
 800f202:	4618      	mov	r0, r3
 800f204:	f7ff fea2 	bl	800ef4c <_ZN8touchgfx3BoxC1Ev>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800f20e:	f107 0308 	add.w	r3, r7, #8
 800f212:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff fc16 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f21c:	f107 0308 	add.w	r3, r7, #8
 800f220:	4619      	mov	r1, r3
 800f222:	4620      	mov	r0, r4
 800f224:	f7ff fec4 	bl	800efb0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f22e:	f107 030c 	add.w	r3, r7, #12
 800f232:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff fc06 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f23c:	f107 030c 	add.w	r3, r7, #12
 800f240:	4619      	mov	r1, r3
 800f242:	4620      	mov	r0, r4
 800f244:	f7ff feb4 	bl	800efb0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800f24e:	f107 0310 	add.w	r3, r7, #16
 800f252:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fbf6 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f25c:	f107 0310 	add.w	r3, r7, #16
 800f260:	4619      	mov	r1, r3
 800f262:	4620      	mov	r0, r4
 800f264:	f7ff fea4 	bl	800efb0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	33f0      	adds	r3, #240	@ 0xf0
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7ff ffa1 	bl	800f1b4 <_ZN8touchgfx12ToggleButtonC1Ev>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 800f278:	4b66      	ldr	r3, [pc, #408]	@ (800f414 <_ZN18mainScreenViewBaseC1Ev+0x22c>)
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	2300      	movs	r3, #0
 800f27e:	61bb      	str	r3, [r7, #24]
 800f280:	f107 0314 	add.w	r3, r7, #20
 800f284:	cb0c      	ldmia	r3, {r2, r3}
 800f286:	6879      	ldr	r1, [r7, #4]
 800f288:	f000 f94e 	bl	800f528 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800f292:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800f29c:	2200      	movs	r2, #0
 800f29e:	2100      	movs	r1, #0
 800f2a0:	f7ff fc50 	bl	800eb44 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f2c0:	041a      	lsls	r2, r3, #16
 800f2c2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f2c6:	021b      	lsls	r3, r3, #8
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f2d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f2d8:	4611      	mov	r1, r2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff fb8e 	bl	800e9fc <_ZN8touchgfx9colortypeC1Em>
 800f2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff fe55 	bl	800ef94 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3340      	adds	r3, #64	@ 0x40
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	f7ff fde6 	bl	800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    backGround.setXY(0, 0);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	336c      	adds	r3, #108	@ 0x6c
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2100      	movs	r1, #0
 800f300:	4618      	mov	r0, r3
 800f302:	f7ff fc5e 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
    backGround.setBitmap(touchgfx::Bitmap(BITMAP_LIGHT_THEME_IMAGES_BACKGROUNDS_480X272_SUBTLE_SHIFT_ID));
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 800f30c:	f107 031c 	add.w	r3, r7, #28
 800f310:	2104      	movs	r1, #4
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff fb98 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f318:	f107 031c 	add.w	r3, r7, #28
 800f31c:	4619      	mov	r1, r3
 800f31e:	4620      	mov	r0, r4
 800f320:	f004 fa02 	bl	8013728 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(backGround);
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	336c      	adds	r3, #108	@ 0x6c
 800f32a:	4619      	mov	r1, r3
 800f32c:	4610      	mov	r0, r2
 800f32e:	f7ff fdc9 	bl	800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    LedOff.setXY(66, 72);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3398      	adds	r3, #152	@ 0x98
 800f336:	2248      	movs	r2, #72	@ 0x48
 800f338:	2142      	movs	r1, #66	@ 0x42
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7ff fc41 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
    LedOff.setBitmap(touchgfx::Bitmap(BITMAP_LEDOFF_ID));
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800f346:	f107 0320 	add.w	r3, r7, #32
 800f34a:	2102      	movs	r1, #2
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7ff fb7b 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f352:	f107 0320 	add.w	r3, r7, #32
 800f356:	4619      	mov	r1, r3
 800f358:	4620      	mov	r0, r4
 800f35a:	f004 f9e5 	bl	8013728 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(LedOff);
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	3398      	adds	r3, #152	@ 0x98
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f7ff fdac 	bl	800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    LedOn.setXY(66, 62);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	33c4      	adds	r3, #196	@ 0xc4
 800f370:	223e      	movs	r2, #62	@ 0x3e
 800f372:	2142      	movs	r1, #66	@ 0x42
 800f374:	4618      	mov	r0, r3
 800f376:	f7ff fc24 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
    LedOn.setBitmap(touchgfx::Bitmap(BITMAP_LEDON_ID));
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800f380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f384:	2103      	movs	r1, #3
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fb5e 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f38c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f390:	4619      	mov	r1, r3
 800f392:	4620      	mov	r0, r4
 800f394:	f004 f9c8 	bl	8013728 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(LedOn);
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	33c4      	adds	r3, #196	@ 0xc4
 800f39e:	4619      	mov	r1, r3
 800f3a0:	4610      	mov	r0, r2
 800f3a2:	f7ff fd8f 	bl	800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    toggleLed.setXY(263, 111);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	33f0      	adds	r3, #240	@ 0xf0
 800f3aa:	226f      	movs	r2, #111	@ 0x6f
 800f3ac:	f240 1107 	movw	r1, #263	@ 0x107
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff fc06 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
    toggleLed.setBitmaps(touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_ON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_CLAY_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_MEDIUM_ROUNDED_TEXT_OFF_NORMAL_ID));
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800f3bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f3c0:	2101      	movs	r1, #1
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7ff fb40 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f3c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7ff fb3a 	bl	800ea48 <_ZN8touchgfx6BitmapC1Et>
 800f3d4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f3d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f7ff fe86 	bl	800f0f0 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleLed.setAction(buttonCallback);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	4610      	mov	r0, r2
 800f3f4:	f7ff fe28 	bl	800f048 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(toggleLed);
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	33f0      	adds	r3, #240	@ 0xf0
 800f3fe:	4619      	mov	r1, r3
 800f400:	4610      	mov	r0, r2
 800f402:	f7ff fd5f 	bl	800eec4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	373c      	adds	r7, #60	@ 0x3c
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd90      	pop	{r4, r7, pc}
 800f410:	08022674 	.word	0x08022674
 800f414:	0800f4b3 	.word	0x0800f4b3

0800f418 <_ZN18mainScreenViewBaseD1Ev>:

mainScreenViewBase::~mainScreenViewBase()
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	4a15      	ldr	r2, [pc, #84]	@ (800f478 <_ZN18mainScreenViewBaseD1Ev+0x60>)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	601a      	str	r2, [r3, #0]
{

}
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800f42c:	4618      	mov	r0, r3
 800f42e:	f000 f8bb 	bl	800f5a8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	33f0      	adds	r3, #240	@ 0xf0
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f93e 	bl	800f6b8 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	33c4      	adds	r3, #196	@ 0xc4
 800f440:	4618      	mov	r0, r3
 800f442:	f000 f917 	bl	800f674 <_ZN8touchgfx5ImageD1Ev>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	3398      	adds	r3, #152	@ 0x98
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 f912 	bl	800f674 <_ZN8touchgfx5ImageD1Ev>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	336c      	adds	r3, #108	@ 0x6c
 800f454:	4618      	mov	r0, r3
 800f456:	f000 f90d 	bl	800f674 <_ZN8touchgfx5ImageD1Ev>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3340      	adds	r3, #64	@ 0x40
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 f8e6 	bl	800f630 <_ZN8touchgfx3BoxD1Ev>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff fe60 	bl	800f12c <_ZN8touchgfx4ViewI19mainScreenPresenterED1Ev>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4618      	mov	r0, r3
 800f470:	3708      	adds	r7, #8
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	08022674 	.word	0x08022674

0800f47c <_ZN18mainScreenViewBaseD0Ev>:
mainScreenViewBase::~mainScreenViewBase()
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
}
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f7ff ffc7 	bl	800f418 <_ZN18mainScreenViewBaseD1Ev>
 800f48a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f011 f9a3 	bl	80207da <_ZdlPvj>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4618      	mov	r0, r3
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}

0800f49e <_ZN18mainScreenViewBase11setupScreenEv>:

void mainScreenViewBase::setupScreen()
{
 800f49e:	b480      	push	{r7}
 800f4a0:	b083      	sub	sp, #12
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]

}
 800f4a6:	bf00      	nop
 800f4a8:	370c      	adds	r7, #12
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr

0800f4b2 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void mainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800f4b2:	b580      	push	{r7, lr}
 800f4b4:	b082      	sub	sp, #8
 800f4b6:	af00      	add	r7, sp, #0
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	6039      	str	r1, [r7, #0]
    if (&src == &toggleLed)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	33f0      	adds	r3, #240	@ 0xf0
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d105      	bne.n	800f4d2 <_ZN18mainScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x20>
    {
        //Interaction
        //When toggleLed clicked call virtual function
        //Call updateLedState
        updateLedState();
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	332c      	adds	r3, #44	@ 0x2c
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	4798      	blx	r3
    }
}
 800f4d2:	bf00      	nop
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
	...

0800f4dc <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev>:
    View()
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b082      	sub	sp, #8
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f006 fcdc 	bl	8015ea4 <_ZN8touchgfx6ScreenC1Ev>
 800f4ec:	4a05      	ldr	r2, [pc, #20]	@ (800f504 <_ZN8touchgfx4ViewI19mainScreenPresenterEC1Ev+0x28>)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	080226c4 	.word	0x080226c4

0800f508 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f508:	b480      	push	{r7}
 800f50a:	b083      	sub	sp, #12
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	4a04      	ldr	r2, [pc, #16]	@ (800f524 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	4618      	mov	r0, r3
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	080226f8 	.word	0x080226f8

0800f528 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	4639      	mov	r1, r7
 800f534:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff ffe4 	bl	800f508 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f540:	4a08      	ldr	r2, [pc, #32]	@ (800f564 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	68ba      	ldr	r2, [r7, #8]
 800f54a:	605a      	str	r2, [r3, #4]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	3308      	adds	r3, #8
 800f550:	463a      	mov	r2, r7
 800f552:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f556:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	4618      	mov	r0, r3
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	080226ac 	.word	0x080226ac

0800f568 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
    }
 800f570:	4a04      	ldr	r2, [pc, #16]	@ (800f584 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	601a      	str	r2, [r3, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4618      	mov	r0, r3
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	080226f8 	.word	0x080226f8

0800f588 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
    }
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff ffe9 	bl	800f568 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f596:	2104      	movs	r1, #4
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f011 f91e 	bl	80207da <_ZdlPvj>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3708      	adds	r7, #8
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	4a05      	ldr	r2, [pc, #20]	@ (800f5c8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	601a      	str	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff ffd5 	bl	800f568 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	080226ac 	.word	0x080226ac

0800f5cc <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7ff ffe7 	bl	800f5a8 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f5da:	2110      	movs	r1, #16
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f011 f8fc 	bl	80207da <_ZdlPvj>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	4a05      	ldr	r2, [pc, #20]	@ (800f60c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fa63 	bl	800eac8 <_ZN8touchgfx8DrawableD1Ev>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	3708      	adds	r7, #8
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	08022c88 	.word	0x08022c88

0800f610 <_ZN8touchgfx9ContainerD0Ev>:
 800f610:	b580      	push	{r7, lr}
 800f612:	b082      	sub	sp, #8
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff ffe7 	bl	800f5ec <_ZN8touchgfx9ContainerD1Ev>
 800f61e:	212c      	movs	r1, #44	@ 0x2c
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f011 f8da 	bl	80207da <_ZdlPvj>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	4a05      	ldr	r2, [pc, #20]	@ (800f650 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4618      	mov	r0, r3
 800f642:	f7ff fc61 	bl	800ef08 <_ZN8touchgfx6WidgetD1Ev>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	08022f54 	.word	0x08022f54

0800f654 <_ZN8touchgfx3BoxD0Ev>:
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff ffe7 	bl	800f630 <_ZN8touchgfx3BoxD1Ev>
 800f662:	212c      	movs	r1, #44	@ 0x2c
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f011 f8b8 	bl	80207da <_ZdlPvj>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	4a05      	ldr	r2, [pc, #20]	@ (800f694 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	601a      	str	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	f7ff fc3f 	bl	800ef08 <_ZN8touchgfx6WidgetD1Ev>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4618      	mov	r0, r3
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	08023030 	.word	0x08023030

0800f698 <_ZN8touchgfx5ImageD0Ev>:
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7ff ffe7 	bl	800f674 <_ZN8touchgfx5ImageD1Ev>
 800f6a6:	212c      	movs	r1, #44	@ 0x2c
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f011 f896 	bl	80207da <_ZdlPvj>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <_ZN8touchgfx12ToggleButtonD1Ev>:
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	4a05      	ldr	r2, [pc, #20]	@ (800f6d8 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7ff fd51 	bl	800f170 <_ZN8touchgfx6ButtonD1Ev>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	08022ee0 	.word	0x08022ee0

0800f6dc <_ZN8touchgfx12ToggleButtonD0Ev>:
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff ffe7 	bl	800f6b8 <_ZN8touchgfx12ToggleButtonD1Ev>
 800f6ea:	2138      	movs	r1, #56	@ 0x38
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f011 f874 	bl	80207da <_ZdlPvj>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	687a      	ldr	r2, [r7, #4]
 800f70c:	68d2      	ldr	r2, [r2, #12]
 800f70e:	1052      	asrs	r2, r2, #1
 800f710:	1898      	adds	r0, r3, r2
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68db      	ldr	r3, [r3, #12]
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d102      	bne.n	800f724 <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	e00a      	b.n	800f73a <_ZN8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	685b      	ldr	r3, [r3, #4]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	68d2      	ldr	r2, [r2, #12]
 800f72c:	1052      	asrs	r2, r2, #1
 800f72e:	4413      	add	r3, r2
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	6892      	ldr	r2, [r2, #8]
 800f736:	4413      	add	r3, r2
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	4798      	blx	r3
    }
 800f73e:	bf00      	nop
 800f740:	3708      	adds	r7, #8
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f746:	b480      	push	{r7}
 800f748:	b083      	sub	sp, #12
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d010      	beq.n	800f778 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d107      	bne.n	800f76e <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f76a:	2301      	movs	r3, #1
 800f76c:	e000      	b.n	800f770 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f76e:	2300      	movs	r3, #0
 800f770:	2b01      	cmp	r3, #1
 800f772:	d001      	beq.n	800f778 <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f774:	2301      	movs	r3, #1
 800f776:	e000      	b.n	800f77a <_ZNK8touchgfx8CallbackI18mainScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f778:	2300      	movs	r3, #0
    }
 800f77a:	4618      	mov	r0, r3
 800f77c:	370c      	adds	r7, #12
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
	...

0800f788 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800f788:	b480      	push	{r7}
 800f78a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800f78c:	4b02      	ldr	r3, [pc, #8]	@ (800f798 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800f78e:	4618      	mov	r0, r3
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr
 800f798:	08022770 	.word	0x08022770

0800f79c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800f79c:	b480      	push	{r7}
 800f79e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800f7a0:	2305      	movs	r3, #5
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f7ac:	b480      	push	{r7}
 800f7ae:	b085      	sub	sp, #20
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	607a      	str	r2, [r7, #4]
 800f7b8:	817b      	strh	r3, [r7, #10]
        return 0;
 800f7ba:	2300      	movs	r3, #0
    }
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3714      	adds	r7, #20
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c6:	4770      	bx	lr

0800f7c8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 800f7c8:	b480      	push	{r7}
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
        return 0;
 800f7d0:	2300      	movs	r3, #0
    }
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	370c      	adds	r7, #12
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr

0800f7de <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f7de:	b480      	push	{r7}
 800f7e0:	b083      	sub	sp, #12
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
        return 0;
 800f7e6:	2300      	movs	r3, #0
    }
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	370c      	adds	r7, #12
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4613      	mov	r3, r2
 800f800:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f802:	4a07      	ldr	r2, [pc, #28]	@ (800f820 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f808:	4a06      	ldr	r2, [pc, #24]	@ (800f824 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f80e:	4a06      	ldr	r2, [pc, #24]	@ (800f828 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f810:	88fb      	ldrh	r3, [r7, #6]
 800f812:	8013      	strh	r3, [r2, #0]
    }
 800f814:	bf00      	nop
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	2401b598 	.word	0x2401b598
 800f824:	2401b5a0 	.word	0x2401b5a0
 800f828:	2401b59c 	.word	0x2401b59c

0800f82c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f82c:	b40e      	push	{r1, r2, r3}
 800f82e:	b580      	push	{r7, lr}
 800f830:	b085      	sub	sp, #20
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f836:	f107 0320 	add.w	r3, r7, #32
 800f83a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	69fa      	ldr	r2, [r7, #28]
 800f840:	2100      	movs	r1, #0
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f005 ff64 	bl	8015710 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f848:	4603      	mov	r3, r0
 800f84a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f84c:	89fb      	ldrh	r3, [r7, #14]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f858:	b003      	add	sp, #12
 800f85a:	4770      	bx	lr

0800f85c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f85c:	b40c      	push	{r2, r3}
 800f85e:	b580      	push	{r7, lr}
 800f860:	b084      	sub	sp, #16
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	460b      	mov	r3, r1
 800f868:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f86a:	f107 031c 	add.w	r3, r7, #28
 800f86e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f870:	78f9      	ldrb	r1, [r7, #3]
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	69ba      	ldr	r2, [r7, #24]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f005 ff4a 	bl	8015710 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f87c:	4603      	mov	r3, r0
 800f87e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f880:	89fb      	ldrh	r3, [r7, #14]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f88c:	b002      	add	sp, #8
 800f88e:	4770      	bx	lr

0800f890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b08a      	sub	sp, #40	@ 0x28
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d016      	beq.n	800f8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	3322      	adds	r3, #34	@ 0x22
 800f8a8:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ac:	8adb      	ldrh	r3, [r3, #22]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d105      	bne.n	800f8be <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f8b2:	4b43      	ldr	r3, [pc, #268]	@ (800f9c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f8b4:	4a43      	ldr	r2, [pc, #268]	@ (800f9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f8b6:	21c5      	movs	r1, #197	@ 0xc5
 800f8b8:	4843      	ldr	r0, [pc, #268]	@ (800f9c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f8ba:	f010 ffbd 	bl	8020838 <__assert_func>
            return buffer[pos];
 800f8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c0:	8a9b      	ldrh	r3, [r3, #20]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e000      	b.n	800f8d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d06a      	beq.n	800f9ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f007 f95b 	bl	8016b94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	3322      	adds	r3, #34	@ 0x22
 800f8e2:	623b      	str	r3, [r7, #32]
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	8adb      	ldrh	r3, [r3, #22]
 800f8ec:	8bfa      	ldrh	r2, [r7, #30]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d305      	bcc.n	800f8fe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f8f2:	4b36      	ldr	r3, [pc, #216]	@ (800f9cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f8f4:	4a36      	ldr	r2, [pc, #216]	@ (800f9d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f8f6:	21cb      	movs	r1, #203	@ 0xcb
 800f8f8:	4833      	ldr	r0, [pc, #204]	@ (800f9c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f8fa:	f010 ff9d 	bl	8020838 <__assert_func>
            const uint16_t index = pos + offset;
 800f8fe:	6a3b      	ldr	r3, [r7, #32]
 800f900:	8a9a      	ldrh	r2, [r3, #20]
 800f902:	8bfb      	ldrh	r3, [r7, #30]
 800f904:	4413      	add	r3, r2
 800f906:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f908:	8bbb      	ldrh	r3, [r7, #28]
 800f90a:	2b09      	cmp	r3, #9
 800f90c:	d801      	bhi.n	800f912 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f90e:	8bbb      	ldrh	r3, [r7, #28]
 800f910:	e001      	b.n	800f916 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f912:	8bbb      	ldrh	r3, [r7, #28]
 800f914:	3b0a      	subs	r3, #10
 800f916:	6a3a      	ldr	r2, [r7, #32]
 800f918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f91c:	f640 123f 	movw	r2, #2367	@ 0x93f
 800f920:	4293      	cmp	r3, r2
 800f922:	bf0c      	ite	eq
 800f924:	2301      	moveq	r3, #1
 800f926:	2300      	movne	r3, #0
 800f928:	b2db      	uxtb	r3, r3
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d03f      	beq.n	800f9ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3322      	adds	r3, #34	@ 0x22
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	3222      	adds	r2, #34	@ 0x22
 800f936:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f938:	68ba      	ldr	r2, [r7, #8]
 800f93a:	8ad2      	ldrh	r2, [r2, #22]
 800f93c:	2a00      	cmp	r2, #0
 800f93e:	d105      	bne.n	800f94c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f940:	4b1f      	ldr	r3, [pc, #124]	@ (800f9c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f942:	4a20      	ldr	r2, [pc, #128]	@ (800f9c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f944:	21c5      	movs	r1, #197	@ 0xc5
 800f946:	4820      	ldr	r0, [pc, #128]	@ (800f9c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f948:	f010 ff76 	bl	8020838 <__assert_func>
            return buffer[pos];
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	8a92      	ldrh	r2, [r2, #20]
 800f950:	4611      	mov	r1, r2
 800f952:	68ba      	ldr	r2, [r7, #8]
 800f954:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f958:	613b      	str	r3, [r7, #16]
 800f95a:	4613      	mov	r3, r2
 800f95c:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	8adb      	ldrh	r3, [r3, #22]
 800f962:	2b01      	cmp	r3, #1
 800f964:	d806      	bhi.n	800f974 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f966:	4b1b      	ldr	r3, [pc, #108]	@ (800f9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f968:	4a1b      	ldr	r2, [pc, #108]	@ (800f9d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f96a:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 800f96e:	4816      	ldr	r0, [pc, #88]	@ (800f9c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f970:	f010 ff62 	bl	8020838 <__assert_func>
            const uint16_t index = pos + 1;
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	8a9b      	ldrh	r3, [r3, #20]
 800f978:	3301      	adds	r3, #1
 800f97a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f97c:	89bb      	ldrh	r3, [r7, #12]
 800f97e:	2b09      	cmp	r3, #9
 800f980:	d801      	bhi.n	800f986 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f982:	89bb      	ldrh	r3, [r7, #12]
 800f984:	e000      	b.n	800f988 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f986:	2300      	movs	r3, #0
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	89f9      	ldrh	r1, [r7, #14]
 800f98c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f990:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3322      	adds	r3, #34	@ 0x22
 800f996:	61bb      	str	r3, [r7, #24]
 800f998:	f640 133f 	movw	r3, #2367	@ 0x93f
 800f99c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	8a9b      	ldrh	r3, [r3, #20]
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	8afa      	ldrh	r2, [r7, #22]
 800f9a8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f9ac:	bf00      	nop
        }
    }
    return getNextChar();
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f006 fff2 	bl	8016998 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f9b4:	4603      	mov	r3, r0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3728      	adds	r7, #40	@ 0x28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	08021c6c 	.word	0x08021c6c
 800f9c4:	08021c78 	.word	0x08021c78
 800f9c8:	08021d24 	.word	0x08021d24
 800f9cc:	08021d6c 	.word	0x08021d6c
 800f9d0:	08021d7c 	.word	0x08021d7c
 800f9d4:	08021e50 	.word	0x08021e50
 800f9d8:	08021e5c 	.word	0x08021e5c

0800f9dc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f006 ffa0 	bl	801692a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f9ea:	bf00      	nop
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f9f4:	b590      	push	{r4, r7, lr}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800fa02:	88fb      	ldrh	r3, [r7, #6]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d127      	bne.n	800fa58 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800fa08:	88fb      	ldrh	r3, [r7, #6]
 800fa0a:	4a1e      	ldr	r2, [pc, #120]	@ (800fa84 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d016      	beq.n	800fa42 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	4a1b      	ldr	r2, [pc, #108]	@ (800fa84 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800fa18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa1c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	4413      	add	r3, r2
 800fa26:	4a18      	ldr	r2, [pc, #96]	@ (800fa88 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800fa28:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	68ba      	ldr	r2, [r7, #8]
 800fa30:	4413      	add	r3, r2
 800fa32:	4a16      	ldr	r2, [pc, #88]	@ (800fa8c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800fa34:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	e00a      	b.n	800fa58 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800fa42:	4b11      	ldr	r3, [pc, #68]	@ (800fa88 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800fa44:	4a12      	ldr	r2, [pc, #72]	@ (800fa90 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800fa46:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800fa48:	4a12      	ldr	r2, [pc, #72]	@ (800fa94 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800fa4a:	4b10      	ldr	r3, [pc, #64]	@ (800fa8c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800fa4c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800fa4e:	88fb      	ldrh	r3, [r7, #6]
 800fa50:	4a11      	ldr	r2, [pc, #68]	@ (800fa98 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800fa52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa56:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00d      	beq.n	800fa7a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800fa5e:	4a0f      	ldr	r2, [pc, #60]	@ (800fa9c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800fa60:	88fb      	ldrh	r3, [r7, #6]
 800fa62:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800fa64:	f000 f824 	bl	800fab0 <_ZN17TypedTextDatabase8getFontsEv>
 800fa68:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800fa6a:	f000 f819 	bl	800faa0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	461a      	mov	r2, r3
 800fa72:	4621      	mov	r1, r4
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7ff febd 	bl	800f7f4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800fa7a:	bf00      	nop
 800fa7c:	3714      	adds	r7, #20
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd90      	pop	{r4, r7, pc}
 800fa82:	bf00      	nop
 800fa84:	2401a3a4 	.word	0x2401a3a4
 800fa88:	2401a3ac 	.word	0x2401a3ac
 800fa8c:	2401a3b0 	.word	0x2401a3b0
 800fa90:	900001ac 	.word	0x900001ac
 800fa94:	900001a8 	.word	0x900001a8
 800fa98:	900001b4 	.word	0x900001b4
 800fa9c:	2401a3a8 	.word	0x2401a3a8

0800faa0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
    return 0;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800fab4:	4b02      	ldr	r3, [pc, #8]	@ (800fac0 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	2401a3b4 	.word	0x2401a3b4

0800fac4 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d113      	bne.n	800fafc <_Z41__static_initialization_and_destruction_0ii+0x38>
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fada:	4293      	cmp	r3, r2
 800fadc:	d10e      	bne.n	800fafc <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800fade:	f7fe f995 	bl	800de0c <_Z23getFont_verdana_20_4bppv>
 800fae2:	4603      	mov	r3, r0
};
 800fae4:	4a07      	ldr	r2, [pc, #28]	@ (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fae6:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800fae8:	f7fe f9ea 	bl	800dec0 <_Z23getFont_verdana_40_4bppv>
 800faec:	4603      	mov	r3, r0
};
 800faee:	4a05      	ldr	r2, [pc, #20]	@ (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800faf0:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800faf2:	f7fe f931 	bl	800dd58 <_Z23getFont_verdana_10_4bppv>
 800faf6:	4603      	mov	r3, r0
};
 800faf8:	4a02      	ldr	r2, [pc, #8]	@ (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800fafa:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	2401a3b4 	.word	0x2401a3b4

0800fb08 <_GLOBAL__sub_I_touchgfx_fonts>:
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fb10:	2001      	movs	r0, #1
 800fb12:	f7ff ffd7 	bl	800fac4 <_Z41__static_initialization_and_destruction_0ii>
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	4a05      	ldr	r2, [pc, #20]	@ (800fb38 <_ZN19FrontendApplicationD1Ev+0x20>)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	601a      	str	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fe fc29 	bl	800e380 <_ZN23FrontendApplicationBaseD1Ev>
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	08022840 	.word	0x08022840

0800fb3c <_ZN19FrontendApplicationD0Ev>:
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff ffe7 	bl	800fb18 <_ZN19FrontendApplicationD1Ev>
 800fb4a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f010 fe43 	bl	80207da <_ZdlPvj>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4618      	mov	r0, r3
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b082      	sub	sp, #8
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 fa89 	bl	8010084 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f004 feff 	bl	8014978 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800fb7a:	bf00      	nop
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	687a      	ldr	r2, [r7, #4]
 800fb94:	68b9      	ldr	r1, [r7, #8]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fc42 	bl	800e420 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800fb9c:	4a03      	ldr	r2, [pc, #12]	@ (800fbac <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	601a      	str	r2, [r3, #0]
{

}
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	08022840 	.word	0x08022840

0800fbb0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
    {
    }
 800fbb8:	bf00      	nop
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
    {
    }
 800fbcc:	bf00      	nop
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800fbd8:	b480      	push	{r7}
 800fbda:	b083      	sub	sp, #12
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
    {
 800fbe0:	4a04      	ldr	r2, [pc, #16]	@ (800fbf4 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	601a      	str	r2, [r3, #0]
    }
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	370c      	adds	r7, #12
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	080228d8 	.word	0x080228d8

0800fbf8 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
    }
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7ff ffe9 	bl	800fbd8 <_ZN8touchgfx9PresenterD1Ev>
 800fc06:	2104      	movs	r1, #4
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f010 fde6 	bl	80207da <_ZdlPvj>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4618      	mov	r0, r3
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
    {
 800fc20:	4a04      	ldr	r2, [pc, #16]	@ (800fc34 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	601a      	str	r2, [r3, #0]
    }
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	080228d8 	.word	0x080228d8

0800fc38 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	4a06      	ldr	r2, [pc, #24]	@ (800fc5c <_ZN13ModelListenerC1Ev+0x24>)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	601a      	str	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	605a      	str	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	080228c4 	.word	0x080228c4

0800fc60 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	4a04      	ldr	r2, [pc, #16]	@ (800fc7c <_ZN13ModelListenerD1Ev+0x1c>)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	4618      	mov	r0, r3
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	080228c4 	.word	0x080228c4

0800fc80 <_ZN13ModelListenerD0Ev>:
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff ffe9 	bl	800fc60 <_ZN13ModelListenerD1Ev>
 800fc8e:	2108      	movs	r1, #8
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f010 fda2 	bl	80207da <_ZdlPvj>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZN13ModelListener15ledChangedStateEb>:
    virtual void ledChangedState(bool state){}
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	70fb      	strb	r3, [r7, #3]
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <_ZN19mainScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~mainScreenPresenter() {}
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	4a09      	ldr	r2, [pc, #36]	@ (800fce8 <_ZN19mainScreenPresenterD1Ev+0x30>)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	4a09      	ldr	r2, [pc, #36]	@ (800fcec <_ZN19mainScreenPresenterD1Ev+0x34>)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	605a      	str	r2, [r3, #4]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff ffc5 	bl	800fc60 <_ZN13ModelListenerD1Ev>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f7ff ff7d 	bl	800fbd8 <_ZN8touchgfx9PresenterD1Ev>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	4618      	mov	r0, r3
 800fce2:	3708      	adds	r7, #8
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	08022894 	.word	0x08022894
 800fcec:	080228b0 	.word	0x080228b0

0800fcf0 <_ZThn4_N19mainScreenPresenterD1Ev>:
 800fcf0:	f1a0 0004 	sub.w	r0, r0, #4
 800fcf4:	e7e0      	b.n	800fcb8 <_ZN19mainScreenPresenterD1Ev>
 800fcf6:	bf00      	nop

0800fcf8 <_ZN19mainScreenPresenterD0Ev>:
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f7ff ffd9 	bl	800fcb8 <_ZN19mainScreenPresenterD1Ev>
 800fd06:	2110      	movs	r1, #16
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f010 fd66 	bl	80207da <_ZdlPvj>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	4618      	mov	r0, r3
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <_ZThn4_N19mainScreenPresenterD0Ev>:
 800fd18:	f1a0 0004 	sub.w	r0, r0, #4
 800fd1c:	e7ec      	b.n	800fcf8 <_ZN19mainScreenPresenterD0Ev>
	...

0800fd20 <_ZN19mainScreenPresenterC1ER14mainScreenView>:
#include <gui/mainscreen_screen/mainScreenView.hpp>
#include <gui/mainscreen_screen/mainScreenPresenter.hpp>

mainScreenPresenter::mainScreenPresenter(mainScreenView& v)
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
    : view(v)
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff ff73 	bl	800fc18 <_ZN8touchgfx9PresenterC1Ev>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	3304      	adds	r3, #4
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff ff7e 	bl	800fc38 <_ZN13ModelListenerC1Ev>
 800fd3c:	4a06      	ldr	r2, [pc, #24]	@ (800fd58 <_ZN19mainScreenPresenterC1ER14mainScreenView+0x38>)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	4a06      	ldr	r2, [pc, #24]	@ (800fd5c <_ZN19mainScreenPresenterC1ER14mainScreenView+0x3c>)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	605a      	str	r2, [r3, #4]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	683a      	ldr	r2, [r7, #0]
 800fd4c:	60da      	str	r2, [r3, #12]
{

}
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	08022894 	.word	0x08022894
 800fd5c:	080228b0 	.word	0x080228b0

0800fd60 <_ZN19mainScreenPresenter8activateEv>:

void mainScreenPresenter::activate()
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]

}
 800fd68:	bf00      	nop
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <_ZN19mainScreenPresenter10deactivateEv>:

void mainScreenPresenter::deactivate()
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]

}
 800fd7c:	bf00      	nop
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <_ZN19mainScreenPresenter11setLedLightEb>:

void mainScreenPresenter::setLedLight(bool state)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	70fb      	strb	r3, [r7, #3]
	/* Report changed state to model */
	model->userSetLedLight(state);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	78fa      	ldrb	r2, [r7, #3]
 800fd9a:	4611      	mov	r1, r2
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f000 f999 	bl	80100d4 <_ZN5Model15userSetLedLightEb>
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <_ZN19mainScreenPresenter15ledChangedStateEb>:

void mainScreenPresenter::ledChangedState(bool state)
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b082      	sub	sp, #8
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
 800fdb2:	460b      	mov	r3, r1
 800fdb4:	70fb      	strb	r3, [r7, #3]
	view.setLedState(state);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	68da      	ldr	r2, [r3, #12]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	3330      	adds	r3, #48	@ 0x30
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	78f9      	ldrb	r1, [r7, #3]
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	4798      	blx	r3
}
 800fdca:	bf00      	nop
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZThn4_N19mainScreenPresenter15ledChangedStateEb>:

    /* Get from View */
    void setLedLight(bool state);

    virtual void ledChangedState(bool state);
 800fdd2:	f1a0 0004 	sub.w	r0, r0, #4
 800fdd6:	f7ff bfe8 	b.w	800fdaa <_ZN19mainScreenPresenter15ledChangedStateEb>
	...

0800fddc <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800fde4:	4b07      	ldr	r3, [pc, #28]	@ (800fe04 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d105      	bne.n	800fdf8 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800fdee:	4a07      	ldr	r2, [pc, #28]	@ (800fe0c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800fdf0:	2190      	movs	r1, #144	@ 0x90
 800fdf2:	4807      	ldr	r0, [pc, #28]	@ (800fe10 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800fdf4:	f010 fd20 	bl	8020838 <__assert_func>
        return bitmapId;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	881b      	ldrh	r3, [r3, #0]
    }
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	2401b5d0 	.word	0x2401b5d0
 800fe08:	08021f10 	.word	0x08021f10
 800fe0c:	08021f4c 	.word	0x08021f4c
 800fe10:	08021f80 	.word	0x08021f80

0800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800fe14:	b480      	push	{r7}
 800fe16:	b083      	sub	sp, #12
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	78fa      	ldrb	r2, [r7, #3]
 800fe24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	332e      	adds	r3, #46	@ 0x2e
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff ffcb 	bl	800fddc <_ZNK8touchgfx6Bitmap5getIdEv>
 800fe46:	4603      	mov	r3, r0
 800fe48:	461c      	mov	r4, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	3334      	adds	r3, #52	@ 0x34
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff ffc4 	bl	800fddc <_ZNK8touchgfx6Bitmap5getIdEv>
 800fe54:	4603      	mov	r3, r0
 800fe56:	429c      	cmp	r4, r3
 800fe58:	bf0c      	ite	eq
 800fe5a:	2301      	moveq	r3, #1
 800fe5c:	2300      	movne	r3, #0
 800fe5e:	b2db      	uxtb	r3, r3
    }
 800fe60:	4618      	mov	r0, r3
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}

0800fe68 <_ZN14mainScreenViewD1Ev>:

class mainScreenView : public mainScreenViewBase
{
public:
    mainScreenView();
    virtual ~mainScreenView() {}
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	4a05      	ldr	r2, [pc, #20]	@ (800fe88 <_ZN14mainScreenViewD1Ev+0x20>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	601a      	str	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7ff facd 	bl	800f418 <_ZN18mainScreenViewBaseD1Ev>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	4618      	mov	r0, r3
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	080228f0 	.word	0x080228f0

0800fe8c <_ZN14mainScreenViewD0Ev>:
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f7ff ffe7 	bl	800fe68 <_ZN14mainScreenViewD1Ev>
 800fe9a:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f010 fc9b 	bl	80207da <_ZdlPvj>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
	...

0800feb0 <_ZN14mainScreenViewC1Ev>:
#include <gui/mainscreen_screen/mainScreenView.hpp>

mainScreenView::mainScreenView()
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	4618      	mov	r0, r3
 800febc:	f7ff f994 	bl	800f1e8 <_ZN18mainScreenViewBaseC1Ev>
 800fec0:	4a03      	ldr	r2, [pc, #12]	@ (800fed0 <_ZN14mainScreenViewC1Ev+0x20>)
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	601a      	str	r2, [r3, #0]
{

}
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	080228f0 	.word	0x080228f0

0800fed4 <_ZN14mainScreenView11setupScreenEv>:

void mainScreenView::setupScreen()
{
 800fed4:	b590      	push	{r4, r7, lr}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::setupScreen();
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	4618      	mov	r0, r3
 800fee0:	f7ff fadd 	bl	800f49e <_ZN18mainScreenViewBase11setupScreenEv>
	toggleLed.forceState(false);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	33f0      	adds	r3, #240	@ 0xf0
 800fee8:	2100      	movs	r1, #0
 800feea:	4618      	mov	r0, r3
 800feec:	f003 fb2e 	bl	801354c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleLed.invalidate();
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	33f0      	adds	r3, #240	@ 0xf0
 800fef4:	4618      	mov	r0, r3
 800fef6:	f005 fd36 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
	LedOn.setVisible(!toggleLed.getState());
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	33f0      	adds	r3, #240	@ 0xf0
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7ff ff95 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	f083 0301 	eor.w	r3, r3, #1
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	4619      	mov	r1, r3
 800ff14:	4620      	mov	r0, r4
 800ff16:	f7ff ff7d 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOff.setVisible(toggleLed.getState());
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	33f0      	adds	r3, #240	@ 0xf0
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7ff ff85 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7ff ff70 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOn.invalidate();
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	33c4      	adds	r3, #196	@ 0xc4
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f005 fd14 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
	LedOff.invalidate();
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3398      	adds	r3, #152	@ 0x98
 800ff42:	4618      	mov	r0, r3
 800ff44:	f005 fd0f 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800ff48:	bf00      	nop
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd90      	pop	{r4, r7, pc}

0800ff50 <_ZN14mainScreenView14tearDownScreenEv>:

void mainScreenView::tearDownScreen()
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    mainScreenViewBase::tearDownScreen();
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7fe ff92 	bl	800ee84 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <_ZN14mainScreenView14updateLedStateEv>:

void mainScreenView::updateLedState()
{
 800ff68:	b590      	push	{r4, r7, lr}
 800ff6a:	b083      	sub	sp, #12
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
	LedOn.setVisible(!toggleLed.getState());
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	33f0      	adds	r3, #240	@ 0xf0
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff ff5a 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ff80:	4603      	mov	r3, r0
 800ff82:	f083 0301 	eor.w	r3, r3, #1
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	4619      	mov	r1, r3
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f7ff ff42 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOff.setVisible(toggleLed.getState());
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	33f0      	adds	r3, #240	@ 0xf0
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff ff4a 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f7ff ff35 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOn.invalidate();
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	33c4      	adds	r3, #196	@ 0xc4
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f005 fcd9 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
	LedOff.invalidate();
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3398      	adds	r3, #152	@ 0x98
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f005 fcd4 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>

	/* Report the changed state to present */
	presenter->setLedLight(!toggleLed.getState());
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	33f0      	adds	r3, #240	@ 0xf0
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff ff34 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	f083 0301 	eor.w	r3, r3, #1
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7ff fed6 	bl	800fd88 <_ZN19mainScreenPresenter11setLedLightEb>
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd90      	pop	{r4, r7, pc}

0800ffe4 <_ZN14mainScreenView11setLedStateEb>:

void mainScreenView::setLedState(bool state)
{
 800ffe4:	b590      	push	{r4, r7, lr}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	460b      	mov	r3, r1
 800ffee:	70fb      	strb	r3, [r7, #3]
	toggleLed.forceState((bool)state);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	33f0      	adds	r3, #240	@ 0xf0
 800fff4:	78fa      	ldrb	r2, [r7, #3]
 800fff6:	4611      	mov	r1, r2
 800fff8:	4618      	mov	r0, r3
 800fffa:	f003 faa7 	bl	801354c <_ZN8touchgfx12ToggleButton10forceStateEb>
	toggleLed.invalidate();
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	33f0      	adds	r3, #240	@ 0xf0
 8010002:	4618      	mov	r0, r3
 8010004:	f005 fcaf 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>

	LedOn.setVisible(!toggleLed.getState());
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	33f0      	adds	r3, #240	@ 0xf0
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff ff0e 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8010018:	4603      	mov	r3, r0
 801001a:	f083 0301 	eor.w	r3, r3, #1
 801001e:	b2db      	uxtb	r3, r3
 8010020:	4619      	mov	r1, r3
 8010022:	4620      	mov	r0, r4
 8010024:	f7ff fef6 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOff.setVisible(toggleLed.getState());
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	33f0      	adds	r3, #240	@ 0xf0
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff fefe 	bl	800fe34 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8010038:	4603      	mov	r3, r0
 801003a:	4619      	mov	r1, r3
 801003c:	4620      	mov	r0, r4
 801003e:	f7ff fee9 	bl	800fe14 <_ZN8touchgfx8Drawable10setVisibleEb>
	LedOn.invalidate();
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	33c4      	adds	r3, #196	@ 0xc4
 8010046:	4618      	mov	r0, r3
 8010048:	f005 fc8d 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
	LedOff.invalidate();
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	3398      	adds	r3, #152	@ 0x98
 8010050:	4618      	mov	r0, r3
 8010052:	f005 fc88 	bl	8015966 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8010056:	bf00      	nop
 8010058:	370c      	adds	r7, #12
 801005a:	46bd      	mov	sp, r7
 801005c:	bd90      	pop	{r4, r7, pc}

0801005e <_ZN5ModelC1Ev>:
#include "queue.h"

extern osMessageQueueId_t buttonQueueHandle;

#endif
Model::Model() : modelListener(0)
 801005e:	b580      	push	{r7, lr}
 8010060:	b084      	sub	sp, #16
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2200      	movs	r2, #0
 801006a:	601a      	str	r2, [r3, #0]
{
	bool state = false;
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
	updateLedLight(state);
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f83d 	bl	80100f4 <_ZN5Model14updateLedLightEb>
}
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4618      	mov	r0, r3
 801007e:	3710      	adds	r7, #16
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <_ZN5Model4tickEv>:

void Model::tick()
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	uint32_t bState = 0;
 801008c:	2300      	movs	r3, #0
 801008e:	60bb      	str	r3, [r7, #8]
	osStatus_t status;

	status = osMessageQueueGet(buttonQueueHandle, &bState, 0, 0);
 8010090:	4b0f      	ldr	r3, [pc, #60]	@ (80100d0 <_ZN5Model4tickEv+0x4c>)
 8010092:	6818      	ldr	r0, [r3, #0]
 8010094:	f107 0108 	add.w	r1, r7, #8
 8010098:	2300      	movs	r3, #0
 801009a:	2200      	movs	r2, #0
 801009c:	f7fa faae 	bl	800a5fc <osMessageQueueGet>
 80100a0:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d10e      	bne.n	80100c6 <_ZN5Model4tickEv+0x42>
		modelListener->ledChangedState(bState);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6818      	ldr	r0, [r3, #0]
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	3308      	adds	r3, #8
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	68ba      	ldr	r2, [r7, #8]
 80100b8:	2a00      	cmp	r2, #0
 80100ba:	bf14      	ite	ne
 80100bc:	2201      	movne	r2, #1
 80100be:	2200      	moveq	r2, #0
 80100c0:	b2d2      	uxtb	r2, r2
 80100c2:	4611      	mov	r1, r2
 80100c4:	4798      	blx	r3
	}
#endif
}
 80100c6:	bf00      	nop
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	24000318 	.word	0x24000318

080100d4 <_ZN5Model15userSetLedLightEb>:

void Model::userSetLedLight(bool state)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b082      	sub	sp, #8
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	70fb      	strb	r3, [r7, #3]
	updateLedLight(state);
 80100e0:	78fb      	ldrb	r3, [r7, #3]
 80100e2:	4619      	mov	r1, r3
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f805 	bl	80100f4 <_ZN5Model14updateLedLightEb>
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <_ZN5Model14updateLedLightEb>:

void Model::updateLedLight(bool ledLightState)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	460b      	mov	r3, r1
 80100fe:	70fb      	strb	r3, [r7, #3]
	if(ledLightState){
 8010100:	78fb      	ldrb	r3, [r7, #3]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d005      	beq.n	8010112 <_ZN5Model14updateLedLightEb+0x1e>
#ifdef SIMULATOR
#else
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8010106:	2200      	movs	r2, #0
 8010108:	2104      	movs	r1, #4
 801010a:	4806      	ldr	r0, [pc, #24]	@ (8010124 <_ZN5Model14updateLedLightEb+0x30>)
 801010c:	f7f4 fec8 	bl	8004ea0 <HAL_GPIO_WritePin>
#ifdef SIMULATOR
#else
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
#endif
	}
}
 8010110:	e004      	b.n	801011c <_ZN5Model14updateLedLightEb+0x28>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8010112:	2201      	movs	r2, #1
 8010114:	2104      	movs	r1, #4
 8010116:	4803      	ldr	r0, [pc, #12]	@ (8010124 <_ZN5Model14updateLedLightEb+0x30>)
 8010118:	f7f4 fec2 	bl	8004ea0 <HAL_GPIO_WritePin>
}
 801011c:	bf00      	nop
 801011e:	3708      	adds	r7, #8
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	58021800 	.word	0x58021800

08010128 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
    {
 8010130:	4a04      	ldr	r2, [pc, #16]	@ (8010144 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	601a      	str	r2, [r3, #0]
    }
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	4618      	mov	r0, r3
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr
 8010144:	08022944 	.word	0x08022944

08010148 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
    }
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7ff ffe9 	bl	8010128 <_ZN8touchgfx15TouchControllerD1Ev>
 8010156:	2104      	movs	r1, #4
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f010 fb3e 	bl	80207da <_ZdlPvj>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8010170:	2308      	movs	r3, #8
 8010172:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8010178:	4b07      	ldr	r3, [pc, #28]	@ (8010198 <_ZN20STM32TouchController4initEv+0x30>)
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 801017e:	4b07      	ldr	r3, [pc, #28]	@ (801019c <_ZN20STM32TouchController4initEv+0x34>)
 8010180:	881b      	ldrh	r3, [r3, #0]
 8010182:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 8010184:	f107 0308 	add.w	r3, r7, #8
 8010188:	4619      	mov	r1, r3
 801018a:	2000      	movs	r0, #0
 801018c:	f7f3 fc92 	bl	8003ab4 <BSP_TS_Init>
}
 8010190:	bf00      	nop
 8010192:	3718      	adds	r7, #24
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	2401b542 	.word	0x2401b542
 801019c:	2401b544 	.word	0x2401b544

080101a0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b088      	sub	sp, #32
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 80101ac:	f107 0310 	add.w	r3, r7, #16
 80101b0:	2200      	movs	r2, #0
 80101b2:	601a      	str	r2, [r3, #0]
 80101b4:	605a      	str	r2, [r3, #4]
 80101b6:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 80101b8:	f107 0310 	add.w	r3, r7, #16
 80101bc:	4619      	mov	r1, r3
 80101be:	2000      	movs	r0, #0
 80101c0:	f7f3 fd1e 	bl	8003c00 <BSP_TS_GetState>
 80101c4:	4603      	mov	r3, r0
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	bf14      	ite	ne
 80101ca:	2301      	movne	r3, #1
 80101cc:	2300      	moveq	r3, #0
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>
	__asm volatile
 80101d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d8:	f383 8811 	msr	BASEPRI, r3
 80101dc:	f3bf 8f6f 	isb	sy
 80101e0:	f3bf 8f4f 	dsb	sy
 80101e4:	61fb      	str	r3, [r7, #28]
}
 80101e6:	bf00      	nop
    {
        configASSERT(0);
 80101e8:	bf00      	nop
 80101ea:	e7fd      	b.n	80101e8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d009      	beq.n	8010206 <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    {
        x = TS_State.TouchX;
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	461a      	mov	r2, r3
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	461a      	mov	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	601a      	str	r2, [r3, #0]

        return true;
 8010202:	2301      	movs	r3, #1
 8010204:	e000      	b.n	8010208 <_ZN20STM32TouchController11sampleTouchERlS0_+0x68>
    }

    return false;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3720      	adds	r7, #32
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
 8010218:	4a05      	ldr	r2, [pc, #20]	@ (8010230 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff ff81 	bl	8010128 <_ZN8touchgfx15TouchControllerD1Ev>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	0802292c 	.word	0x0802292c

08010234 <_ZN20STM32TouchControllerD0Ev>:
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff ffe7 	bl	8010210 <_ZN20STM32TouchControllerD1Ev>
 8010242:	2104      	movs	r1, #4
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f010 fac8 	bl	80207da <_ZdlPvj>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8010254:	b480      	push	{r7}
 8010256:	af00      	add	r7, sp, #0

}
 8010258:	bf00      	nop
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr
	...

08010264 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801026e:	79fb      	ldrb	r3, [r7, #7]
 8010270:	2b03      	cmp	r3, #3
 8010272:	d827      	bhi.n	80102c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
 8010274:	a201      	add	r2, pc, #4	@ (adr r2, 801027c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8010276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027a:	bf00      	nop
 801027c:	0801028d 	.word	0x0801028d
 8010280:	0801029b 	.word	0x0801029b
 8010284:	080102a9 	.word	0x080102a9
 8010288:	080102b7 	.word	0x080102b7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 801028c:	2201      	movs	r2, #1
 801028e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010292:	480e      	ldr	r0, [pc, #56]	@ (80102cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8010294:	f7f4 fe04 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 8010298:	e014      	b.n	80102c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 801029a:	2201      	movs	r2, #1
 801029c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80102a0:	480a      	ldr	r0, [pc, #40]	@ (80102cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 80102a2:	f7f4 fdfd 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 80102a6:	e00d      	b.n	80102c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 80102a8:	2201      	movs	r2, #1
 80102aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80102ae:	4808      	ldr	r0, [pc, #32]	@ (80102d0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 80102b0:	f7f4 fdf6 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 80102b4:	e006      	b.n	80102c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 80102b6:	2201      	movs	r2, #1
 80102b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80102bc:	4803      	ldr	r0, [pc, #12]	@ (80102cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 80102be:	f7f4 fdef 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 80102c2:	bf00      	nop
    }
}
 80102c4:	bf00      	nop
 80102c6:	3708      	adds	r7, #8
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	58021c00 	.word	0x58021c00
 80102d0:	58022000 	.word	0x58022000

080102d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	4603      	mov	r3, r0
 80102dc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	2b03      	cmp	r3, #3
 80102e2:	d827      	bhi.n	8010334 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
 80102e4:	a201      	add	r2, pc, #4	@ (adr r2, 80102ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80102e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ea:	bf00      	nop
 80102ec:	080102fd 	.word	0x080102fd
 80102f0:	0801030b 	.word	0x0801030b
 80102f4:	08010319 	.word	0x08010319
 80102f8:	08010327 	.word	0x08010327
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80102fc:	2200      	movs	r2, #0
 80102fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010302:	480e      	ldr	r0, [pc, #56]	@ (801033c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8010304:	f7f4 fdcc 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 8010308:	e014      	b.n	8010334 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 801030a:	2200      	movs	r2, #0
 801030c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010310:	480a      	ldr	r0, [pc, #40]	@ (801033c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 8010312:	f7f4 fdc5 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 8010316:	e00d      	b.n	8010334 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8010318:	2200      	movs	r2, #0
 801031a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801031e:	4808      	ldr	r0, [pc, #32]	@ (8010340 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 8010320:	f7f4 fdbe 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 8010324:	e006      	b.n	8010334 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8010326:	2200      	movs	r2, #0
 8010328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801032c:	4803      	ldr	r0, [pc, #12]	@ (801033c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 801032e:	f7f4 fdb7 	bl	8004ea0 <HAL_GPIO_WritePin>
#endif
        break;
 8010332:	bf00      	nop
    }
}
 8010334:	bf00      	nop
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	58021c00 	.word	0x58021c00
 8010340:	58022000 	.word	0x58022000

08010344 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	2b03      	cmp	r3, #3
 8010352:	d823      	bhi.n	801039c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 8010354:	a201      	add	r2, pc, #4	@ (adr r2, 801035c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8010356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801035a:	bf00      	nop
 801035c:	0801036d 	.word	0x0801036d
 8010360:	08010379 	.word	0x08010379
 8010364:	08010385 	.word	0x08010385
 8010368:	08010391 	.word	0x08010391
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 801036c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010370:	480c      	ldr	r0, [pc, #48]	@ (80103a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8010372:	f7f4 fdae 	bl	8004ed2 <HAL_GPIO_TogglePin>
#endif
        break;
 8010376:	e011      	b.n	801039c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8010378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801037c:	4809      	ldr	r0, [pc, #36]	@ (80103a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 801037e:	f7f4 fda8 	bl	8004ed2 <HAL_GPIO_TogglePin>
#endif
        break;
 8010382:	e00b      	b.n	801039c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8010384:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010388:	4807      	ldr	r0, [pc, #28]	@ (80103a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 801038a:	f7f4 fda2 	bl	8004ed2 <HAL_GPIO_TogglePin>
#endif
        break;
 801038e:	e005      	b.n	801039c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8010390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010394:	4803      	ldr	r0, [pc, #12]	@ (80103a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8010396:	f7f4 fd9c 	bl	8004ed2 <HAL_GPIO_TogglePin>
#endif
        break;
 801039a:	bf00      	nop
    }
}
 801039c:	bf00      	nop
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	58021c00 	.word	0x58021c00
 80103a8:	58022000 	.word	0x58022000

080103ac <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80103ac:	b480      	push	{r7}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
    {
 80103b4:	4a04      	ldr	r2, [pc, #16]	@ (80103c8 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	601a      	str	r2, [r3, #0]
    }
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4618      	mov	r0, r3
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr
 80103c8:	08022d24 	.word	0x08022d24

080103cc <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
    }
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff ffe9 	bl	80103ac <_ZN8touchgfx3HALD1Ev>
 80103da:	217c      	movs	r1, #124	@ 0x7c
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f010 f9fc 	bl	80207da <_ZdlPvj>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80103ec:	b480      	push	{r7}
 80103ee:	b083      	sub	sp, #12
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	460b      	mov	r3, r1
 80103f6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	78fa      	ldrb	r2, [r7, #3]
 80103fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2201      	movs	r2, #1
 8010404:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8010408:	bf00      	nop
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	807b      	strh	r3, [r7, #2]
 8010420:	4613      	mov	r3, r2
 8010422:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8010424:	4b0c      	ldr	r3, [pc, #48]	@ (8010458 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	887a      	ldrh	r2, [r7, #2]
 801042a:	429a      	cmp	r2, r3
 801042c:	d304      	bcc.n	8010438 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801042e:	4b0b      	ldr	r3, [pc, #44]	@ (801045c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	883a      	ldrh	r2, [r7, #0]
 8010434:	429a      	cmp	r2, r3
 8010436:	d205      	bcs.n	8010444 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8010438:	4b09      	ldr	r3, [pc, #36]	@ (8010460 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 801043a:	4a0a      	ldr	r2, [pc, #40]	@ (8010464 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 801043c:	219e      	movs	r1, #158	@ 0x9e
 801043e:	480a      	ldr	r0, [pc, #40]	@ (8010468 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8010440:	f010 f9fa 	bl	8020838 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8010444:	4a09      	ldr	r2, [pc, #36]	@ (801046c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8010446:	887b      	ldrh	r3, [r7, #2]
 8010448:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 801044a:	4a09      	ldr	r2, [pc, #36]	@ (8010470 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 801044c:	883b      	ldrh	r3, [r7, #0]
 801044e:	8013      	strh	r3, [r2, #0]
    }
 8010450:	bf00      	nop
 8010452:	3708      	adds	r7, #8
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}
 8010458:	2401b53c 	.word	0x2401b53c
 801045c:	2401b53e 	.word	0x2401b53e
 8010460:	08021fc4 	.word	0x08021fc4
 8010464:	08022028 	.word	0x08022028
 8010468:	0802206c 	.word	0x0802206c
 801046c:	2401b542 	.word	0x2401b542
 8010470:	2401b544 	.word	0x2401b544

08010474 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8010474:	b580      	push	{r7, lr}
 8010476:	b082      	sub	sp, #8
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8010482:	2b00      	cmp	r3, #0
 8010484:	d009      	beq.n	801049a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	685a      	ldr	r2, [r3, #4]
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	4610      	mov	r0, r2
 8010494:	4798      	blx	r3
 8010496:	4603      	mov	r3, r0
 8010498:	e000      	b.n	801049c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 801049a:	2300      	movs	r3, #0
    }
 801049c:	4618      	mov	r0, r3
 801049e:	3708      	adds	r7, #8
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b082      	sub	sp, #8
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f002 febb 	bl	8013228 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	33ac      	adds	r3, #172	@ 0xac
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	4798      	blx	r3
    }
 80104be:	bf00      	nop
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 80104c6:	b480      	push	{r7}
 80104c8:	b083      	sub	sp, #12
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 80104d0:	2300      	movs	r3, #0
    }
 80104d2:	4618      	mov	r0, r3
 80104d4:	370c      	adds	r7, #12
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
	...

080104e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
 80104ec:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80104f4:	4b0f      	ldr	r3, [pc, #60]	@ (8010534 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 80104f6:	4a10      	ldr	r2, [pc, #64]	@ (8010538 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80104f8:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80104fc:	480f      	ldr	r0, [pc, #60]	@ (801053c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80104fe:	f010 f99b 	bl	8020838 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2b00      	cmp	r3, #0
 8010512:	bf14      	ite	ne
 8010514:	2301      	movne	r3, #1
 8010516:	2300      	moveq	r3, #0
 8010518:	b2da      	uxtb	r2, r3
 801051a:	4b09      	ldr	r3, [pc, #36]	@ (8010540 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801051c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	338c      	adds	r3, #140	@ 0x8c
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	4798      	blx	r3
    }
 801052c:	bf00      	nop
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	080220b0 	.word	0x080220b0
 8010538:	080220e8 	.word	0x080220e8
 801053c:	0802206c 	.word	0x0802206c
 8010540:	2401b546 	.word	0x2401b546

08010544 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	bf14      	ite	ne
 801055a:	2301      	movne	r3, #1
 801055c:	2300      	moveq	r3, #0
 801055e:	b2da      	uxtb	r2, r3
 8010560:	4b03      	ldr	r3, [pc, #12]	@ (8010570 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8010562:	701a      	strb	r2, [r3, #0]
    }
 8010564:	bf00      	nop
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	2401b547 	.word	0x2401b547

08010574 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801057c:	2300      	movs	r3, #0
    }
 801057e:	4618      	mov	r0, r3
 8010580:	370c      	adds	r7, #12
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr

0801058a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801058a:	b580      	push	{r7, lr}
 801058c:	b082      	sub	sp, #8
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
 8010592:	460b      	mov	r3, r1
 8010594:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801059a:	2b00      	cmp	r3, #0
 801059c:	d004      	beq.n	80105a8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105a2:	887a      	ldrh	r2, [r7, #2]
 80105a4:	4610      	mov	r0, r2
 80105a6:	4798      	blx	r3
        }
    }
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3318      	adds	r3, #24
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4610      	mov	r0, r2
 80105c8:	4798      	blx	r3
 80105ca:	4603      	mov	r3, r0
    }
 80105cc:	4618      	mov	r0, r3
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d011      	beq.n	8010610 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 80105ec:	4b14      	ldr	r3, [pc, #80]	@ (8010640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d11e      	bne.n	8010632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80105f4:	4b13      	ldr	r3, [pc, #76]	@ (8010644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80105f6:	881b      	ldrh	r3, [r3, #0]
 80105f8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80105fa:	4b13      	ldr	r3, [pc, #76]	@ (8010648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80105fc:	881a      	ldrh	r2, [r3, #0]
 80105fe:	4b11      	ldr	r3, [pc, #68]	@ (8010644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010600:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8010602:	4a11      	ldr	r2, [pc, #68]	@ (8010648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010604:	89bb      	ldrh	r3, [r7, #12]
 8010606:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8010608:	4b0d      	ldr	r3, [pc, #52]	@ (8010640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801060a:	2201      	movs	r2, #1
 801060c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801060e:	e010      	b.n	8010632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8010610:	4b0b      	ldr	r3, [pc, #44]	@ (8010640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00c      	beq.n	8010632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8010618:	4b0a      	ldr	r3, [pc, #40]	@ (8010644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801061e:	4b0a      	ldr	r3, [pc, #40]	@ (8010648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010620:	881a      	ldrh	r2, [r3, #0]
 8010622:	4b08      	ldr	r3, [pc, #32]	@ (8010644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8010624:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8010626:	4a08      	ldr	r2, [pc, #32]	@ (8010648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010628:	89fb      	ldrh	r3, [r7, #14]
 801062a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 801062c:	4b04      	ldr	r3, [pc, #16]	@ (8010640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801062e:	2200      	movs	r2, #0
 8010630:	701a      	strb	r2, [r3, #0]
    }
 8010632:	bf00      	nop
 8010634:	3714      	adds	r7, #20
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	2401b540 	.word	0x2401b540
 8010644:	2401b53e 	.word	0x2401b53e
 8010648:	2401b53c 	.word	0x2401b53c

0801064c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	4618      	mov	r0, r3
 8010658:	f002 f843 	bl	80126e2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801065c:	bf00      	nop
 801065e:	3708      	adds	r7, #8
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	4a05      	ldr	r2, [pc, #20]	@ (8010684 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	f7ff fe99 	bl	80103ac <_ZN8touchgfx3HALD1Ev>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4618      	mov	r0, r3
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	08022b7c 	.word	0x08022b7c

08010688 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7ff ffe7 	bl	8010664 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010696:	217c      	movs	r1, #124	@ 0x7c
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f010 f89e 	bl	80207da <_ZdlPvj>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4618      	mov	r0, r3
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7ff ffca 	bl	801064c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	4618      	mov	r0, r3
 80106cc:	f001 fb48 	bl	8011d60 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <_ZN11TouchGFXHAL9taskEntryEv>:
void TouchGFXHAL::taskEntry()
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3380      	adds	r3, #128	@ 0x80
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	4798      	blx	r3
    enableInterrupts();
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3378      	adds	r3, #120	@ 0x78
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6878      	ldr	r0, [r7, #4]
 80106f6:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80106f8:	f000 f956 	bl	80109a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3370      	adds	r3, #112	@ 0x70
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4610      	mov	r0, r2
 8010708:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 801070a:	2200      	movs	r2, #0
 801070c:	2180      	movs	r1, #128	@ 0x80
 801070e:	480c      	ldr	r0, [pc, #48]	@ (8010740 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 8010710:	f7f4 fbc6 	bl	8004ea0 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8010714:	2201      	movs	r2, #1
 8010716:	2104      	movs	r1, #4
 8010718:	480a      	ldr	r0, [pc, #40]	@ (8010744 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 801071a:	f7f4 fbc1 	bl	8004ea0 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 801071e:	2201      	movs	r2, #1
 8010720:	2102      	movs	r1, #2
 8010722:	4808      	ldr	r0, [pc, #32]	@ (8010744 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 8010724:	f7f4 fbbc 	bl	8004ea0 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8010728:	f000 f93e 	bl	80109a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3370      	adds	r3, #112	@ 0x70
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4610      	mov	r0, r2
 8010738:	4798      	blx	r3
        OSWrappers::waitForVSync();
 801073a:	bf00      	nop
 801073c:	e7f4      	b.n	8010728 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 801073e:	bf00      	nop
 8010740:	58022800 	.word	0x58022800
 8010744:	58020000 	.word	0x58020000

08010748 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	4618      	mov	r0, r3
 8010754:	f001 fba6 	bl	8011ea4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8010758:	4603      	mov	r3, r0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3708      	adds	r7, #8
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}

08010762 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	4618      	mov	r0, r3
 8010772:	f001 fba5 	bl	8011ec0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010776:	bf00      	nop
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
	...

08010780 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6839      	ldr	r1, [r7, #0]
 801078e:	4618      	mov	r0, r3
 8010790:	f001 fbac 	bl	8011eec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8010794:	4b1f      	ldr	r3, [pc, #124]	@ (8010814 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8010796:	2200      	movs	r2, #0
 8010798:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801079c:	f3bf 8f4f 	dsb	sy
}
 80107a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80107a2:	4b1c      	ldr	r3, [pc, #112]	@ (8010814 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80107a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80107a8:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	0b5b      	lsrs	r3, r3, #13
 80107ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80107b2:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	08db      	lsrs	r3, r3, #3
 80107b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80107bc:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	015a      	lsls	r2, r3, #5
 80107c2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80107c6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80107cc:	4911      	ldr	r1, [pc, #68]	@ (8010814 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 80107ce:	4313      	orrs	r3, r2
 80107d0:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	1e5a      	subs	r2, r3, #1
 80107d8:	60fa      	str	r2, [r7, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	bf14      	ite	ne
 80107de:	2301      	movne	r3, #1
 80107e0:	2300      	moveq	r3, #0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1ea      	bne.n	80107be <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	1e5a      	subs	r2, r3, #1
 80107ec:	613a      	str	r2, [r7, #16]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	bf14      	ite	ne
 80107f2:	2301      	movne	r3, #1
 80107f4:	2300      	moveq	r3, #0
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d1db      	bne.n	80107b4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80107fc:	f3bf 8f4f 	dsb	sy
}
 8010800:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010802:	f3bf 8f6f 	isb	sy
}
 8010806:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8010808:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 801080a:	bf00      	nop
 801080c:	3718      	adds	r7, #24
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	e000ed00 	.word	0xe000ed00

08010818 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b082      	sub	sp, #8
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4618      	mov	r0, r3
 8010824:	f001 faca 	bl	8011dbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8010828:	bf00      	nop
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}

08010830 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4618      	mov	r0, r3
 801083c:	f001 face 	bl	8011ddc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010840:	bf00      	nop
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	4618      	mov	r0, r3
 8010854:	f001 fad0 	bl	8011df8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8010858:	bf00      	nop
 801085a:	3708      	adds	r7, #8
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4618      	mov	r0, r3
 801086c:	f001 fad2 	bl	8011e14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	4a05      	ldr	r2, [pc, #20]	@ (8010898 <_ZN11TouchGFXHALD1Ev+0x20>)
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4618      	mov	r0, r3
 801088a:	f7ff feeb 	bl	8010664 <_ZN20TouchGFXGeneratedHALD1Ev>
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0802295c 	.word	0x0802295c

0801089c <_ZN11TouchGFXHALD0Ev>:
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7ff ffe7 	bl	8010878 <_ZN11TouchGFXHALD1Ev>
 80108aa:	217c      	movs	r1, #124	@ 0x7c
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f00f ff94 	bl	80207da <_ZdlPvj>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	4618      	mov	r0, r3
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80108c0:	2200      	movs	r2, #0
 80108c2:	2101      	movs	r1, #1
 80108c4:	2001      	movs	r0, #1
 80108c6:	f7f9 fca6 	bl	800a216 <osSemaphoreNew>
 80108ca:	4603      	mov	r3, r0
 80108cc:	4a0f      	ldr	r2, [pc, #60]	@ (801090c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80108ce:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80108d0:	4b0e      	ldr	r3, [pc, #56]	@ (801090c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d105      	bne.n	80108e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 80108d8:	4b0d      	ldr	r3, [pc, #52]	@ (8010910 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 80108da:	4a0e      	ldr	r2, [pc, #56]	@ (8010914 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 80108dc:	2128      	movs	r1, #40	@ 0x28
 80108de:	480e      	ldr	r0, [pc, #56]	@ (8010918 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 80108e0:	f00f ffaa 	bl	8020838 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80108e4:	2200      	movs	r2, #0
 80108e6:	2104      	movs	r1, #4
 80108e8:	2001      	movs	r0, #1
 80108ea:	f7f9 fdb3 	bl	800a454 <osMessageQueueNew>
 80108ee:	4603      	mov	r3, r0
 80108f0:	4a0a      	ldr	r2, [pc, #40]	@ (801091c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80108f2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80108f4:	4b09      	ldr	r3, [pc, #36]	@ (801091c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d105      	bne.n	8010908 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 80108fc:	4b08      	ldr	r3, [pc, #32]	@ (8010920 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 80108fe:	4a05      	ldr	r2, [pc, #20]	@ (8010914 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010900:	212c      	movs	r1, #44	@ 0x2c
 8010902:	4805      	ldr	r0, [pc, #20]	@ (8010918 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010904:	f00f ff98 	bl	8020838 <__assert_func>
}
 8010908:	bf00      	nop
 801090a:	bd80      	pop	{r7, pc}
 801090c:	2401a3c0 	.word	0x2401a3c0
 8010910:	08022138 	.word	0x08022138
 8010914:	08022184 	.word	0x08022184
 8010918:	080221b4 	.word	0x080221b4
 801091c:	2401a3c4 	.word	0x2401a3c4
 8010920:	080221e0 	.word	0x080221e0

08010924 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8010924:	b580      	push	{r7, lr}
 8010926:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8010928:	4b04      	ldr	r3, [pc, #16]	@ (801093c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f04f 31ff 	mov.w	r1, #4294967295
 8010930:	4618      	mov	r0, r3
 8010932:	f7f9 fcf9 	bl	800a328 <osSemaphoreAcquire>
}
 8010936:	bf00      	nop
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	2401a3c0 	.word	0x2401a3c0

08010940 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8010940:	b580      	push	{r7, lr}
 8010942:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010944:	4b03      	ldr	r3, [pc, #12]	@ (8010954 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4618      	mov	r0, r3
 801094a:	f7f9 fd3f 	bl	800a3cc <osSemaphoreRelease>
}
 801094e:	bf00      	nop
 8010950:	bd80      	pop	{r7, pc}
 8010952:	bf00      	nop
 8010954:	2401a3c0 	.word	0x2401a3c0

08010958 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010958:	b580      	push	{r7, lr}
 801095a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 801095c:	4b03      	ldr	r3, [pc, #12]	@ (801096c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2100      	movs	r1, #0
 8010962:	4618      	mov	r0, r3
 8010964:	f7f9 fce0 	bl	800a328 <osSemaphoreAcquire>
}
 8010968:	bf00      	nop
 801096a:	bd80      	pop	{r7, pc}
 801096c:	2401a3c0 	.word	0x2401a3c0

08010970 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8010974:	4b03      	ldr	r3, [pc, #12]	@ (8010984 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4618      	mov	r0, r3
 801097a:	f7f9 fd27 	bl	800a3cc <osSemaphoreRelease>
}
 801097e:	bf00      	nop
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	2401a3c0 	.word	0x2401a3c0

08010988 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 801098c:	4b04      	ldr	r3, [pc, #16]	@ (80109a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 801098e:	6818      	ldr	r0, [r3, #0]
 8010990:	2300      	movs	r3, #0
 8010992:	2200      	movs	r2, #0
 8010994:	4903      	ldr	r1, [pc, #12]	@ (80109a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8010996:	f7f9 fdd1 	bl	800a53c <osMessageQueuePut>
}
 801099a:	bf00      	nop
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	2401a3c4 	.word	0x2401a3c4
 80109a4:	24000048 	.word	0x24000048

080109a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80109ae:	4b09      	ldr	r3, [pc, #36]	@ (80109d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80109b0:	6818      	ldr	r0, [r3, #0]
 80109b2:	1d39      	adds	r1, r7, #4
 80109b4:	2300      	movs	r3, #0
 80109b6:	2200      	movs	r2, #0
 80109b8:	f7f9 fe20 	bl	800a5fc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80109bc:	4b05      	ldr	r3, [pc, #20]	@ (80109d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80109be:	6818      	ldr	r0, [r3, #0]
 80109c0:	1d39      	adds	r1, r7, #4
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295
 80109c6:	2200      	movs	r2, #0
 80109c8:	f7f9 fe18 	bl	800a5fc <osMessageQueueGet>
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	2401a3c4 	.word	0x2401a3c4

080109d8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 80109e2:	88fb      	ldrh	r3, [r7, #6]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f9 fbfb 	bl	800a1e0 <osDelay>
}
 80109ea:	bf00      	nop
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <__NVIC_EnableIRQ>:
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	4603      	mov	r3, r0
 80109fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80109fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	db0b      	blt.n	8010a1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a06:	88fb      	ldrh	r3, [r7, #6]
 8010a08:	f003 021f 	and.w	r2, r3, #31
 8010a0c:	4907      	ldr	r1, [pc, #28]	@ (8010a2c <__NVIC_EnableIRQ+0x38>)
 8010a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a12:	095b      	lsrs	r3, r3, #5
 8010a14:	2001      	movs	r0, #1
 8010a16:	fa00 f202 	lsl.w	r2, r0, r2
 8010a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010a1e:	bf00      	nop
 8010a20:	370c      	adds	r7, #12
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	e000e100 	.word	0xe000e100

08010a30 <__NVIC_DisableIRQ>:
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	db12      	blt.n	8010a68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a42:	88fb      	ldrh	r3, [r7, #6]
 8010a44:	f003 021f 	and.w	r2, r3, #31
 8010a48:	490a      	ldr	r1, [pc, #40]	@ (8010a74 <__NVIC_DisableIRQ+0x44>)
 8010a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a4e:	095b      	lsrs	r3, r3, #5
 8010a50:	2001      	movs	r0, #1
 8010a52:	fa00 f202 	lsl.w	r2, r0, r2
 8010a56:	3320      	adds	r3, #32
 8010a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010a5c:	f3bf 8f4f 	dsb	sy
}
 8010a60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010a62:	f3bf 8f6f 	isb	sy
}
 8010a66:	bf00      	nop
}
 8010a68:	bf00      	nop
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr
 8010a74:	e000e100 	.word	0xe000e100

08010a78 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010a78:	b480      	push	{r7}
 8010a7a:	b083      	sub	sp, #12
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
        : color(0)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	601a      	str	r2, [r3, #0]
    }
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
        return color;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
    }
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
    {
 8010ab4:	4a04      	ldr	r2, [pc, #16]	@ (8010ac8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	601a      	str	r2, [r3, #0]
    }
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr
 8010ac8:	08022a84 	.word	0x08022a84

08010acc <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
    }
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff ffe9 	bl	8010aac <_ZN8touchgfx9DMA_QueueD1Ev>
 8010ada:	2104      	movs	r1, #4
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f00f fe7c 	bl	80207da <_ZdlPvj>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	3344      	adds	r3, #68	@ 0x44
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	4798      	blx	r3
    }
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
    {
 8010b10:	4a04      	ldr	r2, [pc, #16]	@ (8010b24 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	601a      	str	r2, [r3, #0]
    }
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr
 8010b24:	08022dfc 	.word	0x08022dfc

08010b28 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
    }
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f7ff ffe9 	bl	8010b08 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010b36:	210c      	movs	r1, #12
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f00f fe4e 	bl	80207da <_ZdlPvj>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4618      	mov	r0, r3
 8010b42:	3708      	adds	r7, #8
 8010b44:	46bd      	mov	sp, r7
 8010b46:	bd80      	pop	{r7, pc}

08010b48 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8010b48:	b480      	push	{r7}
 8010b4a:	b083      	sub	sp, #12
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8010b52:	4a09      	ldr	r2, [pc, #36]	@ (8010b78 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	601a      	str	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	605a      	str	r2, [r3, #4]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2200      	movs	r2, #0
 8010b62:	721a      	strb	r2, [r3, #8]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2200      	movs	r2, #0
 8010b68:	725a      	strb	r2, [r3, #9]
    {
    }
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	08022dfc 	.word	0x08022dfc

08010b7c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8010b84:	2301      	movs	r3, #1
    }
 8010b86:	4618      	mov	r0, r3
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr

08010b92 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b082      	sub	sp, #8
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	3328      	adds	r3, #40	@ 0x28
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	4798      	blx	r3
    }
 8010ba8:	bf00      	nop
 8010baa:	3708      	adds	r7, #8
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	685a      	ldr	r2, [r3, #4]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3314      	adds	r3, #20
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4610      	mov	r0, r2
 8010bc8:	4798      	blx	r3
    }
 8010bca:	bf00      	nop
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b082      	sub	sp, #8
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8010bda:	f7fd fa87 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 8010bde:	4603      	mov	r3, r0
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7ff ffe5 	bl	8010bb0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8010be6:	bf00      	nop
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}

08010bee <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b082      	sub	sp, #8
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	330c      	adds	r3, #12
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff ff3c 	bl	8010a78 <_ZN8touchgfx9colortypeC1Ev>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4618      	mov	r0, r3
 8010c04:	3708      	adds	r7, #8
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8010c0c:	b5b0      	push	{r4, r5, r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	330c      	adds	r3, #12
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	4610      	mov	r0, r2
 8010c1e:	f7ff ff93 	bl	8010b48 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010c22:	4a0e      	ldr	r2, [pc, #56]	@ (8010c5c <_ZN8STM32DMAC1Ev+0x50>)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f103 000c 	add.w	r0, r3, #12
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	3320      	adds	r3, #32
 8010c32:	2260      	movs	r2, #96	@ 0x60
 8010c34:	4619      	mov	r1, r3
 8010c36:	f002 fc31 	bl	801349c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3320      	adds	r3, #32
 8010c3e:	245f      	movs	r4, #95	@ 0x5f
 8010c40:	461d      	mov	r5, r3
 8010c42:	e004      	b.n	8010c4e <_ZN8STM32DMAC1Ev+0x42>
 8010c44:	4628      	mov	r0, r5
 8010c46:	f7ff ffd2 	bl	8010bee <_ZN8touchgfx6BlitOpC1Ev>
 8010c4a:	3c01      	subs	r4, #1
 8010c4c:	3524      	adds	r5, #36	@ 0x24
 8010c4e:	2c00      	cmp	r4, #0
 8010c50:	daf8      	bge.n	8010c44 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8010c5c:	08022a34 	.word	0x08022a34

08010c60 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	4a09      	ldr	r2, [pc, #36]	@ (8010c90 <_ZN8STM32DMAD1Ev+0x30>)
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8010c6e:	205a      	movs	r0, #90	@ 0x5a
 8010c70:	f7ff fede 	bl	8010a30 <__NVIC_DisableIRQ>
}
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	330c      	adds	r3, #12
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 faab 	bl	80111d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7ff ff41 	bl	8010b08 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	08022a34 	.word	0x08022a34

08010c94 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
}
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f7ff ffdf 	bl	8010c60 <_ZN8STM32DMAD1Ev>
 8010ca2:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f00f fd97 	bl	80207da <_ZdlPvj>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8010cc0:	4b12      	ldr	r3, [pc, #72]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010cc2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8010cc6:	4a11      	ldr	r2, [pc, #68]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010cc8:	f043 0310 	orr.w	r3, r3, #16
 8010ccc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8010cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010cd2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8010cd6:	f003 0310 	and.w	r3, r3, #16
 8010cda:	60fb      	str	r3, [r7, #12]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8010cde:	4b0b      	ldr	r3, [pc, #44]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010ce4:	f043 0310 	orr.w	r3, r3, #16
 8010ce8:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8010cea:	4b08      	ldr	r3, [pc, #32]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cee:	4a07      	ldr	r2, [pc, #28]	@ (8010d0c <_ZN8STM32DMA10initializeEv+0x54>)
 8010cf0:	f023 0310 	bic.w	r3, r3, #16
 8010cf4:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8010cf6:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <_ZN8STM32DMA10initializeEv+0x58>)
 8010cf8:	4a06      	ldr	r2, [pc, #24]	@ (8010d14 <_ZN8STM32DMA10initializeEv+0x5c>)
 8010cfa:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8010cfc:	205a      	movs	r0, #90	@ 0x5a
 8010cfe:	f7ff fe79 	bl	80109f4 <__NVIC_EnableIRQ>
}
 8010d02:	bf00      	nop
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	58024400 	.word	0x58024400
 8010d10:	24000150 	.word	0x24000150
 8010d14:	08010bd3 	.word	0x08010bd3

08010d18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b084      	sub	sp, #16
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010d24:	2300      	movs	r3, #0
 8010d26:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	2b0b      	cmp	r3, #11
 8010d2c:	d826      	bhi.n	8010d7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8010d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8010d34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010d71 	.word	0x08010d71
 8010d38:	08010d6b 	.word	0x08010d6b
 8010d3c:	08010d65 	.word	0x08010d65
 8010d40:	08010d7d 	.word	0x08010d7d
 8010d44:	08010d7d 	.word	0x08010d7d
 8010d48:	08010d7d 	.word	0x08010d7d
 8010d4c:	08010d7d 	.word	0x08010d7d
 8010d50:	08010d77 	.word	0x08010d77
 8010d54:	08010d77 	.word	0x08010d77
 8010d58:	08010d77 	.word	0x08010d77
 8010d5c:	08010d77 	.word	0x08010d77
 8010d60:	08010d77 	.word	0x08010d77
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8010d64:	2300      	movs	r3, #0
 8010d66:	60fb      	str	r3, [r7, #12]
        break;
 8010d68:	e00e      	b.n	8010d88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	60fb      	str	r3, [r7, #12]
        break;
 8010d6e:	e00b      	b.n	8010d88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8010d70:	2302      	movs	r3, #2
 8010d72:	60fb      	str	r3, [r7, #12]
        break;
 8010d74:	e008      	b.n	8010d88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8010d76:	2305      	movs	r3, #5
 8010d78:	60fb      	str	r3, [r7, #12]
        break;
 8010d7a:	e005      	b.n	8010d88 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8010d7c:	4b05      	ldr	r3, [pc, #20]	@ (8010d94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8010d7e:	4a06      	ldr	r2, [pc, #24]	@ (8010d98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8010d80:	2165      	movs	r1, #101	@ 0x65
 8010d82:	4806      	ldr	r0, [pc, #24]	@ (8010d9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8010d84:	f00f fd58 	bl	8020838 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010d88:	68fb      	ldr	r3, [r7, #12]
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	08022224 	.word	0x08022224
 8010d98:	08022240 	.word	0x08022240
 8010d9c:	0802228c 	.word	0x0802228c

08010da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010dac:	2300      	movs	r3, #0
 8010dae:	60fb      	str	r3, [r7, #12]

    switch (format)
 8010db0:	78fb      	ldrb	r3, [r7, #3]
 8010db2:	2b0a      	cmp	r3, #10
 8010db4:	d821      	bhi.n	8010dfa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8010db6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dbc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8010db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dbc:	08010df5 	.word	0x08010df5
 8010dc0:	08010def 	.word	0x08010def
 8010dc4:	08010de9 	.word	0x08010de9
 8010dc8:	08010dfb 	.word	0x08010dfb
 8010dcc:	08010dfb 	.word	0x08010dfb
 8010dd0:	08010dfb 	.word	0x08010dfb
 8010dd4:	08010dfb 	.word	0x08010dfb
 8010dd8:	08010def 	.word	0x08010def
 8010ddc:	08010def 	.word	0x08010def
 8010de0:	08010def 	.word	0x08010def
 8010de4:	08010def 	.word	0x08010def
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8010de8:	2300      	movs	r3, #0
 8010dea:	60fb      	str	r3, [r7, #12]
        break;
 8010dec:	e00b      	b.n	8010e06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8010dee:	2301      	movs	r3, #1
 8010df0:	60fb      	str	r3, [r7, #12]
        break;
 8010df2:	e008      	b.n	8010e06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8010df4:	2302      	movs	r3, #2
 8010df6:	60fb      	str	r3, [r7, #12]
        break;
 8010df8:	e005      	b.n	8010e06 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8010dfa:	4b05      	ldr	r3, [pc, #20]	@ (8010e10 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8010dfc:	4a05      	ldr	r2, [pc, #20]	@ (8010e14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8010dfe:	2186      	movs	r1, #134	@ 0x86
 8010e00:	4805      	ldr	r0, [pc, #20]	@ (8010e18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8010e02:	f00f fd19 	bl	8020838 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8010e06:	68fb      	ldr	r3, [r7, #12]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3710      	adds	r7, #16
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	08022224 	.word	0x08022224
 8010e14:	080222b8 	.word	0x080222b8
 8010e18:	0802228c 	.word	0x0802228c

08010e1c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8010e24:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr

08010e34 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8010e34:	b590      	push	{r4, r7, lr}
 8010e36:	b089      	sub	sp, #36	@ 0x24
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
 8010e3c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	7f5b      	ldrb	r3, [r3, #29]
 8010e42:	4619      	mov	r1, r3
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7ff ff67 	bl	8010d18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010e4a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	7f9b      	ldrb	r3, [r3, #30]
 8010e50:	4619      	mov	r1, r3
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff ff60 	bl	8010d18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010e58:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	7f9b      	ldrb	r3, [r3, #30]
 8010e5e:	4619      	mov	r1, r3
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f7ff ff9d 	bl	8010da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8010e66:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	8b5b      	ldrh	r3, [r3, #26]
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	8a9b      	ldrh	r3, [r3, #20]
 8010e72:	1ad2      	subs	r2, r2, r3
 8010e74:	4b94      	ldr	r3, [pc, #592]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010e76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	8b5b      	ldrh	r3, [r3, #26]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	8a9b      	ldrh	r3, [r3, #20]
 8010e82:	1ad2      	subs	r2, r2, r3
 8010e84:	4b90      	ldr	r3, [pc, #576]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010e86:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	8b1b      	ldrh	r3, [r3, #24]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	8a9b      	ldrh	r3, [r3, #20]
 8010e92:	1ad2      	subs	r2, r2, r3
 8010e94:	4b8c      	ldr	r3, [pc, #560]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010e96:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8010e98:	4a8b      	ldr	r2, [pc, #556]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	8adb      	ldrh	r3, [r3, #22]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	8a9b      	ldrh	r3, [r3, #20]
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	431a      	orrs	r2, r3
 8010eac:	4b86      	ldr	r3, [pc, #536]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010eae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	691a      	ldr	r2, [r3, #16]
 8010eb4:	4b84      	ldr	r3, [pc, #528]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	4b82      	ldr	r3, [pc, #520]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010ebe:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ec8:	d036      	beq.n	8010f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 8010eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ece:	f200 80de 	bhi.w	801108e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8010ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ed6:	d015      	beq.n	8010f04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8010ed8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010edc:	f200 80d7 	bhi.w	801108e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8010ee0:	2b80      	cmp	r3, #128	@ 0x80
 8010ee2:	d043      	beq.n	8010f6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 8010ee4:	2b80      	cmp	r3, #128	@ 0x80
 8010ee6:	f200 80d2 	bhi.w	801108e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8010eea:	2b40      	cmp	r3, #64	@ 0x40
 8010eec:	f000 80bb 	beq.w	8011066 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 8010ef0:	2b40      	cmp	r3, #64	@ 0x40
 8010ef2:	f200 80cc 	bhi.w	801108e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	f000 80a1 	beq.w	801103e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 8010efc:	2b20      	cmp	r3, #32
 8010efe:	f000 80b2 	beq.w	8011066 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 8010f02:	e0c4      	b.n	801108e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	7f1b      	ldrb	r3, [r3, #28]
 8010f08:	061a      	lsls	r2, r3, #24
 8010f0a:	496f      	ldr	r1, [pc, #444]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80110cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	330c      	adds	r3, #12
 8010f16:	4c6c      	ldr	r4, [pc, #432]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff fdbb 	bl	8010a94 <_ZNK8touchgfx9colortypecvmEv>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010f22:	4a69      	ldr	r2, [pc, #420]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	691a      	ldr	r2, [r3, #16]
 8010f2c:	4b66      	ldr	r3, [pc, #408]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f2e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010f30:	4b65      	ldr	r3, [pc, #404]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f32:	4a67      	ldr	r2, [pc, #412]	@ (80110d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010f34:	601a      	str	r2, [r3, #0]
        break;
 8010f36:	e0c2      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	7f1b      	ldrb	r3, [r3, #28]
 8010f3c:	061a      	lsls	r2, r3, #24
 8010f3e:	4962      	ldr	r1, [pc, #392]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f40:	4b64      	ldr	r3, [pc, #400]	@ (80110d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8010f42:	4313      	orrs	r3, r2
 8010f44:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	330c      	adds	r3, #12
 8010f4a:	4c5f      	ldr	r4, [pc, #380]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7ff fda1 	bl	8010a94 <_ZNK8touchgfx9colortypecvmEv>
 8010f52:	4603      	mov	r3, r0
 8010f54:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010f56:	4a5c      	ldr	r2, [pc, #368]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	691a      	ldr	r2, [r3, #16]
 8010f60:	4b59      	ldr	r3, [pc, #356]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f62:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8010f64:	4b58      	ldr	r3, [pc, #352]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f66:	4a5a      	ldr	r2, [pc, #360]	@ (80110d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8010f68:	601a      	str	r2, [r3, #0]
        break;
 8010f6a:	e0a8      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8010f72:	2301      	movs	r3, #1
 8010f74:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	7f1b      	ldrb	r3, [r3, #28]
 8010f7a:	061a      	lsls	r2, r3, #24
 8010f7c:	69bb      	ldr	r3, [r7, #24]
 8010f7e:	4313      	orrs	r3, r2
 8010f80:	4a51      	ldr	r2, [pc, #324]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010f86:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8010f88:	4a4f      	ldr	r2, [pc, #316]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	691a      	ldr	r2, [r3, #16]
 8010f92:	4b4d      	ldr	r3, [pc, #308]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f94:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	1d1a      	adds	r2, r3, #4
 8010f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	d00d      	beq.n	8010fc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
 8010fac:	e020      	b.n	8010ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010fae:	4b46      	ldr	r3, [pc, #280]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010fb0:	69da      	ldr	r2, [r3, #28]
 8010fb2:	4b49      	ldr	r3, [pc, #292]	@ (80110d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010fb4:	4013      	ands	r3, r2
 8010fb6:	68fa      	ldr	r2, [r7, #12]
 8010fb8:	8852      	ldrh	r2, [r2, #2]
 8010fba:	3a01      	subs	r2, #1
 8010fbc:	0212      	lsls	r2, r2, #8
 8010fbe:	4611      	mov	r1, r2
 8010fc0:	4a41      	ldr	r2, [pc, #260]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010fc2:	430b      	orrs	r3, r1
 8010fc4:	61d3      	str	r3, [r2, #28]
                break;
 8010fc6:	e01a      	b.n	8010ffe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	7f1b      	ldrb	r3, [r3, #28]
 8010fcc:	2bff      	cmp	r3, #255	@ 0xff
 8010fce:	d101      	bne.n	8010fd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
                {
                    blend = false;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8010fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010fd6:	69da      	ldr	r2, [r3, #28]
 8010fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80110d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8010fda:	4013      	ands	r3, r2
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	8852      	ldrh	r2, [r2, #2]
 8010fe0:	3a01      	subs	r2, #1
 8010fe2:	0212      	lsls	r2, r2, #8
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	4a38      	ldr	r2, [pc, #224]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8010fe8:	f043 0310 	orr.w	r3, r3, #16
 8010fec:	61d3      	str	r3, [r2, #28]
                break;
 8010fee:	e006      	b.n	8010ffe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8010ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80110dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8010ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80110e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8010ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ff8:	483a      	ldr	r0, [pc, #232]	@ (80110e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8010ffa:	f00f fc1d 	bl	8020838 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8010ffe:	4b32      	ldr	r3, [pc, #200]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	4a31      	ldr	r2, [pc, #196]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011004:	f043 0320 	orr.w	r3, r3, #32
 8011008:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801100a:	bf00      	nop
 801100c:	4b2e      	ldr	r3, [pc, #184]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801100e:	69db      	ldr	r3, [r3, #28]
 8011010:	f003 0320 	and.w	r3, r3, #32
 8011014:	2b00      	cmp	r3, #0
 8011016:	bf14      	ite	ne
 8011018:	2301      	movne	r3, #1
 801101a:	2300      	moveq	r3, #0
 801101c:	b2db      	uxtb	r3, r3
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1f4      	bne.n	801100c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8011022:	4b29      	ldr	r3, [pc, #164]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011024:	2210      	movs	r2, #16
 8011026:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8011028:	7ffb      	ldrb	r3, [r7, #31]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d003      	beq.n	8011036 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801102e:	4b26      	ldr	r3, [pc, #152]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011030:	4a27      	ldr	r2, [pc, #156]	@ (80110d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011032:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8011034:	e043      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8011036:	4b24      	ldr	r3, [pc, #144]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011038:	4a2b      	ldr	r2, [pc, #172]	@ (80110e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801103a:	601a      	str	r2, [r3, #0]
        break;
 801103c:	e03f      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	7f1b      	ldrb	r3, [r3, #28]
 8011042:	061a      	lsls	r2, r3, #24
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	4313      	orrs	r3, r2
 8011048:	4a1f      	ldr	r2, [pc, #124]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801104a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801104e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011050:	4a1d      	ldr	r2, [pc, #116]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	691a      	ldr	r2, [r3, #16]
 801105a:	4b1b      	ldr	r3, [pc, #108]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801105c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801105e:	4b1a      	ldr	r3, [pc, #104]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011060:	4a1b      	ldr	r2, [pc, #108]	@ (80110d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8011062:	601a      	str	r2, [r3, #0]
        break;
 8011064:	e02b      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	7f1b      	ldrb	r3, [r3, #28]
 801106a:	061a      	lsls	r2, r3, #24
 801106c:	69bb      	ldr	r3, [r7, #24]
 801106e:	4313      	orrs	r3, r2
 8011070:	4a15      	ldr	r2, [pc, #84]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011076:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8011078:	4a13      	ldr	r2, [pc, #76]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	691a      	ldr	r2, [r3, #16]
 8011082:	4b11      	ldr	r3, [pc, #68]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011084:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8011086:	4b10      	ldr	r3, [pc, #64]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8011088:	4a11      	ldr	r2, [pc, #68]	@ (80110d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801108a:	601a      	str	r2, [r3, #0]
        break;
 801108c:	e017      	b.n	80110be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	7f1b      	ldrb	r3, [r3, #28]
 8011092:	061a      	lsls	r2, r3, #24
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	4313      	orrs	r3, r2
 8011098:	4a0b      	ldr	r2, [pc, #44]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801109a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801109e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	7f5a      	ldrb	r2, [r3, #29]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	7f9b      	ldrb	r3, [r3, #30]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d003      	beq.n	80110b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80110ac:	4b06      	ldr	r3, [pc, #24]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80110ae:	4a0e      	ldr	r2, [pc, #56]	@ (80110e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 80110b0:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 80110b2:	e003      	b.n	80110bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80110b4:	4b04      	ldr	r3, [pc, #16]	@ (80110c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80110b6:	f240 2201 	movw	r2, #513	@ 0x201
 80110ba:	601a      	str	r2, [r3, #0]
        break;
 80110bc:	bf00      	nop
    }
}
 80110be:	bf00      	nop
 80110c0:	3724      	adds	r7, #36	@ 0x24
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd90      	pop	{r4, r7, pc}
 80110c6:	bf00      	nop
 80110c8:	52001000 	.word	0x52001000
 80110cc:	0002000a 	.word	0x0002000a
 80110d0:	00020201 	.word	0x00020201
 80110d4:	00020009 	.word	0x00020009
 80110d8:	ffff00ef 	.word	0xffff00ef
 80110dc:	08022304 	.word	0x08022304
 80110e0:	08022320 	.word	0x08022320
 80110e4:	0802228c 	.word	0x0802228c
 80110e8:	00010201 	.word	0x00010201

080110ec <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80110ec:	b590      	push	{r4, r7, lr}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	7f9b      	ldrb	r3, [r3, #30]
 80110fa:	4619      	mov	r1, r3
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	f7ff fe4f 	bl	8010da0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8011102:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8011104:	4a2f      	ldr	r2, [pc, #188]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	8adb      	ldrh	r3, [r3, #22]
 801110e:	461a      	mov	r2, r3
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	8a9b      	ldrh	r3, [r3, #20]
 8011114:	041b      	lsls	r3, r3, #16
 8011116:	431a      	orrs	r2, r3
 8011118:	4b2a      	ldr	r3, [pc, #168]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801111a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	691a      	ldr	r2, [r3, #16]
 8011120:	4b28      	ldr	r3, [pc, #160]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011122:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	8b5b      	ldrh	r3, [r3, #26]
 8011128:	461a      	mov	r2, r3
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	8a9b      	ldrh	r3, [r3, #20]
 801112e:	1ad2      	subs	r2, r2, r3
 8011130:	4b24      	ldr	r3, [pc, #144]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011132:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b08      	cmp	r3, #8
 801113a:	d12d      	bne.n	8011198 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	8b5b      	ldrh	r3, [r3, #26]
 8011140:	461a      	mov	r2, r3
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	8a9b      	ldrh	r3, [r3, #20]
 8011146:	1ad2      	subs	r2, r2, r3
 8011148:	4b1e      	ldr	r3, [pc, #120]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801114a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	8b5b      	ldrh	r3, [r3, #26]
 8011150:	461a      	mov	r2, r3
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	8a9b      	ldrh	r3, [r3, #20]
 8011156:	1ad2      	subs	r2, r2, r3
 8011158:	4b1a      	ldr	r3, [pc, #104]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801115a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801115c:	4a19      	ldr	r2, [pc, #100]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	7f1b      	ldrb	r3, [r3, #28]
 8011166:	061a      	lsls	r2, r3, #24
 8011168:	4916      	ldr	r1, [pc, #88]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801116a:	4b17      	ldr	r3, [pc, #92]	@ (80111c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801116c:	4313      	orrs	r3, r2
 801116e:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	330c      	adds	r3, #12
 8011174:	4c13      	ldr	r4, [pc, #76]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff fc8c 	bl	8010a94 <_ZNK8touchgfx9colortypecvmEv>
 801117c:	4603      	mov	r3, r0
 801117e:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	691a      	ldr	r2, [r3, #16]
 8011184:	4b0f      	ldr	r3, [pc, #60]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011186:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	691a      	ldr	r2, [r3, #16]
 801118c:	4b0d      	ldr	r3, [pc, #52]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801118e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8011190:	4b0c      	ldr	r3, [pc, #48]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8011192:	4a0e      	ldr	r2, [pc, #56]	@ (80111cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8011194:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8011196:	e010      	b.n	80111ba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8011198:	4a0a      	ldr	r2, [pc, #40]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801119e:	4b09      	ldr	r3, [pc, #36]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	330c      	adds	r3, #12
 80111a8:	4c06      	ldr	r4, [pc, #24]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7ff fc72 	bl	8010a94 <_ZNK8touchgfx9colortypecvmEv>
 80111b0:	4603      	mov	r3, r0
 80111b2:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80111b4:	4b03      	ldr	r3, [pc, #12]	@ (80111c4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80111b6:	4a06      	ldr	r2, [pc, #24]	@ (80111d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 80111b8:	601a      	str	r2, [r3, #0]
}
 80111ba:	bf00      	nop
 80111bc:	3714      	adds	r7, #20
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd90      	pop	{r4, r7, pc}
 80111c2:	bf00      	nop
 80111c4:	52001000 	.word	0x52001000
 80111c8:	00010009 	.word	0x00010009
 80111cc:	00020201 	.word	0x00020201
 80111d0:	00030201 	.word	0x00030201

080111d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	4a05      	ldr	r2, [pc, #20]	@ (80111f4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff fc61 	bl	8010aac <_ZN8touchgfx9DMA_QueueD1Ev>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4618      	mov	r0, r3
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	08022e4c 	.word	0x08022e4c

080111f8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff ffe7 	bl	80111d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011206:	2114      	movs	r1, #20
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f00f fae6 	bl	80207da <_ZdlPvj>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4618      	mov	r0, r3
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8011220:	4a04      	ldr	r2, [pc, #16]	@ (8011234 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6013      	str	r3, [r2, #0]
    }
 8011226:	bf00      	nop
 8011228:	370c      	adds	r7, #12
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	2401b5a4 	.word	0x2401b5a4

08011238 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
 8011244:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8011246:	4a0b      	ldr	r2, [pc, #44]	@ (8011274 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	68ba      	ldr	r2, [r7, #8]
 8011250:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	687a      	ldr	r2, [r7, #4]
 8011256:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	683a      	ldr	r2, [r7, #0]
 801125c:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	611a      	str	r2, [r3, #16]
    {
    }
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	4618      	mov	r0, r3
 8011268:	3714      	adds	r7, #20
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	08022b6c 	.word	0x08022b6c

08011278 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
    {
 8011280:	4a04      	ldr	r2, [pc, #16]	@ (8011294 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	601a      	str	r2, [r3, #0]
    }
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	4618      	mov	r0, r3
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr
 8011294:	08022b6c 	.word	0x08022b6c

08011298 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
    }
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7ff ffe9 	bl	8011278 <_ZN8touchgfx7MVPHeapD1Ev>
 80112a6:	2114      	movs	r1, #20
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f00f fa96 	bl	80207da <_ZdlPvj>
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4618      	mov	r0, r3
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
    {
 80112c0:	4a04      	ldr	r2, [pc, #16]	@ (80112d4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	601a      	str	r2, [r3, #0]
    }
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4618      	mov	r0, r3
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr
 80112d4:	0802309c 	.word	0x0802309c

080112d8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
    }
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7ff ffe9 	bl	80112b8 <_ZN8touchgfx3LCDD1Ev>
 80112e6:	210c      	movs	r1, #12
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f00f fa76 	bl	80207da <_ZdlPvj>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	4618      	mov	r0, r3
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
            : startX(0),
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	801a      	strh	r2, [r3, #0]
              startY(0),
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2200      	movs	r2, #0
 801130a:	805a      	strh	r2, [r3, #2]
              downX(0),
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	809a      	strh	r2, [r3, #4]
              downY(0),
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2200      	movs	r2, #0
 801131c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2200      	movs	r2, #0
 8011322:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	739a      	strb	r2, [r3, #14]
        {
        }
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4618      	mov	r0, r3
 8011334:	370c      	adds	r7, #12
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff ffd5 	bl	80112f8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2200      	movs	r2, #0
 8011352:	611a      	str	r2, [r3, #16]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	829a      	strh	r2, [r3, #20]
    {
    }
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	3708      	adds	r7, #8
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
 8011370:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8011372:	4a55      	ldr	r2, [pc, #340]	@ (80114c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	683a      	ldr	r2, [r7, #0]
 8011388:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2200      	movs	r2, #0
 801138e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2200      	movs	r2, #0
 8011394:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2200      	movs	r2, #0
 801139a:	619a      	str	r2, [r3, #24]
          gestures(),
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	331c      	adds	r3, #28
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7ff ffcc 	bl	801133e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2200      	movs	r2, #0
 80113b2:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2200      	movs	r2, #0
 80113b8:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2200      	movs	r2, #0
 80113ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	2201      	movs	r2, #1
 80113d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2200      	movs	r2, #0
 80113da:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2200      	movs	r2, #0
 80113e2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2200      	movs	r2, #0
 80113ea:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	3350      	adds	r3, #80	@ 0x50
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fd fb12 	bl	800ea1a <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2200      	movs	r2, #0
 80113fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2200      	movs	r2, #0
 8011402:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2200      	movs	r2, #0
 8011408:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2200      	movs	r2, #0
 801140e:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2201      	movs	r2, #1
 8011414:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2200      	movs	r2, #0
 801141c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2200      	movs	r2, #0
 8011424:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2201      	movs	r2, #1
 801142c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2200      	movs	r2, #0
 8011434:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	2200      	movs	r2, #0
 801143c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2200      	movs	r2, #0
 8011444:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2200      	movs	r2, #0
 801144c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2200      	movs	r2, #0
 8011454:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2200      	movs	r2, #0
 801146a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2201      	movs	r2, #1
 8011472:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2201      	movs	r2, #1
 801147a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 801147e:	4a13      	ldr	r2, [pc, #76]	@ (80114cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8011484:	4a12      	ldr	r2, [pc, #72]	@ (80114d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8011486:	8b3b      	ldrh	r3, [r7, #24]
 8011488:	8013      	strh	r3, [r2, #0]
 801148a:	4b11      	ldr	r3, [pc, #68]	@ (80114d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801148c:	881a      	ldrh	r2, [r3, #0]
 801148e:	4b11      	ldr	r3, [pc, #68]	@ (80114d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8011490:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8011492:	4a11      	ldr	r2, [pc, #68]	@ (80114d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8011494:	8bbb      	ldrh	r3, [r7, #28]
 8011496:	8013      	strh	r3, [r2, #0]
 8011498:	4b0f      	ldr	r3, [pc, #60]	@ (80114d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801149a:	881a      	ldrh	r2, [r3, #0]
 801149c:	4b0f      	ldr	r3, [pc, #60]	@ (80114dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801149e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80114a0:	4b0f      	ldr	r3, [pc, #60]	@ (80114e0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80114a2:	2200      	movs	r2, #0
 80114a4:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80114a6:	8b3a      	ldrh	r2, [r7, #24]
 80114a8:	8bbb      	ldrh	r3, [r7, #28]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	bf34      	ite	cc
 80114ae:	2301      	movcc	r3, #1
 80114b0:	2300      	movcs	r3, #0
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	461a      	mov	r2, r3
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08022d24 	.word	0x08022d24
 80114cc:	2401b548 	.word	0x2401b548
 80114d0:	2401b53c 	.word	0x2401b53c
 80114d4:	2401b542 	.word	0x2401b542
 80114d8:	2401b53e 	.word	0x2401b53e
 80114dc:	2401b544 	.word	0x2401b544
 80114e0:	2401b540 	.word	0x2401b540

080114e4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b082      	sub	sp, #8
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
    {
        app.gotomainScreenScreenNoTransition();
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fc fff5 	bl	800e4e0 <_ZN23FrontendApplicationBase32gotomainScreenScreenNoTransitionEv>
    }
 80114f6:	bf00      	nop
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af02      	add	r7, sp, #8
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
 801150c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	68b9      	ldr	r1, [r7, #8]
 801151a:	f7ff fe8d 	bl	8011238 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 801151e:	4a04      	ldr	r2, [pc, #16]	@ (8011530 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	601a      	str	r2, [r3, #0]
    {

    }
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	08022b58 	.word	0x08022b58

08011534 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8011534:	b580      	push	{r7, lr}
 8011536:	af00      	add	r7, sp, #0
 8011538:	4801      	ldr	r0, [pc, #4]	@ (8011540 <__tcf_0+0xc>)
 801153a:	f000 f965 	bl	8011808 <_ZN12FrontendHeapD1Ev>
 801153e:	bd80      	pop	{r7, pc}
 8011540:	2401a3c8 	.word	0x2401a3c8

08011544 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8011544:	b580      	push	{r7, lr}
 8011546:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8011548:	4b11      	ldr	r3, [pc, #68]	@ (8011590 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f3bf 8f5b 	dmb	ish
 8011550:	f003 0301 	and.w	r3, r3, #1
 8011554:	2b00      	cmp	r3, #0
 8011556:	bf0c      	ite	eq
 8011558:	2301      	moveq	r3, #1
 801155a:	2300      	movne	r3, #0
 801155c:	b2db      	uxtb	r3, r3
 801155e:	2b00      	cmp	r3, #0
 8011560:	d013      	beq.n	801158a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011562:	480b      	ldr	r0, [pc, #44]	@ (8011590 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011564:	f00f f93b 	bl	80207de <__cxa_guard_acquire>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	bf14      	ite	ne
 801156e:	2301      	movne	r3, #1
 8011570:	2300      	moveq	r3, #0
 8011572:	b2db      	uxtb	r3, r3
 8011574:	2b00      	cmp	r3, #0
 8011576:	d008      	beq.n	801158a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8011578:	4806      	ldr	r0, [pc, #24]	@ (8011594 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801157a:	f000 f867 	bl	801164c <_ZN12FrontendHeapC1Ev>
 801157e:	4806      	ldr	r0, [pc, #24]	@ (8011598 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8011580:	f00f f978 	bl	8020874 <atexit>
 8011584:	4802      	ldr	r0, [pc, #8]	@ (8011590 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8011586:	f00f f936 	bl	80207f6 <__cxa_guard_release>
        return instance;
 801158a:	4b02      	ldr	r3, [pc, #8]	@ (8011594 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 801158c:	4618      	mov	r0, r3
 801158e:	bd80      	pop	{r7, pc}
 8011590:	2401a6a8 	.word	0x2401a6a8
 8011594:	2401a3c8 	.word	0x2401a3c8
 8011598:	08011535 	.word	0x08011535

0801159c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
 80115a4:	4a05      	ldr	r2, [pc, #20]	@ (80115bc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	601a      	str	r2, [r3, #0]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff fe63 	bl	8011278 <_ZN8touchgfx7MVPHeapD1Ev>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	08022b58 	.word	0x08022b58

080115c0 <_ZN16FrontendHeapBaseD0Ev>:
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6878      	ldr	r0, [r7, #4]
 80115ca:	f7ff ffe7 	bl	801159c <_ZN16FrontendHeapBaseD1Ev>
 80115ce:	2114      	movs	r1, #20
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f00f f902 	bl	80207da <_ZdlPvj>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f000 fdd4 	bl	8012198 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80115f0:	4a03      	ldr	r2, [pc, #12]	@ (8011600 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	601a      	str	r2, [r3, #0]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4618      	mov	r0, r3
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	08022b24 	.word	0x08022b24

08011604 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	4618      	mov	r0, r3
 8011610:	f000 fdc2 	bl	8012198 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011614:	4a03      	ldr	r2, [pc, #12]	@ (8011624 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	601a      	str	r2, [r3, #0]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4618      	mov	r0, r3
 801161e:	3708      	adds	r7, #8
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	08022af0 	.word	0x08022af0

08011628 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	4618      	mov	r0, r3
 8011634:	f000 fdb0 	bl	8012198 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8011638:	4a03      	ldr	r2, [pc, #12]	@ (8011648 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	601a      	str	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4618      	mov	r0, r3
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	08022abc 	.word	0x08022abc

0801164c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801164c:	b590      	push	{r4, r7, lr}
 801164e:	b085      	sub	sp, #20
 8011650:	af02      	add	r7, sp, #8
 8011652:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f103 0114 	add.w	r1, r3, #20
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
                     app(model, *this)
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	4623      	mov	r3, r4
 8011672:	f7ff ff45 	bl	8011500 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8011676:	4a18      	ldr	r2, [pc, #96]	@ (80116d8 <_ZN12FrontendHeapC1Ev+0x8c>)
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	601a      	str	r2, [r3, #0]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	3314      	adds	r3, #20
 8011680:	4618      	mov	r0, r3
 8011682:	f7ff ffad 	bl	80115e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	332c      	adds	r3, #44	@ 0x2c
 801168a:	4618      	mov	r0, r3
 801168c:	f7ff ffba 	bl	8011604 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff ffc6 	bl	8011628 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fe fcdb 	bl	801005e <_ZN5ModelC1Ev>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	4619      	mov	r1, r3
 80116b8:	f7fe fa64 	bl	800fb84 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80116c4:	4619      	mov	r1, r3
 80116c6:	4610      	mov	r0, r2
 80116c8:	f7ff ff0c 	bl	80114e4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	370c      	adds	r7, #12
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd90      	pop	{r4, r7, pc}
 80116d6:	bf00      	nop
 80116d8:	08022aa8 	.word	0x08022aa8

080116dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80116dc:	b580      	push	{r7, lr}
 80116de:	b086      	sub	sp, #24
 80116e0:	af02      	add	r7, sp, #8
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	607a      	str	r2, [r7, #4]
 80116e8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80116ea:	68f8      	ldr	r0, [r7, #12]
 80116ec:	8bbb      	ldrh	r3, [r7, #28]
 80116ee:	9301      	str	r3, [sp, #4]
 80116f0:	8b3b      	ldrh	r3, [r7, #24]
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	68b9      	ldr	r1, [r7, #8]
 80116fa:	f7ff fe33 	bl	8011364 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80116fe:	4a04      	ldr	r2, [pc, #16]	@ (8011710 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	601a      	str	r2, [r3, #0]
    }
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	4618      	mov	r0, r3
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	08022b7c 	.word	0x08022b7c

08011714 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af02      	add	r7, sp, #8
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
 8011720:	603b      	str	r3, [r7, #0]
 8011722:	68f8      	ldr	r0, [r7, #12]
 8011724:	8bbb      	ldrh	r3, [r7, #28]
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	8b3b      	ldrh	r3, [r7, #24]
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	68b9      	ldr	r1, [r7, #8]
 8011732:	f7ff ffd3 	bl	80116dc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8011736:	4a04      	ldr	r2, [pc, #16]	@ (8011748 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	601a      	str	r2, [r3, #0]
    }
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	0802295c 	.word	0x0802295c

0801174c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	4a04      	ldr	r2, [pc, #16]	@ (8011768 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4618      	mov	r0, r3
 801175e:	370c      	adds	r7, #12
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr
 8011768:	08022944 	.word	0x08022944

0801176c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801176c:	b580      	push	{r7, lr}
 801176e:	b082      	sub	sp, #8
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4618      	mov	r0, r3
 8011778:	f7ff ffe8 	bl	801174c <_ZN8touchgfx15TouchControllerC1Ev>
 801177c:	4a03      	ldr	r2, [pc, #12]	@ (801178c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	4618      	mov	r0, r3
 8011786:	3708      	adds	r7, #8
 8011788:	46bd      	mov	sp, r7
 801178a:	bd80      	pop	{r7, pc}
 801178c:	0802292c 	.word	0x0802292c

08011790 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b085      	sub	sp, #20
 8011794:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8011796:	f7fd fff7 	bl	800f788 <_ZN14BitmapDatabase11getInstanceEv>
 801179a:	4604      	mov	r4, r0
 801179c:	f7fd fffe 	bl	800f79c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80117a0:	4603      	mov	r3, r0
 80117a2:	4619      	mov	r1, r3
 80117a4:	2300      	movs	r3, #0
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	2300      	movs	r3, #0
 80117aa:	2200      	movs	r2, #0
 80117ac:	4620      	mov	r0, r4
 80117ae:	f005 fd81 	bl	80172b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80117b2:	4809      	ldr	r0, [pc, #36]	@ (80117d8 <touchgfx_init+0x48>)
 80117b4:	f7ff fd30 	bl	8011218 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80117b8:	2000      	movs	r0, #0
 80117ba:	f7fe f91b 	bl	800f9f4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80117be:	4807      	ldr	r0, [pc, #28]	@ (80117dc <touchgfx_init+0x4c>)
 80117c0:	f005 fc24 	bl	801700c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80117c4:	f7ff febe 	bl	8011544 <_ZN12FrontendHeap11getInstanceEv>
 80117c8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80117ca:	4805      	ldr	r0, [pc, #20]	@ (80117e0 <touchgfx_init+0x50>)
 80117cc:	f7fe ff78 	bl	80106c0 <_ZN11TouchGFXHAL10initializeEv>
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd90      	pop	{r4, r7, pc}
 80117d8:	2401b4b8 	.word	0x2401b4b8
 80117dc:	2400004c 	.word	0x2400004c
 80117e0:	2401b4bc 	.word	0x2401b4bc

080117e4 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80117e4:	b480      	push	{r7}
 80117e6:	af00      	add	r7, sp, #0
}
 80117e8:	bf00      	nop
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
	...

080117f4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80117f8:	4802      	ldr	r0, [pc, #8]	@ (8011804 <touchgfx_taskEntry+0x10>)
 80117fa:	f7fe ff6d 	bl	80106d8 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80117fe:	bf00      	nop
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	2401b4bc 	.word	0x2401b4bc

08011808 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	4a10      	ldr	r2, [pc, #64]	@ (8011854 <_ZN12FrontendHeapD1Ev+0x4c>)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe f97b 	bl	800fb18 <_ZN19FrontendApplicationD1Ev>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8011828:	4618      	mov	r0, r3
 801182a:	f000 f827 	bl	801187c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	332c      	adds	r3, #44	@ 0x2c
 8011832:	4618      	mov	r0, r3
 8011834:	f000 f844 	bl	80118c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	3314      	adds	r3, #20
 801183c:	4618      	mov	r0, r3
 801183e:	f000 f863 	bl	8011908 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4618      	mov	r0, r3
 8011846:	f7ff fea9 	bl	801159c <_ZN16FrontendHeapBaseD1Ev>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4618      	mov	r0, r3
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	08022aa8 	.word	0x08022aa8

08011858 <_ZN12FrontendHeapD0Ev>:
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f7ff ffd1 	bl	8011808 <_ZN12FrontendHeapD1Ev>
 8011866:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f00e ffb5 	bl	80207da <_ZdlPvj>
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	3708      	adds	r7, #8
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
	...

0801187c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	4a05      	ldr	r2, [pc, #20]	@ (801189c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	601a      	str	r2, [r3, #0]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4618      	mov	r0, r3
 801188e:	f000 fc82 	bl	8012196 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4618      	mov	r0, r3
 8011896:	3708      	adds	r7, #8
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}
 801189c:	08022abc 	.word	0x08022abc

080118a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7ff ffe7 	bl	801187c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80118ae:	2114      	movs	r1, #20
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f00e ff92 	bl	80207da <_ZdlPvj>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	4618      	mov	r0, r3
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	4a05      	ldr	r2, [pc, #20]	@ (80118e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	601a      	str	r2, [r3, #0]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	4618      	mov	r0, r3
 80118d2:	f000 fc60 	bl	8012196 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4618      	mov	r0, r3
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	08022af0 	.word	0x08022af0

080118e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7ff ffe7 	bl	80118c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80118f2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f00e ff6f 	bl	80207da <_ZdlPvj>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4618      	mov	r0, r3
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	4a05      	ldr	r2, [pc, #20]	@ (8011928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	601a      	str	r2, [r3, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	4618      	mov	r0, r3
 801191a:	f000 fc3c 	bl	8012196 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4618      	mov	r0, r3
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	08022b24 	.word	0x08022b24

0801192c <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff ffe7 	bl	8011908 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801193a:	2118      	movs	r1, #24
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f00e ff4c 	bl	80207da <_ZdlPvj>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	4a05      	ldr	r2, [pc, #20]	@ (801196c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	601a      	str	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	f7ff fcab 	bl	80112b8 <_ZN8touchgfx3LCDD1Ev>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	4618      	mov	r0, r3
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	08023460 	.word	0x08023460

08011970 <_ZN8touchgfx8LCD24bppD0Ev>:
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7ff ffe7 	bl	801194c <_ZN8touchgfx8LCD24bppD1Ev>
 801197e:	2168      	movs	r1, #104	@ 0x68
 8011980:	6878      	ldr	r0, [r7, #4]
 8011982:	f00e ff2a 	bl	80207da <_ZdlPvj>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <_Z41__static_initialization_and_destruction_0ii>:
 8011990:	b580      	push	{r7, lr}
 8011992:	b084      	sub	sp, #16
 8011994:	af02      	add	r7, sp, #8
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	6039      	str	r1, [r7, #0]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d119      	bne.n	80119d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d114      	bne.n	80119d4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80119aa:	4818      	ldr	r0, [pc, #96]	@ (8011a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80119ac:	f7ff fede 	bl	801176c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80119b0:	4817      	ldr	r0, [pc, #92]	@ (8011a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80119b2:	f7ff f92b 	bl	8010c0c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80119b6:	4817      	ldr	r0, [pc, #92]	@ (8011a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80119b8:	f008 fd28 	bl	801a40c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80119bc:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80119c0:	9301      	str	r3, [sp, #4]
 80119c2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	4b10      	ldr	r3, [pc, #64]	@ (8011a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80119ca:	4a12      	ldr	r2, [pc, #72]	@ (8011a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80119cc:	4910      	ldr	r1, [pc, #64]	@ (8011a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80119ce:	4812      	ldr	r0, [pc, #72]	@ (8011a18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80119d0:	f7ff fea0 	bl	8011714 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d113      	bne.n	8011a02 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119e0:	4293      	cmp	r3, r2
 80119e2:	d10e      	bne.n	8011a02 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80119e4:	480c      	ldr	r0, [pc, #48]	@ (8011a18 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80119e6:	f7fe ff47 	bl	8010878 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80119ea:	480c      	ldr	r0, [pc, #48]	@ (8011a1c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80119ec:	f7fb ffe4 	bl	800d9b8 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 80119f0:	4808      	ldr	r0, [pc, #32]	@ (8011a14 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80119f2:	f7ff ffab 	bl	801194c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 80119f6:	4806      	ldr	r0, [pc, #24]	@ (8011a10 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80119f8:	f7ff f932 	bl	8010c60 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80119fc:	4803      	ldr	r0, [pc, #12]	@ (8011a0c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80119fe:	f7fe fc07 	bl	8010210 <_ZN20STM32TouchControllerD1Ev>
}
 8011a02:	bf00      	nop
 8011a04:	3708      	adds	r7, #8
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	2401a6ac 	.word	0x2401a6ac
 8011a10:	2401a6b0 	.word	0x2401a6b0
 8011a14:	2401b450 	.word	0x2401b450
 8011a18:	2401b4bc 	.word	0x2401b4bc
 8011a1c:	2400004c 	.word	0x2400004c

08011a20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8011a20:	b480      	push	{r7}
 8011a22:	b083      	sub	sp, #12
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8011a28:	2301      	movs	r3, #1
    }
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	370c      	adds	r7, #12
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8011a36:	b480      	push	{r7}
 8011a38:	b083      	sub	sp, #12
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8011a3e:	230c      	movs	r3, #12
    }
 8011a40:	4618      	mov	r0, r3
 8011a42:	370c      	adds	r7, #12
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8011a4c:	b480      	push	{r7}
 8011a4e:	b083      	sub	sp, #12
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011a58:	887a      	ldrh	r2, [r7, #2]
 8011a5a:	4613      	mov	r3, r2
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	4413      	add	r3, r2
 8011a60:	009b      	lsls	r3, r3, #2
 8011a62:	3308      	adds	r3, #8
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	4413      	add	r3, r2
    }
 8011a68:	4618      	mov	r0, r3
 8011a6a:	370c      	adds	r7, #12
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a72:	4770      	bx	lr

08011a74 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8011a80:	887a      	ldrh	r2, [r7, #2]
 8011a82:	4613      	mov	r3, r2
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	4413      	add	r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	3308      	adds	r3, #8
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	4413      	add	r3, r2
    }
 8011a90:	4618      	mov	r0, r3
 8011a92:	370c      	adds	r7, #12
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr

08011a9c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011aa4:	2301      	movs	r3, #1
    }
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011ab2:	b480      	push	{r7}
 8011ab4:	b083      	sub	sp, #12
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011aba:	f44f 739c 	mov.w	r3, #312	@ 0x138
    }
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <_ZN8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011aca:	b480      	push	{r7}
 8011acc:	b083      	sub	sp, #12
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	6078      	str	r0, [r7, #4]
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011ad6:	887b      	ldrh	r3, [r7, #2]
 8011ad8:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8011adc:	fb02 f303 	mul.w	r3, r2, r3
 8011ae0:	3308      	adds	r3, #8
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	4413      	add	r3, r2
    }
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	370c      	adds	r7, #12
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr

08011af2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14mainScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011af2:	b480      	push	{r7}
 8011af4:	b083      	sub	sp, #12
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	6078      	str	r0, [r7, #4]
 8011afa:	460b      	mov	r3, r1
 8011afc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011afe:	887b      	ldrh	r3, [r7, #2]
 8011b00:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8011b04:	fb02 f303 	mul.w	r3, r2, r3
 8011b08:	3308      	adds	r3, #8
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	4413      	add	r3, r2
    }
 8011b0e:	4618      	mov	r0, r3
 8011b10:	370c      	adds	r7, #12
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr

08011b1a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8011b1a:	b480      	push	{r7}
 8011b1c:	b083      	sub	sp, #12
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8011b22:	2301      	movs	r3, #1
    }
 8011b24:	4618      	mov	r0, r3
 8011b26:	370c      	adds	r7, #12
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2e:	4770      	bx	lr

08011b30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8011b38:	2310      	movs	r3, #16
    }
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	370c      	adds	r7, #12
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr

08011b46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8011b46:	b480      	push	{r7}
 8011b48:	b083      	sub	sp, #12
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
 8011b4e:	460b      	mov	r3, r1
 8011b50:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011b52:	887b      	ldrh	r3, [r7, #2]
 8011b54:	011b      	lsls	r3, r3, #4
 8011b56:	3308      	adds	r3, #8
 8011b58:	687a      	ldr	r2, [r7, #4]
 8011b5a:	4413      	add	r3, r2
    }
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19mainScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8011b68:	b480      	push	{r7}
 8011b6a:	b083      	sub	sp, #12
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8011b74:	887b      	ldrh	r3, [r7, #2]
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	3308      	adds	r3, #8
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	4413      	add	r3, r2
    }
 8011b7e:	4618      	mov	r0, r3
 8011b80:	370c      	adds	r7, #12
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr

08011b8a <_GLOBAL__sub_I_touchgfx_init>:
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011b92:	2001      	movs	r0, #1
 8011b94:	f7ff fefc 	bl	8011990 <_Z41__static_initialization_and_destruction_0ii>
 8011b98:	bd80      	pop	{r7, pc}

08011b9a <_GLOBAL__sub_D_touchgfx_init>:
 8011b9a:	b580      	push	{r7, lr}
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011ba2:	2000      	movs	r0, #0
 8011ba4:	f7ff fef4 	bl	8011990 <_Z41__static_initialization_and_destruction_0ii>
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b082      	sub	sp, #8
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	3320      	adds	r3, #32
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	4798      	blx	r3
    }
 8011bbe:	bf00      	nop
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8011bc6:	b480      	push	{r7}
 8011bc8:	b083      	sub	sp, #12
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8011bde:	bf00      	nop
 8011be0:	370c      	adds	r7, #12
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
	...

08011bec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8011bf8:	78fb      	ldrb	r3, [r7, #3]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8011bfe:	78fb      	ldrb	r3, [r7, #3]
 8011c00:	2b02      	cmp	r3, #2
 8011c02:	d105      	bne.n	8011c10 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	78fa      	ldrb	r2, [r7, #3]
 8011c08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e027      	b.n	8011c60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8011c10:	78fb      	ldrb	r3, [r7, #3]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d123      	bne.n	8011c5e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d014      	beq.n	8011c48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	339c      	adds	r3, #156	@ 0x9c
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	4798      	blx	r3
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d008      	beq.n	8011c48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011c36:	4b0c      	ldr	r3, [pc, #48]	@ (8011c68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	f083 0301 	eor.w	r3, r3, #1
 8011c3e:	b2db      	uxtb	r3, r3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8011c44:	2301      	movs	r3, #1
 8011c46:	e000      	b.n	8011c4a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d005      	beq.n	8011c5a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	78fa      	ldrb	r2, [r7, #3]
 8011c52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8011c56:	2301      	movs	r3, #1
 8011c58:	e002      	b.n	8011c60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e000      	b.n	8011c60 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8011c5e:	2300      	movs	r3, #0
    }
 8011c60:	4618      	mov	r0, r3
 8011c62:	3708      	adds	r7, #8
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	2401b546 	.word	0x2401b546

08011c6c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	683a      	ldr	r2, [r7, #0]
 8011c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8011c7c:	bf00      	nop
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <__NVIC_EnableIRQ>:
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b083      	sub	sp, #12
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	4603      	mov	r3, r0
 8011c90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	db0b      	blt.n	8011cb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011c9a:	88fb      	ldrh	r3, [r7, #6]
 8011c9c:	f003 021f 	and.w	r2, r3, #31
 8011ca0:	4907      	ldr	r1, [pc, #28]	@ (8011cc0 <__NVIC_EnableIRQ+0x38>)
 8011ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ca6:	095b      	lsrs	r3, r3, #5
 8011ca8:	2001      	movs	r0, #1
 8011caa:	fa00 f202 	lsl.w	r2, r0, r2
 8011cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011cb2:	bf00      	nop
 8011cb4:	370c      	adds	r7, #12
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbc:	4770      	bx	lr
 8011cbe:	bf00      	nop
 8011cc0:	e000e100 	.word	0xe000e100

08011cc4 <__NVIC_DisableIRQ>:
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	db12      	blt.n	8011cfc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	f003 021f 	and.w	r2, r3, #31
 8011cdc:	490a      	ldr	r1, [pc, #40]	@ (8011d08 <__NVIC_DisableIRQ+0x44>)
 8011cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ce2:	095b      	lsrs	r3, r3, #5
 8011ce4:	2001      	movs	r0, #1
 8011ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8011cea:	3320      	adds	r3, #32
 8011cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011cf0:	f3bf 8f4f 	dsb	sy
}
 8011cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011cf6:	f3bf 8f6f 	isb	sy
}
 8011cfa:	bf00      	nop
}
 8011cfc:	bf00      	nop
 8011cfe:	370c      	adds	r7, #12
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr
 8011d08:	e000e100 	.word	0xe000e100

08011d0c <__NVIC_SetPriority>:
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b083      	sub	sp, #12
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	4603      	mov	r3, r0
 8011d14:	6039      	str	r1, [r7, #0]
 8011d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	db0a      	blt.n	8011d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	490c      	ldr	r1, [pc, #48]	@ (8011d58 <__NVIC_SetPriority+0x4c>)
 8011d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011d2a:	0112      	lsls	r2, r2, #4
 8011d2c:	b2d2      	uxtb	r2, r2
 8011d2e:	440b      	add	r3, r1
 8011d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011d34:	e00a      	b.n	8011d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	b2da      	uxtb	r2, r3
 8011d3a:	4908      	ldr	r1, [pc, #32]	@ (8011d5c <__NVIC_SetPriority+0x50>)
 8011d3c:	88fb      	ldrh	r3, [r7, #6]
 8011d3e:	f003 030f 	and.w	r3, r3, #15
 8011d42:	3b04      	subs	r3, #4
 8011d44:	0112      	lsls	r2, r2, #4
 8011d46:	b2d2      	uxtb	r2, r2
 8011d48:	440b      	add	r3, r1
 8011d4a:	761a      	strb	r2, [r3, #24]
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	e000e100 	.word	0xe000e100
 8011d5c:	e000ed00 	.word	0xe000ed00

08011d60 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8011d60:	b5b0      	push	{r4, r5, r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f000 fd0f 	bl	801278e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8011d70:	687d      	ldr	r5, [r7, #4]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	3364      	adds	r3, #100	@ 0x64
 8011d78:	681c      	ldr	r4, [r3, #0]
 8011d7a:	f002 fd7b 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	4619      	mov	r1, r3
 8011d82:	4628      	mov	r0, r5
 8011d84:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	490a      	ldr	r1, [pc, #40]	@ (8011db4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7ff ff6e 	bl	8011c6c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2101      	movs	r1, #1
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ff ff29 	bl	8011bec <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	3388      	adds	r3, #136	@ 0x88
 8011da2:	681c      	ldr	r4, [r3, #0]
 8011da4:	2300      	movs	r3, #0
 8011da6:	2200      	movs	r2, #0
 8011da8:	4903      	ldr	r1, [pc, #12]	@ (8011db8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8011daa:	47a0      	blx	r4
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bdb0      	pop	{r4, r5, r7, pc}
 8011db4:	080109d9 	.word	0x080109d9
 8011db8:	24040000 	.word	0x24040000

08011dbc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8011dc4:	2109      	movs	r1, #9
 8011dc6:	205a      	movs	r0, #90	@ 0x5a
 8011dc8:	f7ff ffa0 	bl	8011d0c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8011dcc:	2109      	movs	r1, #9
 8011dce:	2058      	movs	r0, #88	@ 0x58
 8011dd0:	f7ff ff9c 	bl	8011d0c <__NVIC_SetPriority>
}
 8011dd4:	bf00      	nop
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011de4:	205a      	movs	r0, #90	@ 0x5a
 8011de6:	f7ff ff4f 	bl	8011c88 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8011dea:	2058      	movs	r0, #88	@ 0x58
 8011dec:	f7ff ff4c 	bl	8011c88 <__NVIC_EnableIRQ>
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011e00:	205a      	movs	r0, #90	@ 0x5a
 8011e02:	f7ff ff5f 	bl	8011cc4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8011e06:	2058      	movs	r0, #88	@ 0x58
 8011e08:	f7ff ff5c 	bl	8011cc4 <__NVIC_DisableIRQ>
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8011e1c:	4b11      	ldr	r3, [pc, #68]	@ (8011e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8011e68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011e2e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8011e30:	4b0c      	ldr	r3, [pc, #48]	@ (8011e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	b29a      	uxth	r2, r3
 8011e40:	4b0a      	ldr	r3, [pc, #40]	@ (8011e6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8011e42:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8011e44:	4b08      	ldr	r3, [pc, #32]	@ (8011e68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8011e46:	881a      	ldrh	r2, [r3, #0]
 8011e48:	4b06      	ldr	r3, [pc, #24]	@ (8011e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8011e4c:	4b05      	ldr	r3, [pc, #20]	@ (8011e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011e50:	4a04      	ldr	r2, [pc, #16]	@ (8011e64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8011e52:	f043 0301 	orr.w	r3, r3, #1
 8011e56:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8011e58:	bf00      	nop
 8011e5a:	370c      	adds	r7, #12
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e62:	4770      	bx	lr
 8011e64:	50001000 	.word	0x50001000
 8011e68:	2401b538 	.word	0x2401b538
 8011e6c:	2401b53a 	.word	0x2401b53a

08011e70 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 fc6e 	bl	801275c <_ZN8touchgfx3HAL10beginFrameEv>
 8011e80:	4603      	mov	r3, r0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f000 fc6d 	bl	8012774 <_ZN8touchgfx3HAL8endFrameEv>
}
 8011e9a:	bf00      	nop
 8011e9c:	3708      	adds	r7, #8
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
	...

08011ea4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b083      	sub	sp, #12
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8011eac:	4b03      	ldr	r3, [pc, #12]	@ (8011ebc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8011eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	50001084 	.word	0x50001084

08011ec0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b083      	sub	sp, #12
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8011eca:	4a06      	ldr	r2, [pc, #24]	@ (8011ee4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8011ed0:	4b05      	ldr	r3, [pc, #20]	@ (8011ee8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8011ed6:	bf00      	nop
 8011ed8:	370c      	adds	r7, #12
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	50001084 	.word	0x50001084
 8011ee8:	50001000 	.word	0x50001000

08011eec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fbf7 	bl	80126ee <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8011f00:	bf00      	nop
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}

08011f08 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	607a      	str	r2, [r7, #4]
 8011f14:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	68b9      	ldr	r1, [r7, #8]
 8011f1e:	f000 fd58 	bl	80129d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8011f22:	4603      	mov	r3, r0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b085      	sub	sp, #20
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8011f34:	4b0d      	ldr	r3, [pc, #52]	@ (8011f6c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f38:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8011f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8011f6c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	3301      	adds	r3, #1
 8011f48:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8011f4a:	89fa      	ldrh	r2, [r7, #14]
 8011f4c:	89bb      	ldrh	r3, [r7, #12]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d304      	bcc.n	8011f5c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8011f52:	89fa      	ldrh	r2, [r7, #14]
 8011f54:	89bb      	ldrh	r3, [r7, #12]
 8011f56:	1ad3      	subs	r3, r2, r3
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	e000      	b.n	8011f5e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8011f5c:	2300      	movs	r3, #0
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3714      	adds	r7, #20
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	50001000 	.word	0x50001000

08011f70 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8011f70:	b480      	push	{r7}
 8011f72:	b087      	sub	sp, #28
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8011f78:	4b25      	ldr	r3, [pc, #148]	@ (8012010 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011f7a:	695b      	ldr	r3, [r3, #20]
 8011f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	bf14      	ite	ne
 8011f84:	2301      	movne	r3, #1
 8011f86:	2300      	moveq	r3, #0
 8011f88:	b2db      	uxtb	r3, r3
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d03a      	beq.n	8012004 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011f8e:	4b20      	ldr	r3, [pc, #128]	@ (8012010 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011f96:	f3bf 8f4f 	dsb	sy
}
 8011f9a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8012010 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011fa2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	0b5b      	lsrs	r3, r3, #13
 8011fa8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011fac:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	08db      	lsrs	r3, r3, #3
 8011fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011fb6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	015a      	lsls	r2, r3, #5
 8011fbc:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8011fc0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011fc6:	4912      	ldr	r1, [pc, #72]	@ (8012010 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	1e5a      	subs	r2, r3, #1
 8011fd2:	60fa      	str	r2, [r7, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	bf14      	ite	ne
 8011fd8:	2301      	movne	r3, #1
 8011fda:	2300      	moveq	r3, #0
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d1ea      	bne.n	8011fb8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8011fe2:	693b      	ldr	r3, [r7, #16]
 8011fe4:	1e5a      	subs	r2, r3, #1
 8011fe6:	613a      	str	r2, [r7, #16]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	bf14      	ite	ne
 8011fec:	2301      	movne	r3, #1
 8011fee:	2300      	moveq	r3, #0
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1db      	bne.n	8011fae <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011ff6:	f3bf 8f4f 	dsb	sy
}
 8011ffa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011ffc:	f3bf 8f6f 	isb	sy
}
 8012000:	bf00      	nop
}
 8012002:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8012004:	bf00      	nop
 8012006:	371c      	adds	r7, #28
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr
 8012010:	e000ed00 	.word	0xe000ed00

08012014 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8012014:	b480      	push	{r7}
 8012016:	b087      	sub	sp, #28
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801201c:	4b25      	ldr	r3, [pc, #148]	@ (80120b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 801201e:	695b      	ldr	r3, [r3, #20]
 8012020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012024:	2b00      	cmp	r3, #0
 8012026:	bf14      	ite	ne
 8012028:	2301      	movne	r3, #1
 801202a:	2300      	moveq	r3, #0
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b00      	cmp	r3, #0
 8012030:	d03a      	beq.n	80120a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8012032:	4b20      	ldr	r3, [pc, #128]	@ (80120b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8012034:	2200      	movs	r2, #0
 8012036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801203a:	f3bf 8f4f 	dsb	sy
}
 801203e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8012040:	4b1c      	ldr	r3, [pc, #112]	@ (80120b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8012042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012046:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	0b5b      	lsrs	r3, r3, #13
 801204c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012050:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	08db      	lsrs	r3, r3, #3
 8012056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801205a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	015a      	lsls	r2, r3, #5
 8012060:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8012064:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8012066:	68fa      	ldr	r2, [r7, #12]
 8012068:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801206a:	4912      	ldr	r1, [pc, #72]	@ (80120b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 801206c:	4313      	orrs	r3, r2
 801206e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	1e5a      	subs	r2, r3, #1
 8012076:	60fa      	str	r2, [r7, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	bf14      	ite	ne
 801207c:	2301      	movne	r3, #1
 801207e:	2300      	moveq	r3, #0
 8012080:	b2db      	uxtb	r3, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	d1ea      	bne.n	801205c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	1e5a      	subs	r2, r3, #1
 801208a:	613a      	str	r2, [r7, #16]
 801208c:	2b00      	cmp	r3, #0
 801208e:	bf14      	ite	ne
 8012090:	2301      	movne	r3, #1
 8012092:	2300      	moveq	r3, #0
 8012094:	b2db      	uxtb	r3, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1db      	bne.n	8012052 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801209a:	f3bf 8f4f 	dsb	sy
}
 801209e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80120a0:	f3bf 8f6f 	isb	sy
}
 80120a4:	bf00      	nop
}
 80120a6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80120a8:	bf00      	nop
 80120aa:	371c      	adds	r7, #28
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr
 80120b4:	e000ed00 	.word	0xe000ed00

080120b8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80120c0:	f7fc f814 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	bf0c      	ite	eq
 80120ca:	2301      	moveq	r3, #1
 80120cc:	2300      	movne	r3, #0
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d132      	bne.n	801213a <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80120d4:	4b1b      	ldr	r3, [pc, #108]	@ (8012144 <HAL_LTDC_LineEventCallback+0x8c>)
 80120d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80120d8:	4a1b      	ldr	r2, [pc, #108]	@ (8012148 <HAL_LTDC_LineEventCallback+0x90>)
 80120da:	8812      	ldrh	r2, [r2, #0]
 80120dc:	4293      	cmp	r3, r2
 80120de:	bf0c      	ite	eq
 80120e0:	2301      	moveq	r3, #1
 80120e2:	2300      	movne	r3, #0
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d017      	beq.n	801211a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80120ea:	4b18      	ldr	r3, [pc, #96]	@ (801214c <HAL_LTDC_LineEventCallback+0x94>)
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	4619      	mov	r1, r3
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7f3 ff57 	bl	8005fa4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80120f6:	f7fb fff9 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 80120fa:	4603      	mov	r3, r0
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7ff fd62 	bl	8011bc6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8012102:	f7fe fc41 	bl	8010988 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8012106:	f7fb fff1 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 801210a:	4603      	mov	r3, r0
 801210c:	4618      	mov	r0, r3
 801210e:	f001 f88b 	bl	8013228 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8012112:	2000      	movs	r0, #0
 8012114:	f7fe f8a6 	bl	8010264 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012118:	e010      	b.n	801213c <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801211a:	4b0b      	ldr	r3, [pc, #44]	@ (8012148 <HAL_LTDC_LineEventCallback+0x90>)
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	4619      	mov	r1, r3
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7f3 ff3f 	bl	8005fa4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8012126:	f7fb ffe1 	bl	800e0ec <_ZN8touchgfx3HAL11getInstanceEv>
 801212a:	4603      	mov	r3, r0
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff fd3c 	bl	8011baa <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8012132:	2000      	movs	r0, #0
 8012134:	f7fe f8ce 	bl	80102d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012138:	e000      	b.n	801213c <HAL_LTDC_LineEventCallback+0x84>
            return;
 801213a:	bf00      	nop
        }
    }
 801213c:	3708      	adds	r7, #8
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	50001000 	.word	0x50001000
 8012148:	2401b538 	.word	0x2401b538
 801214c:	2401b53a 	.word	0x2401b53a

08012150 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012150:	8880      	ldrh	r0, [r0, #4]
 8012152:	4770      	bx	lr

08012154 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012154:	b570      	push	{r4, r5, r6, lr}
 8012156:	6803      	ldr	r3, [r0, #0]
 8012158:	460c      	mov	r4, r1
 801215a:	2100      	movs	r1, #0
 801215c:	4605      	mov	r5, r0
 801215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012160:	4798      	blx	r3
 8012162:	4606      	mov	r6, r0
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	4628      	mov	r0, r5
 8012168:	1ba4      	subs	r4, r4, r6
 801216a:	6a1b      	ldr	r3, [r3, #32]
 801216c:	b2a4      	uxth	r4, r4
 801216e:	4798      	blx	r3
 8012170:	fbb4 f0f0 	udiv	r0, r4, r0
 8012174:	bd70      	pop	{r4, r5, r6, pc}

08012176 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012176:	2300      	movs	r3, #0
 8012178:	8083      	strh	r3, [r0, #4]
 801217a:	4770      	bx	lr

0801217c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801217c:	b510      	push	{r4, lr}
 801217e:	6803      	ldr	r3, [r0, #0]
 8012180:	4604      	mov	r4, r0
 8012182:	8881      	ldrh	r1, [r0, #4]
 8012184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012186:	4798      	blx	r3
 8012188:	88a3      	ldrh	r3, [r4, #4]
 801218a:	3301      	adds	r3, #1
 801218c:	80a3      	strh	r3, [r4, #4]
 801218e:	bd10      	pop	{r4, pc}

08012190 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012190:	6803      	ldr	r3, [r0, #0]
 8012192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012194:	4718      	bx	r3

08012196 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012196:	4770      	bx	lr

08012198 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012198:	4a02      	ldr	r2, [pc, #8]	@ (80121a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801219a:	6002      	str	r2, [r0, #0]
 801219c:	2200      	movs	r2, #0
 801219e:	8082      	strh	r2, [r0, #4]
 80121a0:	4770      	bx	lr
 80121a2:	bf00      	nop
 80121a4:	08022c54 	.word	0x08022c54

080121a8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80121a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80121aa:	4770      	bx	lr

080121ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80121ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80121ae:	2000      	movs	r0, #0
 80121b0:	b12b      	cbz	r3, 80121be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80121b2:	b920      	cbnz	r0, 80121be <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80121b4:	1a5a      	subs	r2, r3, r1
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	4250      	negs	r0, r2
 80121ba:	4150      	adcs	r0, r2
 80121bc:	e7f8      	b.n	80121b0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80121be:	4770      	bx	lr

080121c0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80121c0:	2300      	movs	r3, #0
 80121c2:	6148      	str	r0, [r1, #20]
 80121c4:	618b      	str	r3, [r1, #24]
 80121c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80121c8:	b913      	cbnz	r3, 80121d0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80121ca:	6281      	str	r1, [r0, #40]	@ 0x28
 80121cc:	4770      	bx	lr
 80121ce:	4613      	mov	r3, r2
 80121d0:	699a      	ldr	r2, [r3, #24]
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	d1fb      	bne.n	80121ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80121d6:	6199      	str	r1, [r3, #24]
 80121d8:	4770      	bx	lr

080121da <_ZN8touchgfx9Container9removeAllEv>:
 80121da:	2200      	movs	r2, #0
 80121dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80121de:	b123      	cbz	r3, 80121ea <_ZN8touchgfx9Container9removeAllEv+0x10>
 80121e0:	6999      	ldr	r1, [r3, #24]
 80121e2:	6281      	str	r1, [r0, #40]	@ 0x28
 80121e4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80121e8:	e7f8      	b.n	80121dc <_ZN8touchgfx9Container9removeAllEv+0x2>
 80121ea:	4770      	bx	lr

080121ec <_ZN8touchgfx9Container6unlinkEv>:
 80121ec:	2300      	movs	r3, #0
 80121ee:	6283      	str	r3, [r0, #40]	@ 0x28
 80121f0:	4770      	bx	lr

080121f2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80121f2:	2200      	movs	r2, #0
 80121f4:	8002      	strh	r2, [r0, #0]
 80121f6:	8042      	strh	r2, [r0, #2]
 80121f8:	8082      	strh	r2, [r0, #4]
 80121fa:	80c2      	strh	r2, [r0, #6]
 80121fc:	4770      	bx	lr

080121fe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80121fe:	b570      	push	{r4, r5, r6, lr}
 8012200:	460d      	mov	r5, r1
 8012202:	4616      	mov	r6, r2
 8012204:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012206:	b13c      	cbz	r4, 8012218 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	4620      	mov	r0, r4
 801220c:	4632      	mov	r2, r6
 801220e:	4629      	mov	r1, r5
 8012210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012212:	4798      	blx	r3
 8012214:	69a4      	ldr	r4, [r4, #24]
 8012216:	e7f6      	b.n	8012206 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012218:	bd70      	pop	{r4, r5, r6, pc}

0801221a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801221a:	b538      	push	{r3, r4, r5, lr}
 801221c:	460d      	mov	r5, r1
 801221e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012220:	b134      	cbz	r4, 8012230 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012222:	682b      	ldr	r3, [r5, #0]
 8012224:	4621      	mov	r1, r4
 8012226:	4628      	mov	r0, r5
 8012228:	689b      	ldr	r3, [r3, #8]
 801222a:	4798      	blx	r3
 801222c:	69a4      	ldr	r4, [r4, #24]
 801222e:	e7f7      	b.n	8012220 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012230:	bd38      	pop	{r3, r4, r5, pc}

08012232 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012232:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012234:	b19b      	cbz	r3, 801225e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012236:	428b      	cmp	r3, r1
 8012238:	d109      	bne.n	801224e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801223a:	699a      	ldr	r2, [r3, #24]
 801223c:	2100      	movs	r1, #0
 801223e:	6159      	str	r1, [r3, #20]
 8012240:	6282      	str	r2, [r0, #40]	@ 0x28
 8012242:	b902      	cbnz	r2, 8012246 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012244:	4770      	bx	lr
 8012246:	6199      	str	r1, [r3, #24]
 8012248:	4770      	bx	lr
 801224a:	4613      	mov	r3, r2
 801224c:	b13a      	cbz	r2, 801225e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801224e:	699a      	ldr	r2, [r3, #24]
 8012250:	428a      	cmp	r2, r1
 8012252:	d1fa      	bne.n	801224a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012254:	698a      	ldr	r2, [r1, #24]
 8012256:	619a      	str	r2, [r3, #24]
 8012258:	2300      	movs	r3, #0
 801225a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801225e:	4770      	bx	lr

08012260 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012260:	b410      	push	{r4}
 8012262:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8012264:	4604      	mov	r4, r0
 8012266:	b92b      	cbnz	r3, 8012274 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012268:	6803      	ldr	r3, [r0, #0]
 801226a:	4611      	mov	r1, r2
 801226c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012272:	4718      	bx	r3
 8012274:	b941      	cbnz	r1, 8012288 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012276:	6193      	str	r3, [r2, #24]
 8012278:	6282      	str	r2, [r0, #40]	@ 0x28
 801227a:	6154      	str	r4, [r2, #20]
 801227c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012280:	4770      	bx	lr
 8012282:	4603      	mov	r3, r0
 8012284:	2800      	cmp	r0, #0
 8012286:	d0f9      	beq.n	801227c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012288:	4299      	cmp	r1, r3
 801228a:	6998      	ldr	r0, [r3, #24]
 801228c:	d1f9      	bne.n	8012282 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801228e:	6190      	str	r0, [r2, #24]
 8012290:	618a      	str	r2, [r1, #24]
 8012292:	e7f2      	b.n	801227a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012294 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012298:	461f      	mov	r7, r3
 801229a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801229e:	460d      	mov	r5, r1
 80122a0:	4616      	mov	r6, r2
 80122a2:	b103      	cbz	r3, 80122a6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80122a4:	6038      	str	r0, [r7, #0]
 80122a6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80122a8:	b314      	cbz	r4, 80122f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80122aa:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80122ae:	b1eb      	cbz	r3, 80122ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80122b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80122b4:	428d      	cmp	r5, r1
 80122b6:	db19      	blt.n	80122ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80122b8:	b289      	uxth	r1, r1
 80122ba:	8923      	ldrh	r3, [r4, #8]
 80122bc:	440b      	add	r3, r1
 80122be:	b21b      	sxth	r3, r3
 80122c0:	429d      	cmp	r5, r3
 80122c2:	da13      	bge.n	80122ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80122c4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80122c8:	4296      	cmp	r6, r2
 80122ca:	db0f      	blt.n	80122ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80122cc:	b292      	uxth	r2, r2
 80122ce:	8963      	ldrh	r3, [r4, #10]
 80122d0:	4413      	add	r3, r2
 80122d2:	b21b      	sxth	r3, r3
 80122d4:	429e      	cmp	r6, r3
 80122d6:	da09      	bge.n	80122ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80122d8:	6823      	ldr	r3, [r4, #0]
 80122da:	1ab2      	subs	r2, r6, r2
 80122dc:	1a69      	subs	r1, r5, r1
 80122de:	4620      	mov	r0, r4
 80122e0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80122e4:	b212      	sxth	r2, r2
 80122e6:	463b      	mov	r3, r7
 80122e8:	b209      	sxth	r1, r1
 80122ea:	47c0      	blx	r8
 80122ec:	69a4      	ldr	r4, [r4, #24]
 80122ee:	e7db      	b.n	80122a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80122f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	4c6d      	ldr	r4, [pc, #436]	@ (80124b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80122fa:	b0a1      	sub	sp, #132	@ 0x84
 80122fc:	4606      	mov	r6, r0
 80122fe:	6824      	ldr	r4, [r4, #0]
 8012300:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8012302:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8012306:	2400      	movs	r4, #0
 8012308:	9303      	str	r3, [sp, #12]
 801230a:	802c      	strh	r4, [r5, #0]
 801230c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801230e:	802c      	strh	r4, [r5, #0]
 8012310:	601c      	str	r4, [r3, #0]
 8012312:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012316:	f7ff ffbd 	bl	8012294 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801231a:	f1b9 0f03 	cmp.w	r9, #3
 801231e:	f340 80c1 	ble.w	80124a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012322:	4631      	mov	r1, r6
 8012324:	a80c      	add	r0, sp, #48	@ 0x30
 8012326:	f003 fbb9 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801232a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801232e:	9306      	str	r3, [sp, #24]
 8012330:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012334:	9307      	str	r3, [sp, #28]
 8012336:	9b03      	ldr	r3, [sp, #12]
 8012338:	f8d3 a000 	ldr.w	sl, [r3]
 801233c:	f1ba 0f00 	cmp.w	sl, #0
 8012340:	f000 80b3 	beq.w	80124aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012344:	4651      	mov	r1, sl
 8012346:	a810      	add	r0, sp, #64	@ 0x40
 8012348:	f003 fba8 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801234c:	2002      	movs	r0, #2
 801234e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8012352:	9b01      	ldr	r3, [sp, #4]
 8012354:	9a06      	ldr	r2, [sp, #24]
 8012356:	fb91 f1f0 	sdiv	r1, r1, r0
 801235a:	189d      	adds	r5, r3, r2
 801235c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8012360:	9a07      	ldr	r2, [sp, #28]
 8012362:	4419      	add	r1, r3
 8012364:	9b02      	ldr	r3, [sp, #8]
 8012366:	4413      	add	r3, r2
 8012368:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801236c:	1a6d      	subs	r5, r5, r1
 801236e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8012372:	fb92 f2f0 	sdiv	r2, r2, r0
 8012376:	440a      	add	r2, r1
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	435b      	muls	r3, r3
 801237c:	fb05 3505 	mla	r5, r5, r5, r3
 8012380:	4f4c      	ldr	r7, [pc, #304]	@ (80124b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012382:	ac10      	add	r4, sp, #64	@ 0x40
 8012384:	f1b9 0f0c 	cmp.w	r9, #12
 8012388:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801238a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801238c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801238e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012390:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012394:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801239c:	f04f 0303 	mov.w	r3, #3
 80123a0:	bfd8      	it	le
 80123a2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80123a6:	f04f 0400 	mov.w	r4, #0
 80123aa:	f8cd 9000 	str.w	r9, [sp]
 80123ae:	bfcc      	ite	gt
 80123b0:	4698      	movgt	r8, r3
 80123b2:	fb92 f8f3 	sdivle	r8, r2, r3
 80123b6:	1c63      	adds	r3, r4, #1
 80123b8:	aa10      	add	r2, sp, #64	@ 0x40
 80123ba:	f004 0401 	and.w	r4, r4, #1
 80123be:	f04f 0b00 	mov.w	fp, #0
 80123c2:	9308      	str	r3, [sp, #32]
 80123c4:	9b00      	ldr	r3, [sp, #0]
 80123c6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80123ca:	fb93 f3f8 	sdiv	r3, r3, r8
 80123ce:	3404      	adds	r4, #4
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	9a04      	ldr	r2, [sp, #16]
 80123d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80123da:	fb13 f302 	smulbb	r3, r3, r2
 80123de:	9a01      	ldr	r2, [sp, #4]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	1899      	adds	r1, r3, r2
 80123e4:	9305      	str	r3, [sp, #20]
 80123e6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80123ea:	b209      	sxth	r1, r1
 80123ec:	4299      	cmp	r1, r3
 80123ee:	db4d      	blt.n	801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80123f0:	8932      	ldrh	r2, [r6, #8]
 80123f2:	4413      	add	r3, r2
 80123f4:	b21b      	sxth	r3, r3
 80123f6:	4299      	cmp	r1, r3
 80123f8:	da48      	bge.n	801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80123fa:	9b04      	ldr	r3, [sp, #16]
 80123fc:	6827      	ldr	r7, [r4, #0]
 80123fe:	fb17 f703 	smulbb	r7, r7, r3
 8012402:	9b02      	ldr	r3, [sp, #8]
 8012404:	b2bf      	uxth	r7, r7
 8012406:	18fa      	adds	r2, r7, r3
 8012408:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801240c:	b212      	sxth	r2, r2
 801240e:	429a      	cmp	r2, r3
 8012410:	db3c      	blt.n	801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012412:	8970      	ldrh	r0, [r6, #10]
 8012414:	4403      	add	r3, r0
 8012416:	b21b      	sxth	r3, r3
 8012418:	429a      	cmp	r2, r3
 801241a:	da37      	bge.n	801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801241c:	2300      	movs	r3, #0
 801241e:	4630      	mov	r0, r6
 8012420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012422:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012424:	f7ff ff36 	bl	8012294 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012428:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801242a:	b37a      	cbz	r2, 801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801242c:	4552      	cmp	r2, sl
 801242e:	d02d      	beq.n	801248c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012430:	4611      	mov	r1, r2
 8012432:	a80e      	add	r0, sp, #56	@ 0x38
 8012434:	9209      	str	r2, [sp, #36]	@ 0x24
 8012436:	f003 fb31 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801243a:	f04f 0e02 	mov.w	lr, #2
 801243e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8012442:	9a06      	ldr	r2, [sp, #24]
 8012444:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8012448:	9b01      	ldr	r3, [sp, #4]
 801244a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801244e:	4413      	add	r3, r2
 8012450:	9a07      	ldr	r2, [sp, #28]
 8012452:	fb91 f1fe 	sdiv	r1, r1, lr
 8012456:	fb9c fcfe 	sdiv	ip, ip, lr
 801245a:	4401      	add	r1, r0
 801245c:	1a58      	subs	r0, r3, r1
 801245e:	9b02      	ldr	r3, [sp, #8]
 8012460:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8012464:	4413      	add	r3, r2
 8012466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012468:	448c      	add	ip, r1
 801246a:	eba3 030c 	sub.w	r3, r3, ip
 801246e:	435b      	muls	r3, r3
 8012470:	fb00 3300 	mla	r3, r0, r0, r3
 8012474:	42ab      	cmp	r3, r5
 8012476:	d208      	bcs.n	801248a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012478:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801247a:	461d      	mov	r5, r3
 801247c:	9803      	ldr	r0, [sp, #12]
 801247e:	6001      	str	r1, [r0, #0]
 8012480:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012482:	9805      	ldr	r0, [sp, #20]
 8012484:	8008      	strh	r0, [r1, #0]
 8012486:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012488:	800f      	strh	r7, [r1, #0]
 801248a:	4692      	mov	sl, r2
 801248c:	f10b 0b01 	add.w	fp, fp, #1
 8012490:	3408      	adds	r4, #8
 8012492:	f1bb 0f04 	cmp.w	fp, #4
 8012496:	d19d      	bne.n	80123d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012498:	9b00      	ldr	r3, [sp, #0]
 801249a:	9c08      	ldr	r4, [sp, #32]
 801249c:	444b      	add	r3, r9
 801249e:	4544      	cmp	r4, r8
 80124a0:	9300      	str	r3, [sp, #0]
 80124a2:	d188      	bne.n	80123b6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80124a4:	b021      	add	sp, #132	@ 0x84
 80124a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124aa:	f04f 35ff 	mov.w	r5, #4294967295
 80124ae:	e767      	b.n	8012380 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80124b0:	2401b548 	.word	0x2401b548
 80124b4:	08022360 	.word	0x08022360

080124b8 <_ZN8touchgfx4RectaNERKS0_>:
 80124b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124bc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80124c0:	888c      	ldrh	r4, [r1, #4]
 80124c2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80124c6:	443c      	add	r4, r7
 80124c8:	b2a4      	uxth	r4, r4
 80124ca:	fa0f f884 	sxth.w	r8, r4
 80124ce:	45c1      	cmp	r9, r8
 80124d0:	da2f      	bge.n	8012532 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80124d2:	8882      	ldrh	r2, [r0, #4]
 80124d4:	444a      	add	r2, r9
 80124d6:	b292      	uxth	r2, r2
 80124d8:	fa0f fe82 	sxth.w	lr, r2
 80124dc:	4577      	cmp	r7, lr
 80124de:	da28      	bge.n	8012532 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80124e0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80124e4:	88cb      	ldrh	r3, [r1, #6]
 80124e6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80124ea:	442b      	add	r3, r5
 80124ec:	b21b      	sxth	r3, r3
 80124ee:	429e      	cmp	r6, r3
 80124f0:	da1f      	bge.n	8012532 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80124f2:	88c3      	ldrh	r3, [r0, #6]
 80124f4:	4433      	add	r3, r6
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	fa0f fc83 	sxth.w	ip, r3
 80124fc:	4565      	cmp	r5, ip
 80124fe:	da18      	bge.n	8012532 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012500:	454f      	cmp	r7, r9
 8012502:	bfb8      	it	lt
 8012504:	464f      	movlt	r7, r9
 8012506:	42b5      	cmp	r5, r6
 8012508:	bfb8      	it	lt
 801250a:	4635      	movlt	r5, r6
 801250c:	45f0      	cmp	r8, lr
 801250e:	bfd8      	it	le
 8012510:	4622      	movle	r2, r4
 8012512:	1bd2      	subs	r2, r2, r7
 8012514:	8082      	strh	r2, [r0, #4]
 8012516:	884a      	ldrh	r2, [r1, #2]
 8012518:	88c9      	ldrh	r1, [r1, #6]
 801251a:	8007      	strh	r7, [r0, #0]
 801251c:	440a      	add	r2, r1
 801251e:	8045      	strh	r5, [r0, #2]
 8012520:	b292      	uxth	r2, r2
 8012522:	b211      	sxth	r1, r2
 8012524:	458c      	cmp	ip, r1
 8012526:	bfa8      	it	ge
 8012528:	4613      	movge	r3, r2
 801252a:	1b5b      	subs	r3, r3, r5
 801252c:	80c3      	strh	r3, [r0, #6]
 801252e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012532:	2300      	movs	r3, #0
 8012534:	8003      	strh	r3, [r0, #0]
 8012536:	8043      	strh	r3, [r0, #2]
 8012538:	8083      	strh	r3, [r0, #4]
 801253a:	80c3      	strh	r3, [r0, #6]
 801253c:	e7f7      	b.n	801252e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801253e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801253e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	dd06      	ble.n	8012554 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012546:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801254a:	2800      	cmp	r0, #0
 801254c:	bfcc      	ite	gt
 801254e:	2000      	movgt	r0, #0
 8012550:	2001      	movle	r0, #1
 8012552:	4770      	bx	lr
 8012554:	2001      	movs	r0, #1
 8012556:	4770      	bx	lr

08012558 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255c:	2300      	movs	r3, #0
 801255e:	4604      	mov	r4, r0
 8012560:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8012562:	8003      	strh	r3, [r0, #0]
 8012564:	8043      	strh	r3, [r0, #2]
 8012566:	8083      	strh	r3, [r0, #4]
 8012568:	80c3      	strh	r3, [r0, #6]
 801256a:	2d00      	cmp	r5, #0
 801256c:	d040      	beq.n	80125f0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801256e:	1d28      	adds	r0, r5, #4
 8012570:	f7ff ffe5 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012574:	b988      	cbnz	r0, 801259a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012576:	4620      	mov	r0, r4
 8012578:	f7ff ffe1 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 801257c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012580:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012584:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012588:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801258c:	b138      	cbz	r0, 801259e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801258e:	8022      	strh	r2, [r4, #0]
 8012590:	8063      	strh	r3, [r4, #2]
 8012592:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012596:	f8a4 c006 	strh.w	ip, [r4, #6]
 801259a:	69ad      	ldr	r5, [r5, #24]
 801259c:	e7e5      	b.n	801256a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801259e:	f9b4 0000 	ldrsh.w	r0, [r4]
 80125a2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80125a6:	4290      	cmp	r0, r2
 80125a8:	4607      	mov	r7, r0
 80125aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80125ae:	460e      	mov	r6, r1
 80125b0:	bfa8      	it	ge
 80125b2:	4617      	movge	r7, r2
 80125b4:	4299      	cmp	r1, r3
 80125b6:	4472      	add	r2, lr
 80125b8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80125bc:	bfa8      	it	ge
 80125be:	461e      	movge	r6, r3
 80125c0:	4440      	add	r0, r8
 80125c2:	4471      	add	r1, lr
 80125c4:	4463      	add	r3, ip
 80125c6:	b200      	sxth	r0, r0
 80125c8:	8027      	strh	r7, [r4, #0]
 80125ca:	b212      	sxth	r2, r2
 80125cc:	8066      	strh	r6, [r4, #2]
 80125ce:	b209      	sxth	r1, r1
 80125d0:	b21b      	sxth	r3, r3
 80125d2:	4290      	cmp	r0, r2
 80125d4:	bfac      	ite	ge
 80125d6:	ebc7 0200 	rsbge	r2, r7, r0
 80125da:	ebc7 0202 	rsblt	r2, r7, r2
 80125de:	4299      	cmp	r1, r3
 80125e0:	bfac      	ite	ge
 80125e2:	ebc6 0301 	rsbge	r3, r6, r1
 80125e6:	ebc6 0303 	rsblt	r3, r6, r3
 80125ea:	80a2      	strh	r2, [r4, #4]
 80125ec:	80e3      	strh	r3, [r4, #6]
 80125ee:	e7d4      	b.n	801259a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80125f0:	4620      	mov	r0, r4
 80125f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80125f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80125fa:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80125fe:	b383      	cbz	r3, 8012662 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012600:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012602:	b374      	cbz	r4, 8012662 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012604:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012608:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801260c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012610:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012614:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8012618:	b303      	cbz	r3, 801265c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801261a:	4668      	mov	r0, sp
 801261c:	1d21      	adds	r1, r4, #4
 801261e:	f8ad 5000 	strh.w	r5, [sp]
 8012622:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012626:	f8ad 7004 	strh.w	r7, [sp, #4]
 801262a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801262e:	f7ff ff43 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8012632:	4668      	mov	r0, sp
 8012634:	f7ff ff83 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012638:	b980      	cbnz	r0, 801265c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801263a:	f8bd 3000 	ldrh.w	r3, [sp]
 801263e:	4669      	mov	r1, sp
 8012640:	88a2      	ldrh	r2, [r4, #4]
 8012642:	4620      	mov	r0, r4
 8012644:	1a9b      	subs	r3, r3, r2
 8012646:	88e2      	ldrh	r2, [r4, #6]
 8012648:	f8ad 3000 	strh.w	r3, [sp]
 801264c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012656:	6823      	ldr	r3, [r4, #0]
 8012658:	689b      	ldr	r3, [r3, #8]
 801265a:	4798      	blx	r3
 801265c:	69a4      	ldr	r4, [r4, #24]
 801265e:	2c00      	cmp	r4, #0
 8012660:	d1d8      	bne.n	8012614 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012662:	b002      	add	sp, #8
 8012664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012668 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012668:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801266a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801266e:	460d      	mov	r5, r1
 8012670:	4616      	mov	r6, r2
 8012672:	b323      	cbz	r3, 80126be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012674:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8012676:	b314      	cbz	r4, 80126be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012678:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801267c:	b1eb      	cbz	r3, 80126ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801267e:	6828      	ldr	r0, [r5, #0]
 8012680:	466b      	mov	r3, sp
 8012682:	6869      	ldr	r1, [r5, #4]
 8012684:	c303      	stmia	r3!, {r0, r1}
 8012686:	4668      	mov	r0, sp
 8012688:	1d21      	adds	r1, r4, #4
 801268a:	f7ff ff15 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 801268e:	4668      	mov	r0, sp
 8012690:	f7ff ff55 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012694:	b988      	cbnz	r0, 80126ba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012696:	f8bd 3000 	ldrh.w	r3, [sp]
 801269a:	4669      	mov	r1, sp
 801269c:	88a2      	ldrh	r2, [r4, #4]
 801269e:	4620      	mov	r0, r4
 80126a0:	1a9b      	subs	r3, r3, r2
 80126a2:	88e2      	ldrh	r2, [r4, #6]
 80126a4:	f8ad 3000 	strh.w	r3, [sp]
 80126a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80126ac:	1a9b      	subs	r3, r3, r2
 80126ae:	4632      	mov	r2, r6
 80126b0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80126b8:	4798      	blx	r3
 80126ba:	69a4      	ldr	r4, [r4, #24]
 80126bc:	e7db      	b.n	8012676 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80126be:	b002      	add	sp, #8
 80126c0:	bd70      	pop	{r4, r5, r6, pc}

080126c2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80126c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80126c6:	4770      	bx	lr

080126c8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80126c8:	4770      	bx	lr

080126ca <_ZN8touchgfx3HAL10FlushCacheEv>:
 80126ca:	4770      	bx	lr

080126cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80126cc:	6803      	ldr	r3, [r0, #0]
 80126ce:	b513      	push	{r0, r1, r4, lr}
 80126d0:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80126d4:	2300      	movs	r3, #0
 80126d6:	e9cd 3300 	strd	r3, r3, [sp]
 80126da:	466b      	mov	r3, sp
 80126dc:	47a0      	blx	r4
 80126de:	b002      	add	sp, #8
 80126e0:	bd10      	pop	{r4, pc}

080126e2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80126e2:	2301      	movs	r3, #1
 80126e4:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80126e8:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80126ec:	4770      	bx	lr

080126ee <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80126ee:	2301      	movs	r3, #1
 80126f0:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80126f4:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80126f8:	4770      	bx	lr

080126fa <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80126fa:	6843      	ldr	r3, [r0, #4]
 80126fc:	2201      	movs	r2, #1
 80126fe:	725a      	strb	r2, [r3, #9]
 8012700:	6840      	ldr	r0, [r0, #4]
 8012702:	6803      	ldr	r3, [r0, #0]
 8012704:	691b      	ldr	r3, [r3, #16]
 8012706:	4718      	bx	r3

08012708 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012708:	6840      	ldr	r0, [r0, #4]
 801270a:	6803      	ldr	r3, [r0, #0]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	4718      	bx	r3

08012710 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012710:	b530      	push	{r4, r5, lr}
 8012712:	b08b      	sub	sp, #44	@ 0x2c
 8012714:	6804      	ldr	r4, [r0, #0]
 8012716:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801271a:	9509      	str	r5, [sp, #36]	@ 0x24
 801271c:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8012720:	9508      	str	r5, [sp, #32]
 8012722:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8012726:	9507      	str	r5, [sp, #28]
 8012728:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801272c:	9506      	str	r5, [sp, #24]
 801272e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8012732:	9505      	str	r5, [sp, #20]
 8012734:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8012738:	9504      	str	r5, [sp, #16]
 801273a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801273e:	9503      	str	r5, [sp, #12]
 8012740:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8012744:	9502      	str	r5, [sp, #8]
 8012746:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801274a:	e9cd 3500 	strd	r3, r5, [sp]
 801274e:	4613      	mov	r3, r2
 8012750:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8012752:	2200      	movs	r2, #0
 8012754:	47a0      	blx	r4
 8012756:	b00b      	add	sp, #44	@ 0x2c
 8012758:	bd30      	pop	{r4, r5, pc}
	...

0801275c <_ZN8touchgfx3HAL10beginFrameEv>:
 801275c:	4b04      	ldr	r3, [pc, #16]	@ (8012770 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	b123      	cbz	r3, 801276c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012762:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8012766:	f080 0001 	eor.w	r0, r0, #1
 801276a:	4770      	bx	lr
 801276c:	2001      	movs	r0, #1
 801276e:	4770      	bx	lr
 8012770:	2401b546 	.word	0x2401b546

08012774 <_ZN8touchgfx3HAL8endFrameEv>:
 8012774:	b510      	push	{r4, lr}
 8012776:	4604      	mov	r4, r0
 8012778:	6840      	ldr	r0, [r0, #4]
 801277a:	6803      	ldr	r3, [r0, #0]
 801277c:	689b      	ldr	r3, [r3, #8]
 801277e:	4798      	blx	r3
 8012780:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8012784:	b113      	cbz	r3, 801278c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012786:	2301      	movs	r3, #1
 8012788:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801278c:	bd10      	pop	{r4, pc}

0801278e <_ZN8touchgfx3HAL10initializeEv>:
 801278e:	b510      	push	{r4, lr}
 8012790:	4604      	mov	r4, r0
 8012792:	f7fe f893 	bl	80108bc <_ZN8touchgfx10OSWrappers10initializeEv>
 8012796:	f7fd fd5d 	bl	8010254 <_ZN8touchgfx4GPIO4initEv>
 801279a:	6860      	ldr	r0, [r4, #4]
 801279c:	6803      	ldr	r3, [r0, #0]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	4798      	blx	r3
 80127a2:	68e0      	ldr	r0, [r4, #12]
 80127a4:	6803      	ldr	r3, [r0, #0]
 80127a6:	689b      	ldr	r3, [r3, #8]
 80127a8:	4798      	blx	r3
 80127aa:	6823      	ldr	r3, [r4, #0]
 80127ac:	4620      	mov	r0, r4
 80127ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80127b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127b4:	4718      	bx	r3

080127b6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80127b6:	b508      	push	{r3, lr}
 80127b8:	6803      	ldr	r3, [r0, #0]
 80127ba:	4604      	mov	r4, r0
 80127bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127c0:	4798      	blx	r3
 80127c2:	6823      	ldr	r3, [r4, #0]
 80127c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127c6:	4620      	mov	r0, r4
 80127c8:	4798      	blx	r3
 80127ca:	f7fe f8ed 	bl	80109a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127d2:	e7f8      	b.n	80127c6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080127d4 <_ZN8touchgfx3HAL4tickEv>:
 80127d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80127d6:	6803      	ldr	r3, [r0, #0]
 80127d8:	4604      	mov	r4, r0
 80127da:	4d5b      	ldr	r5, [pc, #364]	@ (8012948 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80127dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127e0:	4798      	blx	r3
 80127e2:	2800      	cmp	r0, #0
 80127e4:	f000 8095 	beq.w	8012912 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80127e8:	2001      	movs	r0, #1
 80127ea:	2600      	movs	r6, #0
 80127ec:	f7fd fd3a 	bl	8010264 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80127f0:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80127f4:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80127f8:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80127fc:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8012800:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8012804:	b133      	cbz	r3, 8012814 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	4620      	mov	r0, r4
 801280a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801280e:	4798      	blx	r3
 8012810:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8012814:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8012818:	2601      	movs	r6, #1
 801281a:	6862      	ldr	r2, [r4, #4]
 801281c:	f083 0301 	eor.w	r3, r3, #1
 8012820:	702e      	strb	r6, [r5, #0]
 8012822:	7253      	strb	r3, [r2, #9]
 8012824:	f002 f826 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 8012828:	6803      	ldr	r3, [r0, #0]
 801282a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801282c:	4798      	blx	r3
 801282e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8012832:	b90b      	cbnz	r3, 8012838 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012834:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8012838:	f002 f81c 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 801283c:	6803      	ldr	r3, [r0, #0]
 801283e:	695b      	ldr	r3, [r3, #20]
 8012840:	4798      	blx	r3
 8012842:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8012844:	6803      	ldr	r3, [r0, #0]
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	4798      	blx	r3
 801284a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801284e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8012852:	3b01      	subs	r3, #1
 8012854:	b2db      	uxtb	r3, r3
 8012856:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801285a:	b10a      	cbz	r2, 8012860 <_ZN8touchgfx3HAL4tickEv+0x8c>
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1eb      	bne.n	8012838 <_ZN8touchgfx3HAL4tickEv+0x64>
 8012860:	4a3a      	ldr	r2, [pc, #232]	@ (801294c <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012862:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8012866:	7813      	ldrb	r3, [r2, #0]
 8012868:	3301      	adds	r3, #1
 801286a:	b25b      	sxtb	r3, r3
 801286c:	4299      	cmp	r1, r3
 801286e:	7013      	strb	r3, [r2, #0]
 8012870:	dc10      	bgt.n	8012894 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012872:	2300      	movs	r3, #0
 8012874:	68e0      	ldr	r0, [r4, #12]
 8012876:	a902      	add	r1, sp, #8
 8012878:	7013      	strb	r3, [r2, #0]
 801287a:	aa03      	add	r2, sp, #12
 801287c:	6803      	ldr	r3, [r0, #0]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	4798      	blx	r3
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	2800      	cmp	r0, #0
 8012886:	d050      	beq.n	801292a <_ZN8touchgfx3HAL4tickEv+0x156>
 8012888:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801288c:	4620      	mov	r0, r4
 801288e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012892:	4798      	blx	r3
 8012894:	2300      	movs	r3, #0
 8012896:	6960      	ldr	r0, [r4, #20]
 8012898:	f88d 3007 	strb.w	r3, [sp, #7]
 801289c:	b158      	cbz	r0, 80128b6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801289e:	6803      	ldr	r3, [r0, #0]
 80128a0:	f10d 0107 	add.w	r1, sp, #7
 80128a4:	68db      	ldr	r3, [r3, #12]
 80128a6:	4798      	blx	r3
 80128a8:	b128      	cbz	r0, 80128b6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 80128aa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80128ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80128b0:	6803      	ldr	r3, [r0, #0]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	4798      	blx	r3
 80128b6:	f104 001c 	add.w	r0, r4, #28
 80128ba:	f00d fed9 	bl	8020670 <_ZN8touchgfx8Gestures4tickEv>
 80128be:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80128c2:	b30b      	cbz	r3, 8012908 <_ZN8touchgfx3HAL4tickEv+0x134>
 80128c4:	6920      	ldr	r0, [r4, #16]
 80128c6:	6803      	ldr	r3, [r0, #0]
 80128c8:	691b      	ldr	r3, [r3, #16]
 80128ca:	4798      	blx	r3
 80128cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80128ce:	4606      	mov	r6, r0
 80128d0:	b903      	cbnz	r3, 80128d4 <_ZN8touchgfx3HAL4tickEv+0x100>
 80128d2:	6760      	str	r0, [r4, #116]	@ 0x74
 80128d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80128d6:	4a1e      	ldr	r2, [pc, #120]	@ (8012950 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80128d8:	1af3      	subs	r3, r6, r3
 80128da:	4293      	cmp	r3, r2
 80128dc:	d914      	bls.n	8012908 <_ZN8touchgfx3HAL4tickEv+0x134>
 80128de:	6920      	ldr	r0, [r4, #16]
 80128e0:	6803      	ldr	r3, [r0, #0]
 80128e2:	699b      	ldr	r3, [r3, #24]
 80128e4:	4798      	blx	r3
 80128e6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80128e8:	2264      	movs	r2, #100	@ 0x64
 80128ea:	1af3      	subs	r3, r6, r3
 80128ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80128f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80128f4:	2800      	cmp	r0, #0
 80128f6:	dc1d      	bgt.n	8012934 <_ZN8touchgfx3HAL4tickEv+0x160>
 80128f8:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80128fc:	6920      	ldr	r0, [r4, #16]
 80128fe:	2100      	movs	r1, #0
 8012900:	6803      	ldr	r3, [r0, #0]
 8012902:	69db      	ldr	r3, [r3, #28]
 8012904:	4798      	blx	r3
 8012906:	6766      	str	r6, [r4, #116]	@ 0x74
 8012908:	f001 ffb4 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 801290c:	6803      	ldr	r3, [r0, #0]
 801290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012910:	4798      	blx	r3
 8012912:	6823      	ldr	r3, [r4, #0]
 8012914:	4620      	mov	r0, r4
 8012916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801291a:	4798      	blx	r3
 801291c:	2001      	movs	r0, #1
 801291e:	f7fd fcd9 	bl	80102d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012922:	2300      	movs	r3, #0
 8012924:	702b      	strb	r3, [r5, #0]
 8012926:	b004      	add	sp, #16
 8012928:	bd70      	pop	{r4, r5, r6, pc}
 801292a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801292e:	4620      	mov	r0, r4
 8012930:	4798      	blx	r3
 8012932:	e7af      	b.n	8012894 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012934:	2863      	cmp	r0, #99	@ 0x63
 8012936:	bfcb      	itete	gt
 8012938:	2300      	movgt	r3, #0
 801293a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 801293e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8012942:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8012946:	e7d9      	b.n	80128fc <_ZN8touchgfx3HAL4tickEv+0x128>
 8012948:	2401b54c 	.word	0x2401b54c
 801294c:	2401b54d 	.word	0x2401b54d
 8012950:	05f5e100 	.word	0x05f5e100

08012954 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012954:	b510      	push	{r4, lr}
 8012956:	4604      	mov	r4, r0
 8012958:	f7fd fff2 	bl	8010940 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 801295c:	2200      	movs	r2, #0
 801295e:	6863      	ldr	r3, [r4, #4]
 8012960:	729a      	strb	r2, [r3, #10]
 8012962:	bd10      	pop	{r4, pc}

08012964 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012964:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8012966:	301c      	adds	r0, #28
 8012968:	f00d be80 	b.w	802066c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801296c <_ZN8touchgfx3HAL5touchEll>:
 801296c:	b530      	push	{r4, r5, lr}
 801296e:	b087      	sub	sp, #28
 8012970:	4604      	mov	r4, r0
 8012972:	a804      	add	r0, sp, #16
 8012974:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012978:	f001 fd6e 	bl	8014458 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801297c:	9b04      	ldr	r3, [sp, #16]
 801297e:	a906      	add	r1, sp, #24
 8012980:	a803      	add	r0, sp, #12
 8012982:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012986:	9b05      	ldr	r3, [sp, #20]
 8012988:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 801298c:	f001 fdb6 	bl	80144fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012990:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8012994:	f104 001c 	add.w	r0, r4, #28
 8012998:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801299c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80129a0:	b189      	cbz	r1, 80129c6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80129a2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	4613      	mov	r3, r2
 80129aa:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80129ae:	462a      	mov	r2, r5
 80129b0:	f00d fe6c 	bl	802068c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80129b4:	b128      	cbz	r0, 80129c2 <_ZN8touchgfx3HAL5touchEll+0x56>
 80129b6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80129ba:	6623      	str	r3, [r4, #96]	@ 0x60
 80129bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80129c0:	6663      	str	r3, [r4, #100]	@ 0x64
 80129c2:	b007      	add	sp, #28
 80129c4:	bd30      	pop	{r4, r5, pc}
 80129c6:	f00d fea1 	bl	802070c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80129ca:	2301      	movs	r3, #1
 80129cc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80129d0:	e7f1      	b.n	80129b6 <_ZN8touchgfx3HAL5touchEll+0x4a>

080129d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80129d2:	b510      	push	{r4, lr}
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d046      	beq.n	8012a66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80129d8:	ea81 0002 	eor.w	r0, r1, r2
 80129dc:	07c4      	lsls	r4, r0, #31
 80129de:	d508      	bpl.n	80129f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80129e0:	440b      	add	r3, r1
 80129e2:	3a01      	subs	r2, #1
 80129e4:	428b      	cmp	r3, r1
 80129e6:	d93e      	bls.n	8012a66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80129e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80129ec:	f801 0b01 	strb.w	r0, [r1], #1
 80129f0:	e7f8      	b.n	80129e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80129f2:	07d0      	lsls	r0, r2, #31
 80129f4:	bf42      	ittt	mi
 80129f6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80129fa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80129fe:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d911      	bls.n	8012a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012a06:	ea81 0402 	eor.w	r4, r1, r2
 8012a0a:	4610      	mov	r0, r2
 8012a0c:	07a4      	lsls	r4, r4, #30
 8012a0e:	d022      	beq.n	8012a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012a10:	f023 0401 	bic.w	r4, r3, #1
 8012a14:	440c      	add	r4, r1
 8012a16:	428c      	cmp	r4, r1
 8012a18:	4602      	mov	r2, r0
 8012a1a:	d904      	bls.n	8012a26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012a1c:	8812      	ldrh	r2, [r2, #0]
 8012a1e:	3002      	adds	r0, #2
 8012a20:	f821 2b02 	strh.w	r2, [r1], #2
 8012a24:	e7f7      	b.n	8012a16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012a26:	f003 0301 	and.w	r3, r3, #1
 8012a2a:	f023 0003 	bic.w	r0, r3, #3
 8012a2e:	4408      	add	r0, r1
 8012a30:	4288      	cmp	r0, r1
 8012a32:	4614      	mov	r4, r2
 8012a34:	d904      	bls.n	8012a40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012a36:	6824      	ldr	r4, [r4, #0]
 8012a38:	3204      	adds	r2, #4
 8012a3a:	f841 4b04 	str.w	r4, [r1], #4
 8012a3e:	e7f7      	b.n	8012a30 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012a40:	f003 0303 	and.w	r3, r3, #3
 8012a44:	3a01      	subs	r2, #1
 8012a46:	440b      	add	r3, r1
 8012a48:	428b      	cmp	r3, r1
 8012a4a:	d90c      	bls.n	8012a66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012a4c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012a50:	f801 0b01 	strb.w	r0, [r1], #1
 8012a54:	e7f8      	b.n	8012a48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012a56:	0790      	lsls	r0, r2, #30
 8012a58:	d0e7      	beq.n	8012a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012a5a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012a5e:	3b02      	subs	r3, #2
 8012a60:	f821 0b02 	strh.w	r0, [r1], #2
 8012a64:	e7e1      	b.n	8012a2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012a66:	2001      	movs	r0, #1
 8012a68:	bd10      	pop	{r4, pc}

08012a6a <_ZN8touchgfx3HAL7noTouchEv>:
 8012a6a:	b510      	push	{r4, lr}
 8012a6c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8012a70:	4604      	mov	r4, r0
 8012a72:	b153      	cbz	r3, 8012a8a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012a74:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8012a78:	2101      	movs	r1, #1
 8012a7a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8012a7e:	301c      	adds	r0, #28
 8012a80:	f00d fe44 	bl	802070c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012a84:	2300      	movs	r3, #0
 8012a86:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8012a8a:	bd10      	pop	{r4, pc}

08012a8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a90:	b085      	sub	sp, #20
 8012a92:	4604      	mov	r4, r0
 8012a94:	2000      	movs	r0, #0
 8012a96:	4699      	mov	r9, r3
 8012a98:	ad04      	add	r5, sp, #16
 8012a9a:	460f      	mov	r7, r1
 8012a9c:	4690      	mov	r8, r2
 8012a9e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012aa2:	69a0      	ldr	r0, [r4, #24]
 8012aa4:	6806      	ldr	r6, [r0, #0]
 8012aa6:	9501      	str	r5, [sp, #4]
 8012aa8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8012aac:	9500      	str	r5, [sp, #0]
 8012aae:	6835      	ldr	r5, [r6, #0]
 8012ab0:	47a8      	blx	r5
 8012ab2:	4d10      	ldr	r5, [pc, #64]	@ (8012af4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012ab4:	4606      	mov	r6, r0
 8012ab6:	f8a5 9000 	strh.w	r9, [r5]
 8012aba:	f7fb fb23 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 8012abe:	6803      	ldr	r3, [r0, #0]
 8012ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ac2:	4798      	blx	r3
 8012ac4:	b128      	cbz	r0, 8012ad2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012ac6:	2801      	cmp	r0, #1
 8012ac8:	d00b      	beq.n	8012ae2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012aca:	4630      	mov	r0, r6
 8012acc:	b005      	add	sp, #20
 8012ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad2:	882b      	ldrh	r3, [r5, #0]
 8012ad4:	fb08 7203 	mla	r2, r8, r3, r7
 8012ad8:	9b03      	ldr	r3, [sp, #12]
 8012ada:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012ade:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8012ae0:	e7f3      	b.n	8012aca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012ae2:	882a      	ldrh	r2, [r5, #0]
 8012ae4:	9b03      	ldr	r3, [sp, #12]
 8012ae6:	fb08 7202 	mla	r2, r8, r2, r7
 8012aea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012aee:	1a9a      	subs	r2, r3, r2
 8012af0:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8012af2:	e7ea      	b.n	8012aca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012af4:	2401b542 	.word	0x2401b542

08012af8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012afa:	b08b      	sub	sp, #44	@ 0x2c
 8012afc:	4617      	mov	r7, r2
 8012afe:	4604      	mov	r4, r0
 8012b00:	460e      	mov	r6, r1
 8012b02:	461d      	mov	r5, r3
 8012b04:	f7fb fafe 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 8012b08:	6803      	ldr	r3, [r0, #0]
 8012b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b0c:	4798      	blx	r3
 8012b0e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012b12:	9007      	str	r0, [sp, #28]
 8012b14:	4631      	mov	r1, r6
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8012b50 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012b1e:	4620      	mov	r0, r4
 8012b20:	881b      	ldrh	r3, [r3, #0]
 8012b22:	9306      	str	r3, [sp, #24]
 8012b24:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8012b28:	9305      	str	r3, [sp, #20]
 8012b2a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8012b2e:	9304      	str	r3, [sp, #16]
 8012b30:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012b34:	9303      	str	r3, [sp, #12]
 8012b36:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012b3a:	9302      	str	r3, [sp, #8]
 8012b3c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012b40:	e9cd 5300 	strd	r5, r3, [sp]
 8012b44:	463b      	mov	r3, r7
 8012b46:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8012b48:	2200      	movs	r2, #0
 8012b4a:	47a8      	blx	r5
 8012b4c:	b00b      	add	sp, #44	@ 0x2c
 8012b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b50:	2401b542 	.word	0x2401b542

08012b54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b58:	4698      	mov	r8, r3
 8012b5a:	6803      	ldr	r3, [r0, #0]
 8012b5c:	b08b      	sub	sp, #44	@ 0x2c
 8012b5e:	4617      	mov	r7, r2
 8012b60:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8012b62:	460e      	mov	r6, r1
 8012b64:	4b13      	ldr	r3, [pc, #76]	@ (8012bb4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012b66:	4604      	mov	r4, r0
 8012b68:	f8b3 9000 	ldrh.w	r9, [r3]
 8012b6c:	f7fb faca 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 8012b70:	6803      	ldr	r3, [r0, #0]
 8012b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b74:	4798      	blx	r3
 8012b76:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	4631      	mov	r1, r6
 8012b7e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012b82:	2302      	movs	r3, #2
 8012b84:	4620      	mov	r0, r4
 8012b86:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	9305      	str	r3, [sp, #20]
 8012b8e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8012b92:	9304      	str	r3, [sp, #16]
 8012b94:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8012b98:	9303      	str	r3, [sp, #12]
 8012b9a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012b9e:	9302      	str	r3, [sp, #8]
 8012ba0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012ba4:	e9cd 8300 	strd	r8, r3, [sp]
 8012ba8:	463b      	mov	r3, r7
 8012baa:	47a8      	blx	r5
 8012bac:	b00b      	add	sp, #44	@ 0x2c
 8012bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bb2:	bf00      	nop
 8012bb4:	2401b542 	.word	0x2401b542

08012bb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8012bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bbc:	4698      	mov	r8, r3
 8012bbe:	6803      	ldr	r3, [r0, #0]
 8012bc0:	b087      	sub	sp, #28
 8012bc2:	460e      	mov	r6, r1
 8012bc4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8012bc6:	4617      	mov	r7, r2
 8012bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8012c08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8012bca:	4604      	mov	r4, r0
 8012bcc:	f8b3 9000 	ldrh.w	r9, [r3]
 8012bd0:	f7fb fa98 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 8012bd4:	6803      	ldr	r3, [r0, #0]
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	4798      	blx	r3
 8012bda:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8012bde:	463a      	mov	r2, r7
 8012be0:	4631      	mov	r1, r6
 8012be2:	f8cd 900c 	str.w	r9, [sp, #12]
 8012be6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8012bea:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8012bee:	4620      	mov	r0, r4
 8012bf0:	9302      	str	r3, [sp, #8]
 8012bf2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012bfc:	9300      	str	r3, [sp, #0]
 8012bfe:	4643      	mov	r3, r8
 8012c00:	47a8      	blx	r5
 8012c02:	b007      	add	sp, #28
 8012c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c08:	2401b542 	.word	0x2401b542

08012c0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8012c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c10:	4604      	mov	r4, r0
 8012c12:	b08f      	sub	sp, #60	@ 0x3c
 8012c14:	4610      	mov	r0, r2
 8012c16:	460d      	mov	r5, r1
 8012c18:	4691      	mov	r9, r2
 8012c1a:	461e      	mov	r6, r3
 8012c1c:	f004 fa0e 	bl	801703c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	f000 809d 	beq.w	8012d60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8012c26:	6823      	ldr	r3, [r4, #0]
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8012dc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8012c2e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8012c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c34:	4798      	blx	r3
 8012c36:	6823      	ldr	r3, [r4, #0]
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8012dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8012c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c40:	4798      	blx	r3
 8012c42:	f8bb 3000 	ldrh.w	r3, [fp]
 8012c46:	4f5c      	ldr	r7, [pc, #368]	@ (8012db8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012c48:	9301      	str	r3, [sp, #4]
 8012c4a:	f8ba 3000 	ldrh.w	r3, [sl]
 8012c4e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8012c52:	4640      	mov	r0, r8
 8012c54:	9302      	str	r3, [sp, #8]
 8012c56:	883b      	ldrh	r3, [r7, #0]
 8012c58:	9303      	str	r3, [sp, #12]
 8012c5a:	4b58      	ldr	r3, [pc, #352]	@ (8012dbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012c5c:	881a      	ldrh	r2, [r3, #0]
 8012c5e:	9305      	str	r3, [sp, #20]
 8012c60:	9204      	str	r2, [sp, #16]
 8012c62:	f004 fb3b 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012c66:	8038      	strh	r0, [r7, #0]
 8012c68:	4640      	mov	r0, r8
 8012c6a:	f004 fb6b 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012c6e:	9b05      	ldr	r3, [sp, #20]
 8012c70:	b280      	uxth	r0, r0
 8012c72:	8018      	strh	r0, [r3, #0]
 8012c74:	4b52      	ldr	r3, [pc, #328]	@ (8012dc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d174      	bne.n	8012d66 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8012c7c:	883b      	ldrh	r3, [r7, #0]
 8012c7e:	f8aa 0000 	strh.w	r0, [sl]
 8012c82:	f8ab 3000 	strh.w	r3, [fp]
 8012c86:	4648      	mov	r0, r9
 8012c88:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8012c8c:	f004 f9d6 	bl	801703c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8012c90:	2200      	movs	r2, #0
 8012c92:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8012c96:	4611      	mov	r1, r2
 8012c98:	4628      	mov	r0, r5
 8012c9a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8012c9e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8012ca2:	f7fb ff8e 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8012cac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8012cb0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dd5c      	ble.n	8012d72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012cb8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	dd58      	ble.n	8012d72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8012cc0:	462a      	mov	r2, r5
 8012cc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8012cc4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012cc8:	6851      	ldr	r1, [r2, #4]
 8012cca:	c303      	stmia	r3!, {r0, r1}
 8012ccc:	4631      	mov	r1, r6
 8012cce:	a80a      	add	r0, sp, #40	@ 0x28
 8012cd0:	f7ff fbf2 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8012cd4:	4b38      	ldr	r3, [pc, #224]	@ (8012db8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012cdc:	4b37      	ldr	r3, [pc, #220]	@ (8012dbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012cde:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012ce2:	aa0a      	add	r2, sp, #40	@ 0x28
 8012ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ce8:	910c      	str	r1, [sp, #48]	@ 0x30
 8012cea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012cee:	ab08      	add	r3, sp, #32
 8012cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cf4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	a90c      	add	r1, sp, #48	@ 0x30
 8012cfc:	f7ff fbdc 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8012d00:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d13c      	bne.n	8012d80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8012d06:	2000      	movs	r0, #0
 8012d08:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8012d0c:	2600      	movs	r6, #0
 8012d0e:	696b      	ldr	r3, [r5, #20]
 8012d10:	a908      	add	r1, sp, #32
 8012d12:	682a      	ldr	r2, [r5, #0]
 8012d14:	4628      	mov	r0, r5
 8012d16:	9305      	str	r3, [sp, #20]
 8012d18:	616e      	str	r6, [r5, #20]
 8012d1a:	6892      	ldr	r2, [r2, #8]
 8012d1c:	4790      	blx	r2
 8012d1e:	9b05      	ldr	r3, [sp, #20]
 8012d20:	4652      	mov	r2, sl
 8012d22:	4649      	mov	r1, r9
 8012d24:	616b      	str	r3, [r5, #20]
 8012d26:	4628      	mov	r0, r5
 8012d28:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8012d2c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8012d30:	f7fb ff47 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
 8012d34:	9a01      	ldr	r2, [sp, #4]
 8012d36:	4b23      	ldr	r3, [pc, #140]	@ (8012dc4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8012d38:	4620      	mov	r0, r4
 8012d3a:	801a      	strh	r2, [r3, #0]
 8012d3c:	9a02      	ldr	r2, [sp, #8]
 8012d3e:	4b22      	ldr	r3, [pc, #136]	@ (8012dc8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8012d40:	801a      	strh	r2, [r3, #0]
 8012d42:	9a03      	ldr	r2, [sp, #12]
 8012d44:	4b1c      	ldr	r3, [pc, #112]	@ (8012db8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8012d46:	801a      	strh	r2, [r3, #0]
 8012d48:	4b1c      	ldr	r3, [pc, #112]	@ (8012dbc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8012d4a:	9a04      	ldr	r2, [sp, #16]
 8012d4c:	801a      	strh	r2, [r3, #0]
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8012d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d56:	4798      	blx	r3
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	4620      	mov	r0, r4
 8012d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d5e:	4798      	blx	r3
 8012d60:	b00f      	add	sp, #60	@ 0x3c
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	883b      	ldrh	r3, [r7, #0]
 8012d68:	f8ab 0000 	strh.w	r0, [fp]
 8012d6c:	f8aa 3000 	strh.w	r3, [sl]
 8012d70:	e789      	b.n	8012c86 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8012d72:	462a      	mov	r2, r5
 8012d74:	ab0a      	add	r3, sp, #40	@ 0x28
 8012d76:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012d7a:	6851      	ldr	r1, [r2, #4]
 8012d7c:	c303      	stmia	r3!, {r0, r1}
 8012d7e:	e7a9      	b.n	8012cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8012d80:	a807      	add	r0, sp, #28
 8012d82:	f004 fbe9 	bl	8017558 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012d86:	4606      	mov	r6, r0
 8012d88:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8012d8a:	6803      	ldr	r3, [r0, #0]
 8012d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d8e:	4798      	blx	r3
 8012d90:	4286      	cmp	r6, r0
 8012d92:	d1b8      	bne.n	8012d06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8012d94:	f7fb f9b6 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 8012d98:	6803      	ldr	r3, [r0, #0]
 8012d9a:	4606      	mov	r6, r0
 8012d9c:	a807      	add	r0, sp, #28
 8012d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012da0:	9305      	str	r3, [sp, #20]
 8012da2:	f004 fbd9 	bl	8017558 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8012da6:	9b05      	ldr	r3, [sp, #20]
 8012da8:	4601      	mov	r1, r0
 8012daa:	4630      	mov	r0, r6
 8012dac:	4798      	blx	r3
 8012dae:	f080 0001 	eor.w	r0, r0, #1
 8012db2:	b2c0      	uxtb	r0, r0
 8012db4:	e7a8      	b.n	8012d08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8012db6:	bf00      	nop
 8012db8:	2401b53c 	.word	0x2401b53c
 8012dbc:	2401b53e 	.word	0x2401b53e
 8012dc0:	2401b540 	.word	0x2401b540
 8012dc4:	2401b542 	.word	0x2401b542
 8012dc8:	2401b544 	.word	0x2401b544

08012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8012dcc:	4b07      	ldr	r3, [pc, #28]	@ (8012dec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8012dce:	b510      	push	{r4, lr}
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	b13b      	cbz	r3, 8012de6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012dd6:	6803      	ldr	r3, [r0, #0]
 8012dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dda:	4798      	blx	r3
 8012ddc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012dde:	4283      	cmp	r3, r0
 8012de0:	d101      	bne.n	8012de6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8012de2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8012de4:	bd10      	pop	{r4, pc}
 8012de6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8012de8:	e7fc      	b.n	8012de4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8012dea:	bf00      	nop
 8012dec:	2401b546 	.word	0x2401b546

08012df0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8012df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012df4:	461d      	mov	r5, r3
 8012df6:	b08a      	sub	sp, #40	@ 0x28
 8012df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012dfc:	4690      	mov	r8, r2
 8012dfe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8012e02:	2400      	movs	r4, #0
 8012e04:	4607      	mov	r7, r0
 8012e06:	fb06 8505 	mla	r5, r6, r5, r8
 8012e0a:	9404      	str	r4, [sp, #16]
 8012e0c:	f88d 4020 	strb.w	r4, [sp, #32]
 8012e10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012e14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8012e18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e1c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012e20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012e24:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012e28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012e2c:	f7ff ffce 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012e30:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012e3a:	a901      	add	r1, sp, #4
 8012e3c:	9505      	str	r5, [sp, #20]
 8012e3e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8012e42:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8012e46:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8012e4a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8012e4e:	6803      	ldr	r3, [r0, #0]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4798      	blx	r3
 8012e54:	b00a      	add	sp, #40	@ 0x28
 8012e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e5a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8012e5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e5e:	b08b      	sub	sp, #44	@ 0x2c
 8012e60:	2400      	movs	r4, #0
 8012e62:	4691      	mov	r9, r2
 8012e64:	461d      	mov	r5, r3
 8012e66:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8012e6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012e6e:	4688      	mov	r8, r1
 8012e70:	4607      	mov	r7, r0
 8012e72:	9404      	str	r4, [sp, #16]
 8012e74:	fb06 9505 	mla	r5, r6, r5, r9
 8012e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e7c:	f7ff ffa6 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012e80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012e84:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e8e:	a901      	add	r1, sp, #4
 8012e90:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012e94:	9505      	str	r5, [sp, #20]
 8012e96:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012e9a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8012e9e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8012ea2:	f8cd 8010 	str.w	r8, [sp, #16]
 8012ea6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8012eaa:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8012eae:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8012eb2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8012eb6:	6803      	ldr	r3, [r0, #0]
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	4798      	blx	r3
 8012ebc:	b00b      	add	sp, #44	@ 0x2c
 8012ebe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08012ec4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8012ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec8:	b08a      	sub	sp, #40	@ 0x28
 8012eca:	4698      	mov	r8, r3
 8012ecc:	2300      	movs	r3, #0
 8012ece:	4606      	mov	r6, r0
 8012ed0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8012ed4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8012ed8:	2d0b      	cmp	r5, #11
 8012eda:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8012ede:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8012ee2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8012ee6:	9304      	str	r3, [sp, #16]
 8012ee8:	d137      	bne.n	8012f5a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8012eea:	2380      	movs	r3, #128	@ 0x80
 8012eec:	f88d 0020 	strb.w	r0, [sp, #32]
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	9203      	str	r2, [sp, #12]
 8012ef4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8012ef8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8012efc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012f00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8012f04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012f08:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8012f0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012f10:	f7ff ff5c 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012f14:	2c0b      	cmp	r4, #11
 8012f16:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012f1a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8012f1e:	bf94      	ite	ls
 8012f20:	4b19      	ldrls	r3, [pc, #100]	@ (8012f88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8012f22:	2100      	movhi	r1, #0
 8012f24:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8012f28:	bf98      	it	ls
 8012f2a:	5d19      	ldrbls	r1, [r3, r4]
 8012f2c:	fb02 8307 	mla	r3, r2, r7, r8
 8012f30:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8012f34:	10c9      	asrs	r1, r1, #3
 8012f36:	fb01 0003 	mla	r0, r1, r3, r0
 8012f3a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8012f3e:	a901      	add	r1, sp, #4
 8012f40:	9005      	str	r0, [sp, #20]
 8012f42:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8012f46:	2300      	movs	r3, #0
 8012f48:	6870      	ldr	r0, [r6, #4]
 8012f4a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	4798      	blx	r3
 8012f54:	b00a      	add	sp, #40	@ 0x28
 8012f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f5a:	2d02      	cmp	r5, #2
 8012f5c:	d109      	bne.n	8012f72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8012f5e:	28ff      	cmp	r0, #255	@ 0xff
 8012f60:	d105      	bne.n	8012f6e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8012f62:	f1bc 0f00 	cmp.w	ip, #0
 8012f66:	bf14      	ite	ne
 8012f68:	2340      	movne	r3, #64	@ 0x40
 8012f6a:	2320      	moveq	r3, #32
 8012f6c:	e7be      	b.n	8012eec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012f6e:	2340      	movs	r3, #64	@ 0x40
 8012f70:	e7bc      	b.n	8012eec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012f72:	28ff      	cmp	r0, #255	@ 0xff
 8012f74:	d105      	bne.n	8012f82 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8012f76:	f1bc 0f00 	cmp.w	ip, #0
 8012f7a:	bf14      	ite	ne
 8012f7c:	2304      	movne	r3, #4
 8012f7e:	2301      	moveq	r3, #1
 8012f80:	e7b4      	b.n	8012eec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012f82:	2304      	movs	r3, #4
 8012f84:	e7b2      	b.n	8012eec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8012f86:	bf00      	nop
 8012f88:	08022d10 	.word	0x08022d10

08012f8c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8012f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f90:	b08b      	sub	sp, #44	@ 0x2c
 8012f92:	461d      	mov	r5, r3
 8012f94:	2400      	movs	r4, #0
 8012f96:	4688      	mov	r8, r1
 8012f98:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8012f9c:	4693      	mov	fp, r2
 8012f9e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8012fa2:	4607      	mov	r7, r0
 8012fa4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8012fa8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8012fac:	9404      	str	r4, [sp, #16]
 8012fae:	bf14      	ite	ne
 8012fb0:	2308      	movne	r3, #8
 8012fb2:	2302      	moveq	r3, #2
 8012fb4:	fb05 b50a 	mla	r5, r5, sl, fp
 8012fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fbc:	f7ff ff06 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012fc0:	2e0b      	cmp	r6, #11
 8012fc2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8012fc6:	a901      	add	r1, sp, #4
 8012fc8:	bf98      	it	ls
 8012fca:	4b13      	ldrls	r3, [pc, #76]	@ (8013018 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8012fcc:	f8ad a01e 	strh.w	sl, [sp, #30]
 8012fd0:	bf98      	it	ls
 8012fd2:	5d9c      	ldrbls	r4, [r3, r6]
 8012fd4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8012fd8:	10e4      	asrs	r4, r4, #3
 8012fda:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fde:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012fe2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8012fe6:	fb04 0405 	mla	r4, r4, r5, r0
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	9405      	str	r4, [sp, #20]
 8012ff4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012ff8:	f88d 9020 	strb.w	r9, [sp, #32]
 8012ffc:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8013000:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013004:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8013008:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801300c:	6803      	ldr	r3, [r0, #0]
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	4798      	blx	r3
 8013012:	b00b      	add	sp, #44	@ 0x2c
 8013014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013018:	08022d10 	.word	0x08022d10

0801301c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013020:	461e      	mov	r6, r3
 8013022:	4b0a      	ldr	r3, [pc, #40]	@ (801304c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013024:	460f      	mov	r7, r1
 8013026:	4690      	mov	r8, r2
 8013028:	881d      	ldrh	r5, [r3, #0]
 801302a:	f7fb f86b 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 801302e:	6803      	ldr	r3, [r0, #0]
 8013030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013032:	4798      	blx	r3
 8013034:	280b      	cmp	r0, #11
 8013036:	bf96      	itet	ls
 8013038:	4b05      	ldrls	r3, [pc, #20]	@ (8013050 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801303a:	2400      	movhi	r4, #0
 801303c:	5c1c      	ldrbls	r4, [r3, r0]
 801303e:	fb08 7005 	mla	r0, r8, r5, r7
 8013042:	10e4      	asrs	r4, r4, #3
 8013044:	fb04 6000 	mla	r0, r4, r0, r6
 8013048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801304c:	2401b542 	.word	0x2401b542
 8013050:	08022d10 	.word	0x08022d10

08013054 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013056:	b08b      	sub	sp, #44	@ 0x2c
 8013058:	461f      	mov	r7, r3
 801305a:	4604      	mov	r4, r0
 801305c:	4616      	mov	r6, r2
 801305e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8013062:	2500      	movs	r5, #0
 8013064:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013068:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801306c:	9504      	str	r5, [sp, #16]
 801306e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013072:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8013076:	f8ad 301a 	strh.w	r3, [sp, #26]
 801307a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801307e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013082:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8013086:	f88d 3020 	strb.w	r3, [sp, #32]
 801308a:	f7ff fe9f 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801308e:	463a      	mov	r2, r7
 8013090:	4631      	mov	r1, r6
 8013092:	4603      	mov	r3, r0
 8013094:	4620      	mov	r0, r4
 8013096:	f7ff ffc1 	bl	801301c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801309a:	4b0e      	ldr	r3, [pc, #56]	@ (80130d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801309c:	9005      	str	r0, [sp, #20]
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80130a4:	f7fb f82e 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 80130a8:	6803      	ldr	r3, [r0, #0]
 80130aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ac:	4798      	blx	r3
 80130ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80130b0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80130b4:	a901      	add	r1, sp, #4
 80130b6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80130ba:	9304      	str	r3, [sp, #16]
 80130bc:	6860      	ldr	r0, [r4, #4]
 80130be:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80130c2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80130c6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80130ca:	6803      	ldr	r3, [r0, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	4798      	blx	r3
 80130d0:	b00b      	add	sp, #44	@ 0x2c
 80130d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d4:	2401b542 	.word	0x2401b542

080130d8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80130d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130da:	b08d      	sub	sp, #52	@ 0x34
 80130dc:	2501      	movs	r5, #1
 80130de:	4604      	mov	r4, r0
 80130e0:	466b      	mov	r3, sp
 80130e2:	9503      	str	r5, [sp, #12]
 80130e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80130e8:	2300      	movs	r3, #0
 80130ea:	f8bd 6000 	ldrh.w	r6, [sp]
 80130ee:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80130f2:	9306      	str	r3, [sp, #24]
 80130f4:	6803      	ldr	r3, [r0, #0]
 80130f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130f8:	4798      	blx	r3
 80130fa:	463a      	mov	r2, r7
 80130fc:	4631      	mov	r1, r6
 80130fe:	4603      	mov	r3, r0
 8013100:	4620      	mov	r0, r4
 8013102:	f7ff ff8b 	bl	801301c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013106:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013108:	9004      	str	r0, [sp, #16]
 801310a:	9307      	str	r3, [sp, #28]
 801310c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013110:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013114:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013118:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801311c:	4b0e      	ldr	r3, [pc, #56]	@ (8013158 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8013124:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8013128:	f7fa ffec 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 801312c:	6803      	ldr	r3, [r0, #0]
 801312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013130:	4798      	blx	r3
 8013132:	23ff      	movs	r3, #255	@ 0xff
 8013134:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8013138:	a903      	add	r1, sp, #12
 801313a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801313e:	6860      	ldr	r0, [r4, #4]
 8013140:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8013144:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8013148:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801314c:	6803      	ldr	r3, [r0, #0]
 801314e:	685b      	ldr	r3, [r3, #4]
 8013150:	4798      	blx	r3
 8013152:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013154:	b00d      	add	sp, #52	@ 0x34
 8013156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013158:	2401b542 	.word	0x2401b542

0801315c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013160:	b08c      	sub	sp, #48	@ 0x30
 8013162:	461e      	mov	r6, r3
 8013164:	2300      	movs	r3, #0
 8013166:	4604      	mov	r4, r0
 8013168:	466d      	mov	r5, sp
 801316a:	9306      	str	r3, [sp, #24]
 801316c:	6803      	ldr	r3, [r0, #0]
 801316e:	e885 0006 	stmia.w	r5, {r1, r2}
 8013172:	2501      	movs	r5, #1
 8013174:	f8bd 7000 	ldrh.w	r7, [sp]
 8013178:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801317c:	9503      	str	r5, [sp, #12]
 801317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013180:	4798      	blx	r3
 8013182:	4642      	mov	r2, r8
 8013184:	4639      	mov	r1, r7
 8013186:	4603      	mov	r3, r0
 8013188:	4620      	mov	r0, r4
 801318a:	f7ff ff47 	bl	801301c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801318e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013192:	9004      	str	r0, [sp, #16]
 8013194:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801319c:	9607      	str	r6, [sp, #28]
 801319e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80131a2:	4b10      	ldr	r3, [pc, #64]	@ (80131e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80131a4:	881b      	ldrh	r3, [r3, #0]
 80131a6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80131aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80131ac:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80131b0:	f7fa ffa8 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 80131b4:	6803      	ldr	r3, [r0, #0]
 80131b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131b8:	4798      	blx	r3
 80131ba:	23ff      	movs	r3, #255	@ 0xff
 80131bc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80131c0:	a903      	add	r1, sp, #12
 80131c2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80131c6:	6860      	ldr	r0, [r4, #4]
 80131c8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80131cc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80131d0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80131d4:	6803      	ldr	r3, [r0, #0]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	4798      	blx	r3
 80131da:	4630      	mov	r0, r6
 80131dc:	b00c      	add	sp, #48	@ 0x30
 80131de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e2:	bf00      	nop
 80131e4:	2401b542 	.word	0x2401b542

080131e8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80131e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ea:	b085      	sub	sp, #20
 80131ec:	4605      	mov	r5, r0
 80131ee:	ac02      	add	r4, sp, #8
 80131f0:	e884 0006 	stmia.w	r4, {r1, r2}
 80131f4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80131f8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80131fc:	f7ff fde6 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013200:	4631      	mov	r1, r6
 8013202:	4603      	mov	r3, r0
 8013204:	463a      	mov	r2, r7
 8013206:	4628      	mov	r0, r5
 8013208:	f7ff ff08 	bl	801301c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801320c:	4a05      	ldr	r2, [pc, #20]	@ (8013224 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801320e:	682b      	ldr	r3, [r5, #0]
 8013210:	8812      	ldrh	r2, [r2, #0]
 8013212:	9200      	str	r2, [sp, #0]
 8013214:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8013216:	4603      	mov	r3, r0
 8013218:	4628      	mov	r0, r5
 801321a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801321e:	47b0      	blx	r6
 8013220:	b005      	add	sp, #20
 8013222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013224:	2401b542 	.word	0x2401b542

08013228 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801322e:	4604      	mov	r4, r0
 8013230:	b19b      	cbz	r3, 801325a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013232:	2002      	movs	r0, #2
 8013234:	f7fd f886 	bl	8010344 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013238:	2300      	movs	r3, #0
 801323a:	4620      	mov	r0, r4
 801323c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8013240:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8013244:	6823      	ldr	r3, [r4, #0]
 8013246:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 801324a:	f7ff fdbf 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801324e:	4601      	mov	r1, r0
 8013250:	4620      	mov	r0, r4
 8013252:	462b      	mov	r3, r5
 8013254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013258:	4718      	bx	r3
 801325a:	bd70      	pop	{r4, r5, r6, pc}

0801325c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801325c:	b538      	push	{r3, r4, r5, lr}
 801325e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8013262:	4604      	mov	r4, r0
 8013264:	460d      	mov	r5, r1
 8013266:	428b      	cmp	r3, r1
 8013268:	d006      	beq.n	8013278 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801326a:	6803      	ldr	r3, [r0, #0]
 801326c:	b929      	cbnz	r1, 801327a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801326e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013272:	4798      	blx	r3
 8013274:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8013278:	bd38      	pop	{r3, r4, r5, pc}
 801327a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801327e:	e7f8      	b.n	8013272 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013280 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013280:	4b0d      	ldr	r3, [pc, #52]	@ (80132b8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013282:	b510      	push	{r4, lr}
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	4604      	mov	r4, r0
 8013288:	b95b      	cbnz	r3, 80132a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801328a:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801328e:	2b02      	cmp	r3, #2
 8013290:	d007      	beq.n	80132a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013292:	6840      	ldr	r0, [r0, #4]
 8013294:	f000 f90e 	bl	80134b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013298:	b118      	cbz	r0, 80132a2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801329a:	6862      	ldr	r2, [r4, #4]
 801329c:	7a53      	ldrb	r3, [r2, #9]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d0fc      	beq.n	801329c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80132a2:	f7fd fb3f 	bl	8010924 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80132a6:	4620      	mov	r0, r4
 80132a8:	2100      	movs	r1, #0
 80132aa:	f7ff ffd7 	bl	801325c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80132ae:	4620      	mov	r0, r4
 80132b0:	f7ff fd8c 	bl	8012dcc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop
 80132b8:	2401b546 	.word	0x2401b546

080132bc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80132bc:	4770      	bx	lr

080132be <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80132be:	2000      	movs	r0, #0
 80132c0:	4770      	bx	lr

080132c2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80132c2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80132c6:	1a13      	subs	r3, r2, r0
 80132c8:	4258      	negs	r0, r3
 80132ca:	4158      	adcs	r0, r3
 80132cc:	4770      	bx	lr

080132ce <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80132ce:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80132d2:	1a9b      	subs	r3, r3, r2
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	bfdc      	itt	le
 80132d8:	6882      	ldrle	r2, [r0, #8]
 80132da:	189b      	addle	r3, r3, r2
 80132dc:	2b01      	cmp	r3, #1
 80132de:	bfcc      	ite	gt
 80132e0:	2000      	movgt	r0, #0
 80132e2:	2001      	movle	r0, #1
 80132e4:	4770      	bx	lr

080132e6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80132e6:	6902      	ldr	r2, [r0, #16]
 80132e8:	6843      	ldr	r3, [r0, #4]
 80132ea:	2024      	movs	r0, #36	@ 0x24
 80132ec:	fb00 3002 	mla	r0, r0, r2, r3
 80132f0:	4770      	bx	lr

080132f2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80132f2:	6803      	ldr	r3, [r0, #0]
 80132f4:	691b      	ldr	r3, [r3, #16]
 80132f6:	4718      	bx	r3

080132f8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80132f8:	2301      	movs	r3, #1
 80132fa:	b570      	push	{r4, r5, r6, lr}
 80132fc:	7203      	strb	r3, [r0, #8]
 80132fe:	4604      	mov	r4, r0
 8013300:	6840      	ldr	r0, [r0, #4]
 8013302:	6803      	ldr	r3, [r0, #0]
 8013304:	699b      	ldr	r3, [r3, #24]
 8013306:	4798      	blx	r3
 8013308:	6803      	ldr	r3, [r0, #0]
 801330a:	4605      	mov	r5, r0
 801330c:	2b40      	cmp	r3, #64	@ 0x40
 801330e:	d00c      	beq.n	801332a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013310:	d810      	bhi.n	8013334 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013312:	2b04      	cmp	r3, #4
 8013314:	d01d      	beq.n	8013352 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013316:	d804      	bhi.n	8013322 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013318:	2b01      	cmp	r3, #1
 801331a:	d006      	beq.n	801332a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801331c:	2b02      	cmp	r3, #2
 801331e:	d02c      	beq.n	801337a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013320:	bd70      	pop	{r4, r5, r6, pc}
 8013322:	2b08      	cmp	r3, #8
 8013324:	d01d      	beq.n	8013362 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013326:	2b20      	cmp	r3, #32
 8013328:	d1fa      	bne.n	8013320 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801332a:	6823      	ldr	r3, [r4, #0]
 801332c:	4620      	mov	r0, r4
 801332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013330:	4798      	blx	r3
 8013332:	e013      	b.n	801335c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013338:	d0f7      	beq.n	801332a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801333a:	d804      	bhi.n	8013346 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801333c:	2b80      	cmp	r3, #128	@ 0x80
 801333e:	d0f4      	beq.n	801332a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013344:	e7f0      	b.n	8013328 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801334a:	d0ee      	beq.n	801332a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801334c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013350:	e7e5      	b.n	801331e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013352:	6823      	ldr	r3, [r4, #0]
 8013354:	7f01      	ldrb	r1, [r0, #28]
 8013356:	4620      	mov	r0, r4
 8013358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801335a:	4798      	blx	r3
 801335c:	6823      	ldr	r3, [r4, #0]
 801335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013360:	e006      	b.n	8013370 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	7f01      	ldrb	r1, [r0, #28]
 8013366:	4620      	mov	r0, r4
 8013368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801336a:	4798      	blx	r3
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013370:	4629      	mov	r1, r5
 8013372:	4620      	mov	r0, r4
 8013374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013378:	4718      	bx	r3
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	4620      	mov	r0, r4
 801337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013380:	4798      	blx	r3
 8013382:	e7f3      	b.n	801336c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013384 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013384:	4770      	bx	lr

08013386 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013386:	4770      	bx	lr

08013388 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013388:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801338c:	b510      	push	{r4, lr}
 801338e:	1ad2      	subs	r2, r2, r3
 8013390:	2a00      	cmp	r2, #0
 8013392:	bfdc      	itt	le
 8013394:	6884      	ldrle	r4, [r0, #8]
 8013396:	1912      	addle	r2, r2, r4
 8013398:	2a01      	cmp	r2, #1
 801339a:	dd16      	ble.n	80133ca <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801339c:	6842      	ldr	r2, [r0, #4]
 801339e:	2424      	movs	r4, #36	@ 0x24
 80133a0:	fb04 2303 	mla	r3, r4, r3, r2
 80133a4:	f101 0220 	add.w	r2, r1, #32
 80133a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80133ac:	4291      	cmp	r1, r2
 80133ae:	f843 4b04 	str.w	r4, [r3], #4
 80133b2:	d1f9      	bne.n	80133a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80133b4:	780a      	ldrb	r2, [r1, #0]
 80133b6:	701a      	strb	r2, [r3, #0]
 80133b8:	68c3      	ldr	r3, [r0, #12]
 80133ba:	6882      	ldr	r2, [r0, #8]
 80133bc:	f3bf 8f5b 	dmb	ish
 80133c0:	3301      	adds	r3, #1
 80133c2:	429a      	cmp	r2, r3
 80133c4:	bfd8      	it	le
 80133c6:	1a9b      	suble	r3, r3, r2
 80133c8:	60c3      	str	r3, [r0, #12]
 80133ca:	bd10      	pop	{r4, pc}

080133cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80133cc:	6903      	ldr	r3, [r0, #16]
 80133ce:	6882      	ldr	r2, [r0, #8]
 80133d0:	f3bf 8f5b 	dmb	ish
 80133d4:	3301      	adds	r3, #1
 80133d6:	429a      	cmp	r2, r3
 80133d8:	bfd8      	it	le
 80133da:	1a9b      	suble	r3, r3, r2
 80133dc:	6103      	str	r3, [r0, #16]
 80133de:	4770      	bx	lr

080133e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80133e0:	b570      	push	{r4, r5, r6, lr}
 80133e2:	4604      	mov	r4, r0
 80133e4:	460e      	mov	r6, r1
 80133e6:	6860      	ldr	r0, [r4, #4]
 80133e8:	6803      	ldr	r3, [r0, #0]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	4798      	blx	r3
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d1f9      	bne.n	80133e6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80133f2:	4d0d      	ldr	r5, [pc, #52]	@ (8013428 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80133f4:	6828      	ldr	r0, [r5, #0]
 80133f6:	6803      	ldr	r3, [r0, #0]
 80133f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80133fa:	4798      	blx	r3
 80133fc:	f7fd faac 	bl	8010958 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013400:	6828      	ldr	r0, [r5, #0]
 8013402:	2101      	movs	r1, #1
 8013404:	f7ff ff2a 	bl	801325c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013408:	6860      	ldr	r0, [r4, #4]
 801340a:	4631      	mov	r1, r6
 801340c:	6803      	ldr	r3, [r0, #0]
 801340e:	689b      	ldr	r3, [r3, #8]
 8013410:	4798      	blx	r3
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	4620      	mov	r0, r4
 8013416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013418:	4798      	blx	r3
 801341a:	6828      	ldr	r0, [r5, #0]
 801341c:	6803      	ldr	r3, [r0, #0]
 801341e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013424:	4718      	bx	r3
 8013426:	bf00      	nop
 8013428:	2401b548 	.word	0x2401b548

0801342c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801342c:	b508      	push	{r3, lr}
 801342e:	f7fd fa79 	bl	8010924 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013436:	f7fd ba83 	b.w	8010940 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801343a <_ZN8touchgfx13DMA_Interface5startEv>:
 801343a:	b510      	push	{r4, lr}
 801343c:	4604      	mov	r4, r0
 801343e:	6840      	ldr	r0, [r0, #4]
 8013440:	6803      	ldr	r3, [r0, #0]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4798      	blx	r3
 8013446:	b948      	cbnz	r0, 801345c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013448:	7a63      	ldrb	r3, [r4, #9]
 801344a:	b13b      	cbz	r3, 801345c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801344c:	7a23      	ldrb	r3, [r4, #8]
 801344e:	b92b      	cbnz	r3, 801345c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013450:	6823      	ldr	r3, [r4, #0]
 8013452:	4620      	mov	r0, r4
 8013454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801345a:	4718      	bx	r3
 801345c:	bd10      	pop	{r4, pc}

0801345e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	6840      	ldr	r0, [r0, #4]
 8013464:	6803      	ldr	r3, [r0, #0]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4798      	blx	r3
 801346a:	4605      	mov	r5, r0
 801346c:	b930      	cbnz	r0, 801347c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801346e:	7a23      	ldrb	r3, [r4, #8]
 8013470:	b123      	cbz	r3, 801347c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013472:	6860      	ldr	r0, [r4, #4]
 8013474:	6803      	ldr	r3, [r0, #0]
 8013476:	695b      	ldr	r3, [r3, #20]
 8013478:	4798      	blx	r3
 801347a:	7225      	strb	r5, [r4, #8]
 801347c:	6860      	ldr	r0, [r4, #4]
 801347e:	6803      	ldr	r3, [r0, #0]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4798      	blx	r3
 8013484:	b928      	cbnz	r0, 8013492 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013486:	6823      	ldr	r3, [r4, #0]
 8013488:	4620      	mov	r0, r4
 801348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801348c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013490:	4718      	bx	r3
 8013492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013496:	f7fd ba6b 	b.w	8010970 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801349c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801349c:	b510      	push	{r4, lr}
 801349e:	6082      	str	r2, [r0, #8]
 80134a0:	2200      	movs	r2, #0
 80134a2:	4c03      	ldr	r4, [pc, #12]	@ (80134b0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80134a4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80134a8:	e9c0 4100 	strd	r4, r1, [r0]
 80134ac:	bd10      	pop	{r4, pc}
 80134ae:	bf00      	nop
 80134b0:	08022e4c 	.word	0x08022e4c

080134b4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80134b4:	6840      	ldr	r0, [r0, #4]
 80134b6:	6803      	ldr	r3, [r0, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	4718      	bx	r3

080134bc <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80134bc:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80134c0:	4770      	bx	lr

080134c2 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80134c2:	b510      	push	{r4, lr}
 80134c4:	4604      	mov	r4, r0
 80134c6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80134c8:	b150      	cbz	r0, 80134e0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80134ca:	6803      	ldr	r3, [r0, #0]
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	4798      	blx	r3
 80134d0:	b130      	cbz	r0, 80134e0 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80134d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80134d4:	4621      	mov	r1, r4
 80134d6:	6803      	ldr	r3, [r0, #0]
 80134d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134dc:	689b      	ldr	r3, [r3, #8]
 80134de:	4718      	bx	r3
 80134e0:	bd10      	pop	{r4, pc}

080134e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80134e2:	790b      	ldrb	r3, [r1, #4]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	bf0c      	ite	eq
 80134e8:	2301      	moveq	r3, #1
 80134ea:	2300      	movne	r3, #0
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	4604      	mov	r4, r0
 80134f0:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80134f4:	460e      	mov	r6, r1
 80134f6:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80134fa:	d109      	bne.n	8013510 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80134fc:	b14d      	cbz	r5, 8013512 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80134fe:	7933      	ldrb	r3, [r6, #4]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d10c      	bne.n	801351e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013504:	6823      	ldr	r3, [r4, #0]
 8013506:	4620      	mov	r0, r4
 8013508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801350a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801350e:	4718      	bx	r3
 8013510:	b12d      	cbz	r5, 801351e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	4620      	mov	r0, r4
 8013516:	695b      	ldr	r3, [r3, #20]
 8013518:	4798      	blx	r3
 801351a:	2d00      	cmp	r5, #0
 801351c:	d1ef      	bne.n	80134fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801351e:	bd70      	pop	{r4, r5, r6, pc}

08013520 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8013520:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8013524:	b133      	cbz	r3, 8013534 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8013526:	790b      	ldrb	r3, [r1, #4]
 8013528:	2b01      	cmp	r3, #1
 801352a:	bf01      	itttt	eq
 801352c:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 801352e:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8013530:	8603      	strheq	r3, [r0, #48]	@ 0x30
 8013532:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 8013534:	f7ff bfd5 	b.w	80134e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08013538 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013538:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 801353c:	b12a      	cbz	r2, 801354a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801353e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013542:	b112      	cbz	r2, 801354a <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013544:	6803      	ldr	r3, [r0, #0]
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	4718      	bx	r3
 801354a:	4770      	bx	lr

0801354c <_ZN8touchgfx12ToggleButton10forceStateEb>:
 801354c:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 801354e:	b129      	cbz	r1, 801355c <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 8013550:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 8013552:	429a      	cmp	r2, r3
 8013554:	d007      	beq.n	8013566 <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 8013556:	8602      	strh	r2, [r0, #48]	@ 0x30
 8013558:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 801355a:	4770      	bx	lr
 801355c:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 801355e:	429a      	cmp	r2, r3
 8013560:	bf1c      	itt	ne
 8013562:	85c2      	strhne	r2, [r0, #46]	@ 0x2e
 8013564:	8603      	strhne	r3, [r0, #48]	@ 0x30
 8013566:	4770      	bx	lr

08013568 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013568:	2300      	movs	r3, #0
 801356a:	8083      	strh	r3, [r0, #4]
 801356c:	80c3      	strh	r3, [r0, #6]
 801356e:	8003      	strh	r3, [r0, #0]
 8013570:	8043      	strh	r3, [r0, #2]
 8013572:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8013576:	2bff      	cmp	r3, #255	@ 0xff
 8013578:	bf01      	itttt	eq
 801357a:	890b      	ldrheq	r3, [r1, #8]
 801357c:	8083      	strheq	r3, [r0, #4]
 801357e:	894b      	ldrheq	r3, [r1, #10]
 8013580:	80c3      	strheq	r3, [r0, #6]
 8013582:	4770      	bx	lr

08013584 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013586:	4604      	mov	r4, r0
 8013588:	466b      	mov	r3, sp
 801358a:	6808      	ldr	r0, [r1, #0]
 801358c:	6849      	ldr	r1, [r1, #4]
 801358e:	c303      	stmia	r3!, {r0, r1}
 8013590:	6823      	ldr	r3, [r4, #0]
 8013592:	4669      	mov	r1, sp
 8013594:	4620      	mov	r0, r4
 8013596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013598:	4798      	blx	r3
 801359a:	4b08      	ldr	r3, [pc, #32]	@ (80135bc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80135a2:	b10a      	cbz	r2, 80135a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80135a4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80135a6:	b900      	cbnz	r0, 80135aa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80135a8:	6898      	ldr	r0, [r3, #8]
 80135aa:	6803      	ldr	r3, [r0, #0]
 80135ac:	4669      	mov	r1, sp
 80135ae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80135b0:	6a1d      	ldr	r5, [r3, #32]
 80135b2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80135b6:	47a8      	blx	r5
 80135b8:	b003      	add	sp, #12
 80135ba:	bd30      	pop	{r4, r5, pc}
 80135bc:	2401b548 	.word	0x2401b548

080135c0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80135c0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80135c4:	b12a      	cbz	r2, 80135d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80135c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80135ca:	b112      	cbz	r2, 80135d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80135cc:	6803      	ldr	r3, [r0, #0]
 80135ce:	695b      	ldr	r3, [r3, #20]
 80135d0:	4718      	bx	r3
 80135d2:	4770      	bx	lr

080135d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	880b      	ldrh	r3, [r1, #0]
 80135d8:	4605      	mov	r5, r0
 80135da:	4604      	mov	r4, r0
 80135dc:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80135de:	8813      	ldrh	r3, [r2, #0]
 80135e0:	f825 3f30 	strh.w	r3, [r5, #48]!
 80135e4:	4628      	mov	r0, r5
 80135e6:	f003 fe79 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80135ea:	4606      	mov	r6, r0
 80135ec:	4628      	mov	r0, r5
 80135ee:	f003 fea9 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80135f2:	6823      	ldr	r3, [r4, #0]
 80135f4:	4605      	mov	r5, r0
 80135f6:	4631      	mov	r1, r6
 80135f8:	4620      	mov	r0, r4
 80135fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135fc:	4798      	blx	r3
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	4629      	mov	r1, r5
 8013602:	4620      	mov	r0, r4
 8013604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801360a:	4718      	bx	r3

0801360c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801360c:	b510      	push	{r4, lr}
 801360e:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8013612:	4604      	mov	r4, r0
 8013614:	2bff      	cmp	r3, #255	@ 0xff
 8013616:	d006      	beq.n	8013626 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013618:	2300      	movs	r3, #0
 801361a:	8003      	strh	r3, [r0, #0]
 801361c:	8043      	strh	r3, [r0, #2]
 801361e:	8083      	strh	r3, [r0, #4]
 8013620:	80c3      	strh	r3, [r0, #6]
 8013622:	4620      	mov	r0, r4
 8013624:	bd10      	pop	{r4, pc}
 8013626:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801362a:	b11b      	cbz	r3, 8013634 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801362c:	3130      	adds	r1, #48	@ 0x30
 801362e:	f003 febd 	bl	80173ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013632:	e7f6      	b.n	8013622 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013634:	312e      	adds	r1, #46	@ 0x2e
 8013636:	e7fa      	b.n	801362e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013638 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801363c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8013640:	b08a      	sub	sp, #40	@ 0x28
 8013642:	4604      	mov	r4, r0
 8013644:	4688      	mov	r8, r1
 8013646:	2b00      	cmp	r3, #0
 8013648:	d066      	beq.n	8013718 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801364a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801364c:	a805      	add	r0, sp, #20
 801364e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013652:	f003 fe43 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013656:	4607      	mov	r7, r0
 8013658:	a805      	add	r0, sp, #20
 801365a:	f003 fe73 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801365e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013662:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013666:	2300      	movs	r3, #0
 8013668:	4432      	add	r2, r6
 801366a:	9306      	str	r3, [sp, #24]
 801366c:	b292      	uxth	r2, r2
 801366e:	fa0f fc82 	sxth.w	ip, r2
 8013672:	459c      	cmp	ip, r3
 8013674:	dd52      	ble.n	801371c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013676:	42b7      	cmp	r7, r6
 8013678:	dd50      	ble.n	801371c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801367a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801367e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013682:	442b      	add	r3, r5
 8013684:	b29b      	uxth	r3, r3
 8013686:	b219      	sxth	r1, r3
 8013688:	2900      	cmp	r1, #0
 801368a:	dd47      	ble.n	801371c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801368c:	42a8      	cmp	r0, r5
 801368e:	dd45      	ble.n	801371c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013690:	4567      	cmp	r7, ip
 8013692:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013696:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801369a:	bfb8      	it	lt
 801369c:	b2ba      	uxthlt	r2, r7
 801369e:	4288      	cmp	r0, r1
 80136a0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80136a4:	bfb8      	it	lt
 80136a6:	b283      	uxthlt	r3, r0
 80136a8:	1b92      	subs	r2, r2, r6
 80136aa:	f8ad 501a 	strh.w	r5, [sp, #26]
 80136ae:	1b5b      	subs	r3, r3, r5
 80136b0:	f8ad 201c 	strh.w	r2, [sp, #28]
 80136b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80136b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80136bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d026      	beq.n	8013712 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80136c4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	dd22      	ble.n	8013712 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80136cc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	dd1e      	ble.n	8013712 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80136d4:	2300      	movs	r3, #0
 80136d6:	a908      	add	r1, sp, #32
 80136d8:	4620      	mov	r0, r4
 80136da:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80136de:	6823      	ldr	r3, [r4, #0]
 80136e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136e2:	4798      	blx	r3
 80136e4:	4b0f      	ldr	r3, [pc, #60]	@ (8013724 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80136ec:	b10a      	cbz	r2, 80136f2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80136ee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80136f0:	b900      	cbnz	r0, 80136f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80136f2:	6898      	ldr	r0, [r3, #8]
 80136f4:	2501      	movs	r5, #1
 80136f6:	6801      	ldr	r1, [r0, #0]
 80136f8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80136fc:	9502      	str	r5, [sp, #8]
 80136fe:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013702:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013706:	9401      	str	r4, [sp, #4]
 8013708:	ac06      	add	r4, sp, #24
 801370a:	9400      	str	r4, [sp, #0]
 801370c:	688c      	ldr	r4, [r1, #8]
 801370e:	a905      	add	r1, sp, #20
 8013710:	47a0      	blx	r4
 8013712:	b00a      	add	sp, #40	@ 0x28
 8013714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013718:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801371a:	e797      	b.n	801364c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801371c:	2300      	movs	r3, #0
 801371e:	9307      	str	r3, [sp, #28]
 8013720:	e7ca      	b.n	80136b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013722:	bf00      	nop
 8013724:	2401b548 	.word	0x2401b548

08013728 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	880b      	ldrh	r3, [r1, #0]
 801372c:	460d      	mov	r5, r1
 801372e:	4604      	mov	r4, r0
 8013730:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8013732:	4608      	mov	r0, r1
 8013734:	f003 fdd2 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013738:	4606      	mov	r6, r0
 801373a:	4628      	mov	r0, r5
 801373c:	f003 fe02 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013740:	6823      	ldr	r3, [r4, #0]
 8013742:	4605      	mov	r5, r0
 8013744:	4631      	mov	r1, r6
 8013746:	4620      	mov	r0, r4
 8013748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801374a:	4798      	blx	r3
 801374c:	6823      	ldr	r3, [r4, #0]
 801374e:	4629      	mov	r1, r5
 8013750:	4620      	mov	r0, r4
 8013752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013758:	4718      	bx	r3

0801375a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801375a:	b510      	push	{r4, lr}
 801375c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8013760:	4604      	mov	r4, r0
 8013762:	2bff      	cmp	r3, #255	@ 0xff
 8013764:	d006      	beq.n	8013774 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013766:	2300      	movs	r3, #0
 8013768:	8003      	strh	r3, [r0, #0]
 801376a:	8043      	strh	r3, [r0, #2]
 801376c:	8083      	strh	r3, [r0, #4]
 801376e:	80c3      	strh	r3, [r0, #6]
 8013770:	4620      	mov	r0, r4
 8013772:	bd10      	pop	{r4, pc}
 8013774:	3126      	adds	r1, #38	@ 0x26
 8013776:	f003 fe19 	bl	80173ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801377a:	e7f9      	b.n	8013770 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801377c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801377c:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8013780:	b12a      	cbz	r2, 801378e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013782:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013786:	b112      	cbz	r2, 801378e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013788:	6803      	ldr	r3, [r0, #0]
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	4718      	bx	r3
 801378e:	4770      	bx	lr

08013790 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013794:	4604      	mov	r4, r0
 8013796:	b088      	sub	sp, #32
 8013798:	2500      	movs	r5, #0
 801379a:	460f      	mov	r7, r1
 801379c:	f854 3b26 	ldr.w	r3, [r4], #38
 80137a0:	a904      	add	r1, sp, #16
 80137a2:	4606      	mov	r6, r0
 80137a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80137aa:	4798      	blx	r3
 80137ac:	4620      	mov	r0, r4
 80137ae:	f003 fd95 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80137b2:	4680      	mov	r8, r0
 80137b4:	4620      	mov	r0, r4
 80137b6:	f003 fdc5 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80137ba:	9506      	str	r5, [sp, #24]
 80137bc:	ad06      	add	r5, sp, #24
 80137be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80137c2:	4639      	mov	r1, r7
 80137c4:	f8ad 801c 	strh.w	r8, [sp, #28]
 80137c8:	4628      	mov	r0, r5
 80137ca:	f7fe fe75 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 80137ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	dd19      	ble.n	801380a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80137d6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	dd15      	ble.n	801380a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80137de:	4b0c      	ldr	r3, [pc, #48]	@ (8013810 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80137e6:	b10a      	cbz	r2, 80137ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80137e8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80137ea:	b900      	cbnz	r0, 80137ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80137ec:	6898      	ldr	r0, [r3, #8]
 80137ee:	2701      	movs	r7, #1
 80137f0:	6801      	ldr	r1, [r0, #0]
 80137f2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80137f6:	9702      	str	r7, [sp, #8]
 80137f8:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80137fc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013800:	e9cd 5600 	strd	r5, r6, [sp]
 8013804:	688d      	ldr	r5, [r1, #8]
 8013806:	4621      	mov	r1, r4
 8013808:	47a8      	blx	r5
 801380a:	b008      	add	sp, #32
 801380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013810:	2401b548 	.word	0x2401b548

08013814 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013814:	b510      	push	{r4, lr}
 8013816:	6803      	ldr	r3, [r0, #0]
 8013818:	460c      	mov	r4, r1
 801381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801381c:	4798      	blx	r3
 801381e:	1b03      	subs	r3, r0, r4
 8013820:	4258      	negs	r0, r3
 8013822:	4158      	adcs	r0, r3
 8013824:	bd10      	pop	{r4, pc}
	...

08013828 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013828:	4b01      	ldr	r3, [pc, #4]	@ (8013830 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801382a:	6019      	str	r1, [r3, #0]
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	2401b550 	.word	0x2401b550

08013834 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013838:	4696      	mov	lr, r2
 801383a:	b097      	sub	sp, #92	@ 0x5c
 801383c:	4605      	mov	r5, r0
 801383e:	4614      	mov	r4, r2
 8013840:	460e      	mov	r6, r1
 8013842:	461f      	mov	r7, r3
 8013844:	f10d 0c1c 	add.w	ip, sp, #28
 8013848:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801384c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8013850:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8013854:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013858:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801385c:	f8de 3000 	ldr.w	r3, [lr]
 8013860:	f104 0e14 	add.w	lr, r4, #20
 8013864:	f8cc 3000 	str.w	r3, [ip]
 8013868:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801386c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013874:	f8de 3000 	ldr.w	r3, [lr]
 8013878:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801387c:	f8cc 3000 	str.w	r3, [ip]
 8013880:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8013884:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013888:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801388c:	f8de 3000 	ldr.w	r3, [lr]
 8013890:	4631      	mov	r1, r6
 8013892:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013894:	4628      	mov	r0, r5
 8013896:	f8cc 3000 	str.w	r3, [ip]
 801389a:	682b      	ldr	r3, [r5, #0]
 801389c:	9201      	str	r2, [sp, #4]
 801389e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80138a0:	f8cd 8008 	str.w	r8, [sp, #8]
 80138a4:	9200      	str	r2, [sp, #0]
 80138a6:	aa07      	add	r2, sp, #28
 80138a8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80138ac:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80138b0:	463b      	mov	r3, r7
 80138b2:	47d8      	blx	fp
 80138b4:	46a6      	mov	lr, r4
 80138b6:	f10d 0c1c 	add.w	ip, sp, #28
 80138ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138c2:	f8de 3000 	ldr.w	r3, [lr]
 80138c6:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80138ca:	343c      	adds	r4, #60	@ 0x3c
 80138cc:	f8cc 3000 	str.w	r3, [ip]
 80138d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80138d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80138d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138dc:	f8de 3000 	ldr.w	r3, [lr]
 80138e0:	f8cc 3000 	str.w	r3, [ip]
 80138e4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80138e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	4631      	mov	r1, r6
 80138f2:	4628      	mov	r0, r5
 80138f4:	f8cc 3000 	str.w	r3, [ip]
 80138f8:	682b      	ldr	r3, [r5, #0]
 80138fa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80138fe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013900:	f8cd 8008 	str.w	r8, [sp, #8]
 8013904:	9201      	str	r2, [sp, #4]
 8013906:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013908:	9200      	str	r2, [sp, #0]
 801390a:	aa07      	add	r2, sp, #28
 801390c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801390e:	463b      	mov	r3, r7
 8013910:	47a0      	blx	r4
 8013912:	b017      	add	sp, #92	@ 0x5c
 8013914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013918 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8013918:	2000      	movs	r0, #0
 801391a:	4770      	bx	lr

0801391c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013920:	b08d      	sub	sp, #52	@ 0x34
 8013922:	4688      	mov	r8, r1
 8013924:	f8d3 c000 	ldr.w	ip, [r3]
 8013928:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801392a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801392e:	680f      	ldr	r7, [r1, #0]
 8013930:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8013934:	eba7 070c 	sub.w	r7, r7, ip
 8013938:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801393c:	edd3 6a07 	vldr	s13, [r3, #28]
 8013940:	42bc      	cmp	r4, r7
 8013942:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013944:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8013948:	bfa8      	it	ge
 801394a:	463c      	movge	r4, r7
 801394c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8013950:	f9ba 1000 	ldrsh.w	r1, [sl]
 8013954:	ee07 4a90 	vmov	s15, r4
 8013958:	eb09 0e0c 	add.w	lr, r9, ip
 801395c:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8013960:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8013964:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8013968:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801396c:	4571      	cmp	r1, lr
 801396e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8013972:	ee65 4a24 	vmul.f32	s9, s10, s9
 8013976:	ee25 5a27 	vmul.f32	s10, s10, s15
 801397a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801397e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8013982:	ee32 1a05 	vadd.f32	s2, s4, s10
 8013986:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801398a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801398e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8013992:	ee22 2a07 	vmul.f32	s4, s4, s14
 8013996:	f340 808c 	ble.w	8013ab2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801399a:	eba1 060e 	sub.w	r6, r1, lr
 801399e:	fb96 f5f4 	sdiv	r5, r6, r4
 80139a2:	ee07 5a10 	vmov	s14, r5
 80139a6:	2d00      	cmp	r5, #0
 80139a8:	fb04 6615 	mls	r6, r4, r5, r6
 80139ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139b0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80139b4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80139b8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80139bc:	dd12      	ble.n	80139e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80139be:	ee70 6a44 	vsub.f32	s13, s0, s8
 80139c2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80139c6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80139ca:	eef5 6a40 	vcmp.f32	s13, #0.0
 80139ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d2:	bf14      	ite	ne
 80139d4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80139d8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80139dc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80139e0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80139e4:	fb05 f204 	mul.w	r2, r5, r4
 80139e8:	1abf      	subs	r7, r7, r2
 80139ea:	4494      	add	ip, r2
 80139ec:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80139f0:	4411      	add	r1, r2
 80139f2:	eb09 020c 	add.w	r2, r9, ip
 80139f6:	b209      	sxth	r1, r1
 80139f8:	443a      	add	r2, r7
 80139fa:	428a      	cmp	r2, r1
 80139fc:	bfc4      	itt	gt
 80139fe:	eba1 0209 	subgt.w	r2, r1, r9
 8013a02:	eba2 070c 	subgt.w	r7, r2, ip
 8013a06:	2f00      	cmp	r7, #0
 8013a08:	dd50      	ble.n	8013aac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8013a0a:	fb97 f1f4 	sdiv	r1, r7, r4
 8013a0e:	fb04 7211 	mls	r2, r4, r1, r7
 8013a12:	b90a      	cbnz	r2, 8013a18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8013a14:	3901      	subs	r1, #1
 8013a16:	4622      	mov	r2, r4
 8013a18:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8013a1c:	6840      	ldr	r0, [r0, #4]
 8013a1e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8013a22:	44b6      	add	lr, r6
 8013a24:	f8d0 a000 	ldr.w	sl, [r0]
 8013a28:	2900      	cmp	r1, #0
 8013a2a:	bfcc      	ite	gt
 8013a2c:	46a1      	movgt	r9, r4
 8013a2e:	4691      	movle	r9, r2
 8013a30:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013a32:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013a34:	fb04 e505 	mla	r5, r4, r5, lr
 8013a38:	eef0 6a42 	vmov.f32	s13, s4
 8013a3c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013a40:	9008      	str	r0, [sp, #32]
 8013a42:	eeb0 7a61 	vmov.f32	s14, s3
 8013a46:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8013a48:	695b      	ldr	r3, [r3, #20]
 8013a4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013a4e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8013a52:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8013a56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013a58:	445b      	add	r3, fp
 8013a5a:	9307      	str	r3, [sp, #28]
 8013a5c:	ee16 3a90 	vmov	r3, s13
 8013a60:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8013a64:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8013a68:	ee21 3a23 	vmul.f32	s6, s2, s7
 8013a6c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8013a70:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013a74:	ee17 7a90 	vmov	r7, s15
 8013a78:	ee73 7a42 	vsub.f32	s15, s6, s4
 8013a7c:	fb97 f7f4 	sdiv	r7, r7, r4
 8013a80:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8013a84:	ee17 ca90 	vmov	ip, s15
 8013a88:	fb9c fcf4 	sdiv	ip, ip, r4
 8013a8c:	fb0c 3306 	mla	r3, ip, r6, r3
 8013a90:	9302      	str	r3, [sp, #8]
 8013a92:	ee17 3a10 	vmov	r3, s14
 8013a96:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8013a9a:	fb07 3706 	mla	r7, r7, r6, r3
 8013a9e:	eba9 0306 	sub.w	r3, r9, r6
 8013aa2:	e9cd 4700 	strd	r4, r7, [sp]
 8013aa6:	f8da 4008 	ldr.w	r4, [sl, #8]
 8013aaa:	47a0      	blx	r4
 8013aac:	b00d      	add	sp, #52	@ 0x34
 8013aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab2:	2500      	movs	r5, #0
 8013ab4:	462e      	mov	r6, r5
 8013ab6:	e799      	b.n	80139ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08013ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	b0db      	sub	sp, #364	@ 0x16c
 8013abe:	461d      	mov	r5, r3
 8013ac0:	4614      	mov	r4, r2
 8013ac2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8013ac6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013ac8:	4629      	mov	r1, r5
 8013aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8013acc:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8013ad0:	9009      	str	r0, [sp, #36]	@ 0x24
 8013ad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ad4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8013ad8:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8013adc:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ade:	6803      	ldr	r3, [r0, #0]
 8013ae0:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8013ae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8013ae6:	47b8      	blx	r7
 8013ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aea:	6058      	str	r0, [r3, #4]
 8013aec:	2800      	cmp	r0, #0
 8013aee:	f000 83a1 	beq.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013af2:	682b      	ldr	r3, [r5, #0]
 8013af4:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8013af8:	ed94 7a02 	vldr	s14, [r4, #8]
 8013afc:	9314      	str	r3, [sp, #80]	@ 0x50
 8013afe:	686b      	ldr	r3, [r5, #4]
 8013b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b04:	9315      	str	r3, [sp, #84]	@ 0x54
 8013b06:	4bc1      	ldr	r3, [pc, #772]	@ (8013e0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8013b08:	7819      	ldrb	r1, [r3, #0]
 8013b0a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8013b0e:	2900      	cmp	r1, #0
 8013b10:	bf16      	itet	ne
 8013b12:	4619      	movne	r1, r3
 8013b14:	4611      	moveq	r1, r2
 8013b16:	4613      	movne	r3, r2
 8013b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1c:	9116      	str	r1, [sp, #88]	@ 0x58
 8013b1e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8013b22:	f240 8387 	bls.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b26:	ed94 7a07 	vldr	s14, [r4, #28]
 8013b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b32:	f240 837f 	bls.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b36:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8013b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b42:	f240 8377 	bls.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b46:	6822      	ldr	r2, [r4, #0]
 8013b48:	4bb1      	ldr	r3, [pc, #708]	@ (8013e10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	f2c0 8372 	blt.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b50:	49b0      	ldr	r1, [pc, #704]	@ (8013e14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8013b52:	6963      	ldr	r3, [r4, #20]
 8013b54:	428a      	cmp	r2, r1
 8013b56:	f300 836d 	bgt.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b5a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013b5e:	48ae      	ldr	r0, [pc, #696]	@ (8013e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013b60:	33ff      	adds	r3, #255	@ 0xff
 8013b62:	4283      	cmp	r3, r0
 8013b64:	f200 8366 	bhi.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013b6a:	4dac      	ldr	r5, [pc, #688]	@ (8013e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013b6c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013b70:	33ff      	adds	r3, #255	@ 0xff
 8013b72:	42ab      	cmp	r3, r5
 8013b74:	f200 835e 	bhi.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b78:	6862      	ldr	r2, [r4, #4]
 8013b7a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8013b7e:	33ff      	adds	r3, #255	@ 0xff
 8013b80:	4283      	cmp	r3, r0
 8013b82:	f200 8357 	bhi.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b86:	69a1      	ldr	r1, [r4, #24]
 8013b88:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8013b8c:	33ff      	adds	r3, #255	@ 0xff
 8013b8e:	4283      	cmp	r3, r0
 8013b90:	f200 8350 	bhi.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013b94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8013b96:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8013b9a:	30ff      	adds	r0, #255	@ 0xff
 8013b9c:	42a8      	cmp	r0, r5
 8013b9e:	f200 8349 	bhi.w	8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013ba2:	428a      	cmp	r2, r1
 8013ba4:	f280 8110 	bge.w	8013dc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	f300 8119 	bgt.w	8013de0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013bae:	4299      	cmp	r1, r3
 8013bb0:	f280 811d 	bge.w	8013dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8013bb4:	2502      	movs	r5, #2
 8013bb6:	2701      	movs	r7, #1
 8013bb8:	46a9      	mov	r9, r5
 8013bba:	46b8      	mov	r8, r7
 8013bbc:	f04f 0a00 	mov.w	sl, #0
 8013bc0:	4621      	mov	r1, r4
 8013bc2:	a849      	add	r0, sp, #292	@ 0x124
 8013bc4:	f003 f806 	bl	8016bd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8013bc8:	4622      	mov	r2, r4
 8013bca:	4653      	mov	r3, sl
 8013bcc:	a949      	add	r1, sp, #292	@ 0x124
 8013bce:	f8cd 9000 	str.w	r9, [sp]
 8013bd2:	a819      	add	r0, sp, #100	@ 0x64
 8013bd4:	f003 f92e 	bl	8016e34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013bd8:	4622      	mov	r2, r4
 8013bda:	4653      	mov	r3, sl
 8013bdc:	a949      	add	r1, sp, #292	@ 0x124
 8013bde:	f8cd 8000 	str.w	r8, [sp]
 8013be2:	a829      	add	r0, sp, #164	@ 0xa4
 8013be4:	f003 f926 	bl	8016e34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013be8:	4643      	mov	r3, r8
 8013bea:	4622      	mov	r2, r4
 8013bec:	a949      	add	r1, sp, #292	@ 0x124
 8013bee:	f8cd 9000 	str.w	r9, [sp]
 8013bf2:	a839      	add	r0, sp, #228	@ 0xe4
 8013bf4:	f003 f91e 	bl	8016e34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013bf8:	42af      	cmp	r7, r5
 8013bfa:	af12      	add	r7, sp, #72	@ 0x48
 8013bfc:	bfb7      	itett	lt
 8013bfe:	2300      	movlt	r3, #0
 8013c00:	2301      	movge	r3, #1
 8013c02:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8013c04:	ac19      	addlt	r4, sp, #100	@ 0x64
 8013c06:	bfb1      	iteee	lt
 8013c08:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8013c0a:	ad19      	addge	r5, sp, #100	@ 0x64
 8013c0c:	930e      	strge	r3, [sp, #56]	@ 0x38
 8013c0e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8013c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013c12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013c16:	e887 0003 	stmia.w	r7, {r0, r1}
 8013c1a:	b928      	cbnz	r0, 8013c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8013c1c:	4b80      	ldr	r3, [pc, #512]	@ (8013e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8013c1e:	6818      	ldr	r0, [r3, #0]
 8013c20:	6803      	ldr	r3, [r0, #0]
 8013c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c24:	4798      	blx	r3
 8013c26:	6038      	str	r0, [r7, #0]
 8013c28:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013c2a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013c2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013c32:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8013c34:	930c      	str	r3, [sp, #48]	@ 0x30
 8013c36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013c38:	6963      	ldr	r3, [r4, #20]
 8013c3a:	440b      	add	r3, r1
 8013c3c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013c40:	4408      	add	r0, r1
 8013c42:	b200      	sxth	r0, r0
 8013c44:	4283      	cmp	r3, r0
 8013c46:	900d      	str	r0, [sp, #52]	@ 0x34
 8013c48:	f280 80dd 	bge.w	8013e06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013c4c:	428b      	cmp	r3, r1
 8013c4e:	da08      	bge.n	8013c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013c50:	2a00      	cmp	r2, #0
 8013c52:	dd06      	ble.n	8013c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013c54:	1acb      	subs	r3, r1, r3
 8013c56:	429a      	cmp	r2, r3
 8013c58:	f2c0 80e4 	blt.w	8013e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f300 80e2 	bgt.w	8013e26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8013c62:	6967      	ldr	r7, [r4, #20]
 8013c64:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013c68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c6a:	443b      	add	r3, r7
 8013c6c:	461f      	mov	r7, r3
 8013c6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013c70:	1bdf      	subs	r7, r3, r7
 8013c72:	4297      	cmp	r7, r2
 8013c74:	bfa8      	it	ge
 8013c76:	4617      	movge	r7, r2
 8013c78:	2f00      	cmp	r7, #0
 8013c7a:	f340 8166 	ble.w	8013f4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013c7e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013c80:	6829      	ldr	r1, [r5, #0]
 8013c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c86:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013c8a:	4411      	add	r1, r2
 8013c8c:	6820      	ldr	r0, [r4, #0]
 8013c8e:	4299      	cmp	r1, r3
 8013c90:	dd1a      	ble.n	8013cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013c92:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013c96:	4402      	add	r2, r0
 8013c98:	440b      	add	r3, r1
 8013c9a:	b21b      	sxth	r3, r3
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	dc13      	bgt.n	8013cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013ca0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013ca2:	a912      	add	r1, sp, #72	@ 0x48
 8013ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	9206      	str	r2, [sp, #24]
 8013cac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013cae:	9500      	str	r5, [sp, #0]
 8013cb0:	9205      	str	r2, [sp, #20]
 8013cb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013cb4:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013cb8:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013cba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013cbe:	aa49      	add	r2, sp, #292	@ 0x124
 8013cc0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013cc4:	4623      	mov	r3, r4
 8013cc6:	47c8      	blx	r9
 8013cc8:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013ccc:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013cd0:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8013cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cd8:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013cdc:	68a1      	ldr	r1, [r4, #8]
 8013cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ce2:	ed94 6a08 	vldr	s12, [r4, #32]
 8013ce6:	edd4 6a07 	vldr	s13, [r4, #28]
 8013cea:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013cee:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013cf2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013cfa:	edc4 6a07 	vstr	s13, [r4, #28]
 8013cfe:	441a      	add	r2, r3
 8013d00:	6963      	ldr	r3, [r4, #20]
 8013d02:	3301      	adds	r3, #1
 8013d04:	6022      	str	r2, [r4, #0]
 8013d06:	6163      	str	r3, [r4, #20]
 8013d08:	69a3      	ldr	r3, [r4, #24]
 8013d0a:	3b01      	subs	r3, #1
 8013d0c:	61a3      	str	r3, [r4, #24]
 8013d0e:	6923      	ldr	r3, [r4, #16]
 8013d10:	440b      	add	r3, r1
 8013d12:	68e1      	ldr	r1, [r4, #12]
 8013d14:	428b      	cmp	r3, r1
 8013d16:	6123      	str	r3, [r4, #16]
 8013d18:	db15      	blt.n	8013d46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8013d1a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013d1e:	3201      	adds	r2, #1
 8013d20:	1a5b      	subs	r3, r3, r1
 8013d22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013d26:	6022      	str	r2, [r4, #0]
 8013d28:	6123      	str	r3, [r4, #16]
 8013d2a:	edc4 6a07 	vstr	s13, [r4, #28]
 8013d2e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013d32:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013d36:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013d3a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013d42:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8013d46:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013d4a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013d4e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013d52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d56:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013d5a:	68a9      	ldr	r1, [r5, #8]
 8013d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d60:	ed95 6a08 	vldr	s12, [r5, #32]
 8013d64:	edd5 6a07 	vldr	s13, [r5, #28]
 8013d68:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013d6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013d70:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013d74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013d78:	edc5 6a07 	vstr	s13, [r5, #28]
 8013d7c:	441a      	add	r2, r3
 8013d7e:	696b      	ldr	r3, [r5, #20]
 8013d80:	3301      	adds	r3, #1
 8013d82:	602a      	str	r2, [r5, #0]
 8013d84:	616b      	str	r3, [r5, #20]
 8013d86:	69ab      	ldr	r3, [r5, #24]
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	61ab      	str	r3, [r5, #24]
 8013d8c:	692b      	ldr	r3, [r5, #16]
 8013d8e:	440b      	add	r3, r1
 8013d90:	68e9      	ldr	r1, [r5, #12]
 8013d92:	428b      	cmp	r3, r1
 8013d94:	612b      	str	r3, [r5, #16]
 8013d96:	db15      	blt.n	8013dc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013d98:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8013d9c:	3201      	adds	r2, #1
 8013d9e:	1a5b      	subs	r3, r3, r1
 8013da0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8013da4:	602a      	str	r2, [r5, #0]
 8013da6:	612b      	str	r3, [r5, #16]
 8013da8:	edc5 6a07 	vstr	s13, [r5, #28]
 8013dac:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013db0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8013db4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013db8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8013dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013dc0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8013dc4:	3f01      	subs	r7, #1
 8013dc6:	e757      	b.n	8013c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013dc8:	4299      	cmp	r1, r3
 8013dca:	dc13      	bgt.n	8013df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	da14      	bge.n	8013dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013dd0:	2502      	movs	r5, #2
 8013dd2:	2703      	movs	r7, #3
 8013dd4:	f04f 0800 	mov.w	r8, #0
 8013dd8:	46a9      	mov	r9, r5
 8013dda:	f04f 0a01 	mov.w	sl, #1
 8013dde:	e6ef      	b.n	8013bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013de0:	2501      	movs	r5, #1
 8013de2:	2700      	movs	r7, #0
 8013de4:	46a9      	mov	r9, r5
 8013de6:	46b8      	mov	r8, r7
 8013de8:	f04f 0a02 	mov.w	sl, #2
 8013dec:	e6e8      	b.n	8013bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013dee:	2501      	movs	r5, #1
 8013df0:	2702      	movs	r7, #2
 8013df2:	e6e1      	b.n	8013bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8013df4:	2500      	movs	r5, #0
 8013df6:	2701      	movs	r7, #1
 8013df8:	e7f4      	b.n	8013de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8013dfa:	2702      	movs	r7, #2
 8013dfc:	2503      	movs	r5, #3
 8013dfe:	f04f 0900 	mov.w	r9, #0
 8013e02:	46b8      	mov	r8, r7
 8013e04:	e7e9      	b.n	8013dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8013e06:	4613      	mov	r3, r2
 8013e08:	e728      	b.n	8013c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8013e0a:	bf00      	nop
 8013e0c:	2401b540 	.word	0x2401b540
 8013e10:	fffd8f01 	.word	0xfffd8f01
 8013e14:	00027100 	.word	0x00027100
 8013e18:	0004e1ff 	.word	0x0004e1ff
 8013e1c:	0004e1fe 	.word	0x0004e1fe
 8013e20:	2401b548 	.word	0x2401b548
 8013e24:	4613      	mov	r3, r2
 8013e26:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8013e28:	469e      	mov	lr, r3
 8013e2a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8013e2c:	469c      	mov	ip, r3
 8013e2e:	9111      	str	r1, [sp, #68]	@ 0x44
 8013e30:	f04f 0900 	mov.w	r9, #0
 8013e34:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8013e38:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8013e3c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8013e40:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8013e44:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8013e48:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013e4c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013e50:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8013e54:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8013e58:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8013e5c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013e60:	f1bc 0f00 	cmp.w	ip, #0
 8013e64:	d147      	bne.n	8013ef6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8013e66:	eb03 0c07 	add.w	ip, r3, r7
 8013e6a:	1ad7      	subs	r7, r2, r3
 8013e6c:	f1b9 0f00 	cmp.w	r9, #0
 8013e70:	d009      	beq.n	8013e86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8013e72:	9029      	str	r0, [sp, #164]	@ 0xa4
 8013e74:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8013e78:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8013e7c:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8013e80:	912d      	str	r1, [sp, #180]	@ 0xb4
 8013e82:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8013e86:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013e88:	f04f 0800 	mov.w	r8, #0
 8013e8c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013e90:	9111      	str	r1, [sp, #68]	@ 0x44
 8013e92:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8013e96:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013e9a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013e9e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013ea2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8013ea6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013eaa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013eae:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8013eb2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8013eb6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013eba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013ebe:	f1be 0f00 	cmp.w	lr, #0
 8013ec2:	d031      	beq.n	8013f28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8013ec4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013ec6:	4450      	add	r0, sl
 8013ec8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013ecc:	4431      	add	r1, r6
 8013ece:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013ed2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8013ed6:	4549      	cmp	r1, r9
 8013ed8:	db08      	blt.n	8013eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8013eda:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013ede:	3001      	adds	r0, #1
 8013ee0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013ee4:	eba1 0109 	sub.w	r1, r1, r9
 8013ee8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013eec:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013ef0:	f04f 0801 	mov.w	r8, #1
 8013ef4:	e7e3      	b.n	8013ebe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8013ef6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8013ef8:	4450      	add	r0, sl
 8013efa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013efe:	4431      	add	r1, r6
 8013f00:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013f04:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8013f08:	4541      	cmp	r1, r8
 8013f0a:	db08      	blt.n	8013f1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8013f0c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013f10:	3001      	adds	r0, #1
 8013f12:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013f16:	eba1 0108 	sub.w	r1, r1, r8
 8013f1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013f1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013f22:	f04f 0901 	mov.w	r9, #1
 8013f26:	e79b      	b.n	8013e60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8013f28:	449c      	add	ip, r3
 8013f2a:	1aff      	subs	r7, r7, r3
 8013f2c:	f1b8 0f00 	cmp.w	r8, #0
 8013f30:	d009      	beq.n	8013f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8013f32:	9019      	str	r0, [sp, #100]	@ 0x64
 8013f34:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8013f38:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8013f3c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8013f40:	911d      	str	r1, [sp, #116]	@ 0x74
 8013f42:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8013f46:	1ad2      	subs	r2, r2, r3
 8013f48:	e68b      	b.n	8013c62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f4c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 80d1 	beq.w	80140f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8013f54:	ad19      	add	r5, sp, #100	@ 0x64
 8013f56:	ac39      	add	r4, sp, #228	@ 0xe4
 8013f58:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013f5a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013f5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8013f62:	930c      	str	r3, [sp, #48]	@ 0x30
 8013f64:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013f66:	6963      	ldr	r3, [r4, #20]
 8013f68:	440b      	add	r3, r1
 8013f6a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013f6e:	4408      	add	r0, r1
 8013f70:	b200      	sxth	r0, r0
 8013f72:	4283      	cmp	r3, r0
 8013f74:	900d      	str	r0, [sp, #52]	@ 0x34
 8013f76:	f280 80c1 	bge.w	80140fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8013f7a:	428b      	cmp	r3, r1
 8013f7c:	da08      	bge.n	8013f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013f7e:	2a00      	cmp	r2, #0
 8013f80:	dd06      	ble.n	8013f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013f82:	1acb      	subs	r3, r1, r3
 8013f84:	429a      	cmp	r2, r3
 8013f86:	f2c0 80bb 	blt.w	8014100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	f300 80b9 	bgt.w	8014102 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013f90:	6967      	ldr	r7, [r4, #20]
 8013f92:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013f98:	443b      	add	r3, r7
 8013f9a:	461f      	mov	r7, r3
 8013f9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f9e:	1bdf      	subs	r7, r3, r7
 8013fa0:	4297      	cmp	r7, r2
 8013fa2:	bfa8      	it	ge
 8013fa4:	4617      	movge	r7, r2
 8013fa6:	2f00      	cmp	r7, #0
 8013fa8:	f340 813c 	ble.w	8014224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8013fac:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013fae:	6829      	ldr	r1, [r5, #0]
 8013fb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013fb4:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013fb8:	4411      	add	r1, r2
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	4299      	cmp	r1, r3
 8013fbe:	dd1a      	ble.n	8013ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013fc0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8013fc4:	4402      	add	r2, r0
 8013fc6:	440b      	add	r3, r1
 8013fc8:	b21b      	sxth	r3, r3
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	dc13      	bgt.n	8013ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013fce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013fd0:	a912      	add	r1, sp, #72	@ 0x48
 8013fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fd4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	9206      	str	r2, [sp, #24]
 8013fda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013fdc:	9500      	str	r5, [sp, #0]
 8013fde:	9205      	str	r2, [sp, #20]
 8013fe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013fe2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013fe6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013fe8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013fec:	aa49      	add	r2, sp, #292	@ 0x124
 8013fee:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8013ff2:	4623      	mov	r3, r4
 8013ff4:	47c8      	blx	r9
 8013ff6:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013ffa:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013ffe:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014006:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801400a:	68a1      	ldr	r1, [r4, #8]
 801400c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014010:	ed94 6a08 	vldr	s12, [r4, #32]
 8014014:	edd4 6a07 	vldr	s13, [r4, #28]
 8014018:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801401c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014020:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014024:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014028:	edc4 6a07 	vstr	s13, [r4, #28]
 801402c:	441a      	add	r2, r3
 801402e:	6963      	ldr	r3, [r4, #20]
 8014030:	3301      	adds	r3, #1
 8014032:	6022      	str	r2, [r4, #0]
 8014034:	6163      	str	r3, [r4, #20]
 8014036:	69a3      	ldr	r3, [r4, #24]
 8014038:	3b01      	subs	r3, #1
 801403a:	61a3      	str	r3, [r4, #24]
 801403c:	6923      	ldr	r3, [r4, #16]
 801403e:	440b      	add	r3, r1
 8014040:	68e1      	ldr	r1, [r4, #12]
 8014042:	428b      	cmp	r3, r1
 8014044:	6123      	str	r3, [r4, #16]
 8014046:	db15      	blt.n	8014074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014048:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801404c:	3201      	adds	r2, #1
 801404e:	1a5b      	subs	r3, r3, r1
 8014050:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014054:	6022      	str	r2, [r4, #0]
 8014056:	6123      	str	r3, [r4, #16]
 8014058:	edc4 6a07 	vstr	s13, [r4, #28]
 801405c:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8014060:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014064:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8014068:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801406c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014070:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014074:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8014078:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801407c:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8014080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014084:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8014088:	68a9      	ldr	r1, [r5, #8]
 801408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801408e:	ed95 6a08 	vldr	s12, [r5, #32]
 8014092:	edd5 6a07 	vldr	s13, [r5, #28]
 8014096:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801409a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801409e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80140a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80140a6:	edc5 6a07 	vstr	s13, [r5, #28]
 80140aa:	441a      	add	r2, r3
 80140ac:	696b      	ldr	r3, [r5, #20]
 80140ae:	3301      	adds	r3, #1
 80140b0:	602a      	str	r2, [r5, #0]
 80140b2:	616b      	str	r3, [r5, #20]
 80140b4:	69ab      	ldr	r3, [r5, #24]
 80140b6:	3b01      	subs	r3, #1
 80140b8:	61ab      	str	r3, [r5, #24]
 80140ba:	692b      	ldr	r3, [r5, #16]
 80140bc:	440b      	add	r3, r1
 80140be:	68e9      	ldr	r1, [r5, #12]
 80140c0:	428b      	cmp	r3, r1
 80140c2:	612b      	str	r3, [r5, #16]
 80140c4:	db15      	blt.n	80140f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80140c6:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80140ca:	3201      	adds	r2, #1
 80140cc:	1a5b      	subs	r3, r3, r1
 80140ce:	ee76 6a26 	vadd.f32	s13, s12, s13
 80140d2:	602a      	str	r2, [r5, #0]
 80140d4:	612b      	str	r3, [r5, #16]
 80140d6:	edc5 6a07 	vstr	s13, [r5, #28]
 80140da:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80140de:	ee36 7a87 	vadd.f32	s14, s13, s14
 80140e2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80140e6:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80140ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80140ee:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80140f2:	3f01      	subs	r7, #1
 80140f4:	e757      	b.n	8013fa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80140f6:	ad39      	add	r5, sp, #228	@ 0xe4
 80140f8:	ac19      	add	r4, sp, #100	@ 0x64
 80140fa:	e72d      	b.n	8013f58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80140fc:	4613      	mov	r3, r2
 80140fe:	e744      	b.n	8013f8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014100:	4613      	mov	r3, r2
 8014102:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8014104:	469e      	mov	lr, r3
 8014106:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801410a:	461f      	mov	r7, r3
 801410c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8014110:	f04f 0900 	mov.w	r9, #0
 8014114:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8014118:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801411c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8014120:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8014124:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8014128:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801412a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801412e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8014132:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8014136:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801413a:	960e      	str	r6, [sp, #56]	@ 0x38
 801413c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8014140:	2f00      	cmp	r7, #0
 8014142:	d146      	bne.n	80141d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014144:	449c      	add	ip, r3
 8014146:	1ad7      	subs	r7, r2, r3
 8014148:	f1b9 0f00 	cmp.w	r9, #0
 801414c:	d009      	beq.n	8014162 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801414e:	9039      	str	r0, [sp, #228]	@ 0xe4
 8014150:	913d      	str	r1, [sp, #244]	@ 0xf4
 8014152:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8014156:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801415a:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801415e:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8014162:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014164:	f04f 0800 	mov.w	r8, #0
 8014168:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801416c:	910e      	str	r1, [sp, #56]	@ 0x38
 801416e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8014172:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8014176:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801417a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801417e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8014182:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8014186:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801418a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801418e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8014192:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8014196:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801419a:	f1be 0f00 	cmp.w	lr, #0
 801419e:	d030      	beq.n	8014202 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80141a0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80141a2:	4450      	add	r0, sl
 80141a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80141a8:	4431      	add	r1, r6
 80141aa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80141ae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80141b2:	4549      	cmp	r1, r9
 80141b4:	db08      	blt.n	80141c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80141b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80141ba:	3001      	adds	r0, #1
 80141bc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80141c0:	eba1 0109 	sub.w	r1, r1, r9
 80141c4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80141c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80141cc:	f04f 0801 	mov.w	r8, #1
 80141d0:	e7e3      	b.n	801419a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80141d2:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80141d4:	4450      	add	r0, sl
 80141d6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80141da:	4431      	add	r1, r6
 80141dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80141e0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80141e4:	4541      	cmp	r1, r8
 80141e6:	db08      	blt.n	80141fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80141e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80141ec:	3001      	adds	r0, #1
 80141ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80141f2:	eba1 0108 	sub.w	r1, r1, r8
 80141f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80141fa:	3f01      	subs	r7, #1
 80141fc:	f04f 0901 	mov.w	r9, #1
 8014200:	e79e      	b.n	8014140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014202:	449c      	add	ip, r3
 8014204:	1aff      	subs	r7, r7, r3
 8014206:	f1b8 0f00 	cmp.w	r8, #0
 801420a:	d009      	beq.n	8014220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801420c:	9019      	str	r0, [sp, #100]	@ 0x64
 801420e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8014212:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8014216:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801421a:	911d      	str	r1, [sp, #116]	@ 0x74
 801421c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8014220:	1ad2      	subs	r2, r2, r3
 8014222:	e6b5      	b.n	8013f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	b923      	cbnz	r3, 8014234 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801422a:	4b04      	ldr	r3, [pc, #16]	@ (801423c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801422c:	6818      	ldr	r0, [r3, #0]
 801422e:	6803      	ldr	r3, [r0, #0]
 8014230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014232:	4798      	blx	r3
 8014234:	b05b      	add	sp, #364	@ 0x16c
 8014236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423a:	bf00      	nop
 801423c:	2401b548 	.word	0x2401b548

08014240 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8014240:	2b03      	cmp	r3, #3
 8014242:	d818      	bhi.n	8014276 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8014244:	e8df f003 	tbb	[pc, r3]
 8014248:	130d0602 	.word	0x130d0602
 801424c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014250:	1850      	adds	r0, r2, r1
 8014252:	4770      	bx	lr
 8014254:	8803      	ldrh	r3, [r0, #0]
 8014256:	8880      	ldrh	r0, [r0, #4]
 8014258:	4418      	add	r0, r3
 801425a:	b200      	sxth	r0, r0
 801425c:	1a80      	subs	r0, r0, r2
 801425e:	3801      	subs	r0, #1
 8014260:	4770      	bx	lr
 8014262:	8803      	ldrh	r3, [r0, #0]
 8014264:	8880      	ldrh	r0, [r0, #4]
 8014266:	4418      	add	r0, r3
 8014268:	b200      	sxth	r0, r0
 801426a:	1a40      	subs	r0, r0, r1
 801426c:	e7f7      	b.n	801425e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801426e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8014272:	4410      	add	r0, r2
 8014274:	4770      	bx	lr
 8014276:	2000      	movs	r0, #0
 8014278:	4770      	bx	lr

0801427a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801427a:	2b03      	cmp	r3, #3
 801427c:	d817      	bhi.n	80142ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801427e:	e8df f003 	tbb	[pc, r3]
 8014282:	0602      	.short	0x0602
 8014284:	1009      	.short	0x1009
 8014286:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801428a:	1850      	adds	r0, r2, r1
 801428c:	4770      	bx	lr
 801428e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014292:	e7fa      	b.n	801428a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8014294:	8843      	ldrh	r3, [r0, #2]
 8014296:	88c0      	ldrh	r0, [r0, #6]
 8014298:	4418      	add	r0, r3
 801429a:	b200      	sxth	r0, r0
 801429c:	1a80      	subs	r0, r0, r2
 801429e:	3801      	subs	r0, #1
 80142a0:	4770      	bx	lr
 80142a2:	8843      	ldrh	r3, [r0, #2]
 80142a4:	88c0      	ldrh	r0, [r0, #6]
 80142a6:	4418      	add	r0, r3
 80142a8:	b200      	sxth	r0, r0
 80142aa:	1a40      	subs	r0, r0, r1
 80142ac:	e7f7      	b.n	801429e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80142ae:	2000      	movs	r0, #0
 80142b0:	4770      	bx	lr
	...

080142b4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80142b4:	4b01      	ldr	r3, [pc, #4]	@ (80142bc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80142b6:	2200      	movs	r2, #0
 80142b8:	601a      	str	r2, [r3, #0]
 80142ba:	4770      	bx	lr
 80142bc:	2401b550 	.word	0x2401b550

080142c0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80142c0:	4603      	mov	r3, r0
 80142c2:	b1c8      	cbz	r0, 80142f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80142c4:	0c02      	lsrs	r2, r0, #16
 80142c6:	0412      	lsls	r2, r2, #16
 80142c8:	b9a2      	cbnz	r2, 80142f4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80142ca:	0403      	lsls	r3, r0, #16
 80142cc:	2010      	movs	r0, #16
 80142ce:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80142d2:	bf04      	itt	eq
 80142d4:	021b      	lsleq	r3, r3, #8
 80142d6:	3008      	addeq	r0, #8
 80142d8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80142dc:	bf04      	itt	eq
 80142de:	011b      	lsleq	r3, r3, #4
 80142e0:	3004      	addeq	r0, #4
 80142e2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80142e6:	bf04      	itt	eq
 80142e8:	009b      	lsleq	r3, r3, #2
 80142ea:	3002      	addeq	r0, #2
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	db04      	blt.n	80142fa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80142f0:	3001      	adds	r0, #1
 80142f2:	4770      	bx	lr
 80142f4:	2000      	movs	r0, #0
 80142f6:	e7ea      	b.n	80142ce <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80142f8:	2020      	movs	r0, #32
 80142fa:	4770      	bx	lr

080142fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80142fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014300:	b087      	sub	sp, #28
 8014302:	460d      	mov	r5, r1
 8014304:	4616      	mov	r6, r2
 8014306:	4698      	mov	r8, r3
 8014308:	4601      	mov	r1, r0
 801430a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801430e:	b120      	cbz	r0, 801431a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014310:	b11a      	cbz	r2, 801431a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014312:	2d1f      	cmp	r5, #31
 8014314:	d801      	bhi.n	801431a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8014316:	2b1f      	cmp	r3, #31
 8014318:	d904      	bls.n	8014324 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801431a:	2000      	movs	r0, #0
 801431c:	6038      	str	r0, [r7, #0]
 801431e:	b007      	add	sp, #28
 8014320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014324:	b97d      	cbnz	r5, 8014346 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8014326:	b143      	cbz	r3, 801433a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8014328:	4602      	mov	r2, r0
 801432a:	462b      	mov	r3, r5
 801432c:	4641      	mov	r1, r8
 801432e:	4630      	mov	r0, r6
 8014330:	e9cd 4700 	strd	r4, r7, [sp]
 8014334:	f7ff ffe2 	bl	80142fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014338:	e7f1      	b.n	801431e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801433a:	f04f 33ff 	mov.w	r3, #4294967295
 801433e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	e7eb      	b.n	801431e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8014346:	fa32 fa05 	lsrs.w	sl, r2, r5
 801434a:	d106      	bne.n	801435a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801434c:	4346      	muls	r6, r0
 801434e:	fbb6 f0f4 	udiv	r0, r6, r4
 8014352:	fb04 6610 	mls	r6, r4, r0, r6
 8014356:	603e      	str	r6, [r7, #0]
 8014358:	e7e1      	b.n	801431e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801435a:	2201      	movs	r2, #1
 801435c:	fa00 fb05 	lsl.w	fp, r0, r5
 8014360:	40aa      	lsls	r2, r5
 8014362:	fbbb f9f4 	udiv	r9, fp, r4
 8014366:	3a01      	subs	r2, #1
 8014368:	fb0a f309 	mul.w	r3, sl, r9
 801436c:	fb04 b919 	mls	r9, r4, r9, fp
 8014370:	4016      	ands	r6, r2
 8014372:	9303      	str	r3, [sp, #12]
 8014374:	4630      	mov	r0, r6
 8014376:	f7ff ffa3 	bl	80142c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801437a:	462b      	mov	r3, r5
 801437c:	460a      	mov	r2, r1
 801437e:	4601      	mov	r1, r0
 8014380:	4630      	mov	r0, r6
 8014382:	e9cd 4700 	strd	r4, r7, [sp]
 8014386:	f7ff ffb9 	bl	80142fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801438a:	4606      	mov	r6, r0
 801438c:	4648      	mov	r0, r9
 801438e:	eb05 0108 	add.w	r1, r5, r8
 8014392:	f7ff ff95 	bl	80142c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014396:	ab05      	add	r3, sp, #20
 8014398:	464a      	mov	r2, r9
 801439a:	e9cd 4300 	strd	r4, r3, [sp]
 801439e:	4603      	mov	r3, r0
 80143a0:	4650      	mov	r0, sl
 80143a2:	f7ff ffab 	bl	80142fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80143a6:	6839      	ldr	r1, [r7, #0]
 80143a8:	9a05      	ldr	r2, [sp, #20]
 80143aa:	9b03      	ldr	r3, [sp, #12]
 80143ac:	4411      	add	r1, r2
 80143ae:	fbb1 f2f4 	udiv	r2, r1, r4
 80143b2:	18d3      	adds	r3, r2, r3
 80143b4:	fb04 1412 	mls	r4, r4, r2, r1
 80143b8:	441e      	add	r6, r3
 80143ba:	603c      	str	r4, [r7, #0]
 80143bc:	4430      	add	r0, r6
 80143be:	e7ae      	b.n	801431e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080143c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80143c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143c4:	b085      	sub	sp, #20
 80143c6:	f1b0 0900 	subs.w	r9, r0, #0
 80143ca:	461d      	mov	r5, r3
 80143cc:	4617      	mov	r7, r2
 80143ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80143d0:	bfbb      	ittet	lt
 80143d2:	f1c9 0900 	rsblt	r9, r9, #0
 80143d6:	f04f 36ff 	movlt.w	r6, #4294967295
 80143da:	2601      	movge	r6, #1
 80143dc:	6823      	ldrlt	r3, [r4, #0]
 80143de:	bfbc      	itt	lt
 80143e0:	425b      	neglt	r3, r3
 80143e2:	6023      	strlt	r3, [r4, #0]
 80143e4:	2a00      	cmp	r2, #0
 80143e6:	da04      	bge.n	80143f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80143e8:	6823      	ldr	r3, [r4, #0]
 80143ea:	4257      	negs	r7, r2
 80143ec:	4276      	negs	r6, r6
 80143ee:	425b      	negs	r3, r3
 80143f0:	6023      	str	r3, [r4, #0]
 80143f2:	2d00      	cmp	r5, #0
 80143f4:	4638      	mov	r0, r7
 80143f6:	bfba      	itte	lt
 80143f8:	426d      	neglt	r5, r5
 80143fa:	f04f 38ff 	movlt.w	r8, #4294967295
 80143fe:	f04f 0801 	movge.w	r8, #1
 8014402:	f7ff ff5d 	bl	80142c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014406:	ab03      	add	r3, sp, #12
 8014408:	463a      	mov	r2, r7
 801440a:	e9cd 5300 	strd	r5, r3, [sp]
 801440e:	4603      	mov	r3, r0
 8014410:	4648      	mov	r0, r9
 8014412:	f7ff ff73 	bl	80142fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	9a03      	ldr	r2, [sp, #12]
 801441a:	4546      	cmp	r6, r8
 801441c:	441a      	add	r2, r3
 801441e:	fb92 f3f5 	sdiv	r3, r2, r5
 8014422:	4418      	add	r0, r3
 8014424:	fb05 2313 	mls	r3, r5, r3, r2
 8014428:	bf18      	it	ne
 801442a:	4240      	negne	r0, r0
 801442c:	1c72      	adds	r2, r6, #1
 801442e:	6023      	str	r3, [r4, #0]
 8014430:	d105      	bne.n	801443e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014432:	2b00      	cmp	r3, #0
 8014434:	f1c3 0200 	rsb	r2, r3, #0
 8014438:	db0b      	blt.n	8014452 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801443a:	6022      	str	r2, [r4, #0]
 801443c:	e006      	b.n	801444c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801443e:	2e01      	cmp	r6, #1
 8014440:	d104      	bne.n	801444c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014442:	2b00      	cmp	r3, #0
 8014444:	da02      	bge.n	801444c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014446:	442b      	add	r3, r5
 8014448:	3801      	subs	r0, #1
 801444a:	6023      	str	r3, [r4, #0]
 801444c:	b005      	add	sp, #20
 801444e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014452:	3801      	subs	r0, #1
 8014454:	1b52      	subs	r2, r2, r5
 8014456:	e7f0      	b.n	801443a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08014458 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014458:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801445c:	4c1c      	ldr	r4, [pc, #112]	@ (80144d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801445e:	4605      	mov	r5, r0
 8014460:	6807      	ldr	r7, [r0, #0]
 8014462:	69a3      	ldr	r3, [r4, #24]
 8014464:	b92b      	cbnz	r3, 8014472 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014466:	6840      	ldr	r0, [r0, #4]
 8014468:	e9c5 7000 	strd	r7, r0, [r5]
 801446c:	b004      	add	sp, #16
 801446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014472:	f04f 0802 	mov.w	r8, #2
 8014476:	68a2      	ldr	r2, [r4, #8]
 8014478:	ae04      	add	r6, sp, #16
 801447a:	6820      	ldr	r0, [r4, #0]
 801447c:	fb93 f1f8 	sdiv	r1, r3, r8
 8014480:	440a      	add	r2, r1
 8014482:	69e1      	ldr	r1, [r4, #28]
 8014484:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014488:	463a      	mov	r2, r7
 801448a:	9600      	str	r6, [sp, #0]
 801448c:	f7ff ff98 	bl	80143c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014490:	69a3      	ldr	r3, [r4, #24]
 8014492:	4607      	mov	r7, r0
 8014494:	686a      	ldr	r2, [r5, #4]
 8014496:	6a21      	ldr	r1, [r4, #32]
 8014498:	9600      	str	r6, [sp, #0]
 801449a:	6860      	ldr	r0, [r4, #4]
 801449c:	f7ff ff90 	bl	80143c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80144a0:	69a3      	ldr	r3, [r4, #24]
 80144a2:	6962      	ldr	r2, [r4, #20]
 80144a4:	4407      	add	r7, r0
 80144a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80144a8:	9600      	str	r6, [sp, #0]
 80144aa:	68e0      	ldr	r0, [r4, #12]
 80144ac:	fb93 f8f8 	sdiv	r8, r3, r8
 80144b0:	4442      	add	r2, r8
 80144b2:	9203      	str	r2, [sp, #12]
 80144b4:	682a      	ldr	r2, [r5, #0]
 80144b6:	f7ff ff83 	bl	80143c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80144ba:	4680      	mov	r8, r0
 80144bc:	9600      	str	r6, [sp, #0]
 80144be:	69a3      	ldr	r3, [r4, #24]
 80144c0:	686a      	ldr	r2, [r5, #4]
 80144c2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80144c4:	6920      	ldr	r0, [r4, #16]
 80144c6:	f7ff ff7b 	bl	80143c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80144ca:	4440      	add	r0, r8
 80144cc:	e7cc      	b.n	8014468 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80144ce:	bf00      	nop
 80144d0:	2401b554 	.word	0x2401b554

080144d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80144d4:	4b07      	ldr	r3, [pc, #28]	@ (80144f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	2b01      	cmp	r3, #1
 80144da:	d109      	bne.n	80144f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80144dc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80144e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80144e4:	8003      	strh	r3, [r0, #0]
 80144e6:	4b04      	ldr	r3, [pc, #16]	@ (80144f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	3b01      	subs	r3, #1
 80144ec:	1a9b      	subs	r3, r3, r2
 80144ee:	800b      	strh	r3, [r1, #0]
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	2401b540 	.word	0x2401b540
 80144f8:	2401b53c 	.word	0x2401b53c

080144fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80144fc:	4b07      	ldr	r3, [pc, #28]	@ (801451c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80144fe:	b510      	push	{r4, lr}
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	2b01      	cmp	r3, #1
 8014504:	d108      	bne.n	8014518 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014506:	4b06      	ldr	r3, [pc, #24]	@ (8014520 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014508:	880c      	ldrh	r4, [r1, #0]
 801450a:	881b      	ldrh	r3, [r3, #0]
 801450c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014510:	3b01      	subs	r3, #1
 8014512:	1b1b      	subs	r3, r3, r4
 8014514:	8003      	strh	r3, [r0, #0]
 8014516:	800a      	strh	r2, [r1, #0]
 8014518:	bd10      	pop	{r4, pc}
 801451a:	bf00      	nop
 801451c:	2401b540 	.word	0x2401b540
 8014520:	2401b53c 	.word	0x2401b53c

08014524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014524:	4b0a      	ldr	r3, [pc, #40]	@ (8014550 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014526:	b510      	push	{r4, lr}
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b01      	cmp	r3, #1
 801452c:	d10e      	bne.n	801454c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801452e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014532:	8843      	ldrh	r3, [r0, #2]
 8014534:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014538:	18ca      	adds	r2, r1, r3
 801453a:	4b06      	ldr	r3, [pc, #24]	@ (8014554 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801453c:	8044      	strh	r4, [r0, #2]
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	1a9b      	subs	r3, r3, r2
 8014542:	8003      	strh	r3, [r0, #0]
 8014544:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014548:	8081      	strh	r1, [r0, #4]
 801454a:	80c3      	strh	r3, [r0, #6]
 801454c:	bd10      	pop	{r4, pc}
 801454e:	bf00      	nop
 8014550:	2401b540 	.word	0x2401b540
 8014554:	2401b53c 	.word	0x2401b53c

08014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014558:	4b08      	ldr	r3, [pc, #32]	@ (801457c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	2b01      	cmp	r3, #1
 801455e:	d10c      	bne.n	801457a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014560:	8803      	ldrh	r3, [r0, #0]
 8014562:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014566:	8842      	ldrh	r2, [r0, #2]
 8014568:	8002      	strh	r2, [r0, #0]
 801456a:	185a      	adds	r2, r3, r1
 801456c:	4b04      	ldr	r3, [pc, #16]	@ (8014580 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	1a9b      	subs	r3, r3, r2
 8014572:	8043      	strh	r3, [r0, #2]
 8014574:	88c3      	ldrh	r3, [r0, #6]
 8014576:	80c1      	strh	r1, [r0, #6]
 8014578:	8083      	strh	r3, [r0, #4]
 801457a:	4770      	bx	lr
 801457c:	2401b540 	.word	0x2401b540
 8014580:	2401b53c 	.word	0x2401b53c

08014584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014584:	4b07      	ldr	r3, [pc, #28]	@ (80145a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014586:	b510      	push	{r4, lr}
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	2b01      	cmp	r3, #1
 801458c:	d108      	bne.n	80145a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801458e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014592:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014596:	8003      	strh	r3, [r0, #0]
 8014598:	8893      	ldrh	r3, [r2, #4]
 801459a:	3b01      	subs	r3, #1
 801459c:	1b1b      	subs	r3, r3, r4
 801459e:	800b      	strh	r3, [r1, #0]
 80145a0:	bd10      	pop	{r4, pc}
 80145a2:	bf00      	nop
 80145a4:	2401b540 	.word	0x2401b540

080145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80145a8:	4b0a      	ldr	r3, [pc, #40]	@ (80145d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80145aa:	460a      	mov	r2, r1
 80145ac:	b510      	push	{r4, lr}
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	d10d      	bne.n	80145d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80145b4:	8881      	ldrh	r1, [r0, #4]
 80145b6:	8803      	ldrh	r3, [r0, #0]
 80145b8:	440b      	add	r3, r1
 80145ba:	4601      	mov	r1, r0
 80145bc:	3b01      	subs	r3, #1
 80145be:	f821 3b02 	strh.w	r3, [r1], #2
 80145c2:	f7ff ffdf 	bl	8014584 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80145c6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80145ca:	88c2      	ldrh	r2, [r0, #6]
 80145cc:	80c3      	strh	r3, [r0, #6]
 80145ce:	8082      	strh	r2, [r0, #4]
 80145d0:	bd10      	pop	{r4, pc}
 80145d2:	bf00      	nop
 80145d4:	2401b540 	.word	0x2401b540

080145d8 <_ZN8touchgfx11Application13requestRedrawEv>:
 80145d8:	4b06      	ldr	r3, [pc, #24]	@ (80145f4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80145da:	2100      	movs	r1, #0
 80145dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145e0:	4b05      	ldr	r3, [pc, #20]	@ (80145f8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80145e2:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80145e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145ea:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80145ee:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80145f2:	4770      	bx	lr
 80145f4:	2401b53c 	.word	0x2401b53c
 80145f8:	2401b53e 	.word	0x2401b53e

080145fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80145fc:	4b03      	ldr	r3, [pc, #12]	@ (801460c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	b110      	cbz	r0, 8014608 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	699b      	ldr	r3, [r3, #24]
 8014606:	4718      	bx	r3
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop
 801460c:	2401b584 	.word	0x2401b584

08014610 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014610:	4770      	bx	lr
	...

08014614 <_ZN8touchgfx11Application4drawEv>:
 8014614:	4b09      	ldr	r3, [pc, #36]	@ (801463c <_ZN8touchgfx11Application4drawEv+0x28>)
 8014616:	b507      	push	{r0, r1, r2, lr}
 8014618:	f9b3 2000 	ldrsh.w	r2, [r3]
 801461c:	2100      	movs	r1, #0
 801461e:	4b08      	ldr	r3, [pc, #32]	@ (8014640 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014620:	9100      	str	r1, [sp, #0]
 8014622:	4669      	mov	r1, sp
 8014624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014628:	f8ad 2004 	strh.w	r2, [sp, #4]
 801462c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014630:	6803      	ldr	r3, [r0, #0]
 8014632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014634:	4798      	blx	r3
 8014636:	b003      	add	sp, #12
 8014638:	f85d fb04 	ldr.w	pc, [sp], #4
 801463c:	2401b53c 	.word	0x2401b53c
 8014640:	2401b53e 	.word	0x2401b53e

08014644 <_ZN8touchgfx11Application10invalidateEv>:
 8014644:	4b09      	ldr	r3, [pc, #36]	@ (801466c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8014646:	b082      	sub	sp, #8
 8014648:	2100      	movs	r1, #0
 801464a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801464e:	4b08      	ldr	r3, [pc, #32]	@ (8014670 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014650:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014654:	aa02      	add	r2, sp, #8
 8014656:	f9b3 3000 	ldrsh.w	r3, [r3]
 801465a:	9100      	str	r1, [sp, #0]
 801465c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014660:	6803      	ldr	r3, [r0, #0]
 8014662:	e912 0006 	ldmdb	r2, {r1, r2}
 8014666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014668:	b002      	add	sp, #8
 801466a:	4718      	bx	r3
 801466c:	2401b53c 	.word	0x2401b53c
 8014670:	2401b53e 	.word	0x2401b53e

08014674 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014674:	4b03      	ldr	r3, [pc, #12]	@ (8014684 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014676:	6818      	ldr	r0, [r3, #0]
 8014678:	b110      	cbz	r0, 8014680 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	69db      	ldr	r3, [r3, #28]
 801467e:	4718      	bx	r3
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	2401b584 	.word	0x2401b584

08014688 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014688:	4b03      	ldr	r3, [pc, #12]	@ (8014698 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801468a:	6818      	ldr	r0, [r3, #0]
 801468c:	b110      	cbz	r0, 8014694 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801468e:	6803      	ldr	r3, [r0, #0]
 8014690:	6a1b      	ldr	r3, [r3, #32]
 8014692:	4718      	bx	r3
 8014694:	4770      	bx	lr
 8014696:	bf00      	nop
 8014698:	2401b584 	.word	0x2401b584

0801469c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801469c:	2300      	movs	r3, #0
 801469e:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80146a2:	4770      	bx	lr

080146a4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80146a4:	4b03      	ldr	r3, [pc, #12]	@ (80146b4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80146a6:	6818      	ldr	r0, [r3, #0]
 80146a8:	b110      	cbz	r0, 80146b0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80146aa:	6803      	ldr	r3, [r0, #0]
 80146ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80146ae:	4718      	bx	r3
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	2401b584 	.word	0x2401b584

080146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80146b8:	b510      	push	{r4, lr}
 80146ba:	f9b1 4000 	ldrsh.w	r4, [r1]
 80146be:	888a      	ldrh	r2, [r1, #4]
 80146c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80146c4:	4422      	add	r2, r4
 80146c6:	b212      	sxth	r2, r2
 80146c8:	4293      	cmp	r3, r2
 80146ca:	da15      	bge.n	80146f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80146cc:	8882      	ldrh	r2, [r0, #4]
 80146ce:	4413      	add	r3, r2
 80146d0:	b21b      	sxth	r3, r3
 80146d2:	429c      	cmp	r4, r3
 80146d4:	da10      	bge.n	80146f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80146d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80146da:	88c9      	ldrh	r1, [r1, #6]
 80146dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80146e0:	4419      	add	r1, r3
 80146e2:	b209      	sxth	r1, r1
 80146e4:	428a      	cmp	r2, r1
 80146e6:	da07      	bge.n	80146f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80146e8:	88c0      	ldrh	r0, [r0, #6]
 80146ea:	4410      	add	r0, r2
 80146ec:	b200      	sxth	r0, r0
 80146ee:	4283      	cmp	r3, r0
 80146f0:	bfac      	ite	ge
 80146f2:	2000      	movge	r0, #0
 80146f4:	2001      	movlt	r0, #1
 80146f6:	bd10      	pop	{r4, pc}
 80146f8:	2000      	movs	r0, #0
 80146fa:	e7fc      	b.n	80146f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080146fc <_ZN8touchgfx4Rect10restrictToEss>:
 80146fc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	b510      	push	{r4, lr}
 8014704:	da04      	bge.n	8014710 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014706:	8884      	ldrh	r4, [r0, #4]
 8014708:	4423      	add	r3, r4
 801470a:	8083      	strh	r3, [r0, #4]
 801470c:	2300      	movs	r3, #0
 801470e:	8003      	strh	r3, [r0, #0]
 8014710:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014714:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014718:	1b09      	subs	r1, r1, r4
 801471a:	428b      	cmp	r3, r1
 801471c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014720:	bfc8      	it	gt
 8014722:	8081      	strhgt	r1, [r0, #4]
 8014724:	2b00      	cmp	r3, #0
 8014726:	da04      	bge.n	8014732 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014728:	88c1      	ldrh	r1, [r0, #6]
 801472a:	440b      	add	r3, r1
 801472c:	80c3      	strh	r3, [r0, #6]
 801472e:	2300      	movs	r3, #0
 8014730:	8043      	strh	r3, [r0, #2]
 8014732:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014736:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801473a:	1a52      	subs	r2, r2, r1
 801473c:	4293      	cmp	r3, r2
 801473e:	bfc8      	it	gt
 8014740:	80c2      	strhgt	r2, [r0, #6]
 8014742:	bd10      	pop	{r4, pc}

08014744 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014744:	4b10      	ldr	r3, [pc, #64]	@ (8014788 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014746:	b510      	push	{r4, lr}
 8014748:	460c      	mov	r4, r1
 801474a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801474e:	4b0f      	ldr	r3, [pc, #60]	@ (801478c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014750:	4620      	mov	r0, r4
 8014752:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014756:	f7ff ffd1 	bl	80146fc <_ZN8touchgfx4Rect10restrictToEss>
 801475a:	4b0d      	ldr	r3, [pc, #52]	@ (8014790 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801475c:	6818      	ldr	r0, [r3, #0]
 801475e:	b190      	cbz	r0, 8014786 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014760:	6803      	ldr	r3, [r0, #0]
 8014762:	4621      	mov	r1, r4
 8014764:	689b      	ldr	r3, [r3, #8]
 8014766:	4798      	blx	r3
 8014768:	4b0a      	ldr	r3, [pc, #40]	@ (8014794 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801476a:	6818      	ldr	r0, [r3, #0]
 801476c:	b118      	cbz	r0, 8014776 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801476e:	6803      	ldr	r3, [r0, #0]
 8014770:	4621      	mov	r1, r4
 8014772:	689b      	ldr	r3, [r3, #8]
 8014774:	4798      	blx	r3
 8014776:	4b08      	ldr	r3, [pc, #32]	@ (8014798 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014778:	4621      	mov	r1, r4
 801477a:	6818      	ldr	r0, [r3, #0]
 801477c:	6803      	ldr	r3, [r0, #0]
 801477e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014782:	69db      	ldr	r3, [r3, #28]
 8014784:	4718      	bx	r3
 8014786:	bd10      	pop	{r4, pc}
 8014788:	2401b53e 	.word	0x2401b53e
 801478c:	2401b53c 	.word	0x2401b53c
 8014790:	2401b584 	.word	0x2401b584
 8014794:	2401b580 	.word	0x2401b580
 8014798:	2401b548 	.word	0x2401b548

0801479c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801479e:	4606      	mov	r6, r0
 80147a0:	4608      	mov	r0, r1
 80147a2:	460f      	mov	r7, r1
 80147a4:	f7fd fecb 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80147a8:	b9e8      	cbnz	r0, 80147e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80147aa:	f9b7 5000 	ldrsh.w	r5, [r7]
 80147ae:	f9b6 4000 	ldrsh.w	r4, [r6]
 80147b2:	42a5      	cmp	r5, r4
 80147b4:	db17      	blt.n	80147e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80147b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80147ba:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80147be:	429a      	cmp	r2, r3
 80147c0:	db11      	blt.n	80147e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80147c2:	88b9      	ldrh	r1, [r7, #4]
 80147c4:	440d      	add	r5, r1
 80147c6:	88b1      	ldrh	r1, [r6, #4]
 80147c8:	440c      	add	r4, r1
 80147ca:	b22d      	sxth	r5, r5
 80147cc:	b224      	sxth	r4, r4
 80147ce:	42a5      	cmp	r5, r4
 80147d0:	dc09      	bgt.n	80147e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80147d2:	88f8      	ldrh	r0, [r7, #6]
 80147d4:	4410      	add	r0, r2
 80147d6:	88f2      	ldrh	r2, [r6, #6]
 80147d8:	4413      	add	r3, r2
 80147da:	b200      	sxth	r0, r0
 80147dc:	b21b      	sxth	r3, r3
 80147de:	4298      	cmp	r0, r3
 80147e0:	bfcc      	ite	gt
 80147e2:	2000      	movgt	r0, #0
 80147e4:	2001      	movle	r0, #1
 80147e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80147e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ea:	4604      	mov	r4, r0
 80147ec:	4608      	mov	r0, r1
 80147ee:	460d      	mov	r5, r1
 80147f0:	f7fd fea5 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80147f4:	b978      	cbnz	r0, 8014816 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80147f6:	4620      	mov	r0, r4
 80147f8:	f7fd fea1 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80147fc:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014800:	b150      	cbz	r0, 8014818 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014802:	8026      	strh	r6, [r4, #0]
 8014804:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014808:	8063      	strh	r3, [r4, #2]
 801480a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801480e:	80a3      	strh	r3, [r4, #4]
 8014810:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014814:	80e3      	strh	r3, [r4, #6]
 8014816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014818:	f9b4 1000 	ldrsh.w	r1, [r4]
 801481c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014820:	42b1      	cmp	r1, r6
 8014822:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014826:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801482a:	460f      	mov	r7, r1
 801482c:	88ed      	ldrh	r5, [r5, #6]
 801482e:	bfa8      	it	ge
 8014830:	4637      	movge	r7, r6
 8014832:	4293      	cmp	r3, r2
 8014834:	4618      	mov	r0, r3
 8014836:	4466      	add	r6, ip
 8014838:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801483c:	bfa8      	it	ge
 801483e:	4610      	movge	r0, r2
 8014840:	442a      	add	r2, r5
 8014842:	88e5      	ldrh	r5, [r4, #6]
 8014844:	4461      	add	r1, ip
 8014846:	b236      	sxth	r6, r6
 8014848:	8027      	strh	r7, [r4, #0]
 801484a:	442b      	add	r3, r5
 801484c:	b209      	sxth	r1, r1
 801484e:	b212      	sxth	r2, r2
 8014850:	8060      	strh	r0, [r4, #2]
 8014852:	b21b      	sxth	r3, r3
 8014854:	428e      	cmp	r6, r1
 8014856:	bfac      	ite	ge
 8014858:	ebc7 0106 	rsbge	r1, r7, r6
 801485c:	ebc7 0101 	rsblt	r1, r7, r1
 8014860:	429a      	cmp	r2, r3
 8014862:	bfac      	ite	ge
 8014864:	ebc0 0202 	rsbge	r2, r0, r2
 8014868:	ebc0 0203 	rsblt	r2, r0, r3
 801486c:	80a1      	strh	r1, [r4, #4]
 801486e:	80e2      	strh	r2, [r4, #6]
 8014870:	e7d1      	b.n	8014816 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08014874 <_ZN8touchgfx11Application11getInstanceEv>:
 8014874:	4b01      	ldr	r3, [pc, #4]	@ (801487c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8014876:	6818      	ldr	r0, [r3, #0]
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	2401b594 	.word	0x2401b594

08014880 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8014880:	2300      	movs	r3, #0
 8014882:	b510      	push	{r4, lr}
 8014884:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014888:	4604      	mov	r4, r0
 801488a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801488e:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014892:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8014896:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801489a:	429a      	cmp	r2, r3
 801489c:	d90e      	bls.n	80148bc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801489e:	18e2      	adds	r2, r4, r3
 80148a0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80148a4:	b122      	cbz	r2, 80148b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80148a6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80148aa:	6803      	ldr	r3, [r0, #0]
 80148ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148ae:	4798      	blx	r3
 80148b0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80148b4:	3301      	adds	r3, #1
 80148b6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80148ba:	e7ea      	b.n	8014892 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80148bc:	bd10      	pop	{r4, pc}

080148be <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80148be:	2300      	movs	r3, #0
 80148c0:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80148c4:	30a4      	adds	r0, #164	@ 0xa4
 80148c6:	f820 3c24 	strh.w	r3, [r0, #-36]
 80148ca:	f802 3b01 	strb.w	r3, [r2], #1
 80148ce:	4282      	cmp	r2, r0
 80148d0:	d1fb      	bne.n	80148ca <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80148d2:	4770      	bx	lr

080148d4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80148d4:	b570      	push	{r4, r5, r6, lr}
 80148d6:	4c0b      	ldr	r4, [pc, #44]	@ (8014904 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80148d8:	4605      	mov	r5, r0
 80148da:	460e      	mov	r6, r1
 80148dc:	6820      	ldr	r0, [r4, #0]
 80148de:	b110      	cbz	r0, 80148e6 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80148e0:	6803      	ldr	r3, [r0, #0]
 80148e2:	695b      	ldr	r3, [r3, #20]
 80148e4:	4798      	blx	r3
 80148e6:	1d28      	adds	r0, r5, #4
 80148e8:	f7ff ffe9 	bl	80148be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80148ec:	6026      	str	r6, [r4, #0]
 80148ee:	6833      	ldr	r3, [r6, #0]
 80148f0:	4630      	mov	r0, r6
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	4798      	blx	r3
 80148f6:	682b      	ldr	r3, [r5, #0]
 80148f8:	4628      	mov	r0, r5
 80148fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014900:	4718      	bx	r3
 8014902:	bf00      	nop
 8014904:	2401b584 	.word	0x2401b584

08014908 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014908:	2300      	movs	r3, #0
 801490a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801490e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8014912:	461a      	mov	r2, r3
 8014914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014916:	461c      	mov	r4, r3
 8014918:	461d      	mov	r5, r3
 801491a:	459c      	cmp	ip, r3
 801491c:	dd1a      	ble.n	8014954 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801491e:	18c6      	adds	r6, r0, r3
 8014920:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8014924:	b16e      	cbz	r6, 8014942 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8014926:	429a      	cmp	r2, r3
 8014928:	d008      	beq.n	801493c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801492a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801492e:	fa1f fe82 	uxth.w	lr, r2
 8014932:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8014936:	1887      	adds	r7, r0, r2
 8014938:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801493c:	3201      	adds	r2, #1
 801493e:	3301      	adds	r3, #1
 8014940:	e7eb      	b.n	801491a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8014942:	4299      	cmp	r1, r3
 8014944:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8014948:	bfa8      	it	ge
 801494a:	3501      	addge	r5, #1
 801494c:	429e      	cmp	r6, r3
 801494e:	bfc8      	it	gt
 8014950:	3401      	addgt	r4, #1
 8014952:	e7f4      	b.n	801493e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8014954:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8014958:	1b49      	subs	r1, r1, r5
 801495a:	1b1b      	subs	r3, r3, r4
 801495c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8014960:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8014964:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014968:	4293      	cmp	r3, r2
 801496a:	dd03      	ble.n	8014974 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801496c:	3b01      	subs	r3, #1
 801496e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8014972:	e7f7      	b.n	8014964 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8014974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014978 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014978:	b570      	push	{r4, r5, r6, lr}
 801497a:	4d16      	ldr	r5, [pc, #88]	@ (80149d4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801497c:	4604      	mov	r4, r0
 801497e:	6828      	ldr	r0, [r5, #0]
 8014980:	b140      	cbz	r0, 8014994 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014982:	7a03      	ldrb	r3, [r0, #8]
 8014984:	b933      	cbnz	r3, 8014994 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014986:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801498a:	6803      	ldr	r3, [r0, #0]
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014992:	4718      	bx	r3
 8014994:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014998:	4e0f      	ldr	r6, [pc, #60]	@ (80149d8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801499a:	b973      	cbnz	r3, 80149ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801499c:	b168      	cbz	r0, 80149ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801499e:	7a03      	ldrb	r3, [r0, #8]
 80149a0:	b15b      	cbz	r3, 80149ba <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80149a2:	6830      	ldr	r0, [r6, #0]
 80149a4:	b110      	cbz	r0, 80149ac <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80149a6:	6803      	ldr	r3, [r0, #0]
 80149a8:	691b      	ldr	r3, [r3, #16]
 80149aa:	4798      	blx	r3
 80149ac:	6828      	ldr	r0, [r5, #0]
 80149ae:	6803      	ldr	r3, [r0, #0]
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	4798      	blx	r3
 80149b4:	2301      	movs	r3, #1
 80149b6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80149ba:	3404      	adds	r4, #4
 80149bc:	4620      	mov	r0, r4
 80149be:	f7ff ff5f 	bl	8014880 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80149c2:	4620      	mov	r0, r4
 80149c4:	f7ff ffa0 	bl	8014908 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80149c8:	6830      	ldr	r0, [r6, #0]
 80149ca:	b110      	cbz	r0, 80149d2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80149cc:	6803      	ldr	r3, [r0, #0]
 80149ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149d0:	e7dd      	b.n	801498e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80149d2:	bd70      	pop	{r4, r5, r6, pc}
 80149d4:	2401b588 	.word	0x2401b588
 80149d8:	2401b584 	.word	0x2401b584

080149dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80149dc:	4603      	mov	r3, r0
 80149de:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80149e2:	2200      	movs	r2, #0
 80149e4:	801a      	strh	r2, [r3, #0]
 80149e6:	3308      	adds	r3, #8
 80149e8:	f823 2c06 	strh.w	r2, [r3, #-6]
 80149ec:	f823 2c04 	strh.w	r2, [r3, #-4]
 80149f0:	f823 2c02 	strh.w	r2, [r3, #-2]
 80149f4:	428b      	cmp	r3, r1
 80149f6:	d1f5      	bne.n	80149e4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80149f8:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80149fc:	4770      	bx	lr
	...

08014a00 <_ZN8touchgfx11ApplicationC1Ev>:
 8014a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a02:	4b1d      	ldr	r3, [pc, #116]	@ (8014a78 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8014a04:	4606      	mov	r6, r0
 8014a06:	4604      	mov	r4, r0
 8014a08:	2500      	movs	r5, #0
 8014a0a:	f846 3b04 	str.w	r3, [r6], #4
 8014a0e:	22a8      	movs	r2, #168	@ 0xa8
 8014a10:	2100      	movs	r1, #0
 8014a12:	4630      	mov	r0, r6
 8014a14:	f00c f917 	bl	8020c46 <memset>
 8014a18:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014a1c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014a20:	4f16      	ldr	r7, [pc, #88]	@ (8014a7c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8014a22:	f7ff ffdb 	bl	80149dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014a26:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8014a2a:	f7ff ffd7 	bl	80149dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014a2e:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8014a32:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8014a36:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8014a3a:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8014a3e:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8014a42:	490f      	ldr	r1, [pc, #60]	@ (8014a80 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8014a44:	480f      	ldr	r0, [pc, #60]	@ (8014a84 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8014a46:	f00b fd9f 	bl	8020588 <CRC_Lock>
 8014a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8014a88 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014a4c:	b158      	cbz	r0, 8014a66 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8014a4e:	801d      	strh	r5, [r3, #0]
 8014a50:	2300      	movs	r3, #0
 8014a52:	4a0e      	ldr	r2, [pc, #56]	@ (8014a8c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8014a54:	4630      	mov	r0, r6
 8014a56:	6013      	str	r3, [r2, #0]
 8014a58:	4a0d      	ldr	r2, [pc, #52]	@ (8014a90 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8014a5a:	603b      	str	r3, [r7, #0]
 8014a5c:	6013      	str	r3, [r2, #0]
 8014a5e:	f7ff ff2e 	bl	80148be <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8014a62:	4620      	mov	r0, r4
 8014a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014a6a:	2002      	movs	r0, #2
 8014a6c:	801a      	strh	r2, [r3, #0]
 8014a6e:	6038      	str	r0, [r7, #0]
 8014a70:	f001 fa50 	bl	8015f14 <_ZN8touchgfx6Screen4drawEv>
 8014a74:	e7ec      	b.n	8014a50 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8014a76:	bf00      	nop
 8014a78:	080230f4 	.word	0x080230f4
 8014a7c:	2401b584 	.word	0x2401b584
 8014a80:	b5e8b5cd 	.word	0xb5e8b5cd
 8014a84:	f407a5c2 	.word	0xf407a5c2
 8014a88:	24000050 	.word	0x24000050
 8014a8c:	2401b594 	.word	0x2401b594
 8014a90:	2401b588 	.word	0x2401b588

08014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8014a94:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014a98:	3b01      	subs	r3, #1
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	428b      	cmp	r3, r1
 8014a9e:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8014aa2:	b510      	push	{r4, lr}
 8014aa4:	d908      	bls.n	8014ab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8014aa6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8014aaa:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8014ab4:	685a      	ldr	r2, [r3, #4]
 8014ab6:	6062      	str	r2, [r4, #4]
 8014ab8:	bd10      	pop	{r4, pc}
	...

08014abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	b08f      	sub	sp, #60	@ 0x3c
 8014ac2:	4b8f      	ldr	r3, [pc, #572]	@ (8014d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8014ac4:	4683      	mov	fp, r0
 8014ac6:	ac0a      	add	r4, sp, #40	@ 0x28
 8014ac8:	e884 0006 	stmia.w	r4, {r1, r2}
 8014acc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8014d04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8014ad4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014ad8:	f7ff fe10 	bl	80146fc <_ZN8touchgfx4Rect10restrictToEss>
 8014adc:	4620      	mov	r0, r4
 8014ade:	f7fd fd2e 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d16a      	bne.n	8014bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014ae6:	9403      	str	r4, [sp, #12]
 8014ae8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014aec:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014af0:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8014af4:	9301      	str	r3, [sp, #4]
 8014af6:	35a4      	adds	r5, #164	@ 0xa4
 8014af8:	b15c      	cbz	r4, 8014b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8014afa:	4629      	mov	r1, r5
 8014afc:	9803      	ldr	r0, [sp, #12]
 8014afe:	f7ff fe4d 	bl	801479c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014b02:	3c01      	subs	r4, #1
 8014b04:	b118      	cbz	r0, 8014b0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8014b06:	b2a1      	uxth	r1, r4
 8014b08:	9801      	ldr	r0, [sp, #4]
 8014b0a:	f7ff ffc3 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014b0e:	3d08      	subs	r5, #8
 8014b10:	e7f2      	b.n	8014af8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8014b12:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8014b16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014b1a:	f8cd a010 	str.w	sl, [sp, #16]
 8014b1e:	9302      	str	r3, [sp, #8]
 8014b20:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014b24:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8014b28:	9306      	str	r3, [sp, #24]
 8014b2a:	445c      	add	r4, fp
 8014b2c:	2500      	movs	r5, #0
 8014b2e:	4626      	mov	r6, r4
 8014b30:	f8cd a014 	str.w	sl, [sp, #20]
 8014b34:	462f      	mov	r7, r5
 8014b36:	9b05      	ldr	r3, [sp, #20]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d073      	beq.n	8014c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8014b3c:	9903      	ldr	r1, [sp, #12]
 8014b3e:	4630      	mov	r0, r6
 8014b40:	f7ff fdba 	bl	80146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014b44:	b350      	cbz	r0, 8014b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014b46:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8014b4a:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014b4e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014b52:	45e6      	cmp	lr, ip
 8014b54:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8014b58:	db33      	blt.n	8014bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014b5a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014b5e:	88b3      	ldrh	r3, [r6, #4]
 8014b60:	4472      	add	r2, lr
 8014b62:	4463      	add	r3, ip
 8014b64:	b212      	sxth	r2, r2
 8014b66:	b21b      	sxth	r3, r3
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	dc2a      	bgt.n	8014bc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8014b6c:	fa1f f289 	uxth.w	r2, r9
 8014b70:	88f3      	ldrh	r3, [r6, #6]
 8014b72:	45c8      	cmp	r8, r9
 8014b74:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014b78:	4413      	add	r3, r2
 8014b7a:	fa1f fc88 	uxth.w	ip, r8
 8014b7e:	b29b      	uxth	r3, r3
 8014b80:	fa0f fe83 	sxth.w	lr, r3
 8014b84:	db0f      	blt.n	8014ba6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014b86:	eba3 030c 	sub.w	r3, r3, ip
 8014b8a:	1ac9      	subs	r1, r1, r3
 8014b8c:	b209      	sxth	r1, r1
 8014b8e:	2900      	cmp	r1, #0
 8014b90:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014b94:	dd12      	ble.n	8014bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014b96:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8014b9a:	4605      	mov	r5, r0
 8014b9c:	9b05      	ldr	r3, [sp, #20]
 8014b9e:	3e08      	subs	r6, #8
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	9305      	str	r3, [sp, #20]
 8014ba4:	e7c7      	b.n	8014b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8014ba6:	4461      	add	r1, ip
 8014ba8:	b209      	sxth	r1, r1
 8014baa:	4571      	cmp	r1, lr
 8014bac:	dc38      	bgt.n	8014c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014bae:	eba2 020c 	sub.w	r2, r2, ip
 8014bb2:	b212      	sxth	r2, r2
 8014bb4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8014bb8:	2a00      	cmp	r2, #0
 8014bba:	dcee      	bgt.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014bbc:	b00f      	add	sp, #60	@ 0x3c
 8014bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc2:	45c8      	cmp	r8, r9
 8014bc4:	db2c      	blt.n	8014c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014bc6:	88f3      	ldrh	r3, [r6, #6]
 8014bc8:	4499      	add	r9, r3
 8014bca:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8014bce:	4498      	add	r8, r3
 8014bd0:	fa0f f989 	sxth.w	r9, r9
 8014bd4:	fa0f f888 	sxth.w	r8, r8
 8014bd8:	45c1      	cmp	r9, r8
 8014bda:	db21      	blt.n	8014c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014bdc:	fa1f f28c 	uxth.w	r2, ip
 8014be0:	88b3      	ldrh	r3, [r6, #4]
 8014be2:	45e6      	cmp	lr, ip
 8014be4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8014be8:	4413      	add	r3, r2
 8014bea:	fa1f f88e 	uxth.w	r8, lr
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	fa0f f983 	sxth.w	r9, r3
 8014bf4:	db0a      	blt.n	8014c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8014bf6:	eba3 0308 	sub.w	r3, r3, r8
 8014bfa:	1ac9      	subs	r1, r1, r3
 8014bfc:	b209      	sxth	r1, r1
 8014bfe:	2900      	cmp	r1, #0
 8014c00:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014c04:	ddda      	ble.n	8014bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8014c06:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014c0a:	e7c6      	b.n	8014b9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8014c0c:	4441      	add	r1, r8
 8014c0e:	b209      	sxth	r1, r1
 8014c10:	4549      	cmp	r1, r9
 8014c12:	dc05      	bgt.n	8014c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8014c14:	eba2 0208 	sub.w	r2, r2, r8
 8014c18:	b212      	sxth	r2, r2
 8014c1a:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014c1e:	e7cb      	b.n	8014bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8014c20:	4607      	mov	r7, r0
 8014c22:	e7bb      	b.n	8014b9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8014c24:	2d00      	cmp	r5, #0
 8014c26:	d181      	bne.n	8014b2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8014c28:	2f00      	cmp	r7, #0
 8014c2a:	f000 81dd 	beq.w	8014fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014c2e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014c32:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014c36:	b2b3      	uxth	r3, r6
 8014c38:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8014c3c:	9305      	str	r3, [sp, #20]
 8014c3e:	9a05      	ldr	r2, [sp, #20]
 8014c40:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014c44:	4413      	add	r3, r2
 8014c46:	b2ba      	uxth	r2, r7
 8014c48:	4492      	add	sl, r2
 8014c4a:	b29b      	uxth	r3, r3
 8014c4c:	fa1f fa8a 	uxth.w	sl, sl
 8014c50:	fa0f f883 	sxth.w	r8, r3
 8014c54:	fa0f f98a 	sxth.w	r9, sl
 8014c58:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014c5c:	9b04      	ldr	r3, [sp, #16]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d052      	beq.n	8014d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8014c62:	9903      	ldr	r1, [sp, #12]
 8014c64:	4620      	mov	r0, r4
 8014c66:	f7ff fd27 	bl	80146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014c6a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014c6e:	b1c0      	cbz	r0, 8014ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014c70:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014c74:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014c78:	4576      	cmp	r6, lr
 8014c7a:	dc22      	bgt.n	8014cc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014c7c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014c80:	44f4      	add	ip, lr
 8014c82:	fa0f fc8c 	sxth.w	ip, ip
 8014c86:	45e0      	cmp	r8, ip
 8014c88:	db1b      	blt.n	8014cc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8014c8a:	428f      	cmp	r7, r1
 8014c8c:	fa1f fc81 	uxth.w	ip, r1
 8014c90:	88e1      	ldrh	r1, [r4, #6]
 8014c92:	dc0d      	bgt.n	8014cb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014c94:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014c98:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014c9c:	eba1 010c 	sub.w	r1, r1, ip
 8014ca0:	80e1      	strh	r1, [r4, #6]
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	9904      	ldr	r1, [sp, #16]
 8014ca6:	3c08      	subs	r4, #8
 8014ca8:	4605      	mov	r5, r0
 8014caa:	3901      	subs	r1, #1
 8014cac:	9104      	str	r1, [sp, #16]
 8014cae:	e7d3      	b.n	8014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8014cb0:	4461      	add	r1, ip
 8014cb2:	b209      	sxth	r1, r1
 8014cb4:	4549      	cmp	r1, r9
 8014cb6:	dcf5      	bgt.n	8014ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014cb8:	eba2 0c0c 	sub.w	ip, r2, ip
 8014cbc:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014cc0:	e7ef      	b.n	8014ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014cc2:	428f      	cmp	r7, r1
 8014cc4:	dcee      	bgt.n	8014ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014cc6:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014cca:	4461      	add	r1, ip
 8014ccc:	b209      	sxth	r1, r1
 8014cce:	4589      	cmp	r9, r1
 8014cd0:	dbe8      	blt.n	8014ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014cd2:	4576      	cmp	r6, lr
 8014cd4:	fa1f fc8e 	uxth.w	ip, lr
 8014cd8:	88a1      	ldrh	r1, [r4, #4]
 8014cda:	dc07      	bgt.n	8014cec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8014cdc:	eba3 0c0c 	sub.w	ip, r3, ip
 8014ce0:	f8a4 8000 	strh.w	r8, [r4]
 8014ce4:	eba1 010c 	sub.w	r1, r1, ip
 8014ce8:	80a1      	strh	r1, [r4, #4]
 8014cea:	e7da      	b.n	8014ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014cec:	4461      	add	r1, ip
 8014cee:	b209      	sxth	r1, r1
 8014cf0:	4588      	cmp	r8, r1
 8014cf2:	dbd7      	blt.n	8014ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8014cf4:	9905      	ldr	r1, [sp, #20]
 8014cf6:	eba1 0c0c 	sub.w	ip, r1, ip
 8014cfa:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014cfe:	e7d0      	b.n	8014ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8014d00:	2401b53e 	.word	0x2401b53e
 8014d04:	2401b53c 	.word	0x2401b53c
 8014d08:	2d00      	cmp	r5, #0
 8014d0a:	f000 816d 	beq.w	8014fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014d0e:	9b06      	ldr	r3, [sp, #24]
 8014d10:	445b      	add	r3, fp
 8014d12:	461c      	mov	r4, r3
 8014d14:	9b02      	ldr	r3, [sp, #8]
 8014d16:	3301      	adds	r3, #1
 8014d18:	f000 8166 	beq.w	8014fe8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8014d1c:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014d20:	9803      	ldr	r0, [sp, #12]
 8014d22:	4629      	mov	r1, r5
 8014d24:	f7ff fd3a 	bl	801479c <_ZNK8touchgfx4Rect8includesERKS0_>
 8014d28:	b120      	cbz	r0, 8014d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8014d2a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014d2e:	9801      	ldr	r0, [sp, #4]
 8014d30:	f7ff feb0 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014d34:	9903      	ldr	r1, [sp, #12]
 8014d36:	4628      	mov	r0, r5
 8014d38:	f7ff fcbe 	bl	80146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	f000 809c 	beq.w	8014e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014d42:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014d46:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014d4a:	fa1f f189 	uxth.w	r1, r9
 8014d4e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014d52:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d54:	eb01 0c03 	add.w	ip, r1, r3
 8014d58:	b283      	uxth	r3, r0
 8014d5a:	4548      	cmp	r0, r9
 8014d5c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014d60:	fa1f fa8c 	uxth.w	sl, ip
 8014d64:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014d68:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014d6c:	eb03 050c 	add.w	r5, r3, ip
 8014d70:	b2ad      	uxth	r5, r5
 8014d72:	9505      	str	r5, [sp, #20]
 8014d74:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014d78:	9504      	str	r5, [sp, #16]
 8014d7a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014d7e:	f340 8099 	ble.w	8014eb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8014d82:	1a5b      	subs	r3, r3, r1
 8014d84:	4596      	cmp	lr, r2
 8014d86:	fa0f f08a 	sxth.w	r0, sl
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	b21e      	sxth	r6, r3
 8014d8e:	dd2e      	ble.n	8014dee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8014d90:	9f02      	ldr	r7, [sp, #8]
 8014d92:	fa1f fe8e 	uxth.w	lr, lr
 8014d96:	b292      	uxth	r2, r2
 8014d98:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014d9c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014da0:	9f04      	ldr	r7, [sp, #16]
 8014da2:	ebae 0102 	sub.w	r1, lr, r2
 8014da6:	44a6      	add	lr, r4
 8014da8:	1a3f      	subs	r7, r7, r0
 8014daa:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014dae:	b289      	uxth	r1, r1
 8014db0:	4402      	add	r2, r0
 8014db2:	fa0f fe8e 	sxth.w	lr, lr
 8014db6:	b20d      	sxth	r5, r1
 8014db8:	b212      	sxth	r2, r2
 8014dba:	436f      	muls	r7, r5
 8014dbc:	ebae 0202 	sub.w	r2, lr, r2
 8014dc0:	4372      	muls	r2, r6
 8014dc2:	4297      	cmp	r7, r2
 8014dc4:	db09      	blt.n	8014dda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8014dc6:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014dca:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014dce:	449c      	add	ip, r3
 8014dd0:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014dd4:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014dd8:	e686      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014dda:	4421      	add	r1, r4
 8014ddc:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014de0:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014de4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014de8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014dec:	e67c      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014dee:	9f04      	ldr	r7, [sp, #16]
 8014df0:	42b8      	cmp	r0, r7
 8014df2:	da27      	bge.n	8014e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8014df4:	9902      	ldr	r1, [sp, #8]
 8014df6:	1a3f      	subs	r7, r7, r0
 8014df8:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014dfc:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014e00:	eb05 010e 	add.w	r1, r5, lr
 8014e04:	fa1f f881 	uxth.w	r8, r1
 8014e08:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014e0c:	4411      	add	r1, r2
 8014e0e:	fa0f f988 	sxth.w	r9, r8
 8014e12:	eba2 020e 	sub.w	r2, r2, lr
 8014e16:	eba1 0108 	sub.w	r1, r1, r8
 8014e1a:	4372      	muls	r2, r6
 8014e1c:	b289      	uxth	r1, r1
 8014e1e:	fa0f f881 	sxth.w	r8, r1
 8014e22:	fb08 f707 	mul.w	r7, r8, r7
 8014e26:	42ba      	cmp	r2, r7
 8014e28:	dc06      	bgt.n	8014e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8014e2a:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014e2e:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014e32:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014e36:	e7ca      	b.n	8014dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8014e38:	4429      	add	r1, r5
 8014e3a:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014e3e:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014e42:	e651      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014e44:	9805      	ldr	r0, [sp, #20]
 8014e46:	2d06      	cmp	r5, #6
 8014e48:	ebaa 0000 	sub.w	r0, sl, r0
 8014e4c:	b280      	uxth	r0, r0
 8014e4e:	fa0f fe80 	sxth.w	lr, r0
 8014e52:	d817      	bhi.n	8014e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8014e54:	9b04      	ldr	r3, [sp, #16]
 8014e56:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014e5a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014e5e:	1c6b      	adds	r3, r5, #1
 8014e60:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014e64:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014e68:	9b01      	ldr	r3, [sp, #4]
 8014e6a:	9801      	ldr	r0, [sp, #4]
 8014e6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e70:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014e74:	805a      	strh	r2, [r3, #2]
 8014e76:	809e      	strh	r6, [r3, #4]
 8014e78:	80d9      	strh	r1, [r3, #6]
 8014e7a:	9b02      	ldr	r3, [sp, #8]
 8014e7c:	3c08      	subs	r4, #8
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	9302      	str	r3, [sp, #8]
 8014e82:	e747      	b.n	8014d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8014e84:	9a02      	ldr	r2, [sp, #8]
 8014e86:	45b6      	cmp	lr, r6
 8014e88:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014e8c:	db0d      	blt.n	8014eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8014e8e:	449c      	add	ip, r3
 8014e90:	445a      	add	r2, fp
 8014e92:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014e96:	fa1f fc8c 	uxth.w	ip, ip
 8014e9a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014e9e:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014ea2:	448c      	add	ip, r1
 8014ea4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014ea8:	e61e      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014eaa:	445a      	add	r2, fp
 8014eac:	4484      	add	ip, r0
 8014eae:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8014eb2:	e78f      	b.n	8014dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014eb4:	fa1f f18e 	uxth.w	r1, lr
 8014eb8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014ebc:	b293      	uxth	r3, r2
 8014ebe:	4596      	cmp	lr, r2
 8014ec0:	eb01 0806 	add.w	r8, r1, r6
 8014ec4:	9306      	str	r3, [sp, #24]
 8014ec6:	fa1f f888 	uxth.w	r8, r8
 8014eca:	9f06      	ldr	r7, [sp, #24]
 8014ecc:	fa0f f388 	sxth.w	r3, r8
 8014ed0:	9307      	str	r3, [sp, #28]
 8014ed2:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014ed6:	443b      	add	r3, r7
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	9308      	str	r3, [sp, #32]
 8014edc:	da24      	bge.n	8014f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8014ede:	9905      	ldr	r1, [sp, #20]
 8014ee0:	eba3 0308 	sub.w	r3, r3, r8
 8014ee4:	eba2 020e 	sub.w	r2, r2, lr
 8014ee8:	eba9 0000 	sub.w	r0, r9, r0
 8014eec:	ebaa 0401 	sub.w	r4, sl, r1
 8014ef0:	b29b      	uxth	r3, r3
 8014ef2:	b2a4      	uxth	r4, r4
 8014ef4:	b219      	sxth	r1, r3
 8014ef6:	b225      	sxth	r5, r4
 8014ef8:	4348      	muls	r0, r1
 8014efa:	436a      	muls	r2, r5
 8014efc:	4282      	cmp	r2, r0
 8014efe:	9a02      	ldr	r2, [sp, #8]
 8014f00:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014f04:	445a      	add	r2, fp
 8014f06:	dc06      	bgt.n	8014f16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8014f08:	9b07      	ldr	r3, [sp, #28]
 8014f0a:	44a4      	add	ip, r4
 8014f0c:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014f10:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014f14:	e75e      	b.n	8014dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014f16:	9904      	ldr	r1, [sp, #16]
 8014f18:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014f1c:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014f20:	4433      	add	r3, r6
 8014f22:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014f26:	e5df      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014f28:	9f06      	ldr	r7, [sp, #24]
 8014f2a:	9b04      	ldr	r3, [sp, #16]
 8014f2c:	1bc9      	subs	r1, r1, r7
 8014f2e:	fa0f f78a 	sxth.w	r7, sl
 8014f32:	b289      	uxth	r1, r1
 8014f34:	429f      	cmp	r7, r3
 8014f36:	fa0f fe81 	sxth.w	lr, r1
 8014f3a:	dd23      	ble.n	8014f84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8014f3c:	9a05      	ldr	r2, [sp, #20]
 8014f3e:	eba9 0000 	sub.w	r0, r9, r0
 8014f42:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014f46:	ebaa 0202 	sub.w	r2, sl, r2
 8014f4a:	9d07      	ldr	r5, [sp, #28]
 8014f4c:	fb0e f000 	mul.w	r0, lr, r0
 8014f50:	b292      	uxth	r2, r2
 8014f52:	eba5 0a03 	sub.w	sl, r5, r3
 8014f56:	9b02      	ldr	r3, [sp, #8]
 8014f58:	b214      	sxth	r4, r2
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	fb04 fa0a 	mul.w	sl, r4, sl
 8014f60:	445b      	add	r3, fp
 8014f62:	4550      	cmp	r0, sl
 8014f64:	db03      	blt.n	8014f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8014f66:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8014f6a:	4494      	add	ip, r2
 8014f6c:	e732      	b.n	8014dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8014f6e:	9a04      	ldr	r2, [sp, #16]
 8014f70:	4431      	add	r1, r6
 8014f72:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8014f76:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014f7a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014f7e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014f82:	e75c      	b.n	8014e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8014f84:	9b08      	ldr	r3, [sp, #32]
 8014f86:	2d06      	cmp	r5, #6
 8014f88:	eba3 0308 	sub.w	r3, r3, r8
 8014f8c:	b29b      	uxth	r3, r3
 8014f8e:	b218      	sxth	r0, r3
 8014f90:	d813      	bhi.n	8014fba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8014f92:	9b07      	ldr	r3, [sp, #28]
 8014f94:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014f98:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014f9c:	1c6b      	adds	r3, r5, #1
 8014f9e:	9901      	ldr	r1, [sp, #4]
 8014fa0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014fa4:	9b01      	ldr	r3, [sp, #4]
 8014fa6:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014faa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014fae:	805a      	strh	r2, [r3, #2]
 8014fb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014fb2:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014fb6:	809a      	strh	r2, [r3, #4]
 8014fb8:	e75f      	b.n	8014e7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8014fba:	9c02      	ldr	r4, [sp, #8]
 8014fbc:	4570      	cmp	r0, lr
 8014fbe:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014fc2:	db0d      	blt.n	8014fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8014fc4:	4431      	add	r1, r6
 8014fc6:	9b06      	ldr	r3, [sp, #24]
 8014fc8:	445c      	add	r4, fp
 8014fca:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014fce:	b289      	uxth	r1, r1
 8014fd0:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8014fd4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014fd8:	4419      	add	r1, r3
 8014fda:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014fde:	e583      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8014fe0:	445c      	add	r4, fp
 8014fe2:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8014fe6:	e79b      	b.n	8014f20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8014fe8:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014fec:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014ff0:	1e65      	subs	r5, r4, #1
 8014ff2:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014ff6:	b2ad      	uxth	r5, r5
 8014ff8:	42b5      	cmp	r5, r6
 8014ffa:	d044      	beq.n	8015086 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8014ffc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8015000:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8015004:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8015008:	4282      	cmp	r2, r0
 801500a:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801500e:	d11f      	bne.n	8015050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8015010:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8015014:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8015018:	459c      	cmp	ip, r3
 801501a:	d119      	bne.n	8015050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801501c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8015020:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8015024:	19d8      	adds	r0, r3, r7
 8015026:	b200      	sxth	r0, r0
 8015028:	4288      	cmp	r0, r1
 801502a:	d109      	bne.n	8015040 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801502c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8015030:	4413      	add	r3, r2
 8015032:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8015036:	4629      	mov	r1, r5
 8015038:	9801      	ldr	r0, [sp, #4]
 801503a:	f7ff fd2b 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801503e:	e003      	b.n	8015048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015040:	4411      	add	r1, r2
 8015042:	b209      	sxth	r1, r1
 8015044:	42b9      	cmp	r1, r7
 8015046:	d0f3      	beq.n	8015030 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8015048:	3d01      	subs	r5, #1
 801504a:	3c08      	subs	r4, #8
 801504c:	b2ad      	uxth	r5, r5
 801504e:	e7d3      	b.n	8014ff8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8015050:	42b9      	cmp	r1, r7
 8015052:	d1f9      	bne.n	8015048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015054:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8015058:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801505c:	4299      	cmp	r1, r3
 801505e:	d1f3      	bne.n	8015048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015060:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8015064:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8015068:	181f      	adds	r7, r3, r0
 801506a:	b23f      	sxth	r7, r7
 801506c:	42ba      	cmp	r2, r7
 801506e:	d105      	bne.n	801507c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8015070:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8015074:	440b      	add	r3, r1
 8015076:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801507a:	e7dc      	b.n	8015036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801507c:	440a      	add	r2, r1
 801507e:	b212      	sxth	r2, r2
 8015080:	4290      	cmp	r0, r2
 8015082:	d1e1      	bne.n	8015048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8015084:	e7f6      	b.n	8015074 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8015086:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801508a:	2e07      	cmp	r6, #7
 801508c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015090:	d812      	bhi.n	80150b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8015092:	1c75      	adds	r5, r6, #1
 8015094:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8015098:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801509c:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80150a0:	9d01      	ldr	r5, [sp, #4]
 80150a2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80150a6:	442c      	add	r4, r5
 80150a8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80150ac:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80150b0:	8061      	strh	r1, [r4, #2]
 80150b2:	80a2      	strh	r2, [r4, #4]
 80150b4:	80e3      	strh	r3, [r4, #6]
 80150b6:	e581      	b.n	8014bbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80150b8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80150bc:	3e01      	subs	r6, #1
 80150be:	445c      	add	r4, fp
 80150c0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80150c4:	f04f 37ff 	mov.w	r7, #4294967295
 80150c8:	2500      	movs	r5, #0
 80150ca:	9305      	str	r3, [sp, #20]
 80150cc:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80150d0:	1e72      	subs	r2, r6, #1
 80150d2:	9302      	str	r3, [sp, #8]
 80150d4:	4691      	mov	r9, r2
 80150d6:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80150da:	9304      	str	r3, [sp, #16]
 80150dc:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 80150e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80150e4:	6818      	ldr	r0, [r3, #0]
 80150e6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80150ea:	9207      	str	r2, [sp, #28]
 80150ec:	bf16      	itet	ne
 80150ee:	9905      	ldrne	r1, [sp, #20]
 80150f0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80150f4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80150f8:	9306      	str	r3, [sp, #24]
 80150fa:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80150fe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015102:	fb18 f801 	smulbb	r8, r8, r1
 8015106:	6859      	ldr	r1, [r3, #4]
 8015108:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801510c:	4671      	mov	r1, lr
 801510e:	a80c      	add	r0, sp, #48	@ 0x30
 8015110:	f7ff fb6a 	bl	80147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015114:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8015118:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801511c:	f04f 0c08 	mov.w	ip, #8
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	9a02      	ldr	r2, [sp, #8]
 8015124:	fb10 f001 	smulbb	r0, r0, r1
 8015128:	fb02 8803 	mla	r8, r2, r3, r8
 801512c:	eba0 0108 	sub.w	r1, r0, r8
 8015130:	fb90 f0fc 	sdiv	r0, r0, ip
 8015134:	4288      	cmp	r0, r1
 8015136:	dc20      	bgt.n	801517a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8015138:	4551      	cmp	r1, sl
 801513a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801513e:	da03      	bge.n	8015148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8015140:	b1d9      	cbz	r1, 801517a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8015142:	468a      	mov	sl, r1
 8015144:	464f      	mov	r7, r9
 8015146:	4635      	mov	r5, r6
 8015148:	f109 39ff 	add.w	r9, r9, #4294967295
 801514c:	f119 0f02 	cmn.w	r9, #2
 8015150:	d1c6      	bne.n	80150e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8015152:	4616      	mov	r6, r2
 8015154:	3201      	adds	r2, #1
 8015156:	f1a4 0408 	sub.w	r4, r4, #8
 801515a:	d1b7      	bne.n	80150cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801515c:	9b01      	ldr	r3, [sp, #4]
 801515e:	b2ac      	uxth	r4, r5
 8015160:	00ed      	lsls	r5, r5, #3
 8015162:	1958      	adds	r0, r3, r5
 8015164:	1c7b      	adds	r3, r7, #1
 8015166:	d10b      	bne.n	8015180 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8015168:	4601      	mov	r1, r0
 801516a:	9803      	ldr	r0, [sp, #12]
 801516c:	f7ff fb3c 	bl	80147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015170:	4621      	mov	r1, r4
 8015172:	9801      	ldr	r0, [sp, #4]
 8015174:	f7ff fc8e 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015178:	e4b6      	b.n	8014ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801517a:	464f      	mov	r7, r9
 801517c:	4635      	mov	r5, r6
 801517e:	e7ed      	b.n	801515c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8015180:	9b01      	ldr	r3, [sp, #4]
 8015182:	00ff      	lsls	r7, r7, #3
 8015184:	445d      	add	r5, fp
 8015186:	19d9      	adds	r1, r3, r7
 8015188:	445f      	add	r7, fp
 801518a:	f7ff fb2d 	bl	80147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801518e:	9b03      	ldr	r3, [sp, #12]
 8015190:	cb03      	ldmia	r3!, {r0, r1}
 8015192:	9b03      	ldr	r3, [sp, #12]
 8015194:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8015198:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801519c:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80151a0:	6869      	ldr	r1, [r5, #4]
 80151a2:	c303      	stmia	r3!, {r0, r1}
 80151a4:	e7e4      	b.n	8015170 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80151a6:	bf00      	nop

080151a8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ac:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80151b0:	b09b      	sub	sp, #108	@ 0x6c
 80151b2:	4604      	mov	r4, r0
 80151b4:	4630      	mov	r0, r6
 80151b6:	f7fd f9c2 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80151ba:	4605      	mov	r5, r0
 80151bc:	b948      	cbnz	r0, 80151d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	4620      	mov	r0, r4
 80151c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151c4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80151c8:	4798      	blx	r3
 80151ca:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80151ce:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80151d2:	4bc5      	ldr	r3, [pc, #788]	@ (80154e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d03f      	beq.n	801525a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80151da:	4dc4      	ldr	r5, [pc, #784]	@ (80154ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80151dc:	4628      	mov	r0, r5
 80151de:	f7fd f9ae 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80151e2:	4606      	mov	r6, r0
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d138      	bne.n	801525a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80151e8:	4628      	mov	r0, r5
 80151ea:	f7ff f99b 	bl	8014524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80151ee:	6823      	ldr	r3, [r4, #0]
 80151f0:	6829      	ldr	r1, [r5, #0]
 80151f2:	4620      	mov	r0, r4
 80151f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80151f6:	686a      	ldr	r2, [r5, #4]
 80151f8:	4798      	blx	r3
 80151fa:	802e      	strh	r6, [r5, #0]
 80151fc:	806e      	strh	r6, [r5, #2]
 80151fe:	80ae      	strh	r6, [r5, #4]
 8015200:	80ee      	strh	r6, [r5, #6]
 8015202:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8015206:	4dba      	ldr	r5, [pc, #744]	@ (80154f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8015208:	4640      	mov	r0, r8
 801520a:	f7ff fbe7 	bl	80149dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801520e:	882e      	ldrh	r6, [r5, #0]
 8015210:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8015214:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8015218:	4633      	mov	r3, r6
 801521a:	42bb      	cmp	r3, r7
 801521c:	d224      	bcs.n	8015268 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801521e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8015222:	2907      	cmp	r1, #7
 8015224:	d816      	bhi.n	8015254 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8015226:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801522a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801522e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8015232:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8015236:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801523a:	1c4a      	adds	r2, r1, #1
 801523c:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8015240:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8015244:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8015248:	f8a2 a002 	strh.w	sl, [r2, #2]
 801524c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8015250:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015254:	3301      	adds	r3, #1
 8015256:	b29b      	uxth	r3, r3
 8015258:	e7df      	b.n	801521a <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801525a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801525e:	2b00      	cmp	r3, #0
 8015260:	d1cf      	bne.n	8015202 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8015262:	b01b      	add	sp, #108	@ 0x6c
 8015264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015268:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801526c:	42b3      	cmp	r3, r6
 801526e:	d90c      	bls.n	801528a <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8015270:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8015274:	6822      	ldr	r2, [r4, #0]
 8015276:	3601      	adds	r6, #1
 8015278:	4620      	mov	r0, r4
 801527a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801527c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8015280:	b2b6      	uxth	r6, r6
 8015282:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8015286:	47b8      	blx	r7
 8015288:	e7ee      	b.n	8015268 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801528a:	4a9a      	ldr	r2, [pc, #616]	@ (80154f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801528c:	6813      	ldr	r3, [r2, #0]
 801528e:	4691      	mov	r9, r2
 8015290:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8015294:	2b01      	cmp	r3, #1
 8015296:	f040 80e0 	bne.w	801545a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801529a:	8829      	ldrh	r1, [r5, #0]
 801529c:	2600      	movs	r6, #0
 801529e:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80152a2:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80152a6:	33ae      	adds	r3, #174	@ 0xae
 80152a8:	428f      	cmp	r7, r1
 80152aa:	f103 0308 	add.w	r3, r3, #8
 80152ae:	dd0a      	ble.n	80152c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80152b0:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80152b4:	3101      	adds	r1, #1
 80152b6:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80152ba:	4402      	add	r2, r0
 80152bc:	b212      	sxth	r2, r2
 80152be:	4296      	cmp	r6, r2
 80152c0:	bfb8      	it	lt
 80152c2:	4616      	movlt	r6, r2
 80152c4:	e7f0      	b.n	80152a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80152c6:	4b8c      	ldr	r3, [pc, #560]	@ (80154f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80152c8:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80154f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80152cc:	881b      	ldrh	r3, [r3, #0]
 80152ce:	2b0f      	cmp	r3, #15
 80152d0:	bf8c      	ite	hi
 80152d2:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80152d6:	f04f 0b01 	movls.w	fp, #1
 80152da:	2300      	movs	r3, #0
 80152dc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80152e0:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 80152e4:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 80152e8:	4b82      	ldr	r3, [pc, #520]	@ (80154f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80152ea:	4438      	add	r0, r7
 80152ec:	b207      	sxth	r7, r0
 80152ee:	6818      	ldr	r0, [r3, #0]
 80152f0:	42b7      	cmp	r7, r6
 80152f2:	6803      	ldr	r3, [r0, #0]
 80152f4:	f280 8083 	bge.w	80153fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80152f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80152fc:	4798      	blx	r3
 80152fe:	eb07 030b 	add.w	r3, r7, fp
 8015302:	4298      	cmp	r0, r3
 8015304:	da07      	bge.n	8015316 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8015306:	42b0      	cmp	r0, r6
 8015308:	da05      	bge.n	8015316 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801530a:	4287      	cmp	r7, r0
 801530c:	dd6c      	ble.n	80153e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801530e:	2f00      	cmp	r7, #0
 8015310:	dd6a      	ble.n	80153e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015312:	4630      	mov	r0, r6
 8015314:	e004      	b.n	8015320 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8015316:	4287      	cmp	r7, r0
 8015318:	dcfb      	bgt.n	8015312 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801531a:	42b0      	cmp	r0, r6
 801531c:	bfa8      	it	ge
 801531e:	4630      	movge	r0, r6
 8015320:	4b76      	ldr	r3, [pc, #472]	@ (80154fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8015322:	1bc0      	subs	r0, r0, r7
 8015324:	2200      	movs	r2, #0
 8015326:	f8ad 7016 	strh.w	r7, [sp, #22]
 801532a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801532e:	882f      	ldrh	r7, [r5, #0]
 8015330:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015334:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015338:	f8ad 001a 	strh.w	r0, [sp, #26]
 801533c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015340:	42bb      	cmp	r3, r7
 8015342:	d9cd      	bls.n	80152e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8015344:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8015348:	ab07      	add	r3, sp, #28
 801534a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801534e:	6851      	ldr	r1, [r2, #4]
 8015350:	c303      	stmia	r3!, {r0, r1}
 8015352:	a905      	add	r1, sp, #20
 8015354:	a807      	add	r0, sp, #28
 8015356:	f7ff f9af 	bl	80146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801535a:	2800      	cmp	r0, #0
 801535c:	d04c      	beq.n	80153f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801535e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8015362:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015366:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801536a:	4686      	mov	lr, r0
 801536c:	4290      	cmp	r0, r2
 801536e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8015372:	4450      	add	r0, sl
 8015374:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8015378:	bfb8      	it	lt
 801537a:	4696      	movlt	lr, r2
 801537c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015380:	4452      	add	r2, sl
 8015382:	b280      	uxth	r0, r0
 8015384:	4299      	cmp	r1, r3
 8015386:	468c      	mov	ip, r1
 8015388:	b292      	uxth	r2, r2
 801538a:	9302      	str	r3, [sp, #8]
 801538c:	bfb8      	it	lt
 801538e:	469c      	movlt	ip, r3
 8015390:	b203      	sxth	r3, r0
 8015392:	fa0f fa82 	sxth.w	sl, r2
 8015396:	f8ad e01c 	strh.w	lr, [sp, #28]
 801539a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801539e:	4553      	cmp	r3, sl
 80153a0:	bfb8      	it	lt
 80153a2:	4602      	movlt	r2, r0
 80153a4:	9b02      	ldr	r3, [sp, #8]
 80153a6:	eba2 020e 	sub.w	r2, r2, lr
 80153aa:	f8ad 2020 	strh.w	r2, [sp, #32]
 80153ae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80153b2:	4411      	add	r1, r2
 80153b4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80153b8:	4413      	add	r3, r2
 80153ba:	b289      	uxth	r1, r1
 80153bc:	b29b      	uxth	r3, r3
 80153be:	b208      	sxth	r0, r1
 80153c0:	b21a      	sxth	r2, r3
 80153c2:	4290      	cmp	r0, r2
 80153c4:	bfb8      	it	lt
 80153c6:	460b      	movlt	r3, r1
 80153c8:	eba3 030c 	sub.w	r3, r3, ip
 80153cc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80153d0:	a807      	add	r0, sp, #28
 80153d2:	f7fd f8b4 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80153d6:	b920      	cbnz	r0, 80153e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80153d8:	6823      	ldr	r3, [r4, #0]
 80153da:	a907      	add	r1, sp, #28
 80153dc:	4620      	mov	r0, r4
 80153de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80153e0:	4798      	blx	r3
 80153e2:	3701      	adds	r7, #1
 80153e4:	b2bf      	uxth	r7, r7
 80153e6:	e7a9      	b.n	801533c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80153e8:	f8d9 0000 	ldr.w	r0, [r9]
 80153ec:	2101      	movs	r1, #1
 80153ee:	6803      	ldr	r3, [r0, #0]
 80153f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80153f4:	4798      	blx	r3
 80153f6:	e773      	b.n	80152e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80153f8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80153fc:	e7e8      	b.n	80153d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80153fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015400:	4798      	blx	r3
 8015402:	4b3f      	ldr	r3, [pc, #252]	@ (8015500 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8015404:	781b      	ldrb	r3, [r3, #0]
 8015406:	2b00      	cmp	r3, #0
 8015408:	f43f af2b 	beq.w	8015262 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801540c:	2300      	movs	r3, #0
 801540e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8015412:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8015416:	882b      	ldrh	r3, [r5, #0]
 8015418:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801541c:	42ab      	cmp	r3, r5
 801541e:	f4bf af20 	bcs.w	8015262 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8015422:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8015426:	2907      	cmp	r1, #7
 8015428:	d814      	bhi.n	8015454 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801542a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801542e:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8015432:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8015436:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801543a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801543e:	1c4a      	adds	r2, r1, #1
 8015440:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8015444:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8015448:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801544c:	f8a2 c002 	strh.w	ip, [r2, #2]
 8015450:	8097      	strh	r7, [r2, #4]
 8015452:	80d6      	strh	r6, [r2, #6]
 8015454:	3301      	adds	r3, #1
 8015456:	b29b      	uxth	r3, r3
 8015458:	e7e0      	b.n	801541c <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801545a:	2b02      	cmp	r3, #2
 801545c:	f040 8133 	bne.w	80156c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8015460:	4b28      	ldr	r3, [pc, #160]	@ (8015504 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8015462:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	2b01      	cmp	r3, #1
 801546a:	f000 8098 	beq.w	801559e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801546e:	882a      	ldrh	r2, [r5, #0]
 8015470:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8015474:	3201      	adds	r2, #1
 8015476:	b292      	uxth	r2, r2
 8015478:	2900      	cmp	r1, #0
 801547a:	d0c2      	beq.n	8015402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801547c:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8015480:	4694      	mov	ip, r2
 8015482:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8015486:	f04f 0900 	mov.w	r9, #0
 801548a:	441e      	add	r6, r3
 801548c:	b236      	sxth	r6, r6
 801548e:	fa1f f38c 	uxth.w	r3, ip
 8015492:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8015496:	4299      	cmp	r1, r3
 8015498:	f240 80be 	bls.w	8015618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801549c:	4427      	add	r7, r4
 801549e:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80154a2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80154a6:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80154aa:	4283      	cmp	r3, r0
 80154ac:	f340 80a0 	ble.w	80155f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80154b0:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80154b4:	46e1      	mov	r9, ip
 80154b6:	4406      	add	r6, r0
 80154b8:	b236      	sxth	r6, r6
 80154ba:	429e      	cmp	r6, r3
 80154bc:	bfa8      	it	ge
 80154be:	461e      	movge	r6, r3
 80154c0:	f10c 0c01 	add.w	ip, ip, #1
 80154c4:	e7e3      	b.n	801548e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80154c6:	d10a      	bne.n	80154de <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80154c8:	4562      	cmp	r2, ip
 80154ca:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80154ce:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80154d2:	bfb8      	it	lt
 80154d4:	4662      	movlt	r2, ip
 80154d6:	4288      	cmp	r0, r1
 80154d8:	bfb8      	it	lt
 80154da:	461f      	movlt	r7, r3
 80154dc:	e086      	b.n	80155ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80154de:	428a      	cmp	r2, r1
 80154e0:	bfb8      	it	lt
 80154e2:	460a      	movlt	r2, r1
 80154e4:	e082      	b.n	80155ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80154e6:	bf00      	nop
 80154e8:	2401b580 	.word	0x2401b580
 80154ec:	2401b58c 	.word	0x2401b58c
 80154f0:	24000050 	.word	0x24000050
 80154f4:	2401b548 	.word	0x2401b548
 80154f8:	2401b53e 	.word	0x2401b53e
 80154fc:	2401b53c 	.word	0x2401b53c
 8015500:	2401b546 	.word	0x2401b546
 8015504:	2401b540 	.word	0x2401b540
 8015508:	19a1      	adds	r1, r4, r6
 801550a:	ab07      	add	r3, sp, #28
 801550c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015510:	6849      	ldr	r1, [r1, #4]
 8015512:	c303      	stmia	r3!, {r0, r1}
 8015514:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015518:	a807      	add	r0, sp, #28
 801551a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801551e:	2b13      	cmp	r3, #19
 8015520:	440b      	add	r3, r1
 8015522:	bfd8      	it	le
 8015524:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015528:	1a9b      	subs	r3, r3, r2
 801552a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801552e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015532:	f7ff f811 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015536:	a807      	add	r0, sp, #28
 8015538:	f7fd f801 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 801553c:	bb78      	cbnz	r0, 801559e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801553e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8015542:	4426      	add	r6, r4
 8015544:	f8d9 0000 	ldr.w	r0, [r9]
 8015548:	f1bc 0f14 	cmp.w	ip, #20
 801554c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015550:	f8d0 e000 	ldr.w	lr, [r0]
 8015554:	bfa8      	it	ge
 8015556:	f04f 0c14 	movge.w	ip, #20
 801555a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801555e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015562:	fa1f fc8c 	uxth.w	ip, ip
 8015566:	f8cd c000 	str.w	ip, [sp]
 801556a:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801556e:	47d8      	blx	fp
 8015570:	4683      	mov	fp, r0
 8015572:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8015576:	a807      	add	r0, sp, #28
 8015578:	f7fe ffd4 	bl	8014524 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801557c:	6823      	ldr	r3, [r4, #0]
 801557e:	4620      	mov	r0, r4
 8015580:	a907      	add	r1, sp, #28
 8015582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015584:	4798      	blx	r3
 8015586:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801558a:	eba0 000b 	sub.w	r0, r0, fp
 801558e:	b200      	sxth	r0, r0
 8015590:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8015594:	b918      	cbnz	r0, 801559e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8015596:	b2b9      	uxth	r1, r7
 8015598:	4650      	mov	r0, sl
 801559a:	f7ff fa7b 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801559e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80155a2:	f1bb 0f00 	cmp.w	fp, #0
 80155a6:	f43f af2c 	beq.w	8015402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80155aa:	882b      	ldrh	r3, [r5, #0]
 80155ac:	2700      	movs	r7, #0
 80155ae:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80155b2:	3301      	adds	r3, #1
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	b299      	uxth	r1, r3
 80155b8:	00fe      	lsls	r6, r7, #3
 80155ba:	458b      	cmp	fp, r1
 80155bc:	d9a4      	bls.n	8015508 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 80155be:	4426      	add	r6, r4
 80155c0:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80155c4:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 80155c8:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80155cc:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80155d0:	4408      	add	r0, r1
 80155d2:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80155d6:	4461      	add	r1, ip
 80155d8:	b200      	sxth	r0, r0
 80155da:	b209      	sxth	r1, r1
 80155dc:	4288      	cmp	r0, r1
 80155de:	f6bf af72 	bge.w	80154c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80155e2:	4584      	cmp	ip, r0
 80155e4:	4662      	mov	r2, ip
 80155e6:	461f      	mov	r7, r3
 80155e8:	bfb8      	it	lt
 80155ea:	4602      	movlt	r2, r0
 80155ec:	3301      	adds	r3, #1
 80155ee:	e7e2      	b.n	80155b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80155f0:	d10e      	bne.n	8015610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80155f2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80155f6:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80155fa:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80155fe:	4473      	add	r3, lr
 8015600:	b21b      	sxth	r3, r3
 8015602:	429e      	cmp	r6, r3
 8015604:	bfa8      	it	ge
 8015606:	461e      	movge	r6, r3
 8015608:	4287      	cmp	r7, r0
 801560a:	bfb8      	it	lt
 801560c:	46e1      	movlt	r9, ip
 801560e:	e757      	b.n	80154c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015610:	4286      	cmp	r6, r0
 8015612:	bfa8      	it	ge
 8015614:	4606      	movge	r6, r0
 8015616:	e753      	b.n	80154c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015618:	eb0a 0007 	add.w	r0, sl, r7
 801561c:	4427      	add	r7, r4
 801561e:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8015622:	f1bb 0f13 	cmp.w	fp, #19
 8015626:	bfdc      	itt	le
 8015628:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801562c:	445e      	addle	r6, fp
 801562e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015632:	bfd8      	it	le
 8015634:	b236      	sxthle	r6, r6
 8015636:	f7fc ff82 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 801563a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801563e:	2800      	cmp	r0, #0
 8015640:	f47f af1a 	bne.w	8015478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8015644:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8015648:	fa1f fb8b 	uxth.w	fp, fp
 801564c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8015650:	1ab6      	subs	r6, r6, r2
 8015652:	4829      	ldr	r0, [pc, #164]	@ (80156f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8015654:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8015658:	2e14      	cmp	r6, #20
 801565a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801565e:	6800      	ldr	r0, [r0, #0]
 8015660:	bfa8      	it	ge
 8015662:	2614      	movge	r6, #20
 8015664:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015668:	f8ad 201e 	strh.w	r2, [sp, #30]
 801566c:	b289      	uxth	r1, r1
 801566e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015672:	b2b6      	uxth	r6, r6
 8015674:	f8d0 c000 	ldr.w	ip, [r0]
 8015678:	b292      	uxth	r2, r2
 801567a:	455e      	cmp	r6, fp
 801567c:	bf94      	ite	ls
 801567e:	9600      	strls	r6, [sp, #0]
 8015680:	f8cd b000 	strhi.w	fp, [sp]
 8015684:	b29b      	uxth	r3, r3
 8015686:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801568a:	47b0      	blx	r6
 801568c:	6823      	ldr	r3, [r4, #0]
 801568e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8015692:	a907      	add	r1, sp, #28
 8015694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015696:	4620      	mov	r0, r4
 8015698:	4798      	blx	r3
 801569a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801569e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80156a2:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80156a6:	1a5b      	subs	r3, r3, r1
 80156a8:	440a      	add	r2, r1
 80156aa:	b21b      	sxth	r3, r3
 80156ac:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 80156b0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f47f aeda 	bne.w	801546e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80156ba:	fa1f f189 	uxth.w	r1, r9
 80156be:	4650      	mov	r0, sl
 80156c0:	f7ff f9e8 	bl	8014a94 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80156c4:	e6d3      	b.n	801546e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 80156c6:	882e      	ldrh	r6, [r5, #0]
 80156c8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80156cc:	42b3      	cmp	r3, r6
 80156ce:	f67f ae98 	bls.w	8015402 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80156d2:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80156d6:	ab07      	add	r3, sp, #28
 80156d8:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80156dc:	6851      	ldr	r1, [r2, #4]
 80156de:	c303      	stmia	r3!, {r0, r1}
 80156e0:	a807      	add	r0, sp, #28
 80156e2:	f7fc ff2c 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80156e6:	b920      	cbnz	r0, 80156f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	a907      	add	r1, sp, #28
 80156ec:	4620      	mov	r0, r4
 80156ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156f0:	4798      	blx	r3
 80156f2:	3601      	adds	r6, #1
 80156f4:	b2b6      	uxth	r6, r6
 80156f6:	e7e7      	b.n	80156c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80156f8:	2401b548 	.word	0x2401b548

080156fc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80156fc:	4b03      	ldr	r3, [pc, #12]	@ (801570c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80156fe:	2200      	movs	r2, #0
 8015700:	801a      	strh	r2, [r3, #0]
 8015702:	805a      	strh	r2, [r3, #2]
 8015704:	809a      	strh	r2, [r3, #4]
 8015706:	80da      	strh	r2, [r3, #6]
 8015708:	4770      	bx	lr
 801570a:	bf00      	nop
 801570c:	2401b58c 	.word	0x2401b58c

08015710 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	b09d      	sub	sp, #116	@ 0x74
 8015716:	4606      	mov	r6, r0
 8015718:	4614      	mov	r4, r2
 801571a:	468a      	mov	sl, r1
 801571c:	a803      	add	r0, sp, #12
 801571e:	461d      	mov	r5, r3
 8015720:	f000 fd72 	bl	8016208 <_ZN8touchgfx12TextProviderC1Ev>
 8015724:	6833      	ldr	r3, [r6, #0]
 8015726:	4630      	mov	r0, r6
 8015728:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801572c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801572e:	4798      	blx	r3
 8015730:	6833      	ldr	r3, [r6, #0]
 8015732:	4607      	mov	r7, r0
 8015734:	4630      	mov	r0, r6
 8015736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015738:	4798      	blx	r3
 801573a:	462a      	mov	r2, r5
 801573c:	2500      	movs	r5, #0
 801573e:	4621      	mov	r1, r4
 8015740:	9000      	str	r0, [sp, #0]
 8015742:	463b      	mov	r3, r7
 8015744:	462c      	mov	r4, r5
 8015746:	46a9      	mov	r9, r5
 8015748:	46a8      	mov	r8, r5
 801574a:	a803      	add	r0, sp, #12
 801574c:	f000 fdaf 	bl	80162ae <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015750:	2300      	movs	r3, #0
 8015752:	9302      	str	r3, [sp, #8]
 8015754:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015758:	429c      	cmp	r4, r3
 801575a:	d002      	beq.n	8015762 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801575c:	455c      	cmp	r4, fp
 801575e:	bf18      	it	ne
 8015760:	4625      	movne	r5, r4
 8015762:	ab02      	add	r3, sp, #8
 8015764:	4632      	mov	r2, r6
 8015766:	4651      	mov	r1, sl
 8015768:	a803      	add	r0, sp, #12
 801576a:	f001 f895 	bl	8016898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801576e:	4604      	mov	r4, r0
 8015770:	b108      	cbz	r0, 8015776 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015772:	280a      	cmp	r0, #10
 8015774:	d10a      	bne.n	801578c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015776:	45c1      	cmp	r9, r8
 8015778:	bf38      	it	cc
 801577a:	46c1      	movcc	r9, r8
 801577c:	f04f 0800 	mov.w	r8, #0
 8015780:	2c00      	cmp	r4, #0
 8015782:	d1e5      	bne.n	8015750 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015784:	4648      	mov	r0, r9
 8015786:	b01d      	add	sp, #116	@ 0x74
 8015788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801578c:	9a02      	ldr	r2, [sp, #8]
 801578e:	2a00      	cmp	r2, #0
 8015790:	d0de      	beq.n	8015750 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015792:	7b57      	ldrb	r7, [r2, #13]
 8015794:	4629      	mov	r1, r5
 8015796:	6833      	ldr	r3, [r6, #0]
 8015798:	007f      	lsls	r7, r7, #1
 801579a:	8894      	ldrh	r4, [r2, #4]
 801579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801579e:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80157a2:	7a97      	ldrb	r7, [r2, #10]
 80157a4:	4307      	orrs	r7, r0
 80157a6:	4630      	mov	r0, r6
 80157a8:	4798      	blx	r3
 80157aa:	4438      	add	r0, r7
 80157ac:	4480      	add	r8, r0
 80157ae:	fa1f f888 	uxth.w	r8, r8
 80157b2:	e7e5      	b.n	8015780 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080157b4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80157b4:	b508      	push	{r3, lr}
 80157b6:	6803      	ldr	r3, [r0, #0]
 80157b8:	68db      	ldr	r3, [r3, #12]
 80157ba:	4798      	blx	r3
 80157bc:	b128      	cbz	r0, 80157ca <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80157be:	7b43      	ldrb	r3, [r0, #13]
 80157c0:	7a80      	ldrb	r0, [r0, #10]
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80157c8:	4318      	orrs	r0, r3
 80157ca:	bd08      	pop	{r3, pc}

080157cc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80157cc:	b40e      	push	{r1, r2, r3}
 80157ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157d0:	b09e      	sub	sp, #120	@ 0x78
 80157d2:	4605      	mov	r5, r0
 80157d4:	ab23      	add	r3, sp, #140	@ 0x8c
 80157d6:	a805      	add	r0, sp, #20
 80157d8:	f853 4b04 	ldr.w	r4, [r3], #4
 80157dc:	9303      	str	r3, [sp, #12]
 80157de:	f000 fd13 	bl	8016208 <_ZN8touchgfx12TextProviderC1Ev>
 80157e2:	682b      	ldr	r3, [r5, #0]
 80157e4:	4628      	mov	r0, r5
 80157e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157e8:	4798      	blx	r3
 80157ea:	682b      	ldr	r3, [r5, #0]
 80157ec:	4606      	mov	r6, r0
 80157ee:	4628      	mov	r0, r5
 80157f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157f2:	4798      	blx	r3
 80157f4:	4633      	mov	r3, r6
 80157f6:	4621      	mov	r1, r4
 80157f8:	ae1e      	add	r6, sp, #120	@ 0x78
 80157fa:	2400      	movs	r4, #0
 80157fc:	9000      	str	r0, [sp, #0]
 80157fe:	9a03      	ldr	r2, [sp, #12]
 8015800:	a805      	add	r0, sp, #20
 8015802:	f000 fd54 	bl	80162ae <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015806:	f846 4d68 	str.w	r4, [r6, #-104]!
 801580a:	462a      	mov	r2, r5
 801580c:	4633      	mov	r3, r6
 801580e:	4621      	mov	r1, r4
 8015810:	a805      	add	r0, sp, #20
 8015812:	f001 f841 	bl	8016898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015816:	b300      	cbz	r0, 801585a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015818:	280a      	cmp	r0, #10
 801581a:	d01a      	beq.n	8015852 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801581c:	9f04      	ldr	r7, [sp, #16]
 801581e:	b1c7      	cbz	r7, 8015852 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015820:	7b78      	ldrb	r0, [r7, #13]
 8015822:	7a3b      	ldrb	r3, [r7, #8]
 8015824:	00c1      	lsls	r1, r0, #3
 8015826:	88ea      	ldrh	r2, [r5, #6]
 8015828:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801582c:	4319      	orrs	r1, r3
 801582e:	0643      	lsls	r3, r0, #25
 8015830:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015834:	bf48      	it	mi
 8015836:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801583a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801583e:	bf48      	it	mi
 8015840:	b219      	sxthmi	r1, r3
 8015842:	79fb      	ldrb	r3, [r7, #7]
 8015844:	4303      	orrs	r3, r0
 8015846:	4413      	add	r3, r2
 8015848:	1a5b      	subs	r3, r3, r1
 801584a:	b21b      	sxth	r3, r3
 801584c:	429c      	cmp	r4, r3
 801584e:	bfb8      	it	lt
 8015850:	461c      	movlt	r4, r3
 8015852:	4633      	mov	r3, r6
 8015854:	462a      	mov	r2, r5
 8015856:	2100      	movs	r1, #0
 8015858:	e7da      	b.n	8015810 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801585a:	b2a0      	uxth	r0, r4
 801585c:	b01e      	add	sp, #120	@ 0x78
 801585e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015862:	b003      	add	sp, #12
 8015864:	4770      	bx	lr

08015866 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8015866:	7a43      	ldrb	r3, [r0, #9]
 8015868:	8880      	ldrh	r0, [r0, #4]
 801586a:	4418      	add	r0, r3
 801586c:	b280      	uxth	r0, r0
 801586e:	4770      	bx	lr

08015870 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8015870:	6803      	ldr	r3, [r0, #0]
 8015872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015874:	4718      	bx	r3

08015876 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015876:	b40e      	push	{r1, r2, r3}
 8015878:	b570      	push	{r4, r5, r6, lr}
 801587a:	b09d      	sub	sp, #116	@ 0x74
 801587c:	4604      	mov	r4, r0
 801587e:	ab21      	add	r3, sp, #132	@ 0x84
 8015880:	a803      	add	r0, sp, #12
 8015882:	f853 5b04 	ldr.w	r5, [r3], #4
 8015886:	9302      	str	r3, [sp, #8]
 8015888:	f000 fcbe 	bl	8016208 <_ZN8touchgfx12TextProviderC1Ev>
 801588c:	6823      	ldr	r3, [r4, #0]
 801588e:	4620      	mov	r0, r4
 8015890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015892:	4798      	blx	r3
 8015894:	6823      	ldr	r3, [r4, #0]
 8015896:	4606      	mov	r6, r0
 8015898:	4620      	mov	r0, r4
 801589a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801589c:	2401      	movs	r4, #1
 801589e:	4798      	blx	r3
 80158a0:	4633      	mov	r3, r6
 80158a2:	9000      	str	r0, [sp, #0]
 80158a4:	4629      	mov	r1, r5
 80158a6:	9a02      	ldr	r2, [sp, #8]
 80158a8:	a803      	add	r0, sp, #12
 80158aa:	f000 fd00 	bl	80162ae <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80158ae:	a803      	add	r0, sp, #12
 80158b0:	f001 f872 	bl	8016998 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80158b4:	b2a3      	uxth	r3, r4
 80158b6:	b138      	cbz	r0, 80158c8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80158b8:	280a      	cmp	r0, #10
 80158ba:	a803      	add	r0, sp, #12
 80158bc:	bf04      	itt	eq
 80158be:	3301      	addeq	r3, #1
 80158c0:	b21c      	sxtheq	r4, r3
 80158c2:	f001 f869 	bl	8016998 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80158c6:	e7f5      	b.n	80158b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80158c8:	4618      	mov	r0, r3
 80158ca:	b01d      	add	sp, #116	@ 0x74
 80158cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158d0:	b003      	add	sp, #12
 80158d2:	4770      	bx	lr

080158d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80158d4:	b40e      	push	{r1, r2, r3}
 80158d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158d8:	b09e      	sub	sp, #120	@ 0x78
 80158da:	4604      	mov	r4, r0
 80158dc:	ab23      	add	r3, sp, #140	@ 0x8c
 80158de:	a805      	add	r0, sp, #20
 80158e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80158e4:	9303      	str	r3, [sp, #12]
 80158e6:	f000 fc8f 	bl	8016208 <_ZN8touchgfx12TextProviderC1Ev>
 80158ea:	6823      	ldr	r3, [r4, #0]
 80158ec:	4620      	mov	r0, r4
 80158ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158f0:	4798      	blx	r3
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	4606      	mov	r6, r0
 80158f6:	4620      	mov	r0, r4
 80158f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80158fa:	4798      	blx	r3
 80158fc:	4633      	mov	r3, r6
 80158fe:	4629      	mov	r1, r5
 8015900:	9000      	str	r0, [sp, #0]
 8015902:	9a03      	ldr	r2, [sp, #12]
 8015904:	a805      	add	r0, sp, #20
 8015906:	f000 fcd2 	bl	80162ae <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801590a:	ad1e      	add	r5, sp, #120	@ 0x78
 801590c:	2100      	movs	r1, #0
 801590e:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8015912:	4622      	mov	r2, r4
 8015914:	a805      	add	r0, sp, #20
 8015916:	f845 1d68 	str.w	r1, [r5, #-104]!
 801591a:	462b      	mov	r3, r5
 801591c:	f000 ffbc 	bl	8016898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015920:	b1d8      	cbz	r0, 801595a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8015922:	280a      	cmp	r0, #10
 8015924:	d012      	beq.n	801594c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8015926:	9804      	ldr	r0, [sp, #16]
 8015928:	b180      	cbz	r0, 801594c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801592a:	7b47      	ldrb	r7, [r0, #13]
 801592c:	88e2      	ldrh	r2, [r4, #6]
 801592e:	00fb      	lsls	r3, r7, #3
 8015930:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8015934:	7a03      	ldrb	r3, [r0, #8]
 8015936:	430b      	orrs	r3, r1
 8015938:	0679      	lsls	r1, r7, #25
 801593a:	bf44      	itt	mi
 801593c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015940:	b21b      	sxthmi	r3, r3
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	b21b      	sxth	r3, r3
 8015946:	429e      	cmp	r6, r3
 8015948:	bfa8      	it	ge
 801594a:	461e      	movge	r6, r3
 801594c:	462b      	mov	r3, r5
 801594e:	4622      	mov	r2, r4
 8015950:	2100      	movs	r1, #0
 8015952:	a805      	add	r0, sp, #20
 8015954:	f000 ffa0 	bl	8016898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015958:	e7e2      	b.n	8015920 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801595a:	4630      	mov	r0, r6
 801595c:	b01e      	add	sp, #120	@ 0x78
 801595e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015962:	b003      	add	sp, #12
 8015964:	4770      	bx	lr

08015966 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015966:	b513      	push	{r0, r1, r4, lr}
 8015968:	6803      	ldr	r3, [r0, #0]
 801596a:	2400      	movs	r4, #0
 801596c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015970:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015974:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015978:	4669      	mov	r1, sp
 801597a:	691b      	ldr	r3, [r3, #16]
 801597c:	9400      	str	r4, [sp, #0]
 801597e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015982:	4798      	blx	r3
 8015984:	b002      	add	sp, #8
 8015986:	bd10      	pop	{r4, pc}

08015988 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	680b      	ldr	r3, [r1, #0]
 801598c:	460c      	mov	r4, r1
 801598e:	4605      	mov	r5, r0
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	4798      	blx	r3
 8015994:	6823      	ldr	r3, [r4, #0]
 8015996:	4620      	mov	r0, r4
 8015998:	4629      	mov	r1, r5
 801599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801599c:	4798      	blx	r3
 801599e:	4628      	mov	r0, r5
 80159a0:	bd38      	pop	{r3, r4, r5, pc}

080159a2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80159a2:	b410      	push	{r4}
 80159a4:	880a      	ldrh	r2, [r1, #0]
 80159a6:	8884      	ldrh	r4, [r0, #4]
 80159a8:	4422      	add	r2, r4
 80159aa:	800a      	strh	r2, [r1, #0]
 80159ac:	884a      	ldrh	r2, [r1, #2]
 80159ae:	88c4      	ldrh	r4, [r0, #6]
 80159b0:	4422      	add	r2, r4
 80159b2:	804a      	strh	r2, [r1, #2]
 80159b4:	6940      	ldr	r0, [r0, #20]
 80159b6:	b120      	cbz	r0, 80159c2 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80159b8:	6803      	ldr	r3, [r0, #0]
 80159ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159c0:	4718      	bx	r3
 80159c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159c6:	4770      	bx	lr

080159c8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80159c8:	b570      	push	{r4, r5, r6, lr}
 80159ca:	8882      	ldrh	r2, [r0, #4]
 80159cc:	460c      	mov	r4, r1
 80159ce:	880b      	ldrh	r3, [r1, #0]
 80159d0:	4605      	mov	r5, r0
 80159d2:	4413      	add	r3, r2
 80159d4:	800b      	strh	r3, [r1, #0]
 80159d6:	884b      	ldrh	r3, [r1, #2]
 80159d8:	88c2      	ldrh	r2, [r0, #6]
 80159da:	4413      	add	r3, r2
 80159dc:	804b      	strh	r3, [r1, #2]
 80159de:	1d01      	adds	r1, r0, #4
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7fc fd69 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 80159e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	dd0b      	ble.n	8015a06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	dd07      	ble.n	8015a06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159f6:	6968      	ldr	r0, [r5, #20]
 80159f8:	b128      	cbz	r0, 8015a06 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80159fa:	6803      	ldr	r3, [r0, #0]
 80159fc:	4621      	mov	r1, r4
 80159fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a04:	4718      	bx	r3
 8015a06:	bd70      	pop	{r4, r5, r6, pc}

08015a08 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015a08:	b570      	push	{r4, r5, r6, lr}
 8015a0a:	8882      	ldrh	r2, [r0, #4]
 8015a0c:	460c      	mov	r4, r1
 8015a0e:	880b      	ldrh	r3, [r1, #0]
 8015a10:	4605      	mov	r5, r0
 8015a12:	4413      	add	r3, r2
 8015a14:	800b      	strh	r3, [r1, #0]
 8015a16:	884b      	ldrh	r3, [r1, #2]
 8015a18:	88c2      	ldrh	r2, [r0, #6]
 8015a1a:	4413      	add	r3, r2
 8015a1c:	804b      	strh	r3, [r1, #2]
 8015a1e:	1d01      	adds	r1, r0, #4
 8015a20:	4620      	mov	r0, r4
 8015a22:	f7fc fd49 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8015a26:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	dd19      	ble.n	8015a62 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015a2e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	dd15      	ble.n	8015a62 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015a36:	6968      	ldr	r0, [r5, #20]
 8015a38:	b128      	cbz	r0, 8015a46 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015a3a:	6803      	ldr	r3, [r0, #0]
 8015a3c:	4621      	mov	r1, r4
 8015a3e:	691b      	ldr	r3, [r3, #16]
 8015a40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a44:	4718      	bx	r3
 8015a46:	4b07      	ldr	r3, [pc, #28]	@ (8015a64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	3304      	adds	r3, #4
 8015a4c:	429d      	cmp	r5, r3
 8015a4e:	d108      	bne.n	8015a62 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015a50:	f7fe ff10 	bl	8014874 <_ZN8touchgfx11Application11getInstanceEv>
 8015a54:	6803      	ldr	r3, [r0, #0]
 8015a56:	6821      	ldr	r1, [r4, #0]
 8015a58:	6862      	ldr	r2, [r4, #4]
 8015a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a60:	4718      	bx	r3
 8015a62:	bd70      	pop	{r4, r5, r6, pc}
 8015a64:	2401b584 	.word	0x2401b584

08015a68 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015a68:	b570      	push	{r4, r5, r6, lr}
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4616      	mov	r6, r2
 8015a6e:	460d      	mov	r5, r1
 8015a70:	b901      	cbnz	r1, 8015a74 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015a72:	b192      	cbz	r2, 8015a9a <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015a74:	6823      	ldr	r3, [r4, #0]
 8015a76:	4620      	mov	r0, r4
 8015a78:	699b      	ldr	r3, [r3, #24]
 8015a7a:	4798      	blx	r3
 8015a7c:	88e2      	ldrh	r2, [r4, #6]
 8015a7e:	88a1      	ldrh	r1, [r4, #4]
 8015a80:	4620      	mov	r0, r4
 8015a82:	4432      	add	r2, r6
 8015a84:	4429      	add	r1, r5
 8015a86:	b212      	sxth	r2, r2
 8015a88:	b209      	sxth	r1, r1
 8015a8a:	f7f9 f89a 	bl	800ebc2 <_ZN8touchgfx8Drawable5setXYEss>
 8015a8e:	6823      	ldr	r3, [r4, #0]
 8015a90:	4620      	mov	r0, r4
 8015a92:	699b      	ldr	r3, [r3, #24]
 8015a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a98:	4718      	bx	r3
 8015a9a:	bd70      	pop	{r4, r5, r6, pc}

08015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	4604      	mov	r4, r0
 8015aa2:	4608      	mov	r0, r1
 8015aa4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015aa8:	8023      	strh	r3, [r4, #0]
 8015aaa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015aae:	8063      	strh	r3, [r4, #2]
 8015ab0:	6803      	ldr	r3, [r0, #0]
 8015ab2:	80a1      	strh	r1, [r4, #4]
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	80e2      	strh	r2, [r4, #6]
 8015ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aba:	4798      	blx	r3
 8015abc:	4620      	mov	r0, r4
 8015abe:	bd10      	pop	{r4, pc}

08015ac0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8015ac0:	b530      	push	{r4, r5, lr}
 8015ac2:	8083      	strh	r3, [r0, #4]
 8015ac4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015ac8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8015acc:	80c3      	strh	r3, [r0, #6]
 8015ace:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8015ad2:	6141      	str	r1, [r0, #20]
 8015ad4:	7203      	strb	r3, [r0, #8]
 8015ad6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8015ada:	8302      	strh	r2, [r0, #24]
 8015adc:	7243      	strb	r3, [r0, #9]
 8015ade:	7a83      	ldrb	r3, [r0, #10]
 8015ae0:	f365 0306 	bfi	r3, r5, #0, #7
 8015ae4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8015ae8:	f365 13c7 	bfi	r3, r5, #7, #1
 8015aec:	7283      	strb	r3, [r0, #10]
 8015aee:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8015af2:	72c3      	strb	r3, [r0, #11]
 8015af4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8015af8:	7303      	strb	r3, [r0, #12]
 8015afa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8015afe:	81c3      	strh	r3, [r0, #14]
 8015b00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015b04:	8203      	strh	r3, [r0, #16]
 8015b06:	4b01      	ldr	r3, [pc, #4]	@ (8015b0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8015b08:	6003      	str	r3, [r0, #0]
 8015b0a:	bd30      	pop	{r4, r5, pc}
 8015b0c:	080231b0 	.word	0x080231b0

08015b10 <_ZNK8touchgfx9ConstFont4findEt>:
 8015b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b12:	6944      	ldr	r4, [r0, #20]
 8015b14:	b3bc      	cbz	r4, 8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b16:	88a3      	ldrh	r3, [r4, #4]
 8015b18:	8b02      	ldrh	r2, [r0, #24]
 8015b1a:	1acb      	subs	r3, r1, r3
 8015b1c:	f102 32ff 	add.w	r2, r2, #4294967295
 8015b20:	d431      	bmi.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b22:	4293      	cmp	r3, r2
 8015b24:	dd0c      	ble.n	8015b40 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8015b26:	230e      	movs	r3, #14
 8015b28:	fb03 4302 	mla	r3, r3, r2, r4
 8015b2c:	889b      	ldrh	r3, [r3, #4]
 8015b2e:	1a5b      	subs	r3, r3, r1
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	429a      	cmp	r2, r3
 8015b34:	db27      	blt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	bfbc      	itt	lt
 8015b3a:	2302      	movlt	r3, #2
 8015b3c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8015b40:	2500      	movs	r5, #0
 8015b42:	260e      	movs	r6, #14
 8015b44:	4295      	cmp	r5, r2
 8015b46:	dc1e      	bgt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b48:	fb06 4003 	mla	r0, r6, r3, r4
 8015b4c:	8887      	ldrh	r7, [r0, #4]
 8015b4e:	42b9      	cmp	r1, r7
 8015b50:	d01a      	beq.n	8015b88 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8015b52:	d20d      	bcs.n	8015b70 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8015b54:	1e5a      	subs	r2, r3, #1
 8015b56:	4295      	cmp	r5, r2
 8015b58:	dc15      	bgt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b5a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8015b5e:	1a5b      	subs	r3, r3, r1
 8015b60:	1ad3      	subs	r3, r2, r3
 8015b62:	429a      	cmp	r2, r3
 8015b64:	db0f      	blt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b66:	429d      	cmp	r5, r3
 8015b68:	ddec      	ble.n	8015b44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015b6a:	1953      	adds	r3, r2, r5
 8015b6c:	105b      	asrs	r3, r3, #1
 8015b6e:	e7e9      	b.n	8015b44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015b70:	1c5d      	adds	r5, r3, #1
 8015b72:	42aa      	cmp	r2, r5
 8015b74:	db07      	blt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b76:	8a43      	ldrh	r3, [r0, #18]
 8015b78:	1acb      	subs	r3, r1, r3
 8015b7a:	442b      	add	r3, r5
 8015b7c:	429d      	cmp	r5, r3
 8015b7e:	dc02      	bgt.n	8015b86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8015b80:	429a      	cmp	r2, r3
 8015b82:	dadf      	bge.n	8015b44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8015b84:	e7f1      	b.n	8015b6a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8015b86:	2000      	movs	r0, #0
 8015b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8015b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	4617      	mov	r7, r2
 8015b90:	461e      	mov	r6, r3
 8015b92:	b911      	cbnz	r1, 8015b9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8015b94:	2500      	movs	r5, #0
 8015b96:	4628      	mov	r0, r5
 8015b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b9a:	290a      	cmp	r1, #10
 8015b9c:	d0fa      	beq.n	8015b94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015b9e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8015ba2:	4291      	cmp	r1, r2
 8015ba4:	d0f6      	beq.n	8015b94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015ba6:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015baa:	4291      	cmp	r1, r2
 8015bac:	d0f2      	beq.n	8015b94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015bae:	f7ff ffaf 	bl	8015b10 <_ZNK8touchgfx9ConstFont4findEt>
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	b950      	cbnz	r0, 8015bcc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	4620      	mov	r0, r4
 8015bba:	691b      	ldr	r3, [r3, #16]
 8015bbc:	4798      	blx	r3
 8015bbe:	4601      	mov	r1, r0
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	f7ff ffa5 	bl	8015b10 <_ZNK8touchgfx9ConstFont4findEt>
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d0e3      	beq.n	8015b94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8015bcc:	6823      	ldr	r3, [r4, #0]
 8015bce:	4629      	mov	r1, r5
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015bd4:	4798      	blx	r3
 8015bd6:	6038      	str	r0, [r7, #0]
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	4620      	mov	r0, r4
 8015bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bde:	4798      	blx	r3
 8015be0:	7030      	strb	r0, [r6, #0]
 8015be2:	e7d8      	b.n	8015b96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08015be4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8015be4:	2000      	movs	r0, #0
 8015be6:	4770      	bx	lr

08015be8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8015be8:	2001      	movs	r0, #1
 8015bea:	4770      	bx	lr

08015bec <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8015bec:	2002      	movs	r0, #2
 8015bee:	4770      	bx	lr

08015bf0 <_ZN8touchgfx12GestureEventD1Ev>:
 8015bf0:	4770      	bx	lr

08015bf2 <_ZN8touchgfx9DragEventD1Ev>:
 8015bf2:	4770      	bx	lr

08015bf4 <_ZN8touchgfx10ClickEventD1Ev>:
 8015bf4:	4770      	bx	lr

08015bf6 <_ZN8touchgfx10ClickEventD0Ev>:
 8015bf6:	b510      	push	{r4, lr}
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	210c      	movs	r1, #12
 8015bfc:	f00a fded 	bl	80207da <_ZdlPvj>
 8015c00:	4620      	mov	r0, r4
 8015c02:	bd10      	pop	{r4, pc}

08015c04 <_ZN8touchgfx9DragEventD0Ev>:
 8015c04:	b510      	push	{r4, lr}
 8015c06:	4604      	mov	r4, r0
 8015c08:	2110      	movs	r1, #16
 8015c0a:	f00a fde6 	bl	80207da <_ZdlPvj>
 8015c0e:	4620      	mov	r0, r4
 8015c10:	bd10      	pop	{r4, pc}

08015c12 <_ZN8touchgfx12GestureEventD0Ev>:
 8015c12:	b510      	push	{r4, lr}
 8015c14:	4604      	mov	r4, r0
 8015c16:	210c      	movs	r1, #12
 8015c18:	f00a fddf 	bl	80207da <_ZdlPvj>
 8015c1c:	4620      	mov	r0, r4
 8015c1e:	bd10      	pop	{r4, pc}

08015c20 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8015c20:	b530      	push	{r4, r5, lr}
 8015c22:	460d      	mov	r5, r1
 8015c24:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015c26:	b087      	sub	sp, #28
 8015c28:	4604      	mov	r4, r0
 8015c2a:	b301      	cbz	r1, 8015c6e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8015c2c:	a801      	add	r0, sp, #4
 8015c2e:	f7ff ff35 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c32:	892a      	ldrh	r2, [r5, #8]
 8015c34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015c38:	7928      	ldrb	r0, [r5, #4]
 8015c3a:	1ad2      	subs	r2, r2, r3
 8015c3c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015c3e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8015c42:	441a      	add	r2, r3
 8015c44:	896b      	ldrh	r3, [r5, #10]
 8015c46:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8015c4a:	f88d 0010 	strb.w	r0, [sp, #16]
 8015c4e:	1b5b      	subs	r3, r3, r5
 8015c50:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8015c52:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015c54:	442b      	add	r3, r5
 8015c56:	4d07      	ldr	r5, [pc, #28]	@ (8015c74 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8015c58:	f8ad 1012 	strh.w	r1, [sp, #18]
 8015c5c:	a903      	add	r1, sp, #12
 8015c5e:	9503      	str	r5, [sp, #12]
 8015c60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015c64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015c68:	6803      	ldr	r3, [r0, #0]
 8015c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015c6c:	4798      	blx	r3
 8015c6e:	b007      	add	sp, #28
 8015c70:	bd30      	pop	{r4, r5, pc}
 8015c72:	bf00      	nop
 8015c74:	08023240 	.word	0x08023240

08015c78 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8015c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015c7e:	b08a      	sub	sp, #40	@ 0x28
 8015c80:	4604      	mov	r4, r0
 8015c82:	460d      	mov	r5, r1
 8015c84:	b113      	cbz	r3, 8015c8c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8015c86:	790b      	ldrb	r3, [r1, #4]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d044      	beq.n	8015d16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015c8c:	f104 0804 	add.w	r8, r4, #4
 8015c90:	a803      	add	r0, sp, #12
 8015c92:	4641      	mov	r1, r8
 8015c94:	f7ff ff02 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015c98:	792b      	ldrb	r3, [r5, #4]
 8015c9a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8015c9e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8015ca2:	b983      	cbnz	r3, 8015cc6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8015ca4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8015ca8:	892a      	ldrh	r2, [r5, #8]
 8015caa:	88e9      	ldrh	r1, [r5, #6]
 8015cac:	4640      	mov	r0, r8
 8015cae:	1b92      	subs	r2, r2, r6
 8015cb0:	9301      	str	r3, [sp, #4]
 8015cb2:	1bc9      	subs	r1, r1, r7
 8015cb4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8015cb8:	b212      	sxth	r2, r2
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	b209      	sxth	r1, r1
 8015cbe:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8015cc2:	f7fc fb17 	bl	80122f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8015cc6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015cc8:	b329      	cbz	r1, 8015d16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015cca:	a805      	add	r0, sp, #20
 8015ccc:	f7ff fee6 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015cd0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8015cd4:	792b      	ldrb	r3, [r5, #4]
 8015cd6:	a907      	add	r1, sp, #28
 8015cd8:	1abf      	subs	r7, r7, r2
 8015cda:	88ea      	ldrh	r2, [r5, #6]
 8015cdc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015cde:	4417      	add	r7, r2
 8015ce0:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8015ce2:	f88d 3020 	strb.w	r3, [sp, #32]
 8015ce6:	4417      	add	r7, r2
 8015ce8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8015cec:	1ab6      	subs	r6, r6, r2
 8015cee:	892a      	ldrh	r2, [r5, #8]
 8015cf0:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8015cf4:	4416      	add	r6, r2
 8015cf6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015cf8:	4416      	add	r6, r2
 8015cfa:	4a08      	ldr	r2, [pc, #32]	@ (8015d1c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8015cfc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8015d00:	2600      	movs	r6, #0
 8015d02:	9207      	str	r2, [sp, #28]
 8015d04:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8015d08:	6803      	ldr	r3, [r0, #0]
 8015d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d0c:	4798      	blx	r3
 8015d0e:	792b      	ldrb	r3, [r5, #4]
 8015d10:	b10b      	cbz	r3, 8015d16 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8015d12:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8015d16:	b00a      	add	sp, #40	@ 0x28
 8015d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d1c:	08023218 	.word	0x08023218

08015d20 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8015d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d24:	460c      	mov	r4, r1
 8015d26:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8015d28:	b088      	sub	sp, #32
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	2900      	cmp	r1, #0
 8015d2e:	d06d      	beq.n	8015e0c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8015d30:	4668      	mov	r0, sp
 8015d32:	f7ff feb3 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015d36:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8015d38:	88e3      	ldrh	r3, [r4, #6]
 8015d3a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8015d3e:	440b      	add	r3, r1
 8015d40:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8015d44:	b21b      	sxth	r3, r3
 8015d46:	4543      	cmp	r3, r8
 8015d48:	db31      	blt.n	8015dae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015d4a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8015d4e:	44c4      	add	ip, r8
 8015d50:	fa0f fc8c 	sxth.w	ip, ip
 8015d54:	4563      	cmp	r3, ip
 8015d56:	da2a      	bge.n	8015dae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015d58:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8015d5a:	8926      	ldrh	r6, [r4, #8]
 8015d5c:	4416      	add	r6, r2
 8015d5e:	b236      	sxth	r6, r6
 8015d60:	42be      	cmp	r6, r7
 8015d62:	db24      	blt.n	8015dae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015d64:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015d68:	4438      	add	r0, r7
 8015d6a:	b200      	sxth	r0, r0
 8015d6c:	4286      	cmp	r6, r0
 8015d6e:	da1e      	bge.n	8015dae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015d70:	8963      	ldrh	r3, [r4, #10]
 8015d72:	4419      	add	r1, r3
 8015d74:	b209      	sxth	r1, r1
 8015d76:	4541      	cmp	r1, r8
 8015d78:	db08      	blt.n	8015d8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015d7a:	4561      	cmp	r1, ip
 8015d7c:	da06      	bge.n	8015d8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015d7e:	89a3      	ldrh	r3, [r4, #12]
 8015d80:	441a      	add	r2, r3
 8015d82:	b212      	sxth	r2, r2
 8015d84:	42ba      	cmp	r2, r7
 8015d86:	db01      	blt.n	8015d8c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8015d88:	4282      	cmp	r2, r0
 8015d8a:	db10      	blt.n	8015dae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8015d8c:	4b21      	ldr	r3, [pc, #132]	@ (8015e14 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8015d8e:	a904      	add	r1, sp, #16
 8015d90:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015d92:	9304      	str	r3, [sp, #16]
 8015d94:	2302      	movs	r3, #2
 8015d96:	f88d 3014 	strb.w	r3, [sp, #20]
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015da0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015da4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015da8:	6803      	ldr	r3, [r0, #0]
 8015daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dac:	4798      	blx	r3
 8015dae:	1d29      	adds	r1, r5, #4
 8015db0:	a802      	add	r0, sp, #8
 8015db2:	f7ff fe73 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015db6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015dba:	88e0      	ldrh	r0, [r4, #6]
 8015dbc:	eba3 0808 	sub.w	r8, r3, r8
 8015dc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015dc4:	7921      	ldrb	r1, [r4, #4]
 8015dc6:	fa1f f888 	uxth.w	r8, r8
 8015dca:	1bdf      	subs	r7, r3, r7
 8015dcc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8015dd0:	b2bb      	uxth	r3, r7
 8015dd2:	4440      	add	r0, r8
 8015dd4:	8922      	ldrh	r2, [r4, #8]
 8015dd6:	8967      	ldrh	r7, [r4, #10]
 8015dd8:	4460      	add	r0, ip
 8015dda:	89a4      	ldrh	r4, [r4, #12]
 8015ddc:	441a      	add	r2, r3
 8015dde:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8015de0:	44b8      	add	r8, r7
 8015de2:	4423      	add	r3, r4
 8015de4:	f8ad 0016 	strh.w	r0, [sp, #22]
 8015de8:	4432      	add	r2, r6
 8015dea:	44e0      	add	r8, ip
 8015dec:	4433      	add	r3, r6
 8015dee:	4c0a      	ldr	r4, [pc, #40]	@ (8015e18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8015df0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8015df2:	f88d 1014 	strb.w	r1, [sp, #20]
 8015df6:	a904      	add	r1, sp, #16
 8015df8:	9404      	str	r4, [sp, #16]
 8015dfa:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015dfe:	f8ad 801a 	strh.w	r8, [sp, #26]
 8015e02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015e06:	6803      	ldr	r3, [r0, #0]
 8015e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e0a:	4798      	blx	r3
 8015e0c:	b008      	add	sp, #32
 8015e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e12:	bf00      	nop
 8015e14:	08023218 	.word	0x08023218
 8015e18:	0802322c 	.word	0x0802322c

08015e1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e1e:	4604      	mov	r4, r0
 8015e20:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015e24:	3201      	adds	r2, #1
 8015e26:	d112      	bne.n	8015e4e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015e28:	2500      	movs	r5, #0
 8015e2a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015e2e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015e32:	6803      	ldr	r3, [r0, #0]
 8015e34:	9500      	str	r5, [sp, #0]
 8015e36:	466d      	mov	r5, sp
 8015e38:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015e3c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015e40:	4629      	mov	r1, r5
 8015e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e44:	4798      	blx	r3
 8015e46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015e4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015e4e:	4620      	mov	r0, r4
 8015e50:	b003      	add	sp, #12
 8015e52:	bd30      	pop	{r4, r5, pc}

08015e54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015e54:	b513      	push	{r0, r1, r4, lr}
 8015e56:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8015e5a:	4604      	mov	r4, r0
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	d109      	bne.n	8015e74 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8015e60:	4601      	mov	r1, r0
 8015e62:	4668      	mov	r0, sp
 8015e64:	f7ff fe1a 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e68:	f8bd 3000 	ldrh.w	r3, [sp]
 8015e6c:	8423      	strh	r3, [r4, #32]
 8015e6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015e72:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015e74:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015e78:	b002      	add	sp, #8
 8015e7a:	bd10      	pop	{r4, pc}

08015e7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015e7c:	b513      	push	{r0, r1, r4, lr}
 8015e7e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8015e82:	4604      	mov	r4, r0
 8015e84:	3301      	adds	r3, #1
 8015e86:	d109      	bne.n	8015e9c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8015e88:	4601      	mov	r1, r0
 8015e8a:	4668      	mov	r0, sp
 8015e8c:	f7ff fe06 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015e90:	f8bd 3000 	ldrh.w	r3, [sp]
 8015e94:	8423      	strh	r3, [r4, #32]
 8015e96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015e9a:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015e9c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8015ea0:	b002      	add	sp, #8
 8015ea2:	bd10      	pop	{r4, pc}

08015ea4 <_ZN8touchgfx6ScreenC1Ev>:
 8015ea4:	b570      	push	{r4, r5, r6, lr}
 8015ea6:	4b17      	ldr	r3, [pc, #92]	@ (8015f04 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	4a17      	ldr	r2, [pc, #92]	@ (8015f08 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8015eac:	2101      	movs	r1, #1
 8015eae:	f845 3b04 	str.w	r3, [r5], #4
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	6042      	str	r2, [r0, #4]
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	8103      	strh	r3, [r0, #8]
 8015eba:	8143      	strh	r3, [r0, #10]
 8015ebc:	8183      	strh	r3, [r0, #12]
 8015ebe:	81c3      	strh	r3, [r0, #14]
 8015ec0:	8203      	strh	r3, [r0, #16]
 8015ec2:	8243      	strh	r3, [r0, #18]
 8015ec4:	8283      	strh	r3, [r0, #20]
 8015ec6:	82c3      	strh	r3, [r0, #22]
 8015ec8:	6203      	str	r3, [r0, #32]
 8015eca:	8483      	strh	r3, [r0, #36]	@ 0x24
 8015ecc:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8015ece:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8015ed2:	6343      	str	r3, [r0, #52]	@ 0x34
 8015ed4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8015ed8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015edc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8015ee0:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8015ee4:	4b09      	ldr	r3, [pc, #36]	@ (8015f0c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8015ee6:	4628      	mov	r0, r5
 8015ee8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015eec:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8015eee:	4a08      	ldr	r2, [pc, #32]	@ (8015f10 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8015ef0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015ef4:	4798      	blx	r3
 8015ef6:	6863      	ldr	r3, [r4, #4]
 8015ef8:	4628      	mov	r0, r5
 8015efa:	4631      	mov	r1, r6
 8015efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015efe:	4798      	blx	r3
 8015f00:	4620      	mov	r0, r4
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	08023254 	.word	0x08023254
 8015f08:	08022c88 	.word	0x08022c88
 8015f0c:	2401b53e 	.word	0x2401b53e
 8015f10:	2401b53c 	.word	0x2401b53c

08015f14 <_ZN8touchgfx6Screen4drawEv>:
 8015f14:	4b09      	ldr	r3, [pc, #36]	@ (8015f3c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8015f16:	b507      	push	{r0, r1, r2, lr}
 8015f18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	4b08      	ldr	r3, [pc, #32]	@ (8015f40 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8015f20:	9100      	str	r1, [sp, #0]
 8015f22:	4669      	mov	r1, sp
 8015f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f28:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015f2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015f30:	6803      	ldr	r3, [r0, #0]
 8015f32:	689b      	ldr	r3, [r3, #8]
 8015f34:	4798      	blx	r3
 8015f36:	b003      	add	sp, #12
 8015f38:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f3c:	2401b53c 	.word	0x2401b53c
 8015f40:	2401b53e 	.word	0x2401b53e

08015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015f4c:	b089      	sub	sp, #36	@ 0x24
 8015f4e:	4680      	mov	r8, r0
 8015f50:	460c      	mov	r4, r1
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	4615      	mov	r5, r2
 8015f56:	dd0e      	ble.n	8015f76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015f58:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	dd0a      	ble.n	8015f76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015f60:	4628      	mov	r0, r5
 8015f62:	f7ff ff5b 	bl	8015e1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015f66:	4621      	mov	r1, r4
 8015f68:	f7fe fba6 	bl	80146b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015f6c:	69eb      	ldr	r3, [r5, #28]
 8015f6e:	b928      	cbnz	r0, 8015f7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8015f70:	461d      	mov	r5, r3
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d1f4      	bne.n	8015f60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8015f76:	b009      	add	sp, #36	@ 0x24
 8015f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7c:	ae04      	add	r6, sp, #16
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	f000 80b5 	beq.w	80160ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015f84:	682b      	ldr	r3, [r5, #0]
 8015f86:	4629      	mov	r1, r5
 8015f88:	a802      	add	r0, sp, #8
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	4798      	blx	r3
 8015f8e:	4628      	mov	r0, r5
 8015f90:	f7ff ff60 	bl	8015e54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8015f94:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8015f98:	4407      	add	r7, r0
 8015f9a:	4628      	mov	r0, r5
 8015f9c:	f7ff ff6e 	bl	8015e7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8015fa0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015fa4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8015fa8:	b23f      	sxth	r7, r7
 8015faa:	4418      	add	r0, r3
 8015fac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015fb0:	4621      	mov	r1, r4
 8015fb2:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015fb6:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015fba:	4630      	mov	r0, r6
 8015fbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fc0:	f8ad 7010 	strh.w	r7, [sp, #16]
 8015fc4:	f7fc fa78 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8015fc8:	4628      	mov	r0, r5
 8015fca:	f7ff ff27 	bl	8015e1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015fce:	ab06      	add	r3, sp, #24
 8015fd0:	4602      	mov	r2, r0
 8015fd2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015fd6:	e883 0003 	stmia.w	r3, {r0, r1}
 8015fda:	4611      	mov	r1, r2
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7fc fa6b 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8015fe2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015fe6:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015fea:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8015fee:	4299      	cmp	r1, r3
 8015ff0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015ff4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015ff8:	d10b      	bne.n	8016012 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015ffa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015ffe:	4552      	cmp	r2, sl
 8016000:	d107      	bne.n	8016012 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016002:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016006:	455a      	cmp	r2, fp
 8016008:	d103      	bne.n	8016012 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801600a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801600e:	454a      	cmp	r2, r9
 8016010:	d06d      	beq.n	80160ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016012:	f1bb 0f00 	cmp.w	fp, #0
 8016016:	dd65      	ble.n	80160e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016018:	f1b9 0f00 	cmp.w	r9, #0
 801601c:	dd62      	ble.n	80160e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801601e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016022:	fa1f f08a 	uxth.w	r0, sl
 8016026:	4552      	cmp	r2, sl
 8016028:	9000      	str	r0, [sp, #0]
 801602a:	da12      	bge.n	8016052 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801602c:	9301      	str	r3, [sp, #4]
 801602e:	9b00      	ldr	r3, [sp, #0]
 8016030:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016034:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016038:	1a9a      	subs	r2, r3, r2
 801603a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801603e:	4631      	mov	r1, r6
 8016040:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016044:	4640      	mov	r0, r8
 8016046:	f8ad 2016 	strh.w	r2, [sp, #22]
 801604a:	69ea      	ldr	r2, [r5, #28]
 801604c:	f7ff ff7a 	bl	8015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016050:	9b01      	ldr	r3, [sp, #4]
 8016052:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016056:	b29f      	uxth	r7, r3
 8016058:	429a      	cmp	r2, r3
 801605a:	da0d      	bge.n	8016078 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801605c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016060:	1aba      	subs	r2, r7, r2
 8016062:	f8ad a012 	strh.w	sl, [sp, #18]
 8016066:	4631      	mov	r1, r6
 8016068:	f8ad 2014 	strh.w	r2, [sp, #20]
 801606c:	4640      	mov	r0, r8
 801606e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016072:	69ea      	ldr	r2, [r5, #28]
 8016074:	f7ff ff66 	bl	8015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016078:	8822      	ldrh	r2, [r4, #0]
 801607a:	445f      	add	r7, fp
 801607c:	88a3      	ldrh	r3, [r4, #4]
 801607e:	b2bf      	uxth	r7, r7
 8016080:	4413      	add	r3, r2
 8016082:	b23a      	sxth	r2, r7
 8016084:	b29b      	uxth	r3, r3
 8016086:	b219      	sxth	r1, r3
 8016088:	4291      	cmp	r1, r2
 801608a:	dd0d      	ble.n	80160a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801608c:	1bdb      	subs	r3, r3, r7
 801608e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016092:	f8ad a012 	strh.w	sl, [sp, #18]
 8016096:	4631      	mov	r1, r6
 8016098:	f8ad 3014 	strh.w	r3, [sp, #20]
 801609c:	4640      	mov	r0, r8
 801609e:	f8ad 9016 	strh.w	r9, [sp, #22]
 80160a2:	69ea      	ldr	r2, [r5, #28]
 80160a4:	f7ff ff4e 	bl	8015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80160a8:	88e2      	ldrh	r2, [r4, #6]
 80160aa:	8863      	ldrh	r3, [r4, #2]
 80160ac:	4413      	add	r3, r2
 80160ae:	9a00      	ldr	r2, [sp, #0]
 80160b0:	444a      	add	r2, r9
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	fa1f f982 	uxth.w	r9, r2
 80160b8:	b219      	sxth	r1, r3
 80160ba:	fa0f f289 	sxth.w	r2, r9
 80160be:	428a      	cmp	r2, r1
 80160c0:	da15      	bge.n	80160ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80160c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80160c6:	eba3 0309 	sub.w	r3, r3, r9
 80160ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 80160ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 80160d2:	4631      	mov	r1, r6
 80160d4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80160d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80160dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80160e0:	69ea      	ldr	r2, [r5, #28]
 80160e2:	e001      	b.n	80160e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80160e4:	69ea      	ldr	r2, [r5, #28]
 80160e6:	4621      	mov	r1, r4
 80160e8:	4640      	mov	r0, r8
 80160ea:	f7ff ff2b 	bl	8015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80160ee:	4628      	mov	r0, r5
 80160f0:	f7ff fe94 	bl	8015e1c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80160f4:	6861      	ldr	r1, [r4, #4]
 80160f6:	4602      	mov	r2, r0
 80160f8:	4633      	mov	r3, r6
 80160fa:	6820      	ldr	r0, [r4, #0]
 80160fc:	c303      	stmia	r3!, {r0, r1}
 80160fe:	4611      	mov	r1, r2
 8016100:	4630      	mov	r0, r6
 8016102:	f7fc f9d9 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 8016106:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801610a:	2b00      	cmp	r3, #0
 801610c:	f77f af33 	ble.w	8015f76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016110:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016114:	2b00      	cmp	r3, #0
 8016116:	f77f af2e 	ble.w	8015f76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801611a:	4628      	mov	r0, r5
 801611c:	f7ff fe9a 	bl	8015e54 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016120:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016124:	1a18      	subs	r0, r3, r0
 8016126:	f8ad 0010 	strh.w	r0, [sp, #16]
 801612a:	4628      	mov	r0, r5
 801612c:	f7ff fea6 	bl	8015e7c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016130:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016134:	4631      	mov	r1, r6
 8016136:	1a18      	subs	r0, r3, r0
 8016138:	f8ad 0012 	strh.w	r0, [sp, #18]
 801613c:	4628      	mov	r0, r5
 801613e:	682b      	ldr	r3, [r5, #0]
 8016140:	689b      	ldr	r3, [r3, #8]
 8016142:	4798      	blx	r3
 8016144:	e717      	b.n	8015f76 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016146 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016146:	b570      	push	{r4, r5, r6, lr}
 8016148:	1d06      	adds	r6, r0, #4
 801614a:	b086      	sub	sp, #24
 801614c:	460c      	mov	r4, r1
 801614e:	2300      	movs	r3, #0
 8016150:	4631      	mov	r1, r6
 8016152:	4605      	mov	r5, r0
 8016154:	a802      	add	r0, sp, #8
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	f7ff fca0 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801615c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016160:	8822      	ldrh	r2, [r4, #0]
 8016162:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016166:	1ad2      	subs	r2, r2, r3
 8016168:	8863      	ldrh	r3, [r4, #2]
 801616a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801616e:	1a5b      	subs	r3, r3, r1
 8016170:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016174:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016178:	aa01      	add	r2, sp, #4
 801617a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801617e:	4630      	mov	r0, r6
 8016180:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016184:	a904      	add	r1, sp, #16
 8016186:	f8ad 3012 	strh.w	r3, [sp, #18]
 801618a:	f7fc fa6d 	bl	8012668 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801618e:	9a01      	ldr	r2, [sp, #4]
 8016190:	b11a      	cbz	r2, 801619a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8016192:	4621      	mov	r1, r4
 8016194:	4628      	mov	r0, r5
 8016196:	f7ff fed5 	bl	8015f44 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801619a:	b006      	add	sp, #24
 801619c:	bd70      	pop	{r4, r5, r6, pc}

0801619e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801619e:	4602      	mov	r2, r0
 80161a0:	b530      	push	{r4, r5, lr}
 80161a2:	4604      	mov	r4, r0
 80161a4:	b085      	sub	sp, #20
 80161a6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80161aa:	460d      	mov	r5, r1
 80161ac:	466b      	mov	r3, sp
 80161ae:	6851      	ldr	r1, [r2, #4]
 80161b0:	c303      	stmia	r3!, {r0, r1}
 80161b2:	4629      	mov	r1, r5
 80161b4:	4668      	mov	r0, sp
 80161b6:	f7fc f97f 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 80161ba:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80161be:	b12b      	cbz	r3, 80161cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80161c0:	4669      	mov	r1, sp
 80161c2:	4620      	mov	r0, r4
 80161c4:	f7ff ffbf 	bl	8016146 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80161c8:	b005      	add	sp, #20
 80161ca:	bd30      	pop	{r4, r5, pc}
 80161cc:	3404      	adds	r4, #4
 80161ce:	a802      	add	r0, sp, #8
 80161d0:	4621      	mov	r1, r4
 80161d2:	f7ff fc63 	bl	8015a9c <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80161d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80161da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80161de:	4669      	mov	r1, sp
 80161e0:	4620      	mov	r0, r4
 80161e2:	1a9b      	subs	r3, r3, r2
 80161e4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80161e8:	f8ad 3000 	strh.w	r3, [sp]
 80161ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80161f0:	1a9b      	subs	r3, r3, r2
 80161f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80161f6:	f7fc f9fe 	bl	80125f6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80161fa:	e7e5      	b.n	80161c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080161fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80161fc:	460b      	mov	r3, r1
 80161fe:	680a      	ldr	r2, [r1, #0]
 8016200:	1d01      	adds	r1, r0, #4
 8016202:	6992      	ldr	r2, [r2, #24]
 8016204:	4618      	mov	r0, r3
 8016206:	4710      	bx	r2

08016208 <_ZN8touchgfx12TextProviderC1Ev>:
 8016208:	b538      	push	{r3, r4, r5, lr}
 801620a:	2500      	movs	r5, #0
 801620c:	2302      	movs	r3, #2
 801620e:	4604      	mov	r4, r0
 8016210:	220e      	movs	r2, #14
 8016212:	7403      	strb	r3, [r0, #16]
 8016214:	4629      	mov	r1, r5
 8016216:	6145      	str	r5, [r0, #20]
 8016218:	7605      	strb	r5, [r0, #24]
 801621a:	83c5      	strh	r5, [r0, #30]
 801621c:	8405      	strh	r5, [r0, #32]
 801621e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016220:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016222:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8016224:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016228:	e9c0 5500 	strd	r5, r5, [r0]
 801622c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8016230:	304c      	adds	r0, #76	@ 0x4c
 8016232:	f00a fd08 	bl	8020c46 <memset>
 8016236:	2301      	movs	r3, #1
 8016238:	4620      	mov	r0, r4
 801623a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801623e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016242:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8016246:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801624a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801624e:	f7f9 fbc5 	bl	800f9dc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016252:	4620      	mov	r0, r4
 8016254:	bd38      	pop	{r3, r4, r5, pc}

08016256 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016256:	b530      	push	{r4, r5, lr}
 8016258:	2500      	movs	r5, #0
 801625a:	2401      	movs	r4, #1
 801625c:	6843      	ldr	r3, [r0, #4]
 801625e:	b913      	cbnz	r3, 8016266 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016260:	6803      	ldr	r3, [r0, #0]
 8016262:	b313      	cbz	r3, 80162aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016264:	6043      	str	r3, [r0, #4]
 8016266:	7e03      	ldrb	r3, [r0, #24]
 8016268:	b143      	cbz	r3, 801627c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801626a:	6943      	ldr	r3, [r0, #20]
 801626c:	b12b      	cbz	r3, 801627a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801626e:	881a      	ldrh	r2, [r3, #0]
 8016270:	b11a      	cbz	r2, 801627a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016272:	1c9a      	adds	r2, r3, #2
 8016274:	6142      	str	r2, [r0, #20]
 8016276:	8818      	ldrh	r0, [r3, #0]
 8016278:	bd30      	pop	{r4, r5, pc}
 801627a:	7605      	strb	r5, [r0, #24]
 801627c:	6843      	ldr	r3, [r0, #4]
 801627e:	8819      	ldrh	r1, [r3, #0]
 8016280:	b199      	cbz	r1, 80162aa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016282:	1c9a      	adds	r2, r3, #2
 8016284:	2902      	cmp	r1, #2
 8016286:	6042      	str	r2, [r0, #4]
 8016288:	d1f5      	bne.n	8016276 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801628a:	7c03      	ldrb	r3, [r0, #16]
 801628c:	2b01      	cmp	r3, #1
 801628e:	d8e5      	bhi.n	801625c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016290:	1c5a      	adds	r2, r3, #1
 8016292:	3302      	adds	r3, #2
 8016294:	7402      	strb	r2, [r0, #16]
 8016296:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801629a:	6143      	str	r3, [r0, #20]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d0dd      	beq.n	801625c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80162a0:	881b      	ldrh	r3, [r3, #0]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d0da      	beq.n	801625c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80162a6:	7604      	strb	r4, [r0, #24]
 80162a8:	e7d8      	b.n	801625c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80162aa:	2000      	movs	r0, #0
 80162ac:	e7e4      	b.n	8016278 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080162ae <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80162ae:	6001      	str	r1, [r0, #0]
 80162b0:	2100      	movs	r1, #0
 80162b2:	b430      	push	{r4, r5}
 80162b4:	6041      	str	r1, [r0, #4]
 80162b6:	6815      	ldr	r5, [r2, #0]
 80162b8:	6085      	str	r5, [r0, #8]
 80162ba:	6852      	ldr	r2, [r2, #4]
 80162bc:	6443      	str	r3, [r0, #68]	@ 0x44
 80162be:	9b02      	ldr	r3, [sp, #8]
 80162c0:	60c2      	str	r2, [r0, #12]
 80162c2:	7401      	strb	r1, [r0, #16]
 80162c4:	6141      	str	r1, [r0, #20]
 80162c6:	7601      	strb	r1, [r0, #24]
 80162c8:	8701      	strh	r1, [r0, #56]	@ 0x38
 80162ca:	8401      	strh	r1, [r0, #32]
 80162cc:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80162d0:	6483      	str	r3, [r0, #72]	@ 0x48
 80162d2:	bc30      	pop	{r4, r5}
 80162d4:	f7f9 bb82 	b.w	800f9dc <_ZN8touchgfx12TextProvider18initializeInternalEv>

080162d8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80162d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162da:	4605      	mov	r5, r0
 80162dc:	4608      	mov	r0, r1
 80162de:	b1f1      	cbz	r1, 801631e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80162e0:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80162e4:	460b      	mov	r3, r1
 80162e6:	f101 0708 	add.w	r7, r1, #8
 80162ea:	4622      	mov	r2, r4
 80162ec:	6818      	ldr	r0, [r3, #0]
 80162ee:	3308      	adds	r3, #8
 80162f0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80162f4:	4626      	mov	r6, r4
 80162f6:	42bb      	cmp	r3, r7
 80162f8:	c603      	stmia	r6!, {r0, r1}
 80162fa:	4634      	mov	r4, r6
 80162fc:	d1f6      	bne.n	80162ec <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80162fe:	6818      	ldr	r0, [r3, #0]
 8016300:	6030      	str	r0, [r6, #0]
 8016302:	4610      	mov	r0, r2
 8016304:	889b      	ldrh	r3, [r3, #4]
 8016306:	80b3      	strh	r3, [r6, #4]
 8016308:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801630c:	015b      	lsls	r3, r3, #5
 801630e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016312:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016316:	430b      	orrs	r3, r1
 8016318:	425b      	negs	r3, r3
 801631a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801631e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016320 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016320:	b538      	push	{r3, r4, r5, lr}
 8016322:	460c      	mov	r4, r1
 8016324:	6811      	ldr	r1, [r2, #0]
 8016326:	4610      	mov	r0, r2
 8016328:	68cd      	ldr	r5, [r1, #12]
 801632a:	4619      	mov	r1, r3
 801632c:	47a8      	blx	r5
 801632e:	2800      	cmp	r0, #0
 8016330:	bf08      	it	eq
 8016332:	4620      	moveq	r0, r4
 8016334:	bd38      	pop	{r3, r4, r5, pc}
	...

08016338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801633a:	4604      	mov	r4, r0
 801633c:	4615      	mov	r5, r2
 801633e:	4608      	mov	r0, r1
 8016340:	b93a      	cbnz	r2, 8016352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8016342:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8016346:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801634a:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801634e:	4628      	mov	r0, r5
 8016350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016352:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016356:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801635a:	8893      	ldrh	r3, [r2, #4]
 801635c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8016360:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016364:	79ee      	ldrb	r6, [r5, #7]
 8016366:	4316      	orrs	r6, r2
 8016368:	19da      	adds	r2, r3, r7
 801636a:	b291      	uxth	r1, r2
 801636c:	b2b7      	uxth	r7, r6
 801636e:	291d      	cmp	r1, #29
 8016370:	d87b      	bhi.n	801646a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016372:	2201      	movs	r2, #1
 8016374:	10f6      	asrs	r6, r6, #3
 8016376:	408a      	lsls	r2, r1
 8016378:	4974      	ldr	r1, [pc, #464]	@ (801654c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801637a:	420a      	tst	r2, r1
 801637c:	d12e      	bne.n	80163dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801637e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016382:	d072      	beq.n	801646a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8016384:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8016388:	462b      	mov	r3, r5
 801638a:	f105 0e08 	add.w	lr, r5, #8
 801638e:	4615      	mov	r5, r2
 8016390:	6818      	ldr	r0, [r3, #0]
 8016392:	3308      	adds	r3, #8
 8016394:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016398:	4694      	mov	ip, r2
 801639a:	4573      	cmp	r3, lr
 801639c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80163a0:	4662      	mov	r2, ip
 80163a2:	d1f5      	bne.n	8016390 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80163a4:	6818      	ldr	r0, [r3, #0]
 80163a6:	f8cc 0000 	str.w	r0, [ip]
 80163aa:	889b      	ldrh	r3, [r3, #4]
 80163ac:	f8ac 3004 	strh.w	r3, [ip, #4]
 80163b0:	b2b3      	uxth	r3, r6
 80163b2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80163b6:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 80163ba:	1aca      	subs	r2, r1, r3
 80163bc:	1bcf      	subs	r7, r1, r7
 80163be:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80163c2:	b292      	uxth	r2, r2
 80163c4:	1afb      	subs	r3, r7, r3
 80163c6:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 80163ca:	10d2      	asrs	r2, r2, #3
 80163cc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80163d0:	4302      	orrs	r2, r0
 80163d2:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 80163d6:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80163da:	e7b8      	b.n	801634e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80163dc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80163de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80163e2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80163e4:	f640 6333 	movw	r3, #3635	@ 0xe33
 80163e8:	4299      	cmp	r1, r3
 80163ea:	d110      	bne.n	801640e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80163ec:	6803      	ldr	r3, [r0, #0]
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	4798      	blx	r3
 80163f2:	7b41      	ldrb	r1, [r0, #13]
 80163f4:	00cb      	lsls	r3, r1, #3
 80163f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80163fa:	7a03      	ldrb	r3, [r0, #8]
 80163fc:	0648      	lsls	r0, r1, #25
 80163fe:	ea43 0302 	orr.w	r3, r3, r2
 8016402:	bf44      	itt	mi
 8016404:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016408:	b21b      	sxthmi	r3, r3
 801640a:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801640e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8016412:	462a      	mov	r2, r5
 8016414:	f105 0c08 	add.w	ip, r5, #8
 8016418:	443b      	add	r3, r7
 801641a:	4433      	add	r3, r6
 801641c:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8016420:	b29b      	uxth	r3, r3
 8016422:	4635      	mov	r5, r6
 8016424:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016428:	6810      	ldr	r0, [r2, #0]
 801642a:	3208      	adds	r2, #8
 801642c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016430:	4637      	mov	r7, r6
 8016432:	4562      	cmp	r2, ip
 8016434:	c703      	stmia	r7!, {r0, r1}
 8016436:	463e      	mov	r6, r7
 8016438:	d1f6      	bne.n	8016428 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801643a:	6810      	ldr	r0, [r2, #0]
 801643c:	6038      	str	r0, [r7, #0]
 801643e:	8892      	ldrh	r2, [r2, #4]
 8016440:	80ba      	strh	r2, [r7, #4]
 8016442:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016446:	10db      	asrs	r3, r3, #3
 8016448:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801644c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016450:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016454:	4313      	orrs	r3, r2
 8016456:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801645a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801645e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8016462:	1a9b      	subs	r3, r3, r2
 8016464:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8016468:	e771      	b.n	801634e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801646a:	f023 0204 	bic.w	r2, r3, #4
 801646e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016472:	428a      	cmp	r2, r1
 8016474:	d003      	beq.n	801647e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8016476:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801647a:	4293      	cmp	r3, r2
 801647c:	d120      	bne.n	80164c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801647e:	3b01      	subs	r3, #1
 8016480:	4602      	mov	r2, r0
 8016482:	4629      	mov	r1, r5
 8016484:	4620      	mov	r0, r4
 8016486:	b29b      	uxth	r3, r3
 8016488:	f7ff ff4a 	bl	8016320 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801648c:	7b41      	ldrb	r1, [r0, #13]
 801648e:	00cb      	lsls	r3, r1, #3
 8016490:	0649      	lsls	r1, r1, #25
 8016492:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016496:	7a03      	ldrb	r3, [r0, #8]
 8016498:	ea43 0302 	orr.w	r3, r3, r2
 801649c:	bf44      	itt	mi
 801649e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80164a2:	b21b      	sxthmi	r3, r3
 80164a4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80164a8:	7b6b      	ldrb	r3, [r5, #13]
 80164aa:	7aaa      	ldrb	r2, [r5, #10]
 80164ac:	005b      	lsls	r3, r3, #1
 80164ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80164b2:	4313      	orrs	r3, r2
 80164b4:	115a      	asrs	r2, r3, #5
 80164b6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80164ba:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80164be:	e035      	b.n	801652c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80164c0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80164c4:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 80164c8:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80164cc:	7a2a      	ldrb	r2, [r5, #8]
 80164ce:	ea42 0201 	orr.w	r2, r2, r1
 80164d2:	f640 6109 	movw	r1, #3593	@ 0xe09
 80164d6:	bf1c      	itt	ne
 80164d8:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 80164dc:	b212      	sxthne	r2, r2
 80164de:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 80164e2:	f023 0210 	bic.w	r2, r3, #16
 80164e6:	428a      	cmp	r2, r1
 80164e8:	d003      	beq.n	80164f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80164ea:	f640 6213 	movw	r2, #3603	@ 0xe13
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d129      	bne.n	8016546 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80164f2:	7b6e      	ldrb	r6, [r5, #13]
 80164f4:	4629      	mov	r1, r5
 80164f6:	0076      	lsls	r6, r6, #1
 80164f8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80164fc:	7aae      	ldrb	r6, [r5, #10]
 80164fe:	4316      	orrs	r6, r2
 8016500:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016504:	4293      	cmp	r3, r2
 8016506:	4602      	mov	r2, r0
 8016508:	4620      	mov	r0, r4
 801650a:	bf16      	itet	ne
 801650c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016510:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016514:	b29b      	uxthne	r3, r3
 8016516:	f7ff ff03 	bl	8016320 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801651a:	7b43      	ldrb	r3, [r0, #13]
 801651c:	7a82      	ldrb	r2, [r0, #10]
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016524:	4313      	orrs	r3, r2
 8016526:	1af6      	subs	r6, r6, r3
 8016528:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801652c:	7b69      	ldrb	r1, [r5, #13]
 801652e:	00cb      	lsls	r3, r1, #3
 8016530:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016534:	7a2b      	ldrb	r3, [r5, #8]
 8016536:	4313      	orrs	r3, r2
 8016538:	064a      	lsls	r2, r1, #25
 801653a:	bf44      	itt	mi
 801653c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016540:	b21b      	sxthmi	r3, r3
 8016542:	1bdb      	subs	r3, r3, r7
 8016544:	e747      	b.n	80163d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016546:	2300      	movs	r3, #0
 8016548:	e7b7      	b.n	80164ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801654a:	bf00      	nop
 801654c:	3fc00079 	.word	0x3fc00079

08016550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016554:	4604      	mov	r4, r0
 8016556:	b942      	cbnz	r2, 801656a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801655c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016560:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016564:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016568:	e047      	b.n	80165fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801656a:	7b51      	ldrb	r1, [r2, #13]
 801656c:	8893      	ldrh	r3, [r2, #4]
 801656e:	010d      	lsls	r5, r1, #4
 8016570:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016574:	79d5      	ldrb	r5, [r2, #7]
 8016576:	4305      	orrs	r5, r0
 8016578:	2d04      	cmp	r5, #4
 801657a:	bfcc      	ite	gt
 801657c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016580:	f04f 0e01 	movle.w	lr, #1
 8016584:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016588:	f200 80ab 	bhi.w	80166e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801658c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016590:	4283      	cmp	r3, r0
 8016592:	d216      	bcs.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016594:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016598:	4283      	cmp	r3, r0
 801659a:	d859      	bhi.n	8016650 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801659c:	f240 6057 	movw	r0, #1623	@ 0x657
 80165a0:	4283      	cmp	r3, r0
 80165a2:	d20e      	bcs.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80165a4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80165a8:	d24a      	bcs.n	8016640 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80165aa:	f240 604e 	movw	r0, #1614	@ 0x64e
 80165ae:	4283      	cmp	r3, r0
 80165b0:	d207      	bcs.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80165b2:	f240 601a 	movw	r0, #1562	@ 0x61a
 80165b6:	4283      	cmp	r3, r0
 80165b8:	d02a      	beq.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80165ba:	d821      	bhi.n	8016600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80165bc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80165c0:	d35b      	bcc.n	801667a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80165c2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80165c6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80165ca:	f040 80d0 	bne.w	801676e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80165ce:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80165d2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80165d6:	f040 80ca 	bne.w	801676e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80165da:	00cb      	lsls	r3, r1, #3
 80165dc:	0649      	lsls	r1, r1, #25
 80165de:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80165e2:	7a13      	ldrb	r3, [r2, #8]
 80165e4:	ea43 0300 	orr.w	r3, r3, r0
 80165e8:	bf44      	itt	mi
 80165ea:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80165ee:	b21b      	sxthmi	r3, r3
 80165f0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80165f4:	1b5d      	subs	r5, r3, r5
 80165f6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80165fa:	4610      	mov	r0, r2
 80165fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016600:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016604:	4283      	cmp	r3, r0
 8016606:	d338      	bcc.n	801667a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016608:	f240 604c 	movw	r0, #1612	@ 0x64c
 801660c:	4283      	cmp	r3, r0
 801660e:	d9d8      	bls.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016610:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016614:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016618:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801661c:	f040 80f3 	bne.w	8016806 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016620:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016624:	f040 80ef 	bne.w	8016806 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016628:	00cb      	lsls	r3, r1, #3
 801662a:	064e      	lsls	r6, r1, #25
 801662c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016630:	7a13      	ldrb	r3, [r2, #8]
 8016632:	ea43 0300 	orr.w	r3, r3, r0
 8016636:	bf44      	itt	mi
 8016638:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801663c:	b21b      	sxthmi	r3, r3
 801663e:	e7d9      	b.n	80165f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016640:	f240 6054 	movw	r0, #1620	@ 0x654
 8016644:	4283      	cmp	r3, r0
 8016646:	d8e3      	bhi.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016648:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801664c:	d9e0      	bls.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801664e:	e7b8      	b.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016650:	f240 6074 	movw	r0, #1652	@ 0x674
 8016654:	4283      	cmp	r3, r0
 8016656:	d0b4      	beq.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016658:	d82d      	bhi.n	80166b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801665a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801665e:	4283      	cmp	r3, r0
 8016660:	d804      	bhi.n	801666c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016662:	f240 605d 	movw	r0, #1629	@ 0x65d
 8016666:	4283      	cmp	r3, r0
 8016668:	d3d2      	bcc.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801666a:	e7aa      	b.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801666c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8016670:	4283      	cmp	r3, r0
 8016672:	d0cd      	beq.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016674:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8016678:	d0a3      	beq.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801667a:	00cb      	lsls	r3, r1, #3
 801667c:	0649      	lsls	r1, r1, #25
 801667e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016682:	7a13      	ldrb	r3, [r2, #8]
 8016684:	ea43 0300 	orr.w	r3, r3, r0
 8016688:	bf44      	itt	mi
 801668a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801668e:	b21b      	sxthmi	r3, r3
 8016690:	1b5d      	subs	r5, r3, r5
 8016692:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016696:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801669a:	7b53      	ldrb	r3, [r2, #13]
 801669c:	015b      	lsls	r3, r3, #5
 801669e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80166a2:	7993      	ldrb	r3, [r2, #6]
 80166a4:	430b      	orrs	r3, r1
 80166a6:	2105      	movs	r1, #5
 80166a8:	005b      	lsls	r3, r3, #1
 80166aa:	fb93 f3f1 	sdiv	r3, r3, r1
 80166ae:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80166b2:	440b      	add	r3, r1
 80166b4:	e756      	b.n	8016564 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80166b6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80166ba:	4283      	cmp	r3, r0
 80166bc:	d809      	bhi.n	80166d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80166be:	f240 60df 	movw	r0, #1759	@ 0x6df
 80166c2:	4283      	cmp	r3, r0
 80166c4:	f4bf af7d 	bcs.w	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80166c8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80166cc:	2b05      	cmp	r3, #5
 80166ce:	d8d4      	bhi.n	801667a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80166d0:	e777      	b.n	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80166d2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80166d6:	4283      	cmp	r3, r0
 80166d8:	d09a      	beq.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80166da:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80166de:	4283      	cmp	r3, r0
 80166e0:	e7ca      	b.n	8016678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80166e2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80166e6:	d22b      	bcs.n	8016740 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80166e8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80166ec:	4283      	cmp	r3, r0
 80166ee:	d28f      	bcs.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80166f0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80166f4:	4283      	cmp	r3, r0
 80166f6:	d816      	bhi.n	8016726 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80166f8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80166fc:	4283      	cmp	r3, r0
 80166fe:	f4bf af60 	bcs.w	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016702:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8016706:	4283      	cmp	r3, r0
 8016708:	d80a      	bhi.n	8016720 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801670a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801670e:	4283      	cmp	r3, r0
 8016710:	f4bf af57 	bcs.w	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016714:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8016718:	4283      	cmp	r3, r0
 801671a:	f43f af79 	beq.w	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801671e:	e7ac      	b.n	801667a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016720:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8016724:	e7f8      	b.n	8016718 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016726:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801672a:	4283      	cmp	r3, r0
 801672c:	d802      	bhi.n	8016734 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801672e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016732:	e798      	b.n	8016666 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016734:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8016738:	4283      	cmp	r3, r0
 801673a:	f47f af42 	bne.w	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801673e:	e767      	b.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016740:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8016744:	4283      	cmp	r3, r0
 8016746:	f43f af63 	beq.w	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801674a:	d802      	bhi.n	8016752 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801674c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8016750:	e7f2      	b.n	8016738 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016752:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8016756:	4283      	cmp	r3, r0
 8016758:	d805      	bhi.n	8016766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801675a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801675e:	4283      	cmp	r3, r0
 8016760:	f4ff af2f 	bcc.w	80165c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016764:	e754      	b.n	8016610 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016766:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801676a:	4283      	cmp	r3, r0
 801676c:	e7af      	b.n	80166ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801676e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016772:	4617      	mov	r7, r2
 8016774:	f102 0808 	add.w	r8, r2, #8
 8016778:	4666      	mov	r6, ip
 801677a:	6838      	ldr	r0, [r7, #0]
 801677c:	3708      	adds	r7, #8
 801677e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016782:	46e6      	mov	lr, ip
 8016784:	4547      	cmp	r7, r8
 8016786:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801678a:	46f4      	mov	ip, lr
 801678c:	d1f5      	bne.n	801677a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801678e:	6838      	ldr	r0, [r7, #0]
 8016790:	f8ce 0000 	str.w	r0, [lr]
 8016794:	88b9      	ldrh	r1, [r7, #4]
 8016796:	f8ae 1004 	strh.w	r1, [lr, #4]
 801679a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801679e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80167a2:	d009      	beq.n	80167b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80167a4:	7b51      	ldrb	r1, [r2, #13]
 80167a6:	7992      	ldrb	r2, [r2, #6]
 80167a8:	0149      	lsls	r1, r1, #5
 80167aa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80167ae:	4311      	orrs	r1, r2
 80167b0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80167b4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80167b8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80167bc:	b2ad      	uxth	r5, r5
 80167be:	d00d      	beq.n	80167dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80167c0:	442b      	add	r3, r5
 80167c2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80167cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80167d0:	10db      	asrs	r3, r3, #3
 80167d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80167d6:	4313      	orrs	r3, r2
 80167d8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80167dc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80167e0:	00cb      	lsls	r3, r1, #3
 80167e2:	064f      	lsls	r7, r1, #25
 80167e4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80167e8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80167ec:	ea43 0302 	orr.w	r3, r3, r2
 80167f0:	bf44      	itt	mi
 80167f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80167f6:	b21b      	sxthmi	r3, r3
 80167f8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80167fc:	1b5b      	subs	r3, r3, r5
 80167fe:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8016802:	4632      	mov	r2, r6
 8016804:	e6f9      	b.n	80165fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016806:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801680a:	4617      	mov	r7, r2
 801680c:	f102 0908 	add.w	r9, r2, #8
 8016810:	4666      	mov	r6, ip
 8016812:	6838      	ldr	r0, [r7, #0]
 8016814:	3708      	adds	r7, #8
 8016816:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801681a:	46e0      	mov	r8, ip
 801681c:	454f      	cmp	r7, r9
 801681e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016822:	46c4      	mov	ip, r8
 8016824:	d1f5      	bne.n	8016812 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016826:	6838      	ldr	r0, [r7, #0]
 8016828:	f8c8 0000 	str.w	r0, [r8]
 801682c:	88b9      	ldrh	r1, [r7, #4]
 801682e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016832:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8016836:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801683a:	d009      	beq.n	8016850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801683c:	7b51      	ldrb	r1, [r2, #13]
 801683e:	7992      	ldrb	r2, [r2, #6]
 8016840:	0149      	lsls	r1, r1, #5
 8016842:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016846:	4311      	orrs	r1, r2
 8016848:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801684c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8016850:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016854:	d00e      	beq.n	8016874 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016856:	eba3 030e 	sub.w	r3, r3, lr
 801685a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801685e:	b29b      	uxth	r3, r3
 8016860:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016864:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8016868:	10db      	asrs	r3, r3, #3
 801686a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801686e:	4313      	orrs	r3, r2
 8016870:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8016874:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8016878:	00cb      	lsls	r3, r1, #3
 801687a:	0648      	lsls	r0, r1, #25
 801687c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016880:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8016884:	ea43 0302 	orr.w	r3, r3, r2
 8016888:	bf44      	itt	mi
 801688a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801688e:	b21b      	sxthmi	r3, r3
 8016890:	1b5d      	subs	r5, r3, r5
 8016892:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016896:	e7b4      	b.n	8016802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016898 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801689c:	461e      	mov	r6, r3
 801689e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80168a0:	4604      	mov	r4, r0
 80168a2:	4617      	mov	r7, r2
 80168a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80168a8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80168ac:	f7f8 fff0 	bl	800f890 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80168b0:	4605      	mov	r5, r0
 80168b2:	b918      	cbnz	r0, 80168bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80168b4:	6030      	str	r0, [r6, #0]
 80168b6:	4628      	mov	r0, r5
 80168b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	4601      	mov	r1, r0
 80168c0:	4638      	mov	r0, r7
 80168c2:	68db      	ldr	r3, [r3, #12]
 80168c4:	4798      	blx	r3
 80168c6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80168ca:	4602      	mov	r2, r0
 80168cc:	6030      	str	r0, [r6, #0]
 80168ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80168d2:	d213      	bcs.n	80168fc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80168d4:	4643      	mov	r3, r8
 80168d6:	4639      	mov	r1, r7
 80168d8:	4620      	mov	r0, r4
 80168da:	f7ff fe39 	bl	8016550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80168de:	6030      	str	r0, [r6, #0]
 80168e0:	6833      	ldr	r3, [r6, #0]
 80168e2:	b143      	cbz	r3, 80168f6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80168e4:	7b5a      	ldrb	r2, [r3, #13]
 80168e6:	7a9b      	ldrb	r3, [r3, #10]
 80168e8:	0052      	lsls	r2, r2, #1
 80168ea:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80168ee:	4313      	orrs	r3, r2
 80168f0:	bf0c      	ite	eq
 80168f2:	2301      	moveq	r3, #1
 80168f4:	2300      	movne	r3, #0
 80168f6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80168fa:	e7dc      	b.n	80168b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80168fc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8016900:	b29b      	uxth	r3, r3
 8016902:	2b7f      	cmp	r3, #127	@ 0x7f
 8016904:	d804      	bhi.n	8016910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016906:	4639      	mov	r1, r7
 8016908:	4620      	mov	r0, r4
 801690a:	f7ff fd15 	bl	8016338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801690e:	e7e6      	b.n	80168de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016910:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8016914:	2b00      	cmp	r3, #0
 8016916:	d0e3      	beq.n	80168e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016918:	f640 1302 	movw	r3, #2306	@ 0x902
 801691c:	429d      	cmp	r5, r3
 801691e:	d1df      	bne.n	80168e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016920:	4601      	mov	r1, r0
 8016922:	4620      	mov	r0, r4
 8016924:	f7ff fcd8 	bl	80162d8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016928:	e7d9      	b.n	80168de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801692a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801692a:	b510      	push	{r4, lr}
 801692c:	4604      	mov	r4, r0
 801692e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8016932:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016934:	b1e1      	cbz	r1, 8016970 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016936:	2b0a      	cmp	r3, #10
 8016938:	d02d      	beq.n	8016996 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801693a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801693c:	3901      	subs	r1, #1
 801693e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016942:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8016944:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8016948:	1c51      	adds	r1, r2, #1
 801694a:	b289      	uxth	r1, r1
 801694c:	2901      	cmp	r1, #1
 801694e:	bf8a      	itet	hi
 8016950:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016954:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8016956:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8016958:	1c5a      	adds	r2, r3, #1
 801695a:	8722      	strh	r2, [r4, #56]	@ 0x38
 801695c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801695e:	4413      	add	r3, r2
 8016960:	b29b      	uxth	r3, r3
 8016962:	2b09      	cmp	r3, #9
 8016964:	bf88      	it	hi
 8016966:	3b0a      	subhi	r3, #10
 8016968:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801696c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801696e:	e7de      	b.n	801692e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016970:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8016972:	2b0a      	cmp	r3, #10
 8016974:	d00f      	beq.n	8016996 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016976:	4620      	mov	r0, r4
 8016978:	f7ff fc6d 	bl	8016256 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801697c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801697e:	1c5a      	adds	r2, r3, #1
 8016980:	8722      	strh	r2, [r4, #56]	@ 0x38
 8016982:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016984:	4413      	add	r3, r2
 8016986:	b29b      	uxth	r3, r3
 8016988:	2b09      	cmp	r3, #9
 801698a:	bf88      	it	hi
 801698c:	3b0a      	subhi	r3, #10
 801698e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016992:	8458      	strh	r0, [r3, #34]	@ 0x22
 8016994:	e7ec      	b.n	8016970 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016996:	bd10      	pop	{r4, pc}

08016998 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016998:	b538      	push	{r3, r4, r5, lr}
 801699a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801699c:	4604      	mov	r4, r0
 801699e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80169a2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80169a4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80169a6:	3a01      	subs	r2, #1
 80169a8:	8702      	strh	r2, [r0, #56]	@ 0x38
 80169aa:	1c5a      	adds	r2, r3, #1
 80169ac:	b292      	uxth	r2, r2
 80169ae:	2a09      	cmp	r2, #9
 80169b0:	bf8a      	itet	hi
 80169b2:	3b09      	subhi	r3, #9
 80169b4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80169b6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80169b8:	f7ff ffb7 	bl	801692a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80169bc:	8c23      	ldrh	r3, [r4, #32]
 80169be:	2b01      	cmp	r3, #1
 80169c0:	bf9c      	itt	ls
 80169c2:	3301      	addls	r3, #1
 80169c4:	8423      	strhls	r3, [r4, #32]
 80169c6:	8be3      	ldrh	r3, [r4, #30]
 80169c8:	b90b      	cbnz	r3, 80169ce <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80169ca:	2302      	movs	r3, #2
 80169cc:	83e3      	strh	r3, [r4, #30]
 80169ce:	8be3      	ldrh	r3, [r4, #30]
 80169d0:	4628      	mov	r0, r5
 80169d2:	3b01      	subs	r3, #1
 80169d4:	b29b      	uxth	r3, r3
 80169d6:	83e3      	strh	r3, [r4, #30]
 80169d8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80169dc:	8365      	strh	r5, [r4, #26]
 80169de:	bd38      	pop	{r3, r4, r5, pc}

080169e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80169e0:	428a      	cmp	r2, r1
 80169e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169e6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80169e8:	d932      	bls.n	8016a50 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80169ea:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 80169ec:	1a54      	subs	r4, r2, r1
 80169ee:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 80169f2:	19ee      	adds	r6, r5, r7
 80169f4:	fa1f fe84 	uxth.w	lr, r4
 80169f8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 80169fc:	3e01      	subs	r6, #1
 80169fe:	b2b4      	uxth	r4, r6
 8016a00:	eba4 090e 	sub.w	r9, r4, lr
 8016a04:	fa1f f989 	uxth.w	r9, r9
 8016a08:	2c09      	cmp	r4, #9
 8016a0a:	4626      	mov	r6, r4
 8016a0c:	bf88      	it	hi
 8016a0e:	f1a4 060a 	subhi.w	r6, r4, #10
 8016a12:	f1bc 0f00 	cmp.w	ip, #0
 8016a16:	f104 34ff 	add.w	r4, r4, #4294967295
 8016a1a:	bf08      	it	eq
 8016a1c:	f04f 0c02 	moveq.w	ip, #2
 8016a20:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8016a24:	b2a4      	uxth	r4, r4
 8016a26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016a2a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8016a2e:	454c      	cmp	r4, r9
 8016a30:	fa1f fc8c 	uxth.w	ip, ip
 8016a34:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8016a38:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8016a3c:	d1e4      	bne.n	8016a08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8016a3e:	eba5 050e 	sub.w	r5, r5, lr
 8016a42:	eb0e 0408 	add.w	r4, lr, r8
 8016a46:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8016a4a:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016a4c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8016a50:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8016a52:	250a      	movs	r5, #10
 8016a54:	1a64      	subs	r4, r4, r1
 8016a56:	4439      	add	r1, r7
 8016a58:	b289      	uxth	r1, r1
 8016a5a:	8704      	strh	r4, [r0, #56]	@ 0x38
 8016a5c:	2909      	cmp	r1, #9
 8016a5e:	bf88      	it	hi
 8016a60:	390a      	subhi	r1, #10
 8016a62:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016a64:	b18a      	cbz	r2, 8016a8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8016a66:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8016a68:	3a01      	subs	r2, #1
 8016a6a:	3101      	adds	r1, #1
 8016a6c:	b292      	uxth	r2, r2
 8016a6e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8016a72:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016a74:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016a76:	b901      	cbnz	r1, 8016a7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8016a78:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016a7a:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8016a7c:	3901      	subs	r1, #1
 8016a7e:	b289      	uxth	r1, r1
 8016a80:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8016a82:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8016a86:	844c      	strh	r4, [r1, #34]	@ 0x22
 8016a88:	e7ec      	b.n	8016a64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8016a8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a8e:	f7ff bf4c 	b.w	801692a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08016a92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8016a92:	b570      	push	{r4, r5, r6, lr}
 8016a94:	2500      	movs	r5, #0
 8016a96:	4295      	cmp	r5, r2
 8016a98:	d011      	beq.n	8016abe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8016a9a:	8bc4      	ldrh	r4, [r0, #30]
 8016a9c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8016aa0:	4414      	add	r4, r2
 8016aa2:	3c01      	subs	r4, #1
 8016aa4:	1b64      	subs	r4, r4, r5
 8016aa6:	b2a4      	uxth	r4, r4
 8016aa8:	2c01      	cmp	r4, #1
 8016aaa:	bf88      	it	hi
 8016aac:	3c02      	subhi	r4, #2
 8016aae:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016ab2:	8b64      	ldrh	r4, [r4, #26]
 8016ab4:	42b4      	cmp	r4, r6
 8016ab6:	d117      	bne.n	8016ae8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8016ab8:	3501      	adds	r5, #1
 8016aba:	b2ad      	uxth	r5, r5
 8016abc:	e7eb      	b.n	8016a96 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8016abe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8016ac2:	2400      	movs	r4, #0
 8016ac4:	4413      	add	r3, r2
 8016ac6:	b2a2      	uxth	r2, r4
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	da0f      	bge.n	8016aec <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8016acc:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8016ace:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8016ad2:	3401      	adds	r4, #1
 8016ad4:	4432      	add	r2, r6
 8016ad6:	b292      	uxth	r2, r2
 8016ad8:	2a09      	cmp	r2, #9
 8016ada:	bf88      	it	hi
 8016adc:	3a0a      	subhi	r2, #10
 8016ade:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8016ae2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8016ae4:	42aa      	cmp	r2, r5
 8016ae6:	d0ee      	beq.n	8016ac6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8016ae8:	2000      	movs	r0, #0
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	2001      	movs	r0, #1
 8016aee:	e7fc      	b.n	8016aea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08016af0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8016af0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af4:	4605      	mov	r5, r0
 8016af6:	4616      	mov	r6, r2
 8016af8:	1c8c      	adds	r4, r1, #2
 8016afa:	8809      	ldrh	r1, [r1, #0]
 8016afc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8016b00:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8016b04:	42b3      	cmp	r3, r6
 8016b06:	d124      	bne.n	8016b52 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8016b08:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8016b0c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8016b10:	f001 070f 	and.w	r7, r1, #15
 8016b14:	4652      	mov	r2, sl
 8016b16:	f8cd 8000 	str.w	r8, [sp]
 8016b1a:	464b      	mov	r3, r9
 8016b1c:	4621      	mov	r1, r4
 8016b1e:	4628      	mov	r0, r5
 8016b20:	f7ff ffb7 	bl	8016a92 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8016b24:	4683      	mov	fp, r0
 8016b26:	b168      	cbz	r0, 8016b44 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8016b28:	eb0a 0109 	add.w	r1, sl, r9
 8016b2c:	463a      	mov	r2, r7
 8016b2e:	4628      	mov	r0, r5
 8016b30:	4441      	add	r1, r8
 8016b32:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8016b36:	4649      	mov	r1, r9
 8016b38:	f7ff ff52 	bl	80169e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8016b3c:	4658      	mov	r0, fp
 8016b3e:	b003      	add	sp, #12
 8016b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b44:	eb07 010a 	add.w	r1, r7, sl
 8016b48:	4449      	add	r1, r9
 8016b4a:	4441      	add	r1, r8
 8016b4c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8016b50:	e7d2      	b.n	8016af8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8016b52:	f04f 0b00 	mov.w	fp, #0
 8016b56:	e7f1      	b.n	8016b3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08016b58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8016b58:	b570      	push	{r4, r5, r6, lr}
 8016b5a:	8810      	ldrh	r0, [r2, #0]
 8016b5c:	4298      	cmp	r0, r3
 8016b5e:	d817      	bhi.n	8016b90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016b60:	1e48      	subs	r0, r1, #1
 8016b62:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8016b66:	4298      	cmp	r0, r3
 8016b68:	d312      	bcc.n	8016b90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016b6a:	2400      	movs	r4, #0
 8016b6c:	428c      	cmp	r4, r1
 8016b6e:	d20f      	bcs.n	8016b90 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8016b70:	1860      	adds	r0, r4, r1
 8016b72:	1040      	asrs	r0, r0, #1
 8016b74:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8016b78:	0085      	lsls	r5, r0, #2
 8016b7a:	42b3      	cmp	r3, r6
 8016b7c:	d902      	bls.n	8016b84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8016b7e:	3001      	adds	r0, #1
 8016b80:	b284      	uxth	r4, r0
 8016b82:	e7f3      	b.n	8016b6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016b84:	d201      	bcs.n	8016b8a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8016b86:	b281      	uxth	r1, r0
 8016b88:	e7f0      	b.n	8016b6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8016b8a:	442a      	add	r2, r5
 8016b8c:	8850      	ldrh	r0, [r2, #2]
 8016b8e:	bd70      	pop	{r4, r5, r6, pc}
 8016b90:	2000      	movs	r0, #0
 8016b92:	e7fc      	b.n	8016b8e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08016b94 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8016b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b98:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	260b      	movs	r6, #11
 8016b9e:	886f      	ldrh	r7, [r5, #2]
 8016ba0:	087f      	lsrs	r7, r7, #1
 8016ba2:	3e01      	subs	r6, #1
 8016ba4:	d013      	beq.n	8016bce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016ba6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8016ba8:	462a      	mov	r2, r5
 8016baa:	4639      	mov	r1, r7
 8016bac:	4620      	mov	r0, r4
 8016bae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016bb2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8016bb6:	4643      	mov	r3, r8
 8016bb8:	f7ff ffce 	bl	8016b58 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8016bbc:	b138      	cbz	r0, 8016bce <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8016bbe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8016bc2:	4642      	mov	r2, r8
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	f7ff ff93 	bl	8016af0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8016bca:	2800      	cmp	r0, #0
 8016bcc:	d1e9      	bne.n	8016ba2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8016bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08016bd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8016bd4:	b570      	push	{r4, r5, r6, lr}
 8016bd6:	694a      	ldr	r2, [r1, #20]
 8016bd8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8016bda:	684b      	ldr	r3, [r1, #4]
 8016bdc:	1b54      	subs	r4, r2, r5
 8016bde:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8016be0:	f000 8106 	beq.w	8016df0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8016be4:	1b9b      	subs	r3, r3, r6
 8016be6:	d003      	beq.n	8016bf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016be8:	4363      	muls	r3, r4
 8016bea:	2210      	movs	r2, #16
 8016bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8016bf0:	680c      	ldr	r4, [r1, #0]
 8016bf2:	698a      	ldr	r2, [r1, #24]
 8016bf4:	1b65      	subs	r5, r4, r5
 8016bf6:	f000 80fd 	beq.w	8016df4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8016bfa:	1b92      	subs	r2, r2, r6
 8016bfc:	d003      	beq.n	8016c06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016bfe:	436a      	muls	r2, r5
 8016c00:	2410      	movs	r4, #16
 8016c02:	fb92 f2f4 	sdiv	r2, r2, r4
 8016c06:	1a9b      	subs	r3, r3, r2
 8016c08:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8016e30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8016c0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016c10:	460a      	mov	r2, r1
 8016c12:	ee07 3a90 	vmov	s15, r3
 8016c16:	f100 040c 	add.w	r4, r0, #12
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c20:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016c24:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8016c28:	eeb1 6a43 	vneg.f32	s12, s6
 8016c2c:	edd2 7a02 	vldr	s15, [r2, #8]
 8016c30:	3214      	adds	r2, #20
 8016c32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016c36:	ece3 6a01 	vstmia	r3!, {s13}
 8016c3a:	429c      	cmp	r4, r3
 8016c3c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8016c40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016c44:	edc3 7a02 	vstr	s15, [r3, #8]
 8016c48:	ed52 7a01 	vldr	s15, [r2, #-4]
 8016c4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016c50:	edc3 7a05 	vstr	s15, [r3, #20]
 8016c54:	d1ea      	bne.n	8016c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8016c56:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016c58:	698b      	ldr	r3, [r1, #24]
 8016c5a:	edd0 4a02 	vldr	s9, [r0, #8]
 8016c5e:	1a9b      	subs	r3, r3, r2
 8016c60:	edd0 3a00 	vldr	s7, [r0]
 8016c64:	edd0 6a01 	vldr	s13, [r0, #4]
 8016c68:	ee07 3a90 	vmov	s15, r3
 8016c6c:	684b      	ldr	r3, [r1, #4]
 8016c6e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8016c72:	ed90 5a05 	vldr	s10, [r0, #20]
 8016c76:	1a9b      	subs	r3, r3, r2
 8016c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c7c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8016c80:	ed90 2a03 	vldr	s4, [r0, #12]
 8016c84:	ee07 3a10 	vmov	s14, r3
 8016c88:	edd0 5a04 	vldr	s11, [r0, #16]
 8016c8c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016c90:	ed90 1a07 	vldr	s2, [r0, #28]
 8016c94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c98:	edd0 2a06 	vldr	s5, [r0, #24]
 8016c9c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8016ca0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8016ca4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016ca8:	ee32 5a45 	vsub.f32	s10, s4, s10
 8016cac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016cb0:	ee67 7a83 	vmul.f32	s15, s15, s6
 8016cb4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8016cb8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016cba:	694a      	ldr	r2, [r1, #20]
 8016cbc:	1b13      	subs	r3, r2, r4
 8016cbe:	ee07 3a10 	vmov	s14, r3
 8016cc2:	680b      	ldr	r3, [r1, #0]
 8016cc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016cc8:	1b1b      	subs	r3, r3, r4
 8016cca:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016cce:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8016cd2:	ee07 3a10 	vmov	s14, r3
 8016cd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016cda:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016cde:	eee6 4a87 	vfma.f32	s9, s13, s14
 8016ce2:	ee64 4a86 	vmul.f32	s9, s9, s12
 8016ce6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8016cea:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016cec:	698b      	ldr	r3, [r1, #24]
 8016cee:	1a9b      	subs	r3, r3, r2
 8016cf0:	ee06 3a90 	vmov	s13, r3
 8016cf4:	684b      	ldr	r3, [r1, #4]
 8016cf6:	1a9b      	subs	r3, r3, r2
 8016cf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016cfc:	ee07 3a10 	vmov	s14, r3
 8016d00:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016d04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d08:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8016d0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016d10:	eee5 6a87 	vfma.f32	s13, s11, s14
 8016d14:	ee66 6a83 	vmul.f32	s13, s13, s6
 8016d18:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8016d1c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016d1e:	694a      	ldr	r2, [r1, #20]
 8016d20:	1b13      	subs	r3, r2, r4
 8016d22:	ee07 3a10 	vmov	s14, r3
 8016d26:	680b      	ldr	r3, [r1, #0]
 8016d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d2c:	1b1b      	subs	r3, r3, r4
 8016d2e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016d32:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016d36:	ee07 3a10 	vmov	s14, r3
 8016d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d3e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016d42:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016d46:	edd0 5a08 	vldr	s11, [r0, #32]
 8016d4a:	ee31 1a65 	vsub.f32	s2, s2, s11
 8016d4e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8016d52:	ee25 5a06 	vmul.f32	s10, s10, s12
 8016d56:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8016d5a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016d5c:	698b      	ldr	r3, [r1, #24]
 8016d5e:	1a9b      	subs	r3, r3, r2
 8016d60:	ee07 3a10 	vmov	s14, r3
 8016d64:	684b      	ldr	r3, [r1, #4]
 8016d66:	1a9b      	subs	r3, r3, r2
 8016d68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016d6c:	ee01 3a90 	vmov	s3, r3
 8016d70:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016d74:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8016d78:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8016d7c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8016d80:	eea1 7a21 	vfma.f32	s14, s2, s3
 8016d84:	ee27 7a03 	vmul.f32	s14, s14, s6
 8016d88:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8016d8c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8016d8e:	694a      	ldr	r2, [r1, #20]
 8016d90:	1b13      	subs	r3, r2, r4
 8016d92:	ee03 3a10 	vmov	s6, r3
 8016d96:	680b      	ldr	r3, [r1, #0]
 8016d98:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016d9c:	1b1b      	subs	r3, r3, r4
 8016d9e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8016da2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8016da6:	ee03 3a10 	vmov	s6, r3
 8016daa:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016dae:	ee23 4a04 	vmul.f32	s8, s6, s8
 8016db2:	eee1 5a04 	vfma.f32	s11, s2, s8
 8016db6:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016dba:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8016dbe:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8016dc2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8016dc6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8016dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dce:	dd13      	ble.n	8016df8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8016dd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016dd4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016dd8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016dda:	eee3 7a87 	vfma.f32	s15, s7, s14
 8016dde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de6:	dd15      	ble.n	8016e14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016de8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016dec:	6403      	str	r3, [r0, #64]	@ 0x40
 8016dee:	bd70      	pop	{r4, r5, r6, pc}
 8016df0:	4623      	mov	r3, r4
 8016df2:	e6fd      	b.n	8016bf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8016df4:	462a      	mov	r2, r5
 8016df6:	e706      	b.n	8016c06 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016df8:	d502      	bpl.n	8016e00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016dfa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016dfe:	e7e9      	b.n	8016dd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016e00:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8016e04:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016e08:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e10:	dade      	bge.n	8016dd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8016e12:	e7f2      	b.n	8016dfa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8016e14:	d502      	bpl.n	8016e1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8016e16:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016e1a:	e7e7      	b.n	8016dec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016e1c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016e20:	eee3 4a86 	vfma.f32	s9, s7, s12
 8016e24:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e2c:	dadc      	bge.n	8016de8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8016e2e:	e7f2      	b.n	8016e16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016e30:	3d800000 	.word	0x3d800000

08016e34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8016e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e38:	2714      	movs	r7, #20
 8016e3a:	435f      	muls	r7, r3
 8016e3c:	eb02 0c07 	add.w	ip, r2, r7
 8016e40:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8016e44:	f115 0e0f 	adds.w	lr, r5, #15
 8016e48:	f100 80a2 	bmi.w	8016f90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8016e4c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8016e50:	9c08      	ldr	r4, [sp, #32]
 8016e52:	2614      	movs	r6, #20
 8016e54:	f8c0 e014 	str.w	lr, [r0, #20]
 8016e58:	4366      	muls	r6, r4
 8016e5a:	eb02 0806 	add.w	r8, r2, r6
 8016e5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016e62:	f115 040f 	adds.w	r4, r5, #15
 8016e66:	f100 809f 	bmi.w	8016fa8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8016e6a:	1124      	asrs	r4, r4, #4
 8016e6c:	eba4 040e 	sub.w	r4, r4, lr
 8016e70:	6184      	str	r4, [r0, #24]
 8016e72:	2c00      	cmp	r4, #0
 8016e74:	f000 808a 	beq.w	8016f8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8016e78:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8016e7c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016e80:	5995      	ldr	r5, [r2, r6]
 8016e82:	eba4 0809 	sub.w	r8, r4, r9
 8016e86:	59d4      	ldr	r4, [r2, r7]
 8016e88:	eba5 0a04 	sub.w	sl, r5, r4
 8016e8c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8016e90:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8016e94:	fb0e fe05 	mul.w	lr, lr, r5
 8016e98:	fb0a ee19 	mls	lr, sl, r9, lr
 8016e9c:	fb08 e404 	mla	r4, r8, r4, lr
 8016ea0:	3c01      	subs	r4, #1
 8016ea2:	19a4      	adds	r4, r4, r6
 8016ea4:	f100 808c 	bmi.w	8016fc0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8016ea8:	fb94 fef6 	sdiv	lr, r4, r6
 8016eac:	fb06 441e 	mls	r4, r6, lr, r4
 8016eb0:	f8c0 e000 	str.w	lr, [r0]
 8016eb4:	6104      	str	r4, [r0, #16]
 8016eb6:	2d00      	cmp	r5, #0
 8016eb8:	f2c0 8095 	blt.w	8016fe6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8016ebc:	fb95 f4f6 	sdiv	r4, r5, r6
 8016ec0:	fb06 5514 	mls	r5, r6, r4, r5
 8016ec4:	6044      	str	r4, [r0, #4]
 8016ec6:	6085      	str	r5, [r0, #8]
 8016ec8:	60c6      	str	r6, [r0, #12]
 8016eca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016ece:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8016ed2:	6945      	ldr	r5, [r0, #20]
 8016ed4:	59d2      	ldr	r2, [r2, r7]
 8016ed6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8016eda:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8017008 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8016ede:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8016ee2:	ee07 4a10 	vmov	s14, r4
 8016ee6:	6804      	ldr	r4, [r0, #0]
 8016ee8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8016eec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ef0:	ee07 2a90 	vmov	s15, r2
 8016ef4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f00:	edd3 6a00 	vldr	s13, [r3]
 8016f04:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016f08:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8016f0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016f10:	edc0 6a07 	vstr	s13, [r0, #28]
 8016f14:	edd0 6a01 	vldr	s13, [r0, #4]
 8016f18:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8016f1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016f20:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8016f24:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016f28:	ed80 6a08 	vstr	s12, [r0, #32]
 8016f2c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8016f2e:	6242      	str	r2, [r0, #36]	@ 0x24
 8016f30:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8016f34:	ed93 6a03 	vldr	s12, [r3, #12]
 8016f38:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016f3c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8016f40:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8016f44:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8016f48:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8016f4c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8016f50:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016f54:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8016f58:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8016f5a:	6302      	str	r2, [r0, #48]	@ 0x30
 8016f5c:	ed93 6a06 	vldr	s12, [r3, #24]
 8016f60:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8016f64:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016f68:	eeb0 7a46 	vmov.f32	s14, s12
 8016f6c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8016f70:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016f74:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8016f78:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8016f7c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8016f80:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016f84:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8016f88:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8016f8a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f90:	2410      	movs	r4, #16
 8016f92:	f1c5 0501 	rsb	r5, r5, #1
 8016f96:	fb9e fef4 	sdiv	lr, lr, r4
 8016f9a:	f015 050f 	ands.w	r5, r5, #15
 8016f9e:	bf18      	it	ne
 8016fa0:	2501      	movne	r5, #1
 8016fa2:	ebae 0e05 	sub.w	lr, lr, r5
 8016fa6:	e753      	b.n	8016e50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8016fa8:	f04f 0910 	mov.w	r9, #16
 8016fac:	f1c5 0501 	rsb	r5, r5, #1
 8016fb0:	fb94 f4f9 	sdiv	r4, r4, r9
 8016fb4:	f015 050f 	ands.w	r5, r5, #15
 8016fb8:	bf18      	it	ne
 8016fba:	2501      	movne	r5, #1
 8016fbc:	1b64      	subs	r4, r4, r5
 8016fbe:	e755      	b.n	8016e6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8016fc0:	4264      	negs	r4, r4
 8016fc2:	fb94 fef6 	sdiv	lr, r4, r6
 8016fc6:	f1ce 0800 	rsb	r8, lr, #0
 8016fca:	fb06 441e 	mls	r4, r6, lr, r4
 8016fce:	f8c0 8000 	str.w	r8, [r0]
 8016fd2:	6104      	str	r4, [r0, #16]
 8016fd4:	2c00      	cmp	r4, #0
 8016fd6:	f43f af6e 	beq.w	8016eb6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8016fda:	ea6f 0e0e 	mvn.w	lr, lr
 8016fde:	1b34      	subs	r4, r6, r4
 8016fe0:	f8c0 e000 	str.w	lr, [r0]
 8016fe4:	e766      	b.n	8016eb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8016fe6:	426d      	negs	r5, r5
 8016fe8:	fb95 f4f6 	sdiv	r4, r5, r6
 8016fec:	f1c4 0e00 	rsb	lr, r4, #0
 8016ff0:	fb06 5514 	mls	r5, r6, r4, r5
 8016ff4:	f8c0 e004 	str.w	lr, [r0, #4]
 8016ff8:	6085      	str	r5, [r0, #8]
 8016ffa:	2d00      	cmp	r5, #0
 8016ffc:	f43f af64 	beq.w	8016ec8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017000:	43e4      	mvns	r4, r4
 8017002:	1b75      	subs	r5, r6, r5
 8017004:	6044      	str	r4, [r0, #4]
 8017006:	e75e      	b.n	8016ec6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017008:	3d800000 	.word	0x3d800000

0801700c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801700c:	4b01      	ldr	r3, [pc, #4]	@ (8017014 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801700e:	6018      	str	r0, [r3, #0]
 8017010:	4770      	bx	lr
 8017012:	bf00      	nop
 8017014:	2401b5a8 	.word	0x2401b5a8

08017018 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017018:	4b06      	ldr	r3, [pc, #24]	@ (8017034 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801701a:	881a      	ldrh	r2, [r3, #0]
 801701c:	4282      	cmp	r2, r0
 801701e:	d807      	bhi.n	8017030 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017020:	4b05      	ldr	r3, [pc, #20]	@ (8017038 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017022:	881b      	ldrh	r3, [r3, #0]
 8017024:	4413      	add	r3, r2
 8017026:	4298      	cmp	r0, r3
 8017028:	bfac      	ite	ge
 801702a:	2000      	movge	r0, #0
 801702c:	2001      	movlt	r0, #1
 801702e:	4770      	bx	lr
 8017030:	2000      	movs	r0, #0
 8017032:	4770      	bx	lr
 8017034:	2401b5c8 	.word	0x2401b5c8
 8017038:	2401b5cc 	.word	0x2401b5cc

0801703c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801703c:	b508      	push	{r3, lr}
 801703e:	4601      	mov	r1, r0
 8017040:	f7ff ffea 	bl	8017018 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017044:	b118      	cbz	r0, 801704e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017046:	4b02      	ldr	r3, [pc, #8]	@ (8017050 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801704e:	bd08      	pop	{r3, pc}
 8017050:	2401b5ac 	.word	0x2401b5ac

08017054 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4604      	mov	r4, r0
 8017058:	f7ff ffde 	bl	8017018 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801705c:	b1d8      	cbz	r0, 8017096 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801705e:	4b0f      	ldr	r3, [pc, #60]	@ (801709c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	1ae4      	subs	r4, r4, r3
 8017064:	230e      	movs	r3, #14
 8017066:	4363      	muls	r3, r4
 8017068:	4c0d      	ldr	r4, [pc, #52]	@ (80170a0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801706a:	6825      	ldr	r5, [r4, #0]
 801706c:	18ea      	adds	r2, r5, r3
 801706e:	7b12      	ldrb	r2, [r2, #12]
 8017070:	f012 0220 	ands.w	r2, r2, #32
 8017074:	d010      	beq.n	8017098 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 8017076:	f9b1 2000 	ldrsh.w	r2, [r1]
 801707a:	52ea      	strh	r2, [r5, r3]
 801707c:	6822      	ldr	r2, [r4, #0]
 801707e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017082:	441a      	add	r2, r3
 8017084:	8055      	strh	r5, [r2, #2]
 8017086:	6822      	ldr	r2, [r4, #0]
 8017088:	4413      	add	r3, r2
 801708a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801708e:	809a      	strh	r2, [r3, #4]
 8017090:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8017094:	80da      	strh	r2, [r3, #6]
 8017096:	bd38      	pop	{r3, r4, r5, pc}
 8017098:	4610      	mov	r0, r2
 801709a:	e7fc      	b.n	8017096 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801709c:	2401b5c8 	.word	0x2401b5c8
 80170a0:	2401b5b0 	.word	0x2401b5b0

080170a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80170a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80170a8:	4606      	mov	r6, r0
 80170aa:	460c      	mov	r4, r1
 80170ac:	f7ff ffb4 	bl	8017018 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80170b0:	b918      	cbnz	r0, 80170ba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80170b2:	2000      	movs	r0, #0
 80170b4:	b002      	add	sp, #8
 80170b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ba:	4608      	mov	r0, r1
 80170bc:	f7fb fa3f 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80170c0:	2800      	cmp	r0, #0
 80170c2:	d1f6      	bne.n	80170b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80170c4:	4b3f      	ldr	r3, [pc, #252]	@ (80171c4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80170c6:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80171c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80170ca:	881d      	ldrh	r5, [r3, #0]
 80170cc:	f8d9 a000 	ldr.w	sl, [r9]
 80170d0:	46c8      	mov	r8, r9
 80170d2:	1b73      	subs	r3, r6, r5
 80170d4:	250e      	movs	r5, #14
 80170d6:	435d      	muls	r5, r3
 80170d8:	eb0a 0705 	add.w	r7, sl, r5
 80170dc:	7b3b      	ldrb	r3, [r7, #12]
 80170de:	f013 0f20 	tst.w	r3, #32
 80170e2:	d0e6      	beq.n	80170b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80170e4:	4621      	mov	r1, r4
 80170e6:	4638      	mov	r0, r7
 80170e8:	f7fd fb58 	bl	801479c <_ZNK8touchgfx4Rect8includesERKS0_>
 80170ec:	2800      	cmp	r0, #0
 80170ee:	d1e1      	bne.n	80170b4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80170f0:	4639      	mov	r1, r7
 80170f2:	4620      	mov	r0, r4
 80170f4:	f7fd fb52 	bl	801479c <_ZNK8touchgfx4Rect8includesERKS0_>
 80170f8:	b108      	cbz	r0, 80170fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80170fa:	4621      	mov	r1, r4
 80170fc:	e020      	b.n	8017140 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80170fe:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017102:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8017106:	429a      	cmp	r2, r3
 8017108:	d11e      	bne.n	8017148 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801710a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801710e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017112:	429a      	cmp	r2, r3
 8017114:	d118      	bne.n	8017148 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017116:	6820      	ldr	r0, [r4, #0]
 8017118:	466b      	mov	r3, sp
 801711a:	6861      	ldr	r1, [r4, #4]
 801711c:	c303      	stmia	r3!, {r0, r1}
 801711e:	4639      	mov	r1, r7
 8017120:	4668      	mov	r0, sp
 8017122:	f7fd fb61 	bl	80147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017126:	f8d9 3000 	ldr.w	r3, [r9]
 801712a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801712e:	442b      	add	r3, r5
 8017130:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017134:	4413      	add	r3, r2
 8017136:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801713a:	4293      	cmp	r3, r2
 801713c:	dc04      	bgt.n	8017148 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801713e:	4669      	mov	r1, sp
 8017140:	4630      	mov	r0, r6
 8017142:	f7ff ff87 	bl	8017054 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8017146:	e7b5      	b.n	80170b4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017148:	f8d8 3000 	ldr.w	r3, [r8]
 801714c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017150:	442b      	add	r3, r5
 8017152:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017156:	4291      	cmp	r1, r2
 8017158:	d119      	bne.n	801718e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801715a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801715e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017162:	4291      	cmp	r1, r2
 8017164:	d113      	bne.n	801718e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017166:	6820      	ldr	r0, [r4, #0]
 8017168:	466a      	mov	r2, sp
 801716a:	6861      	ldr	r1, [r4, #4]
 801716c:	c203      	stmia	r2!, {r0, r1}
 801716e:	4619      	mov	r1, r3
 8017170:	4668      	mov	r0, sp
 8017172:	f7fd fb39 	bl	80147e8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017176:	f8d8 3000 	ldr.w	r3, [r8]
 801717a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801717e:	442b      	add	r3, r5
 8017180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017184:	4413      	add	r3, r2
 8017186:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801718a:	4293      	cmp	r3, r2
 801718c:	ddd7      	ble.n	801713e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801718e:	4620      	mov	r0, r4
 8017190:	f7fb f9d5 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017194:	b990      	cbnz	r0, 80171bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8017196:	88a7      	ldrh	r7, [r4, #4]
 8017198:	88e3      	ldrh	r3, [r4, #6]
 801719a:	fb17 f703 	smulbb	r7, r7, r3
 801719e:	f8d8 3000 	ldr.w	r3, [r8]
 80171a2:	441d      	add	r5, r3
 80171a4:	4628      	mov	r0, r5
 80171a6:	f7fb f9ca 	bl	801253e <_ZNK8touchgfx4Rect7isEmptyEv>
 80171aa:	b948      	cbnz	r0, 80171c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80171ac:	88ab      	ldrh	r3, [r5, #4]
 80171ae:	88ea      	ldrh	r2, [r5, #6]
 80171b0:	fb13 f302 	smulbb	r3, r3, r2
 80171b4:	42bb      	cmp	r3, r7
 80171b6:	f6bf af7c 	bge.w	80170b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80171ba:	e79e      	b.n	80170fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80171bc:	2700      	movs	r7, #0
 80171be:	e7ee      	b.n	801719e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80171c0:	2300      	movs	r3, #0
 80171c2:	e7f7      	b.n	80171b4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80171c4:	2401b5c8 	.word	0x2401b5c8
 80171c8:	2401b5b0 	.word	0x2401b5b0

080171cc <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80171cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ce:	4c24      	ldr	r4, [pc, #144]	@ (8017260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80171d0:	6823      	ldr	r3, [r4, #0]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d042      	beq.n	801725c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80171d6:	4a23      	ldr	r2, [pc, #140]	@ (8017264 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80171d8:	4d23      	ldr	r5, [pc, #140]	@ (8017268 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80171da:	8811      	ldrh	r1, [r2, #0]
 80171dc:	f8b5 c000 	ldrh.w	ip, [r5]
 80171e0:	4822      	ldr	r0, [pc, #136]	@ (801726c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80171e2:	4461      	add	r1, ip
 80171e4:	1c4a      	adds	r2, r1, #1
 80171e6:	008f      	lsls	r7, r1, #2
 80171e8:	f022 0201 	bic.w	r2, r2, #1
 80171ec:	19de      	adds	r6, r3, r7
 80171ee:	0412      	lsls	r2, r2, #16
 80171f0:	6006      	str	r6, [r0, #0]
 80171f2:	4e1f      	ldr	r6, [pc, #124]	@ (8017270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80171f4:	0c12      	lsrs	r2, r2, #16
 80171f6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80171fa:	19da      	adds	r2, r3, r7
 80171fc:	6032      	str	r2, [r6, #0]
 80171fe:	220e      	movs	r2, #14
 8017200:	fb02 f20c 	mul.w	r2, r2, ip
 8017204:	3203      	adds	r2, #3
 8017206:	f022 0203 	bic.w	r2, r2, #3
 801720a:	443a      	add	r2, r7
 801720c:	4f19      	ldr	r7, [pc, #100]	@ (8017274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801720e:	4413      	add	r3, r2
 8017210:	603b      	str	r3, [r7, #0]
 8017212:	2300      	movs	r3, #0
 8017214:	4f18      	ldr	r7, [pc, #96]	@ (8017278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017216:	469c      	mov	ip, r3
 8017218:	803b      	strh	r3, [r7, #0]
 801721a:	4f18      	ldr	r7, [pc, #96]	@ (801727c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801721c:	683f      	ldr	r7, [r7, #0]
 801721e:	1aba      	subs	r2, r7, r2
 8017220:	4f17      	ldr	r7, [pc, #92]	@ (8017280 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017222:	603a      	str	r2, [r7, #0]
 8017224:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017228:	4a16      	ldr	r2, [pc, #88]	@ (8017284 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801722a:	8013      	strh	r3, [r2, #0]
 801722c:	428b      	cmp	r3, r1
 801722e:	d10d      	bne.n	801724c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017230:	882d      	ldrh	r5, [r5, #0]
 8017232:	2300      	movs	r3, #0
 8017234:	6830      	ldr	r0, [r6, #0]
 8017236:	240e      	movs	r4, #14
 8017238:	429d      	cmp	r5, r3
 801723a:	d90f      	bls.n	801725c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801723c:	fb04 0203 	mla	r2, r4, r3, r0
 8017240:	3301      	adds	r3, #1
 8017242:	7b11      	ldrb	r1, [r2, #12]
 8017244:	f36f 1145 	bfc	r1, #5, #1
 8017248:	7311      	strb	r1, [r2, #12]
 801724a:	e7f5      	b.n	8017238 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801724c:	6822      	ldr	r2, [r4, #0]
 801724e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017252:	6802      	ldr	r2, [r0, #0]
 8017254:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017258:	3301      	adds	r3, #1
 801725a:	e7e7      	b.n	801722c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801725c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801725e:	bf00      	nop
 8017260:	2401b5ac 	.word	0x2401b5ac
 8017264:	2401b5c8 	.word	0x2401b5c8
 8017268:	2401b5cc 	.word	0x2401b5cc
 801726c:	2401b5c0 	.word	0x2401b5c0
 8017270:	2401b5b0 	.word	0x2401b5b0
 8017274:	2401b5b8 	.word	0x2401b5b8
 8017278:	2401b5ca 	.word	0x2401b5ca
 801727c:	2401b5b4 	.word	0x2401b5b4
 8017280:	2401b5c4 	.word	0x2401b5c4
 8017284:	2401b5bc 	.word	0x2401b5bc

08017288 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017288:	4b06      	ldr	r3, [pc, #24]	@ (80172a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	b943      	cbnz	r3, 80172a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801728e:	b139      	cbz	r1, 80172a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017290:	4b05      	ldr	r3, [pc, #20]	@ (80172a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017292:	801a      	strh	r2, [r3, #0]
 8017294:	4b05      	ldr	r3, [pc, #20]	@ (80172ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017296:	6019      	str	r1, [r3, #0]
 8017298:	4b05      	ldr	r3, [pc, #20]	@ (80172b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801729a:	6018      	str	r0, [r3, #0]
 801729c:	f7ff bf96 	b.w	80171cc <_ZN8touchgfx6Bitmap10clearCacheEv>
 80172a0:	4770      	bx	lr
 80172a2:	bf00      	nop
 80172a4:	2401b5b8 	.word	0x2401b5b8
 80172a8:	2401b5cc 	.word	0x2401b5cc
 80172ac:	2401b5b4 	.word	0x2401b5b4
 80172b0:	2401b5ac 	.word	0x2401b5ac

080172b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80172b4:	b470      	push	{r4, r5, r6}
 80172b6:	4c07      	ldr	r4, [pc, #28]	@ (80172d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80172b8:	4605      	mov	r5, r0
 80172ba:	4610      	mov	r0, r2
 80172bc:	9a03      	ldr	r2, [sp, #12]
 80172be:	6826      	ldr	r6, [r4, #0]
 80172c0:	b936      	cbnz	r6, 80172d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80172c2:	6025      	str	r5, [r4, #0]
 80172c4:	4c04      	ldr	r4, [pc, #16]	@ (80172d8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80172c6:	8021      	strh	r1, [r4, #0]
 80172c8:	4619      	mov	r1, r3
 80172ca:	bc70      	pop	{r4, r5, r6}
 80172cc:	f7ff bfdc 	b.w	8017288 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80172d0:	bc70      	pop	{r4, r5, r6}
 80172d2:	4770      	bx	lr
 80172d4:	2401b5d0 	.word	0x2401b5d0
 80172d8:	2401b5c8 	.word	0x2401b5c8

080172dc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80172dc:	4a12      	ldr	r2, [pc, #72]	@ (8017328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80172de:	8803      	ldrh	r3, [r0, #0]
 80172e0:	8812      	ldrh	r2, [r2, #0]
 80172e2:	4293      	cmp	r3, r2
 80172e4:	d207      	bcs.n	80172f6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80172e6:	4a11      	ldr	r2, [pc, #68]	@ (801732c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80172e8:	2114      	movs	r1, #20
 80172ea:	6812      	ldr	r2, [r2, #0]
 80172ec:	fb01 2303 	mla	r3, r1, r3, r2
 80172f0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80172f4:	4770      	bx	lr
 80172f6:	490e      	ldr	r1, [pc, #56]	@ (8017330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80172f8:	8809      	ldrh	r1, [r1, #0]
 80172fa:	4411      	add	r1, r2
 80172fc:	428b      	cmp	r3, r1
 80172fe:	da04      	bge.n	801730a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017300:	1a9b      	subs	r3, r3, r2
 8017302:	4a0c      	ldr	r2, [pc, #48]	@ (8017334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017304:	210e      	movs	r1, #14
 8017306:	6812      	ldr	r2, [r2, #0]
 8017308:	e7f0      	b.n	80172ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801730a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801730e:	4293      	cmp	r3, r2
 8017310:	d108      	bne.n	8017324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017312:	4b09      	ldr	r3, [pc, #36]	@ (8017338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	b91b      	cbnz	r3, 8017320 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017318:	4b08      	ldr	r3, [pc, #32]	@ (801733c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801731a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801731e:	4770      	bx	lr
 8017320:	4b07      	ldr	r3, [pc, #28]	@ (8017340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017322:	e7fa      	b.n	801731a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017324:	2000      	movs	r0, #0
 8017326:	4770      	bx	lr
 8017328:	2401b5c8 	.word	0x2401b5c8
 801732c:	2401b5d0 	.word	0x2401b5d0
 8017330:	2401b5cc 	.word	0x2401b5cc
 8017334:	2401b5b0 	.word	0x2401b5b0
 8017338:	2401b540 	.word	0x2401b540
 801733c:	2401b542 	.word	0x2401b542
 8017340:	2401b544 	.word	0x2401b544

08017344 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017344:	4a12      	ldr	r2, [pc, #72]	@ (8017390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017346:	8803      	ldrh	r3, [r0, #0]
 8017348:	8812      	ldrh	r2, [r2, #0]
 801734a:	4293      	cmp	r3, r2
 801734c:	d207      	bcs.n	801735e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801734e:	4a11      	ldr	r2, [pc, #68]	@ (8017394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017350:	2114      	movs	r1, #20
 8017352:	6812      	ldr	r2, [r2, #0]
 8017354:	fb01 2303 	mla	r3, r1, r3, r2
 8017358:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801735c:	4770      	bx	lr
 801735e:	490e      	ldr	r1, [pc, #56]	@ (8017398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017360:	8809      	ldrh	r1, [r1, #0]
 8017362:	4411      	add	r1, r2
 8017364:	428b      	cmp	r3, r1
 8017366:	da04      	bge.n	8017372 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017368:	1a9b      	subs	r3, r3, r2
 801736a:	4a0c      	ldr	r2, [pc, #48]	@ (801739c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801736c:	210e      	movs	r1, #14
 801736e:	6812      	ldr	r2, [r2, #0]
 8017370:	e7f0      	b.n	8017354 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017372:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017376:	4293      	cmp	r3, r2
 8017378:	d108      	bne.n	801738c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801737a:	4b09      	ldr	r3, [pc, #36]	@ (80173a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	b91b      	cbnz	r3, 8017388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017380:	4b08      	ldr	r3, [pc, #32]	@ (80173a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017382:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017386:	4770      	bx	lr
 8017388:	4b07      	ldr	r3, [pc, #28]	@ (80173a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801738a:	e7fa      	b.n	8017382 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801738c:	2000      	movs	r0, #0
 801738e:	4770      	bx	lr
 8017390:	2401b5c8 	.word	0x2401b5c8
 8017394:	2401b5d0 	.word	0x2401b5d0
 8017398:	2401b5cc 	.word	0x2401b5cc
 801739c:	2401b5b0 	.word	0x2401b5b0
 80173a0:	2401b540 	.word	0x2401b540
 80173a4:	2401b544 	.word	0x2401b544
 80173a8:	2401b542 	.word	0x2401b542

080173ac <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80173ac:	4a22      	ldr	r2, [pc, #136]	@ (8017438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80173ae:	b530      	push	{r4, r5, lr}
 80173b0:	880b      	ldrh	r3, [r1, #0]
 80173b2:	8812      	ldrh	r2, [r2, #0]
 80173b4:	4293      	cmp	r3, r2
 80173b6:	d213      	bcs.n	80173e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80173b8:	4a20      	ldr	r2, [pc, #128]	@ (801743c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80173ba:	2114      	movs	r1, #20
 80173bc:	6812      	ldr	r2, [r2, #0]
 80173be:	fb01 2303 	mla	r3, r1, r3, r2
 80173c2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80173c6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80173ca:	8a1a      	ldrh	r2, [r3, #16]
 80173cc:	8a5b      	ldrh	r3, [r3, #18]
 80173ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80173d2:	8004      	strh	r4, [r0, #0]
 80173d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173d8:	8041      	strh	r1, [r0, #2]
 80173da:	8082      	strh	r2, [r0, #4]
 80173dc:	80c3      	strh	r3, [r0, #6]
 80173de:	e024      	b.n	801742a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 80173e0:	4917      	ldr	r1, [pc, #92]	@ (8017440 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80173e2:	8809      	ldrh	r1, [r1, #0]
 80173e4:	4411      	add	r1, r2
 80173e6:	428b      	cmp	r3, r1
 80173e8:	da10      	bge.n	801740c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80173ea:	1a9b      	subs	r3, r3, r2
 80173ec:	220e      	movs	r2, #14
 80173ee:	4353      	muls	r3, r2
 80173f0:	4a14      	ldr	r2, [pc, #80]	@ (8017444 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80173f2:	6811      	ldr	r1, [r2, #0]
 80173f4:	18ca      	adds	r2, r1, r3
 80173f6:	5ecd      	ldrsh	r5, [r1, r3]
 80173f8:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80173fc:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017400:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017404:	8005      	strh	r5, [r0, #0]
 8017406:	8044      	strh	r4, [r0, #2]
 8017408:	8081      	strh	r1, [r0, #4]
 801740a:	e7e7      	b.n	80173dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801740c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017410:	4293      	cmp	r3, r2
 8017412:	d10b      	bne.n	801742c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017414:	4b0c      	ldr	r3, [pc, #48]	@ (8017448 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017416:	f9b3 1000 	ldrsh.w	r1, [r3]
 801741a:	4b0c      	ldr	r3, [pc, #48]	@ (801744c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801741c:	8081      	strh	r1, [r0, #4]
 801741e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017422:	2300      	movs	r3, #0
 8017424:	80c2      	strh	r2, [r0, #6]
 8017426:	8003      	strh	r3, [r0, #0]
 8017428:	8043      	strh	r3, [r0, #2]
 801742a:	bd30      	pop	{r4, r5, pc}
 801742c:	2300      	movs	r3, #0
 801742e:	8003      	strh	r3, [r0, #0]
 8017430:	8043      	strh	r3, [r0, #2]
 8017432:	8083      	strh	r3, [r0, #4]
 8017434:	e7d2      	b.n	80173dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017436:	bf00      	nop
 8017438:	2401b5c8 	.word	0x2401b5c8
 801743c:	2401b5d0 	.word	0x2401b5d0
 8017440:	2401b5cc 	.word	0x2401b5cc
 8017444:	2401b5b0 	.word	0x2401b5b0
 8017448:	2401b53c 	.word	0x2401b53c
 801744c:	2401b53e 	.word	0x2401b53e

08017450 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017450:	4a12      	ldr	r2, [pc, #72]	@ (801749c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017452:	8803      	ldrh	r3, [r0, #0]
 8017454:	8811      	ldrh	r1, [r2, #0]
 8017456:	428b      	cmp	r3, r1
 8017458:	d20b      	bcs.n	8017472 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801745a:	4a11      	ldr	r2, [pc, #68]	@ (80174a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801745c:	6812      	ldr	r2, [r2, #0]
 801745e:	b112      	cbz	r2, 8017466 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017460:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017464:	b9c0      	cbnz	r0, 8017498 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017466:	4a0f      	ldr	r2, [pc, #60]	@ (80174a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017468:	6811      	ldr	r1, [r2, #0]
 801746a:	2214      	movs	r2, #20
 801746c:	4353      	muls	r3, r2
 801746e:	58c8      	ldr	r0, [r1, r3]
 8017470:	4770      	bx	lr
 8017472:	4a0d      	ldr	r2, [pc, #52]	@ (80174a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017474:	8812      	ldrh	r2, [r2, #0]
 8017476:	440a      	add	r2, r1
 8017478:	4293      	cmp	r3, r2
 801747a:	da04      	bge.n	8017486 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801747c:	4a08      	ldr	r2, [pc, #32]	@ (80174a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801747e:	6812      	ldr	r2, [r2, #0]
 8017480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017484:	4770      	bx	lr
 8017486:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801748a:	4293      	cmp	r3, r2
 801748c:	d103      	bne.n	8017496 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801748e:	4b07      	ldr	r3, [pc, #28]	@ (80174ac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017494:	4770      	bx	lr
 8017496:	2000      	movs	r0, #0
 8017498:	4770      	bx	lr
 801749a:	bf00      	nop
 801749c:	2401b5c8 	.word	0x2401b5c8
 80174a0:	2401b5ac 	.word	0x2401b5ac
 80174a4:	2401b5d0 	.word	0x2401b5d0
 80174a8:	2401b5cc 	.word	0x2401b5cc
 80174ac:	2401b548 	.word	0x2401b548

080174b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80174b0:	4b24      	ldr	r3, [pc, #144]	@ (8017544 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80174b2:	8802      	ldrh	r2, [r0, #0]
 80174b4:	8818      	ldrh	r0, [r3, #0]
 80174b6:	4282      	cmp	r2, r0
 80174b8:	d221      	bcs.n	80174fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80174ba:	4b23      	ldr	r3, [pc, #140]	@ (8017548 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80174bc:	6819      	ldr	r1, [r3, #0]
 80174be:	2314      	movs	r3, #20
 80174c0:	fb03 1302 	mla	r3, r3, r2, r1
 80174c4:	6858      	ldr	r0, [r3, #4]
 80174c6:	2800      	cmp	r0, #0
 80174c8:	d03a      	beq.n	8017540 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80174ca:	4920      	ldr	r1, [pc, #128]	@ (801754c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80174cc:	6809      	ldr	r1, [r1, #0]
 80174ce:	2900      	cmp	r1, #0
 80174d0:	d036      	beq.n	8017540 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80174d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80174d6:	2900      	cmp	r1, #0
 80174d8:	d032      	beq.n	8017540 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80174da:	891a      	ldrh	r2, [r3, #8]
 80174dc:	8958      	ldrh	r0, [r3, #10]
 80174de:	4350      	muls	r0, r2
 80174e0:	7c5a      	ldrb	r2, [r3, #17]
 80174e2:	7cdb      	ldrb	r3, [r3, #19]
 80174e4:	0952      	lsrs	r2, r2, #5
 80174e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80174ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80174ee:	2b0b      	cmp	r3, #11
 80174f0:	bf18      	it	ne
 80174f2:	0040      	lslne	r0, r0, #1
 80174f4:	3003      	adds	r0, #3
 80174f6:	f020 0003 	bic.w	r0, r0, #3
 80174fa:	4408      	add	r0, r1
 80174fc:	4770      	bx	lr
 80174fe:	4b14      	ldr	r3, [pc, #80]	@ (8017550 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017500:	881b      	ldrh	r3, [r3, #0]
 8017502:	4403      	add	r3, r0
 8017504:	429a      	cmp	r2, r3
 8017506:	da1a      	bge.n	801753e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017508:	4b12      	ldr	r3, [pc, #72]	@ (8017554 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801750a:	1a10      	subs	r0, r2, r0
 801750c:	210e      	movs	r1, #14
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	fb01 3000 	mla	r0, r1, r0, r3
 8017514:	7b03      	ldrb	r3, [r0, #12]
 8017516:	f003 031f 	and.w	r3, r3, #31
 801751a:	2b0b      	cmp	r3, #11
 801751c:	d10b      	bne.n	8017536 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801751e:	8903      	ldrh	r3, [r0, #8]
 8017520:	8940      	ldrh	r0, [r0, #10]
 8017522:	4358      	muls	r0, r3
 8017524:	4b09      	ldr	r3, [pc, #36]	@ (801754c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017526:	3003      	adds	r0, #3
 8017528:	6819      	ldr	r1, [r3, #0]
 801752a:	f020 0303 	bic.w	r3, r0, #3
 801752e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017532:	4418      	add	r0, r3
 8017534:	4770      	bx	lr
 8017536:	2b0d      	cmp	r3, #13
 8017538:	d101      	bne.n	801753e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801753a:	300d      	adds	r0, #13
 801753c:	4770      	bx	lr
 801753e:	2000      	movs	r0, #0
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop
 8017544:	2401b5c8 	.word	0x2401b5c8
 8017548:	2401b5d0 	.word	0x2401b5d0
 801754c:	2401b5ac 	.word	0x2401b5ac
 8017550:	2401b5cc 	.word	0x2401b5cc
 8017554:	2401b5b0 	.word	0x2401b5b0

08017558 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017558:	4a17      	ldr	r2, [pc, #92]	@ (80175b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801755a:	b510      	push	{r4, lr}
 801755c:	8803      	ldrh	r3, [r0, #0]
 801755e:	8812      	ldrh	r2, [r2, #0]
 8017560:	4293      	cmp	r3, r2
 8017562:	d20c      	bcs.n	801757e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017564:	4a15      	ldr	r2, [pc, #84]	@ (80175bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8017566:	2114      	movs	r1, #20
 8017568:	6812      	ldr	r2, [r2, #0]
 801756a:	fb01 2303 	mla	r3, r1, r3, r2
 801756e:	7c58      	ldrb	r0, [r3, #17]
 8017570:	0942      	lsrs	r2, r0, #5
 8017572:	7cd8      	ldrb	r0, [r3, #19]
 8017574:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017578:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801757c:	bd10      	pop	{r4, pc}
 801757e:	4910      	ldr	r1, [pc, #64]	@ (80175c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017580:	8809      	ldrh	r1, [r1, #0]
 8017582:	4411      	add	r1, r2
 8017584:	428b      	cmp	r3, r1
 8017586:	da09      	bge.n	801759c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017588:	1a9b      	subs	r3, r3, r2
 801758a:	4a0e      	ldr	r2, [pc, #56]	@ (80175c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801758c:	210e      	movs	r1, #14
 801758e:	6812      	ldr	r2, [r2, #0]
 8017590:	fb01 2303 	mla	r3, r1, r3, r2
 8017594:	7b18      	ldrb	r0, [r3, #12]
 8017596:	f000 001f 	and.w	r0, r0, #31
 801759a:	e7ef      	b.n	801757c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801759c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d106      	bne.n	80175b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80175a4:	f7f6 fdae 	bl	800e104 <_ZN8touchgfx3HAL3lcdEv>
 80175a8:	6803      	ldr	r3, [r0, #0]
 80175aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175b0:	4718      	bx	r3
 80175b2:	2000      	movs	r0, #0
 80175b4:	e7e2      	b.n	801757c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80175b6:	bf00      	nop
 80175b8:	2401b5c8 	.word	0x2401b5c8
 80175bc:	2401b5d0 	.word	0x2401b5d0
 80175c0:	2401b5cc 	.word	0x2401b5cc
 80175c4:	2401b5b0 	.word	0x2401b5b0

080175c8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80175c8:	2018      	movs	r0, #24
 80175ca:	4770      	bx	lr

080175cc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80175cc:	2001      	movs	r0, #1
 80175ce:	4770      	bx	lr

080175d0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80175d0:	4b02      	ldr	r3, [pc, #8]	@ (80175dc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80175d2:	8818      	ldrh	r0, [r3, #0]
 80175d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80175d8:	b280      	uxth	r0, r0
 80175da:	4770      	bx	lr
 80175dc:	2401b542 	.word	0x2401b542

080175e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80175e0:	2bff      	cmp	r3, #255	@ 0xff
 80175e2:	d040      	beq.n	8017666 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80175e4:	2a2c      	cmp	r2, #44	@ 0x2c
 80175e6:	d02a      	beq.n	801763e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80175e8:	d80f      	bhi.n	801760a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80175ea:	2a08      	cmp	r2, #8
 80175ec:	d037      	beq.n	801765e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80175ee:	d805      	bhi.n	80175fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80175f0:	2a04      	cmp	r2, #4
 80175f2:	d032      	beq.n	801765a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80175f4:	2a05      	cmp	r2, #5
 80175f6:	d02e      	beq.n	8017656 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80175f8:	2000      	movs	r0, #0
 80175fa:	4770      	bx	lr
 80175fc:	2a0a      	cmp	r2, #10
 80175fe:	d02e      	beq.n	801765e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017600:	d301      	bcc.n	8017606 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8017602:	2a0b      	cmp	r2, #11
 8017604:	d1f8      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017606:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8017608:	4770      	bx	lr
 801760a:	2a30      	cmp	r2, #48	@ 0x30
 801760c:	d029      	beq.n	8017662 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801760e:	d808      	bhi.n	8017622 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8017610:	2a2e      	cmp	r2, #46	@ 0x2e
 8017612:	684b      	ldr	r3, [r1, #4]
 8017614:	d01a      	beq.n	801764c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8017616:	d90b      	bls.n	8017630 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8017618:	781b      	ldrb	r3, [r3, #0]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1ec      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801761e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017620:	4770      	bx	lr
 8017622:	2a32      	cmp	r2, #50	@ 0x32
 8017624:	d01d      	beq.n	8017662 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017626:	d301      	bcc.n	801762c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8017628:	2a33      	cmp	r2, #51	@ 0x33
 801762a:	d1e5      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801762c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801762e:	4770      	bx	lr
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d0f3      	beq.n	801761e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8017636:	2b01      	cmp	r3, #1
 8017638:	d1de      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801763a:	6940      	ldr	r0, [r0, #20]
 801763c:	4770      	bx	lr
 801763e:	684b      	ldr	r3, [r1, #4]
 8017640:	781b      	ldrb	r3, [r3, #0]
 8017642:	b133      	cbz	r3, 8017652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017644:	2b01      	cmp	r3, #1
 8017646:	d1d7      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017648:	68c0      	ldr	r0, [r0, #12]
 801764a:	4770      	bx	lr
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1d2      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017652:	69c0      	ldr	r0, [r0, #28]
 8017654:	4770      	bx	lr
 8017656:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017658:	4770      	bx	lr
 801765a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801765c:	4770      	bx	lr
 801765e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8017660:	4770      	bx	lr
 8017662:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8017664:	4770      	bx	lr
 8017666:	2a2c      	cmp	r2, #44	@ 0x2c
 8017668:	d02a      	beq.n	80176c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801766a:	d80f      	bhi.n	801768c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801766c:	2a08      	cmp	r2, #8
 801766e:	d035      	beq.n	80176dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8017670:	d805      	bhi.n	801767e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017672:	2a04      	cmp	r2, #4
 8017674:	d030      	beq.n	80176d8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8017676:	2a05      	cmp	r2, #5
 8017678:	d1be      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801767a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801767c:	4770      	bx	lr
 801767e:	2a0a      	cmp	r2, #10
 8017680:	d02c      	beq.n	80176dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8017682:	d301      	bcc.n	8017688 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8017684:	2a0b      	cmp	r2, #11
 8017686:	d1b7      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017688:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801768a:	4770      	bx	lr
 801768c:	2a30      	cmp	r2, #48	@ 0x30
 801768e:	d027      	beq.n	80176e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8017690:	d808      	bhi.n	80176a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8017692:	2a2e      	cmp	r2, #46	@ 0x2e
 8017694:	684b      	ldr	r3, [r1, #4]
 8017696:	d01a      	beq.n	80176ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8017698:	d90b      	bls.n	80176b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d1ab      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80176a0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80176a2:	4770      	bx	lr
 80176a4:	2a32      	cmp	r2, #50	@ 0x32
 80176a6:	d01b      	beq.n	80176e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80176a8:	d301      	bcc.n	80176ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80176aa:	2a33      	cmp	r2, #51	@ 0x33
 80176ac:	d1a4      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80176ae:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80176b0:	4770      	bx	lr
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d0f3      	beq.n	80176a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80176b8:	2b01      	cmp	r3, #1
 80176ba:	d19d      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80176bc:	6980      	ldr	r0, [r0, #24]
 80176be:	4770      	bx	lr
 80176c0:	684b      	ldr	r3, [r1, #4]
 80176c2:	781b      	ldrb	r3, [r3, #0]
 80176c4:	b133      	cbz	r3, 80176d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80176c6:	2b01      	cmp	r3, #1
 80176c8:	d196      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80176ca:	6900      	ldr	r0, [r0, #16]
 80176cc:	4770      	bx	lr
 80176ce:	781b      	ldrb	r3, [r3, #0]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d191      	bne.n	80175f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80176d4:	6a00      	ldr	r0, [r0, #32]
 80176d6:	4770      	bx	lr
 80176d8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80176da:	4770      	bx	lr
 80176dc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80176de:	4770      	bx	lr
 80176e0:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80176e2:	4770      	bx	lr

080176e4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80176e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e8:	b085      	sub	sp, #20
 80176ea:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80176ec:	9203      	str	r2, [sp, #12]
 80176ee:	6870      	ldr	r0, [r6, #4]
 80176f0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80176f4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80176f8:	9101      	str	r1, [sp, #4]
 80176fa:	fa1f f885 	uxth.w	r8, r5
 80176fe:	43ed      	mvns	r5, r5
 8017700:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017704:	b2ed      	uxtb	r5, r5
 8017706:	fb00 2404 	mla	r4, r0, r4, r2
 801770a:	6832      	ldr	r2, [r6, #0]
 801770c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017710:	4414      	add	r4, r2
 8017712:	f8dc 2000 	ldr.w	r2, [ip]
 8017716:	9202      	str	r2, [sp, #8]
 8017718:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801771c:	f102 0e04 	add.w	lr, r2, #4
 8017720:	9a01      	ldr	r2, [sp, #4]
 8017722:	2a00      	cmp	r2, #0
 8017724:	dc03      	bgt.n	801772e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8017726:	9a03      	ldr	r2, [sp, #12]
 8017728:	2a00      	cmp	r2, #0
 801772a:	f340 8116 	ble.w	801795a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801772e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017730:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8017734:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017738:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801773a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801773e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017742:	2b00      	cmp	r3, #0
 8017744:	dd0e      	ble.n	8017764 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017746:	1406      	asrs	r6, r0, #16
 8017748:	d405      	bmi.n	8017756 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801774a:	4556      	cmp	r6, sl
 801774c:	da03      	bge.n	8017756 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801774e:	1416      	asrs	r6, r2, #16
 8017750:	d401      	bmi.n	8017756 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017752:	454e      	cmp	r6, r9
 8017754:	db07      	blt.n	8017766 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8017756:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8017758:	3b01      	subs	r3, #1
 801775a:	3403      	adds	r4, #3
 801775c:	4430      	add	r0, r6
 801775e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017760:	4432      	add	r2, r6
 8017762:	e7ee      	b.n	8017742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8017764:	d063      	beq.n	801782e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017766:	1e5e      	subs	r6, r3, #1
 8017768:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801776a:	fb07 0706 	mla	r7, r7, r6, r0
 801776e:	143f      	asrs	r7, r7, #16
 8017770:	d454      	bmi.n	801781c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017772:	4557      	cmp	r7, sl
 8017774:	da52      	bge.n	801781c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017776:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017778:	fb07 2606 	mla	r6, r7, r6, r2
 801777c:	1436      	asrs	r6, r6, #16
 801777e:	d44d      	bmi.n	801781c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017780:	454e      	cmp	r6, r9
 8017782:	da4b      	bge.n	801781c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8017784:	1ce6      	adds	r6, r4, #3
 8017786:	4699      	mov	r9, r3
 8017788:	f1b9 0f00 	cmp.w	r9, #0
 801778c:	f106 0603 	add.w	r6, r6, #3
 8017790:	dd48      	ble.n	8017824 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8017792:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017796:	1417      	asrs	r7, r2, #16
 8017798:	9902      	ldr	r1, [sp, #8]
 801779a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801779e:	f109 39ff 	add.w	r9, r9, #4294967295
 80177a2:	fb0b 1707 	mla	r7, fp, r7, r1
 80177a6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80177aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80177ac:	f817 700a 	ldrb.w	r7, [r7, sl]
 80177b0:	fb1b fb05 	smulbb	fp, fp, r5
 80177b4:	4408      	add	r0, r1
 80177b6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80177b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80177bc:	440a      	add	r2, r1
 80177be:	eb0e 0a07 	add.w	sl, lr, r7
 80177c2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80177c6:	fb07 b708 	mla	r7, r7, r8, fp
 80177ca:	b2bf      	uxth	r7, r7
 80177cc:	f107 0b01 	add.w	fp, r7, #1
 80177d0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80177d4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80177d8:	fb1b fb05 	smulbb	fp, fp, r5
 80177dc:	123f      	asrs	r7, r7, #8
 80177de:	f806 7c06 	strb.w	r7, [r6, #-6]
 80177e2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80177e6:	fb07 b708 	mla	r7, r7, r8, fp
 80177ea:	b2bf      	uxth	r7, r7
 80177ec:	f107 0b01 	add.w	fp, r7, #1
 80177f0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80177f4:	123f      	asrs	r7, r7, #8
 80177f6:	f806 7c05 	strb.w	r7, [r6, #-5]
 80177fa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80177fe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8017802:	fb1a fa05 	smulbb	sl, sl, r5
 8017806:	fb07 a708 	mla	r7, r7, r8, sl
 801780a:	b2bf      	uxth	r7, r7
 801780c:	f107 0a01 	add.w	sl, r7, #1
 8017810:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017814:	123f      	asrs	r7, r7, #8
 8017816:	f806 7c04 	strb.w	r7, [r6, #-4]
 801781a:	e7b5      	b.n	8017788 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801781c:	2700      	movs	r7, #0
 801781e:	1bde      	subs	r6, r3, r7
 8017820:	2e00      	cmp	r6, #0
 8017822:	dc42      	bgt.n	80178aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8017824:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801782c:	441c      	add	r4, r3
 801782e:	9b01      	ldr	r3, [sp, #4]
 8017830:	2b00      	cmp	r3, #0
 8017832:	f340 8092 	ble.w	801795a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8017836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801783c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017840:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017844:	eef0 6a62 	vmov.f32	s13, s5
 8017848:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801784c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017850:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017854:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8017858:	eef0 6a43 	vmov.f32	s13, s6
 801785c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017860:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8017864:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017868:	ee61 7a27 	vmul.f32	s15, s2, s15
 801786c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017870:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017874:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017878:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801787c:	ee12 2a90 	vmov	r2, s5
 8017880:	eef0 2a47 	vmov.f32	s5, s14
 8017884:	fb92 f3f3 	sdiv	r3, r2, r3
 8017888:	ee13 2a10 	vmov	r2, s6
 801788c:	9311      	str	r3, [sp, #68]	@ 0x44
 801788e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017890:	eeb0 3a67 	vmov.f32	s6, s15
 8017894:	fb92 f3f3 	sdiv	r3, r2, r3
 8017898:	9312      	str	r3, [sp, #72]	@ 0x48
 801789a:	9b01      	ldr	r3, [sp, #4]
 801789c:	9a03      	ldr	r2, [sp, #12]
 801789e:	3b01      	subs	r3, #1
 80178a0:	9301      	str	r3, [sp, #4]
 80178a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178a4:	bf08      	it	eq
 80178a6:	4613      	moveq	r3, r2
 80178a8:	e73a      	b.n	8017720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80178aa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80178ae:	d44e      	bmi.n	801794e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80178b0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80178b4:	4556      	cmp	r6, sl
 80178b6:	dd4a      	ble.n	801794e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80178b8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80178bc:	d447      	bmi.n	801794e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80178be:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80178c2:	4559      	cmp	r1, fp
 80178c4:	dd43      	ble.n	801794e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80178c6:	fa0f f986 	sxth.w	r9, r6
 80178ca:	9902      	ldr	r1, [sp, #8]
 80178cc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80178d0:	fb0b 1909 	mla	r9, fp, r9, r1
 80178d4:	f814 b006 	ldrb.w	fp, [r4, r6]
 80178d8:	f819 900a 	ldrb.w	r9, [r9, sl]
 80178dc:	fb1b fb05 	smulbb	fp, fp, r5
 80178e0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80178e4:	eb0e 0a09 	add.w	sl, lr, r9
 80178e8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80178ec:	fb09 b908 	mla	r9, r9, r8, fp
 80178f0:	fa1f f989 	uxth.w	r9, r9
 80178f4:	f109 0b01 	add.w	fp, r9, #1
 80178f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80178fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017900:	f804 9006 	strb.w	r9, [r4, r6]
 8017904:	4426      	add	r6, r4
 8017906:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801790a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801790e:	fb1b fb05 	smulbb	fp, fp, r5
 8017912:	fb09 b908 	mla	r9, r9, r8, fp
 8017916:	fa1f f989 	uxth.w	r9, r9
 801791a:	f109 0b01 	add.w	fp, r9, #1
 801791e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017922:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017926:	f886 9001 	strb.w	r9, [r6, #1]
 801792a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801792e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8017932:	fb1a fa05 	smulbb	sl, sl, r5
 8017936:	fb09 a908 	mla	r9, r9, r8, sl
 801793a:	fa1f f989 	uxth.w	r9, r9
 801793e:	f109 0a01 	add.w	sl, r9, #1
 8017942:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8017946:	ea4f 2929 	mov.w	r9, r9, asr #8
 801794a:	f886 9002 	strb.w	r9, [r6, #2]
 801794e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017950:	3701      	adds	r7, #1
 8017952:	4408      	add	r0, r1
 8017954:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017956:	440a      	add	r2, r1
 8017958:	e761      	b.n	801781e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801795a:	b005      	add	sp, #20
 801795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017960 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017964:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8017966:	4693      	mov	fp, r2
 8017968:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801796a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801796e:	6868      	ldr	r0, [r5, #4]
 8017970:	6877      	ldr	r7, [r6, #4]
 8017972:	9100      	str	r1, [sp, #0]
 8017974:	3704      	adds	r7, #4
 8017976:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801797a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801797e:	fb00 2404 	mla	r4, r0, r4, r2
 8017982:	682a      	ldr	r2, [r5, #0]
 8017984:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017988:	4414      	add	r4, r2
 801798a:	6832      	ldr	r2, [r6, #0]
 801798c:	9201      	str	r2, [sp, #4]
 801798e:	9a00      	ldr	r2, [sp, #0]
 8017990:	2a00      	cmp	r2, #0
 8017992:	dc03      	bgt.n	801799c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017994:	f1bb 0f00 	cmp.w	fp, #0
 8017998:	f340 80bc 	ble.w	8017b14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801799c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801799e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80179a2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80179a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80179a8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80179ac:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	dd0c      	ble.n	80179ce <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80179b4:	1405      	asrs	r5, r0, #16
 80179b6:	d405      	bmi.n	80179c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80179b8:	4555      	cmp	r5, sl
 80179ba:	da03      	bge.n	80179c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80179bc:	1415      	asrs	r5, r2, #16
 80179be:	d401      	bmi.n	80179c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80179c0:	454d      	cmp	r5, r9
 80179c2:	db05      	blt.n	80179d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80179c4:	4440      	add	r0, r8
 80179c6:	4472      	add	r2, lr
 80179c8:	3b01      	subs	r3, #1
 80179ca:	3403      	adds	r4, #3
 80179cc:	e7f0      	b.n	80179b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80179ce:	d03f      	beq.n	8017a50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80179d0:	1e5d      	subs	r5, r3, #1
 80179d2:	fb08 0c05 	mla	ip, r8, r5, r0
 80179d6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80179da:	d42e      	bmi.n	8017a3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80179dc:	45d4      	cmp	ip, sl
 80179de:	da2c      	bge.n	8017a3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80179e0:	fb0e 2505 	mla	r5, lr, r5, r2
 80179e4:	142d      	asrs	r5, r5, #16
 80179e6:	d428      	bmi.n	8017a3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80179e8:	454d      	cmp	r5, r9
 80179ea:	da26      	bge.n	8017a3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80179ec:	1ce5      	adds	r5, r4, #3
 80179ee:	469c      	mov	ip, r3
 80179f0:	f1bc 0f00 	cmp.w	ip, #0
 80179f4:	f105 0503 	add.w	r5, r5, #3
 80179f8:	dd25      	ble.n	8017a46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80179fa:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80179fe:	ea4f 4922 	mov.w	r9, r2, asr #16
 8017a02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017a06:	4472      	add	r2, lr
 8017a08:	468a      	mov	sl, r1
 8017a0a:	9901      	ldr	r1, [sp, #4]
 8017a0c:	fb0a 1909 	mla	r9, sl, r9, r1
 8017a10:	1401      	asrs	r1, r0, #16
 8017a12:	4440      	add	r0, r8
 8017a14:	f819 9001 	ldrb.w	r9, [r9, r1]
 8017a18:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8017a1c:	eb07 0a09 	add.w	sl, r7, r9
 8017a20:	f817 9009 	ldrb.w	r9, [r7, r9]
 8017a24:	f805 9c06 	strb.w	r9, [r5, #-6]
 8017a28:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8017a2c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8017a30:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8017a34:	f805 9c04 	strb.w	r9, [r5, #-4]
 8017a38:	e7da      	b.n	80179f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017a3a:	2500      	movs	r5, #0
 8017a3c:	eba3 0c05 	sub.w	ip, r3, r5
 8017a40:	f1bc 0f00 	cmp.w	ip, #0
 8017a44:	dc3b      	bgt.n	8017abe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8017a46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a4e:	441c      	add	r4, r3
 8017a50:	9b00      	ldr	r3, [sp, #0]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	dd5e      	ble.n	8017b14 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8017a56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017a60:	eeb0 6a62 	vmov.f32	s12, s5
 8017a64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017a68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017a6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a70:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8017a74:	eeb0 6a43 	vmov.f32	s12, s6
 8017a78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a7c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8017a80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017a84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017a88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017a8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017a90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017a94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017a98:	ee12 2a90 	vmov	r2, s5
 8017a9c:	eef0 2a47 	vmov.f32	s5, s14
 8017aa0:	fb92 f8f3 	sdiv	r8, r2, r3
 8017aa4:	ee13 2a10 	vmov	r2, s6
 8017aa8:	eeb0 3a67 	vmov.f32	s6, s15
 8017aac:	fb92 fef3 	sdiv	lr, r2, r3
 8017ab0:	9b00      	ldr	r3, [sp, #0]
 8017ab2:	3b01      	subs	r3, #1
 8017ab4:	9300      	str	r3, [sp, #0]
 8017ab6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ab8:	bf08      	it	eq
 8017aba:	465b      	moveq	r3, fp
 8017abc:	e767      	b.n	801798e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017abe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017ac2:	d423      	bmi.n	8017b0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8017ac4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8017ac8:	45cc      	cmp	ip, r9
 8017aca:	dd1f      	ble.n	8017b0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8017acc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017ad0:	d41c      	bmi.n	8017b0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8017ad2:	68f1      	ldr	r1, [r6, #12]
 8017ad4:	4551      	cmp	r1, sl
 8017ad6:	dd19      	ble.n	8017b0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8017ad8:	fa0f fc8c 	sxth.w	ip, ip
 8017adc:	9901      	ldr	r1, [sp, #4]
 8017ade:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8017ae2:	f81c c009 	ldrb.w	ip, [ip, r9]
 8017ae6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017aea:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8017aee:	eb07 090c 	add.w	r9, r7, ip
 8017af2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8017af6:	f804 a00c 	strb.w	sl, [r4, ip]
 8017afa:	44a4      	add	ip, r4
 8017afc:	f899 a001 	ldrb.w	sl, [r9, #1]
 8017b00:	f88c a001 	strb.w	sl, [ip, #1]
 8017b04:	f899 9002 	ldrb.w	r9, [r9, #2]
 8017b08:	f88c 9002 	strb.w	r9, [ip, #2]
 8017b0c:	4440      	add	r0, r8
 8017b0e:	4472      	add	r2, lr
 8017b10:	3501      	adds	r5, #1
 8017b12:	e793      	b.n	8017a3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8017b14:	b003      	add	sp, #12
 8017b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b1a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017b1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b1e:	b085      	sub	sp, #20
 8017b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017b26:	9202      	str	r2, [sp, #8]
 8017b28:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8017b2c:	6860      	ldr	r0, [r4, #4]
 8017b2e:	9203      	str	r2, [sp, #12]
 8017b30:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017b34:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017b38:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8017b3c:	fb00 2505 	mla	r5, r0, r5, r2
 8017b40:	6822      	ldr	r2, [r4, #0]
 8017b42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b46:	4415      	add	r5, r2
 8017b48:	f8dc 2000 	ldr.w	r2, [ip]
 8017b4c:	9200      	str	r2, [sp, #0]
 8017b4e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017b52:	3204      	adds	r2, #4
 8017b54:	9201      	str	r2, [sp, #4]
 8017b56:	2900      	cmp	r1, #0
 8017b58:	dc03      	bgt.n	8017b62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017b5a:	9a02      	ldr	r2, [sp, #8]
 8017b5c:	2a00      	cmp	r2, #0
 8017b5e:	f340 8127 	ble.w	8017db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017b62:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017b64:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017b68:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017b6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017b6e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017b72:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	dd0d      	ble.n	8017b96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017b7a:	1422      	asrs	r2, r4, #16
 8017b7c:	d405      	bmi.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017b7e:	4542      	cmp	r2, r8
 8017b80:	da03      	bge.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017b82:	1402      	asrs	r2, r0, #16
 8017b84:	d401      	bmi.n	8017b8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017b86:	42ba      	cmp	r2, r7
 8017b88:	db06      	blt.n	8017b98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017b8c:	4474      	add	r4, lr
 8017b8e:	3b01      	subs	r3, #1
 8017b90:	3503      	adds	r5, #3
 8017b92:	4410      	add	r0, r2
 8017b94:	e7ef      	b.n	8017b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017b96:	d075      	beq.n	8017c84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8017b98:	1e5a      	subs	r2, r3, #1
 8017b9a:	fb0e 4602 	mla	r6, lr, r2, r4
 8017b9e:	1436      	asrs	r6, r6, #16
 8017ba0:	d465      	bmi.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017ba2:	4546      	cmp	r6, r8
 8017ba4:	da63      	bge.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017ba6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017ba8:	fb06 0202 	mla	r2, r6, r2, r0
 8017bac:	1412      	asrs	r2, r2, #16
 8017bae:	d45e      	bmi.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017bb0:	42ba      	cmp	r2, r7
 8017bb2:	da5c      	bge.n	8017c6e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017bb4:	1cef      	adds	r7, r5, #3
 8017bb6:	4699      	mov	r9, r3
 8017bb8:	f1b9 0f00 	cmp.w	r9, #0
 8017bbc:	dd5d      	ble.n	8017c7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8017bbe:	1402      	asrs	r2, r0, #16
 8017bc0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017bc4:	1426      	asrs	r6, r4, #16
 8017bc6:	4692      	mov	sl, r2
 8017bc8:	9a00      	ldr	r2, [sp, #0]
 8017bca:	fb08 220a 	mla	r2, r8, sl, r2
 8017bce:	5d92      	ldrb	r2, [r2, r6]
 8017bd0:	9e01      	ldr	r6, [sp, #4]
 8017bd2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8017bd6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8017bda:	d041      	beq.n	8017c60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017bdc:	9a03      	ldr	r2, [sp, #12]
 8017bde:	fa5f fb86 	uxtb.w	fp, r6
 8017be2:	fb02 f808 	mul.w	r8, r2, r8
 8017be6:	f108 0201 	add.w	r2, r8, #1
 8017bea:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8017bee:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8017bf2:	1212      	asrs	r2, r2, #8
 8017bf4:	fa1f fa82 	uxth.w	sl, r2
 8017bf8:	43d2      	mvns	r2, r2
 8017bfa:	fb1b fb0a 	smulbb	fp, fp, sl
 8017bfe:	b2d2      	uxtb	r2, r2
 8017c00:	fb08 b802 	mla	r8, r8, r2, fp
 8017c04:	fa1f f888 	uxth.w	r8, r8
 8017c08:	f108 0b01 	add.w	fp, r8, #1
 8017c0c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017c10:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8017c14:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017c18:	fb1b fb0a 	smulbb	fp, fp, sl
 8017c1c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017c20:	fb16 fa0a 	smulbb	sl, r6, sl
 8017c24:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017c28:	f807 8c03 	strb.w	r8, [r7, #-3]
 8017c2c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017c30:	fb06 aa02 	mla	sl, r6, r2, sl
 8017c34:	fb08 b802 	mla	r8, r8, r2, fp
 8017c38:	fa1f fa8a 	uxth.w	sl, sl
 8017c3c:	fa1f f888 	uxth.w	r8, r8
 8017c40:	f10a 0601 	add.w	r6, sl, #1
 8017c44:	f108 0b01 	add.w	fp, r8, #1
 8017c48:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8017c4c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017c50:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017c54:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017c58:	f807 ac01 	strb.w	sl, [r7, #-1]
 8017c5c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8017c60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017c62:	4474      	add	r4, lr
 8017c64:	3703      	adds	r7, #3
 8017c66:	f109 39ff 	add.w	r9, r9, #4294967295
 8017c6a:	4410      	add	r0, r2
 8017c6c:	e7a4      	b.n	8017bb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017c6e:	f04f 0800 	mov.w	r8, #0
 8017c72:	eba3 0208 	sub.w	r2, r3, r8
 8017c76:	2a00      	cmp	r2, #0
 8017c78:	dc3b      	bgt.n	8017cf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8017c7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c82:	441d      	add	r5, r3
 8017c84:	2900      	cmp	r1, #0
 8017c86:	f340 8093 	ble.w	8017db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8017c8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017c8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017c90:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017c94:	3901      	subs	r1, #1
 8017c96:	eeb0 6a62 	vmov.f32	s12, s5
 8017c9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017c9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017ca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017ca6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017caa:	eeb0 6a43 	vmov.f32	s12, s6
 8017cae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cb2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017cb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017cba:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017cbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017cc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017cc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017cca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017cce:	ee12 2a90 	vmov	r2, s5
 8017cd2:	eef0 2a47 	vmov.f32	s5, s14
 8017cd6:	fb92 fef3 	sdiv	lr, r2, r3
 8017cda:	ee13 2a10 	vmov	r2, s6
 8017cde:	eeb0 3a67 	vmov.f32	s6, s15
 8017ce2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ce6:	9a02      	ldr	r2, [sp, #8]
 8017ce8:	9312      	str	r3, [sp, #72]	@ 0x48
 8017cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017cec:	bf08      	it	eq
 8017cee:	4613      	moveq	r3, r2
 8017cf0:	e731      	b.n	8017b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8017cf2:	1427      	asrs	r7, r4, #16
 8017cf4:	d456      	bmi.n	8017da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017cf6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017cfa:	42be      	cmp	r6, r7
 8017cfc:	dd52      	ble.n	8017da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017cfe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017d02:	d44f      	bmi.n	8017da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017d04:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017d08:	454a      	cmp	r2, r9
 8017d0a:	dd4b      	ble.n	8017da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017d0c:	9a00      	ldr	r2, [sp, #0]
 8017d0e:	b236      	sxth	r6, r6
 8017d10:	fb09 2606 	mla	r6, r9, r6, r2
 8017d14:	5df2      	ldrb	r2, [r6, r7]
 8017d16:	9e01      	ldr	r6, [sp, #4]
 8017d18:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8017d1c:	0e3a      	lsrs	r2, r7, #24
 8017d1e:	d041      	beq.n	8017da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017d20:	9e03      	ldr	r6, [sp, #12]
 8017d22:	fa5f fb87 	uxtb.w	fp, r7
 8017d26:	4372      	muls	r2, r6
 8017d28:	1c56      	adds	r6, r2, #1
 8017d2a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017d2e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8017d32:	1212      	asrs	r2, r2, #8
 8017d34:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017d38:	fa1f fa82 	uxth.w	sl, r2
 8017d3c:	43d2      	mvns	r2, r2
 8017d3e:	fb1b fb0a 	smulbb	fp, fp, sl
 8017d42:	b2d2      	uxtb	r2, r2
 8017d44:	fb09 b902 	mla	r9, r9, r2, fp
 8017d48:	fa1f f989 	uxth.w	r9, r9
 8017d4c:	f109 0b01 	add.w	fp, r9, #1
 8017d50:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017d54:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017d58:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017d5c:	fb1b fb0a 	smulbb	fp, fp, sl
 8017d60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017d64:	fb17 fa0a 	smulbb	sl, r7, sl
 8017d68:	f805 9006 	strb.w	r9, [r5, r6]
 8017d6c:	442e      	add	r6, r5
 8017d6e:	78b7      	ldrb	r7, [r6, #2]
 8017d70:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017d74:	fb07 aa02 	mla	sl, r7, r2, sl
 8017d78:	fb09 b902 	mla	r9, r9, r2, fp
 8017d7c:	fa1f fa8a 	uxth.w	sl, sl
 8017d80:	fa1f f989 	uxth.w	r9, r9
 8017d84:	f10a 0701 	add.w	r7, sl, #1
 8017d88:	f109 0b01 	add.w	fp, r9, #1
 8017d8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017d90:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017d94:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017d98:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017d9c:	f886 a002 	strb.w	sl, [r6, #2]
 8017da0:	f886 9001 	strb.w	r9, [r6, #1]
 8017da4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017da6:	4474      	add	r4, lr
 8017da8:	f108 0801 	add.w	r8, r8, #1
 8017dac:	4410      	add	r0, r2
 8017dae:	e760      	b.n	8017c72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8017db0:	b005      	add	sp, #20
 8017db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017db6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dba:	b085      	sub	sp, #20
 8017dbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017dc0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8017dc2:	9203      	str	r2, [sp, #12]
 8017dc4:	6868      	ldr	r0, [r5, #4]
 8017dc6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017dca:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017dce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8017dd2:	fb00 2404 	mla	r4, r0, r4, r2
 8017dd6:	682a      	ldr	r2, [r5, #0]
 8017dd8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ddc:	4414      	add	r4, r2
 8017dde:	f8dc 2000 	ldr.w	r2, [ip]
 8017de2:	9201      	str	r2, [sp, #4]
 8017de4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017de8:	3204      	adds	r2, #4
 8017dea:	9202      	str	r2, [sp, #8]
 8017dec:	2900      	cmp	r1, #0
 8017dee:	dc03      	bgt.n	8017df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017df0:	9a03      	ldr	r2, [sp, #12]
 8017df2:	2a00      	cmp	r2, #0
 8017df4:	f340 8137 	ble.w	8018066 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017df8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017dfa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017dfe:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017e02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017e04:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017e08:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	dd0d      	ble.n	8017e2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017e10:	1405      	asrs	r5, r0, #16
 8017e12:	d405      	bmi.n	8017e20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017e14:	4545      	cmp	r5, r8
 8017e16:	da03      	bge.n	8017e20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017e18:	1415      	asrs	r5, r2, #16
 8017e1a:	d401      	bmi.n	8017e20 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017e1c:	42bd      	cmp	r5, r7
 8017e1e:	db06      	blt.n	8017e2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017e20:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017e22:	4470      	add	r0, lr
 8017e24:	3b01      	subs	r3, #1
 8017e26:	3403      	adds	r4, #3
 8017e28:	442a      	add	r2, r5
 8017e2a:	e7ef      	b.n	8017e0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8017e2c:	d070      	beq.n	8017f10 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017e2e:	1e5d      	subs	r5, r3, #1
 8017e30:	fb0e 0605 	mla	r6, lr, r5, r0
 8017e34:	1436      	asrs	r6, r6, #16
 8017e36:	d462      	bmi.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017e38:	4546      	cmp	r6, r8
 8017e3a:	da60      	bge.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017e3c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017e3e:	fb06 2505 	mla	r5, r6, r5, r2
 8017e42:	142d      	asrs	r5, r5, #16
 8017e44:	d45b      	bmi.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017e46:	42bd      	cmp	r5, r7
 8017e48:	da59      	bge.n	8017efe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017e4a:	1ce5      	adds	r5, r4, #3
 8017e4c:	469a      	mov	sl, r3
 8017e4e:	f1ba 0f00 	cmp.w	sl, #0
 8017e52:	dd58      	ble.n	8017f06 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8017e54:	1416      	asrs	r6, r2, #16
 8017e56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017e5a:	1407      	asrs	r7, r0, #16
 8017e5c:	46b1      	mov	r9, r6
 8017e5e:	9e01      	ldr	r6, [sp, #4]
 8017e60:	fb08 6609 	mla	r6, r8, r9, r6
 8017e64:	5df6      	ldrb	r6, [r6, r7]
 8017e66:	9f02      	ldr	r7, [sp, #8]
 8017e68:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8017e6c:	0e37      	lsrs	r7, r6, #24
 8017e6e:	2fff      	cmp	r7, #255	@ 0xff
 8017e70:	f000 80f0 	beq.w	8018054 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8017e74:	fa5f f887 	uxtb.w	r8, r7
 8017e78:	b3d7      	cbz	r7, 8017ef0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017e7a:	fa1f f788 	uxth.w	r7, r8
 8017e7e:	ea6f 0808 	mvn.w	r8, r8
 8017e82:	fa5f fb86 	uxtb.w	fp, r6
 8017e86:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8017e8a:	fa5f f888 	uxtb.w	r8, r8
 8017e8e:	fb1b fb07 	smulbb	fp, fp, r7
 8017e92:	fb09 b908 	mla	r9, r9, r8, fp
 8017e96:	fa1f f989 	uxth.w	r9, r9
 8017e9a:	f109 0b01 	add.w	fp, r9, #1
 8017e9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ea2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8017ea6:	fb1b fb08 	smulbb	fp, fp, r8
 8017eaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017eae:	f805 9c03 	strb.w	r9, [r5, #-3]
 8017eb2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8017eb6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017eba:	fb09 b907 	mla	r9, r9, r7, fp
 8017ebe:	fa1f f989 	uxth.w	r9, r9
 8017ec2:	f109 0b01 	add.w	fp, r9, #1
 8017ec6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017eca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017ece:	f805 9c02 	strb.w	r9, [r5, #-2]
 8017ed2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8017ed6:	fb19 f808 	smulbb	r8, r9, r8
 8017eda:	fb06 8607 	mla	r6, r6, r7, r8
 8017ede:	b2b6      	uxth	r6, r6
 8017ee0:	f106 0801 	add.w	r8, r6, #1
 8017ee4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8017ee8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017eec:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017ef0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017ef2:	4470      	add	r0, lr
 8017ef4:	3503      	adds	r5, #3
 8017ef6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017efa:	4432      	add	r2, r6
 8017efc:	e7a7      	b.n	8017e4e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017efe:	2600      	movs	r6, #0
 8017f00:	1b9d      	subs	r5, r3, r6
 8017f02:	2d00      	cmp	r5, #0
 8017f04:	dc3b      	bgt.n	8017f7e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017f06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f0e:	441c      	add	r4, r3
 8017f10:	2900      	cmp	r1, #0
 8017f12:	f340 80a8 	ble.w	8018066 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017f16:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f20:	3901      	subs	r1, #1
 8017f22:	eeb0 6a62 	vmov.f32	s12, s5
 8017f26:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017f2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f32:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017f36:	eeb0 6a43 	vmov.f32	s12, s6
 8017f3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f3e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017f42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017f4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017f52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017f56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017f5a:	ee12 2a90 	vmov	r2, s5
 8017f5e:	eef0 2a47 	vmov.f32	s5, s14
 8017f62:	fb92 fef3 	sdiv	lr, r2, r3
 8017f66:	ee13 2a10 	vmov	r2, s6
 8017f6a:	eeb0 3a67 	vmov.f32	s6, s15
 8017f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017f72:	9a03      	ldr	r2, [sp, #12]
 8017f74:	9312      	str	r3, [sp, #72]	@ 0x48
 8017f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017f78:	bf08      	it	eq
 8017f7a:	4613      	moveq	r3, r2
 8017f7c:	e736      	b.n	8017dec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017f7e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017f82:	d457      	bmi.n	8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017f84:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8017f88:	4547      	cmp	r7, r8
 8017f8a:	dd53      	ble.n	8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017f8c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8017f90:	d450      	bmi.n	8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017f92:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8017f96:	454d      	cmp	r5, r9
 8017f98:	dd4c      	ble.n	8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017f9a:	9d01      	ldr	r5, [sp, #4]
 8017f9c:	b23f      	sxth	r7, r7
 8017f9e:	fb09 5707 	mla	r7, r9, r7, r5
 8017fa2:	f817 5008 	ldrb.w	r5, [r7, r8]
 8017fa6:	9f02      	ldr	r7, [sp, #8]
 8017fa8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017fac:	0e2f      	lsrs	r7, r5, #24
 8017fae:	2fff      	cmp	r7, #255	@ 0xff
 8017fb0:	d045      	beq.n	801803e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017fb2:	fa5f f987 	uxtb.w	r9, r7
 8017fb6:	b3ef      	cbz	r7, 8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8017fb8:	fa1f f889 	uxth.w	r8, r9
 8017fbc:	ea6f 0909 	mvn.w	r9, r9
 8017fc0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017fc4:	fa5f fb85 	uxtb.w	fp, r5
 8017fc8:	f814 a007 	ldrb.w	sl, [r4, r7]
 8017fcc:	fa5f f989 	uxtb.w	r9, r9
 8017fd0:	fb1b fb08 	smulbb	fp, fp, r8
 8017fd4:	fb0a ba09 	mla	sl, sl, r9, fp
 8017fd8:	fa1f fa8a 	uxth.w	sl, sl
 8017fdc:	f10a 0b01 	add.w	fp, sl, #1
 8017fe0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017fe4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017fe8:	f804 a007 	strb.w	sl, [r4, r7]
 8017fec:	4427      	add	r7, r4
 8017fee:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8017ff2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8017ff6:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017ffa:	fb1b fb09 	smulbb	fp, fp, r9
 8017ffe:	fb0a ba08 	mla	sl, sl, r8, fp
 8018002:	fa1f fa8a 	uxth.w	sl, sl
 8018006:	f10a 0b01 	add.w	fp, sl, #1
 801800a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801800e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018012:	f887 a001 	strb.w	sl, [r7, #1]
 8018016:	f897 a002 	ldrb.w	sl, [r7, #2]
 801801a:	fb1a f909 	smulbb	r9, sl, r9
 801801e:	fb05 9508 	mla	r5, r5, r8, r9
 8018022:	b2ad      	uxth	r5, r5
 8018024:	f105 0901 	add.w	r9, r5, #1
 8018028:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801802c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018030:	f887 9002 	strb.w	r9, [r7, #2]
 8018034:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018036:	4470      	add	r0, lr
 8018038:	3601      	adds	r6, #1
 801803a:	442a      	add	r2, r5
 801803c:	e760      	b.n	8017f00 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801803e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018042:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018046:	55e5      	strb	r5, [r4, r7]
 8018048:	4427      	add	r7, r4
 801804a:	0c2d      	lsrs	r5, r5, #16
 801804c:	f887 8001 	strb.w	r8, [r7, #1]
 8018050:	70bd      	strb	r5, [r7, #2]
 8018052:	e7ef      	b.n	8018034 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018054:	0a37      	lsrs	r7, r6, #8
 8018056:	f805 6c03 	strb.w	r6, [r5, #-3]
 801805a:	0c36      	lsrs	r6, r6, #16
 801805c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018060:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018064:	e744      	b.n	8017ef0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018066:	b005      	add	sp, #20
 8018068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801806c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801806c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018070:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018072:	9201      	str	r2, [sp, #4]
 8018074:	6870      	ldr	r0, [r6, #4]
 8018076:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801807a:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801807e:	fa1f fe85 	uxth.w	lr, r5
 8018082:	43ed      	mvns	r5, r5
 8018084:	f8dc 8000 	ldr.w	r8, [ip]
 8018088:	b2ed      	uxtb	r5, r5
 801808a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801808e:	fb00 2404 	mla	r4, r0, r4, r2
 8018092:	6832      	ldr	r2, [r6, #0]
 8018094:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018098:	4414      	add	r4, r2
 801809a:	2900      	cmp	r1, #0
 801809c:	dc03      	bgt.n	80180a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801809e:	9a01      	ldr	r2, [sp, #4]
 80180a0:	2a00      	cmp	r2, #0
 80180a2:	f340 810d 	ble.w	80182c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80180a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80180a8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80180ac:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80180b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80180b2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80180b6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	dd0e      	ble.n	80180dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80180be:	1406      	asrs	r6, r0, #16
 80180c0:	d405      	bmi.n	80180ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80180c2:	4556      	cmp	r6, sl
 80180c4:	da03      	bge.n	80180ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80180c6:	1416      	asrs	r6, r2, #16
 80180c8:	d401      	bmi.n	80180ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80180ca:	454e      	cmp	r6, r9
 80180cc:	db07      	blt.n	80180de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80180ce:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80180d0:	3b01      	subs	r3, #1
 80180d2:	3403      	adds	r4, #3
 80180d4:	4430      	add	r0, r6
 80180d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80180d8:	4432      	add	r2, r6
 80180da:	e7ee      	b.n	80180ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80180dc:	d060      	beq.n	80181a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80180de:	1e5e      	subs	r6, r3, #1
 80180e0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80180e2:	fb07 0706 	mla	r7, r7, r6, r0
 80180e6:	143f      	asrs	r7, r7, #16
 80180e8:	d451      	bmi.n	801818e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80180ea:	4557      	cmp	r7, sl
 80180ec:	da4f      	bge.n	801818e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80180ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80180f0:	fb07 2606 	mla	r6, r7, r6, r2
 80180f4:	1436      	asrs	r6, r6, #16
 80180f6:	d44a      	bmi.n	801818e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80180f8:	454e      	cmp	r6, r9
 80180fa:	da48      	bge.n	801818e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80180fc:	1ce6      	adds	r6, r4, #3
 80180fe:	4699      	mov	r9, r3
 8018100:	f1b9 0f00 	cmp.w	r9, #0
 8018104:	f106 0603 	add.w	r6, r6, #3
 8018108:	dd45      	ble.n	8018196 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801810a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801810e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018112:	1417      	asrs	r7, r2, #16
 8018114:	f109 39ff 	add.w	r9, r9, #4294967295
 8018118:	fb0b a707 	mla	r7, fp, r7, sl
 801811c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018120:	fb1b fb05 	smulbb	fp, fp, r5
 8018124:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018128:	eb08 0a07 	add.w	sl, r8, r7
 801812c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018130:	fb07 b70e 	mla	r7, r7, lr, fp
 8018134:	b2bf      	uxth	r7, r7
 8018136:	f107 0b01 	add.w	fp, r7, #1
 801813a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801813e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018142:	fb1b fb05 	smulbb	fp, fp, r5
 8018146:	123f      	asrs	r7, r7, #8
 8018148:	f806 7c06 	strb.w	r7, [r6, #-6]
 801814c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018150:	fb07 b70e 	mla	r7, r7, lr, fp
 8018154:	b2bf      	uxth	r7, r7
 8018156:	f107 0b01 	add.w	fp, r7, #1
 801815a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801815e:	123f      	asrs	r7, r7, #8
 8018160:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018164:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018168:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801816c:	fb1a fa05 	smulbb	sl, sl, r5
 8018170:	fb07 a70e 	mla	r7, r7, lr, sl
 8018174:	b2bf      	uxth	r7, r7
 8018176:	f107 0a01 	add.w	sl, r7, #1
 801817a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801817e:	123f      	asrs	r7, r7, #8
 8018180:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018184:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018186:	4438      	add	r0, r7
 8018188:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801818a:	443a      	add	r2, r7
 801818c:	e7b8      	b.n	8018100 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801818e:	2700      	movs	r7, #0
 8018190:	1bde      	subs	r6, r3, r7
 8018192:	2e00      	cmp	r6, #0
 8018194:	dc3f      	bgt.n	8018216 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018196:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801819a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801819e:	441c      	add	r4, r3
 80181a0:	2900      	cmp	r1, #0
 80181a2:	f340 808d 	ble.w	80182c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80181a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80181aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80181ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80181b0:	3901      	subs	r1, #1
 80181b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80181b6:	eef0 6a62 	vmov.f32	s13, s5
 80181ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80181be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80181c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80181c6:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 80181ca:	eef0 6a43 	vmov.f32	s13, s6
 80181ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80181d2:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80181d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80181da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80181de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80181e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80181e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80181ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80181ee:	ee12 2a90 	vmov	r2, s5
 80181f2:	eef0 2a47 	vmov.f32	s5, s14
 80181f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80181fa:	ee13 2a10 	vmov	r2, s6
 80181fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018200:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018202:	eeb0 3a67 	vmov.f32	s6, s15
 8018206:	fb92 f3f3 	sdiv	r3, r2, r3
 801820a:	9a01      	ldr	r2, [sp, #4]
 801820c:	9310      	str	r3, [sp, #64]	@ 0x40
 801820e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018210:	bf08      	it	eq
 8018212:	4613      	moveq	r3, r2
 8018214:	e741      	b.n	801809a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018216:	ea5f 4920 	movs.w	r9, r0, asr #16
 801821a:	d44b      	bmi.n	80182b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801821c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018220:	45cb      	cmp	fp, r9
 8018222:	dd47      	ble.n	80182b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018224:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018228:	d444      	bmi.n	80182b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801822a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801822e:	4556      	cmp	r6, sl
 8018230:	dd40      	ble.n	80182b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018232:	fa0f f68b 	sxth.w	r6, fp
 8018236:	fb0a 9906 	mla	r9, sl, r6, r9
 801823a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801823e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018242:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018246:	fb1b fb05 	smulbb	fp, fp, r5
 801824a:	eb08 0a09 	add.w	sl, r8, r9
 801824e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018252:	fb09 b90e 	mla	r9, r9, lr, fp
 8018256:	fa1f f989 	uxth.w	r9, r9
 801825a:	f109 0b01 	add.w	fp, r9, #1
 801825e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018262:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018266:	f804 9006 	strb.w	r9, [r4, r6]
 801826a:	4426      	add	r6, r4
 801826c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018270:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018274:	fb1b fb05 	smulbb	fp, fp, r5
 8018278:	fb09 b90e 	mla	r9, r9, lr, fp
 801827c:	fa1f f989 	uxth.w	r9, r9
 8018280:	f109 0b01 	add.w	fp, r9, #1
 8018284:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018288:	ea4f 2929 	mov.w	r9, r9, asr #8
 801828c:	f886 9001 	strb.w	r9, [r6, #1]
 8018290:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018294:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018298:	fb1a fa05 	smulbb	sl, sl, r5
 801829c:	fb09 a90e 	mla	r9, r9, lr, sl
 80182a0:	fa1f f989 	uxth.w	r9, r9
 80182a4:	f109 0a01 	add.w	sl, r9, #1
 80182a8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80182ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182b0:	f886 9002 	strb.w	r9, [r6, #2]
 80182b4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80182b6:	3701      	adds	r7, #1
 80182b8:	4430      	add	r0, r6
 80182ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80182bc:	4432      	add	r2, r6
 80182be:	e767      	b.n	8018190 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80182c0:	b003      	add	sp, #12
 80182c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80182c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ca:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80182cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80182d0:	9201      	str	r2, [sp, #4]
 80182d2:	6868      	ldr	r0, [r5, #4]
 80182d4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80182d6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80182da:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80182de:	fb00 2404 	mla	r4, r0, r4, r2
 80182e2:	682a      	ldr	r2, [r5, #0]
 80182e4:	f8d7 8000 	ldr.w	r8, [r7]
 80182e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80182ec:	4414      	add	r4, r2
 80182ee:	2900      	cmp	r1, #0
 80182f0:	dc03      	bgt.n	80182fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80182f2:	9a01      	ldr	r2, [sp, #4]
 80182f4:	2a00      	cmp	r2, #0
 80182f6:	f340 80af 	ble.w	8018458 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80182fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80182fc:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8018300:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018304:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018306:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801830a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801830e:	2b00      	cmp	r3, #0
 8018310:	dd0c      	ble.n	801832c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018312:	1405      	asrs	r5, r0, #16
 8018314:	d405      	bmi.n	8018322 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018316:	4555      	cmp	r5, sl
 8018318:	da03      	bge.n	8018322 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801831a:	1415      	asrs	r5, r2, #16
 801831c:	d401      	bmi.n	8018322 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801831e:	454d      	cmp	r5, r9
 8018320:	db05      	blt.n	801832e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018322:	4470      	add	r0, lr
 8018324:	4462      	add	r2, ip
 8018326:	3b01      	subs	r3, #1
 8018328:	3403      	adds	r4, #3
 801832a:	e7f0      	b.n	801830e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801832c:	d038      	beq.n	80183a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801832e:	1e5d      	subs	r5, r3, #1
 8018330:	fb0e 0605 	mla	r6, lr, r5, r0
 8018334:	1436      	asrs	r6, r6, #16
 8018336:	d42a      	bmi.n	801838e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018338:	4556      	cmp	r6, sl
 801833a:	da28      	bge.n	801838e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801833c:	fb0c 2505 	mla	r5, ip, r5, r2
 8018340:	142d      	asrs	r5, r5, #16
 8018342:	d424      	bmi.n	801838e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018344:	454d      	cmp	r5, r9
 8018346:	da22      	bge.n	801838e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018348:	1ce6      	adds	r6, r4, #3
 801834a:	4699      	mov	r9, r3
 801834c:	f1b9 0f00 	cmp.w	r9, #0
 8018350:	f106 0603 	add.w	r6, r6, #3
 8018354:	dd1f      	ble.n	8018396 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8018356:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801835a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801835e:	1415      	asrs	r5, r2, #16
 8018360:	4470      	add	r0, lr
 8018362:	4462      	add	r2, ip
 8018364:	f109 39ff 	add.w	r9, r9, #4294967295
 8018368:	fb0b a505 	mla	r5, fp, r5, sl
 801836c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018370:	eb08 0a05 	add.w	sl, r8, r5
 8018374:	f818 5005 	ldrb.w	r5, [r8, r5]
 8018378:	f806 5c06 	strb.w	r5, [r6, #-6]
 801837c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018380:	f806 5c05 	strb.w	r5, [r6, #-5]
 8018384:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8018388:	f806 5c04 	strb.w	r5, [r6, #-4]
 801838c:	e7de      	b.n	801834c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801838e:	2600      	movs	r6, #0
 8018390:	1b9d      	subs	r5, r3, r6
 8018392:	2d00      	cmp	r5, #0
 8018394:	dc38      	bgt.n	8018408 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801839a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801839e:	441c      	add	r4, r3
 80183a0:	2900      	cmp	r1, #0
 80183a2:	dd59      	ble.n	8018458 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80183a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80183a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80183aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183ae:	3901      	subs	r1, #1
 80183b0:	eeb0 6a62 	vmov.f32	s12, s5
 80183b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80183b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183c0:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80183c4:	eeb0 6a43 	vmov.f32	s12, s6
 80183c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183cc:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80183d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183e8:	ee12 2a90 	vmov	r2, s5
 80183ec:	eef0 2a47 	vmov.f32	s5, s14
 80183f0:	fb92 fef3 	sdiv	lr, r2, r3
 80183f4:	ee13 2a10 	vmov	r2, s6
 80183f8:	eeb0 3a67 	vmov.f32	s6, s15
 80183fc:	fb92 fcf3 	sdiv	ip, r2, r3
 8018400:	9a01      	ldr	r2, [sp, #4]
 8018402:	bf08      	it	eq
 8018404:	4613      	moveq	r3, r2
 8018406:	e772      	b.n	80182ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018408:	ea5f 4920 	movs.w	r9, r0, asr #16
 801840c:	d420      	bmi.n	8018450 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801840e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8018412:	45cb      	cmp	fp, r9
 8018414:	dd1c      	ble.n	8018450 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018416:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801841a:	d419      	bmi.n	8018450 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801841c:	68fd      	ldr	r5, [r7, #12]
 801841e:	4555      	cmp	r5, sl
 8018420:	dd16      	ble.n	8018450 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018422:	fa0f f58b 	sxth.w	r5, fp
 8018426:	fb0a 9505 	mla	r5, sl, r5, r9
 801842a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801842e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018432:	eb08 0b05 	add.w	fp, r8, r5
 8018436:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801843a:	f804 9005 	strb.w	r9, [r4, r5]
 801843e:	4425      	add	r5, r4
 8018440:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018444:	f885 9001 	strb.w	r9, [r5, #1]
 8018448:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801844c:	f885 9002 	strb.w	r9, [r5, #2]
 8018450:	4470      	add	r0, lr
 8018452:	4462      	add	r2, ip
 8018454:	3601      	adds	r6, #1
 8018456:	e79b      	b.n	8018390 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018458:	b003      	add	sp, #12
 801845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801845e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801845e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018462:	b085      	sub	sp, #20
 8018464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018468:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801846a:	9202      	str	r2, [sp, #8]
 801846c:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018470:	6860      	ldr	r0, [r4, #4]
 8018472:	9203      	str	r2, [sp, #12]
 8018474:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018478:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801847c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018480:	fb00 2505 	mla	r5, r0, r5, r2
 8018484:	6822      	ldr	r2, [r4, #0]
 8018486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801848a:	4415      	add	r5, r2
 801848c:	f8dc 2000 	ldr.w	r2, [ip]
 8018490:	9201      	str	r2, [sp, #4]
 8018492:	2900      	cmp	r1, #0
 8018494:	dc03      	bgt.n	801849e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018496:	9a02      	ldr	r2, [sp, #8]
 8018498:	2a00      	cmp	r2, #0
 801849a:	f340 8122 	ble.w	80186e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801849e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80184a0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80184a4:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80184a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80184aa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80184ae:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	dd0d      	ble.n	80184d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80184b6:	1422      	asrs	r2, r4, #16
 80184b8:	d405      	bmi.n	80184c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80184ba:	4542      	cmp	r2, r8
 80184bc:	da03      	bge.n	80184c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80184be:	1402      	asrs	r2, r0, #16
 80184c0:	d401      	bmi.n	80184c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80184c2:	42ba      	cmp	r2, r7
 80184c4:	db06      	blt.n	80184d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80184c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80184c8:	4474      	add	r4, lr
 80184ca:	3b01      	subs	r3, #1
 80184cc:	3503      	adds	r5, #3
 80184ce:	4410      	add	r0, r2
 80184d0:	e7ef      	b.n	80184b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80184d2:	d072      	beq.n	80185ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80184d4:	1e5a      	subs	r2, r3, #1
 80184d6:	fb0e 4602 	mla	r6, lr, r2, r4
 80184da:	1436      	asrs	r6, r6, #16
 80184dc:	d462      	bmi.n	80185a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80184de:	4546      	cmp	r6, r8
 80184e0:	da60      	bge.n	80185a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80184e2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80184e4:	fb06 0202 	mla	r2, r6, r2, r0
 80184e8:	1412      	asrs	r2, r2, #16
 80184ea:	d45b      	bmi.n	80185a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80184ec:	42ba      	cmp	r2, r7
 80184ee:	da59      	bge.n	80185a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80184f0:	1cef      	adds	r7, r5, #3
 80184f2:	4699      	mov	r9, r3
 80184f4:	f1b9 0f00 	cmp.w	r9, #0
 80184f8:	dd5a      	ble.n	80185b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80184fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80184fe:	1426      	asrs	r6, r4, #16
 8018500:	1402      	asrs	r2, r0, #16
 8018502:	fb08 6202 	mla	r2, r8, r2, r6
 8018506:	9e01      	ldr	r6, [sp, #4]
 8018508:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801850c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018510:	d041      	beq.n	8018596 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018512:	9a03      	ldr	r2, [sp, #12]
 8018514:	fa5f fb86 	uxtb.w	fp, r6
 8018518:	fb02 f808 	mul.w	r8, r2, r8
 801851c:	f108 0201 	add.w	r2, r8, #1
 8018520:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018524:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018528:	1212      	asrs	r2, r2, #8
 801852a:	fa1f fa82 	uxth.w	sl, r2
 801852e:	43d2      	mvns	r2, r2
 8018530:	fb1b fb0a 	smulbb	fp, fp, sl
 8018534:	b2d2      	uxtb	r2, r2
 8018536:	fb08 b802 	mla	r8, r8, r2, fp
 801853a:	fa1f f888 	uxth.w	r8, r8
 801853e:	f108 0b01 	add.w	fp, r8, #1
 8018542:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018546:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801854a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801854e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018552:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018556:	fb16 fa0a 	smulbb	sl, r6, sl
 801855a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801855e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018562:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018566:	fb06 aa02 	mla	sl, r6, r2, sl
 801856a:	fb08 b802 	mla	r8, r8, r2, fp
 801856e:	fa1f fa8a 	uxth.w	sl, sl
 8018572:	fa1f f888 	uxth.w	r8, r8
 8018576:	f10a 0601 	add.w	r6, sl, #1
 801857a:	f108 0b01 	add.w	fp, r8, #1
 801857e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018582:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018586:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801858a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801858e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018592:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018596:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018598:	4474      	add	r4, lr
 801859a:	3703      	adds	r7, #3
 801859c:	f109 39ff 	add.w	r9, r9, #4294967295
 80185a0:	4410      	add	r0, r2
 80185a2:	e7a7      	b.n	80184f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80185a4:	f04f 0800 	mov.w	r8, #0
 80185a8:	eba3 0208 	sub.w	r2, r3, r8
 80185ac:	2a00      	cmp	r2, #0
 80185ae:	dc3b      	bgt.n	8018628 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80185b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185b8:	441d      	add	r5, r3
 80185ba:	2900      	cmp	r1, #0
 80185bc:	f340 8091 	ble.w	80186e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80185c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80185c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185ca:	3901      	subs	r1, #1
 80185cc:	eeb0 6a62 	vmov.f32	s12, s5
 80185d0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185dc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80185e0:	eeb0 6a43 	vmov.f32	s12, s6
 80185e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185e8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80185ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018600:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018604:	ee12 2a90 	vmov	r2, s5
 8018608:	eef0 2a47 	vmov.f32	s5, s14
 801860c:	fb92 fef3 	sdiv	lr, r2, r3
 8018610:	ee13 2a10 	vmov	r2, s6
 8018614:	eeb0 3a67 	vmov.f32	s6, s15
 8018618:	fb92 f3f3 	sdiv	r3, r2, r3
 801861c:	9a02      	ldr	r2, [sp, #8]
 801861e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018622:	bf08      	it	eq
 8018624:	4613      	moveq	r3, r2
 8018626:	e734      	b.n	8018492 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018628:	1427      	asrs	r7, r4, #16
 801862a:	d454      	bmi.n	80186d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801862c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018630:	42be      	cmp	r6, r7
 8018632:	dd50      	ble.n	80186d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018634:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018638:	d44d      	bmi.n	80186d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801863a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801863e:	454a      	cmp	r2, r9
 8018640:	dd49      	ble.n	80186d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018642:	b236      	sxth	r6, r6
 8018644:	9a01      	ldr	r2, [sp, #4]
 8018646:	fb09 7606 	mla	r6, r9, r6, r7
 801864a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801864e:	0e3a      	lsrs	r2, r7, #24
 8018650:	d041      	beq.n	80186d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8018652:	9e03      	ldr	r6, [sp, #12]
 8018654:	fa5f fb87 	uxtb.w	fp, r7
 8018658:	4372      	muls	r2, r6
 801865a:	1c56      	adds	r6, r2, #1
 801865c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018660:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8018664:	1212      	asrs	r2, r2, #8
 8018666:	f815 9006 	ldrb.w	r9, [r5, r6]
 801866a:	fa1f fa82 	uxth.w	sl, r2
 801866e:	43d2      	mvns	r2, r2
 8018670:	fb1b fb0a 	smulbb	fp, fp, sl
 8018674:	b2d2      	uxtb	r2, r2
 8018676:	fb09 b902 	mla	r9, r9, r2, fp
 801867a:	fa1f f989 	uxth.w	r9, r9
 801867e:	f109 0b01 	add.w	fp, r9, #1
 8018682:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018686:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801868a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801868e:	fb1b fb0a 	smulbb	fp, fp, sl
 8018692:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018696:	fb17 fa0a 	smulbb	sl, r7, sl
 801869a:	f805 9006 	strb.w	r9, [r5, r6]
 801869e:	442e      	add	r6, r5
 80186a0:	78b7      	ldrb	r7, [r6, #2]
 80186a2:	f896 9001 	ldrb.w	r9, [r6, #1]
 80186a6:	fb07 aa02 	mla	sl, r7, r2, sl
 80186aa:	fb09 b902 	mla	r9, r9, r2, fp
 80186ae:	fa1f fa8a 	uxth.w	sl, sl
 80186b2:	fa1f f989 	uxth.w	r9, r9
 80186b6:	f10a 0701 	add.w	r7, sl, #1
 80186ba:	f109 0b01 	add.w	fp, r9, #1
 80186be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80186c2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80186c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80186ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80186ce:	f886 a002 	strb.w	sl, [r6, #2]
 80186d2:	f886 9001 	strb.w	r9, [r6, #1]
 80186d6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80186d8:	4474      	add	r4, lr
 80186da:	f108 0801 	add.w	r8, r8, #1
 80186de:	4410      	add	r0, r2
 80186e0:	e762      	b.n	80185a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80186e2:	b005      	add	sp, #20
 80186e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80186e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80186ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80186f2:	9201      	str	r2, [sp, #4]
 80186f4:	6860      	ldr	r0, [r4, #4]
 80186f6:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80186fa:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80186fe:	fb00 2505 	mla	r5, r0, r5, r2
 8018702:	6822      	ldr	r2, [r4, #0]
 8018704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018708:	4415      	add	r5, r2
 801870a:	f8dc 2000 	ldr.w	r2, [ip]
 801870e:	9200      	str	r2, [sp, #0]
 8018710:	2900      	cmp	r1, #0
 8018712:	dc03      	bgt.n	801871c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018714:	9a01      	ldr	r2, [sp, #4]
 8018716:	2a00      	cmp	r2, #0
 8018718:	f340 812b 	ble.w	8018972 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801871c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801871e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018722:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018728:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801872c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018730:	2b00      	cmp	r3, #0
 8018732:	dd0e      	ble.n	8018752 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8018734:	1422      	asrs	r2, r4, #16
 8018736:	d405      	bmi.n	8018744 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018738:	4572      	cmp	r2, lr
 801873a:	da03      	bge.n	8018744 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801873c:	1402      	asrs	r2, r0, #16
 801873e:	d401      	bmi.n	8018744 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018740:	42ba      	cmp	r2, r7
 8018742:	db07      	blt.n	8018754 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018744:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018746:	3b01      	subs	r3, #1
 8018748:	3503      	adds	r5, #3
 801874a:	4414      	add	r4, r2
 801874c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801874e:	4410      	add	r0, r2
 8018750:	e7ee      	b.n	8018730 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018752:	d06f      	beq.n	8018834 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8018754:	1e5a      	subs	r2, r3, #1
 8018756:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018758:	fb06 4602 	mla	r6, r6, r2, r4
 801875c:	1436      	asrs	r6, r6, #16
 801875e:	d45e      	bmi.n	801881e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018760:	4576      	cmp	r6, lr
 8018762:	da5c      	bge.n	801881e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018764:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018766:	fb06 0202 	mla	r2, r6, r2, r0
 801876a:	1412      	asrs	r2, r2, #16
 801876c:	d457      	bmi.n	801881e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801876e:	42ba      	cmp	r2, r7
 8018770:	da55      	bge.n	801881e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8018772:	1cee      	adds	r6, r5, #3
 8018774:	469a      	mov	sl, r3
 8018776:	f1ba 0f00 	cmp.w	sl, #0
 801877a:	dd56      	ble.n	801882a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801877c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018780:	1427      	asrs	r7, r4, #16
 8018782:	1402      	asrs	r2, r0, #16
 8018784:	fb0e 7202 	mla	r2, lr, r2, r7
 8018788:	9f00      	ldr	r7, [sp, #0]
 801878a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801878e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8018792:	d03c      	beq.n	801880e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018794:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8018798:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801879c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80187a0:	fa5f f28e 	uxtb.w	r2, lr
 80187a4:	b2ff      	uxtb	r7, r7
 80187a6:	f000 80dd 	beq.w	8018964 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80187aa:	fa1f f882 	uxth.w	r8, r2
 80187ae:	43d2      	mvns	r2, r2
 80187b0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80187b4:	fb17 f708 	smulbb	r7, r7, r8
 80187b8:	b2d2      	uxtb	r2, r2
 80187ba:	fb19 f908 	smulbb	r9, r9, r8
 80187be:	fb0e 7702 	mla	r7, lr, r2, r7
 80187c2:	fb1b f808 	smulbb	r8, fp, r8
 80187c6:	b2bf      	uxth	r7, r7
 80187c8:	f107 0e01 	add.w	lr, r7, #1
 80187cc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80187d0:	123f      	asrs	r7, r7, #8
 80187d2:	f806 7c03 	strb.w	r7, [r6, #-3]
 80187d6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80187da:	fb07 9902 	mla	r9, r7, r2, r9
 80187de:	fa1f f989 	uxth.w	r9, r9
 80187e2:	f109 0701 	add.w	r7, r9, #1
 80187e6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80187ea:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80187ee:	fb07 8802 	mla	r8, r7, r2, r8
 80187f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80187f6:	fa1f f888 	uxth.w	r8, r8
 80187fa:	f806 9c02 	strb.w	r9, [r6, #-2]
 80187fe:	f108 0201 	add.w	r2, r8, #1
 8018802:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018806:	ea4f 2828 	mov.w	r8, r8, asr #8
 801880a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801880e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018810:	3603      	adds	r6, #3
 8018812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018816:	4414      	add	r4, r2
 8018818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801881a:	4410      	add	r0, r2
 801881c:	e7ab      	b.n	8018776 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801881e:	f04f 0e00 	mov.w	lr, #0
 8018822:	eba3 020e 	sub.w	r2, r3, lr
 8018826:	2a00      	cmp	r2, #0
 8018828:	dc3d      	bgt.n	80188a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801882a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801882e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018832:	441d      	add	r5, r3
 8018834:	2900      	cmp	r1, #0
 8018836:	f340 809c 	ble.w	8018972 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801883a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801883e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018840:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018844:	3901      	subs	r1, #1
 8018846:	eeb0 6a62 	vmov.f32	s12, s5
 801884a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801884e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018852:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018856:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801885a:	eeb0 6a43 	vmov.f32	s12, s6
 801885e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018862:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018866:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801886a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801886e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018872:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018876:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801887a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801887e:	ee12 2a90 	vmov	r2, s5
 8018882:	eef0 2a47 	vmov.f32	s5, s14
 8018886:	fb92 f3f3 	sdiv	r3, r2, r3
 801888a:	ee13 2a10 	vmov	r2, s6
 801888e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018892:	eeb0 3a67 	vmov.f32	s6, s15
 8018896:	fb92 f3f3 	sdiv	r3, r2, r3
 801889a:	9a01      	ldr	r2, [sp, #4]
 801889c:	9310      	str	r3, [sp, #64]	@ 0x40
 801889e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188a0:	bf08      	it	eq
 80188a2:	4613      	moveq	r3, r2
 80188a4:	e734      	b.n	8018710 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80188a6:	1427      	asrs	r7, r4, #16
 80188a8:	d44d      	bmi.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80188aa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80188ae:	42be      	cmp	r6, r7
 80188b0:	dd49      	ble.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80188b2:	ea5f 4820 	movs.w	r8, r0, asr #16
 80188b6:	d446      	bmi.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80188b8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80188bc:	4542      	cmp	r2, r8
 80188be:	dd42      	ble.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80188c0:	b236      	sxth	r6, r6
 80188c2:	9a00      	ldr	r2, [sp, #0]
 80188c4:	fb08 7606 	mla	r6, r8, r6, r7
 80188c8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80188cc:	0e3a      	lsrs	r2, r7, #24
 80188ce:	d03a      	beq.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80188d0:	2aff      	cmp	r2, #255	@ 0xff
 80188d2:	b2d6      	uxtb	r6, r2
 80188d4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80188d8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80188dc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80188e0:	b2ff      	uxtb	r7, r7
 80188e2:	d037      	beq.n	8018954 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80188e4:	fa1f f986 	uxth.w	r9, r6
 80188e8:	4472      	add	r2, lr
 80188ea:	43f6      	mvns	r6, r6
 80188ec:	f815 8002 	ldrb.w	r8, [r5, r2]
 80188f0:	fb17 f709 	smulbb	r7, r7, r9
 80188f4:	fb1a fa09 	smulbb	sl, sl, r9
 80188f8:	b2f6      	uxtb	r6, r6
 80188fa:	fb1b f909 	smulbb	r9, fp, r9
 80188fe:	fb08 7706 	mla	r7, r8, r6, r7
 8018902:	b2bf      	uxth	r7, r7
 8018904:	f107 0801 	add.w	r8, r7, #1
 8018908:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801890c:	123f      	asrs	r7, r7, #8
 801890e:	54af      	strb	r7, [r5, r2]
 8018910:	442a      	add	r2, r5
 8018912:	7857      	ldrb	r7, [r2, #1]
 8018914:	fb07 aa06 	mla	sl, r7, r6, sl
 8018918:	fa1f fa8a 	uxth.w	sl, sl
 801891c:	f10a 0701 	add.w	r7, sl, #1
 8018920:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018924:	7897      	ldrb	r7, [r2, #2]
 8018926:	fb07 9906 	mla	r9, r7, r6, r9
 801892a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801892e:	fa1f f989 	uxth.w	r9, r9
 8018932:	f882 a001 	strb.w	sl, [r2, #1]
 8018936:	f109 0601 	add.w	r6, r9, #1
 801893a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801893e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018942:	f882 9002 	strb.w	r9, [r2, #2]
 8018946:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018948:	f10e 0e01 	add.w	lr, lr, #1
 801894c:	4414      	add	r4, r2
 801894e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018950:	4410      	add	r0, r2
 8018952:	e766      	b.n	8018822 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018954:	4472      	add	r2, lr
 8018956:	54af      	strb	r7, [r5, r2]
 8018958:	442a      	add	r2, r5
 801895a:	f882 a001 	strb.w	sl, [r2, #1]
 801895e:	f882 b002 	strb.w	fp, [r2, #2]
 8018962:	e7f0      	b.n	8018946 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8018964:	f806 7c03 	strb.w	r7, [r6, #-3]
 8018968:	f806 9c02 	strb.w	r9, [r6, #-2]
 801896c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8018970:	e74d      	b.n	801880e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018972:	b003      	add	sp, #12
 8018974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018978 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801897c:	b087      	sub	sp, #28
 801897e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018982:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8018984:	9204      	str	r2, [sp, #16]
 8018986:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801898a:	6860      	ldr	r0, [r4, #4]
 801898c:	9205      	str	r2, [sp, #20]
 801898e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8018992:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8018996:	9101      	str	r1, [sp, #4]
 8018998:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801899c:	fb00 2505 	mla	r5, r0, r5, r2
 80189a0:	6822      	ldr	r2, [r4, #0]
 80189a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189a6:	4415      	add	r5, r2
 80189a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80189ac:	3201      	adds	r2, #1
 80189ae:	f022 0201 	bic.w	r2, r2, #1
 80189b2:	9202      	str	r2, [sp, #8]
 80189b4:	f8dc 2000 	ldr.w	r2, [ip]
 80189b8:	9203      	str	r2, [sp, #12]
 80189ba:	9a01      	ldr	r2, [sp, #4]
 80189bc:	2a00      	cmp	r2, #0
 80189be:	dc03      	bgt.n	80189c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80189c0:	9a04      	ldr	r2, [sp, #16]
 80189c2:	2a00      	cmp	r2, #0
 80189c4:	f340 8135 	ble.w	8018c32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80189c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80189ca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80189ce:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80189d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80189d4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80189d8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80189dc:	2b00      	cmp	r3, #0
 80189de:	dd0d      	ble.n	80189fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80189e0:	1422      	asrs	r2, r4, #16
 80189e2:	d405      	bmi.n	80189f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80189e4:	4542      	cmp	r2, r8
 80189e6:	da03      	bge.n	80189f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80189e8:	1402      	asrs	r2, r0, #16
 80189ea:	d401      	bmi.n	80189f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80189ec:	42ba      	cmp	r2, r7
 80189ee:	db06      	blt.n	80189fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80189f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80189f2:	4474      	add	r4, lr
 80189f4:	3b01      	subs	r3, #1
 80189f6:	3503      	adds	r5, #3
 80189f8:	4410      	add	r0, r2
 80189fa:	e7ef      	b.n	80189dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80189fc:	d077      	beq.n	8018aee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80189fe:	1e5a      	subs	r2, r3, #1
 8018a00:	fb0e 4602 	mla	r6, lr, r2, r4
 8018a04:	1436      	asrs	r6, r6, #16
 8018a06:	d469      	bmi.n	8018adc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a08:	4546      	cmp	r6, r8
 8018a0a:	da67      	bge.n	8018adc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a0c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018a0e:	fb06 0202 	mla	r2, r6, r2, r0
 8018a12:	1412      	asrs	r2, r2, #16
 8018a14:	d462      	bmi.n	8018adc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a16:	42ba      	cmp	r2, r7
 8018a18:	da60      	bge.n	8018adc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018a1a:	1cee      	adds	r6, r5, #3
 8018a1c:	4699      	mov	r9, r3
 8018a1e:	f1b9 0f00 	cmp.w	r9, #0
 8018a22:	dd5f      	ble.n	8018ae4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8018a24:	1422      	asrs	r2, r4, #16
 8018a26:	9902      	ldr	r1, [sp, #8]
 8018a28:	1407      	asrs	r7, r0, #16
 8018a2a:	fb01 2707 	mla	r7, r1, r7, r2
 8018a2e:	9903      	ldr	r1, [sp, #12]
 8018a30:	087a      	lsrs	r2, r7, #1
 8018a32:	5c8a      	ldrb	r2, [r1, r2]
 8018a34:	07f9      	lsls	r1, r7, #31
 8018a36:	bf54      	ite	pl
 8018a38:	f002 020f 	andpl.w	r2, r2, #15
 8018a3c:	1112      	asrmi	r2, r2, #4
 8018a3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018a42:	b2d2      	uxtb	r2, r2
 8018a44:	2a00      	cmp	r2, #0
 8018a46:	d042      	beq.n	8018ace <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8018a48:	497b      	ldr	r1, [pc, #492]	@ (8018c38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018a4a:	680f      	ldr	r7, [r1, #0]
 8018a4c:	9905      	ldr	r1, [sp, #20]
 8018a4e:	fa5f fb87 	uxtb.w	fp, r7
 8018a52:	434a      	muls	r2, r1
 8018a54:	f102 0801 	add.w	r8, r2, #1
 8018a58:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8018a5c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8018a60:	1212      	asrs	r2, r2, #8
 8018a62:	fa1f fa82 	uxth.w	sl, r2
 8018a66:	43d2      	mvns	r2, r2
 8018a68:	fb1b fb0a 	smulbb	fp, fp, sl
 8018a6c:	b2d2      	uxtb	r2, r2
 8018a6e:	fb08 b802 	mla	r8, r8, r2, fp
 8018a72:	fa1f f888 	uxth.w	r8, r8
 8018a76:	f108 0b01 	add.w	fp, r8, #1
 8018a7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018a7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018a82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018a86:	fb1b fb0a 	smulbb	fp, fp, sl
 8018a8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018a8e:	fb17 fa0a 	smulbb	sl, r7, sl
 8018a92:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8018a96:	f806 8c03 	strb.w	r8, [r6, #-3]
 8018a9a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8018a9e:	fb07 aa02 	mla	sl, r7, r2, sl
 8018aa2:	fb08 b802 	mla	r8, r8, r2, fp
 8018aa6:	fa1f fa8a 	uxth.w	sl, sl
 8018aaa:	fa1f f888 	uxth.w	r8, r8
 8018aae:	f10a 0701 	add.w	r7, sl, #1
 8018ab2:	f108 0b01 	add.w	fp, r8, #1
 8018ab6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018aba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018abe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ac2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018ac6:	f806 ac01 	strb.w	sl, [r6, #-1]
 8018aca:	f806 8c02 	strb.w	r8, [r6, #-2]
 8018ace:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018ad0:	4474      	add	r4, lr
 8018ad2:	3603      	adds	r6, #3
 8018ad4:	f109 39ff 	add.w	r9, r9, #4294967295
 8018ad8:	4410      	add	r0, r2
 8018ada:	e7a0      	b.n	8018a1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018adc:	2700      	movs	r7, #0
 8018ade:	1bda      	subs	r2, r3, r7
 8018ae0:	2a00      	cmp	r2, #0
 8018ae2:	dc3e      	bgt.n	8018b62 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8018ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018ae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018aec:	441d      	add	r5, r3
 8018aee:	9b01      	ldr	r3, [sp, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f340 809e 	ble.w	8018c32 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018af6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018afa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018afc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b00:	eeb0 6a62 	vmov.f32	s12, s5
 8018b04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018b08:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b10:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8018b14:	eeb0 6a43 	vmov.f32	s12, s6
 8018b18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b1c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8018b20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018b24:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018b28:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b38:	ee12 2a90 	vmov	r2, s5
 8018b3c:	eef0 2a47 	vmov.f32	s5, s14
 8018b40:	fb92 fef3 	sdiv	lr, r2, r3
 8018b44:	ee13 2a10 	vmov	r2, s6
 8018b48:	eeb0 3a67 	vmov.f32	s6, s15
 8018b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b50:	9314      	str	r3, [sp, #80]	@ 0x50
 8018b52:	9b01      	ldr	r3, [sp, #4]
 8018b54:	9a04      	ldr	r2, [sp, #16]
 8018b56:	3b01      	subs	r3, #1
 8018b58:	9301      	str	r3, [sp, #4]
 8018b5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018b5c:	bf08      	it	eq
 8018b5e:	4613      	moveq	r3, r2
 8018b60:	e72b      	b.n	80189ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8018b62:	1426      	asrs	r6, r4, #16
 8018b64:	d460      	bmi.n	8018c28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b66:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018b6a:	42b2      	cmp	r2, r6
 8018b6c:	dd5c      	ble.n	8018c28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b6e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8018b72:	d459      	bmi.n	8018c28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b74:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018b78:	4542      	cmp	r2, r8
 8018b7a:	dd55      	ble.n	8018c28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b7c:	9a02      	ldr	r2, [sp, #8]
 8018b7e:	9903      	ldr	r1, [sp, #12]
 8018b80:	fb08 6602 	mla	r6, r8, r2, r6
 8018b84:	0872      	lsrs	r2, r6, #1
 8018b86:	07f6      	lsls	r6, r6, #31
 8018b88:	5c8a      	ldrb	r2, [r1, r2]
 8018b8a:	bf54      	ite	pl
 8018b8c:	f002 020f 	andpl.w	r2, r2, #15
 8018b90:	1112      	asrmi	r2, r2, #4
 8018b92:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018b96:	b2d2      	uxtb	r2, r2
 8018b98:	2a00      	cmp	r2, #0
 8018b9a:	d045      	beq.n	8018c28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018b9c:	4926      	ldr	r1, [pc, #152]	@ (8018c38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8018b9e:	f8d1 8000 	ldr.w	r8, [r1]
 8018ba2:	9905      	ldr	r1, [sp, #20]
 8018ba4:	fa5f fb88 	uxtb.w	fp, r8
 8018ba8:	434a      	muls	r2, r1
 8018baa:	1c56      	adds	r6, r2, #1
 8018bac:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018bb0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018bb4:	1212      	asrs	r2, r2, #8
 8018bb6:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018bba:	fa1f fa82 	uxth.w	sl, r2
 8018bbe:	43d2      	mvns	r2, r2
 8018bc0:	fb1b fb0a 	smulbb	fp, fp, sl
 8018bc4:	b2d2      	uxtb	r2, r2
 8018bc6:	fb09 b902 	mla	r9, r9, r2, fp
 8018bca:	fa1f f989 	uxth.w	r9, r9
 8018bce:	f109 0b01 	add.w	fp, r9, #1
 8018bd2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018bd6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8018bda:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8018bde:	fb1b fb0a 	smulbb	fp, fp, sl
 8018be2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018be6:	fb18 fa0a 	smulbb	sl, r8, sl
 8018bea:	f805 9006 	strb.w	r9, [r5, r6]
 8018bee:	442e      	add	r6, r5
 8018bf0:	f896 8002 	ldrb.w	r8, [r6, #2]
 8018bf4:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018bf8:	fb08 aa02 	mla	sl, r8, r2, sl
 8018bfc:	fb09 b902 	mla	r9, r9, r2, fp
 8018c00:	fa1f fa8a 	uxth.w	sl, sl
 8018c04:	fa1f f989 	uxth.w	r9, r9
 8018c08:	f10a 0801 	add.w	r8, sl, #1
 8018c0c:	f109 0b01 	add.w	fp, r9, #1
 8018c10:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8018c14:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c18:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018c1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c20:	f886 a002 	strb.w	sl, [r6, #2]
 8018c24:	f886 9001 	strb.w	r9, [r6, #1]
 8018c28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018c2a:	4474      	add	r4, lr
 8018c2c:	3701      	adds	r7, #1
 8018c2e:	4410      	add	r0, r2
 8018c30:	e755      	b.n	8018ade <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8018c32:	b007      	add	sp, #28
 8018c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c38:	2401b550 	.word	0x2401b550

08018c3c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c40:	b085      	sub	sp, #20
 8018c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018c46:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018c48:	9203      	str	r2, [sp, #12]
 8018c4a:	6860      	ldr	r0, [r4, #4]
 8018c4c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018c50:	9100      	str	r1, [sp, #0]
 8018c52:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8018c56:	fb00 2606 	mla	r6, r0, r6, r2
 8018c5a:	6822      	ldr	r2, [r4, #0]
 8018c5c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018c60:	4416      	add	r6, r2
 8018c62:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018c66:	3201      	adds	r2, #1
 8018c68:	f022 0201 	bic.w	r2, r2, #1
 8018c6c:	9201      	str	r2, [sp, #4]
 8018c6e:	f8dc 2000 	ldr.w	r2, [ip]
 8018c72:	9202      	str	r2, [sp, #8]
 8018c74:	9a00      	ldr	r2, [sp, #0]
 8018c76:	2a00      	cmp	r2, #0
 8018c78:	dc03      	bgt.n	8018c82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8018c7a:	9a03      	ldr	r2, [sp, #12]
 8018c7c:	2a00      	cmp	r2, #0
 8018c7e:	f340 8140 	ble.w	8018f02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018c82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018c84:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8018c88:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8018c8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018c8e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018c92:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	dd0e      	ble.n	8018cb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018c9a:	142a      	asrs	r2, r5, #16
 8018c9c:	d405      	bmi.n	8018caa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018c9e:	4572      	cmp	r2, lr
 8018ca0:	da03      	bge.n	8018caa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018ca2:	1422      	asrs	r2, r4, #16
 8018ca4:	d401      	bmi.n	8018caa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018ca6:	42ba      	cmp	r2, r7
 8018ca8:	db07      	blt.n	8018cba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018caa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018cac:	3b01      	subs	r3, #1
 8018cae:	3603      	adds	r6, #3
 8018cb0:	4415      	add	r5, r2
 8018cb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018cb4:	4414      	add	r4, r2
 8018cb6:	e7ee      	b.n	8018c96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018cb8:	d072      	beq.n	8018da0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018cba:	1e5a      	subs	r2, r3, #1
 8018cbc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8018cbe:	fb00 5002 	mla	r0, r0, r2, r5
 8018cc2:	1400      	asrs	r0, r0, #16
 8018cc4:	d463      	bmi.n	8018d8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018cc6:	4570      	cmp	r0, lr
 8018cc8:	da61      	bge.n	8018d8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018cca:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018ccc:	fb00 4202 	mla	r2, r0, r2, r4
 8018cd0:	1412      	asrs	r2, r2, #16
 8018cd2:	d45c      	bmi.n	8018d8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018cd4:	42ba      	cmp	r2, r7
 8018cd6:	da5a      	bge.n	8018d8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018cd8:	1cf0      	adds	r0, r6, #3
 8018cda:	469a      	mov	sl, r3
 8018cdc:	f1ba 0f00 	cmp.w	sl, #0
 8018ce0:	dd59      	ble.n	8018d96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018ce2:	142a      	asrs	r2, r5, #16
 8018ce4:	9901      	ldr	r1, [sp, #4]
 8018ce6:	1427      	asrs	r7, r4, #16
 8018ce8:	fb01 2707 	mla	r7, r1, r7, r2
 8018cec:	9902      	ldr	r1, [sp, #8]
 8018cee:	087a      	lsrs	r2, r7, #1
 8018cf0:	5c8a      	ldrb	r2, [r1, r2]
 8018cf2:	07f9      	lsls	r1, r7, #31
 8018cf4:	bf54      	ite	pl
 8018cf6:	f002 020f 	andpl.w	r2, r2, #15
 8018cfa:	1112      	asrmi	r2, r2, #4
 8018cfc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018d00:	b2d2      	uxtb	r2, r2
 8018d02:	2a00      	cmp	r2, #0
 8018d04:	d03b      	beq.n	8018d7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018d06:	4980      	ldr	r1, [pc, #512]	@ (8018f08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018d08:	2aff      	cmp	r2, #255	@ 0xff
 8018d0a:	680f      	ldr	r7, [r1, #0]
 8018d0c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8018d10:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018d14:	b2ff      	uxtb	r7, r7
 8018d16:	f000 80ed 	beq.w	8018ef4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8018d1a:	fa1f f882 	uxth.w	r8, r2
 8018d1e:	43d2      	mvns	r2, r2
 8018d20:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8018d24:	fb17 f708 	smulbb	r7, r7, r8
 8018d28:	b2d2      	uxtb	r2, r2
 8018d2a:	fb19 f908 	smulbb	r9, r9, r8
 8018d2e:	fb0e 7702 	mla	r7, lr, r2, r7
 8018d32:	fb1b f808 	smulbb	r8, fp, r8
 8018d36:	b2bf      	uxth	r7, r7
 8018d38:	f107 0e01 	add.w	lr, r7, #1
 8018d3c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8018d40:	123f      	asrs	r7, r7, #8
 8018d42:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018d46:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8018d4a:	fb07 9902 	mla	r9, r7, r2, r9
 8018d4e:	fa1f f989 	uxth.w	r9, r9
 8018d52:	f109 0701 	add.w	r7, r9, #1
 8018d56:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018d5a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8018d5e:	fb07 8802 	mla	r8, r7, r2, r8
 8018d62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018d66:	fa1f f888 	uxth.w	r8, r8
 8018d6a:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018d6e:	f108 0201 	add.w	r2, r8, #1
 8018d72:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8018d76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018d7a:	f800 8c01 	strb.w	r8, [r0, #-1]
 8018d7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018d80:	3003      	adds	r0, #3
 8018d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018d86:	4415      	add	r5, r2
 8018d88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018d8a:	4414      	add	r4, r2
 8018d8c:	e7a6      	b.n	8018cdc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018d8e:	2700      	movs	r7, #0
 8018d90:	1bda      	subs	r2, r3, r7
 8018d92:	2a00      	cmp	r2, #0
 8018d94:	dc40      	bgt.n	8018e18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8018d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d9e:	441e      	add	r6, r3
 8018da0:	9b00      	ldr	r3, [sp, #0]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f340 80ad 	ble.w	8018f02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8018da8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018dae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018db2:	eeb0 6a62 	vmov.f32	s12, s5
 8018db6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018dba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018dbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dc2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018dc6:	eeb0 6a43 	vmov.f32	s12, s6
 8018dca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018dce:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018dd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018dda:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018dde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018de2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018de6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018dea:	ee12 2a90 	vmov	r2, s5
 8018dee:	eef0 2a47 	vmov.f32	s5, s14
 8018df2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018df6:	ee13 2a10 	vmov	r2, s6
 8018dfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8018dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018dfe:	eeb0 3a67 	vmov.f32	s6, s15
 8018e02:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e06:	9312      	str	r3, [sp, #72]	@ 0x48
 8018e08:	9b00      	ldr	r3, [sp, #0]
 8018e0a:	9a03      	ldr	r2, [sp, #12]
 8018e0c:	3b01      	subs	r3, #1
 8018e0e:	9300      	str	r3, [sp, #0]
 8018e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018e12:	bf08      	it	eq
 8018e14:	4613      	moveq	r3, r2
 8018e16:	e72d      	b.n	8018c74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018e18:	1428      	asrs	r0, r5, #16
 8018e1a:	d45c      	bmi.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018e1c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8018e20:	4282      	cmp	r2, r0
 8018e22:	dd58      	ble.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018e24:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018e28:	d455      	bmi.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018e2a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018e2e:	4572      	cmp	r2, lr
 8018e30:	dd51      	ble.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018e32:	9a01      	ldr	r2, [sp, #4]
 8018e34:	9902      	ldr	r1, [sp, #8]
 8018e36:	fb0e 0002 	mla	r0, lr, r2, r0
 8018e3a:	0842      	lsrs	r2, r0, #1
 8018e3c:	07c0      	lsls	r0, r0, #31
 8018e3e:	5c8a      	ldrb	r2, [r1, r2]
 8018e40:	bf54      	ite	pl
 8018e42:	f002 020f 	andpl.w	r2, r2, #15
 8018e46:	1112      	asrmi	r2, r2, #4
 8018e48:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018e4c:	b2d2      	uxtb	r2, r2
 8018e4e:	2a00      	cmp	r2, #0
 8018e50:	d041      	beq.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018e52:	492d      	ldr	r1, [pc, #180]	@ (8018f08 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018e54:	2aff      	cmp	r2, #255	@ 0xff
 8018e56:	6808      	ldr	r0, [r1, #0]
 8018e58:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018e5c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018e60:	fa5f fe80 	uxtb.w	lr, r0
 8018e64:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8018e68:	d03b      	beq.n	8018ee2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8018e6a:	fa1f f982 	uxth.w	r9, r2
 8018e6e:	4438      	add	r0, r7
 8018e70:	43d2      	mvns	r2, r2
 8018e72:	f816 8000 	ldrb.w	r8, [r6, r0]
 8018e76:	fb1e fe09 	smulbb	lr, lr, r9
 8018e7a:	fb1a fa09 	smulbb	sl, sl, r9
 8018e7e:	b2d2      	uxtb	r2, r2
 8018e80:	fb1b f909 	smulbb	r9, fp, r9
 8018e84:	fb08 ee02 	mla	lr, r8, r2, lr
 8018e88:	fa1f fe8e 	uxth.w	lr, lr
 8018e8c:	f10e 0801 	add.w	r8, lr, #1
 8018e90:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8018e94:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018e98:	f806 e000 	strb.w	lr, [r6, r0]
 8018e9c:	4430      	add	r0, r6
 8018e9e:	f890 e001 	ldrb.w	lr, [r0, #1]
 8018ea2:	fb0e aa02 	mla	sl, lr, r2, sl
 8018ea6:	fa1f fa8a 	uxth.w	sl, sl
 8018eaa:	f10a 0e01 	add.w	lr, sl, #1
 8018eae:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8018eb2:	f890 e002 	ldrb.w	lr, [r0, #2]
 8018eb6:	fb0e 9902 	mla	r9, lr, r2, r9
 8018eba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018ebe:	fa1f f989 	uxth.w	r9, r9
 8018ec2:	f880 a001 	strb.w	sl, [r0, #1]
 8018ec6:	f109 0201 	add.w	r2, r9, #1
 8018eca:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018ece:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ed2:	f880 9002 	strb.w	r9, [r0, #2]
 8018ed6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018ed8:	3701      	adds	r7, #1
 8018eda:	4415      	add	r5, r2
 8018edc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018ede:	4414      	add	r4, r2
 8018ee0:	e756      	b.n	8018d90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018ee2:	4438      	add	r0, r7
 8018ee4:	f806 e000 	strb.w	lr, [r6, r0]
 8018ee8:	4430      	add	r0, r6
 8018eea:	f880 a001 	strb.w	sl, [r0, #1]
 8018eee:	f880 b002 	strb.w	fp, [r0, #2]
 8018ef2:	e7f0      	b.n	8018ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018ef4:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018ef8:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018efc:	f800 bc01 	strb.w	fp, [r0, #-1]
 8018f00:	e73d      	b.n	8018d7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018f02:	b005      	add	sp, #20
 8018f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f08:	2401b550 	.word	0x2401b550

08018f0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8018f0c:	4770      	bx	lr

08018f0e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8018f0e:	4770      	bx	lr

08018f10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8018f10:	4770      	bx	lr

08018f12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8018f12:	4770      	bx	lr

08018f14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8018f14:	4770      	bx	lr

08018f16 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8018f16:	4770      	bx	lr

08018f18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8018f18:	4770      	bx	lr

08018f1a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018f1a:	4770      	bx	lr

08018f1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018f1c:	4770      	bx	lr

08018f1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018f1e:	4770      	bx	lr

08018f20 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018f20:	4770      	bx	lr

08018f22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018f22:	4770      	bx	lr

08018f24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018f24:	4770      	bx	lr

08018f26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018f26:	4770      	bx	lr

08018f28 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018f28:	4770      	bx	lr

08018f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018f2a:	4770      	bx	lr

08018f2c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018f2c:	4770      	bx	lr

08018f2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018f2e:	4770      	bx	lr

08018f30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018f30:	4770      	bx	lr

08018f32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018f32:	4770      	bx	lr

08018f34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018f34:	4770      	bx	lr

08018f36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018f36:	4770      	bx	lr

08018f38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018f38:	4770      	bx	lr
	...

08018f3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f3e:	4606      	mov	r6, r0
 8018f40:	b087      	sub	sp, #28
 8018f42:	4615      	mov	r5, r2
 8018f44:	461f      	mov	r7, r3
 8018f46:	b353      	cbz	r3, 8018f9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018f48:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	dd26      	ble.n	8018f9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018f50:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	dd22      	ble.n	8018f9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018f58:	6808      	ldr	r0, [r1, #0]
 8018f5a:	aa04      	add	r2, sp, #16
 8018f5c:	6849      	ldr	r1, [r1, #4]
 8018f5e:	4c1b      	ldr	r4, [pc, #108]	@ (8018fcc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018f60:	c203      	stmia	r2!, {r0, r1}
 8018f62:	a804      	add	r0, sp, #16
 8018f64:	f7fb faf8 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f68:	6820      	ldr	r0, [r4, #0]
 8018f6a:	6803      	ldr	r3, [r0, #0]
 8018f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f6e:	4798      	blx	r3
 8018f70:	2fff      	cmp	r7, #255	@ 0xff
 8018f72:	d016      	beq.n	8018fa2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018f74:	f010 0f08 	tst.w	r0, #8
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	d015      	beq.n	8018fa8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8018f7c:	2400      	movs	r4, #0
 8018f7e:	6801      	ldr	r1, [r0, #0]
 8018f80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018f88:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8018f8c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018f90:	9401      	str	r4, [sp, #4]
 8018f92:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018f96:	9400      	str	r4, [sp, #0]
 8018f98:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8018f9a:	4629      	mov	r1, r5
 8018f9c:	47a0      	blx	r4
 8018f9e:	b007      	add	sp, #28
 8018fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa2:	f010 0f02 	tst.w	r0, #2
 8018fa6:	e7e7      	b.n	8018f78 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8018fa8:	6803      	ldr	r3, [r0, #0]
 8018faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fac:	4798      	blx	r3
 8018fae:	4b08      	ldr	r3, [pc, #32]	@ (8018fd0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8018fb0:	4601      	mov	r1, r0
 8018fb2:	4630      	mov	r0, r6
 8018fb4:	881a      	ldrh	r2, [r3, #0]
 8018fb6:	6833      	ldr	r3, [r6, #0]
 8018fb8:	e9cd 5700 	strd	r5, r7, [sp]
 8018fbc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018fbe:	ab04      	add	r3, sp, #16
 8018fc0:	47a8      	blx	r5
 8018fc2:	6820      	ldr	r0, [r4, #0]
 8018fc4:	6803      	ldr	r3, [r0, #0]
 8018fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fc8:	4798      	blx	r3
 8018fca:	e7e8      	b.n	8018f9e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018fcc:	2401b548 	.word	0x2401b548
 8018fd0:	2401b542 	.word	0x2401b542

08018fd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8018fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fd8:	b08b      	sub	sp, #44	@ 0x2c
 8018fda:	460d      	mov	r5, r1
 8018fdc:	4616      	mov	r6, r2
 8018fde:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8018fe2:	f1b8 0f00 	cmp.w	r8, #0
 8018fe6:	d047      	beq.n	8019078 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018fe8:	6810      	ldr	r0, [r2, #0]
 8018fea:	ac06      	add	r4, sp, #24
 8018fec:	6851      	ldr	r1, [r2, #4]
 8018fee:	4f51      	ldr	r7, [pc, #324]	@ (8019134 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8018ff0:	c403      	stmia	r4!, {r0, r1}
 8018ff2:	6818      	ldr	r0, [r3, #0]
 8018ff4:	ac08      	add	r4, sp, #32
 8018ff6:	6859      	ldr	r1, [r3, #4]
 8018ff8:	c403      	stmia	r4!, {r0, r1}
 8018ffa:	a806      	add	r0, sp, #24
 8018ffc:	f7fb faac 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019000:	4631      	mov	r1, r6
 8019002:	a808      	add	r0, sp, #32
 8019004:	f7fb fad0 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019008:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801900c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019010:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019014:	6838      	ldr	r0, [r7, #0]
 8019016:	fb11 2103 	smlabb	r1, r1, r3, r2
 801901a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801901e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8019022:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019026:	440d      	add	r5, r1
 8019028:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801902c:	440a      	add	r2, r1
 801902e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019032:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019036:	4413      	add	r3, r2
 8019038:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801903c:	6803      	ldr	r3, [r0, #0]
 801903e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019040:	4798      	blx	r3
 8019042:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019046:	d01a      	beq.n	801907e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019048:	f010 0f04 	tst.w	r0, #4
 801904c:	6838      	ldr	r0, [r7, #0]
 801904e:	d019      	beq.n	8019084 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019050:	2100      	movs	r1, #0
 8019052:	6807      	ldr	r7, [r0, #0]
 8019054:	b2a4      	uxth	r4, r4
 8019056:	f8cd 800c 	str.w	r8, [sp, #12]
 801905a:	b2b6      	uxth	r6, r6
 801905c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019060:	9401      	str	r4, [sp, #4]
 8019062:	9600      	str	r6, [sp, #0]
 8019064:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019068:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801906c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019070:	9102      	str	r1, [sp, #8]
 8019072:	4629      	mov	r1, r5
 8019074:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8019076:	47a0      	blx	r4
 8019078:	b00b      	add	sp, #44	@ 0x2c
 801907a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801907e:	f010 0f01 	tst.w	r0, #1
 8019082:	e7e3      	b.n	801904c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019084:	6803      	ldr	r3, [r0, #0]
 8019086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019088:	4798      	blx	r3
 801908a:	4a2b      	ldr	r2, [pc, #172]	@ (8019138 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801908c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8019090:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019094:	8813      	ldrh	r3, [r2, #0]
 8019096:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801909a:	fb03 f404 	mul.w	r4, r3, r4
 801909e:	fb03 c101 	mla	r1, r3, r1, ip
 80190a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80190a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80190aa:	4408      	add	r0, r1
 80190ac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80190b0:	4404      	add	r4, r0
 80190b2:	d02e      	beq.n	8019112 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80190b4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80190b8:	1b9b      	subs	r3, r3, r6
 80190ba:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 80190be:	1b96      	subs	r6, r2, r6
 80190c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80190c8:	42a0      	cmp	r0, r4
 80190ca:	d22d      	bcs.n	8019128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80190cc:	eb00 0e01 	add.w	lr, r0, r1
 80190d0:	4570      	cmp	r0, lr
 80190d2:	d210      	bcs.n	80190f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80190d4:	f890 9000 	ldrb.w	r9, [r0]
 80190d8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80190dc:	fb19 f90c 	smulbb	r9, r9, ip
 80190e0:	fb02 9208 	mla	r2, r2, r8, r9
 80190e4:	b292      	uxth	r2, r2
 80190e6:	f102 0901 	add.w	r9, r2, #1
 80190ea:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80190ee:	1212      	asrs	r2, r2, #8
 80190f0:	f800 2b01 	strb.w	r2, [r0], #1
 80190f4:	e7ec      	b.n	80190d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80190f6:	4418      	add	r0, r3
 80190f8:	4435      	add	r5, r6
 80190fa:	e7e5      	b.n	80190c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80190fc:	8813      	ldrh	r3, [r2, #0]
 80190fe:	1b9b      	subs	r3, r3, r6
 8019100:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019104:	4418      	add	r0, r3
 8019106:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801910a:	1b9b      	subs	r3, r3, r6
 801910c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019110:	441d      	add	r5, r3
 8019112:	42a0      	cmp	r0, r4
 8019114:	d208      	bcs.n	8019128 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019116:	eb00 0c01 	add.w	ip, r0, r1
 801911a:	4560      	cmp	r0, ip
 801911c:	d2ee      	bcs.n	80190fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801911e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019122:	f800 3b01 	strb.w	r3, [r0], #1
 8019126:	e7f8      	b.n	801911a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8019128:	6838      	ldr	r0, [r7, #0]
 801912a:	6803      	ldr	r3, [r0, #0]
 801912c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801912e:	4798      	blx	r3
 8019130:	e7a2      	b.n	8019078 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019132:	bf00      	nop
 8019134:	2401b548 	.word	0x2401b548
 8019138:	2401b542 	.word	0x2401b542

0801913c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801913c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801913e:	2300      	movs	r3, #0
 8019140:	b085      	sub	sp, #20
 8019142:	9300      	str	r3, [sp, #0]
 8019144:	4b41      	ldr	r3, [pc, #260]	@ (801924c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d136      	bne.n	80191ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801914c:	4a40      	ldr	r2, [pc, #256]	@ (8019250 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801914e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019152:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d131      	bne.n	80191be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801915a:	4b3e      	ldr	r3, [pc, #248]	@ (8019254 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801915c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019160:	ac02      	add	r4, sp, #8
 8019162:	6808      	ldr	r0, [r1, #0]
 8019164:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019168:	ab02      	add	r3, sp, #8
 801916a:	6849      	ldr	r1, [r1, #4]
 801916c:	4d3a      	ldr	r5, [pc, #232]	@ (8019258 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801916e:	c303      	stmia	r3!, {r0, r1}
 8019170:	4669      	mov	r1, sp
 8019172:	4620      	mov	r0, r4
 8019174:	f7fb fa18 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019178:	4668      	mov	r0, sp
 801917a:	f7fb f9ed 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801917e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019182:	f8bd 2000 	ldrh.w	r2, [sp]
 8019186:	462e      	mov	r6, r5
 8019188:	6828      	ldr	r0, [r5, #0]
 801918a:	4413      	add	r3, r2
 801918c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019190:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019194:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019198:	4413      	add	r3, r2
 801919a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801919e:	6803      	ldr	r3, [r0, #0]
 80191a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191a2:	4798      	blx	r3
 80191a4:	f010 0f01 	tst.w	r0, #1
 80191a8:	d00b      	beq.n	80191c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80191aa:	6828      	ldr	r0, [r5, #0]
 80191ac:	6803      	ldr	r3, [r0, #0]
 80191ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80191b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80191b4:	4798      	blx	r3
 80191b6:	b005      	add	sp, #20
 80191b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ba:	4a26      	ldr	r2, [pc, #152]	@ (8019254 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80191bc:	e7c7      	b.n	801914e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80191be:	4b24      	ldr	r3, [pc, #144]	@ (8019250 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80191c0:	e7cc      	b.n	801915c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80191c2:	6830      	ldr	r0, [r6, #0]
 80191c4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80191c8:	6803      	ldr	r3, [r0, #0]
 80191ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80191ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80191d0:	4798      	blx	r3
 80191d2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80191d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80191da:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80191de:	fb14 3402 	smlabb	r4, r4, r2, r3
 80191e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80191e6:	4404      	add	r4, r0
 80191e8:	6830      	ldr	r0, [r6, #0]
 80191ea:	6803      	ldr	r3, [r0, #0]
 80191ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191ee:	4798      	blx	r3
 80191f0:	4917      	ldr	r1, [pc, #92]	@ (8019250 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80191f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80191f6:	880b      	ldrh	r3, [r1, #0]
 80191f8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80191fc:	fb03 c202 	mla	r2, r3, r2, ip
 8019200:	437b      	muls	r3, r7
 8019202:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8019206:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801920a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801920e:	4410      	add	r0, r2
 8019210:	18c2      	adds	r2, r0, r3
 8019212:	4290      	cmp	r0, r2
 8019214:	d214      	bcs.n	8019240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019216:	eb00 0c07 	add.w	ip, r0, r7
 801921a:	4560      	cmp	r0, ip
 801921c:	d204      	bcs.n	8019228 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801921e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019222:	f800 3b01 	strb.w	r3, [r0], #1
 8019226:	e7f8      	b.n	801921a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019228:	880b      	ldrh	r3, [r1, #0]
 801922a:	1b5b      	subs	r3, r3, r5
 801922c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019230:	4418      	add	r0, r3
 8019232:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019236:	1b5b      	subs	r3, r3, r5
 8019238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801923c:	441c      	add	r4, r3
 801923e:	e7e8      	b.n	8019212 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019240:	6830      	ldr	r0, [r6, #0]
 8019242:	6803      	ldr	r3, [r0, #0]
 8019244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019246:	4798      	blx	r3
 8019248:	e7b5      	b.n	80191b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801924a:	bf00      	nop
 801924c:	2401b540 	.word	0x2401b540
 8019250:	2401b542 	.word	0x2401b542
 8019254:	2401b544 	.word	0x2401b544
 8019258:	2401b548 	.word	0x2401b548

0801925c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019260:	b08f      	sub	sp, #60	@ 0x3c
 8019262:	461c      	mov	r4, r3
 8019264:	9203      	str	r2, [sp, #12]
 8019266:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801926a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801926c:	6820      	ldr	r0, [r4, #0]
 801926e:	9100      	str	r1, [sp, #0]
 8019270:	9204      	str	r2, [sp, #16]
 8019272:	aa0a      	add	r2, sp, #40	@ 0x28
 8019274:	6861      	ldr	r1, [r4, #4]
 8019276:	c203      	stmia	r2!, {r0, r1}
 8019278:	6818      	ldr	r0, [r3, #0]
 801927a:	aa0c      	add	r2, sp, #48	@ 0x30
 801927c:	6859      	ldr	r1, [r3, #4]
 801927e:	c203      	stmia	r2!, {r0, r1}
 8019280:	a80a      	add	r0, sp, #40	@ 0x28
 8019282:	f7fb f969 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019286:	4621      	mov	r1, r4
 8019288:	a80c      	add	r0, sp, #48	@ 0x30
 801928a:	f7fb f98d 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801928e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8019292:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019296:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801929a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801929e:	bfdb      	ittet	le
 80192a0:	b2b3      	uxthle	r3, r6
 80192a2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80192a6:	2301      	movgt	r3, #1
 80192a8:	fb92 f3f3 	sdivle	r3, r2, r3
 80192ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80192b0:	441d      	add	r5, r3
 80192b2:	fb92 f1f3 	sdiv	r1, r2, r3
 80192b6:	fa1f fc81 	uxth.w	ip, r1
 80192ba:	3d01      	subs	r5, #1
 80192bc:	fb0c 2413 	mls	r4, ip, r3, r2
 80192c0:	4661      	mov	r1, ip
 80192c2:	fb14 f406 	smulbb	r4, r4, r6
 80192c6:	4404      	add	r4, r0
 80192c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80192cc:	b2a4      	uxth	r4, r4
 80192ce:	b131      	cbz	r1, 80192de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80192d0:	9b03      	ldr	r3, [sp, #12]
 80192d2:	9900      	ldr	r1, [sp, #0]
 80192d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80192d8:	ba1b      	rev	r3, r3
 80192da:	4419      	add	r1, r3
 80192dc:	9100      	str	r1, [sp, #0]
 80192de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80192e2:	b2ad      	uxth	r5, r5
 80192e4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80192e8:	4418      	add	r0, r3
 80192ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80192ee:	00ad      	lsls	r5, r5, #2
 80192f0:	441a      	add	r2, r3
 80192f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80192f6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80192fa:	9301      	str	r3, [sp, #4]
 80192fc:	4b79      	ldr	r3, [pc, #484]	@ (80194e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80192fe:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019302:	6818      	ldr	r0, [r3, #0]
 8019304:	6803      	ldr	r3, [r0, #0]
 8019306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019308:	4798      	blx	r3
 801930a:	4a77      	ldr	r2, [pc, #476]	@ (80194e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801930c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019310:	2c00      	cmp	r4, #0
 8019312:	8813      	ldrh	r3, [r2, #0]
 8019314:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019318:	9209      	str	r2, [sp, #36]	@ 0x24
 801931a:	fb03 c101 	mla	r1, r3, r1, ip
 801931e:	fb06 f303 	mul.w	r3, r6, r3
 8019322:	bf18      	it	ne
 8019324:	2600      	movne	r6, #0
 8019326:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801932a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801932e:	4408      	add	r0, r1
 8019330:	4403      	add	r3, r0
 8019332:	9306      	str	r3, [sp, #24]
 8019334:	f105 0304 	add.w	r3, r5, #4
 8019338:	9305      	str	r3, [sp, #20]
 801933a:	9b01      	ldr	r3, [sp, #4]
 801933c:	bf08      	it	eq
 801933e:	461e      	moveq	r6, r3
 8019340:	2300      	movs	r3, #0
 8019342:	b2b6      	uxth	r6, r6
 8019344:	9302      	str	r3, [sp, #8]
 8019346:	9a06      	ldr	r2, [sp, #24]
 8019348:	4290      	cmp	r0, r2
 801934a:	f080 80c2 	bcs.w	80194d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801934e:	b963      	cbnz	r3, 801936a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019350:	9b00      	ldr	r3, [sp, #0]
 8019352:	781a      	ldrb	r2, [r3, #0]
 8019354:	0993      	lsrs	r3, r2, #6
 8019356:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801935a:	9202      	str	r2, [sp, #8]
 801935c:	1e5a      	subs	r2, r3, #1
 801935e:	2a02      	cmp	r2, #2
 8019360:	d815      	bhi.n	801938e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019362:	9a00      	ldr	r2, [sp, #0]
 8019364:	b29b      	uxth	r3, r3
 8019366:	3201      	adds	r2, #1
 8019368:	9200      	str	r2, [sp, #0]
 801936a:	b1b4      	cbz	r4, 801939a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801936c:	429c      	cmp	r4, r3
 801936e:	bf91      	iteee	ls
 8019370:	1b1c      	subls	r4, r3, r4
 8019372:	1ae4      	subhi	r4, r4, r3
 8019374:	4635      	movhi	r5, r6
 8019376:	f04f 0e00 	movhi.w	lr, #0
 801937a:	bf9b      	ittet	ls
 801937c:	fa1f fe84 	uxthls.w	lr, r4
 8019380:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019384:	b2a4      	uxthhi	r4, r4
 8019386:	2400      	movls	r4, #0
 8019388:	4673      	mov	r3, lr
 801938a:	462e      	mov	r6, r5
 801938c:	e7db      	b.n	8019346 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801938e:	9a00      	ldr	r2, [sp, #0]
 8019390:	9b00      	ldr	r3, [sp, #0]
 8019392:	3202      	adds	r2, #2
 8019394:	785b      	ldrb	r3, [r3, #1]
 8019396:	9200      	str	r2, [sp, #0]
 8019398:	e7e7      	b.n	801936a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801939a:	2204      	movs	r2, #4
 801939c:	9905      	ldr	r1, [sp, #20]
 801939e:	429e      	cmp	r6, r3
 80193a0:	4615      	mov	r5, r2
 80193a2:	9a02      	ldr	r2, [sp, #8]
 80193a4:	bf94      	ite	ls
 80193a6:	eba3 0e06 	subls.w	lr, r3, r6
 80193aa:	46a6      	movhi	lr, r4
 80193ac:	fb15 1202 	smlabb	r2, r5, r2, r1
 80193b0:	9903      	ldr	r1, [sp, #12]
 80193b2:	bf8c      	ite	hi
 80193b4:	1af5      	subhi	r5, r6, r3
 80193b6:	fa1f fe8e 	uxthls.w	lr, lr
 80193ba:	f851 c002 	ldr.w	ip, [r1, r2]
 80193be:	bf9a      	itte	ls
 80193c0:	4625      	movls	r5, r4
 80193c2:	4632      	movls	r2, r6
 80193c4:	b2ad      	uxthhi	r5, r5
 80193c6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80193ca:	bf88      	it	hi
 80193cc:	461a      	movhi	r2, r3
 80193ce:	b179      	cbz	r1, 80193f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80193d0:	29ff      	cmp	r1, #255	@ 0xff
 80193d2:	fa5f f98c 	uxtb.w	r9, ip
 80193d6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80193da:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80193de:	d126      	bne.n	801942e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80193e0:	9f04      	ldr	r7, [sp, #16]
 80193e2:	2fff      	cmp	r7, #255	@ 0xff
 80193e4:	d123      	bne.n	801942e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80193e6:	4682      	mov	sl, r0
 80193e8:	4611      	mov	r1, r2
 80193ea:	f10a 0a03 	add.w	sl, sl, #3
 80193ee:	b9a9      	cbnz	r1, 801941c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80193f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80193f4:	429e      	cmp	r6, r3
 80193f6:	4410      	add	r0, r2
 80193f8:	d8c6      	bhi.n	8019388 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80193fa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80193fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019404:	1b64      	subs	r4, r4, r5
 8019406:	9a01      	ldr	r2, [sp, #4]
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	b2a4      	uxth	r4, r4
 801940c:	1a9b      	subs	r3, r3, r2
 801940e:	2c00      	cmp	r4, #0
 8019410:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019414:	bf18      	it	ne
 8019416:	2500      	movne	r5, #0
 8019418:	4418      	add	r0, r3
 801941a:	e7b5      	b.n	8019388 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801941c:	3901      	subs	r1, #1
 801941e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8019422:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8019426:	f80a cc01 	strb.w	ip, [sl, #-1]
 801942a:	b289      	uxth	r1, r1
 801942c:	e7dd      	b.n	80193ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801942e:	9f04      	ldr	r7, [sp, #16]
 8019430:	fb07 fa01 	mul.w	sl, r7, r1
 8019434:	f10a 0101 	add.w	r1, sl, #1
 8019438:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801943c:	1209      	asrs	r1, r1, #8
 801943e:	ea6f 0a01 	mvn.w	sl, r1
 8019442:	b289      	uxth	r1, r1
 8019444:	fb19 f901 	smulbb	r9, r9, r1
 8019448:	fa5f fa8a 	uxtb.w	sl, sl
 801944c:	fb18 f801 	smulbb	r8, r8, r1
 8019450:	fb1c f101 	smulbb	r1, ip, r1
 8019454:	fa1f f789 	uxth.w	r7, r9
 8019458:	4684      	mov	ip, r0
 801945a:	4691      	mov	r9, r2
 801945c:	9707      	str	r7, [sp, #28]
 801945e:	b289      	uxth	r1, r1
 8019460:	fa1f f788 	uxth.w	r7, r8
 8019464:	9708      	str	r7, [sp, #32]
 8019466:	f10c 0c03 	add.w	ip, ip, #3
 801946a:	f1b9 0f00 	cmp.w	r9, #0
 801946e:	d0bf      	beq.n	80193f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019470:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019474:	f109 39ff 	add.w	r9, r9, #4294967295
 8019478:	9f07      	ldr	r7, [sp, #28]
 801947a:	fa1f f989 	uxth.w	r9, r9
 801947e:	fb08 780a 	mla	r8, r8, sl, r7
 8019482:	9f08      	ldr	r7, [sp, #32]
 8019484:	fa1f f888 	uxth.w	r8, r8
 8019488:	f108 0b01 	add.w	fp, r8, #1
 801948c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019490:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019494:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019498:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801949c:	fb08 780a 	mla	r8, r8, sl, r7
 80194a0:	fa1f f888 	uxth.w	r8, r8
 80194a4:	f108 0b01 	add.w	fp, r8, #1
 80194a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80194ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194b0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80194b4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80194b8:	fb08 180a 	mla	r8, r8, sl, r1
 80194bc:	fa1f f888 	uxth.w	r8, r8
 80194c0:	f108 0b01 	add.w	fp, r8, #1
 80194c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80194c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194cc:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80194d0:	e7c9      	b.n	8019466 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80194d2:	4b04      	ldr	r3, [pc, #16]	@ (80194e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80194d4:	6818      	ldr	r0, [r3, #0]
 80194d6:	6803      	ldr	r3, [r0, #0]
 80194d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80194da:	4798      	blx	r3
 80194dc:	b00f      	add	sp, #60	@ 0x3c
 80194de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e2:	bf00      	nop
 80194e4:	2401b548 	.word	0x2401b548
 80194e8:	2401b542 	.word	0x2401b542

080194ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80194ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f0:	b089      	sub	sp, #36	@ 0x24
 80194f2:	4607      	mov	r7, r0
 80194f4:	4689      	mov	r9, r1
 80194f6:	4692      	mov	sl, r2
 80194f8:	ac08      	add	r4, sp, #32
 80194fa:	461e      	mov	r6, r3
 80194fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019500:	4620      	mov	r0, r4
 8019502:	f7fd ffa5 	bl	8017450 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019506:	683b      	ldr	r3, [r7, #0]
 8019508:	4605      	mov	r5, r0
 801950a:	4620      	mov	r0, r4
 801950c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019510:	f7fd fee4 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019514:	4683      	mov	fp, r0
 8019516:	4620      	mov	r0, r4
 8019518:	f7fd ff14 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801951c:	4653      	mov	r3, sl
 801951e:	464a      	mov	r2, r9
 8019520:	4639      	mov	r1, r7
 8019522:	9500      	str	r5, [sp, #0]
 8019524:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019528:	a806      	add	r0, sp, #24
 801952a:	47c0      	blx	r8
 801952c:	a906      	add	r1, sp, #24
 801952e:	4630      	mov	r0, r6
 8019530:	f7fd fdb8 	bl	80170a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019534:	4628      	mov	r0, r5
 8019536:	b009      	add	sp, #36	@ 0x24
 8019538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801953c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801953c:	b510      	push	{r4, lr}
 801953e:	4604      	mov	r4, r0
 8019540:	2104      	movs	r1, #4
 8019542:	f007 f94a 	bl	80207da <_ZdlPvj>
 8019546:	4620      	mov	r0, r4
 8019548:	bd10      	pop	{r4, pc}

0801954a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801954a:	b510      	push	{r4, lr}
 801954c:	4604      	mov	r4, r0
 801954e:	2104      	movs	r1, #4
 8019550:	f007 f943 	bl	80207da <_ZdlPvj>
 8019554:	4620      	mov	r0, r4
 8019556:	bd10      	pop	{r4, pc}

08019558 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019558:	b510      	push	{r4, lr}
 801955a:	4604      	mov	r4, r0
 801955c:	f640 0144 	movw	r1, #2116	@ 0x844
 8019560:	f007 f93b 	bl	80207da <_ZdlPvj>
 8019564:	4620      	mov	r0, r4
 8019566:	bd10      	pop	{r4, pc}

08019568 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019568:	b510      	push	{r4, lr}
 801956a:	4604      	mov	r4, r0
 801956c:	2104      	movs	r1, #4
 801956e:	f007 f934 	bl	80207da <_ZdlPvj>
 8019572:	4620      	mov	r0, r4
 8019574:	bd10      	pop	{r4, pc}

08019576 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019576:	b510      	push	{r4, lr}
 8019578:	4604      	mov	r4, r0
 801957a:	2104      	movs	r1, #4
 801957c:	f007 f92d 	bl	80207da <_ZdlPvj>
 8019580:	4620      	mov	r0, r4
 8019582:	bd10      	pop	{r4, pc}

08019584 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019584:	b510      	push	{r4, lr}
 8019586:	4604      	mov	r4, r0
 8019588:	2104      	movs	r1, #4
 801958a:	f007 f926 	bl	80207da <_ZdlPvj>
 801958e:	4620      	mov	r0, r4
 8019590:	bd10      	pop	{r4, pc}

08019592 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019592:	b510      	push	{r4, lr}
 8019594:	4604      	mov	r4, r0
 8019596:	2104      	movs	r1, #4
 8019598:	f007 f91f 	bl	80207da <_ZdlPvj>
 801959c:	4620      	mov	r0, r4
 801959e:	bd10      	pop	{r4, pc}

080195a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80195a0:	b510      	push	{r4, lr}
 80195a2:	4604      	mov	r4, r0
 80195a4:	2104      	movs	r1, #4
 80195a6:	f007 f918 	bl	80207da <_ZdlPvj>
 80195aa:	4620      	mov	r0, r4
 80195ac:	bd10      	pop	{r4, pc}

080195ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80195ae:	b510      	push	{r4, lr}
 80195b0:	4604      	mov	r4, r0
 80195b2:	2104      	movs	r1, #4
 80195b4:	f007 f911 	bl	80207da <_ZdlPvj>
 80195b8:	4620      	mov	r0, r4
 80195ba:	bd10      	pop	{r4, pc}

080195bc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80195bc:	b510      	push	{r4, lr}
 80195be:	4604      	mov	r4, r0
 80195c0:	2104      	movs	r1, #4
 80195c2:	f007 f90a 	bl	80207da <_ZdlPvj>
 80195c6:	4620      	mov	r0, r4
 80195c8:	bd10      	pop	{r4, pc}

080195ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80195ca:	b510      	push	{r4, lr}
 80195cc:	4604      	mov	r4, r0
 80195ce:	2104      	movs	r1, #4
 80195d0:	f007 f903 	bl	80207da <_ZdlPvj>
 80195d4:	4620      	mov	r0, r4
 80195d6:	bd10      	pop	{r4, pc}

080195d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80195d8:	b510      	push	{r4, lr}
 80195da:	4604      	mov	r4, r0
 80195dc:	2104      	movs	r1, #4
 80195de:	f007 f8fc 	bl	80207da <_ZdlPvj>
 80195e2:	4620      	mov	r0, r4
 80195e4:	bd10      	pop	{r4, pc}

080195e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80195e6:	b510      	push	{r4, lr}
 80195e8:	4604      	mov	r4, r0
 80195ea:	2104      	movs	r1, #4
 80195ec:	f007 f8f5 	bl	80207da <_ZdlPvj>
 80195f0:	4620      	mov	r0, r4
 80195f2:	bd10      	pop	{r4, pc}

080195f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80195f4:	b510      	push	{r4, lr}
 80195f6:	4604      	mov	r4, r0
 80195f8:	2104      	movs	r1, #4
 80195fa:	f007 f8ee 	bl	80207da <_ZdlPvj>
 80195fe:	4620      	mov	r0, r4
 8019600:	bd10      	pop	{r4, pc}

08019602 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019602:	b510      	push	{r4, lr}
 8019604:	4604      	mov	r4, r0
 8019606:	2104      	movs	r1, #4
 8019608:	f007 f8e7 	bl	80207da <_ZdlPvj>
 801960c:	4620      	mov	r0, r4
 801960e:	bd10      	pop	{r4, pc}

08019610 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019610:	b510      	push	{r4, lr}
 8019612:	4604      	mov	r4, r0
 8019614:	2104      	movs	r1, #4
 8019616:	f007 f8e0 	bl	80207da <_ZdlPvj>
 801961a:	4620      	mov	r0, r4
 801961c:	bd10      	pop	{r4, pc}

0801961e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801961e:	b510      	push	{r4, lr}
 8019620:	4604      	mov	r4, r0
 8019622:	2104      	movs	r1, #4
 8019624:	f007 f8d9 	bl	80207da <_ZdlPvj>
 8019628:	4620      	mov	r0, r4
 801962a:	bd10      	pop	{r4, pc}

0801962c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801962c:	b510      	push	{r4, lr}
 801962e:	4604      	mov	r4, r0
 8019630:	2104      	movs	r1, #4
 8019632:	f007 f8d2 	bl	80207da <_ZdlPvj>
 8019636:	4620      	mov	r0, r4
 8019638:	bd10      	pop	{r4, pc}

0801963a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801963a:	b510      	push	{r4, lr}
 801963c:	4604      	mov	r4, r0
 801963e:	2104      	movs	r1, #4
 8019640:	f007 f8cb 	bl	80207da <_ZdlPvj>
 8019644:	4620      	mov	r0, r4
 8019646:	bd10      	pop	{r4, pc}

08019648 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8019648:	b510      	push	{r4, lr}
 801964a:	4604      	mov	r4, r0
 801964c:	2104      	movs	r1, #4
 801964e:	f007 f8c4 	bl	80207da <_ZdlPvj>
 8019652:	4620      	mov	r0, r4
 8019654:	bd10      	pop	{r4, pc}

08019656 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8019656:	b510      	push	{r4, lr}
 8019658:	4604      	mov	r4, r0
 801965a:	2104      	movs	r1, #4
 801965c:	f007 f8bd 	bl	80207da <_ZdlPvj>
 8019660:	4620      	mov	r0, r4
 8019662:	bd10      	pop	{r4, pc}

08019664 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8019664:	b510      	push	{r4, lr}
 8019666:	4604      	mov	r4, r0
 8019668:	2104      	movs	r1, #4
 801966a:	f007 f8b6 	bl	80207da <_ZdlPvj>
 801966e:	4620      	mov	r0, r4
 8019670:	bd10      	pop	{r4, pc}

08019672 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8019672:	b510      	push	{r4, lr}
 8019674:	4604      	mov	r4, r0
 8019676:	2104      	movs	r1, #4
 8019678:	f007 f8af 	bl	80207da <_ZdlPvj>
 801967c:	4620      	mov	r0, r4
 801967e:	bd10      	pop	{r4, pc}

08019680 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8019680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019684:	b08f      	sub	sp, #60	@ 0x3c
 8019686:	461c      	mov	r4, r3
 8019688:	460e      	mov	r6, r1
 801968a:	9206      	str	r2, [sp, #24]
 801968c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019690:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019692:	9202      	str	r2, [sp, #8]
 8019694:	2a00      	cmp	r2, #0
 8019696:	f000 8128 	beq.w	80198ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801969a:	6820      	ldr	r0, [r4, #0]
 801969c:	aa0a      	add	r2, sp, #40	@ 0x28
 801969e:	6861      	ldr	r1, [r4, #4]
 80196a0:	c203      	stmia	r2!, {r0, r1}
 80196a2:	6818      	ldr	r0, [r3, #0]
 80196a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80196a6:	6859      	ldr	r1, [r3, #4]
 80196a8:	c203      	stmia	r2!, {r0, r1}
 80196aa:	a80a      	add	r0, sp, #40	@ 0x28
 80196ac:	f7fa ff54 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80196b0:	4621      	mov	r1, r4
 80196b2:	a80c      	add	r0, sp, #48	@ 0x30
 80196b4:	f7fa ff78 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80196b8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80196bc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80196c0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80196c4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80196c8:	bfdb      	ittet	le
 80196ca:	b2bb      	uxthle	r3, r7
 80196cc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80196d0:	2301      	movgt	r3, #1
 80196d2:	fb92 f3f3 	sdivle	r3, r2, r3
 80196d6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80196da:	441d      	add	r5, r3
 80196dc:	fb92 f1f3 	sdiv	r1, r2, r3
 80196e0:	fa1f fc81 	uxth.w	ip, r1
 80196e4:	3d01      	subs	r5, #1
 80196e6:	fb0c 2413 	mls	r4, ip, r3, r2
 80196ea:	4661      	mov	r1, ip
 80196ec:	fb14 f407 	smulbb	r4, r4, r7
 80196f0:	4404      	add	r4, r0
 80196f2:	fb95 f5f3 	sdiv	r5, r5, r3
 80196f6:	b2a4      	uxth	r4, r4
 80196f8:	b121      	cbz	r1, 8019704 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80196fa:	9b06      	ldr	r3, [sp, #24]
 80196fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019700:	ba1b      	rev	r3, r3
 8019702:	441e      	add	r6, r3
 8019704:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019708:	b2ad      	uxth	r5, r5
 801970a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801970e:	4418      	add	r0, r3
 8019710:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019714:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8019718:	00ad      	lsls	r5, r5, #2
 801971a:	441a      	add	r2, r3
 801971c:	4b74      	ldr	r3, [pc, #464]	@ (80198f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801971e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019722:	6818      	ldr	r0, [r3, #0]
 8019724:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019728:	6803      	ldr	r3, [r0, #0]
 801972a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801972c:	4798      	blx	r3
 801972e:	4a71      	ldr	r2, [pc, #452]	@ (80198f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8019730:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019734:	2c00      	cmp	r4, #0
 8019736:	8813      	ldrh	r3, [r2, #0]
 8019738:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801973c:	9209      	str	r2, [sp, #36]	@ 0x24
 801973e:	fb03 c101 	mla	r1, r3, r1, ip
 8019742:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8019746:	fb03 f307 	mul.w	r3, r3, r7
 801974a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801974e:	9204      	str	r2, [sp, #16]
 8019750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019754:	9a02      	ldr	r2, [sp, #8]
 8019756:	4408      	add	r0, r1
 8019758:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801975c:	4403      	add	r3, r0
 801975e:	b292      	uxth	r2, r2
 8019760:	9307      	str	r3, [sp, #28]
 8019762:	f105 0304 	add.w	r3, r5, #4
 8019766:	bf0c      	ite	eq
 8019768:	4645      	moveq	r5, r8
 801976a:	2500      	movne	r5, #0
 801976c:	9308      	str	r3, [sp, #32]
 801976e:	2300      	movs	r3, #0
 8019770:	b2ad      	uxth	r5, r5
 8019772:	9205      	str	r2, [sp, #20]
 8019774:	9303      	str	r3, [sp, #12]
 8019776:	9a07      	ldr	r2, [sp, #28]
 8019778:	4282      	cmp	r2, r0
 801977a:	f240 80b1 	bls.w	80198e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801977e:	b95b      	cbnz	r3, 8019798 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8019780:	7832      	ldrb	r2, [r6, #0]
 8019782:	0993      	lsrs	r3, r2, #6
 8019784:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019788:	9203      	str	r2, [sp, #12]
 801978a:	1e5a      	subs	r2, r3, #1
 801978c:	2a02      	cmp	r2, #2
 801978e:	bf8d      	iteet	hi
 8019790:	7873      	ldrbhi	r3, [r6, #1]
 8019792:	3601      	addls	r6, #1
 8019794:	b29b      	uxthls	r3, r3
 8019796:	3602      	addhi	r6, #2
 8019798:	b184      	cbz	r4, 80197bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801979a:	429c      	cmp	r4, r3
 801979c:	bf91      	iteee	ls
 801979e:	1b1c      	subls	r4, r3, r4
 80197a0:	1ae4      	subhi	r4, r4, r3
 80197a2:	4629      	movhi	r1, r5
 80197a4:	f04f 0e00 	movhi.w	lr, #0
 80197a8:	bf9b      	ittet	ls
 80197aa:	fa1f fe84 	uxthls.w	lr, r4
 80197ae:	2400      	movls	r4, #0
 80197b0:	b2a4      	uxthhi	r4, r4
 80197b2:	fa1f f188 	uxthls.w	r1, r8
 80197b6:	4673      	mov	r3, lr
 80197b8:	460d      	mov	r5, r1
 80197ba:	e7dc      	b.n	8019776 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80197bc:	2203      	movs	r2, #3
 80197be:	9908      	ldr	r1, [sp, #32]
 80197c0:	42ab      	cmp	r3, r5
 80197c2:	4617      	mov	r7, r2
 80197c4:	9a03      	ldr	r2, [sp, #12]
 80197c6:	bf24      	itt	cs
 80197c8:	eba3 0e05 	subcs.w	lr, r3, r5
 80197cc:	9501      	strcs	r5, [sp, #4]
 80197ce:	fb17 1702 	smlabb	r7, r7, r2, r1
 80197d2:	9a06      	ldr	r2, [sp, #24]
 80197d4:	bf34      	ite	cc
 80197d6:	1ae9      	subcc	r1, r5, r3
 80197d8:	fa1f fe8e 	uxthcs.w	lr, lr
 80197dc:	4417      	add	r7, r2
 80197de:	9a02      	ldr	r2, [sp, #8]
 80197e0:	bf2f      	iteee	cs
 80197e2:	4621      	movcs	r1, r4
 80197e4:	b289      	uxthcc	r1, r1
 80197e6:	9301      	strcc	r3, [sp, #4]
 80197e8:	46a6      	movcc	lr, r4
 80197ea:	2aff      	cmp	r2, #255	@ 0xff
 80197ec:	d11e      	bne.n	801982c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80197ee:	4681      	mov	r9, r0
 80197f0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80197f4:	f109 0903 	add.w	r9, r9, #3
 80197f8:	f1bc 0f00 	cmp.w	ip, #0
 80197fc:	d15f      	bne.n	80198be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80197fe:	9a01      	ldr	r2, [sp, #4]
 8019800:	42ab      	cmp	r3, r5
 8019802:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019806:	4410      	add	r0, r2
 8019808:	d3d5      	bcc.n	80197b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801980a:	fa1f f188 	uxth.w	r1, r8
 801980e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019814:	1a64      	subs	r4, r4, r1
 8019816:	881b      	ldrh	r3, [r3, #0]
 8019818:	b2a4      	uxth	r4, r4
 801981a:	eba3 0308 	sub.w	r3, r3, r8
 801981e:	2c00      	cmp	r4, #0
 8019820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019824:	bf18      	it	ne
 8019826:	2100      	movne	r1, #0
 8019828:	4418      	add	r0, r3
 801982a:	e7c4      	b.n	80197b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801982c:	4684      	mov	ip, r0
 801982e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8019832:	f10c 0c03 	add.w	ip, ip, #3
 8019836:	f1ba 0f00 	cmp.w	sl, #0
 801983a:	d0e0      	beq.n	80197fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801983c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8019840:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019844:	9a05      	ldr	r2, [sp, #20]
 8019846:	f897 9000 	ldrb.w	r9, [r7]
 801984a:	fa1f fa8a 	uxth.w	sl, sl
 801984e:	fb1b fb02 	smulbb	fp, fp, r2
 8019852:	9a04      	ldr	r2, [sp, #16]
 8019854:	fb09 b902 	mla	r9, r9, r2, fp
 8019858:	9a05      	ldr	r2, [sp, #20]
 801985a:	fa1f f989 	uxth.w	r9, r9
 801985e:	f109 0b01 	add.w	fp, r9, #1
 8019862:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019866:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801986a:	fb1b fb02 	smulbb	fp, fp, r2
 801986e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019872:	9a04      	ldr	r2, [sp, #16]
 8019874:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8019878:	f897 9001 	ldrb.w	r9, [r7, #1]
 801987c:	fb09 b902 	mla	r9, r9, r2, fp
 8019880:	9a05      	ldr	r2, [sp, #20]
 8019882:	fa1f f989 	uxth.w	r9, r9
 8019886:	f109 0b01 	add.w	fp, r9, #1
 801988a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801988e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8019892:	fb1b fb02 	smulbb	fp, fp, r2
 8019896:	ea4f 2929 	mov.w	r9, r9, asr #8
 801989a:	9a04      	ldr	r2, [sp, #16]
 801989c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80198a0:	f897 9002 	ldrb.w	r9, [r7, #2]
 80198a4:	fb09 b902 	mla	r9, r9, r2, fp
 80198a8:	fa1f f989 	uxth.w	r9, r9
 80198ac:	f109 0b01 	add.w	fp, r9, #1
 80198b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80198b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198b8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 80198bc:	e7b9      	b.n	8019832 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 80198be:	f897 a000 	ldrb.w	sl, [r7]
 80198c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80198c6:	f809 ac03 	strb.w	sl, [r9, #-3]
 80198ca:	fa1f fc8c 	uxth.w	ip, ip
 80198ce:	f897 a001 	ldrb.w	sl, [r7, #1]
 80198d2:	f809 ac02 	strb.w	sl, [r9, #-2]
 80198d6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80198da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80198de:	e789      	b.n	80197f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 80198e0:	4b03      	ldr	r3, [pc, #12]	@ (80198f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80198e2:	6818      	ldr	r0, [r3, #0]
 80198e4:	6803      	ldr	r3, [r0, #0]
 80198e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80198e8:	4798      	blx	r3
 80198ea:	b00f      	add	sp, #60	@ 0x3c
 80198ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f0:	2401b548 	.word	0x2401b548
 80198f4:	2401b542 	.word	0x2401b542

080198f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80198f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198fc:	b09b      	sub	sp, #108	@ 0x6c
 80198fe:	461d      	mov	r5, r3
 8019900:	4604      	mov	r4, r0
 8019902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8019904:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8019908:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801990c:	9208      	str	r2, [sp, #32]
 801990e:	2a00      	cmp	r2, #0
 8019910:	f000 81f3 	beq.w	8019cfa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8019914:	6828      	ldr	r0, [r5, #0]
 8019916:	aa16      	add	r2, sp, #88	@ 0x58
 8019918:	6869      	ldr	r1, [r5, #4]
 801991a:	c203      	stmia	r2!, {r0, r1}
 801991c:	6818      	ldr	r0, [r3, #0]
 801991e:	aa18      	add	r2, sp, #96	@ 0x60
 8019920:	6859      	ldr	r1, [r3, #4]
 8019922:	c203      	stmia	r2!, {r0, r1}
 8019924:	a816      	add	r0, sp, #88	@ 0x58
 8019926:	f7fa fe17 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801992a:	4629      	mov	r1, r5
 801992c:	a818      	add	r0, sp, #96	@ 0x60
 801992e:	f7fa fe3b 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019932:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8019936:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801993a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801993e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8019942:	bfdb      	ittet	le
 8019944:	b29a      	uxthle	r2, r3
 8019946:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801994a:	f04f 0a01 	movgt.w	sl, #1
 801994e:	fb91 faf2 	sdivle	sl, r1, r2
 8019952:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8019956:	4456      	add	r6, sl
 8019958:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801995c:	3e01      	subs	r6, #1
 801995e:	fb92 f0fa 	sdiv	r0, r2, sl
 8019962:	b280      	uxth	r0, r0
 8019964:	fb00 281a 	mls	r8, r0, sl, r2
 8019968:	900e      	str	r0, [sp, #56]	@ 0x38
 801996a:	fb18 f803 	smulbb	r8, r8, r3
 801996e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8019972:	4488      	add	r8, r1
 8019974:	4419      	add	r1, r3
 8019976:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801997a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801997e:	fa1f f888 	uxth.w	r8, r8
 8019982:	441a      	add	r2, r3
 8019984:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019988:	9303      	str	r3, [sp, #12]
 801998a:	4b9c      	ldr	r3, [pc, #624]	@ (8019bfc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801998c:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8019990:	6818      	ldr	r0, [r3, #0]
 8019992:	6803      	ldr	r3, [r0, #0]
 8019994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019996:	4798      	blx	r3
 8019998:	4b99      	ldr	r3, [pc, #612]	@ (8019c00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801999a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801999e:	f1b8 0f00 	cmp.w	r8, #0
 80199a2:	881a      	ldrh	r2, [r3, #0]
 80199a4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 80199a8:	fb02 f505 	mul.w	r5, r2, r5
 80199ac:	fb02 7101 	mla	r1, r2, r1, r7
 80199b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199b4:	9314      	str	r3, [sp, #80]	@ 0x50
 80199b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80199ba:	9b08      	ldr	r3, [sp, #32]
 80199bc:	fb96 f6fa 	sdiv	r6, r6, sl
 80199c0:	4408      	add	r0, r1
 80199c2:	f106 0601 	add.w	r6, r6, #1
 80199c6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80199ca:	f04f 0100 	mov.w	r1, #0
 80199ce:	eb00 0205 	add.w	r2, r0, r5
 80199d2:	b2b6      	uxth	r6, r6
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80199d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80199da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80199dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80199de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80199e2:	4b88      	ldr	r3, [pc, #544]	@ (8019c04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 80199e4:	f106 0204 	add.w	r2, r6, #4
 80199e8:	eba3 0304 	sub.w	r3, r3, r4
 80199ec:	9205      	str	r2, [sp, #20]
 80199ee:	9a03      	ldr	r2, [sp, #12]
 80199f0:	bf18      	it	ne
 80199f2:	2200      	movne	r2, #0
 80199f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80199f6:	b292      	uxth	r2, r2
 80199f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80199fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80199fc:	fa11 f383 	uxtah	r3, r1, r3
 8019a00:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019a02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019a06:	3304      	adds	r3, #4
 8019a08:	9306      	str	r3, [sp, #24]
 8019a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a0c:	4283      	cmp	r3, r0
 8019a0e:	f240 816f 	bls.w	8019cf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8019a12:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8019a16:	f04f 0900 	mov.w	r9, #0
 8019a1a:	9d06      	ldr	r5, [sp, #24]
 8019a1c:	fbb8 f3f3 	udiv	r3, r8, r3
 8019a20:	ebaa 0303 	sub.w	r3, sl, r3
 8019a24:	782d      	ldrb	r5, [r5, #0]
 8019a26:	b29b      	uxth	r3, r3
 8019a28:	950f      	str	r5, [sp, #60]	@ 0x3c
 8019a2a:	3501      	adds	r5, #1
 8019a2c:	9312      	str	r3, [sp, #72]	@ 0x48
 8019a2e:	9b06      	ldr	r3, [sp, #24]
 8019a30:	9504      	str	r5, [sp, #16]
 8019a32:	7859      	ldrb	r1, [r3, #1]
 8019a34:	789b      	ldrb	r3, [r3, #2]
 8019a36:	021b      	lsls	r3, r3, #8
 8019a38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8019a3c:	9906      	ldr	r1, [sp, #24]
 8019a3e:	78c9      	ldrb	r1, [r1, #3]
 8019a40:	430b      	orrs	r3, r1
 8019a42:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8019a44:	4419      	add	r1, r3
 8019a46:	1c4d      	adds	r5, r1, #1
 8019a48:	7849      	ldrb	r1, [r1, #1]
 8019a4a:	9502      	str	r5, [sp, #8]
 8019a4c:	0209      	lsls	r1, r1, #8
 8019a4e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8019a50:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8019a54:	5ceb      	ldrb	r3, [r5, r3]
 8019a56:	4319      	orrs	r1, r3
 8019a58:	b28b      	uxth	r3, r1
 8019a5a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019a5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019a60:	2300      	movs	r3, #0
 8019a62:	9307      	str	r3, [sp, #28]
 8019a64:	2301      	movs	r3, #1
 8019a66:	e9cd 3300 	strd	r3, r3, [sp]
 8019a6a:	469c      	mov	ip, r3
 8019a6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019a70:	930c      	str	r3, [sp, #48]	@ 0x30
 8019a72:	f1b8 0f00 	cmp.w	r8, #0
 8019a76:	f000 8082 	beq.w	8019b7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8019a7a:	45c4      	cmp	ip, r8
 8019a7c:	d270      	bcs.n	8019b60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8019a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a80:	eba8 080c 	sub.w	r8, r8, ip
 8019a84:	4611      	mov	r1, r2
 8019a86:	4283      	cmp	r3, r0
 8019a88:	fa1f f888 	uxth.w	r8, r8
 8019a8c:	d802      	bhi.n	8019a94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8019a8e:	e074      	b.n	8019b7a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d15f      	bne.n	8019b54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8019a94:	9b02      	ldr	r3, [sp, #8]
 8019a96:	9a01      	ldr	r2, [sp, #4]
 8019a98:	785b      	ldrb	r3, [r3, #1]
 8019a9a:	f1c2 0207 	rsb	r2, r2, #7
 8019a9e:	9d01      	ldr	r5, [sp, #4]
 8019aa0:	4093      	lsls	r3, r2
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019aa8:	9b02      	ldr	r3, [sp, #8]
 8019aaa:	781b      	ldrb	r3, [r3, #0]
 8019aac:	412b      	asrs	r3, r5
 8019aae:	b2db      	uxtb	r3, r3
 8019ab0:	4313      	orrs	r3, r2
 8019ab2:	462a      	mov	r2, r5
 8019ab4:	3201      	adds	r2, #1
 8019ab6:	b29e      	uxth	r6, r3
 8019ab8:	b2d2      	uxtb	r2, r2
 8019aba:	2a08      	cmp	r2, #8
 8019abc:	9201      	str	r2, [sp, #4]
 8019abe:	9a02      	ldr	r2, [sp, #8]
 8019ac0:	bf09      	itett	eq
 8019ac2:	3202      	addeq	r2, #2
 8019ac4:	3201      	addne	r2, #1
 8019ac6:	9202      	streq	r2, [sp, #8]
 8019ac8:	2200      	moveq	r2, #0
 8019aca:	bf14      	ite	ne
 8019acc:	9202      	strne	r2, [sp, #8]
 8019ace:	9201      	streq	r2, [sp, #4]
 8019ad0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019ad2:	42b2      	cmp	r2, r6
 8019ad4:	d309      	bcc.n	8019aea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8019ad6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019ada:	2301      	movs	r3, #1
 8019adc:	9a04      	ldr	r2, [sp, #16]
 8019ade:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8019ae2:	d30e      	bcc.n	8019b02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	2500      	movs	r5, #0
 8019ae8:	e035      	b.n	8019b56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8019aea:	9b04      	ldr	r3, [sp, #16]
 8019aec:	429e      	cmp	r6, r3
 8019aee:	d318      	bcc.n	8019b22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8019af0:	9b00      	ldr	r3, [sp, #0]
 8019af2:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8019af6:	18e3      	adds	r3, r4, r3
 8019af8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8019afc:	9b00      	ldr	r3, [sp, #0]
 8019afe:	3301      	adds	r3, #1
 8019b00:	b29b      	uxth	r3, r3
 8019b02:	9a04      	ldr	r2, [sp, #16]
 8019b04:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8019b08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019b0c:	9f00      	ldr	r7, [sp, #0]
 8019b0e:	7115      	strb	r5, [r2, #4]
 8019b10:	3701      	adds	r7, #1
 8019b12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019b14:	7157      	strb	r7, [r2, #5]
 8019b16:	80d5      	strh	r5, [r2, #6]
 8019b18:	9a04      	ldr	r2, [sp, #16]
 8019b1a:	3201      	adds	r2, #1
 8019b1c:	b292      	uxth	r2, r2
 8019b1e:	9204      	str	r2, [sp, #16]
 8019b20:	e7e0      	b.n	8019ae4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8019b22:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019b26:	4632      	mov	r2, r6
 8019b28:	795b      	ldrb	r3, [r3, #5]
 8019b2a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8019b2e:	4425      	add	r5, r4
 8019b30:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8019b32:	eb07 0c05 	add.w	ip, r7, r5
 8019b36:	f1bc 0f00 	cmp.w	ip, #0
 8019b3a:	dd07      	ble.n	8019b4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8019b3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019b40:	f892 c004 	ldrb.w	ip, [r2, #4]
 8019b44:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8019b48:	88d2      	ldrh	r2, [r2, #6]
 8019b4a:	e7f1      	b.n	8019b30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8019b4c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019b50:	b29b      	uxth	r3, r3
 8019b52:	e7c3      	b.n	8019adc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8019b54:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019b56:	460a      	mov	r2, r1
 8019b58:	960a      	str	r6, [sp, #40]	@ 0x28
 8019b5a:	46a9      	mov	r9, r5
 8019b5c:	469c      	mov	ip, r3
 8019b5e:	e788      	b.n	8019a72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8019b60:	ebac 0308 	sub.w	r3, ip, r8
 8019b64:	eb09 0508 	add.w	r5, r9, r8
 8019b68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019b6c:	b29b      	uxth	r3, r3
 8019b6e:	b2ad      	uxth	r5, r5
 8019b70:	f04f 0800 	mov.w	r8, #0
 8019b74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b76:	4282      	cmp	r2, r0
 8019b78:	d88a      	bhi.n	8019a90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8019b7a:	460a      	mov	r2, r1
 8019b7c:	e745      	b.n	8019a0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8019b7e:	4594      	cmp	ip, r2
 8019b80:	9d08      	ldr	r5, [sp, #32]
 8019b82:	4686      	mov	lr, r0
 8019b84:	bf27      	ittee	cs
 8019b86:	ebac 0302 	subcs.w	r3, ip, r2
 8019b8a:	4616      	movcs	r6, r2
 8019b8c:	eba2 010c 	subcc.w	r1, r2, ip
 8019b90:	4666      	movcc	r6, ip
 8019b92:	bf27      	ittee	cs
 8019b94:	b29b      	uxthcs	r3, r3
 8019b96:	4641      	movcs	r1, r8
 8019b98:	b289      	uxthcc	r1, r1
 8019b9a:	4643      	movcc	r3, r8
 8019b9c:	2dff      	cmp	r5, #255	@ 0xff
 8019b9e:	eb09 0506 	add.w	r5, r9, r6
 8019ba2:	b2ad      	uxth	r5, r5
 8019ba4:	d130      	bne.n	8019c08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8019ba6:	45a9      	cmp	r9, r5
 8019ba8:	f10e 0e03 	add.w	lr, lr, #3
 8019bac:	d17a      	bne.n	8019ca4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8019bae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019bb2:	4594      	cmp	ip, r2
 8019bb4:	4430      	add	r0, r6
 8019bb6:	d3db      	bcc.n	8019b70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8019bb8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019bba:	9903      	ldr	r1, [sp, #12]
 8019bbc:	8812      	ldrh	r2, [r2, #0]
 8019bbe:	1a52      	subs	r2, r2, r1
 8019bc0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019bc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019bc6:	4410      	add	r0, r2
 8019bc8:	9a07      	ldr	r2, [sp, #28]
 8019bca:	3201      	adds	r2, #1
 8019bcc:	428a      	cmp	r2, r1
 8019bce:	9207      	str	r2, [sp, #28]
 8019bd0:	f040 8081 	bne.w	8019cd6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8019bd4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8019bd8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8019bdc:	9b03      	ldr	r3, [sp, #12]
 8019bde:	eba8 080c 	sub.w	r8, r8, ip
 8019be2:	fa1f f888 	uxth.w	r8, r8
 8019be6:	f1b8 0f00 	cmp.w	r8, #0
 8019bea:	bf08      	it	eq
 8019bec:	461a      	moveq	r2, r3
 8019bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019bf0:	bf18      	it	ne
 8019bf2:	2200      	movne	r2, #0
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	b292      	uxth	r2, r2
 8019bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019bfa:	e6fd      	b.n	80199f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8019bfc:	2401b548 	.word	0x2401b548
 8019c00:	2401b542 	.word	0x2401b542
 8019c04:	fffff7fb 	.word	0xfffff7fb
 8019c08:	45a9      	cmp	r9, r5
 8019c0a:	f10e 0e03 	add.w	lr, lr, #3
 8019c0e:	d0ce      	beq.n	8019bae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8019c10:	f109 0701 	add.w	r7, r9, #1
 8019c14:	44a1      	add	r9, r4
 8019c16:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8019c1a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019c1e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019c20:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019c24:	9f05      	ldr	r7, [sp, #20]
 8019c26:	eb07 0908 	add.w	r9, r7, r8
 8019c2a:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019c2e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019c30:	fb1b fb07 	smulbb	fp, fp, r7
 8019c34:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019c36:	fb08 b807 	mla	r8, r8, r7, fp
 8019c3a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019c3c:	fa1f f888 	uxth.w	r8, r8
 8019c40:	f108 0b01 	add.w	fp, r8, #1
 8019c44:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c48:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8019c4c:	fb1b fb07 	smulbb	fp, fp, r7
 8019c50:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c54:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019c56:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019c5a:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019c5e:	fb08 b807 	mla	r8, r8, r7, fp
 8019c62:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8019c64:	fa1f f888 	uxth.w	r8, r8
 8019c68:	f108 0b01 	add.w	fp, r8, #1
 8019c6c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c74:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019c78:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019c7c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8019c80:	fb19 f907 	smulbb	r9, r9, r7
 8019c84:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8019c86:	fb08 9807 	mla	r8, r8, r7, r9
 8019c8a:	fa1f f888 	uxth.w	r8, r8
 8019c8e:	f108 0901 	add.w	r9, r8, #1
 8019c92:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8019c96:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8019c9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c9e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019ca2:	e7b1      	b.n	8019c08 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8019ca4:	f109 0b01 	add.w	fp, r9, #1
 8019ca8:	44a1      	add	r9, r4
 8019caa:	9f05      	ldr	r7, [sp, #20]
 8019cac:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8019cb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019cb4:	eb07 0908 	add.w	r9, r7, r8
 8019cb8:	f817 8008 	ldrb.w	r8, [r7, r8]
 8019cbc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8019cc0:	f899 8001 	ldrb.w	r8, [r9, #1]
 8019cc4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8019cc8:	f899 8002 	ldrb.w	r8, [r9, #2]
 8019ccc:	fa1f f98b 	uxth.w	r9, fp
 8019cd0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8019cd4:	e767      	b.n	8019ba6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8019cd6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019cda:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8019cde:	eba8 0801 	sub.w	r8, r8, r1
 8019ce2:	fa1f f888 	uxth.w	r8, r8
 8019ce6:	f1b8 0f00 	cmp.w	r8, #0
 8019cea:	bf18      	it	ne
 8019cec:	2100      	movne	r1, #0
 8019cee:	e741      	b.n	8019b74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8019cf0:	4b03      	ldr	r3, [pc, #12]	@ (8019d00 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8019cf2:	6818      	ldr	r0, [r3, #0]
 8019cf4:	6803      	ldr	r3, [r0, #0]
 8019cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cf8:	4798      	blx	r3
 8019cfa:	b01b      	add	sp, #108	@ 0x6c
 8019cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d00:	2401b548 	.word	0x2401b548

08019d04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d08:	b09d      	sub	sp, #116	@ 0x74
 8019d0a:	461d      	mov	r5, r3
 8019d0c:	4604      	mov	r4, r0
 8019d0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019d10:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8019d14:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8019d18:	920c      	str	r2, [sp, #48]	@ 0x30
 8019d1a:	2a00      	cmp	r2, #0
 8019d1c:	f000 81de 	beq.w	801a0dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8019d20:	6828      	ldr	r0, [r5, #0]
 8019d22:	aa18      	add	r2, sp, #96	@ 0x60
 8019d24:	6869      	ldr	r1, [r5, #4]
 8019d26:	c203      	stmia	r2!, {r0, r1}
 8019d28:	6818      	ldr	r0, [r3, #0]
 8019d2a:	aa1a      	add	r2, sp, #104	@ 0x68
 8019d2c:	6859      	ldr	r1, [r3, #4]
 8019d2e:	c203      	stmia	r2!, {r0, r1}
 8019d30:	a818      	add	r0, sp, #96	@ 0x60
 8019d32:	f7fa fc11 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019d36:	4629      	mov	r1, r5
 8019d38:	a81a      	add	r0, sp, #104	@ 0x68
 8019d3a:	f7fa fc35 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019d3e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8019d42:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8019d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019d4a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8019d4e:	bfdb      	ittet	le
 8019d50:	b29a      	uxthle	r2, r3
 8019d52:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8019d56:	2201      	movgt	r2, #1
 8019d58:	fb91 f2f2 	sdivle	r2, r1, r2
 8019d5c:	9201      	str	r2, [sp, #4]
 8019d5e:	9801      	ldr	r0, [sp, #4]
 8019d60:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8019d64:	9901      	ldr	r1, [sp, #4]
 8019d66:	fb92 f0f0 	sdiv	r0, r2, r0
 8019d6a:	b280      	uxth	r0, r0
 8019d6c:	440f      	add	r7, r1
 8019d6e:	900d      	str	r0, [sp, #52]	@ 0x34
 8019d70:	3f01      	subs	r7, #1
 8019d72:	9801      	ldr	r0, [sp, #4]
 8019d74:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019d76:	fb05 2510 	mls	r5, r5, r0, r2
 8019d7a:	fb97 f7f1 	sdiv	r7, r7, r1
 8019d7e:	fb15 f503 	smulbb	r5, r5, r3
 8019d82:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8019d86:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8019d8a:	3701      	adds	r7, #1
 8019d8c:	440d      	add	r5, r1
 8019d8e:	4419      	add	r1, r3
 8019d90:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8019d94:	b2bf      	uxth	r7, r7
 8019d96:	441a      	add	r2, r3
 8019d98:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8019d9c:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8019da0:	00bf      	lsls	r7, r7, #2
 8019da2:	9304      	str	r3, [sp, #16]
 8019da4:	b2ad      	uxth	r5, r5
 8019da6:	4bb0      	ldr	r3, [pc, #704]	@ (801a068 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8019da8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8019dac:	6818      	ldr	r0, [r3, #0]
 8019dae:	6803      	ldr	r3, [r0, #0]
 8019db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019db2:	4798      	blx	r3
 8019db4:	4bad      	ldr	r3, [pc, #692]	@ (801a06c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8019db6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8019dba:	2d00      	cmp	r5, #0
 8019dbc:	881a      	ldrh	r2, [r3, #0]
 8019dbe:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8019dc2:	fb02 f606 	mul.w	r6, r2, r6
 8019dc6:	fb02 c101 	mla	r1, r2, r1, ip
 8019dca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019dce:	9316      	str	r3, [sp, #88]	@ 0x58
 8019dd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019dd4:	4ba6      	ldr	r3, [pc, #664]	@ (801a070 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8019dd6:	eb00 0801 	add.w	r8, r0, r1
 8019dda:	bf18      	it	ne
 8019ddc:	2100      	movne	r1, #0
 8019dde:	eba3 0304 	sub.w	r3, r3, r4
 8019de2:	eb08 0206 	add.w	r2, r8, r6
 8019de6:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019de8:	9208      	str	r2, [sp, #32]
 8019dea:	f107 0204 	add.w	r2, r7, #4
 8019dee:	9211      	str	r2, [sp, #68]	@ 0x44
 8019df0:	9a04      	ldr	r2, [sp, #16]
 8019df2:	bf08      	it	eq
 8019df4:	4611      	moveq	r1, r2
 8019df6:	2200      	movs	r2, #0
 8019df8:	b289      	uxth	r1, r1
 8019dfa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e00:	fa12 f383 	uxtah	r3, r2, r3
 8019e04:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019e06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019e0a:	3304      	adds	r3, #4
 8019e0c:	9306      	str	r3, [sp, #24]
 8019e0e:	9b08      	ldr	r3, [sp, #32]
 8019e10:	4543      	cmp	r3, r8
 8019e12:	f240 815e 	bls.w	801a0d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8019e16:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8019e1a:	f04f 0b01 	mov.w	fp, #1
 8019e1e:	9a01      	ldr	r2, [sp, #4]
 8019e20:	9806      	ldr	r0, [sp, #24]
 8019e22:	465e      	mov	r6, fp
 8019e24:	f8cd b008 	str.w	fp, [sp, #8]
 8019e28:	7800      	ldrb	r0, [r0, #0]
 8019e2a:	fbb5 f3f3 	udiv	r3, r5, r3
 8019e2e:	1ad3      	subs	r3, r2, r3
 8019e30:	900e      	str	r0, [sp, #56]	@ 0x38
 8019e32:	3001      	adds	r0, #1
 8019e34:	b29b      	uxth	r3, r3
 8019e36:	9005      	str	r0, [sp, #20]
 8019e38:	9312      	str	r3, [sp, #72]	@ 0x48
 8019e3a:	9b06      	ldr	r3, [sp, #24]
 8019e3c:	785a      	ldrb	r2, [r3, #1]
 8019e3e:	789b      	ldrb	r3, [r3, #2]
 8019e40:	021b      	lsls	r3, r3, #8
 8019e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019e46:	9a06      	ldr	r2, [sp, #24]
 8019e48:	78d2      	ldrb	r2, [r2, #3]
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019e4e:	441a      	add	r2, r3
 8019e50:	1c50      	adds	r0, r2, #1
 8019e52:	7852      	ldrb	r2, [r2, #1]
 8019e54:	9003      	str	r0, [sp, #12]
 8019e56:	0212      	lsls	r2, r2, #8
 8019e58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019e5a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8019e5e:	5cc3      	ldrb	r3, [r0, r3]
 8019e60:	431a      	orrs	r2, r3
 8019e62:	b293      	uxth	r3, r2
 8019e64:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8019e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	461a      	mov	r2, r3
 8019e6e:	9307      	str	r3, [sp, #28]
 8019e70:	2d00      	cmp	r5, #0
 8019e72:	d07c      	beq.n	8019f6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8019e74:	42ae      	cmp	r6, r5
 8019e76:	d26c      	bcs.n	8019f52 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8019e78:	9b08      	ldr	r3, [sp, #32]
 8019e7a:	1bad      	subs	r5, r5, r6
 8019e7c:	4608      	mov	r0, r1
 8019e7e:	4543      	cmp	r3, r8
 8019e80:	b2ad      	uxth	r5, r5
 8019e82:	d802      	bhi.n	8019e8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8019e84:	e071      	b.n	8019f6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d15d      	bne.n	8019f46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8019e8a:	9b03      	ldr	r3, [sp, #12]
 8019e8c:	9a02      	ldr	r2, [sp, #8]
 8019e8e:	785b      	ldrb	r3, [r3, #1]
 8019e90:	f1c2 0207 	rsb	r2, r2, #7
 8019e94:	9902      	ldr	r1, [sp, #8]
 8019e96:	4093      	lsls	r3, r2
 8019e98:	005b      	lsls	r3, r3, #1
 8019e9a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8019e9e:	9b03      	ldr	r3, [sp, #12]
 8019ea0:	781b      	ldrb	r3, [r3, #0]
 8019ea2:	410b      	asrs	r3, r1
 8019ea4:	3101      	adds	r1, #1
 8019ea6:	b2c9      	uxtb	r1, r1
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	2908      	cmp	r1, #8
 8019eac:	9102      	str	r1, [sp, #8]
 8019eae:	9903      	ldr	r1, [sp, #12]
 8019eb0:	ea43 0302 	orr.w	r3, r3, r2
 8019eb4:	bf0c      	ite	eq
 8019eb6:	3102      	addeq	r1, #2
 8019eb8:	3101      	addne	r1, #1
 8019eba:	b29a      	uxth	r2, r3
 8019ebc:	bf05      	ittet	eq
 8019ebe:	9103      	streq	r1, [sp, #12]
 8019ec0:	2100      	moveq	r1, #0
 8019ec2:	9103      	strne	r1, [sp, #12]
 8019ec4:	9102      	streq	r1, [sp, #8]
 8019ec6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019ec8:	4291      	cmp	r1, r2
 8019eca:	d30a      	bcc.n	8019ee2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8019ecc:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	9905      	ldr	r1, [sp, #20]
 8019ed4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019ed8:	d30f      	bcc.n	8019efa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8019eda:	469b      	mov	fp, r3
 8019edc:	f04f 0c00 	mov.w	ip, #0
 8019ee0:	e032      	b.n	8019f48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8019ee2:	9b05      	ldr	r3, [sp, #20]
 8019ee4:	429a      	cmp	r2, r3
 8019ee6:	d318      	bcc.n	8019f1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8019ee8:	eb04 030b 	add.w	r3, r4, fp
 8019eec:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8019ef0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019ef4:	f10b 0301 	add.w	r3, fp, #1
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	9905      	ldr	r1, [sp, #20]
 8019efc:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8019f00:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019f04:	710e      	strb	r6, [r1, #4]
 8019f06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019f08:	80ce      	strh	r6, [r1, #6]
 8019f0a:	f10b 0601 	add.w	r6, fp, #1
 8019f0e:	714e      	strb	r6, [r1, #5]
 8019f10:	9905      	ldr	r1, [sp, #20]
 8019f12:	3101      	adds	r1, #1
 8019f14:	b289      	uxth	r1, r1
 8019f16:	9105      	str	r1, [sp, #20]
 8019f18:	e7df      	b.n	8019eda <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8019f1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019f1e:	4611      	mov	r1, r2
 8019f20:	795b      	ldrb	r3, [r3, #5]
 8019f22:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8019f26:	4426      	add	r6, r4
 8019f28:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8019f2a:	4437      	add	r7, r6
 8019f2c:	2f00      	cmp	r7, #0
 8019f2e:	dd06      	ble.n	8019f3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8019f30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019f34:	790f      	ldrb	r7, [r1, #4]
 8019f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019f3a:	88c9      	ldrh	r1, [r1, #6]
 8019f3c:	e7f4      	b.n	8019f28 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8019f3e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019f42:	b29b      	uxth	r3, r3
 8019f44:	e7c5      	b.n	8019ed2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8019f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019f48:	920a      	str	r2, [sp, #40]	@ 0x28
 8019f4a:	4601      	mov	r1, r0
 8019f4c:	4662      	mov	r2, ip
 8019f4e:	461e      	mov	r6, r3
 8019f50:	e78e      	b.n	8019e70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8019f52:	1b73      	subs	r3, r6, r5
 8019f54:	eb02 0c05 	add.w	ip, r2, r5
 8019f58:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	fa1f fc8c 	uxth.w	ip, ip
 8019f62:	2500      	movs	r5, #0
 8019f64:	9a08      	ldr	r2, [sp, #32]
 8019f66:	4542      	cmp	r2, r8
 8019f68:	d88d      	bhi.n	8019e86 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8019f6a:	4601      	mov	r1, r0
 8019f6c:	e74f      	b.n	8019e0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8019f6e:	428e      	cmp	r6, r1
 8019f70:	bf2b      	itete	cs
 8019f72:	468e      	movcs	lr, r1
 8019f74:	46b6      	movcc	lr, r6
 8019f76:	1a73      	subcs	r3, r6, r1
 8019f78:	1b88      	subcc	r0, r1, r6
 8019f7a:	eb02 0c0e 	add.w	ip, r2, lr
 8019f7e:	bf2b      	itete	cs
 8019f80:	4628      	movcs	r0, r5
 8019f82:	462b      	movcc	r3, r5
 8019f84:	b29b      	uxthcs	r3, r3
 8019f86:	b280      	uxthcc	r0, r0
 8019f88:	f108 0503 	add.w	r5, r8, #3
 8019f8c:	fa1f fc8c 	uxth.w	ip, ip
 8019f90:	4562      	cmp	r2, ip
 8019f92:	d06f      	beq.n	801a074 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8019f94:	1c57      	adds	r7, r2, #1
 8019f96:	4422      	add	r2, r4
 8019f98:	b2bf      	uxth	r7, r7
 8019f9a:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8019f9e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8019fa0:	2704      	movs	r7, #4
 8019fa2:	46b9      	mov	r9, r7
 8019fa4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8019fa6:	fb19 7202 	smlabb	r2, r9, r2, r7
 8019faa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8019fac:	58bf      	ldr	r7, [r7, r2]
 8019fae:	0e3a      	lsrs	r2, r7, #24
 8019fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8019fb2:	d016      	beq.n	8019fe2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8019fb4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8019fb8:	fa5f fa87 	uxtb.w	sl, r7
 8019fbc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019fc0:	fa5f f289 	uxtb.w	r2, r9
 8019fc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8019fc6:	b2fa      	uxtb	r2, r7
 8019fc8:	9215      	str	r2, [sp, #84]	@ 0x54
 8019fca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019fcc:	2aff      	cmp	r2, #255	@ 0xff
 8019fce:	d10b      	bne.n	8019fe8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019fd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019fd2:	2aff      	cmp	r2, #255	@ 0xff
 8019fd4:	d108      	bne.n	8019fe8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019fd6:	f805 ac03 	strb.w	sl, [r5, #-3]
 8019fda:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019fde:	f805 7c01 	strb.w	r7, [r5, #-1]
 8019fe2:	3503      	adds	r5, #3
 8019fe4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019fe6:	e7d3      	b.n	8019f90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8019fe8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8019fea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019fec:	437a      	muls	r2, r7
 8019fee:	1c57      	adds	r7, r2, #1
 8019ff0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8019ff4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8019ff8:	1212      	asrs	r2, r2, #8
 8019ffa:	fa1f f982 	uxth.w	r9, r2
 8019ffe:	43d2      	mvns	r2, r2
 801a000:	fb1a fa09 	smulbb	sl, sl, r9
 801a004:	b2d2      	uxtb	r2, r2
 801a006:	fb07 a702 	mla	r7, r7, r2, sl
 801a00a:	9209      	str	r2, [sp, #36]	@ 0x24
 801a00c:	b2bf      	uxth	r7, r7
 801a00e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a010:	f107 0a01 	add.w	sl, r7, #1
 801a014:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a018:	fb12 fa09 	smulbb	sl, r2, r9
 801a01c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a01e:	123f      	asrs	r7, r7, #8
 801a020:	f805 7c03 	strb.w	r7, [r5, #-3]
 801a024:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801a028:	fb07 aa02 	mla	sl, r7, r2, sl
 801a02c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a02e:	fb12 f909 	smulbb	r9, r2, r9
 801a032:	fa1f fa8a 	uxth.w	sl, sl
 801a036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a038:	f10a 0701 	add.w	r7, sl, #1
 801a03c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a040:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801a044:	fb07 9902 	mla	r9, r7, r2, r9
 801a048:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a04c:	fa1f f989 	uxth.w	r9, r9
 801a050:	f805 ac02 	strb.w	sl, [r5, #-2]
 801a054:	f109 0201 	add.w	r2, r9, #1
 801a058:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801a05c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a060:	f805 9c01 	strb.w	r9, [r5, #-1]
 801a064:	e7bd      	b.n	8019fe2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a066:	bf00      	nop
 801a068:	2401b548 	.word	0x2401b548
 801a06c:	2401b542 	.word	0x2401b542
 801a070:	fffff7fb 	.word	0xfffff7fb
 801a074:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a078:	428e      	cmp	r6, r1
 801a07a:	44f0      	add	r8, lr
 801a07c:	f4ff af71 	bcc.w	8019f62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a080:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a082:	9904      	ldr	r1, [sp, #16]
 801a084:	8812      	ldrh	r2, [r2, #0]
 801a086:	1a52      	subs	r2, r2, r1
 801a088:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a08a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a08e:	4490      	add	r8, r2
 801a090:	9a07      	ldr	r2, [sp, #28]
 801a092:	3201      	adds	r2, #1
 801a094:	428a      	cmp	r2, r1
 801a096:	9207      	str	r2, [sp, #28]
 801a098:	d111      	bne.n	801a0be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801a09a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801a09e:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801a0a2:	9b04      	ldr	r3, [sp, #16]
 801a0a4:	eba5 050c 	sub.w	r5, r5, ip
 801a0a8:	b2ad      	uxth	r5, r5
 801a0aa:	2d00      	cmp	r5, #0
 801a0ac:	bf08      	it	eq
 801a0ae:	4619      	moveq	r1, r3
 801a0b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0b2:	bf18      	it	ne
 801a0b4:	2100      	movne	r1, #0
 801a0b6:	3301      	adds	r3, #1
 801a0b8:	b289      	uxth	r1, r1
 801a0ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a0bc:	e69e      	b.n	8019dfc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801a0be:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a0c2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801a0c6:	1a2d      	subs	r5, r5, r0
 801a0c8:	b2ad      	uxth	r5, r5
 801a0ca:	2d00      	cmp	r5, #0
 801a0cc:	bf18      	it	ne
 801a0ce:	2000      	movne	r0, #0
 801a0d0:	e748      	b.n	8019f64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801a0d2:	4b04      	ldr	r3, [pc, #16]	@ (801a0e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801a0d4:	6818      	ldr	r0, [r3, #0]
 801a0d6:	6803      	ldr	r3, [r0, #0]
 801a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a0da:	4798      	blx	r3
 801a0dc:	b01d      	add	sp, #116	@ 0x74
 801a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e2:	bf00      	nop
 801a0e4:	2401b548 	.word	0x2401b548

0801a0e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801a0f0:	9c06      	ldr	r4, [sp, #24]
 801a0f2:	2800      	cmp	r0, #0
 801a0f4:	d06e      	beq.n	801a1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a0f6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801a0fa:	2d00      	cmp	r5, #0
 801a0fc:	dd6a      	ble.n	801a1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a0fe:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801a102:	f1bc 0f00 	cmp.w	ip, #0
 801a106:	dd65      	ble.n	801a1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a108:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801a10c:	28ff      	cmp	r0, #255	@ 0xff
 801a10e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a112:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801a116:	fb02 3306 	mla	r3, r2, r6, r3
 801a11a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801a11e:	b2e4      	uxtb	r4, r4
 801a120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a124:	4419      	add	r1, r3
 801a126:	fb02 f30c 	mul.w	r3, r2, ip
 801a12a:	eba2 0205 	sub.w	r2, r2, r5
 801a12e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a132:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a136:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a13a:	440b      	add	r3, r1
 801a13c:	d03e      	beq.n	801a1bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801a13e:	fa1f fc80 	uxth.w	ip, r0
 801a142:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801a146:	fb06 f60c 	mul.w	r6, r6, ip
 801a14a:	b280      	uxth	r0, r0
 801a14c:	fb07 f70c 	mul.w	r7, r7, ip
 801a150:	fb04 f40c 	mul.w	r4, r4, ip
 801a154:	4299      	cmp	r1, r3
 801a156:	d23d      	bcs.n	801a1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a158:	eb01 0c05 	add.w	ip, r1, r5
 801a15c:	458c      	cmp	ip, r1
 801a15e:	f101 0e03 	add.w	lr, r1, #3
 801a162:	d928      	bls.n	801a1b6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801a164:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801a168:	fb11 f100 	smulbb	r1, r1, r0
 801a16c:	4421      	add	r1, r4
 801a16e:	b289      	uxth	r1, r1
 801a170:	f101 0801 	add.w	r8, r1, #1
 801a174:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a178:	1209      	asrs	r1, r1, #8
 801a17a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801a17e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801a182:	fb11 f100 	smulbb	r1, r1, r0
 801a186:	4439      	add	r1, r7
 801a188:	b289      	uxth	r1, r1
 801a18a:	f101 0801 	add.w	r8, r1, #1
 801a18e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a192:	1209      	asrs	r1, r1, #8
 801a194:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801a198:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801a19c:	fb11 f100 	smulbb	r1, r1, r0
 801a1a0:	4431      	add	r1, r6
 801a1a2:	b289      	uxth	r1, r1
 801a1a4:	f101 0801 	add.w	r8, r1, #1
 801a1a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801a1ac:	1209      	asrs	r1, r1, #8
 801a1ae:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801a1b2:	4671      	mov	r1, lr
 801a1b4:	e7d2      	b.n	801a15c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801a1b6:	4411      	add	r1, r2
 801a1b8:	e7cc      	b.n	801a154 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801a1ba:	4411      	add	r1, r2
 801a1bc:	4299      	cmp	r1, r3
 801a1be:	d209      	bcs.n	801a1d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801a1c0:	1948      	adds	r0, r1, r5
 801a1c2:	4281      	cmp	r1, r0
 801a1c4:	d2f9      	bcs.n	801a1ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801a1c6:	700c      	strb	r4, [r1, #0]
 801a1c8:	3103      	adds	r1, #3
 801a1ca:	f801 7c02 	strb.w	r7, [r1, #-2]
 801a1ce:	f801 6c01 	strb.w	r6, [r1, #-1]
 801a1d2:	e7f6      	b.n	801a1c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801a1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1dc:	b093      	sub	sp, #76	@ 0x4c
 801a1de:	4699      	mov	r9, r3
 801a1e0:	4617      	mov	r7, r2
 801a1e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a1e6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801a1ea:	4604      	mov	r4, r0
 801a1ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1f0:	a80c      	add	r0, sp, #48	@ 0x30
 801a1f2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801a1f6:	460d      	mov	r5, r1
 801a1f8:	4649      	mov	r1, r9
 801a1fa:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a1fe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a202:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801a206:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801a20a:	f7f8 f955 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 801a20e:	4639      	mov	r1, r7
 801a210:	a80c      	add	r0, sp, #48	@ 0x30
 801a212:	f7f8 f951 	bl	80124b8 <_ZN8touchgfx4RectaNERKS0_>
 801a216:	4b78      	ldr	r3, [pc, #480]	@ (801a3f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a218:	8818      	ldrh	r0, [r3, #0]
 801a21a:	4b78      	ldr	r3, [pc, #480]	@ (801a3fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801a21c:	b202      	sxth	r2, r0
 801a21e:	8819      	ldrh	r1, [r3, #0]
 801a220:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801a224:	b20f      	sxth	r7, r1
 801a226:	2b00      	cmp	r3, #0
 801a228:	da07      	bge.n	801a23a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801a22a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801a22e:	4463      	add	r3, ip
 801a230:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801a234:	2300      	movs	r3, #0
 801a236:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801a23a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801a23e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801a242:	1ad2      	subs	r2, r2, r3
 801a244:	4594      	cmp	ip, r2
 801a246:	bfc4      	itt	gt
 801a248:	1ac2      	subgt	r2, r0, r3
 801a24a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801a24e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a252:	2a00      	cmp	r2, #0
 801a254:	da07      	bge.n	801a266 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801a256:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801a25a:	4462      	add	r2, ip
 801a25c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a260:	2200      	movs	r2, #0
 801a262:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a266:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a26a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801a26e:	1abf      	subs	r7, r7, r2
 801a270:	45bc      	cmp	ip, r7
 801a272:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801a404 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801a276:	bfc8      	it	gt
 801a278:	1a8f      	subgt	r7, r1, r2
 801a27a:	f89c c000 	ldrb.w	ip, [ip]
 801a27e:	bfc8      	it	gt
 801a280:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801a284:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801a288:	f1bc 0f00 	cmp.w	ip, #0
 801a28c:	d176      	bne.n	801a37c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801a28e:	4287      	cmp	r7, r0
 801a290:	bf14      	ite	ne
 801a292:	2100      	movne	r1, #0
 801a294:	2101      	moveq	r1, #1
 801a296:	2f00      	cmp	r7, #0
 801a298:	9107      	str	r1, [sp, #28]
 801a29a:	dd73      	ble.n	801a384 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a29c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801a2a0:	2900      	cmp	r1, #0
 801a2a2:	9104      	str	r1, [sp, #16]
 801a2a4:	dd6e      	ble.n	801a384 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801a2a6:	f8b9 1000 	ldrh.w	r1, [r9]
 801a2aa:	a80e      	add	r0, sp, #56	@ 0x38
 801a2ac:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801a2b0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801a2b4:	1a5b      	subs	r3, r3, r1
 801a2b6:	a910      	add	r1, sp, #64	@ 0x40
 801a2b8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a2bc:	b21b      	sxth	r3, r3
 801a2be:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801a2c2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801a408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a2c6:	9305      	str	r3, [sp, #20]
 801a2c8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a2cc:	1ad2      	subs	r2, r2, r3
 801a2ce:	b213      	sxth	r3, r2
 801a2d0:	9306      	str	r3, [sp, #24]
 801a2d2:	9b05      	ldr	r3, [sp, #20]
 801a2d4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a2d8:	9b06      	ldr	r3, [sp, #24]
 801a2da:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a2de:	9b04      	ldr	r3, [sp, #16]
 801a2e0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a2e8:	f7fa f95e 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a2ec:	4640      	mov	r0, r8
 801a2ee:	f7fa f933 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2f2:	a810      	add	r0, sp, #64	@ 0x40
 801a2f4:	f7fa f930 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a2f8:	4b41      	ldr	r3, [pc, #260]	@ (801a400 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a2fa:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a2fe:	4628      	mov	r0, r5
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	9308      	str	r3, [sp, #32]
 801a304:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a308:	b21b      	sxth	r3, r3
 801a30a:	9303      	str	r3, [sp, #12]
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a310:	4798      	blx	r3
 801a312:	9a03      	ldr	r2, [sp, #12]
 801a314:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801a318:	4681      	mov	r9, r0
 801a31a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a31e:	fb13 f302 	smulbb	r3, r3, r2
 801a322:	2203      	movs	r2, #3
 801a324:	f8da 0000 	ldr.w	r0, [sl]
 801a328:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a32c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801a32e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a330:	441d      	add	r5, r3
 801a332:	6803      	ldr	r3, [r0, #0]
 801a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a336:	4798      	blx	r3
 801a338:	9009      	str	r0, [sp, #36]	@ 0x24
 801a33a:	f8da 0000 	ldr.w	r0, [sl]
 801a33e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801a342:	6803      	ldr	r3, [r0, #0]
 801a344:	910a      	str	r1, [sp, #40]	@ 0x28
 801a346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a348:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801a34c:	4798      	blx	r3
 801a34e:	f010 0f01 	tst.w	r0, #1
 801a352:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801a356:	d01e      	beq.n	801a396 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a358:	f8da 0000 	ldr.w	r0, [sl]
 801a35c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a360:	6803      	ldr	r3, [r0, #0]
 801a362:	9200      	str	r2, [sp, #0]
 801a364:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801a366:	462b      	mov	r3, r5
 801a368:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a36c:	47b0      	blx	r6
 801a36e:	9b05      	ldr	r3, [sp, #20]
 801a370:	80a7      	strh	r7, [r4, #4]
 801a372:	8023      	strh	r3, [r4, #0]
 801a374:	9b06      	ldr	r3, [sp, #24]
 801a376:	8063      	strh	r3, [r4, #2]
 801a378:	9b04      	ldr	r3, [sp, #16]
 801a37a:	e007      	b.n	801a38c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a37c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801a380:	4288      	cmp	r0, r1
 801a382:	e785      	b.n	801a290 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a384:	2300      	movs	r3, #0
 801a386:	8023      	strh	r3, [r4, #0]
 801a388:	8063      	strh	r3, [r4, #2]
 801a38a:	80a3      	strh	r3, [r4, #4]
 801a38c:	4620      	mov	r0, r4
 801a38e:	80e3      	strh	r3, [r4, #6]
 801a390:	b013      	add	sp, #76	@ 0x4c
 801a392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a396:	fb09 f606 	mul.w	r6, r9, r6
 801a39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a39c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a3a0:	9a07      	ldr	r2, [sp, #28]
 801a3a2:	4433      	add	r3, r6
 801a3a4:	461e      	mov	r6, r3
 801a3a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801a3aa:	b16a      	cbz	r2, 801a3c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a3ac:	9a08      	ldr	r2, [sp, #32]
 801a3ae:	4593      	cmp	fp, r2
 801a3b0:	d10a      	bne.n	801a3c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a3b2:	f8da 0000 	ldr.w	r0, [sl]
 801a3b6:	fb09 f303 	mul.w	r3, r9, r3
 801a3ba:	4629      	mov	r1, r5
 801a3bc:	6802      	ldr	r2, [r0, #0]
 801a3be:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a3c2:	4632      	mov	r2, r6
 801a3c4:	47d0      	blx	sl
 801a3c6:	e7d2      	b.n	801a36e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a3c8:	9a03      	ldr	r2, [sp, #12]
 801a3ca:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801a408 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a3ce:	fb02 5803 	mla	r8, r2, r3, r5
 801a3d2:	4545      	cmp	r5, r8
 801a3d4:	d2cb      	bcs.n	801a36e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a3d6:	f8db 0000 	ldr.w	r0, [fp]
 801a3da:	4629      	mov	r1, r5
 801a3dc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801a3e0:	6802      	ldr	r2, [r0, #0]
 801a3e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3e6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a3ea:	4632      	mov	r2, r6
 801a3ec:	47d0      	blx	sl
 801a3ee:	9b03      	ldr	r3, [sp, #12]
 801a3f0:	444e      	add	r6, r9
 801a3f2:	441d      	add	r5, r3
 801a3f4:	e7ed      	b.n	801a3d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a3f6:	bf00      	nop
 801a3f8:	2401b53c 	.word	0x2401b53c
 801a3fc:	2401b53e 	.word	0x2401b53e
 801a400:	2401b542 	.word	0x2401b542
 801a404:	2401b540 	.word	0x2401b540
 801a408:	2401b548 	.word	0x2401b548

0801a40c <_ZN8touchgfx8LCD24bppC1Ev>:
 801a40c:	2200      	movs	r2, #0
 801a40e:	490e      	ldr	r1, [pc, #56]	@ (801a448 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801a410:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801a414:	6001      	str	r1, [r0, #0]
 801a416:	6642      	str	r2, [r0, #100]	@ 0x64
 801a418:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a41c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a420:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801a424:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801a428:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801a42c:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801a430:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801a434:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801a438:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801a43c:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801a440:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801a444:	4770      	bx	lr
 801a446:	bf00      	nop
 801a448:	08023460 	.word	0x08023460

0801a44c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a450:	b091      	sub	sp, #68	@ 0x44
 801a452:	4607      	mov	r7, r0
 801a454:	4688      	mov	r8, r1
 801a456:	6810      	ldr	r0, [r2, #0]
 801a458:	6851      	ldr	r1, [r2, #4]
 801a45a:	ac0c      	add	r4, sp, #48	@ 0x30
 801a45c:	4616      	mov	r6, r2
 801a45e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801a462:	4d64      	ldr	r5, [pc, #400]	@ (801a5f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a464:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801a5f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a468:	c403      	stmia	r4!, {r0, r1}
 801a46a:	6818      	ldr	r0, [r3, #0]
 801a46c:	ac0e      	add	r4, sp, #56	@ 0x38
 801a46e:	6859      	ldr	r1, [r3, #4]
 801a470:	c403      	stmia	r4!, {r0, r1}
 801a472:	a80c      	add	r0, sp, #48	@ 0x30
 801a474:	f7fa f870 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a478:	4631      	mov	r1, r6
 801a47a:	a80e      	add	r0, sp, #56	@ 0x38
 801a47c:	f7fa f894 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a480:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a484:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a488:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a48c:	6828      	ldr	r0, [r5, #0]
 801a48e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a492:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801a496:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801a49a:	440f      	add	r7, r1
 801a49c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a4a0:	440a      	add	r2, r1
 801a4a2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a4a6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a4aa:	4413      	add	r3, r2
 801a4ac:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a4b0:	6803      	ldr	r3, [r0, #0]
 801a4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a4b4:	4798      	blx	r3
 801a4b6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a4ba:	6828      	ldr	r0, [r5, #0]
 801a4bc:	d01f      	beq.n	801a4fe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801a4be:	2201      	movs	r2, #1
 801a4c0:	2500      	movs	r5, #0
 801a4c2:	6801      	ldr	r1, [r0, #0]
 801a4c4:	b2a4      	uxth	r4, r4
 801a4c6:	b2b6      	uxth	r6, r6
 801a4c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a4cc:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801a4d0:	250b      	movs	r5, #11
 801a4d2:	9507      	str	r5, [sp, #28]
 801a4d4:	f8ba 5000 	ldrh.w	r5, [sl]
 801a4d8:	f8cd 9010 	str.w	r9, [sp, #16]
 801a4dc:	9602      	str	r6, [sp, #8]
 801a4de:	9401      	str	r4, [sp, #4]
 801a4e0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801a4e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a4e8:	9203      	str	r2, [sp, #12]
 801a4ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a4ee:	9200      	str	r2, [sp, #0]
 801a4f0:	4642      	mov	r2, r8
 801a4f2:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801a4f4:	4639      	mov	r1, r7
 801a4f6:	47a0      	blx	r4
 801a4f8:	b011      	add	sp, #68	@ 0x44
 801a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4fe:	6803      	ldr	r3, [r0, #0]
 801a500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a502:	4798      	blx	r3
 801a504:	f8ba 5000 	ldrh.w	r5, [sl]
 801a508:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a50c:	f04f 0e04 	mov.w	lr, #4
 801a510:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a514:	436e      	muls	r6, r5
 801a516:	fb05 2303 	mla	r3, r5, r3, r2
 801a51a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a51e:	1b2d      	subs	r5, r5, r4
 801a520:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a528:	4418      	add	r0, r3
 801a52a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a52e:	1982      	adds	r2, r0, r6
 801a530:	1b1b      	subs	r3, r3, r4
 801a532:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a536:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a538:	4290      	cmp	r0, r2
 801a53a:	d254      	bcs.n	801a5e6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a53c:	eb00 0a04 	add.w	sl, r0, r4
 801a540:	4550      	cmp	r0, sl
 801a542:	d24c      	bcs.n	801a5de <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801a544:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a548:	fb1e e101 	smlabb	r1, lr, r1, lr
 801a54c:	eb08 0c01 	add.w	ip, r8, r1
 801a550:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801a554:	b173      	cbz	r3, 801a574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a556:	2bff      	cmp	r3, #255	@ 0xff
 801a558:	f818 b001 	ldrb.w	fp, [r8, r1]
 801a55c:	d10c      	bne.n	801a578 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a55e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a562:	d109      	bne.n	801a578 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a564:	f880 b000 	strb.w	fp, [r0]
 801a568:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a56c:	7043      	strb	r3, [r0, #1]
 801a56e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801a572:	7083      	strb	r3, [r0, #2]
 801a574:	3003      	adds	r0, #3
 801a576:	e7e3      	b.n	801a540 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a578:	fb09 f103 	mul.w	r1, r9, r3
 801a57c:	1c4b      	adds	r3, r1, #1
 801a57e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a582:	7801      	ldrb	r1, [r0, #0]
 801a584:	121b      	asrs	r3, r3, #8
 801a586:	b29e      	uxth	r6, r3
 801a588:	43db      	mvns	r3, r3
 801a58a:	fb1b fb06 	smulbb	fp, fp, r6
 801a58e:	b2db      	uxtb	r3, r3
 801a590:	fb01 b103 	mla	r1, r1, r3, fp
 801a594:	b289      	uxth	r1, r1
 801a596:	f101 0b01 	add.w	fp, r1, #1
 801a59a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a59e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a5a2:	fb1b fb03 	smulbb	fp, fp, r3
 801a5a6:	1209      	asrs	r1, r1, #8
 801a5a8:	7001      	strb	r1, [r0, #0]
 801a5aa:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a5ae:	fb01 b106 	mla	r1, r1, r6, fp
 801a5b2:	b289      	uxth	r1, r1
 801a5b4:	f101 0b01 	add.w	fp, r1, #1
 801a5b8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a5bc:	1209      	asrs	r1, r1, #8
 801a5be:	7041      	strb	r1, [r0, #1]
 801a5c0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801a5c4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a5c8:	fb1c f303 	smulbb	r3, ip, r3
 801a5cc:	fb01 3606 	mla	r6, r1, r6, r3
 801a5d0:	b2b6      	uxth	r6, r6
 801a5d2:	1c73      	adds	r3, r6, #1
 801a5d4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a5d8:	1236      	asrs	r6, r6, #8
 801a5da:	7086      	strb	r6, [r0, #2]
 801a5dc:	e7ca      	b.n	801a574 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a5e0:	4428      	add	r0, r5
 801a5e2:	441f      	add	r7, r3
 801a5e4:	e7a8      	b.n	801a538 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801a5e6:	4b03      	ldr	r3, [pc, #12]	@ (801a5f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a5e8:	6818      	ldr	r0, [r3, #0]
 801a5ea:	6803      	ldr	r3, [r0, #0]
 801a5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a5ee:	4798      	blx	r3
 801a5f0:	e782      	b.n	801a4f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a5f2:	bf00      	nop
 801a5f4:	2401b548 	.word	0x2401b548
 801a5f8:	2401b542 	.word	0x2401b542

0801a5fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a600:	b091      	sub	sp, #68	@ 0x44
 801a602:	4680      	mov	r8, r0
 801a604:	460e      	mov	r6, r1
 801a606:	6810      	ldr	r0, [r2, #0]
 801a608:	6851      	ldr	r1, [r2, #4]
 801a60a:	ad0c      	add	r5, sp, #48	@ 0x30
 801a60c:	4614      	mov	r4, r2
 801a60e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801a612:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801a7ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801a616:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801a7b0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a61a:	c503      	stmia	r5!, {r0, r1}
 801a61c:	6818      	ldr	r0, [r3, #0]
 801a61e:	ad0e      	add	r5, sp, #56	@ 0x38
 801a620:	6859      	ldr	r1, [r3, #4]
 801a622:	c503      	stmia	r5!, {r0, r1}
 801a624:	a80c      	add	r0, sp, #48	@ 0x30
 801a626:	f7f9 ff97 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a62a:	4621      	mov	r1, r4
 801a62c:	a80e      	add	r0, sp, #56	@ 0x38
 801a62e:	f7f9 ffbb 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a632:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a636:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a63a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a63e:	f8d9 0000 	ldr.w	r0, [r9]
 801a642:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a646:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801a64a:	eb08 0401 	add.w	r4, r8, r1
 801a64e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a652:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801a656:	440a      	add	r2, r1
 801a658:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a65c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a660:	4413      	add	r3, r2
 801a662:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a666:	6803      	ldr	r3, [r0, #0]
 801a668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a66a:	4798      	blx	r3
 801a66c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a670:	f8d9 0000 	ldr.w	r0, [r9]
 801a674:	d022      	beq.n	801a6bc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a676:	2200      	movs	r2, #0
 801a678:	f04f 0c01 	mov.w	ip, #1
 801a67c:	6801      	ldr	r1, [r0, #0]
 801a67e:	b2ad      	uxth	r5, r5
 801a680:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a684:	e9cd c208 	strd	ip, r2, [sp, #32]
 801a688:	f04f 0c0b 	mov.w	ip, #11
 801a68c:	f8cd c01c 	str.w	ip, [sp, #28]
 801a690:	f8ba c000 	ldrh.w	ip, [sl]
 801a694:	9704      	str	r7, [sp, #16]
 801a696:	9502      	str	r5, [sp, #8]
 801a698:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801a69c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a6a0:	9203      	str	r2, [sp, #12]
 801a6a2:	fa1f f288 	uxth.w	r2, r8
 801a6a6:	9201      	str	r2, [sp, #4]
 801a6a8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a6ac:	9200      	str	r2, [sp, #0]
 801a6ae:	4632      	mov	r2, r6
 801a6b0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801a6b2:	4621      	mov	r1, r4
 801a6b4:	47a8      	blx	r5
 801a6b6:	b011      	add	sp, #68	@ 0x44
 801a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6bc:	6803      	ldr	r3, [r0, #0]
 801a6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6c0:	4798      	blx	r3
 801a6c2:	f8ba 2000 	ldrh.w	r2, [sl]
 801a6c6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a6ca:	f04f 0e03 	mov.w	lr, #3
 801a6ce:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801a6d2:	4355      	muls	r5, r2
 801a6d4:	fa1f fc87 	uxth.w	ip, r7
 801a6d8:	fb02 1303 	mla	r3, r2, r3, r1
 801a6dc:	eba2 0208 	sub.w	r2, r2, r8
 801a6e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a6e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a6ec:	4418      	add	r0, r3
 801a6ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a6f0:	1943      	adds	r3, r0, r5
 801a6f2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801a6f6:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801a6fa:	eba2 0208 	sub.w	r2, r2, r8
 801a6fe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a702:	b2ad      	uxth	r5, r5
 801a704:	4298      	cmp	r0, r3
 801a706:	d24a      	bcs.n	801a79e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801a708:	eb00 0908 	add.w	r9, r0, r8
 801a70c:	4621      	mov	r1, r4
 801a70e:	4548      	cmp	r0, r9
 801a710:	460c      	mov	r4, r1
 801a712:	d240      	bcs.n	801a796 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a714:	f04f 0a04 	mov.w	sl, #4
 801a718:	7824      	ldrb	r4, [r4, #0]
 801a71a:	2fff      	cmp	r7, #255	@ 0xff
 801a71c:	f101 0101 	add.w	r1, r1, #1
 801a720:	fb1e a404 	smlabb	r4, lr, r4, sl
 801a724:	eb06 0a04 	add.w	sl, r6, r4
 801a728:	f816 b004 	ldrb.w	fp, [r6, r4]
 801a72c:	d02b      	beq.n	801a786 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801a72e:	7804      	ldrb	r4, [r0, #0]
 801a730:	fb14 f405 	smulbb	r4, r4, r5
 801a734:	fb0b 440c 	mla	r4, fp, ip, r4
 801a738:	b2a4      	uxth	r4, r4
 801a73a:	f104 0b01 	add.w	fp, r4, #1
 801a73e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a742:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a746:	fb1b fb05 	smulbb	fp, fp, r5
 801a74a:	1224      	asrs	r4, r4, #8
 801a74c:	7004      	strb	r4, [r0, #0]
 801a74e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a752:	fb04 b40c 	mla	r4, r4, ip, fp
 801a756:	b2a4      	uxth	r4, r4
 801a758:	f104 0b01 	add.w	fp, r4, #1
 801a75c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a760:	1224      	asrs	r4, r4, #8
 801a762:	7044      	strb	r4, [r0, #1]
 801a764:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a768:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a76c:	fb1a fa05 	smulbb	sl, sl, r5
 801a770:	fb04 a40c 	mla	r4, r4, ip, sl
 801a774:	b2a4      	uxth	r4, r4
 801a776:	f104 0a01 	add.w	sl, r4, #1
 801a77a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a77e:	1224      	asrs	r4, r4, #8
 801a780:	7084      	strb	r4, [r0, #2]
 801a782:	3003      	adds	r0, #3
 801a784:	e7c3      	b.n	801a70e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801a786:	f880 b000 	strb.w	fp, [r0]
 801a78a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a78e:	7044      	strb	r4, [r0, #1]
 801a790:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a794:	e7f4      	b.n	801a780 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801a796:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a798:	4420      	add	r0, r4
 801a79a:	188c      	adds	r4, r1, r2
 801a79c:	e7b2      	b.n	801a704 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801a79e:	4b03      	ldr	r3, [pc, #12]	@ (801a7ac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a7a0:	6818      	ldr	r0, [r3, #0]
 801a7a2:	6803      	ldr	r3, [r0, #0]
 801a7a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7a6:	4798      	blx	r3
 801a7a8:	e785      	b.n	801a6b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801a7aa:	bf00      	nop
 801a7ac:	2401b548 	.word	0x2401b548
 801a7b0:	2401b542 	.word	0x2401b542

0801a7b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a7b4:	b4f0      	push	{r4, r5, r6, r7}
 801a7b6:	460c      	mov	r4, r1
 801a7b8:	4611      	mov	r1, r2
 801a7ba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a7be:	461a      	mov	r2, r3
 801a7c0:	780f      	ldrb	r7, [r1, #0]
 801a7c2:	9b04      	ldr	r3, [sp, #16]
 801a7c4:	784e      	ldrb	r6, [r1, #1]
 801a7c6:	b11f      	cbz	r7, 801a7d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801a7c8:	2f01      	cmp	r7, #1
 801a7ca:	d01d      	beq.n	801a808 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801a7cc:	bcf0      	pop	{r4, r5, r6, r7}
 801a7ce:	4770      	bx	lr
 801a7d0:	2e03      	cmp	r6, #3
 801a7d2:	d8fb      	bhi.n	801a7cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a7d4:	e8df f006 	tbb	[pc, r6]
 801a7d8:	16140702 	.word	0x16140702
 801a7dc:	9504      	str	r5, [sp, #16]
 801a7de:	4620      	mov	r0, r4
 801a7e0:	bcf0      	pop	{r4, r5, r6, r7}
 801a7e2:	f7ff be33 	b.w	801a44c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a7e6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	d0ef      	beq.n	801a7cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a7ec:	6806      	ldr	r6, [r0, #0]
 801a7ee:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a7f2:	68f5      	ldr	r5, [r6, #12]
 801a7f4:	4613      	mov	r3, r2
 801a7f6:	46ac      	mov	ip, r5
 801a7f8:	460a      	mov	r2, r1
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	bcf0      	pop	{r4, r5, r6, r7}
 801a7fe:	4760      	bx	ip
 801a800:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a802:	e7f1      	b.n	801a7e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a804:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a806:	e7ef      	b.n	801a7e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a808:	2e03      	cmp	r6, #3
 801a80a:	d8df      	bhi.n	801a7cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a80c:	e8df f006 	tbb	[pc, r6]
 801a810:	110f0702 	.word	0x110f0702
 801a814:	9504      	str	r5, [sp, #16]
 801a816:	4620      	mov	r0, r4
 801a818:	bcf0      	pop	{r4, r5, r6, r7}
 801a81a:	f7ff beef 	b.w	801a5fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a81e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a820:	2800      	cmp	r0, #0
 801a822:	d0d3      	beq.n	801a7cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a824:	6806      	ldr	r6, [r0, #0]
 801a826:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a82a:	68b5      	ldr	r5, [r6, #8]
 801a82c:	e7e2      	b.n	801a7f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801a82e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a830:	e7f6      	b.n	801a820 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801a832:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a834:	e7f4      	b.n	801a820 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801a838 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801a838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a83c:	4605      	mov	r5, r0
 801a83e:	b08f      	sub	sp, #60	@ 0x3c
 801a840:	460c      	mov	r4, r1
 801a842:	461f      	mov	r7, r3
 801a844:	2b00      	cmp	r3, #0
 801a846:	d052      	beq.n	801a8ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a848:	6808      	ldr	r0, [r1, #0]
 801a84a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a84c:	6849      	ldr	r1, [r1, #4]
 801a84e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801aa18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801a852:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801aa1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801a856:	c303      	stmia	r3!, {r0, r1}
 801a858:	6810      	ldr	r0, [r2, #0]
 801a85a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a85c:	6851      	ldr	r1, [r2, #4]
 801a85e:	c303      	stmia	r3!, {r0, r1}
 801a860:	a80a      	add	r0, sp, #40	@ 0x28
 801a862:	f7f9 fe79 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a866:	4621      	mov	r1, r4
 801a868:	a80c      	add	r0, sp, #48	@ 0x30
 801a86a:	f7f9 fe9d 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a86e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a872:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a876:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a87a:	f8d8 0000 	ldr.w	r0, [r8]
 801a87e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a882:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801a886:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801a88a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801a88e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801a892:	440a      	add	r2, r1
 801a894:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a898:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801a89c:	4413      	add	r3, r2
 801a89e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a8a2:	6803      	ldr	r3, [r0, #0]
 801a8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8a6:	4798      	blx	r3
 801a8a8:	2fff      	cmp	r7, #255	@ 0xff
 801a8aa:	d023      	beq.n	801a8f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801a8ac:	f010 0f04 	tst.w	r0, #4
 801a8b0:	f8d8 0000 	ldr.w	r0, [r8]
 801a8b4:	d021      	beq.n	801a8fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801a8b6:	2100      	movs	r1, #0
 801a8b8:	f04f 0e01 	mov.w	lr, #1
 801a8bc:	f8d0 c000 	ldr.w	ip, [r0]
 801a8c0:	b2a4      	uxth	r4, r4
 801a8c2:	9106      	str	r1, [sp, #24]
 801a8c4:	b2b6      	uxth	r6, r6
 801a8c6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a8ca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a8ce:	e9cd e107 	strd	lr, r1, [sp, #28]
 801a8d2:	f8b9 e000 	ldrh.w	lr, [r9]
 801a8d6:	9703      	str	r7, [sp, #12]
 801a8d8:	9401      	str	r4, [sp, #4]
 801a8da:	9600      	str	r6, [sp, #0]
 801a8dc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a8e0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a8e4:	9102      	str	r1, [sp, #8]
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801a8ec:	47a0      	blx	r4
 801a8ee:	b00f      	add	sp, #60	@ 0x3c
 801a8f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8f4:	f010 0f01 	tst.w	r0, #1
 801a8f8:	e7da      	b.n	801a8b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801a8fa:	6803      	ldr	r3, [r0, #0]
 801a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a8fe:	4798      	blx	r3
 801a900:	f8b9 1000 	ldrh.w	r1, [r9]
 801a904:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a908:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801a90c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a910:	434c      	muls	r4, r1
 801a912:	2fff      	cmp	r7, #255	@ 0xff
 801a914:	fb01 2303 	mla	r3, r1, r3, r2
 801a918:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a91c:	eba1 0106 	sub.w	r1, r1, r6
 801a920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a924:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a928:	4418      	add	r0, r3
 801a92a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a92e:	eba3 0606 	sub.w	r6, r3, r6
 801a932:	4404      	add	r4, r0
 801a934:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801a938:	d04a      	beq.n	801a9d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801a93a:	43fa      	mvns	r2, r7
 801a93c:	b2bb      	uxth	r3, r7
 801a93e:	b2d7      	uxtb	r7, r2
 801a940:	42a0      	cmp	r0, r4
 801a942:	d263      	bcs.n	801aa0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a944:	eb00 0e0c 	add.w	lr, r0, ip
 801a948:	4586      	cmp	lr, r0
 801a94a:	f100 0803 	add.w	r8, r0, #3
 801a94e:	d93a      	bls.n	801a9c6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801a950:	f835 2b02 	ldrh.w	r2, [r5], #2
 801a954:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801a958:	00d0      	lsls	r0, r2, #3
 801a95a:	fb19 f907 	smulbb	r9, r9, r7
 801a95e:	b2c0      	uxtb	r0, r0
 801a960:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a964:	fb00 9003 	mla	r0, r0, r3, r9
 801a968:	b280      	uxth	r0, r0
 801a96a:	f100 0901 	add.w	r9, r0, #1
 801a96e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a972:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801a976:	fb19 f907 	smulbb	r9, r9, r7
 801a97a:	1200      	asrs	r0, r0, #8
 801a97c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801a980:	10d0      	asrs	r0, r2, #3
 801a982:	1212      	asrs	r2, r2, #8
 801a984:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801a988:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801a98c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801a990:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a994:	fb00 9003 	mla	r0, r0, r3, r9
 801a998:	b280      	uxth	r0, r0
 801a99a:	f100 0901 	add.w	r9, r0, #1
 801a99e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a9a2:	1200      	asrs	r0, r0, #8
 801a9a4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801a9a8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801a9ac:	fb10 f007 	smulbb	r0, r0, r7
 801a9b0:	fb02 0203 	mla	r2, r2, r3, r0
 801a9b4:	b292      	uxth	r2, r2
 801a9b6:	1c50      	adds	r0, r2, #1
 801a9b8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a9bc:	4640      	mov	r0, r8
 801a9be:	1212      	asrs	r2, r2, #8
 801a9c0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801a9c4:	e7c0      	b.n	801a948 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801a9c6:	4408      	add	r0, r1
 801a9c8:	4435      	add	r5, r6
 801a9ca:	e7b9      	b.n	801a940 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801a9cc:	4408      	add	r0, r1
 801a9ce:	4435      	add	r5, r6
 801a9d0:	42a0      	cmp	r0, r4
 801a9d2:	d21b      	bcs.n	801aa0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a9d4:	eb00 070c 	add.w	r7, r0, ip
 801a9d8:	42b8      	cmp	r0, r7
 801a9da:	d2f7      	bcs.n	801a9cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801a9dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801a9e0:	3003      	adds	r0, #3
 801a9e2:	00da      	lsls	r2, r3, #3
 801a9e4:	b2d2      	uxtb	r2, r2
 801a9e6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a9ea:	f800 2c03 	strb.w	r2, [r0, #-3]
 801a9ee:	10da      	asrs	r2, r3, #3
 801a9f0:	121b      	asrs	r3, r3, #8
 801a9f2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801a9f6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801a9fa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a9fe:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801aa02:	f800 2c02 	strb.w	r2, [r0, #-2]
 801aa06:	f800 3c01 	strb.w	r3, [r0, #-1]
 801aa0a:	e7e5      	b.n	801a9d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801aa0c:	4b02      	ldr	r3, [pc, #8]	@ (801aa18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801aa0e:	6818      	ldr	r0, [r3, #0]
 801aa10:	6803      	ldr	r3, [r0, #0]
 801aa12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aa14:	4798      	blx	r3
 801aa16:	e76a      	b.n	801a8ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801aa18:	2401b548 	.word	0x2401b548
 801aa1c:	2401b542 	.word	0x2401b542

0801aa20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa24:	b08a      	sub	sp, #40	@ 0x28
 801aa26:	460d      	mov	r5, r1
 801aa28:	4604      	mov	r4, r0
 801aa2a:	461e      	mov	r6, r3
 801aa2c:	6808      	ldr	r0, [r1, #0]
 801aa2e:	ab06      	add	r3, sp, #24
 801aa30:	6849      	ldr	r1, [r1, #4]
 801aa32:	4f5d      	ldr	r7, [pc, #372]	@ (801aba8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801aa34:	c303      	stmia	r3!, {r0, r1}
 801aa36:	6810      	ldr	r0, [r2, #0]
 801aa38:	ab08      	add	r3, sp, #32
 801aa3a:	6851      	ldr	r1, [r2, #4]
 801aa3c:	c303      	stmia	r3!, {r0, r1}
 801aa3e:	a806      	add	r0, sp, #24
 801aa40:	f7f9 fd8a 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aa44:	4629      	mov	r1, r5
 801aa46:	a808      	add	r0, sp, #32
 801aa48:	f7f9 fdae 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aa4c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801aa50:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801aa54:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801aa58:	6838      	ldr	r0, [r7, #0]
 801aa5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aa5e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801aa62:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801aa66:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801aa6a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801aa6e:	440a      	add	r2, r1
 801aa70:	f8ad 2020 	strh.w	r2, [sp, #32]
 801aa74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801aa78:	4413      	add	r3, r2
 801aa7a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801aa7e:	6803      	ldr	r3, [r0, #0]
 801aa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aa82:	4798      	blx	r3
 801aa84:	2eff      	cmp	r6, #255	@ 0xff
 801aa86:	d119      	bne.n	801aabc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801aa88:	f010 0f20 	tst.w	r0, #32
 801aa8c:	6838      	ldr	r0, [r7, #0]
 801aa8e:	d018      	beq.n	801aac2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801aa90:	b2ad      	uxth	r5, r5
 801aa92:	2700      	movs	r7, #0
 801aa94:	6801      	ldr	r1, [r0, #0]
 801aa96:	9501      	str	r5, [sp, #4]
 801aa98:	fa1f f588 	uxth.w	r5, r8
 801aa9c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801aaa0:	9500      	str	r5, [sp, #0]
 801aaa2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801aaa6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801aaaa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801aaae:	9602      	str	r6, [sp, #8]
 801aab0:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801aab2:	4621      	mov	r1, r4
 801aab4:	47a8      	blx	r5
 801aab6:	b00a      	add	sp, #40	@ 0x28
 801aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aabc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801aac0:	e7e4      	b.n	801aa8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801aac2:	6803      	ldr	r3, [r0, #0]
 801aac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aac6:	4798      	blx	r3
 801aac8:	4b38      	ldr	r3, [pc, #224]	@ (801abac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801aaca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801aace:	f8b3 c000 	ldrh.w	ip, [r3]
 801aad2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801aad6:	fb0c f505 	mul.w	r5, ip, r5
 801aada:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801aade:	fb0c 2303 	mla	r3, ip, r3, r2
 801aae2:	ebac 0c08 	sub.w	ip, ip, r8
 801aae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aaea:	ebae 0e08 	sub.w	lr, lr, r8
 801aaee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaf2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801aaf6:	4418      	add	r0, r3
 801aaf8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801aafc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ab00:	4405      	add	r5, r0
 801ab02:	42a8      	cmp	r0, r5
 801ab04:	d24a      	bcs.n	801ab9c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801ab06:	eb00 0803 	add.w	r8, r0, r3
 801ab0a:	4540      	cmp	r0, r8
 801ab0c:	d243      	bcs.n	801ab96 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801ab0e:	78e2      	ldrb	r2, [r4, #3]
 801ab10:	b15a      	cbz	r2, 801ab2a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801ab12:	2aff      	cmp	r2, #255	@ 0xff
 801ab14:	f894 9000 	ldrb.w	r9, [r4]
 801ab18:	d10a      	bne.n	801ab30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ab1a:	2eff      	cmp	r6, #255	@ 0xff
 801ab1c:	d108      	bne.n	801ab30 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801ab1e:	f880 9000 	strb.w	r9, [r0]
 801ab22:	7862      	ldrb	r2, [r4, #1]
 801ab24:	7042      	strb	r2, [r0, #1]
 801ab26:	78a2      	ldrb	r2, [r4, #2]
 801ab28:	7082      	strb	r2, [r0, #2]
 801ab2a:	3003      	adds	r0, #3
 801ab2c:	3404      	adds	r4, #4
 801ab2e:	e7ec      	b.n	801ab0a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801ab30:	4372      	muls	r2, r6
 801ab32:	1c51      	adds	r1, r2, #1
 801ab34:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801ab38:	1209      	asrs	r1, r1, #8
 801ab3a:	fa1f fa81 	uxth.w	sl, r1
 801ab3e:	43c9      	mvns	r1, r1
 801ab40:	fb19 f90a 	smulbb	r9, r9, sl
 801ab44:	b2ca      	uxtb	r2, r1
 801ab46:	7801      	ldrb	r1, [r0, #0]
 801ab48:	fb01 9902 	mla	r9, r1, r2, r9
 801ab4c:	fa1f f989 	uxth.w	r9, r9
 801ab50:	f109 0101 	add.w	r1, r9, #1
 801ab54:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801ab58:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab5c:	f880 9000 	strb.w	r9, [r0]
 801ab60:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ab64:	7861      	ldrb	r1, [r4, #1]
 801ab66:	fb19 f902 	smulbb	r9, r9, r2
 801ab6a:	fb01 910a 	mla	r1, r1, sl, r9
 801ab6e:	b289      	uxth	r1, r1
 801ab70:	f101 0901 	add.w	r9, r1, #1
 801ab74:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ab78:	1209      	asrs	r1, r1, #8
 801ab7a:	7041      	strb	r1, [r0, #1]
 801ab7c:	7881      	ldrb	r1, [r0, #2]
 801ab7e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801ab82:	fb11 f202 	smulbb	r2, r1, r2
 801ab86:	fb09 220a 	mla	r2, r9, sl, r2
 801ab8a:	b292      	uxth	r2, r2
 801ab8c:	1c51      	adds	r1, r2, #1
 801ab8e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ab92:	1212      	asrs	r2, r2, #8
 801ab94:	e7c8      	b.n	801ab28 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801ab96:	4460      	add	r0, ip
 801ab98:	4474      	add	r4, lr
 801ab9a:	e7b2      	b.n	801ab02 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801ab9c:	6838      	ldr	r0, [r7, #0]
 801ab9e:	6803      	ldr	r3, [r0, #0]
 801aba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801aba2:	4798      	blx	r3
 801aba4:	e787      	b.n	801aab6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801aba6:	bf00      	nop
 801aba8:	2401b548 	.word	0x2401b548
 801abac:	2401b542 	.word	0x2401b542

0801abb0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801abb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801abb4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801abb8:	4607      	mov	r7, r0
 801abba:	460c      	mov	r4, r1
 801abbc:	4692      	mov	sl, r2
 801abbe:	4699      	mov	r9, r3
 801abc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801abc2:	b31d      	cbz	r5, 801ac0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801abc4:	4608      	mov	r0, r1
 801abc6:	f7fc fb89 	bl	80172dc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801abca:	4680      	mov	r8, r0
 801abcc:	4620      	mov	r0, r4
 801abce:	f7fc fbb9 	bl	8017344 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801abd2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801abd6:	4620      	mov	r0, r4
 801abd8:	f8ad a008 	strh.w	sl, [sp, #8]
 801abdc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801abe0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801abe4:	f7fc fcb8 	bl	8017558 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801abe8:	280b      	cmp	r0, #11
 801abea:	d80f      	bhi.n	801ac0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801abec:	e8df f000 	tbb	[pc, r0]
 801abf0:	0e062a21 	.word	0x0e062a21
 801abf4:	0e0e0e0e 	.word	0x0e0e0e0e
 801abf8:	110e0e0e 	.word	0x110e0e0e
 801abfc:	4620      	mov	r0, r4
 801abfe:	f7fc fc27 	bl	8017450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ac02:	462b      	mov	r3, r5
 801ac04:	4632      	mov	r2, r6
 801ac06:	a902      	add	r1, sp, #8
 801ac08:	f7ff ff0a 	bl	801aa20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ac0c:	b004      	add	sp, #16
 801ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac12:	4620      	mov	r0, r4
 801ac14:	f7fc fc1c 	bl	8017450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ac18:	4680      	mov	r8, r0
 801ac1a:	4620      	mov	r0, r4
 801ac1c:	f7fc fc48 	bl	80174b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ac20:	ab02      	add	r3, sp, #8
 801ac22:	4602      	mov	r2, r0
 801ac24:	4641      	mov	r1, r8
 801ac26:	4638      	mov	r0, r7
 801ac28:	e9cd 6500 	strd	r6, r5, [sp]
 801ac2c:	f7ff fdc2 	bl	801a7b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ac30:	e7ec      	b.n	801ac0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ac32:	4620      	mov	r0, r4
 801ac34:	f7fc fc0c 	bl	8017450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ac38:	462b      	mov	r3, r5
 801ac3a:	4632      	mov	r2, r6
 801ac3c:	a902      	add	r1, sp, #8
 801ac3e:	f7ff fdfb 	bl	801a838 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ac42:	e7e3      	b.n	801ac0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	4620      	mov	r0, r4
 801ac48:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801ac4c:	f7fc fc00 	bl	8017450 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ac50:	2300      	movs	r3, #0
 801ac52:	4601      	mov	r1, r0
 801ac54:	aa02      	add	r2, sp, #8
 801ac56:	4638      	mov	r0, r7
 801ac58:	e9cd 5300 	strd	r5, r3, [sp]
 801ac5c:	4633      	mov	r3, r6
 801ac5e:	47c0      	blx	r8
 801ac60:	e7d4      	b.n	801ac0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801ac62 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ac62:	b4f0      	push	{r4, r5, r6, r7}
 801ac64:	4616      	mov	r6, r2
 801ac66:	461c      	mov	r4, r3
 801ac68:	460d      	mov	r5, r1
 801ac6a:	9a04      	ldr	r2, [sp, #16]
 801ac6c:	2e01      	cmp	r6, #1
 801ac6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ac72:	d00e      	beq.n	801ac92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801ac74:	d303      	bcc.n	801ac7e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801ac76:	2e02      	cmp	r6, #2
 801ac78:	d006      	beq.n	801ac88 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801ac7a:	bcf0      	pop	{r4, r5, r6, r7}
 801ac7c:	4770      	bx	lr
 801ac7e:	4621      	mov	r1, r4
 801ac80:	4628      	mov	r0, r5
 801ac82:	bcf0      	pop	{r4, r5, r6, r7}
 801ac84:	f7ff bdd8 	b.w	801a838 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ac88:	4621      	mov	r1, r4
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	bcf0      	pop	{r4, r5, r6, r7}
 801ac8e:	f7ff bec7 	b.w	801aa20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ac92:	6805      	ldr	r5, [r0, #0]
 801ac94:	2600      	movs	r6, #0
 801ac96:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ac9a:	68ed      	ldr	r5, [r5, #12]
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	4622      	mov	r2, r4
 801aca0:	46ac      	mov	ip, r5
 801aca2:	bcf0      	pop	{r4, r5, r6, r7}
 801aca4:	4760      	bx	ip
	...

0801aca8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801aca8:	b160      	cbz	r0, 801acc4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801acaa:	2903      	cmp	r1, #3
 801acac:	d818      	bhi.n	801ace0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801acae:	e8df f001 	tbb	[pc, r1]
 801acb2:	1902      	.short	0x1902
 801acb4:	1b06      	.short	0x1b06
 801acb6:	4b0e      	ldr	r3, [pc, #56]	@ (801acf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801acb8:	8818      	ldrh	r0, [r3, #0]
 801acba:	4240      	negs	r0, r0
 801acbc:	4770      	bx	lr
 801acbe:	4b0c      	ldr	r3, [pc, #48]	@ (801acf0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801acc0:	8818      	ldrh	r0, [r3, #0]
 801acc2:	4770      	bx	lr
 801acc4:	2903      	cmp	r1, #3
 801acc6:	d80b      	bhi.n	801ace0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801acc8:	a301      	add	r3, pc, #4	@ (adr r3, 801acd0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801acca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801acce:	bf00      	nop
 801acd0:	0801ace5 	.word	0x0801ace5
 801acd4:	0801acbf 	.word	0x0801acbf
 801acd8:	0801ace9 	.word	0x0801ace9
 801acdc:	0801acb7 	.word	0x0801acb7
 801ace0:	2000      	movs	r0, #0
 801ace2:	4770      	bx	lr
 801ace4:	2001      	movs	r0, #1
 801ace6:	4770      	bx	lr
 801ace8:	f04f 30ff 	mov.w	r0, #4294967295
 801acec:	4770      	bx	lr
 801acee:	bf00      	nop
 801acf0:	2401b542 	.word	0x2401b542

0801acf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801acf4:	b160      	cbz	r0, 801ad10 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801acf6:	2903      	cmp	r1, #3
 801acf8:	d818      	bhi.n	801ad2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801acfa:	e8df f001 	tbb	[pc, r1]
 801acfe:	0219      	.short	0x0219
 801ad00:	051b      	.short	0x051b
 801ad02:	4b0e      	ldr	r3, [pc, #56]	@ (801ad3c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ad04:	8818      	ldrh	r0, [r3, #0]
 801ad06:	4770      	bx	lr
 801ad08:	4b0c      	ldr	r3, [pc, #48]	@ (801ad3c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801ad0a:	8818      	ldrh	r0, [r3, #0]
 801ad0c:	4240      	negs	r0, r0
 801ad0e:	4770      	bx	lr
 801ad10:	2903      	cmp	r1, #3
 801ad12:	d80b      	bhi.n	801ad2c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801ad14:	a301      	add	r3, pc, #4	@ (adr r3, 801ad1c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801ad16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ad1a:	bf00      	nop
 801ad1c:	0801ad03 	.word	0x0801ad03
 801ad20:	0801ad35 	.word	0x0801ad35
 801ad24:	0801ad09 	.word	0x0801ad09
 801ad28:	0801ad31 	.word	0x0801ad31
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	4770      	bx	lr
 801ad30:	2001      	movs	r0, #1
 801ad32:	4770      	bx	lr
 801ad34:	f04f 30ff 	mov.w	r0, #4294967295
 801ad38:	4770      	bx	lr
 801ad3a:	bf00      	nop
 801ad3c:	2401b542 	.word	0x2401b542

0801ad40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad44:	b097      	sub	sp, #92	@ 0x5c
 801ad46:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ad48:	a912      	add	r1, sp, #72	@ 0x48
 801ad4a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801ad4e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801ad52:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801ad56:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801ad5a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801ad5e:	e881 000c 	stmia.w	r1, {r2, r3}
 801ad62:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801ad66:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad68:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801ad6c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801ad70:	9311      	str	r3, [sp, #68]	@ 0x44
 801ad72:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801ad76:	798d      	ldrb	r5, [r1, #6]
 801ad78:	930c      	str	r3, [sp, #48]	@ 0x30
 801ad7a:	7b4b      	ldrb	r3, [r1, #13]
 801ad7c:	0158      	lsls	r0, r3, #5
 801ad7e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ad82:	4328      	orrs	r0, r5
 801ad84:	9009      	str	r0, [sp, #36]	@ 0x24
 801ad86:	f000 817c 	beq.w	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ad8a:	011b      	lsls	r3, r3, #4
 801ad8c:	79c8      	ldrb	r0, [r1, #7]
 801ad8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ad92:	4303      	orrs	r3, r0
 801ad94:	930e      	str	r3, [sp, #56]	@ 0x38
 801ad96:	f000 8174 	beq.w	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ad9a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	2f00      	cmp	r7, #0
 801ada2:	f000 8116 	beq.w	801afd2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801ada6:	1aff      	subs	r7, r7, r3
 801ada8:	b2bf      	uxth	r7, r7
 801adaa:	043b      	lsls	r3, r7, #16
 801adac:	d502      	bpl.n	801adb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801adae:	1bf6      	subs	r6, r6, r7
 801adb0:	2700      	movs	r7, #0
 801adb2:	b236      	sxth	r6, r6
 801adb4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801adb8:	a812      	add	r0, sp, #72	@ 0x48
 801adba:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801adbe:	428e      	cmp	r6, r1
 801adc0:	b28b      	uxth	r3, r1
 801adc2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801adc6:	bfbf      	itttt	lt
 801adc8:	18ff      	addlt	r7, r7, r3
 801adca:	1bbe      	sublt	r6, r7, r6
 801adcc:	b2b7      	uxthlt	r7, r6
 801adce:	460e      	movlt	r6, r1
 801add0:	8891      	ldrh	r1, [r2, #4]
 801add2:	440b      	add	r3, r1
 801add4:	4631      	mov	r1, r6
 801add6:	b21b      	sxth	r3, r3
 801add8:	9310      	str	r3, [sp, #64]	@ 0x40
 801adda:	88d3      	ldrh	r3, [r2, #6]
 801addc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801adde:	449a      	add	sl, r3
 801ade0:	fa0f f38a 	sxth.w	r3, sl
 801ade4:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801ade8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801adea:	4bb5      	ldr	r3, [pc, #724]	@ (801b0c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801adec:	f893 b000 	ldrb.w	fp, [r3]
 801adf0:	f10b 3cff 	add.w	ip, fp, #4294967295
 801adf4:	f1dc 0300 	rsbs	r3, ip, #0
 801adf8:	eb43 030c 	adc.w	r3, r3, ip
 801adfc:	930d      	str	r3, [sp, #52]	@ 0x34
 801adfe:	464b      	mov	r3, r9
 801ae00:	f7f9 fa1e 	bl	8014240 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ae04:	4631      	mov	r1, r6
 801ae06:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801ae0a:	464b      	mov	r3, r9
 801ae0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae0e:	a812      	add	r0, sp, #72	@ 0x48
 801ae10:	f7f9 fa33 	bl	801427a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ae14:	a916      	add	r1, sp, #88	@ 0x58
 801ae16:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ae1a:	a815      	add	r0, sp, #84	@ 0x54
 801ae1c:	f7f9 fb5a 	bl	80144d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ae20:	f1b9 0f00 	cmp.w	r9, #0
 801ae24:	f040 80d8 	bne.w	801afd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801ae28:	f1bb 0f01 	cmp.w	fp, #1
 801ae2c:	f040 80dc 	bne.w	801afe8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ae30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ae32:	b153      	cbz	r3, 801ae4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ae34:	2508      	movs	r5, #8
 801ae36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae38:	fb95 f3f8 	sdiv	r3, r5, r8
 801ae3c:	1e5d      	subs	r5, r3, #1
 801ae3e:	4415      	add	r5, r2
 801ae40:	fb95 f5f3 	sdiv	r5, r5, r3
 801ae44:	fb15 f503 	smulbb	r5, r5, r3
 801ae48:	b2ad      	uxth	r5, r5
 801ae4a:	b907      	cbnz	r7, 801ae4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ae4c:	b16c      	cbz	r4, 801ae6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ae4e:	fb04 7305 	mla	r3, r4, r5, r7
 801ae52:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ae54:	ebaa 0a04 	sub.w	sl, sl, r4
 801ae58:	fb08 f303 	mul.w	r3, r8, r3
 801ae5c:	fa1f fa8a 	uxth.w	sl, sl
 801ae60:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ae64:	f003 0407 	and.w	r4, r3, #7
 801ae68:	9226      	str	r2, [sp, #152]	@ 0x98
 801ae6a:	4649      	mov	r1, r9
 801ae6c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ae6e:	f7ff ff1b 	bl	801aca8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ae72:	4683      	mov	fp, r0
 801ae74:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ae76:	f7ff ff3d 	bl	801acf4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ae7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ae7e:	4681      	mov	r9, r0
 801ae80:	1a9b      	subs	r3, r3, r2
 801ae82:	459a      	cmp	sl, r3
 801ae84:	bfa8      	it	ge
 801ae86:	469a      	movge	sl, r3
 801ae88:	f1ba 0f00 	cmp.w	sl, #0
 801ae8c:	f340 80f9 	ble.w	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ae90:	1bf6      	subs	r6, r6, r7
 801ae92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ae94:	1b9e      	subs	r6, r3, r6
 801ae96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae98:	429e      	cmp	r6, r3
 801ae9a:	bfd4      	ite	le
 801ae9c:	ebc7 0706 	rsble	r7, r7, r6
 801aea0:	ebc7 0703 	rsbgt	r7, r7, r3
 801aea4:	2f00      	cmp	r7, #0
 801aea6:	f340 80ec 	ble.w	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801aeaa:	1bed      	subs	r5, r5, r7
 801aeac:	fb08 f305 	mul.w	r3, r8, r5
 801aeb0:	930d      	str	r3, [sp, #52]	@ 0x34
 801aeb2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aeb4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801aeb8:	930e      	str	r3, [sp, #56]	@ 0x38
 801aeba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aebc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aec0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801aec2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aec4:	b2db      	uxtb	r3, r3
 801aec6:	9310      	str	r3, [sp, #64]	@ 0x40
 801aec8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	f040 80de 	bne.w	801b08c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801aed0:	4b7c      	ldr	r3, [pc, #496]	@ (801b0c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801aed2:	6818      	ldr	r0, [r3, #0]
 801aed4:	6803      	ldr	r3, [r0, #0]
 801aed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aed8:	4798      	blx	r3
 801aeda:	2301      	movs	r3, #1
 801aedc:	4a7a      	ldr	r2, [pc, #488]	@ (801b0c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801aede:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801aee2:	fb07 9b1b 	mls	fp, r7, fp, r9
 801aee6:	fa03 f308 	lsl.w	r3, r3, r8
 801aeea:	8811      	ldrh	r1, [r2, #0]
 801aeec:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801aef0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801aef4:	3b01      	subs	r3, #1
 801aef6:	fb06 bb07 	mla	fp, r6, r7, fp
 801aefa:	b2db      	uxtb	r3, r3
 801aefc:	930a      	str	r3, [sp, #40]	@ 0x28
 801aefe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801af02:	fb01 2303 	mla	r3, r1, r3, r2
 801af06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af0a:	18c3      	adds	r3, r0, r3
 801af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801af0e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801af10:	781a      	ldrb	r2, [r3, #0]
 801af12:	4122      	asrs	r2, r4
 801af14:	b2d2      	uxtb	r2, r2
 801af16:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801af1a:	f0c0 80d7 	bcc.w	801b0cc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801af1e:	46be      	mov	lr, r7
 801af20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801af22:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801af26:	f0c0 80ba 	bcc.w	801b09e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801af2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801af2c:	4013      	ands	r3, r2
 801af2e:	d041      	beq.n	801afb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801af30:	20ff      	movs	r0, #255	@ 0xff
 801af32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801af34:	fb90 f5f5 	sdiv	r5, r0, r5
 801af38:	436b      	muls	r3, r5
 801af3a:	2bfe      	cmp	r3, #254	@ 0xfe
 801af3c:	dd03      	ble.n	801af46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801af3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801af40:	4285      	cmp	r5, r0
 801af42:	f000 80a5 	beq.w	801b090 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801af46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801af48:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801af4a:	fb15 f303 	smulbb	r3, r5, r3
 801af4e:	b29b      	uxth	r3, r3
 801af50:	1c5d      	adds	r5, r3, #1
 801af52:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801af56:	780d      	ldrb	r5, [r1, #0]
 801af58:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801af5c:	fa1f fc83 	uxth.w	ip, r3
 801af60:	43db      	mvns	r3, r3
 801af62:	fb10 f90c 	smulbb	r9, r0, ip
 801af66:	b2db      	uxtb	r3, r3
 801af68:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801af6a:	fb05 9503 	mla	r5, r5, r3, r9
 801af6e:	b2ad      	uxth	r5, r5
 801af70:	f105 0901 	add.w	r9, r5, #1
 801af74:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801af78:	fb10 f90c 	smulbb	r9, r0, ip
 801af7c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801af7e:	122d      	asrs	r5, r5, #8
 801af80:	fb10 fc0c 	smulbb	ip, r0, ip
 801af84:	700d      	strb	r5, [r1, #0]
 801af86:	784d      	ldrb	r5, [r1, #1]
 801af88:	fb05 9503 	mla	r5, r5, r3, r9
 801af8c:	b2ad      	uxth	r5, r5
 801af8e:	f105 0901 	add.w	r9, r5, #1
 801af92:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801af96:	122d      	asrs	r5, r5, #8
 801af98:	704d      	strb	r5, [r1, #1]
 801af9a:	788d      	ldrb	r5, [r1, #2]
 801af9c:	fb05 cc03 	mla	ip, r5, r3, ip
 801afa0:	fa1f fc8c 	uxth.w	ip, ip
 801afa4:	f10c 0301 	add.w	r3, ip, #1
 801afa8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801afac:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801afb0:	f881 c002 	strb.w	ip, [r1, #2]
 801afb4:	4444      	add	r4, r8
 801afb6:	4431      	add	r1, r6
 801afb8:	b2a4      	uxth	r4, r4
 801afba:	2c07      	cmp	r4, #7
 801afbc:	bf89      	itett	hi
 801afbe:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801afc0:	fa42 f208 	asrls.w	r2, r2, r8
 801afc4:	2400      	movhi	r4, #0
 801afc6:	785a      	ldrbhi	r2, [r3, #1]
 801afc8:	bf8a      	itet	hi
 801afca:	3301      	addhi	r3, #1
 801afcc:	b2d2      	uxtbls	r2, r2
 801afce:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801afd0:	e7a7      	b.n	801af22 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801afd2:	441e      	add	r6, r3
 801afd4:	b236      	sxth	r6, r6
 801afd6:	e6ed      	b.n	801adb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801afd8:	f1b9 0f01 	cmp.w	r9, #1
 801afdc:	f47f af28 	bne.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801afe0:	f1bb 0f01 	cmp.w	fp, #1
 801afe4:	f47f af24 	bne.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801afe8:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801b0c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801afec:	f8db 0000 	ldr.w	r0, [fp]
 801aff0:	6803      	ldr	r3, [r0, #0]
 801aff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aff4:	4798      	blx	r3
 801aff6:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801affa:	465a      	mov	r2, fp
 801affc:	d006      	beq.n	801b00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801affe:	f1b8 0f04 	cmp.w	r8, #4
 801b002:	d141      	bne.n	801b088 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801b004:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b006:	3300      	adds	r3, #0
 801b008:	bf18      	it	ne
 801b00a:	2301      	movne	r3, #1
 801b00c:	0580      	lsls	r0, r0, #22
 801b00e:	d566      	bpl.n	801b0de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b010:	f1b8 0f08 	cmp.w	r8, #8
 801b014:	d163      	bne.n	801b0de <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801b016:	2b00      	cmp	r3, #0
 801b018:	bf0c      	ite	eq
 801b01a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801b01e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801b022:	2f00      	cmp	r7, #0
 801b024:	f47f af04 	bne.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b028:	2c00      	cmp	r4, #0
 801b02a:	f47f af01 	bne.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b030:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b032:	18f3      	adds	r3, r6, r3
 801b034:	4283      	cmp	r3, r0
 801b036:	f73f aefb 	bgt.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b03a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b03e:	4403      	add	r3, r0
 801b040:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b042:	4283      	cmp	r3, r0
 801b044:	f73f aef4 	bgt.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b048:	f1b8 0f08 	cmp.w	r8, #8
 801b04c:	6810      	ldr	r0, [r2, #0]
 801b04e:	f04f 0600 	mov.w	r6, #0
 801b052:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801b056:	bf18      	it	ne
 801b058:	3501      	addne	r5, #1
 801b05a:	6804      	ldr	r4, [r0, #0]
 801b05c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801b060:	bf18      	it	ne
 801b062:	f025 0501 	bicne.w	r5, r5, #1
 801b066:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801b06a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b06c:	bf18      	it	ne
 801b06e:	b2ad      	uxthne	r5, r5
 801b070:	9104      	str	r1, [sp, #16]
 801b072:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801b074:	e9cd 5a00 	strd	r5, sl, [sp]
 801b078:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801b07c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801b07e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801b080:	47a0      	blx	r4
 801b082:	b017      	add	sp, #92	@ 0x5c
 801b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b088:	2300      	movs	r3, #0
 801b08a:	e7bf      	b.n	801b00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801b08c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b08e:	e724      	b.n	801aeda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801b090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b092:	700b      	strb	r3, [r1, #0]
 801b094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b096:	704b      	strb	r3, [r1, #1]
 801b098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b09a:	708b      	strb	r3, [r1, #2]
 801b09c:	e78a      	b.n	801afb4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801b09e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b0a0:	b153      	cbz	r3, 801b0b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801b0a2:	441c      	add	r4, r3
 801b0a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801b0a6:	b2a4      	uxth	r4, r4
 801b0a8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801b0ac:	f004 0407 	and.w	r4, r4, #7
 801b0b0:	781a      	ldrb	r2, [r3, #0]
 801b0b2:	9326      	str	r3, [sp, #152]	@ 0x98
 801b0b4:	4122      	asrs	r2, r4
 801b0b6:	b2d2      	uxtb	r2, r2
 801b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0ba:	445b      	add	r3, fp
 801b0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0be:	e72a      	b.n	801af16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801b0c0:	2401b540 	.word	0x2401b540
 801b0c4:	2401b548 	.word	0x2401b548
 801b0c8:	2401b542 	.word	0x2401b542
 801b0cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d1d7      	bne.n	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b0d2:	4b06      	ldr	r3, [pc, #24]	@ (801b0ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801b0d4:	6818      	ldr	r0, [r3, #0]
 801b0d6:	6803      	ldr	r3, [r0, #0]
 801b0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b0da:	4798      	blx	r3
 801b0dc:	e7d1      	b.n	801b082 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	f43f aea6 	beq.w	801ae30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801b0e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b0e8:	e79b      	b.n	801b022 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801b0ea:	bf00      	nop
 801b0ec:	2401b548 	.word	0x2401b548

0801b0f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801b0f0:	b538      	push	{r3, r4, r5, lr}
 801b0f2:	4c15      	ldr	r4, [pc, #84]	@ (801b148 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801b0f4:	4605      	mov	r5, r0
 801b0f6:	7823      	ldrb	r3, [r4, #0]
 801b0f8:	f3bf 8f5b 	dmb	ish
 801b0fc:	07da      	lsls	r2, r3, #31
 801b0fe:	d40b      	bmi.n	801b118 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b100:	4620      	mov	r0, r4
 801b102:	f005 fb6c 	bl	80207de <__cxa_guard_acquire>
 801b106:	b138      	cbz	r0, 801b118 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801b108:	4620      	mov	r0, r4
 801b10a:	f005 fb74 	bl	80207f6 <__cxa_guard_release>
 801b10e:	4a0f      	ldr	r2, [pc, #60]	@ (801b14c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b110:	490f      	ldr	r1, [pc, #60]	@ (801b150 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801b112:	4810      	ldr	r0, [pc, #64]	@ (801b154 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b114:	f005 fb5c 	bl	80207d0 <__aeabi_atexit>
 801b118:	4c0f      	ldr	r4, [pc, #60]	@ (801b158 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801b11a:	7823      	ldrb	r3, [r4, #0]
 801b11c:	f3bf 8f5b 	dmb	ish
 801b120:	07db      	lsls	r3, r3, #31
 801b122:	d40b      	bmi.n	801b13c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b124:	4620      	mov	r0, r4
 801b126:	f005 fb5a 	bl	80207de <__cxa_guard_acquire>
 801b12a:	b138      	cbz	r0, 801b13c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801b12c:	4620      	mov	r0, r4
 801b12e:	f005 fb62 	bl	80207f6 <__cxa_guard_release>
 801b132:	4a06      	ldr	r2, [pc, #24]	@ (801b14c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801b134:	4909      	ldr	r1, [pc, #36]	@ (801b15c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801b136:	480a      	ldr	r0, [pc, #40]	@ (801b160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b138:	f005 fb4a 	bl	80207d0 <__aeabi_atexit>
 801b13c:	4b05      	ldr	r3, [pc, #20]	@ (801b154 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801b13e:	616b      	str	r3, [r5, #20]
 801b140:	4b07      	ldr	r3, [pc, #28]	@ (801b160 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801b142:	61ab      	str	r3, [r5, #24]
 801b144:	bd38      	pop	{r3, r4, r5, pc}
 801b146:	bf00      	nop
 801b148:	2401b620 	.word	0x2401b620
 801b14c:	24000000 	.word	0x24000000
 801b150:	08018f35 	.word	0x08018f35
 801b154:	2400009c 	.word	0x2400009c
 801b158:	2401b624 	.word	0x2401b624
 801b15c:	08018f33 	.word	0x08018f33
 801b160:	240000a0 	.word	0x240000a0

0801b164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801b164:	b538      	push	{r3, r4, r5, lr}
 801b166:	4c15      	ldr	r4, [pc, #84]	@ (801b1bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801b168:	4605      	mov	r5, r0
 801b16a:	7823      	ldrb	r3, [r4, #0]
 801b16c:	f3bf 8f5b 	dmb	ish
 801b170:	07da      	lsls	r2, r3, #31
 801b172:	d40b      	bmi.n	801b18c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b174:	4620      	mov	r0, r4
 801b176:	f005 fb32 	bl	80207de <__cxa_guard_acquire>
 801b17a:	b138      	cbz	r0, 801b18c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801b17c:	4620      	mov	r0, r4
 801b17e:	f005 fb3a 	bl	80207f6 <__cxa_guard_release>
 801b182:	4a0f      	ldr	r2, [pc, #60]	@ (801b1c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b184:	490f      	ldr	r1, [pc, #60]	@ (801b1c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801b186:	4810      	ldr	r0, [pc, #64]	@ (801b1c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b188:	f005 fb22 	bl	80207d0 <__aeabi_atexit>
 801b18c:	4c0f      	ldr	r4, [pc, #60]	@ (801b1cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801b18e:	7823      	ldrb	r3, [r4, #0]
 801b190:	f3bf 8f5b 	dmb	ish
 801b194:	07db      	lsls	r3, r3, #31
 801b196:	d40b      	bmi.n	801b1b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b198:	4620      	mov	r0, r4
 801b19a:	f005 fb20 	bl	80207de <__cxa_guard_acquire>
 801b19e:	b138      	cbz	r0, 801b1b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f005 fb28 	bl	80207f6 <__cxa_guard_release>
 801b1a6:	4a06      	ldr	r2, [pc, #24]	@ (801b1c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801b1a8:	4909      	ldr	r1, [pc, #36]	@ (801b1d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801b1aa:	480a      	ldr	r0, [pc, #40]	@ (801b1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b1ac:	f005 fb10 	bl	80207d0 <__aeabi_atexit>
 801b1b0:	4b05      	ldr	r3, [pc, #20]	@ (801b1c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801b1b2:	60eb      	str	r3, [r5, #12]
 801b1b4:	4b07      	ldr	r3, [pc, #28]	@ (801b1d4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801b1b6:	612b      	str	r3, [r5, #16]
 801b1b8:	bd38      	pop	{r3, r4, r5, pc}
 801b1ba:	bf00      	nop
 801b1bc:	2401b600 	.word	0x2401b600
 801b1c0:	24000000 	.word	0x24000000
 801b1c4:	08018f39 	.word	0x08018f39
 801b1c8:	2400007c 	.word	0x2400007c
 801b1cc:	2401b604 	.word	0x2401b604
 801b1d0:	08018f37 	.word	0x08018f37
 801b1d4:	24000080 	.word	0x24000080

0801b1d8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801b1d8:	b510      	push	{r4, lr}
 801b1da:	4604      	mov	r4, r0
 801b1dc:	f7ff ff88 	bl	801b0f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801b1e0:	4620      	mov	r0, r4
 801b1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1e6:	f7ff bfbd 	b.w	801b164 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801b1ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801b1ec:	b538      	push	{r3, r4, r5, lr}
 801b1ee:	4c15      	ldr	r4, [pc, #84]	@ (801b244 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801b1f0:	4605      	mov	r5, r0
 801b1f2:	7823      	ldrb	r3, [r4, #0]
 801b1f4:	f3bf 8f5b 	dmb	ish
 801b1f8:	07da      	lsls	r2, r3, #31
 801b1fa:	d40b      	bmi.n	801b214 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b1fc:	4620      	mov	r0, r4
 801b1fe:	f005 faee 	bl	80207de <__cxa_guard_acquire>
 801b202:	b138      	cbz	r0, 801b214 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801b204:	4620      	mov	r0, r4
 801b206:	f005 faf6 	bl	80207f6 <__cxa_guard_release>
 801b20a:	4a0f      	ldr	r2, [pc, #60]	@ (801b248 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b20c:	490f      	ldr	r1, [pc, #60]	@ (801b24c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801b20e:	4810      	ldr	r0, [pc, #64]	@ (801b250 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b210:	f005 fade 	bl	80207d0 <__aeabi_atexit>
 801b214:	4c0f      	ldr	r4, [pc, #60]	@ (801b254 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801b216:	7823      	ldrb	r3, [r4, #0]
 801b218:	f3bf 8f5b 	dmb	ish
 801b21c:	07db      	lsls	r3, r3, #31
 801b21e:	d40b      	bmi.n	801b238 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b220:	4620      	mov	r0, r4
 801b222:	f005 fadc 	bl	80207de <__cxa_guard_acquire>
 801b226:	b138      	cbz	r0, 801b238 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801b228:	4620      	mov	r0, r4
 801b22a:	f005 fae4 	bl	80207f6 <__cxa_guard_release>
 801b22e:	4a06      	ldr	r2, [pc, #24]	@ (801b248 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801b230:	4909      	ldr	r1, [pc, #36]	@ (801b258 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801b232:	480a      	ldr	r0, [pc, #40]	@ (801b25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b234:	f005 facc 	bl	80207d0 <__aeabi_atexit>
 801b238:	4b05      	ldr	r3, [pc, #20]	@ (801b250 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801b23a:	626b      	str	r3, [r5, #36]	@ 0x24
 801b23c:	4b07      	ldr	r3, [pc, #28]	@ (801b25c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801b23e:	62ab      	str	r3, [r5, #40]	@ 0x28
 801b240:	bd38      	pop	{r3, r4, r5, pc}
 801b242:	bf00      	nop
 801b244:	2401b628 	.word	0x2401b628
 801b248:	24000000 	.word	0x24000000
 801b24c:	08018f2d 	.word	0x08018f2d
 801b250:	240000a4 	.word	0x240000a4
 801b254:	2401b62c 	.word	0x2401b62c
 801b258:	08018f2b 	.word	0x08018f2b
 801b25c:	240000a8 	.word	0x240000a8

0801b260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801b260:	b538      	push	{r3, r4, r5, lr}
 801b262:	4c15      	ldr	r4, [pc, #84]	@ (801b2b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801b264:	4605      	mov	r5, r0
 801b266:	7823      	ldrb	r3, [r4, #0]
 801b268:	f3bf 8f5b 	dmb	ish
 801b26c:	07da      	lsls	r2, r3, #31
 801b26e:	d40b      	bmi.n	801b288 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b270:	4620      	mov	r0, r4
 801b272:	f005 fab4 	bl	80207de <__cxa_guard_acquire>
 801b276:	b138      	cbz	r0, 801b288 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801b278:	4620      	mov	r0, r4
 801b27a:	f005 fabc 	bl	80207f6 <__cxa_guard_release>
 801b27e:	4a0f      	ldr	r2, [pc, #60]	@ (801b2bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b280:	490f      	ldr	r1, [pc, #60]	@ (801b2c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801b282:	4810      	ldr	r0, [pc, #64]	@ (801b2c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b284:	f005 faa4 	bl	80207d0 <__aeabi_atexit>
 801b288:	4c0f      	ldr	r4, [pc, #60]	@ (801b2c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801b28a:	7823      	ldrb	r3, [r4, #0]
 801b28c:	f3bf 8f5b 	dmb	ish
 801b290:	07db      	lsls	r3, r3, #31
 801b292:	d40b      	bmi.n	801b2ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b294:	4620      	mov	r0, r4
 801b296:	f005 faa2 	bl	80207de <__cxa_guard_acquire>
 801b29a:	b138      	cbz	r0, 801b2ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b29c:	4620      	mov	r0, r4
 801b29e:	f005 faaa 	bl	80207f6 <__cxa_guard_release>
 801b2a2:	4a06      	ldr	r2, [pc, #24]	@ (801b2bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b2a4:	4909      	ldr	r1, [pc, #36]	@ (801b2cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b2a6:	480a      	ldr	r0, [pc, #40]	@ (801b2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b2a8:	f005 fa92 	bl	80207d0 <__aeabi_atexit>
 801b2ac:	4b05      	ldr	r3, [pc, #20]	@ (801b2c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b2ae:	61eb      	str	r3, [r5, #28]
 801b2b0:	4b07      	ldr	r3, [pc, #28]	@ (801b2d0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b2b2:	622b      	str	r3, [r5, #32]
 801b2b4:	bd38      	pop	{r3, r4, r5, pc}
 801b2b6:	bf00      	nop
 801b2b8:	2401b608 	.word	0x2401b608
 801b2bc:	24000000 	.word	0x24000000
 801b2c0:	08018f31 	.word	0x08018f31
 801b2c4:	24000084 	.word	0x24000084
 801b2c8:	2401b60c 	.word	0x2401b60c
 801b2cc:	08018f2f 	.word	0x08018f2f
 801b2d0:	24000088 	.word	0x24000088

0801b2d4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b2d4:	b510      	push	{r4, lr}
 801b2d6:	4604      	mov	r4, r0
 801b2d8:	f7ff ff88 	bl	801b1ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b2dc:	4620      	mov	r0, r4
 801b2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2e2:	f7ff bfbd 	b.w	801b260 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b2e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b2e8:	b538      	push	{r3, r4, r5, lr}
 801b2ea:	4c15      	ldr	r4, [pc, #84]	@ (801b340 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b2ec:	4605      	mov	r5, r0
 801b2ee:	7823      	ldrb	r3, [r4, #0]
 801b2f0:	f3bf 8f5b 	dmb	ish
 801b2f4:	07da      	lsls	r2, r3, #31
 801b2f6:	d40b      	bmi.n	801b310 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b2f8:	4620      	mov	r0, r4
 801b2fa:	f005 fa70 	bl	80207de <__cxa_guard_acquire>
 801b2fe:	b138      	cbz	r0, 801b310 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b300:	4620      	mov	r0, r4
 801b302:	f005 fa78 	bl	80207f6 <__cxa_guard_release>
 801b306:	4a0f      	ldr	r2, [pc, #60]	@ (801b344 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b308:	490f      	ldr	r1, [pc, #60]	@ (801b348 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b30a:	4810      	ldr	r0, [pc, #64]	@ (801b34c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b30c:	f005 fa60 	bl	80207d0 <__aeabi_atexit>
 801b310:	4c0f      	ldr	r4, [pc, #60]	@ (801b350 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b312:	7823      	ldrb	r3, [r4, #0]
 801b314:	f3bf 8f5b 	dmb	ish
 801b318:	07db      	lsls	r3, r3, #31
 801b31a:	d40b      	bmi.n	801b334 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b31c:	4620      	mov	r0, r4
 801b31e:	f005 fa5e 	bl	80207de <__cxa_guard_acquire>
 801b322:	b138      	cbz	r0, 801b334 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b324:	4620      	mov	r0, r4
 801b326:	f005 fa66 	bl	80207f6 <__cxa_guard_release>
 801b32a:	4a06      	ldr	r2, [pc, #24]	@ (801b344 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b32c:	4909      	ldr	r1, [pc, #36]	@ (801b354 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b32e:	480a      	ldr	r0, [pc, #40]	@ (801b358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b330:	f005 fa4e 	bl	80207d0 <__aeabi_atexit>
 801b334:	4b05      	ldr	r3, [pc, #20]	@ (801b34c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b336:	636b      	str	r3, [r5, #52]	@ 0x34
 801b338:	4b07      	ldr	r3, [pc, #28]	@ (801b358 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b33a:	63ab      	str	r3, [r5, #56]	@ 0x38
 801b33c:	bd38      	pop	{r3, r4, r5, pc}
 801b33e:	bf00      	nop
 801b340:	2401b610 	.word	0x2401b610
 801b344:	24000000 	.word	0x24000000
 801b348:	08018f25 	.word	0x08018f25
 801b34c:	2400008c 	.word	0x2400008c
 801b350:	2401b614 	.word	0x2401b614
 801b354:	08018f23 	.word	0x08018f23
 801b358:	24000090 	.word	0x24000090

0801b35c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b35c:	b538      	push	{r3, r4, r5, lr}
 801b35e:	4c15      	ldr	r4, [pc, #84]	@ (801b3b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b360:	4605      	mov	r5, r0
 801b362:	7823      	ldrb	r3, [r4, #0]
 801b364:	f3bf 8f5b 	dmb	ish
 801b368:	07da      	lsls	r2, r3, #31
 801b36a:	d40b      	bmi.n	801b384 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b36c:	4620      	mov	r0, r4
 801b36e:	f005 fa36 	bl	80207de <__cxa_guard_acquire>
 801b372:	b138      	cbz	r0, 801b384 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b374:	4620      	mov	r0, r4
 801b376:	f005 fa3e 	bl	80207f6 <__cxa_guard_release>
 801b37a:	4a0f      	ldr	r2, [pc, #60]	@ (801b3b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b37c:	490f      	ldr	r1, [pc, #60]	@ (801b3bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b37e:	4810      	ldr	r0, [pc, #64]	@ (801b3c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b380:	f005 fa26 	bl	80207d0 <__aeabi_atexit>
 801b384:	4c0f      	ldr	r4, [pc, #60]	@ (801b3c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b386:	7823      	ldrb	r3, [r4, #0]
 801b388:	f3bf 8f5b 	dmb	ish
 801b38c:	07db      	lsls	r3, r3, #31
 801b38e:	d40b      	bmi.n	801b3a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b390:	4620      	mov	r0, r4
 801b392:	f005 fa24 	bl	80207de <__cxa_guard_acquire>
 801b396:	b138      	cbz	r0, 801b3a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b398:	4620      	mov	r0, r4
 801b39a:	f005 fa2c 	bl	80207f6 <__cxa_guard_release>
 801b39e:	4a06      	ldr	r2, [pc, #24]	@ (801b3b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b3a0:	4909      	ldr	r1, [pc, #36]	@ (801b3c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b3a2:	480a      	ldr	r0, [pc, #40]	@ (801b3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b3a4:	f005 fa14 	bl	80207d0 <__aeabi_atexit>
 801b3a8:	4b05      	ldr	r3, [pc, #20]	@ (801b3c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b3aa:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801b3ac:	4b07      	ldr	r3, [pc, #28]	@ (801b3cc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b3ae:	632b      	str	r3, [r5, #48]	@ 0x30
 801b3b0:	bd38      	pop	{r3, r4, r5, pc}
 801b3b2:	bf00      	nop
 801b3b4:	2401b5e8 	.word	0x2401b5e8
 801b3b8:	24000000 	.word	0x24000000
 801b3bc:	08018f29 	.word	0x08018f29
 801b3c0:	24000064 	.word	0x24000064
 801b3c4:	2401b5ec 	.word	0x2401b5ec
 801b3c8:	08018f27 	.word	0x08018f27
 801b3cc:	24000068 	.word	0x24000068

0801b3d0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b3d0:	b510      	push	{r4, lr}
 801b3d2:	4604      	mov	r4, r0
 801b3d4:	f7ff ff88 	bl	801b2e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b3d8:	4620      	mov	r0, r4
 801b3da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3de:	f7ff bfbd 	b.w	801b35c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b3e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b3e4:	b538      	push	{r3, r4, r5, lr}
 801b3e6:	4c15      	ldr	r4, [pc, #84]	@ (801b43c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b3e8:	4605      	mov	r5, r0
 801b3ea:	7823      	ldrb	r3, [r4, #0]
 801b3ec:	f3bf 8f5b 	dmb	ish
 801b3f0:	07da      	lsls	r2, r3, #31
 801b3f2:	d40b      	bmi.n	801b40c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	f005 f9f2 	bl	80207de <__cxa_guard_acquire>
 801b3fa:	b138      	cbz	r0, 801b40c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b3fc:	4620      	mov	r0, r4
 801b3fe:	f005 f9fa 	bl	80207f6 <__cxa_guard_release>
 801b402:	4a0f      	ldr	r2, [pc, #60]	@ (801b440 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b404:	490f      	ldr	r1, [pc, #60]	@ (801b444 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b406:	4810      	ldr	r0, [pc, #64]	@ (801b448 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b408:	f005 f9e2 	bl	80207d0 <__aeabi_atexit>
 801b40c:	4c0f      	ldr	r4, [pc, #60]	@ (801b44c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b40e:	7823      	ldrb	r3, [r4, #0]
 801b410:	f3bf 8f5b 	dmb	ish
 801b414:	07db      	lsls	r3, r3, #31
 801b416:	d40b      	bmi.n	801b430 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b418:	4620      	mov	r0, r4
 801b41a:	f005 f9e0 	bl	80207de <__cxa_guard_acquire>
 801b41e:	b138      	cbz	r0, 801b430 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b420:	4620      	mov	r0, r4
 801b422:	f005 f9e8 	bl	80207f6 <__cxa_guard_release>
 801b426:	4a06      	ldr	r2, [pc, #24]	@ (801b440 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b428:	4909      	ldr	r1, [pc, #36]	@ (801b450 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b42a:	480a      	ldr	r0, [pc, #40]	@ (801b454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b42c:	f005 f9d0 	bl	80207d0 <__aeabi_atexit>
 801b430:	4b05      	ldr	r3, [pc, #20]	@ (801b448 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b432:	646b      	str	r3, [r5, #68]	@ 0x44
 801b434:	4b07      	ldr	r3, [pc, #28]	@ (801b454 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b436:	64ab      	str	r3, [r5, #72]	@ 0x48
 801b438:	bd38      	pop	{r3, r4, r5, pc}
 801b43a:	bf00      	nop
 801b43c:	2401b618 	.word	0x2401b618
 801b440:	24000000 	.word	0x24000000
 801b444:	08018f1d 	.word	0x08018f1d
 801b448:	24000094 	.word	0x24000094
 801b44c:	2401b61c 	.word	0x2401b61c
 801b450:	08018f1b 	.word	0x08018f1b
 801b454:	24000098 	.word	0x24000098

0801b458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b458:	b538      	push	{r3, r4, r5, lr}
 801b45a:	4c15      	ldr	r4, [pc, #84]	@ (801b4b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b45c:	4605      	mov	r5, r0
 801b45e:	7823      	ldrb	r3, [r4, #0]
 801b460:	f3bf 8f5b 	dmb	ish
 801b464:	07da      	lsls	r2, r3, #31
 801b466:	d40b      	bmi.n	801b480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b468:	4620      	mov	r0, r4
 801b46a:	f005 f9b8 	bl	80207de <__cxa_guard_acquire>
 801b46e:	b138      	cbz	r0, 801b480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b470:	4620      	mov	r0, r4
 801b472:	f005 f9c0 	bl	80207f6 <__cxa_guard_release>
 801b476:	4a0f      	ldr	r2, [pc, #60]	@ (801b4b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b478:	490f      	ldr	r1, [pc, #60]	@ (801b4b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b47a:	4810      	ldr	r0, [pc, #64]	@ (801b4bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b47c:	f005 f9a8 	bl	80207d0 <__aeabi_atexit>
 801b480:	4c0f      	ldr	r4, [pc, #60]	@ (801b4c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b482:	7823      	ldrb	r3, [r4, #0]
 801b484:	f3bf 8f5b 	dmb	ish
 801b488:	07db      	lsls	r3, r3, #31
 801b48a:	d40b      	bmi.n	801b4a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b48c:	4620      	mov	r0, r4
 801b48e:	f005 f9a6 	bl	80207de <__cxa_guard_acquire>
 801b492:	b138      	cbz	r0, 801b4a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b494:	4620      	mov	r0, r4
 801b496:	f005 f9ae 	bl	80207f6 <__cxa_guard_release>
 801b49a:	4a06      	ldr	r2, [pc, #24]	@ (801b4b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b49c:	4909      	ldr	r1, [pc, #36]	@ (801b4c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b49e:	480a      	ldr	r0, [pc, #40]	@ (801b4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b4a0:	f005 f996 	bl	80207d0 <__aeabi_atexit>
 801b4a4:	4b05      	ldr	r3, [pc, #20]	@ (801b4bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b4a6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b4a8:	4b07      	ldr	r3, [pc, #28]	@ (801b4c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b4aa:	642b      	str	r3, [r5, #64]	@ 0x40
 801b4ac:	bd38      	pop	{r3, r4, r5, pc}
 801b4ae:	bf00      	nop
 801b4b0:	2401b5f8 	.word	0x2401b5f8
 801b4b4:	24000000 	.word	0x24000000
 801b4b8:	08018f21 	.word	0x08018f21
 801b4bc:	24000074 	.word	0x24000074
 801b4c0:	2401b5fc 	.word	0x2401b5fc
 801b4c4:	08018f1f 	.word	0x08018f1f
 801b4c8:	24000078 	.word	0x24000078

0801b4cc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b4cc:	b510      	push	{r4, lr}
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	f7ff ff88 	bl	801b3e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4da:	f7ff bfbd 	b.w	801b458 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b4e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b4e0:	b538      	push	{r3, r4, r5, lr}
 801b4e2:	4c15      	ldr	r4, [pc, #84]	@ (801b538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b4e4:	4605      	mov	r5, r0
 801b4e6:	7823      	ldrb	r3, [r4, #0]
 801b4e8:	f3bf 8f5b 	dmb	ish
 801b4ec:	07da      	lsls	r2, r3, #31
 801b4ee:	d40b      	bmi.n	801b508 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	f005 f974 	bl	80207de <__cxa_guard_acquire>
 801b4f6:	b138      	cbz	r0, 801b508 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b4f8:	4620      	mov	r0, r4
 801b4fa:	f005 f97c 	bl	80207f6 <__cxa_guard_release>
 801b4fe:	4a0f      	ldr	r2, [pc, #60]	@ (801b53c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b500:	490f      	ldr	r1, [pc, #60]	@ (801b540 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b502:	4810      	ldr	r0, [pc, #64]	@ (801b544 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b504:	f005 f964 	bl	80207d0 <__aeabi_atexit>
 801b508:	4c0f      	ldr	r4, [pc, #60]	@ (801b548 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b50a:	7823      	ldrb	r3, [r4, #0]
 801b50c:	f3bf 8f5b 	dmb	ish
 801b510:	07db      	lsls	r3, r3, #31
 801b512:	d40b      	bmi.n	801b52c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b514:	4620      	mov	r0, r4
 801b516:	f005 f962 	bl	80207de <__cxa_guard_acquire>
 801b51a:	b138      	cbz	r0, 801b52c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b51c:	4620      	mov	r0, r4
 801b51e:	f005 f96a 	bl	80207f6 <__cxa_guard_release>
 801b522:	4a06      	ldr	r2, [pc, #24]	@ (801b53c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b524:	4909      	ldr	r1, [pc, #36]	@ (801b54c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b526:	480a      	ldr	r0, [pc, #40]	@ (801b550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b528:	f005 f952 	bl	80207d0 <__aeabi_atexit>
 801b52c:	4b05      	ldr	r3, [pc, #20]	@ (801b544 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b52e:	656b      	str	r3, [r5, #84]	@ 0x54
 801b530:	4b07      	ldr	r3, [pc, #28]	@ (801b550 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b532:	65ab      	str	r3, [r5, #88]	@ 0x58
 801b534:	bd38      	pop	{r3, r4, r5, pc}
 801b536:	bf00      	nop
 801b538:	2401b5f0 	.word	0x2401b5f0
 801b53c:	24000000 	.word	0x24000000
 801b540:	08018f15 	.word	0x08018f15
 801b544:	2400006c 	.word	0x2400006c
 801b548:	2401b5f4 	.word	0x2401b5f4
 801b54c:	08018f13 	.word	0x08018f13
 801b550:	24000070 	.word	0x24000070

0801b554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b554:	b538      	push	{r3, r4, r5, lr}
 801b556:	4c15      	ldr	r4, [pc, #84]	@ (801b5ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b558:	4605      	mov	r5, r0
 801b55a:	7823      	ldrb	r3, [r4, #0]
 801b55c:	f3bf 8f5b 	dmb	ish
 801b560:	07da      	lsls	r2, r3, #31
 801b562:	d40b      	bmi.n	801b57c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b564:	4620      	mov	r0, r4
 801b566:	f005 f93a 	bl	80207de <__cxa_guard_acquire>
 801b56a:	b138      	cbz	r0, 801b57c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b56c:	4620      	mov	r0, r4
 801b56e:	f005 f942 	bl	80207f6 <__cxa_guard_release>
 801b572:	4a0f      	ldr	r2, [pc, #60]	@ (801b5b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b574:	490f      	ldr	r1, [pc, #60]	@ (801b5b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b576:	4810      	ldr	r0, [pc, #64]	@ (801b5b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b578:	f005 f92a 	bl	80207d0 <__aeabi_atexit>
 801b57c:	4c0f      	ldr	r4, [pc, #60]	@ (801b5bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b57e:	7823      	ldrb	r3, [r4, #0]
 801b580:	f3bf 8f5b 	dmb	ish
 801b584:	07db      	lsls	r3, r3, #31
 801b586:	d40b      	bmi.n	801b5a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b588:	4620      	mov	r0, r4
 801b58a:	f005 f928 	bl	80207de <__cxa_guard_acquire>
 801b58e:	b138      	cbz	r0, 801b5a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b590:	4620      	mov	r0, r4
 801b592:	f005 f930 	bl	80207f6 <__cxa_guard_release>
 801b596:	4a06      	ldr	r2, [pc, #24]	@ (801b5b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b598:	4909      	ldr	r1, [pc, #36]	@ (801b5c0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b59a:	480a      	ldr	r0, [pc, #40]	@ (801b5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b59c:	f005 f918 	bl	80207d0 <__aeabi_atexit>
 801b5a0:	4b05      	ldr	r3, [pc, #20]	@ (801b5b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b5a2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801b5a4:	4b07      	ldr	r3, [pc, #28]	@ (801b5c4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b5a6:	652b      	str	r3, [r5, #80]	@ 0x50
 801b5a8:	bd38      	pop	{r3, r4, r5, pc}
 801b5aa:	bf00      	nop
 801b5ac:	2401b5e0 	.word	0x2401b5e0
 801b5b0:	24000000 	.word	0x24000000
 801b5b4:	08018f19 	.word	0x08018f19
 801b5b8:	2400005c 	.word	0x2400005c
 801b5bc:	2401b5e4 	.word	0x2401b5e4
 801b5c0:	08018f17 	.word	0x08018f17
 801b5c4:	24000060 	.word	0x24000060

0801b5c8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b5c8:	b510      	push	{r4, lr}
 801b5ca:	4604      	mov	r4, r0
 801b5cc:	f7ff ff88 	bl	801b4e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b5d0:	4620      	mov	r0, r4
 801b5d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5d6:	f7ff bfbd 	b.w	801b554 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b5da <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b5da:	b510      	push	{r4, lr}
 801b5dc:	4604      	mov	r4, r0
 801b5de:	f7ff fff3 	bl	801b5c8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b5e2:	4620      	mov	r0, r4
 801b5e4:	f7ff ff72 	bl	801b4cc <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f7ff fe73 	bl	801b2d4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	f7ff fdf2 	bl	801b1d8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b5f4:	4620      	mov	r0, r4
 801b5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5fa:	f7ff bee9 	b.w	801b3d0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801b600 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801b600:	b538      	push	{r3, r4, r5, lr}
 801b602:	4c0b      	ldr	r4, [pc, #44]	@ (801b630 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801b604:	4605      	mov	r5, r0
 801b606:	7823      	ldrb	r3, [r4, #0]
 801b608:	f3bf 8f5b 	dmb	ish
 801b60c:	07db      	lsls	r3, r3, #31
 801b60e:	d40b      	bmi.n	801b628 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b610:	4620      	mov	r0, r4
 801b612:	f005 f8e4 	bl	80207de <__cxa_guard_acquire>
 801b616:	b138      	cbz	r0, 801b628 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b618:	4620      	mov	r0, r4
 801b61a:	f005 f8ec 	bl	80207f6 <__cxa_guard_release>
 801b61e:	4a05      	ldr	r2, [pc, #20]	@ (801b634 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801b620:	4905      	ldr	r1, [pc, #20]	@ (801b638 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801b622:	4806      	ldr	r0, [pc, #24]	@ (801b63c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b624:	f005 f8d4 	bl	80207d0 <__aeabi_atexit>
 801b628:	4b04      	ldr	r3, [pc, #16]	@ (801b63c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b62a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801b62c:	bd38      	pop	{r3, r4, r5, pc}
 801b62e:	bf00      	nop
 801b630:	2401b5d4 	.word	0x2401b5d4
 801b634:	24000000 	.word	0x24000000
 801b638:	08018f11 	.word	0x08018f11
 801b63c:	24000054 	.word	0x24000054

0801b640 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801b640:	b538      	push	{r3, r4, r5, lr}
 801b642:	4c0b      	ldr	r4, [pc, #44]	@ (801b670 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801b644:	4605      	mov	r5, r0
 801b646:	7823      	ldrb	r3, [r4, #0]
 801b648:	f3bf 8f5b 	dmb	ish
 801b64c:	07db      	lsls	r3, r3, #31
 801b64e:	d40b      	bmi.n	801b668 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b650:	4620      	mov	r0, r4
 801b652:	f005 f8c4 	bl	80207de <__cxa_guard_acquire>
 801b656:	b138      	cbz	r0, 801b668 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b658:	4620      	mov	r0, r4
 801b65a:	f005 f8cc 	bl	80207f6 <__cxa_guard_release>
 801b65e:	4a05      	ldr	r2, [pc, #20]	@ (801b674 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801b660:	4905      	ldr	r1, [pc, #20]	@ (801b678 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801b662:	4806      	ldr	r0, [pc, #24]	@ (801b67c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b664:	f005 f8b4 	bl	80207d0 <__aeabi_atexit>
 801b668:	4b04      	ldr	r3, [pc, #16]	@ (801b67c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b66a:	662b      	str	r3, [r5, #96]	@ 0x60
 801b66c:	bd38      	pop	{r3, r4, r5, pc}
 801b66e:	bf00      	nop
 801b670:	2401b5d8 	.word	0x2401b5d8
 801b674:	24000000 	.word	0x24000000
 801b678:	08018f0f 	.word	0x08018f0f
 801b67c:	24000058 	.word	0x24000058

0801b680 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801b680:	b570      	push	{r4, r5, r6, lr}
 801b682:	4d0c      	ldr	r5, [pc, #48]	@ (801b6b4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801b684:	4606      	mov	r6, r0
 801b686:	4c0c      	ldr	r4, [pc, #48]	@ (801b6b8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801b688:	782b      	ldrb	r3, [r5, #0]
 801b68a:	f3bf 8f5b 	dmb	ish
 801b68e:	f013 0f01 	tst.w	r3, #1
 801b692:	d10d      	bne.n	801b6b0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b694:	4628      	mov	r0, r5
 801b696:	f005 f8a2 	bl	80207de <__cxa_guard_acquire>
 801b69a:	b148      	cbz	r0, 801b6b0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b69c:	4b07      	ldr	r3, [pc, #28]	@ (801b6bc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801b69e:	4628      	mov	r0, r5
 801b6a0:	6023      	str	r3, [r4, #0]
 801b6a2:	f005 f8a8 	bl	80207f6 <__cxa_guard_release>
 801b6a6:	4a06      	ldr	r2, [pc, #24]	@ (801b6c0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	4906      	ldr	r1, [pc, #24]	@ (801b6c4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801b6ac:	f005 f890 	bl	80207d0 <__aeabi_atexit>
 801b6b0:	6674      	str	r4, [r6, #100]	@ 0x64
 801b6b2:	bd70      	pop	{r4, r5, r6, pc}
 801b6b4:	2401b5dc 	.word	0x2401b5dc
 801b6b8:	2401b630 	.word	0x2401b630
 801b6bc:	080232b8 	.word	0x080232b8
 801b6c0:	24000000 	.word	0x24000000
 801b6c4:	08018f0d 	.word	0x08018f0d

0801b6c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801b6c8:	b510      	push	{r4, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	f7ff ff98 	bl	801b600 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	f7ff ffb5 	bl	801b640 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6dc:	f7ff bfd0 	b.w	801b680 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801b6e0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e4:	b087      	sub	sp, #28
 801b6e6:	788d      	ldrb	r5, [r1, #2]
 801b6e8:	f891 9000 	ldrb.w	r9, [r1]
 801b6ec:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801b6f0:	9501      	str	r5, [sp, #4]
 801b6f2:	784d      	ldrb	r5, [r1, #1]
 801b6f4:	9203      	str	r2, [sp, #12]
 801b6f6:	9502      	str	r5, [sp, #8]
 801b6f8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b6fc:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801b700:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801b704:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801b708:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801b70c:	fb06 0708 	mla	r7, r6, r8, r0
 801b710:	2e00      	cmp	r6, #0
 801b712:	eb02 0a07 	add.w	sl, r2, r7
 801b716:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801b71a:	9d01      	ldr	r5, [sp, #4]
 801b71c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801b720:	ea45 0509 	orr.w	r5, r5, r9
 801b724:	9505      	str	r5, [sp, #20]
 801b726:	f2c0 80b2 	blt.w	801b88e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b72a:	45b3      	cmp	fp, r6
 801b72c:	f340 80af 	ble.w	801b88e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b730:	2800      	cmp	r0, #0
 801b732:	f2c0 80aa 	blt.w	801b88a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b736:	4580      	cmp	r8, r0
 801b738:	f340 80a7 	ble.w	801b88a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b73c:	9a03      	ldr	r2, [sp, #12]
 801b73e:	5dd7      	ldrb	r7, [r2, r7]
 801b740:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b744:	441f      	add	r7, r3
 801b746:	1c42      	adds	r2, r0, #1
 801b748:	f100 80a4 	bmi.w	801b894 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b74c:	4590      	cmp	r8, r2
 801b74e:	f340 80a1 	ble.w	801b894 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b752:	2c00      	cmp	r4, #0
 801b754:	f000 809e 	beq.w	801b894 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b758:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b75c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b760:	441d      	add	r5, r3
 801b762:	3601      	adds	r6, #1
 801b764:	f100 809a 	bmi.w	801b89c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b768:	45b3      	cmp	fp, r6
 801b76a:	f340 8097 	ble.w	801b89c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b76e:	f1bc 0f00 	cmp.w	ip, #0
 801b772:	f000 8093 	beq.w	801b89c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b776:	2800      	cmp	r0, #0
 801b778:	f2c0 808e 	blt.w	801b898 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b77c:	4580      	cmp	r8, r0
 801b77e:	f340 808b 	ble.w	801b898 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b782:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801b786:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b78a:	441e      	add	r6, r3
 801b78c:	3001      	adds	r0, #1
 801b78e:	f100 8088 	bmi.w	801b8a2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b792:	4580      	cmp	r8, r0
 801b794:	f340 8085 	ble.w	801b8a2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b798:	2c00      	cmp	r4, #0
 801b79a:	f000 8082 	beq.w	801b8a2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b79e:	44d0      	add	r8, sl
 801b7a0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b7a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7a8:	4413      	add	r3, r2
 801b7aa:	b2a4      	uxth	r4, r4
 801b7ac:	f895 a000 	ldrb.w	sl, [r5]
 801b7b0:	fa1f fc8c 	uxth.w	ip, ip
 801b7b4:	fb04 fb0c 	mul.w	fp, r4, ip
 801b7b8:	0124      	lsls	r4, r4, #4
 801b7ba:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801b7be:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801b7c2:	eba4 040b 	sub.w	r4, r4, fp
 801b7c6:	fa1f f08c 	uxth.w	r0, ip
 801b7ca:	b2a2      	uxth	r2, r4
 801b7cc:	783c      	ldrb	r4, [r7, #0]
 801b7ce:	eba8 0800 	sub.w	r8, r8, r0
 801b7d2:	fa1f fc8e 	uxth.w	ip, lr
 801b7d6:	fb02 fa0a 	mul.w	sl, r2, sl
 801b7da:	ea6f 0e0e 	mvn.w	lr, lr
 801b7de:	fa1f f888 	uxth.w	r8, r8
 801b7e2:	fa5f fe8e 	uxtb.w	lr, lr
 801b7e6:	fb08 aa04 	mla	sl, r8, r4, sl
 801b7ea:	7834      	ldrb	r4, [r6, #0]
 801b7ec:	fb19 f90e 	smulbb	r9, r9, lr
 801b7f0:	fb00 aa04 	mla	sl, r0, r4, sl
 801b7f4:	781c      	ldrb	r4, [r3, #0]
 801b7f6:	fb0b a404 	mla	r4, fp, r4, sl
 801b7fa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b7fe:	fb04 990c 	mla	r9, r4, ip, r9
 801b802:	fa1f f989 	uxth.w	r9, r9
 801b806:	f109 0401 	add.w	r4, r9, #1
 801b80a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b80e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b812:	f881 9000 	strb.w	r9, [r1]
 801b816:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b81a:	787c      	ldrb	r4, [r7, #1]
 801b81c:	fb02 f909 	mul.w	r9, r2, r9
 801b820:	fb08 9904 	mla	r9, r8, r4, r9
 801b824:	7874      	ldrb	r4, [r6, #1]
 801b826:	fb00 9904 	mla	r9, r0, r4, r9
 801b82a:	785c      	ldrb	r4, [r3, #1]
 801b82c:	fb0b 9404 	mla	r4, fp, r4, r9
 801b830:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801b834:	9c02      	ldr	r4, [sp, #8]
 801b836:	fb14 f90e 	smulbb	r9, r4, lr
 801b83a:	fb0a 940c 	mla	r4, sl, ip, r9
 801b83e:	b2a4      	uxth	r4, r4
 801b840:	f104 0901 	add.w	r9, r4, #1
 801b844:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801b848:	1224      	asrs	r4, r4, #8
 801b84a:	704c      	strb	r4, [r1, #1]
 801b84c:	78ad      	ldrb	r5, [r5, #2]
 801b84e:	78bc      	ldrb	r4, [r7, #2]
 801b850:	436a      	muls	r2, r5
 801b852:	789b      	ldrb	r3, [r3, #2]
 801b854:	fb08 2204 	mla	r2, r8, r4, r2
 801b858:	78b4      	ldrb	r4, [r6, #2]
 801b85a:	fb00 2004 	mla	r0, r0, r4, r2
 801b85e:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b862:	9b01      	ldr	r3, [sp, #4]
 801b864:	fb13 fe0e 	smulbb	lr, r3, lr
 801b868:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b86c:	fb0b ec0c 	mla	ip, fp, ip, lr
 801b870:	fa1f fc8c 	uxth.w	ip, ip
 801b874:	f10c 0e01 	add.w	lr, ip, #1
 801b878:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b87c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b880:	f881 c002 	strb.w	ip, [r1, #2]
 801b884:	b007      	add	sp, #28
 801b886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b88a:	af05      	add	r7, sp, #20
 801b88c:	e75b      	b.n	801b746 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801b88e:	ad05      	add	r5, sp, #20
 801b890:	462f      	mov	r7, r5
 801b892:	e766      	b.n	801b762 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b894:	ad05      	add	r5, sp, #20
 801b896:	e764      	b.n	801b762 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b898:	ae05      	add	r6, sp, #20
 801b89a:	e777      	b.n	801b78c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801b89c:	ab05      	add	r3, sp, #20
 801b89e:	461e      	mov	r6, r3
 801b8a0:	e783      	b.n	801b7aa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801b8a2:	ab05      	add	r3, sp, #20
 801b8a4:	e781      	b.n	801b7aa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801b8a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b8a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8aa:	b093      	sub	sp, #76	@ 0x4c
 801b8ac:	9210      	str	r2, [sp, #64]	@ 0x40
 801b8ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801b8b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b8b2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801b8b6:	9011      	str	r0, [sp, #68]	@ 0x44
 801b8b8:	930e      	str	r3, [sp, #56]	@ 0x38
 801b8ba:	6850      	ldr	r0, [r2, #4]
 801b8bc:	910d      	str	r1, [sp, #52]	@ 0x34
 801b8be:	6812      	ldr	r2, [r2, #0]
 801b8c0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801b8c4:	fb00 1303 	mla	r3, r0, r3, r1
 801b8c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8cc:	18d3      	adds	r3, r2, r3
 801b8ce:	930a      	str	r3, [sp, #40]	@ 0x28
 801b8d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	930c      	str	r3, [sp, #48]	@ 0x30
 801b8d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b8d8:	685c      	ldr	r4, [r3, #4]
 801b8da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8dc:	3404      	adds	r4, #4
 801b8de:	43db      	mvns	r3, r3
 801b8e0:	b2db      	uxtb	r3, r3
 801b8e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b8e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	dc03      	bgt.n	801b8f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b8ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	f340 8250 	ble.w	801bd92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b8f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b8f4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b8f8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b8fc:	1e48      	subs	r0, r1, #1
 801b8fe:	1e55      	subs	r5, r2, #1
 801b900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b902:	2b00      	cmp	r3, #0
 801b904:	f340 80ee 	ble.w	801bae4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b908:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801b90a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b90c:	1436      	asrs	r6, r6, #16
 801b90e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b912:	d406      	bmi.n	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b914:	4286      	cmp	r6, r0
 801b916:	da04      	bge.n	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b918:	2b00      	cmp	r3, #0
 801b91a:	db02      	blt.n	801b922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b91c:	42ab      	cmp	r3, r5
 801b91e:	f2c0 80e2 	blt.w	801bae6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b922:	3601      	adds	r6, #1
 801b924:	f100 80cf 	bmi.w	801bac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b928:	42b1      	cmp	r1, r6
 801b92a:	f2c0 80cc 	blt.w	801bac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b92e:	3301      	adds	r3, #1
 801b930:	f100 80c9 	bmi.w	801bac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b934:	429a      	cmp	r2, r3
 801b936:	f2c0 80c6 	blt.w	801bac6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b93a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801b93e:	f1bb 0f00 	cmp.w	fp, #0
 801b942:	f340 80f1 	ble.w	801bb28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b946:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b948:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b94a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b94c:	141d      	asrs	r5, r3, #16
 801b94e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b950:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b954:	68c7      	ldr	r7, [r0, #12]
 801b956:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b958:	1418      	asrs	r0, r3, #16
 801b95a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801b95e:	6892      	ldr	r2, [r2, #8]
 801b960:	f100 8137 	bmi.w	801bbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b964:	f102 3cff 	add.w	ip, r2, #4294967295
 801b968:	4560      	cmp	r0, ip
 801b96a:	f280 8132 	bge.w	801bbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b96e:	2d00      	cmp	r5, #0
 801b970:	f2c0 812f 	blt.w	801bbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b974:	f107 3cff 	add.w	ip, r7, #4294967295
 801b978:	4565      	cmp	r5, ip
 801b97a:	f280 812a 	bge.w	801bbd2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b97e:	b212      	sxth	r2, r2
 801b980:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b982:	fb05 0002 	mla	r0, r5, r2, r0
 801b986:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b988:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b98c:	4405      	add	r5, r0
 801b98e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b992:	eb04 0e0c 	add.w	lr, r4, ip
 801b996:	f1b8 0f00 	cmp.w	r8, #0
 801b99a:	f000 810c 	beq.w	801bbb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801b99e:	786f      	ldrb	r7, [r5, #1]
 801b9a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b9a4:	4427      	add	r7, r4
 801b9a6:	2900      	cmp	r1, #0
 801b9a8:	f000 810d 	beq.w	801bbc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801b9ac:	18a8      	adds	r0, r5, r2
 801b9ae:	5caa      	ldrb	r2, [r5, r2]
 801b9b0:	7840      	ldrb	r0, [r0, #1]
 801b9b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b9b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b9ba:	4422      	add	r2, r4
 801b9bc:	4420      	add	r0, r4
 801b9be:	fa1f f388 	uxth.w	r3, r8
 801b9c2:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801b9c6:	b289      	uxth	r1, r1
 801b9c8:	f897 c000 	ldrb.w	ip, [r7]
 801b9cc:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b9d0:	fb03 f901 	mul.w	r9, r3, r1
 801b9d4:	011b      	lsls	r3, r3, #4
 801b9d6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b9da:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801b9de:	eba3 0309 	sub.w	r3, r3, r9
 801b9e2:	b289      	uxth	r1, r1
 801b9e4:	b29b      	uxth	r3, r3
 801b9e6:	eba8 0801 	sub.w	r8, r8, r1
 801b9ea:	fb03 fc0c 	mul.w	ip, r3, ip
 801b9ee:	fa1f f888 	uxth.w	r8, r8
 801b9f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b9f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b9f6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801b9fa:	f892 a000 	ldrb.w	sl, [r2]
 801b9fe:	fb01 cc0a 	mla	ip, r1, sl, ip
 801ba02:	f890 a000 	ldrb.w	sl, [r0]
 801ba06:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ba0a:	f896 a000 	ldrb.w	sl, [r6]
 801ba0e:	fb1a fa03 	smulbb	sl, sl, r3
 801ba12:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ba16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba18:	fb0c ac05 	mla	ip, ip, r5, sl
 801ba1c:	fa1f fc8c 	uxth.w	ip, ip
 801ba20:	f10c 0a01 	add.w	sl, ip, #1
 801ba24:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801ba28:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ba2c:	f886 a000 	strb.w	sl, [r6]
 801ba30:	f897 c001 	ldrb.w	ip, [r7, #1]
 801ba34:	f89e a001 	ldrb.w	sl, [lr, #1]
 801ba38:	fb03 fc0c 	mul.w	ip, r3, ip
 801ba3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba3e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801ba42:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ba46:	fb01 cc0a 	mla	ip, r1, sl, ip
 801ba4a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ba4e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801ba52:	f896 a001 	ldrb.w	sl, [r6, #1]
 801ba56:	fb1a fa03 	smulbb	sl, sl, r3
 801ba5a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801ba5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba60:	fb0c ac05 	mla	ip, ip, r5, sl
 801ba64:	fa1f fc8c 	uxth.w	ip, ip
 801ba68:	f10c 0a01 	add.w	sl, ip, #1
 801ba6c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ba70:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ba74:	f886 c001 	strb.w	ip, [r6, #1]
 801ba78:	78bf      	ldrb	r7, [r7, #2]
 801ba7a:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ba7e:	437b      	muls	r3, r7
 801ba80:	fb08 330c 	mla	r3, r8, ip, r3
 801ba84:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ba88:	7882      	ldrb	r2, [r0, #2]
 801ba8a:	fb01 310c 	mla	r1, r1, ip, r3
 801ba8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba90:	fb09 1902 	mla	r9, r9, r2, r1
 801ba94:	78b1      	ldrb	r1, [r6, #2]
 801ba96:	fb11 f103 	smulbb	r1, r1, r3
 801ba9a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ba9e:	fb09 1505 	mla	r5, r9, r5, r1
 801baa2:	b2ad      	uxth	r5, r5
 801baa4:	1c6b      	adds	r3, r5, #1
 801baa6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801baaa:	122d      	asrs	r5, r5, #8
 801baac:	70b5      	strb	r5, [r6, #2]
 801baae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bab0:	3603      	adds	r6, #3
 801bab2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801bab4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bab8:	4413      	add	r3, r2
 801baba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801babc:	931d      	str	r3, [sp, #116]	@ 0x74
 801babe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bac0:	4413      	add	r3, r2
 801bac2:	931e      	str	r3, [sp, #120]	@ 0x78
 801bac4:	e73b      	b.n	801b93e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801bac6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bac8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801baca:	4433      	add	r3, r6
 801bacc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801bace:	931d      	str	r3, [sp, #116]	@ 0x74
 801bad0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bad2:	4433      	add	r3, r6
 801bad4:	931e      	str	r3, [sp, #120]	@ 0x78
 801bad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bad8:	3b01      	subs	r3, #1
 801bada:	9309      	str	r3, [sp, #36]	@ 0x24
 801badc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bade:	3303      	adds	r3, #3
 801bae0:	930a      	str	r3, [sp, #40]	@ 0x28
 801bae2:	e70d      	b.n	801b900 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bae4:	d028      	beq.n	801bb38 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801bae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bae8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801baea:	3b01      	subs	r3, #1
 801baec:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801baee:	fb00 5003 	mla	r0, r0, r3, r5
 801baf2:	1400      	asrs	r0, r0, #16
 801baf4:	f53f af21 	bmi.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801baf8:	3901      	subs	r1, #1
 801bafa:	4288      	cmp	r0, r1
 801bafc:	f6bf af1d 	bge.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb00:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801bb02:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801bb04:	fb01 0303 	mla	r3, r1, r3, r0
 801bb08:	141b      	asrs	r3, r3, #16
 801bb0a:	f53f af16 	bmi.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb0e:	3a01      	subs	r2, #1
 801bb10:	4293      	cmp	r3, r2
 801bb12:	f6bf af12 	bge.w	801b93a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801bb16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bb18:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801bb1c:	1cdf      	adds	r7, r3, #3
 801bb1e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801bb22:	f1b9 0f00 	cmp.w	r9, #0
 801bb26:	dc73      	bgt.n	801bc10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801bb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bb2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bb2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb34:	441a      	add	r2, r3
 801bb36:	920a      	str	r2, [sp, #40]	@ 0x28
 801bb38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	f340 8129 	ble.w	801bd92 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801bb40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bb44:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bb46:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb4e:	eef0 6a62 	vmov.f32	s13, s5
 801bb52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bb56:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb5e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801bb62:	eef0 6a43 	vmov.f32	s13, s6
 801bb66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bb6a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801bb6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb72:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb76:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb86:	ee12 2a90 	vmov	r2, s5
 801bb8a:	eef0 2a47 	vmov.f32	s5, s14
 801bb8e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb92:	ee13 2a10 	vmov	r2, s6
 801bb96:	931f      	str	r3, [sp, #124]	@ 0x7c
 801bb98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bb9a:	eeb0 3a67 	vmov.f32	s6, s15
 801bb9e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bba2:	9320      	str	r3, [sp, #128]	@ 0x80
 801bba4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bba6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bba8:	3b01      	subs	r3, #1
 801bbaa:	930d      	str	r3, [sp, #52]	@ 0x34
 801bbac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801bbae:	bf08      	it	eq
 801bbb0:	4613      	moveq	r3, r2
 801bbb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bbb4:	e696      	b.n	801b8e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801bbb6:	b149      	cbz	r1, 801bbcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801bbb8:	5caa      	ldrb	r2, [r5, r2]
 801bbba:	4670      	mov	r0, lr
 801bbbc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bbc0:	4422      	add	r2, r4
 801bbc2:	4677      	mov	r7, lr
 801bbc4:	e6fb      	b.n	801b9be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bbc6:	4670      	mov	r0, lr
 801bbc8:	4672      	mov	r2, lr
 801bbca:	e6f8      	b.n	801b9be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801bbcc:	4670      	mov	r0, lr
 801bbce:	4672      	mov	r2, lr
 801bbd0:	e7f7      	b.n	801bbc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801bbd2:	f110 0c01 	adds.w	ip, r0, #1
 801bbd6:	f53f af6a 	bmi.w	801baae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bbda:	4562      	cmp	r2, ip
 801bbdc:	f6ff af67 	blt.w	801baae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bbe0:	f115 0c01 	adds.w	ip, r5, #1
 801bbe4:	f53f af63 	bmi.w	801baae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bbe8:	4567      	cmp	r7, ip
 801bbea:	f6ff af60 	blt.w	801baae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bbee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bbf0:	b23f      	sxth	r7, r7
 801bbf2:	b212      	sxth	r2, r2
 801bbf4:	9002      	str	r0, [sp, #8]
 801bbf6:	9701      	str	r7, [sp, #4]
 801bbf8:	9200      	str	r2, [sp, #0]
 801bbfa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bbfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bbfe:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801bc02:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801bc06:	4623      	mov	r3, r4
 801bc08:	4631      	mov	r1, r6
 801bc0a:	f7ff fd69 	bl	801b6e0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801bc0e:	e74e      	b.n	801baae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801bc10:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801bc12:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801bc14:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bc18:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801bc1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801bc1c:	1400      	asrs	r0, r0, #16
 801bc1e:	142d      	asrs	r5, r5, #16
 801bc20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bc22:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801bc26:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bc2a:	fb02 5000 	mla	r0, r2, r0, r5
 801bc2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801bc30:	f815 e000 	ldrb.w	lr, [r5, r0]
 801bc34:	eb05 0c00 	add.w	ip, r5, r0
 801bc38:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bc3c:	eb04 060e 	add.w	r6, r4, lr
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f000 8097 	beq.w	801bd74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801bc46:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801bc4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc4e:	4425      	add	r5, r4
 801bc50:	2900      	cmp	r1, #0
 801bc52:	f000 8098 	beq.w	801bd86 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801bc56:	eb0c 0002 	add.w	r0, ip, r2
 801bc5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bc5e:	7840      	ldrb	r0, [r0, #1]
 801bc60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bc68:	4422      	add	r2, r4
 801bc6a:	4420      	add	r0, r4
 801bc6c:	b29b      	uxth	r3, r3
 801bc6e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801bc72:	b289      	uxth	r1, r1
 801bc74:	f895 e000 	ldrb.w	lr, [r5]
 801bc78:	3703      	adds	r7, #3
 801bc7a:	f109 39ff 	add.w	r9, r9, #4294967295
 801bc7e:	fb03 f801 	mul.w	r8, r3, r1
 801bc82:	011b      	lsls	r3, r3, #4
 801bc84:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801bc88:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801bc8c:	eba3 0308 	sub.w	r3, r3, r8
 801bc90:	b289      	uxth	r1, r1
 801bc92:	b29b      	uxth	r3, r3
 801bc94:	ebac 0c01 	sub.w	ip, ip, r1
 801bc98:	fb03 fe0e 	mul.w	lr, r3, lr
 801bc9c:	fa1f fc8c 	uxth.w	ip, ip
 801bca0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bca2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bca4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bca8:	f892 b000 	ldrb.w	fp, [r2]
 801bcac:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bcb0:	f890 b000 	ldrb.w	fp, [r0]
 801bcb4:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bcb8:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801bcbc:	fb1b fb03 	smulbb	fp, fp, r3
 801bcc0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bcc6:	fb0e be0a 	mla	lr, lr, sl, fp
 801bcca:	fa1f fe8e 	uxth.w	lr, lr
 801bcce:	f10e 0b01 	add.w	fp, lr, #1
 801bcd2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bcd6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bcda:	f807 ec06 	strb.w	lr, [r7, #-6]
 801bcde:	f895 e001 	ldrb.w	lr, [r5, #1]
 801bce2:	f896 b001 	ldrb.w	fp, [r6, #1]
 801bce6:	fb03 fe0e 	mul.w	lr, r3, lr
 801bcea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bcec:	fb0c ee0b 	mla	lr, ip, fp, lr
 801bcf0:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bcf4:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bcf8:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bcfc:	fb08 ee0b 	mla	lr, r8, fp, lr
 801bd00:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801bd04:	fb1b fb03 	smulbb	fp, fp, r3
 801bd08:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bd0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd0e:	fb0e be0a 	mla	lr, lr, sl, fp
 801bd12:	fa1f fe8e 	uxth.w	lr, lr
 801bd16:	f10e 0b01 	add.w	fp, lr, #1
 801bd1a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bd1e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bd22:	f807 ec05 	strb.w	lr, [r7, #-5]
 801bd26:	78ad      	ldrb	r5, [r5, #2]
 801bd28:	78b6      	ldrb	r6, [r6, #2]
 801bd2a:	436b      	muls	r3, r5
 801bd2c:	7895      	ldrb	r5, [r2, #2]
 801bd2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bd30:	fb0c 3306 	mla	r3, ip, r6, r3
 801bd34:	fb01 3305 	mla	r3, r1, r5, r3
 801bd38:	7885      	ldrb	r5, [r0, #2]
 801bd3a:	fb08 3805 	mla	r8, r8, r5, r3
 801bd3e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801bd42:	fb13 f302 	smulbb	r3, r3, r2
 801bd46:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801bd4a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801bd4c:	fb08 380a 	mla	r8, r8, sl, r3
 801bd50:	fa1f f888 	uxth.w	r8, r8
 801bd54:	f108 0301 	add.w	r3, r8, #1
 801bd58:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801bd5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bd5e:	4413      	add	r3, r2
 801bd60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bd62:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bd66:	931d      	str	r3, [sp, #116]	@ 0x74
 801bd68:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bd6a:	f807 8c04 	strb.w	r8, [r7, #-4]
 801bd6e:	4413      	add	r3, r2
 801bd70:	931e      	str	r3, [sp, #120]	@ 0x78
 801bd72:	e6d6      	b.n	801bb22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bd74:	b151      	cbz	r1, 801bd8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801bd76:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bd7a:	4630      	mov	r0, r6
 801bd7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd80:	4422      	add	r2, r4
 801bd82:	4635      	mov	r5, r6
 801bd84:	e772      	b.n	801bc6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bd86:	4630      	mov	r0, r6
 801bd88:	4632      	mov	r2, r6
 801bd8a:	e76f      	b.n	801bc6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	4632      	mov	r2, r6
 801bd90:	e7f7      	b.n	801bd82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bd92:	b013      	add	sp, #76	@ 0x4c
 801bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801bd98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd9c:	784c      	ldrb	r4, [r1, #1]
 801bd9e:	f891 a002 	ldrb.w	sl, [r1, #2]
 801bda2:	0224      	lsls	r4, r4, #8
 801bda4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801bda8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801bdac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bdb0:	f891 a000 	ldrb.w	sl, [r1]
 801bdb4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801bdb8:	ea44 040a 	orr.w	r4, r4, sl
 801bdbc:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801bdc0:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801bdc4:	9401      	str	r4, [sp, #4]
 801bdc6:	fb05 c70e 	mla	r7, r5, lr, ip
 801bdca:	2d00      	cmp	r5, #0
 801bdcc:	eb02 0807 	add.w	r8, r2, r7
 801bdd0:	db72      	blt.n	801beb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bdd2:	45a9      	cmp	r9, r5
 801bdd4:	dd70      	ble.n	801beb8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bdd6:	f1bc 0f00 	cmp.w	ip, #0
 801bdda:	db6b      	blt.n	801beb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bddc:	45e6      	cmp	lr, ip
 801bdde:	dd69      	ble.n	801beb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bde0:	5dd7      	ldrb	r7, [r2, r7]
 801bde2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bde6:	441f      	add	r7, r3
 801bde8:	f11c 0201 	adds.w	r2, ip, #1
 801bdec:	d467      	bmi.n	801bebe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bdee:	4596      	cmp	lr, r2
 801bdf0:	dd65      	ble.n	801bebe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bdf2:	2800      	cmp	r0, #0
 801bdf4:	d063      	beq.n	801bebe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bdf6:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bdfa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bdfe:	441c      	add	r4, r3
 801be00:	3501      	adds	r5, #1
 801be02:	d460      	bmi.n	801bec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801be04:	45a9      	cmp	r9, r5
 801be06:	dd5e      	ble.n	801bec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801be08:	2e00      	cmp	r6, #0
 801be0a:	d05c      	beq.n	801bec6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801be0c:	f1bc 0f00 	cmp.w	ip, #0
 801be10:	db57      	blt.n	801bec2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801be12:	45e6      	cmp	lr, ip
 801be14:	dd55      	ble.n	801bec2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801be16:	f818 500e 	ldrb.w	r5, [r8, lr]
 801be1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801be1e:	441d      	add	r5, r3
 801be20:	f11c 0201 	adds.w	r2, ip, #1
 801be24:	d452      	bmi.n	801becc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801be26:	4596      	cmp	lr, r2
 801be28:	dd50      	ble.n	801becc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801be2a:	2800      	cmp	r0, #0
 801be2c:	d04e      	beq.n	801becc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801be2e:	44c6      	add	lr, r8
 801be30:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801be34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801be38:	4413      	add	r3, r2
 801be3a:	b280      	uxth	r0, r0
 801be3c:	f897 8000 	ldrb.w	r8, [r7]
 801be40:	b2b2      	uxth	r2, r6
 801be42:	fb00 f602 	mul.w	r6, r0, r2
 801be46:	0100      	lsls	r0, r0, #4
 801be48:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801be4c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801be50:	1b80      	subs	r0, r0, r6
 801be52:	fa1f fc82 	uxth.w	ip, r2
 801be56:	b282      	uxth	r2, r0
 801be58:	7820      	ldrb	r0, [r4, #0]
 801be5a:	ebae 0e0c 	sub.w	lr, lr, ip
 801be5e:	4350      	muls	r0, r2
 801be60:	fa1f fe8e 	uxth.w	lr, lr
 801be64:	fb0e 0808 	mla	r8, lr, r8, r0
 801be68:	7828      	ldrb	r0, [r5, #0]
 801be6a:	fb0c 8800 	mla	r8, ip, r0, r8
 801be6e:	7818      	ldrb	r0, [r3, #0]
 801be70:	fb06 8000 	mla	r0, r6, r0, r8
 801be74:	1200      	asrs	r0, r0, #8
 801be76:	7008      	strb	r0, [r1, #0]
 801be78:	7860      	ldrb	r0, [r4, #1]
 801be7a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801be7e:	4350      	muls	r0, r2
 801be80:	fb0e 0808 	mla	r8, lr, r8, r0
 801be84:	7868      	ldrb	r0, [r5, #1]
 801be86:	fb0c 8800 	mla	r8, ip, r0, r8
 801be8a:	7858      	ldrb	r0, [r3, #1]
 801be8c:	fb06 8000 	mla	r0, r6, r0, r8
 801be90:	1200      	asrs	r0, r0, #8
 801be92:	7048      	strb	r0, [r1, #1]
 801be94:	78a0      	ldrb	r0, [r4, #2]
 801be96:	78bf      	ldrb	r7, [r7, #2]
 801be98:	4350      	muls	r0, r2
 801be9a:	78aa      	ldrb	r2, [r5, #2]
 801be9c:	fb0e 0007 	mla	r0, lr, r7, r0
 801bea0:	fb0c 0c02 	mla	ip, ip, r2, r0
 801bea4:	789a      	ldrb	r2, [r3, #2]
 801bea6:	fb06 c202 	mla	r2, r6, r2, ip
 801beaa:	1212      	asrs	r2, r2, #8
 801beac:	708a      	strb	r2, [r1, #2]
 801beae:	b002      	add	sp, #8
 801beb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801beb4:	af01      	add	r7, sp, #4
 801beb6:	e797      	b.n	801bde8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801beb8:	ac01      	add	r4, sp, #4
 801beba:	4627      	mov	r7, r4
 801bebc:	e7a0      	b.n	801be00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bebe:	ac01      	add	r4, sp, #4
 801bec0:	e79e      	b.n	801be00 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bec2:	ad01      	add	r5, sp, #4
 801bec4:	e7ac      	b.n	801be20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801bec6:	ab01      	add	r3, sp, #4
 801bec8:	461d      	mov	r5, r3
 801beca:	e7b6      	b.n	801be3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801becc:	ab01      	add	r3, sp, #4
 801bece:	e7b4      	b.n	801be3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801bed0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bed4:	b08d      	sub	sp, #52	@ 0x34
 801bed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801beda:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801bede:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bee0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801bee2:	9306      	str	r3, [sp, #24]
 801bee4:	6850      	ldr	r0, [r2, #4]
 801bee6:	6812      	ldr	r2, [r2, #0]
 801bee8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801beea:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801beee:	fb00 1303 	mla	r3, r0, r3, r1
 801bef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bef6:	18d3      	adds	r3, r2, r3
 801bef8:	9307      	str	r3, [sp, #28]
 801befa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	9308      	str	r3, [sp, #32]
 801bf00:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bf02:	685d      	ldr	r5, [r3, #4]
 801bf04:	3504      	adds	r5, #4
 801bf06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	dc03      	bgt.n	801bf14 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bf0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	f340 81e6 	ble.w	801c2e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801bf14:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bf16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bf1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bf1e:	1e48      	subs	r0, r1, #1
 801bf20:	1e56      	subs	r6, r2, #1
 801bf22:	9b06      	ldr	r3, [sp, #24]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f340 80bd 	ble.w	801c0a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bf2a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bf2c:	1427      	asrs	r7, r4, #16
 801bf2e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bf32:	d406      	bmi.n	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf34:	4287      	cmp	r7, r0
 801bf36:	da04      	bge.n	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	db02      	blt.n	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bf3c:	42b3      	cmp	r3, r6
 801bf3e:	f2c0 80b2 	blt.w	801c0a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bf42:	3701      	adds	r7, #1
 801bf44:	f100 80a1 	bmi.w	801c08a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bf48:	42b9      	cmp	r1, r7
 801bf4a:	f2c0 809e 	blt.w	801c08a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bf4e:	3301      	adds	r3, #1
 801bf50:	f100 809b 	bmi.w	801c08a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bf54:	429a      	cmp	r2, r3
 801bf56:	f2c0 8098 	blt.w	801c08a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bf5a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801bf5e:	f1bb 0f00 	cmp.w	fp, #0
 801bf62:	f340 80bf 	ble.w	801c0e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bf66:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bf68:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801bf6a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bf6c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bf70:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801bf74:	1420      	asrs	r0, r4, #16
 801bf76:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801bf78:	ea4f 4723 	mov.w	r7, r3, asr #16
 801bf7c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bf80:	6892      	ldr	r2, [r2, #8]
 801bf82:	f100 8103 	bmi.w	801c18c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bf86:	f102 3eff 	add.w	lr, r2, #4294967295
 801bf8a:	4570      	cmp	r0, lr
 801bf8c:	f280 80fe 	bge.w	801c18c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bf90:	2f00      	cmp	r7, #0
 801bf92:	f2c0 80fb 	blt.w	801c18c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bf96:	f10c 3eff 	add.w	lr, ip, #4294967295
 801bf9a:	4577      	cmp	r7, lr
 801bf9c:	f280 80f6 	bge.w	801c18c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bfa0:	b212      	sxth	r2, r2
 801bfa2:	fb07 0002 	mla	r0, r7, r2, r0
 801bfa6:	9f08      	ldr	r7, [sp, #32]
 801bfa8:	f817 8000 	ldrb.w	r8, [r7, r0]
 801bfac:	eb07 0e00 	add.w	lr, r7, r0
 801bfb0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bfb4:	eb05 0c08 	add.w	ip, r5, r8
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	f000 80d8 	beq.w	801c16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bfbe:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801bfc2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bfc6:	442f      	add	r7, r5
 801bfc8:	2900      	cmp	r1, #0
 801bfca:	f000 80d9 	beq.w	801c180 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bfce:	eb0e 0002 	add.w	r0, lr, r2
 801bfd2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801bfd6:	7840      	ldrb	r0, [r0, #1]
 801bfd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bfe0:	442a      	add	r2, r5
 801bfe2:	4428      	add	r0, r5
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	f815 a008 	ldrb.w	sl, [r5, r8]
 801bfea:	b289      	uxth	r1, r1
 801bfec:	f897 8000 	ldrb.w	r8, [r7]
 801bff0:	fb03 f901 	mul.w	r9, r3, r1
 801bff4:	011b      	lsls	r3, r3, #4
 801bff6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bffa:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801bffe:	eba3 0309 	sub.w	r3, r3, r9
 801c002:	b289      	uxth	r1, r1
 801c004:	b29b      	uxth	r3, r3
 801c006:	ebae 0e01 	sub.w	lr, lr, r1
 801c00a:	fb03 f808 	mul.w	r8, r3, r8
 801c00e:	fa1f fe8e 	uxth.w	lr, lr
 801c012:	fb0e 880a 	mla	r8, lr, sl, r8
 801c016:	f892 a000 	ldrb.w	sl, [r2]
 801c01a:	fb01 880a 	mla	r8, r1, sl, r8
 801c01e:	f890 a000 	ldrb.w	sl, [r0]
 801c022:	fb09 880a 	mla	r8, r9, sl, r8
 801c026:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c02a:	f886 8000 	strb.w	r8, [r6]
 801c02e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c032:	f89c a001 	ldrb.w	sl, [ip, #1]
 801c036:	fb03 f808 	mul.w	r8, r3, r8
 801c03a:	fb0e 880a 	mla	r8, lr, sl, r8
 801c03e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c042:	fb01 880a 	mla	r8, r1, sl, r8
 801c046:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c04a:	fb09 880a 	mla	r8, r9, sl, r8
 801c04e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c052:	f886 8001 	strb.w	r8, [r6, #1]
 801c056:	78bf      	ldrb	r7, [r7, #2]
 801c058:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c05c:	437b      	muls	r3, r7
 801c05e:	7892      	ldrb	r2, [r2, #2]
 801c060:	fb0e 330c 	mla	r3, lr, ip, r3
 801c064:	fb01 3102 	mla	r1, r1, r2, r3
 801c068:	7882      	ldrb	r2, [r0, #2]
 801c06a:	fb09 1902 	mla	r9, r9, r2, r1
 801c06e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c072:	f886 9002 	strb.w	r9, [r6, #2]
 801c076:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c078:	3603      	adds	r6, #3
 801c07a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c07c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c080:	441c      	add	r4, r3
 801c082:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c084:	4413      	add	r3, r2
 801c086:	9318      	str	r3, [sp, #96]	@ 0x60
 801c088:	e769      	b.n	801bf5e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c08a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c08c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801c08e:	441c      	add	r4, r3
 801c090:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c092:	443b      	add	r3, r7
 801c094:	9318      	str	r3, [sp, #96]	@ 0x60
 801c096:	9b06      	ldr	r3, [sp, #24]
 801c098:	3b01      	subs	r3, #1
 801c09a:	9306      	str	r3, [sp, #24]
 801c09c:	9b07      	ldr	r3, [sp, #28]
 801c09e:	3303      	adds	r3, #3
 801c0a0:	9307      	str	r3, [sp, #28]
 801c0a2:	e73e      	b.n	801bf22 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c0a4:	d026      	beq.n	801c0f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c0a6:	9b06      	ldr	r3, [sp, #24]
 801c0a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c0aa:	3b01      	subs	r3, #1
 801c0ac:	fb00 4003 	mla	r0, r0, r3, r4
 801c0b0:	1400      	asrs	r0, r0, #16
 801c0b2:	f53f af52 	bmi.w	801bf5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c0b6:	3901      	subs	r1, #1
 801c0b8:	4288      	cmp	r0, r1
 801c0ba:	f6bf af4e 	bge.w	801bf5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c0be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c0c0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801c0c2:	fb01 0303 	mla	r3, r1, r3, r0
 801c0c6:	141b      	asrs	r3, r3, #16
 801c0c8:	f53f af47 	bmi.w	801bf5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c0cc:	3a01      	subs	r2, #1
 801c0ce:	4293      	cmp	r3, r2
 801c0d0:	f6bf af43 	bge.w	801bf5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c0d4:	9b07      	ldr	r3, [sp, #28]
 801c0d6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801c0da:	f103 0803 	add.w	r8, r3, #3
 801c0de:	f1ba 0f00 	cmp.w	sl, #0
 801c0e2:	dc71      	bgt.n	801c1c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c0e4:	9b06      	ldr	r3, [sp, #24]
 801c0e6:	9a07      	ldr	r2, [sp, #28]
 801c0e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0f0:	441a      	add	r2, r3
 801c0f2:	9207      	str	r2, [sp, #28]
 801c0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	f340 80f2 	ble.w	801c2e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801c0fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c100:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c102:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c106:	eeb0 6a62 	vmov.f32	s12, s5
 801c10a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c10e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c112:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c116:	ee16 4a10 	vmov	r4, s12
 801c11a:	eeb0 6a43 	vmov.f32	s12, s6
 801c11e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c122:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801c126:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c12a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c12e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c132:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c136:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c13a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c13e:	ee12 2a90 	vmov	r2, s5
 801c142:	eef0 2a47 	vmov.f32	s5, s14
 801c146:	fb92 f3f3 	sdiv	r3, r2, r3
 801c14a:	ee13 2a10 	vmov	r2, s6
 801c14e:	9319      	str	r3, [sp, #100]	@ 0x64
 801c150:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c152:	eeb0 3a67 	vmov.f32	s6, s15
 801c156:	fb92 f3f3 	sdiv	r3, r2, r3
 801c15a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c15e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c160:	3b01      	subs	r3, #1
 801c162:	9309      	str	r3, [sp, #36]	@ 0x24
 801c164:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c166:	bf08      	it	eq
 801c168:	4613      	moveq	r3, r2
 801c16a:	9306      	str	r3, [sp, #24]
 801c16c:	e6cb      	b.n	801bf06 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c16e:	b151      	cbz	r1, 801c186 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801c170:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801c174:	4660      	mov	r0, ip
 801c176:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c17a:	442a      	add	r2, r5
 801c17c:	4667      	mov	r7, ip
 801c17e:	e731      	b.n	801bfe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c180:	4660      	mov	r0, ip
 801c182:	4662      	mov	r2, ip
 801c184:	e72e      	b.n	801bfe4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801c186:	4660      	mov	r0, ip
 801c188:	4662      	mov	r2, ip
 801c18a:	e7f7      	b.n	801c17c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801c18c:	f110 0e01 	adds.w	lr, r0, #1
 801c190:	f53f af71 	bmi.w	801c076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c194:	4572      	cmp	r2, lr
 801c196:	f6ff af6e 	blt.w	801c076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c19a:	f117 0e01 	adds.w	lr, r7, #1
 801c19e:	f53f af6a 	bmi.w	801c076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c1a2:	45f4      	cmp	ip, lr
 801c1a4:	f6ff af67 	blt.w	801c076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c1a8:	b212      	sxth	r2, r2
 801c1aa:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c1ae:	fa0f f38c 	sxth.w	r3, ip
 801c1b2:	9200      	str	r2, [sp, #0]
 801c1b4:	4631      	mov	r1, r6
 801c1b6:	9a08      	ldr	r2, [sp, #32]
 801c1b8:	9301      	str	r3, [sp, #4]
 801c1ba:	462b      	mov	r3, r5
 801c1bc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801c1c0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c1c2:	f7ff fde9 	bl	801bd98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801c1c6:	e756      	b.n	801c076 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801c1c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c1ca:	1426      	asrs	r6, r4, #16
 801c1cc:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801c1ce:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801c1d2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801c1d6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801c1d8:	1400      	asrs	r0, r0, #16
 801c1da:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c1de:	fb02 6000 	mla	r0, r2, r0, r6
 801c1e2:	9e08      	ldr	r6, [sp, #32]
 801c1e4:	f816 e000 	ldrb.w	lr, [r6, r0]
 801c1e8:	eb06 0c00 	add.w	ip, r6, r0
 801c1ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c1f0:	eb05 070e 	add.w	r7, r5, lr
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d064      	beq.n	801c2c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801c1f8:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801c1fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c200:	442e      	add	r6, r5
 801c202:	2900      	cmp	r1, #0
 801c204:	d066      	beq.n	801c2d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801c206:	eb0c 0002 	add.w	r0, ip, r2
 801c20a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c20e:	7840      	ldrb	r0, [r0, #1]
 801c210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c214:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c218:	442a      	add	r2, r5
 801c21a:	4428      	add	r0, r5
 801c21c:	b29b      	uxth	r3, r3
 801c21e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801c222:	b289      	uxth	r1, r1
 801c224:	f896 e000 	ldrb.w	lr, [r6]
 801c228:	f108 0803 	add.w	r8, r8, #3
 801c22c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c230:	fb03 f901 	mul.w	r9, r3, r1
 801c234:	011b      	lsls	r3, r3, #4
 801c236:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c23a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801c23e:	eba3 0309 	sub.w	r3, r3, r9
 801c242:	b289      	uxth	r1, r1
 801c244:	b29b      	uxth	r3, r3
 801c246:	ebac 0c01 	sub.w	ip, ip, r1
 801c24a:	fb03 fe0e 	mul.w	lr, r3, lr
 801c24e:	fa1f fc8c 	uxth.w	ip, ip
 801c252:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c256:	f892 b000 	ldrb.w	fp, [r2]
 801c25a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c25e:	f890 b000 	ldrb.w	fp, [r0]
 801c262:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c266:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c26a:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c26e:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c272:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c276:	fb03 fe0e 	mul.w	lr, r3, lr
 801c27a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c27e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c282:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c286:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c28a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c28e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c292:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c296:	78b6      	ldrb	r6, [r6, #2]
 801c298:	78bf      	ldrb	r7, [r7, #2]
 801c29a:	4373      	muls	r3, r6
 801c29c:	7896      	ldrb	r6, [r2, #2]
 801c29e:	7882      	ldrb	r2, [r0, #2]
 801c2a0:	fb0c 3307 	mla	r3, ip, r7, r3
 801c2a4:	fb01 3306 	mla	r3, r1, r6, r3
 801c2a8:	fb09 3902 	mla	r9, r9, r2, r3
 801c2ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c2b0:	441c      	add	r4, r3
 801c2b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c2b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c2b8:	4413      	add	r3, r2
 801c2ba:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c2be:	9318      	str	r3, [sp, #96]	@ 0x60
 801c2c0:	e70d      	b.n	801c0de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c2c2:	b151      	cbz	r1, 801c2da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c2c4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2c8:	4638      	mov	r0, r7
 801c2ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c2ce:	442a      	add	r2, r5
 801c2d0:	463e      	mov	r6, r7
 801c2d2:	e7a3      	b.n	801c21c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c2d4:	4638      	mov	r0, r7
 801c2d6:	463a      	mov	r2, r7
 801c2d8:	e7a0      	b.n	801c21c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c2da:	4638      	mov	r0, r7
 801c2dc:	463a      	mov	r2, r7
 801c2de:	e7f7      	b.n	801c2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c2e0:	b00d      	add	sp, #52	@ 0x34
 801c2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c2e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2ea:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801c2ee:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c2f2:	2d00      	cmp	r5, #0
 801c2f4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801c2f8:	fb05 700c 	mla	r0, r5, ip, r7
 801c2fc:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801c300:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801c304:	eb02 0800 	add.w	r8, r2, r0
 801c308:	f2c0 8118 	blt.w	801c53c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c30c:	45a9      	cmp	r9, r5
 801c30e:	f340 8115 	ble.w	801c53c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c312:	2f00      	cmp	r7, #0
 801c314:	f2c0 8110 	blt.w	801c538 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c318:	45bc      	cmp	ip, r7
 801c31a:	f340 810d 	ble.w	801c538 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c31e:	5c12      	ldrb	r2, [r2, r0]
 801c320:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c324:	1c7a      	adds	r2, r7, #1
 801c326:	f100 810c 	bmi.w	801c542 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c32a:	4594      	cmp	ip, r2
 801c32c:	f340 8109 	ble.w	801c542 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c330:	2c00      	cmp	r4, #0
 801c332:	f000 8108 	beq.w	801c546 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c336:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c33a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c33e:	3501      	adds	r5, #1
 801c340:	f100 8105 	bmi.w	801c54e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c344:	45a9      	cmp	r9, r5
 801c346:	f340 8102 	ble.w	801c54e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c34a:	f1be 0f00 	cmp.w	lr, #0
 801c34e:	f000 8101 	beq.w	801c554 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c352:	2f00      	cmp	r7, #0
 801c354:	f2c0 80f9 	blt.w	801c54a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c358:	45bc      	cmp	ip, r7
 801c35a:	f340 80f6 	ble.w	801c54a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c35e:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c362:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c366:	3701      	adds	r7, #1
 801c368:	f100 80f7 	bmi.w	801c55a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c36c:	45bc      	cmp	ip, r7
 801c36e:	f340 80f4 	ble.w	801c55a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c372:	2c00      	cmp	r4, #0
 801c374:	f000 80f3 	beq.w	801c55e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c378:	44c4      	add	ip, r8
 801c37a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c37e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c382:	fa1f fc84 	uxth.w	ip, r4
 801c386:	fa1f f48e 	uxth.w	r4, lr
 801c38a:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c38e:	fb04 fe0c 	mul.w	lr, r4, ip
 801c392:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c396:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c39a:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c39e:	ebac 070e 	sub.w	r7, ip, lr
 801c3a2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801c3a6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c3aa:	b2a4      	uxth	r4, r4
 801c3ac:	b2bf      	uxth	r7, r7
 801c3ae:	1b1b      	subs	r3, r3, r4
 801c3b0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c3b4:	fb07 fc0a 	mul.w	ip, r7, sl
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c3be:	9300      	str	r3, [sp, #0]
 801c3c0:	fb04 cc09 	mla	ip, r4, r9, ip
 801c3c4:	fb0e cc08 	mla	ip, lr, r8, ip
 801c3c8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c3cc:	9301      	str	r3, [sp, #4]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	f000 80af 	beq.w	801c532 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c3d4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801c3d8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c3dc:	fb0b fc0c 	mul.w	ip, fp, ip
 801c3e0:	fb0b f606 	mul.w	r6, fp, r6
 801c3e4:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c3e8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801c3ec:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801c3f0:	44dc      	add	ip, fp
 801c3f2:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801c3f6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c3fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c3fe:	fb0a fb0b 	mul.w	fp, sl, fp
 801c402:	fb0a fa00 	mul.w	sl, sl, r0
 801c406:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801c40a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801c40e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801c412:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c416:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c41a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c41e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c422:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c426:	0a36      	lsrs	r6, r6, #8
 801c428:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c42c:	44dc      	add	ip, fp
 801c42e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801c432:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801c436:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c43a:	fb09 fb0b 	mul.w	fp, r9, fp
 801c43e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c442:	fb09 f905 	mul.w	r9, r9, r5
 801c446:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801c44a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c44e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801c452:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c456:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c45a:	fb0c fc07 	mul.w	ip, ip, r7
 801c45e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801c462:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801c466:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801c46a:	4458      	add	r0, fp
 801c46c:	fb08 f505 	mul.w	r5, r8, r5
 801c470:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c474:	fb08 f802 	mul.w	r8, r8, r2
 801c478:	0a00      	lsrs	r0, r0, #8
 801c47a:	0a2a      	lsrs	r2, r5, #8
 801c47c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801c480:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c484:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801c488:	4415      	add	r5, r2
 801c48a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801c48e:	0a2d      	lsrs	r5, r5, #8
 801c490:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c494:	9a00      	ldr	r2, [sp, #0]
 801c496:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801c49a:	fb03 cc02 	mla	ip, r3, r2, ip
 801c49e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c4a2:	9b01      	ldr	r3, [sp, #4]
 801c4a4:	fb05 c50e 	mla	r5, r5, lr, ip
 801c4a8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801c4ac:	fb00 5004 	mla	r0, r0, r4, r5
 801c4b0:	0a00      	lsrs	r0, r0, #8
 801c4b2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801c4b6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801c4ba:	4378      	muls	r0, r7
 801c4bc:	fb02 0006 	mla	r0, r2, r6, r0
 801c4c0:	fb0e 0e08 	mla	lr, lr, r8, r0
 801c4c4:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801c4c8:	fb04 e000 	mla	r0, r4, r0, lr
 801c4cc:	0a00      	lsrs	r0, r0, #8
 801c4ce:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c4d2:	4328      	orrs	r0, r5
 801c4d4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801c4d8:	b2ad      	uxth	r5, r5
 801c4da:	b2c4      	uxtb	r4, r0
 801c4dc:	436b      	muls	r3, r5
 801c4de:	fb14 f405 	smulbb	r4, r4, r5
 801c4e2:	1c5a      	adds	r2, r3, #1
 801c4e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c4e8:	780b      	ldrb	r3, [r1, #0]
 801c4ea:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c4ee:	b2d2      	uxtb	r2, r2
 801c4f0:	fb03 4302 	mla	r3, r3, r2, r4
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	1c5c      	adds	r4, r3, #1
 801c4f8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c4fc:	784c      	ldrb	r4, [r1, #1]
 801c4fe:	fb14 f402 	smulbb	r4, r4, r2
 801c502:	121b      	asrs	r3, r3, #8
 801c504:	700b      	strb	r3, [r1, #0]
 801c506:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801c50a:	fb03 4305 	mla	r3, r3, r5, r4
 801c50e:	b29b      	uxth	r3, r3
 801c510:	1c5c      	adds	r4, r3, #1
 801c512:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c516:	0c04      	lsrs	r4, r0, #16
 801c518:	7888      	ldrb	r0, [r1, #2]
 801c51a:	121b      	asrs	r3, r3, #8
 801c51c:	fb10 f002 	smulbb	r0, r0, r2
 801c520:	704b      	strb	r3, [r1, #1]
 801c522:	fb04 0005 	mla	r0, r4, r5, r0
 801c526:	b280      	uxth	r0, r0
 801c528:	1c43      	adds	r3, r0, #1
 801c52a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c52e:	1200      	asrs	r0, r0, #8
 801c530:	7088      	strb	r0, [r1, #2]
 801c532:	b003      	add	sp, #12
 801c534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c538:	2600      	movs	r6, #0
 801c53a:	e6f3      	b.n	801c324 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801c53c:	2000      	movs	r0, #0
 801c53e:	4606      	mov	r6, r0
 801c540:	e6fd      	b.n	801c33e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c542:	2000      	movs	r0, #0
 801c544:	e6fb      	b.n	801c33e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c546:	4620      	mov	r0, r4
 801c548:	e6f9      	b.n	801c33e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c54a:	2500      	movs	r5, #0
 801c54c:	e70b      	b.n	801c366 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801c54e:	2200      	movs	r2, #0
 801c550:	4615      	mov	r5, r2
 801c552:	e716      	b.n	801c382 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c554:	4672      	mov	r2, lr
 801c556:	4675      	mov	r5, lr
 801c558:	e713      	b.n	801c382 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c55a:	2200      	movs	r2, #0
 801c55c:	e711      	b.n	801c382 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c55e:	4622      	mov	r2, r4
 801c560:	e70f      	b.n	801c382 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801c562 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c562:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c566:	b09f      	sub	sp, #124	@ 0x7c
 801c568:	921b      	str	r2, [sp, #108]	@ 0x6c
 801c56a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c56c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c56e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c572:	901d      	str	r0, [sp, #116]	@ 0x74
 801c574:	931c      	str	r3, [sp, #112]	@ 0x70
 801c576:	6850      	ldr	r0, [r2, #4]
 801c578:	9119      	str	r1, [sp, #100]	@ 0x64
 801c57a:	6812      	ldr	r2, [r2, #0]
 801c57c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801c57e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c582:	fb00 1303 	mla	r3, r0, r3, r1
 801c586:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c58a:	18d3      	adds	r3, r2, r3
 801c58c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c58e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	9312      	str	r3, [sp, #72]	@ 0x48
 801c594:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c596:	685e      	ldr	r6, [r3, #4]
 801c598:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801c59c:	3604      	adds	r6, #4
 801c59e:	930d      	str	r3, [sp, #52]	@ 0x34
 801c5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	dc03      	bgt.n	801c5ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c5a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	f340 8378 	ble.w	801cc9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c5ae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c5b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c5b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c5b8:	1e48      	subs	r0, r1, #1
 801c5ba:	1e57      	subs	r7, r2, #1
 801c5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	f340 818c 	ble.w	801c8dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801c5c4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c5c6:	142b      	asrs	r3, r5, #16
 801c5c8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c5cc:	d406      	bmi.n	801c5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c5ce:	4584      	cmp	ip, r0
 801c5d0:	da04      	bge.n	801c5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	db02      	blt.n	801c5dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c5d6:	42bb      	cmp	r3, r7
 801c5d8:	f2c0 8181 	blt.w	801c8de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801c5dc:	f11c 0c01 	adds.w	ip, ip, #1
 801c5e0:	f100 816f 	bmi.w	801c8c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c5e4:	4561      	cmp	r1, ip
 801c5e6:	f2c0 816c 	blt.w	801c8c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c5ea:	3301      	adds	r3, #1
 801c5ec:	f100 8169 	bmi.w	801c8c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	f2c0 8166 	blt.w	801c8c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5f8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c5fa:	931a      	str	r3, [sp, #104]	@ 0x68
 801c5fc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	f340 818c 	ble.w	801c91c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801c604:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c606:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c60a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c60e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c612:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c614:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c618:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c61a:	141b      	asrs	r3, r3, #16
 801c61c:	f100 81d0 	bmi.w	801c9c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c620:	f100 38ff 	add.w	r8, r0, #4294967295
 801c624:	4543      	cmp	r3, r8
 801c626:	f280 81cb 	bge.w	801c9c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c62a:	f1bc 0f00 	cmp.w	ip, #0
 801c62e:	f2c0 81c7 	blt.w	801c9c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c632:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c636:	45c4      	cmp	ip, r8
 801c638:	f280 81c2 	bge.w	801c9c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c63c:	b200      	sxth	r0, r0
 801c63e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c640:	fb0c 3300 	mla	r3, ip, r0, r3
 801c644:	eb04 0803 	add.w	r8, r4, r3
 801c648:	5ce3      	ldrb	r3, [r4, r3]
 801c64a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c64e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c652:	2a00      	cmp	r2, #0
 801c654:	f000 81a9 	beq.w	801c9aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c658:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c65c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c660:	940e      	str	r4, [sp, #56]	@ 0x38
 801c662:	0e24      	lsrs	r4, r4, #24
 801c664:	9415      	str	r4, [sp, #84]	@ 0x54
 801c666:	b179      	cbz	r1, 801c688 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c668:	eb08 0c00 	add.w	ip, r8, r0
 801c66c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c670:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c674:	900a      	str	r0, [sp, #40]	@ 0x28
 801c676:	0e00      	lsrs	r0, r0, #24
 801c678:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c67a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c67e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c682:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c684:	0e00      	lsrs	r0, r0, #24
 801c686:	9016      	str	r0, [sp, #88]	@ 0x58
 801c688:	b292      	uxth	r2, r2
 801c68a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c68c:	b289      	uxth	r1, r1
 801c68e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c690:	fb02 f901 	mul.w	r9, r2, r1
 801c694:	0112      	lsls	r2, r2, #4
 801c696:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c69a:	eba2 0809 	sub.w	r8, r2, r9
 801c69e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c6a2:	b289      	uxth	r1, r1
 801c6a4:	fa1f f888 	uxth.w	r8, r8
 801c6a8:	1a52      	subs	r2, r2, r1
 801c6aa:	fb08 f000 	mul.w	r0, r8, r0
 801c6ae:	b292      	uxth	r2, r2
 801c6b0:	fb02 000e 	mla	r0, r2, lr, r0
 801c6b4:	fb01 0004 	mla	r0, r1, r4, r0
 801c6b8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c6ba:	fb09 0004 	mla	r0, r9, r4, r0
 801c6be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c6c2:	2800      	cmp	r0, #0
 801c6c4:	f000 80f2 	beq.w	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c6c8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801c6cc:	d01b      	beq.n	801c706 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c6ce:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c6d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c6d6:	fb0e fa0a 	mul.w	sl, lr, sl
 801c6da:	fb0e fe03 	mul.w	lr, lr, r3
 801c6de:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c6e2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c6e6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801c6ea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c6ee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c6f2:	4453      	add	r3, sl
 801c6f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c6f8:	0a1b      	lsrs	r3, r3, #8
 801c6fa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c6fe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c702:	ea43 030c 	orr.w	r3, r3, ip
 801c706:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c708:	2cff      	cmp	r4, #255	@ 0xff
 801c70a:	d021      	beq.n	801c750 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801c70c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c70e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c712:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c714:	fb04 fb0b 	mul.w	fp, r4, fp
 801c718:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c71a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c71e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c720:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c724:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c728:	fb04 fa0a 	mul.w	sl, r4, sl
 801c72c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c730:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c734:	44de      	add	lr, fp
 801c736:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c73a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c73e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c742:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c746:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c74a:	ea4e 040a 	orr.w	r4, lr, sl
 801c74e:	940e      	str	r4, [sp, #56]	@ 0x38
 801c750:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c752:	2cff      	cmp	r4, #255	@ 0xff
 801c754:	d021      	beq.n	801c79a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c756:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c758:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c75c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c75e:	fb04 fb0b 	mul.w	fp, r4, fp
 801c762:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c764:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c768:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c76a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c76e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c772:	fb04 fa0a 	mul.w	sl, r4, sl
 801c776:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c77a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c77e:	44de      	add	lr, fp
 801c780:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c78c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c790:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c794:	ea4e 040a 	orr.w	r4, lr, sl
 801c798:	940a      	str	r4, [sp, #40]	@ 0x28
 801c79a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c79c:	2cff      	cmp	r4, #255	@ 0xff
 801c79e:	d021      	beq.n	801c7e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c7a0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c7a2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c7a6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c7a8:	fb04 fb0b 	mul.w	fp, r4, fp
 801c7ac:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c7ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c7b2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c7b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c7b8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c7bc:	fb04 fa0a 	mul.w	sl, r4, sl
 801c7c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c7c4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c7c8:	44de      	add	lr, fp
 801c7ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c7ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c7d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c7d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c7da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c7de:	ea4e 040a 	orr.w	r4, lr, sl
 801c7e2:	940f      	str	r4, [sp, #60]	@ 0x3c
 801c7e4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c7e6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c7ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c7ee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c7f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c7f4:	fb08 fc0c 	mul.w	ip, r8, ip
 801c7f8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c7fc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c800:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c802:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c806:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c80a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c80c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c810:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c814:	fb08 f80e 	mul.w	r8, r8, lr
 801c818:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c81c:	fb02 8303 	mla	r3, r2, r3, r8
 801c820:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c822:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c826:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c82a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c82c:	fb01 330a 	mla	r3, r1, sl, r3
 801c830:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801c834:	fb09 3901 	mla	r9, r9, r1, r3
 801c838:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c83a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c83c:	4343      	muls	r3, r0
 801c83e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c842:	1c58      	adds	r0, r3, #1
 801c844:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c848:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c84c:	ea4c 0c09 	orr.w	ip, ip, r9
 801c850:	783b      	ldrb	r3, [r7, #0]
 801c852:	fa5f f28c 	uxtb.w	r2, ip
 801c856:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c85a:	fb12 f201 	smulbb	r2, r2, r1
 801c85e:	b2c0      	uxtb	r0, r0
 801c860:	fb03 2300 	mla	r3, r3, r0, r2
 801c864:	b29b      	uxth	r3, r3
 801c866:	1c5a      	adds	r2, r3, #1
 801c868:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c86c:	787a      	ldrb	r2, [r7, #1]
 801c86e:	fb12 f200 	smulbb	r2, r2, r0
 801c872:	121b      	asrs	r3, r3, #8
 801c874:	703b      	strb	r3, [r7, #0]
 801c876:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c87a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c87e:	fb03 2301 	mla	r3, r3, r1, r2
 801c882:	b29b      	uxth	r3, r3
 801c884:	1c5a      	adds	r2, r3, #1
 801c886:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c88a:	121b      	asrs	r3, r3, #8
 801c88c:	707b      	strb	r3, [r7, #1]
 801c88e:	78bb      	ldrb	r3, [r7, #2]
 801c890:	fb13 f000 	smulbb	r0, r3, r0
 801c894:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c898:	fa1f fc8c 	uxth.w	ip, ip
 801c89c:	f10c 0301 	add.w	r3, ip, #1
 801c8a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c8a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c8a8:	f887 c002 	strb.w	ip, [r7, #2]
 801c8ac:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c8ae:	3703      	adds	r7, #3
 801c8b0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801c8b2:	441a      	add	r2, r3
 801c8b4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c8b6:	441d      	add	r5, r3
 801c8b8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c8ba:	9229      	str	r2, [sp, #164]	@ 0xa4
 801c8bc:	3b01      	subs	r3, #1
 801c8be:	931a      	str	r3, [sp, #104]	@ 0x68
 801c8c0:	e69c      	b.n	801c5fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c8c2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c8c4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c8c6:	441c      	add	r4, r3
 801c8c8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c8ca:	441d      	add	r5, r3
 801c8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8ce:	9429      	str	r4, [sp, #164]	@ 0xa4
 801c8d0:	3b01      	subs	r3, #1
 801c8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8d6:	3303      	adds	r3, #3
 801c8d8:	930c      	str	r3, [sp, #48]	@ 0x30
 801c8da:	e66f      	b.n	801c5bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c8dc:	d026      	beq.n	801c92c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8e0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c8e2:	3b01      	subs	r3, #1
 801c8e4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c8e6:	fb00 4003 	mla	r0, r0, r3, r4
 801c8ea:	1400      	asrs	r0, r0, #16
 801c8ec:	f53f ae83 	bmi.w	801c5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c8f0:	3901      	subs	r1, #1
 801c8f2:	4288      	cmp	r0, r1
 801c8f4:	f6bf ae7f 	bge.w	801c5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c8f8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c8fa:	fb01 5303 	mla	r3, r1, r3, r5
 801c8fe:	141b      	asrs	r3, r3, #16
 801c900:	f53f ae79 	bmi.w	801c5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c904:	3a01      	subs	r2, #1
 801c906:	4293      	cmp	r3, r2
 801c908:	f6bf ae75 	bge.w	801c5f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c90c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c90e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801c912:	f103 0e03 	add.w	lr, r3, #3
 801c916:	f1bb 0f00 	cmp.w	fp, #0
 801c91a:	dc71      	bgt.n	801ca00 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c91e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c924:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c928:	4423      	add	r3, r4
 801c92a:	930c      	str	r3, [sp, #48]	@ 0x30
 801c92c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c92e:	2b00      	cmp	r3, #0
 801c930:	f340 81b5 	ble.w	801cc9e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c934:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c938:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c93a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c93e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c942:	eef0 6a62 	vmov.f32	s13, s5
 801c946:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c94a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c94e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c952:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801c956:	eef0 6a43 	vmov.f32	s13, s6
 801c95a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c95e:	ee16 5a90 	vmov	r5, s13
 801c962:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c966:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c96a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c96e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c972:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c976:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c97a:	ee12 2a90 	vmov	r2, s5
 801c97e:	eef0 2a47 	vmov.f32	s5, s14
 801c982:	fb92 f3f3 	sdiv	r3, r2, r3
 801c986:	ee13 2a10 	vmov	r2, s6
 801c98a:	932b      	str	r3, [sp, #172]	@ 0xac
 801c98c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c98e:	eeb0 3a67 	vmov.f32	s6, s15
 801c992:	fb92 f3f3 	sdiv	r3, r2, r3
 801c996:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c99a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c99c:	3b01      	subs	r3, #1
 801c99e:	9319      	str	r3, [sp, #100]	@ 0x64
 801c9a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c9a2:	bf08      	it	eq
 801c9a4:	4613      	moveq	r3, r2
 801c9a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9a8:	e5fa      	b.n	801c5a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c9aa:	2900      	cmp	r1, #0
 801c9ac:	f43f ae6c 	beq.w	801c688 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c9b0:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c9b4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c9b8:	900a      	str	r0, [sp, #40]	@ 0x28
 801c9ba:	0e00      	lsrs	r0, r0, #24
 801c9bc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c9be:	e663      	b.n	801c688 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c9c0:	f113 0801 	adds.w	r8, r3, #1
 801c9c4:	f53f af72 	bmi.w	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c9c8:	4540      	cmp	r0, r8
 801c9ca:	f6ff af6f 	blt.w	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c9ce:	f11c 0801 	adds.w	r8, ip, #1
 801c9d2:	f53f af6b 	bmi.w	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c9d6:	45c6      	cmp	lr, r8
 801c9d8:	f6ff af68 	blt.w	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c9dc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801c9de:	b200      	sxth	r0, r0
 801c9e0:	9302      	str	r3, [sp, #8]
 801c9e2:	fa0f f38e 	sxth.w	r3, lr
 801c9e6:	9000      	str	r0, [sp, #0]
 801c9e8:	9301      	str	r3, [sp, #4]
 801c9ea:	4633      	mov	r3, r6
 801c9ec:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c9ee:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c9f2:	e9cd c203 	strd	ip, r2, [sp, #12]
 801c9f6:	4639      	mov	r1, r7
 801c9f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c9fa:	f7ff fc74 	bl	801c2e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801c9fe:	e755      	b.n	801c8ac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ca00:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ca02:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ca06:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801ca08:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ca0c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ca0e:	1427      	asrs	r7, r4, #16
 801ca10:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ca12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ca16:	142b      	asrs	r3, r5, #16
 801ca18:	fb01 7303 	mla	r3, r1, r3, r7
 801ca1c:	18e7      	adds	r7, r4, r3
 801ca1e:	5ce3      	ldrb	r3, [r4, r3]
 801ca20:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ca24:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ca28:	2a00      	cmp	r2, #0
 801ca2a:	f000 812e 	beq.w	801cc8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801ca2e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ca32:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ca36:	9410      	str	r4, [sp, #64]	@ 0x40
 801ca38:	0e24      	lsrs	r4, r4, #24
 801ca3a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801ca3c:	b170      	cbz	r0, 801ca5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ca3e:	eb07 0801 	add.w	r8, r7, r1
 801ca42:	5c79      	ldrb	r1, [r7, r1]
 801ca44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ca48:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca4a:	0e09      	lsrs	r1, r1, #24
 801ca4c:	9114      	str	r1, [sp, #80]	@ 0x50
 801ca4e:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ca52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ca56:	9111      	str	r1, [sp, #68]	@ 0x44
 801ca58:	0e09      	lsrs	r1, r1, #24
 801ca5a:	9118      	str	r1, [sp, #96]	@ 0x60
 801ca5c:	b292      	uxth	r2, r2
 801ca5e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ca60:	b280      	uxth	r0, r0
 801ca62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ca64:	fb02 f900 	mul.w	r9, r2, r0
 801ca68:	0112      	lsls	r2, r2, #4
 801ca6a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ca6e:	eba2 0809 	sub.w	r8, r2, r9
 801ca72:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ca76:	b280      	uxth	r0, r0
 801ca78:	fa1f f888 	uxth.w	r8, r8
 801ca7c:	1a12      	subs	r2, r2, r0
 801ca7e:	fb08 f101 	mul.w	r1, r8, r1
 801ca82:	b292      	uxth	r2, r2
 801ca84:	fb02 110c 	mla	r1, r2, ip, r1
 801ca88:	fb00 1104 	mla	r1, r0, r4, r1
 801ca8c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ca8e:	fb09 1104 	mla	r1, r9, r4, r1
 801ca92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ca96:	2900      	cmp	r1, #0
 801ca98:	f000 80ec 	beq.w	801cc74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801ca9c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801caa0:	d019      	beq.n	801cad6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801caa2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801caa6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801caaa:	fb0c fa0a 	mul.w	sl, ip, sl
 801caae:	fb0c fc03 	mul.w	ip, ip, r3
 801cab2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cab6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801caba:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801cabe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801cac2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cac6:	4453      	add	r3, sl
 801cac8:	0a3f      	lsrs	r7, r7, #8
 801caca:	0a1b      	lsrs	r3, r3, #8
 801cacc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801cad0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801cad4:	433b      	orrs	r3, r7
 801cad6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801cad8:	2cff      	cmp	r4, #255	@ 0xff
 801cada:	d020      	beq.n	801cb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801cadc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cade:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801cae2:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801cae4:	4367      	muls	r7, r4
 801cae6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cae8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801caec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801caf0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801caf2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801caf6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cafa:	fb04 fa0a 	mul.w	sl, r4, sl
 801cafe:	44bc      	add	ip, r7
 801cb00:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801cb04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cb0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cb10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cb18:	ea4c 040a 	orr.w	r4, ip, sl
 801cb1c:	9410      	str	r4, [sp, #64]	@ 0x40
 801cb1e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cb20:	2cff      	cmp	r4, #255	@ 0xff
 801cb22:	d020      	beq.n	801cb66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801cb24:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cb26:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801cb2a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cb2c:	4367      	muls	r7, r4
 801cb2e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cb30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cb34:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cb38:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cb3a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801cb3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cb42:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb46:	44bc      	add	ip, r7
 801cb48:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801cb4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cb54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cb58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cb60:	ea4c 040a 	orr.w	r4, ip, sl
 801cb64:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cb66:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801cb68:	2cff      	cmp	r4, #255	@ 0xff
 801cb6a:	d020      	beq.n	801cbae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801cb6c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cb6e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801cb72:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801cb74:	4367      	muls	r7, r4
 801cb76:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cb78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cb7c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cb80:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801cb82:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801cb86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cb8a:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb8e:	44bc      	add	ip, r7
 801cb90:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801cb94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cb9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cba4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cba8:	ea4c 040a 	orr.w	r4, ip, sl
 801cbac:	9411      	str	r4, [sp, #68]	@ 0x44
 801cbae:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cbb0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801cbb4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801cbb8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801cbbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cbbe:	fb08 f707 	mul.w	r7, r8, r7
 801cbc2:	fb02 770c 	mla	r7, r2, ip, r7
 801cbc6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cbca:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cbcc:	fb00 770c 	mla	r7, r0, ip, r7
 801cbd0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cbd4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cbd6:	fb09 770c 	mla	r7, r9, ip, r7
 801cbda:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801cbde:	fb08 f80c 	mul.w	r8, r8, ip
 801cbe2:	0a3f      	lsrs	r7, r7, #8
 801cbe4:	fb02 8303 	mla	r3, r2, r3, r8
 801cbe8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cbea:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801cbee:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801cbf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cbf4:	fb00 330a 	mla	r3, r0, sl, r3
 801cbf8:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801cbfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cbfe:	fb09 3c0c 	mla	ip, r9, ip, r3
 801cc02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc08:	434b      	muls	r3, r1
 801cc0a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801cc0e:	1c59      	adds	r1, r3, #1
 801cc10:	ea47 070c 	orr.w	r7, r7, ip
 801cc14:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cc18:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801cc1c:	b2fa      	uxtb	r2, r7
 801cc1e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801cc22:	fb12 f200 	smulbb	r2, r2, r0
 801cc26:	b2c9      	uxtb	r1, r1
 801cc28:	fb03 2301 	mla	r3, r3, r1, r2
 801cc2c:	b29b      	uxth	r3, r3
 801cc2e:	1c5a      	adds	r2, r3, #1
 801cc30:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cc34:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801cc38:	fb12 f201 	smulbb	r2, r2, r1
 801cc3c:	121b      	asrs	r3, r3, #8
 801cc3e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801cc42:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801cc46:	0c3f      	lsrs	r7, r7, #16
 801cc48:	fb03 2300 	mla	r3, r3, r0, r2
 801cc4c:	b29b      	uxth	r3, r3
 801cc4e:	1c5a      	adds	r2, r3, #1
 801cc50:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cc54:	121b      	asrs	r3, r3, #8
 801cc56:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801cc5a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801cc5e:	fb13 f101 	smulbb	r1, r3, r1
 801cc62:	fb07 1700 	mla	r7, r7, r0, r1
 801cc66:	b2bf      	uxth	r7, r7
 801cc68:	1c7b      	adds	r3, r7, #1
 801cc6a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801cc6e:	123f      	asrs	r7, r7, #8
 801cc70:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801cc74:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801cc76:	f10e 0e03 	add.w	lr, lr, #3
 801cc7a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cc7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc80:	441a      	add	r2, r3
 801cc82:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cc84:	9229      	str	r2, [sp, #164]	@ 0xa4
 801cc86:	441d      	add	r5, r3
 801cc88:	e645      	b.n	801c916 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801cc8a:	2800      	cmp	r0, #0
 801cc8c:	f43f aee6 	beq.w	801ca5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cc90:	5c79      	ldrb	r1, [r7, r1]
 801cc92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cc96:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cc98:	0e09      	lsrs	r1, r1, #24
 801cc9a:	9114      	str	r1, [sp, #80]	@ 0x50
 801cc9c:	e6de      	b.n	801ca5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801cc9e:	b01f      	add	sp, #124	@ 0x7c
 801cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cca4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801cca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801ccac:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801ccb0:	2d00      	cmp	r5, #0
 801ccb2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ccb6:	fb05 700e 	mla	r0, r5, lr, r7
 801ccba:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801ccbe:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801ccc2:	eb02 0800 	add.w	r8, r2, r0
 801ccc6:	f2c0 8105 	blt.w	801ced4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ccca:	45a9      	cmp	r9, r5
 801cccc:	f340 8102 	ble.w	801ced4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ccd0:	2f00      	cmp	r7, #0
 801ccd2:	f2c0 80fd 	blt.w	801ced0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ccd6:	45be      	cmp	lr, r7
 801ccd8:	f340 80fa 	ble.w	801ced0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ccdc:	5c12      	ldrb	r2, [r2, r0]
 801ccde:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801cce2:	1c7a      	adds	r2, r7, #1
 801cce4:	f100 80f9 	bmi.w	801ceda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801cce8:	4596      	cmp	lr, r2
 801ccea:	f340 80f6 	ble.w	801ceda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801ccee:	2c00      	cmp	r4, #0
 801ccf0:	f000 80f5 	beq.w	801cede <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801ccf4:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ccf8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ccfc:	3501      	adds	r5, #1
 801ccfe:	f100 80f2 	bmi.w	801cee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cd02:	45a9      	cmp	r9, r5
 801cd04:	f340 80ef 	ble.w	801cee6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cd08:	f1bc 0f00 	cmp.w	ip, #0
 801cd0c:	f000 80ee 	beq.w	801ceec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801cd10:	2f00      	cmp	r7, #0
 801cd12:	f2c0 80e6 	blt.w	801cee2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cd16:	45be      	cmp	lr, r7
 801cd18:	f340 80e3 	ble.w	801cee2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cd1c:	f818 200e 	ldrb.w	r2, [r8, lr]
 801cd20:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cd24:	3701      	adds	r7, #1
 801cd26:	f100 80e4 	bmi.w	801cef2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cd2a:	45be      	cmp	lr, r7
 801cd2c:	f340 80e1 	ble.w	801cef2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cd30:	2c00      	cmp	r4, #0
 801cd32:	f000 80e0 	beq.w	801cef6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801cd36:	44c6      	add	lr, r8
 801cd38:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801cd3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cd40:	b2a3      	uxth	r3, r4
 801cd42:	fa1f fc8c 	uxth.w	ip, ip
 801cd46:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cd4a:	fb0c fe03 	mul.w	lr, ip, r3
 801cd4e:	011b      	lsls	r3, r3, #4
 801cd50:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cd54:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801cd58:	eba3 070e 	sub.w	r7, r3, lr
 801cd5c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801cd60:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cd64:	fa1f f48c 	uxth.w	r4, ip
 801cd68:	b2bf      	uxth	r7, r7
 801cd6a:	1b1b      	subs	r3, r3, r4
 801cd6c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cd70:	fb07 fc0a 	mul.w	ip, r7, sl
 801cd74:	b29b      	uxth	r3, r3
 801cd76:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cd7a:	9300      	str	r3, [sp, #0]
 801cd7c:	fb04 cc09 	mla	ip, r4, r9, ip
 801cd80:	fb0e cc08 	mla	ip, lr, r8, ip
 801cd84:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cd88:	9301      	str	r3, [sp, #4]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	f000 809d 	beq.w	801ceca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801cd90:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801cd94:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cd98:	fb0b fc0c 	mul.w	ip, fp, ip
 801cd9c:	fb0b f606 	mul.w	r6, fp, r6
 801cda0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cda4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cda8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801cdac:	44dc      	add	ip, fp
 801cdae:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801cdb2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cdb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdba:	fb0a fb0b 	mul.w	fp, sl, fp
 801cdbe:	fb0a fa00 	mul.w	sl, sl, r0
 801cdc2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801cdc6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801cdca:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801cdce:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cdd2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cdd6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cdda:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cdde:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cde2:	0a36      	lsrs	r6, r6, #8
 801cde4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cde8:	44dc      	add	ip, fp
 801cdea:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801cdee:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cdf2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cdf6:	fb09 fb0b 	mul.w	fp, r9, fp
 801cdfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdfe:	fb09 f905 	mul.w	r9, r9, r5
 801ce02:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801ce06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ce0a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801ce0e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ce12:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ce16:	fb0c fc07 	mul.w	ip, ip, r7
 801ce1a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801ce1e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801ce22:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ce26:	4458      	add	r0, fp
 801ce28:	fb08 f505 	mul.w	r5, r8, r5
 801ce2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ce30:	fb08 f802 	mul.w	r8, r8, r2
 801ce34:	0a00      	lsrs	r0, r0, #8
 801ce36:	0a2a      	lsrs	r2, r5, #8
 801ce38:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801ce3c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ce40:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ce44:	4415      	add	r5, r2
 801ce46:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801ce4a:	0a2d      	lsrs	r5, r5, #8
 801ce4c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ce50:	9a00      	ldr	r2, [sp, #0]
 801ce52:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ce56:	fb03 cc02 	mla	ip, r3, r2, ip
 801ce5a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ce5e:	9b01      	ldr	r3, [sp, #4]
 801ce60:	fb05 c50e 	mla	r5, r5, lr, ip
 801ce64:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ce68:	43db      	mvns	r3, r3
 801ce6a:	fb00 5004 	mla	r0, r0, r4, r5
 801ce6e:	b2db      	uxtb	r3, r3
 801ce70:	0a00      	lsrs	r0, r0, #8
 801ce72:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ce76:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ce7a:	4378      	muls	r0, r7
 801ce7c:	fb02 0006 	mla	r0, r2, r6, r0
 801ce80:	780a      	ldrb	r2, [r1, #0]
 801ce82:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ce86:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ce8a:	fb04 e000 	mla	r0, r4, r0, lr
 801ce8e:	fb02 f403 	mul.w	r4, r2, r3
 801ce92:	0a00      	lsrs	r0, r0, #8
 801ce94:	1c62      	adds	r2, r4, #1
 801ce96:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ce9a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ce9e:	4328      	orrs	r0, r5
 801cea0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cea4:	700a      	strb	r2, [r1, #0]
 801cea6:	784a      	ldrb	r2, [r1, #1]
 801cea8:	435a      	muls	r2, r3
 801ceaa:	1c54      	adds	r4, r2, #1
 801ceac:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801ceb0:	0a02      	lsrs	r2, r0, #8
 801ceb2:	0c00      	lsrs	r0, r0, #16
 801ceb4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801ceb8:	704a      	strb	r2, [r1, #1]
 801ceba:	788a      	ldrb	r2, [r1, #2]
 801cebc:	4353      	muls	r3, r2
 801cebe:	1c5a      	adds	r2, r3, #1
 801cec0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cec4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cec8:	7088      	strb	r0, [r1, #2]
 801ceca:	b003      	add	sp, #12
 801cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ced0:	2600      	movs	r6, #0
 801ced2:	e706      	b.n	801cce2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801ced4:	2000      	movs	r0, #0
 801ced6:	4606      	mov	r6, r0
 801ced8:	e710      	b.n	801ccfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801ceda:	2000      	movs	r0, #0
 801cedc:	e70e      	b.n	801ccfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cede:	4620      	mov	r0, r4
 801cee0:	e70c      	b.n	801ccfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cee2:	2500      	movs	r5, #0
 801cee4:	e71e      	b.n	801cd24 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801cee6:	2200      	movs	r2, #0
 801cee8:	4615      	mov	r5, r2
 801ceea:	e729      	b.n	801cd40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ceec:	4662      	mov	r2, ip
 801ceee:	4665      	mov	r5, ip
 801cef0:	e726      	b.n	801cd40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cef2:	2200      	movs	r2, #0
 801cef4:	e724      	b.n	801cd40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cef6:	4622      	mov	r2, r4
 801cef8:	e722      	b.n	801cd40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801cefa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cefa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cefe:	b09b      	sub	sp, #108	@ 0x6c
 801cf00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf04:	9218      	str	r2, [sp, #96]	@ 0x60
 801cf06:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cf08:	9019      	str	r0, [sp, #100]	@ 0x64
 801cf0a:	9116      	str	r1, [sp, #88]	@ 0x58
 801cf0c:	6850      	ldr	r0, [r2, #4]
 801cf0e:	9307      	str	r3, [sp, #28]
 801cf10:	6812      	ldr	r2, [r2, #0]
 801cf12:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801cf14:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801cf18:	fb00 1303 	mla	r3, r0, r3, r1
 801cf1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf20:	18d3      	adds	r3, r2, r3
 801cf22:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf24:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cf26:	681b      	ldr	r3, [r3, #0]
 801cf28:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf2a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cf2c:	685e      	ldr	r6, [r3, #4]
 801cf2e:	3604      	adds	r6, #4
 801cf30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	dc03      	bgt.n	801cf3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801cf36:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	f340 834f 	ble.w	801d5dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801cf3e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cf40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cf44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cf48:	1e48      	subs	r0, r1, #1
 801cf4a:	1e57      	subs	r7, r2, #1
 801cf4c:	9b07      	ldr	r3, [sp, #28]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	f340 8178 	ble.w	801d244 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cf54:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801cf56:	142b      	asrs	r3, r5, #16
 801cf58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cf5c:	d406      	bmi.n	801cf6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf5e:	4584      	cmp	ip, r0
 801cf60:	da04      	bge.n	801cf6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	db02      	blt.n	801cf6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cf66:	42bb      	cmp	r3, r7
 801cf68:	f2c0 816d 	blt.w	801d246 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cf6c:	f11c 0c01 	adds.w	ip, ip, #1
 801cf70:	f100 815b 	bmi.w	801d22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cf74:	4561      	cmp	r1, ip
 801cf76:	f2c0 8158 	blt.w	801d22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cf7a:	3301      	adds	r3, #1
 801cf7c:	f100 8155 	bmi.w	801d22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cf80:	429a      	cmp	r2, r3
 801cf82:	f2c0 8152 	blt.w	801d22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cf86:	9b07      	ldr	r3, [sp, #28]
 801cf88:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cf8a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cf8c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	f340 8178 	ble.w	801d284 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cf94:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cf96:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801cf9a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cf9e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cfa2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cfa4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801cfa8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cfaa:	141b      	asrs	r3, r3, #16
 801cfac:	f100 81ba 	bmi.w	801d324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cfb0:	f101 38ff 	add.w	r8, r1, #4294967295
 801cfb4:	4543      	cmp	r3, r8
 801cfb6:	f280 81b5 	bge.w	801d324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cfba:	f1bc 0f00 	cmp.w	ip, #0
 801cfbe:	f2c0 81b1 	blt.w	801d324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cfc2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cfc6:	45c4      	cmp	ip, r8
 801cfc8:	f280 81ac 	bge.w	801d324 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cfcc:	b209      	sxth	r1, r1
 801cfce:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cfd0:	fb0c 3301 	mla	r3, ip, r1, r3
 801cfd4:	eb04 0803 	add.w	r8, r4, r3
 801cfd8:	5ce3      	ldrb	r3, [r4, r3]
 801cfda:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cfde:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cfe2:	2a00      	cmp	r2, #0
 801cfe4:	f000 8193 	beq.w	801d30e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801cfe8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cfec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801cff0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cff2:	0e24      	lsrs	r4, r4, #24
 801cff4:	9412      	str	r4, [sp, #72]	@ 0x48
 801cff6:	b178      	cbz	r0, 801d018 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cff8:	eb08 0c01 	add.w	ip, r8, r1
 801cffc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d000:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d004:	9108      	str	r1, [sp, #32]
 801d006:	0e09      	lsrs	r1, r1, #24
 801d008:	9110      	str	r1, [sp, #64]	@ 0x40
 801d00a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d00e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d012:	910c      	str	r1, [sp, #48]	@ 0x30
 801d014:	0e09      	lsrs	r1, r1, #24
 801d016:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d018:	b292      	uxth	r2, r2
 801d01a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d01c:	b280      	uxth	r0, r0
 801d01e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d020:	fb02 f900 	mul.w	r9, r2, r0
 801d024:	0112      	lsls	r2, r2, #4
 801d026:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d02a:	eba2 0809 	sub.w	r8, r2, r9
 801d02e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801d032:	b280      	uxth	r0, r0
 801d034:	fa1f f888 	uxth.w	r8, r8
 801d038:	1a12      	subs	r2, r2, r0
 801d03a:	fb08 f101 	mul.w	r1, r8, r1
 801d03e:	b292      	uxth	r2, r2
 801d040:	fb02 110e 	mla	r1, r2, lr, r1
 801d044:	fb00 1104 	mla	r1, r0, r4, r1
 801d048:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d04a:	fb09 1104 	mla	r1, r9, r4, r1
 801d04e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d052:	2900      	cmp	r1, #0
 801d054:	f000 80de 	beq.w	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d058:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d05c:	d01b      	beq.n	801d096 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801d05e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d062:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d066:	fb0e fa0a 	mul.w	sl, lr, sl
 801d06a:	fb0e fe03 	mul.w	lr, lr, r3
 801d06e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d072:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d076:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d07a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d07e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d082:	4453      	add	r3, sl
 801d084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d088:	0a1b      	lsrs	r3, r3, #8
 801d08a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d08e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d092:	ea43 030c 	orr.w	r3, r3, ip
 801d096:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d098:	2cff      	cmp	r4, #255	@ 0xff
 801d09a:	d021      	beq.n	801d0e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d09c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d09e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d0a2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0a4:	fb04 fb0b 	mul.w	fp, r4, fp
 801d0a8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d0aa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0ae:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d0b4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d0b8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0c0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d0c4:	44de      	add	lr, fp
 801d0c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d0ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0d6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d0da:	ea4e 040a 	orr.w	r4, lr, sl
 801d0de:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d0e0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d0e2:	2cff      	cmp	r4, #255	@ 0xff
 801d0e4:	d021      	beq.n	801d12a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d0e6:	9c08      	ldr	r4, [sp, #32]
 801d0e8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d0ec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d0ee:	fb04 fb0b 	mul.w	fp, r4, fp
 801d0f2:	9c08      	ldr	r4, [sp, #32]
 801d0f4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0f8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d0fa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d0fe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d102:	fb04 fa0a 	mul.w	sl, r4, sl
 801d106:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d10a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d10e:	44de      	add	lr, fp
 801d110:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d114:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d118:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d11c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d120:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d124:	ea4e 040a 	orr.w	r4, lr, sl
 801d128:	9408      	str	r4, [sp, #32]
 801d12a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d12c:	2cff      	cmp	r4, #255	@ 0xff
 801d12e:	d021      	beq.n	801d174 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d130:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d132:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d136:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d138:	fb04 fb0b 	mul.w	fp, r4, fp
 801d13c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d13e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d142:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d144:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d148:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d14c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d150:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d154:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d158:	44de      	add	lr, fp
 801d15a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d15e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d162:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d166:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d16a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d16e:	ea4e 040a 	orr.w	r4, lr, sl
 801d172:	940c      	str	r4, [sp, #48]	@ 0x30
 801d174:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d176:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801d17a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d17e:	43c9      	mvns	r1, r1
 801d180:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d184:	9c08      	ldr	r4, [sp, #32]
 801d186:	b2c9      	uxtb	r1, r1
 801d188:	fb08 fc0c 	mul.w	ip, r8, ip
 801d18c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d190:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d194:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d196:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d19a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d19e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d1a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d1a4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d1a8:	fb08 f80e 	mul.w	r8, r8, lr
 801d1ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1b0:	fb02 8303 	mla	r3, r2, r3, r8
 801d1b4:	9a08      	ldr	r2, [sp, #32]
 801d1b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d1ba:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d1be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d1c0:	fb00 330a 	mla	r3, r0, sl, r3
 801d1c4:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801d1c8:	fb09 3900 	mla	r9, r9, r0, r3
 801d1cc:	783b      	ldrb	r3, [r7, #0]
 801d1ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d1d2:	fb03 f201 	mul.w	r2, r3, r1
 801d1d6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d1da:	1c53      	adds	r3, r2, #1
 801d1dc:	ea4c 0c09 	orr.w	ip, ip, r9
 801d1e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d1e4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801d1e8:	703b      	strb	r3, [r7, #0]
 801d1ea:	787b      	ldrb	r3, [r7, #1]
 801d1ec:	434b      	muls	r3, r1
 801d1ee:	1c5a      	adds	r2, r3, #1
 801d1f0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d1f4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d1f8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d1fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d200:	707b      	strb	r3, [r7, #1]
 801d202:	78bb      	ldrb	r3, [r7, #2]
 801d204:	4359      	muls	r1, r3
 801d206:	1c4b      	adds	r3, r1, #1
 801d208:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801d20c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d210:	f887 c002 	strb.w	ip, [r7, #2]
 801d214:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d216:	3703      	adds	r7, #3
 801d218:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d21a:	441a      	add	r2, r3
 801d21c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d21e:	441d      	add	r5, r3
 801d220:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d222:	9225      	str	r2, [sp, #148]	@ 0x94
 801d224:	3b01      	subs	r3, #1
 801d226:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d228:	e6b0      	b.n	801cf8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d22a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d22c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d22e:	441c      	add	r4, r3
 801d230:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d232:	441d      	add	r5, r3
 801d234:	9b07      	ldr	r3, [sp, #28]
 801d236:	9425      	str	r4, [sp, #148]	@ 0x94
 801d238:	3b01      	subs	r3, #1
 801d23a:	9307      	str	r3, [sp, #28]
 801d23c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d23e:	3303      	adds	r3, #3
 801d240:	930a      	str	r3, [sp, #40]	@ 0x28
 801d242:	e683      	b.n	801cf4c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d244:	d026      	beq.n	801d294 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d246:	9b07      	ldr	r3, [sp, #28]
 801d248:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801d24a:	3b01      	subs	r3, #1
 801d24c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d24e:	fb00 4003 	mla	r0, r0, r3, r4
 801d252:	1400      	asrs	r0, r0, #16
 801d254:	f53f ae97 	bmi.w	801cf86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d258:	3901      	subs	r1, #1
 801d25a:	4288      	cmp	r0, r1
 801d25c:	f6bf ae93 	bge.w	801cf86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d260:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801d262:	fb01 5303 	mla	r3, r1, r3, r5
 801d266:	141b      	asrs	r3, r3, #16
 801d268:	f53f ae8d 	bmi.w	801cf86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d26c:	3a01      	subs	r2, #1
 801d26e:	4293      	cmp	r3, r2
 801d270:	f6bf ae89 	bge.w	801cf86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d276:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d27a:	f103 0e03 	add.w	lr, r3, #3
 801d27e:	f1bb 0f00 	cmp.w	fp, #0
 801d282:	dc6d      	bgt.n	801d360 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d284:	9b07      	ldr	r3, [sp, #28]
 801d286:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d28c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d290:	4423      	add	r3, r4
 801d292:	930a      	str	r3, [sp, #40]	@ 0x28
 801d294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d296:	2b00      	cmp	r3, #0
 801d298:	f340 81a0 	ble.w	801d5dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d29c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d2a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2a6:	eeb0 6a62 	vmov.f32	s12, s5
 801d2aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2b6:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801d2ba:	eeb0 6a43 	vmov.f32	s12, s6
 801d2be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2c2:	ee16 5a10 	vmov	r5, s12
 801d2c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d2ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d2ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d2d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d2d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d2da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2de:	ee12 2a90 	vmov	r2, s5
 801d2e2:	eef0 2a47 	vmov.f32	s5, s14
 801d2e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2ea:	ee13 2a10 	vmov	r2, s6
 801d2ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d2f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2f2:	eeb0 3a67 	vmov.f32	s6, s15
 801d2f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d2fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d2fe:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d300:	3b01      	subs	r3, #1
 801d302:	9316      	str	r3, [sp, #88]	@ 0x58
 801d304:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d306:	bf08      	it	eq
 801d308:	4613      	moveq	r3, r2
 801d30a:	9307      	str	r3, [sp, #28]
 801d30c:	e610      	b.n	801cf30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d30e:	2800      	cmp	r0, #0
 801d310:	f43f ae82 	beq.w	801d018 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d314:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d318:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d31c:	9108      	str	r1, [sp, #32]
 801d31e:	0e09      	lsrs	r1, r1, #24
 801d320:	9110      	str	r1, [sp, #64]	@ 0x40
 801d322:	e679      	b.n	801d018 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d324:	f113 0801 	adds.w	r8, r3, #1
 801d328:	f53f af74 	bmi.w	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d32c:	4541      	cmp	r1, r8
 801d32e:	f6ff af71 	blt.w	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d332:	f11c 0801 	adds.w	r8, ip, #1
 801d336:	f53f af6d 	bmi.w	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d33a:	45c6      	cmp	lr, r8
 801d33c:	f6ff af6a 	blt.w	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d340:	b209      	sxth	r1, r1
 801d342:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d346:	fa0f f38e 	sxth.w	r3, lr
 801d34a:	9100      	str	r1, [sp, #0]
 801d34c:	4639      	mov	r1, r7
 801d34e:	9301      	str	r3, [sp, #4]
 801d350:	4633      	mov	r3, r6
 801d352:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d358:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d35a:	f7ff fca3 	bl	801cca4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d35e:	e759      	b.n	801d214 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d360:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d362:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d366:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d368:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d36c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d36e:	1427      	asrs	r7, r4, #16
 801d370:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d372:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d376:	142b      	asrs	r3, r5, #16
 801d378:	fb01 7303 	mla	r3, r1, r3, r7
 801d37c:	18e7      	adds	r7, r4, r3
 801d37e:	5ce3      	ldrb	r3, [r4, r3]
 801d380:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d384:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d388:	2a00      	cmp	r2, #0
 801d38a:	f000 811d 	beq.w	801d5c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d38e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d392:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d396:	940d      	str	r4, [sp, #52]	@ 0x34
 801d398:	0e24      	lsrs	r4, r4, #24
 801d39a:	9414      	str	r4, [sp, #80]	@ 0x50
 801d39c:	b170      	cbz	r0, 801d3bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d39e:	eb07 0801 	add.w	r8, r7, r1
 801d3a2:	5c79      	ldrb	r1, [r7, r1]
 801d3a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d3a8:	9109      	str	r1, [sp, #36]	@ 0x24
 801d3aa:	0e09      	lsrs	r1, r1, #24
 801d3ac:	9111      	str	r1, [sp, #68]	@ 0x44
 801d3ae:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d3b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d3b6:	910e      	str	r1, [sp, #56]	@ 0x38
 801d3b8:	0e09      	lsrs	r1, r1, #24
 801d3ba:	9115      	str	r1, [sp, #84]	@ 0x54
 801d3bc:	b292      	uxth	r2, r2
 801d3be:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d3c0:	b280      	uxth	r0, r0
 801d3c2:	fb02 f900 	mul.w	r9, r2, r0
 801d3c6:	0112      	lsls	r2, r2, #4
 801d3c8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d3cc:	eba2 0809 	sub.w	r8, r2, r9
 801d3d0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801d3d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d3d6:	b280      	uxth	r0, r0
 801d3d8:	fa1f f888 	uxth.w	r8, r8
 801d3dc:	1a09      	subs	r1, r1, r0
 801d3de:	fb08 f202 	mul.w	r2, r8, r2
 801d3e2:	b289      	uxth	r1, r1
 801d3e4:	fb01 220c 	mla	r2, r1, ip, r2
 801d3e8:	fb00 2204 	mla	r2, r0, r4, r2
 801d3ec:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d3ee:	fb09 2204 	mla	r2, r9, r4, r2
 801d3f2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d3f6:	2a00      	cmp	r2, #0
 801d3f8:	f000 80db 	beq.w	801d5b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d3fc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d400:	d019      	beq.n	801d436 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d402:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d406:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d40a:	fb0c fa0a 	mul.w	sl, ip, sl
 801d40e:	fb0c fc03 	mul.w	ip, ip, r3
 801d412:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d416:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d41a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d41e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d422:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d426:	4453      	add	r3, sl
 801d428:	0a3f      	lsrs	r7, r7, #8
 801d42a:	0a1b      	lsrs	r3, r3, #8
 801d42c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d430:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d434:	433b      	orrs	r3, r7
 801d436:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d438:	2cff      	cmp	r4, #255	@ 0xff
 801d43a:	d020      	beq.n	801d47e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801d43c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d43e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d442:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d444:	4367      	muls	r7, r4
 801d446:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d448:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d44c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d450:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d452:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d456:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d45a:	fb04 fa0a 	mul.w	sl, r4, sl
 801d45e:	44bc      	add	ip, r7
 801d460:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d464:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d468:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d46c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d470:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d474:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d478:	ea4c 040a 	orr.w	r4, ip, sl
 801d47c:	940d      	str	r4, [sp, #52]	@ 0x34
 801d47e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d480:	2cff      	cmp	r4, #255	@ 0xff
 801d482:	d020      	beq.n	801d4c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801d484:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d486:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d48a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d48c:	4367      	muls	r7, r4
 801d48e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d490:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d494:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d498:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d49a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d49e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4a2:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4a6:	44bc      	add	ip, r7
 801d4a8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d4ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4b4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d4bc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d4c0:	ea4c 040a 	orr.w	r4, ip, sl
 801d4c4:	9409      	str	r4, [sp, #36]	@ 0x24
 801d4c6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d4c8:	2cff      	cmp	r4, #255	@ 0xff
 801d4ca:	d020      	beq.n	801d50e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801d4cc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d4ce:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d4d2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d4d4:	4367      	muls	r7, r4
 801d4d6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d4d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d4dc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d4e0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d4e2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d4e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4ee:	44bc      	add	ip, r7
 801d4f0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d4f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d500:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d504:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d508:	ea4c 040a 	orr.w	r4, ip, sl
 801d50c:	940e      	str	r4, [sp, #56]	@ 0x38
 801d50e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d510:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d514:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d518:	43d2      	mvns	r2, r2
 801d51a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d51e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d520:	b2d2      	uxtb	r2, r2
 801d522:	fb08 f707 	mul.w	r7, r8, r7
 801d526:	fb01 770c 	mla	r7, r1, ip, r7
 801d52a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d52e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d530:	fb00 770c 	mla	r7, r0, ip, r7
 801d534:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d538:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d53a:	fb09 770c 	mla	r7, r9, ip, r7
 801d53e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d542:	fb08 f80c 	mul.w	r8, r8, ip
 801d546:	0a3f      	lsrs	r7, r7, #8
 801d548:	fb01 8303 	mla	r3, r1, r3, r8
 801d54c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d54e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d552:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801d556:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d558:	fb00 330a 	mla	r3, r0, sl, r3
 801d55c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801d560:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d564:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d56c:	fb03 f102 	mul.w	r1, r3, r2
 801d570:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d574:	1c4b      	adds	r3, r1, #1
 801d576:	ea47 070c 	orr.w	r7, r7, ip
 801d57a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d57e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801d582:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d586:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801d58a:	4353      	muls	r3, r2
 801d58c:	1c59      	adds	r1, r3, #1
 801d58e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d592:	0a3b      	lsrs	r3, r7, #8
 801d594:	0c3f      	lsrs	r7, r7, #16
 801d596:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d59a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d59e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d5a2:	435a      	muls	r2, r3
 801d5a4:	1c53      	adds	r3, r2, #1
 801d5a6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d5aa:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d5ae:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d5b2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d5b4:	f10e 0e03 	add.w	lr, lr, #3
 801d5b8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d5ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d5be:	441a      	add	r2, r3
 801d5c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d5c2:	9225      	str	r2, [sp, #148]	@ 0x94
 801d5c4:	441d      	add	r5, r3
 801d5c6:	e65a      	b.n	801d27e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d5c8:	2800      	cmp	r0, #0
 801d5ca:	f43f aef7 	beq.w	801d3bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d5ce:	5c79      	ldrb	r1, [r7, r1]
 801d5d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d5d4:	9109      	str	r1, [sp, #36]	@ 0x24
 801d5d6:	0e09      	lsrs	r1, r1, #24
 801d5d8:	9111      	str	r1, [sp, #68]	@ 0x44
 801d5da:	e6ef      	b.n	801d3bc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d5dc:	b01b      	add	sp, #108	@ 0x6c
 801d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d5e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d5e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5e6:	b08d      	sub	sp, #52	@ 0x34
 801d5e8:	468b      	mov	fp, r1
 801d5ea:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801d5ee:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801d5f2:	fb0c 5703 	mla	r7, ip, r3, r5
 801d5f6:	f1bc 0f00 	cmp.w	ip, #0
 801d5fa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d5fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d600:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801d604:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801d608:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801d60c:	eb02 0607 	add.w	r6, r2, r7
 801d610:	f89b 4000 	ldrb.w	r4, [fp]
 801d614:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d618:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801d61c:	f2c0 80c1 	blt.w	801d7a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d620:	45e6      	cmp	lr, ip
 801d622:	f340 80be 	ble.w	801d7a2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d626:	2d00      	cmp	r5, #0
 801d628:	f2c0 80b7 	blt.w	801d79a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d62c:	42ab      	cmp	r3, r5
 801d62e:	f340 80b4 	ble.w	801d79a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d632:	5dd2      	ldrb	r2, [r2, r7]
 801d634:	9205      	str	r2, [sp, #20]
 801d636:	7872      	ldrb	r2, [r6, #1]
 801d638:	9206      	str	r2, [sp, #24]
 801d63a:	78b2      	ldrb	r2, [r6, #2]
 801d63c:	9207      	str	r2, [sp, #28]
 801d63e:	1c6a      	adds	r2, r5, #1
 801d640:	f100 80b6 	bmi.w	801d7b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d644:	4293      	cmp	r3, r2
 801d646:	f340 80b3 	ble.w	801d7b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d64a:	f1b8 0f00 	cmp.w	r8, #0
 801d64e:	f000 80af 	beq.w	801d7b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d652:	78f2      	ldrb	r2, [r6, #3]
 801d654:	9201      	str	r2, [sp, #4]
 801d656:	7932      	ldrb	r2, [r6, #4]
 801d658:	9202      	str	r2, [sp, #8]
 801d65a:	7972      	ldrb	r2, [r6, #5]
 801d65c:	9203      	str	r2, [sp, #12]
 801d65e:	f11c 0c01 	adds.w	ip, ip, #1
 801d662:	f100 80ad 	bmi.w	801d7c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d666:	45e6      	cmp	lr, ip
 801d668:	f340 80aa 	ble.w	801d7c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d66c:	f1ba 0f00 	cmp.w	sl, #0
 801d670:	f000 80a6 	beq.w	801d7c0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d674:	2d00      	cmp	r5, #0
 801d676:	f2c0 809f 	blt.w	801d7b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d67a:	42ab      	cmp	r3, r5
 801d67c:	f340 809c 	ble.w	801d7b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d680:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d684:	f816 9002 	ldrb.w	r9, [r6, r2]
 801d688:	2203      	movs	r2, #3
 801d68a:	fb03 6c02 	mla	ip, r3, r2, r6
 801d68e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d692:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d696:	9704      	str	r7, [sp, #16]
 801d698:	3501      	adds	r5, #1
 801d69a:	f100 8098 	bmi.w	801d7ce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d69e:	42ab      	cmp	r3, r5
 801d6a0:	f340 8095 	ble.w	801d7ce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d6a4:	f1b8 0f00 	cmp.w	r8, #0
 801d6a8:	f000 8091 	beq.w	801d7ce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d6ac:	f04f 0c03 	mov.w	ip, #3
 801d6b0:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801d6b4:	5cb5      	ldrb	r5, [r6, r2]
 801d6b6:	fb03 620c 	mla	r2, r3, ip, r6
 801d6ba:	fb03 630c 	mla	r3, r3, ip, r6
 801d6be:	7912      	ldrb	r2, [r2, #4]
 801d6c0:	795e      	ldrb	r6, [r3, #5]
 801d6c2:	fa1f f388 	uxth.w	r3, r8
 801d6c6:	fa1f fc8a 	uxth.w	ip, sl
 801d6ca:	fb03 f70c 	mul.w	r7, r3, ip
 801d6ce:	011b      	lsls	r3, r3, #4
 801d6d0:	9708      	str	r7, [sp, #32]
 801d6d2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d6d6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801d6da:	1bdb      	subs	r3, r3, r7
 801d6dc:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801d6e0:	fa1f fc8c 	uxth.w	ip, ip
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	9709      	str	r7, [sp, #36]	@ 0x24
 801d6e8:	ebaa 0a0c 	sub.w	sl, sl, ip
 801d6ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d6ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6f0:	fa1f fa8a 	uxth.w	sl, sl
 801d6f4:	ea6f 0807 	mvn.w	r8, r7
 801d6f8:	9f01      	ldr	r7, [sp, #4]
 801d6fa:	435f      	muls	r7, r3
 801d6fc:	9b05      	ldr	r3, [sp, #20]
 801d6fe:	fa5f f888 	uxtb.w	r8, r8
 801d702:	fb0a 7703 	mla	r7, sl, r3, r7
 801d706:	9b08      	ldr	r3, [sp, #32]
 801d708:	fb14 f408 	smulbb	r4, r4, r8
 801d70c:	fb0c 7709 	mla	r7, ip, r9, r7
 801d710:	fb10 f008 	smulbb	r0, r0, r8
 801d714:	fb11 f108 	smulbb	r1, r1, r8
 801d718:	fb03 7705 	mla	r7, r3, r5, r7
 801d71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d71e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d722:	fb07 4703 	mla	r7, r7, r3, r4
 801d726:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d728:	b2bf      	uxth	r7, r7
 801d72a:	1c7c      	adds	r4, r7, #1
 801d72c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801d730:	1224      	asrs	r4, r4, #8
 801d732:	f88b 4000 	strb.w	r4, [fp]
 801d736:	9c02      	ldr	r4, [sp, #8]
 801d738:	435c      	muls	r4, r3
 801d73a:	9b06      	ldr	r3, [sp, #24]
 801d73c:	fb0a 4403 	mla	r4, sl, r3, r4
 801d740:	9b04      	ldr	r3, [sp, #16]
 801d742:	fb0c 4403 	mla	r4, ip, r3, r4
 801d746:	9b08      	ldr	r3, [sp, #32]
 801d748:	fb03 4402 	mla	r4, r3, r2, r4
 801d74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d74e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d750:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d754:	fb04 0403 	mla	r4, r4, r3, r0
 801d758:	9b03      	ldr	r3, [sp, #12]
 801d75a:	435a      	muls	r2, r3
 801d75c:	b2a4      	uxth	r4, r4
 801d75e:	4613      	mov	r3, r2
 801d760:	9a07      	ldr	r2, [sp, #28]
 801d762:	1c60      	adds	r0, r4, #1
 801d764:	fb0a 3a02 	mla	sl, sl, r2, r3
 801d768:	9b08      	ldr	r3, [sp, #32]
 801d76a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801d76e:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d772:	1224      	asrs	r4, r4, #8
 801d774:	fb03 c606 	mla	r6, r3, r6, ip
 801d778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d77a:	f88b 4001 	strb.w	r4, [fp, #1]
 801d77e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d782:	fb06 1103 	mla	r1, r6, r3, r1
 801d786:	b289      	uxth	r1, r1
 801d788:	1c4e      	adds	r6, r1, #1
 801d78a:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d78e:	1209      	asrs	r1, r1, #8
 801d790:	f88b 1002 	strb.w	r1, [fp, #2]
 801d794:	b00d      	add	sp, #52	@ 0x34
 801d796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d79a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d79e:	9405      	str	r4, [sp, #20]
 801d7a0:	e74d      	b.n	801d63e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801d7a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d7a6:	9401      	str	r4, [sp, #4]
 801d7a8:	9405      	str	r4, [sp, #20]
 801d7aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d7ae:	e756      	b.n	801d65e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d7b4:	9401      	str	r4, [sp, #4]
 801d7b6:	e752      	b.n	801d65e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d7b8:	468e      	mov	lr, r1
 801d7ba:	9004      	str	r0, [sp, #16]
 801d7bc:	46a1      	mov	r9, r4
 801d7be:	e76b      	b.n	801d698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801d7c0:	460e      	mov	r6, r1
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	4625      	mov	r5, r4
 801d7c6:	468e      	mov	lr, r1
 801d7c8:	9004      	str	r0, [sp, #16]
 801d7ca:	46a1      	mov	r9, r4
 801d7cc:	e779      	b.n	801d6c2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801d7ce:	460e      	mov	r6, r1
 801d7d0:	4602      	mov	r2, r0
 801d7d2:	4625      	mov	r5, r4
 801d7d4:	e775      	b.n	801d6c2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801d7d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7da:	b09f      	sub	sp, #124	@ 0x7c
 801d7dc:	920e      	str	r2, [sp, #56]	@ 0x38
 801d7de:	9307      	str	r3, [sp, #28]
 801d7e0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801d7e2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d7e6:	901d      	str	r0, [sp, #116]	@ 0x74
 801d7e8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d7ea:	6850      	ldr	r0, [r2, #4]
 801d7ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d7ee:	6812      	ldr	r2, [r2, #0]
 801d7f0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801d7f4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801d7f8:	fb00 1303 	mla	r3, r0, r3, r1
 801d7fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d800:	18d3      	adds	r3, r2, r3
 801d802:	9308      	str	r3, [sp, #32]
 801d804:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	930a      	str	r3, [sp, #40]	@ 0x28
 801d80a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d80c:	43db      	mvns	r3, r3
 801d80e:	b2db      	uxtb	r3, r3
 801d810:	9309      	str	r3, [sp, #36]	@ 0x24
 801d812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d814:	2b00      	cmp	r3, #0
 801d816:	dc03      	bgt.n	801d820 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d818:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	f340 81f5 	ble.w	801dc0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d820:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d822:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d826:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d82a:	1e48      	subs	r0, r1, #1
 801d82c:	1e54      	subs	r4, r2, #1
 801d82e:	9b07      	ldr	r3, [sp, #28]
 801d830:	2b00      	cmp	r3, #0
 801d832:	f340 80d5 	ble.w	801d9e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d836:	ea5f 452a 	movs.w	r5, sl, asr #16
 801d83a:	ea4f 4328 	mov.w	r3, r8, asr #16
 801d83e:	d406      	bmi.n	801d84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d840:	4285      	cmp	r5, r0
 801d842:	da04      	bge.n	801d84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d844:	2b00      	cmp	r3, #0
 801d846:	db02      	blt.n	801d84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d848:	42a3      	cmp	r3, r4
 801d84a:	f2c0 80ca 	blt.w	801d9e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d84e:	3501      	adds	r5, #1
 801d850:	f100 80bb 	bmi.w	801d9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d854:	42a9      	cmp	r1, r5
 801d856:	f2c0 80b8 	blt.w	801d9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d85a:	3301      	adds	r3, #1
 801d85c:	f100 80b5 	bmi.w	801d9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d860:	429a      	cmp	r2, r3
 801d862:	f2c0 80b2 	blt.w	801d9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d866:	9b07      	ldr	r3, [sp, #28]
 801d868:	9d08      	ldr	r5, [sp, #32]
 801d86a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d86c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d86e:	2b00      	cmp	r3, #0
 801d870:	f340 80d6 	ble.w	801da20 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801d874:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801d876:	ea4f 4428 	mov.w	r4, r8, asr #16
 801d87a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d87c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801d880:	68c6      	ldr	r6, [r0, #12]
 801d882:	ea5f 402a 	movs.w	r0, sl, asr #16
 801d886:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801d88a:	689b      	ldr	r3, [r3, #8]
 801d88c:	f100 810f 	bmi.w	801daae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d890:	1e5f      	subs	r7, r3, #1
 801d892:	42b8      	cmp	r0, r7
 801d894:	f280 810b 	bge.w	801daae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d898:	2c00      	cmp	r4, #0
 801d89a:	f2c0 8108 	blt.w	801daae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d89e:	1e77      	subs	r7, r6, #1
 801d8a0:	42bc      	cmp	r4, r7
 801d8a2:	f280 8104 	bge.w	801daae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d8a6:	b21b      	sxth	r3, r3
 801d8a8:	fb04 0003 	mla	r0, r4, r3, r0
 801d8ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d8ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d8b2:	1826      	adds	r6, r4, r0
 801d8b4:	5c24      	ldrb	r4, [r4, r0]
 801d8b6:	78b7      	ldrb	r7, [r6, #2]
 801d8b8:	7870      	ldrb	r0, [r6, #1]
 801d8ba:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d8bc:	7977      	ldrb	r7, [r6, #5]
 801d8be:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d8c2:	f896 c004 	ldrb.w	ip, [r6, #4]
 801d8c6:	9710      	str	r7, [sp, #64]	@ 0x40
 801d8c8:	b1c9      	cbz	r1, 801d8fe <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d8ca:	f04f 0b03 	mov.w	fp, #3
 801d8ce:	f06f 0904 	mvn.w	r9, #4
 801d8d2:	3605      	adds	r6, #5
 801d8d4:	fb13 930b 	smlabb	r3, r3, fp, r9
 801d8d8:	eb06 0b03 	add.w	fp, r6, r3
 801d8dc:	5cf3      	ldrb	r3, [r6, r3]
 801d8de:	9311      	str	r3, [sp, #68]	@ 0x44
 801d8e0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801d8e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d8e6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d8ea:	9315      	str	r3, [sp, #84]	@ 0x54
 801d8ec:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801d8f0:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8f2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801d8f6:	9314      	str	r3, [sp, #80]	@ 0x50
 801d8f8:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801d8fc:	9316      	str	r3, [sp, #88]	@ 0x58
 801d8fe:	b292      	uxth	r2, r2
 801d900:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d902:	b289      	uxth	r1, r1
 801d904:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801d908:	fb02 f601 	mul.w	r6, r2, r1
 801d90c:	0112      	lsls	r2, r2, #4
 801d90e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801d912:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801d916:	1b92      	subs	r2, r2, r6
 801d918:	b289      	uxth	r1, r1
 801d91a:	b292      	uxth	r2, r2
 801d91c:	eba9 0901 	sub.w	r9, r9, r1
 801d920:	fb02 fe0e 	mul.w	lr, r2, lr
 801d924:	fa1f f989 	uxth.w	r9, r9
 801d928:	fb02 fc0c 	mul.w	ip, r2, ip
 801d92c:	fb09 e404 	mla	r4, r9, r4, lr
 801d930:	f895 e000 	ldrb.w	lr, [r5]
 801d934:	fb09 c000 	mla	r0, r9, r0, ip
 801d938:	fb01 4407 	mla	r4, r1, r7, r4
 801d93c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801d93e:	fb06 4407 	mla	r4, r6, r7, r4
 801d942:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d944:	fb1e fe07 	smulbb	lr, lr, r7
 801d948:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d94c:	fb04 e403 	mla	r4, r4, r3, lr
 801d950:	b2a4      	uxth	r4, r4
 801d952:	f104 0e01 	add.w	lr, r4, #1
 801d956:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801d95a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d95c:	fb01 0004 	mla	r0, r1, r4, r0
 801d960:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d962:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d966:	fb06 0004 	mla	r0, r6, r4, r0
 801d96a:	786c      	ldrb	r4, [r5, #1]
 801d96c:	f885 e000 	strb.w	lr, [r5]
 801d970:	fb14 f407 	smulbb	r4, r4, r7
 801d974:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d978:	fb00 4003 	mla	r0, r0, r3, r4
 801d97c:	b280      	uxth	r0, r0
 801d97e:	1c44      	adds	r4, r0, #1
 801d980:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801d984:	1200      	asrs	r0, r0, #8
 801d986:	7068      	strb	r0, [r5, #1]
 801d988:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d98a:	4342      	muls	r2, r0
 801d98c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d98e:	fb09 2200 	mla	r2, r9, r0, r2
 801d992:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d994:	fb01 2100 	mla	r1, r1, r0, r2
 801d998:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d99a:	fb06 1602 	mla	r6, r6, r2, r1
 801d99e:	78a9      	ldrb	r1, [r5, #2]
 801d9a0:	fb11 f107 	smulbb	r1, r1, r7
 801d9a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d9a8:	fb06 1303 	mla	r3, r6, r3, r1
 801d9ac:	b29b      	uxth	r3, r3
 801d9ae:	1c5e      	adds	r6, r3, #1
 801d9b0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d9b4:	121b      	asrs	r3, r3, #8
 801d9b6:	70ab      	strb	r3, [r5, #2]
 801d9b8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d9ba:	3503      	adds	r5, #3
 801d9bc:	449a      	add	sl, r3
 801d9be:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d9c0:	4498      	add	r8, r3
 801d9c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9c4:	3b01      	subs	r3, #1
 801d9c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801d9c8:	e750      	b.n	801d86c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d9ca:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d9cc:	449a      	add	sl, r3
 801d9ce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d9d0:	4498      	add	r8, r3
 801d9d2:	9b07      	ldr	r3, [sp, #28]
 801d9d4:	3b01      	subs	r3, #1
 801d9d6:	9307      	str	r3, [sp, #28]
 801d9d8:	9b08      	ldr	r3, [sp, #32]
 801d9da:	3303      	adds	r3, #3
 801d9dc:	9308      	str	r3, [sp, #32]
 801d9de:	e726      	b.n	801d82e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d9e0:	d026      	beq.n	801da30 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801d9e2:	9b07      	ldr	r3, [sp, #28]
 801d9e4:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d9e6:	3b01      	subs	r3, #1
 801d9e8:	fb00 a003 	mla	r0, r0, r3, sl
 801d9ec:	1400      	asrs	r0, r0, #16
 801d9ee:	f53f af3a 	bmi.w	801d866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d9f2:	3901      	subs	r1, #1
 801d9f4:	4288      	cmp	r0, r1
 801d9f6:	f6bf af36 	bge.w	801d866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d9fa:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d9fc:	fb01 8303 	mla	r3, r1, r3, r8
 801da00:	141b      	asrs	r3, r3, #16
 801da02:	f53f af30 	bmi.w	801d866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da06:	3a01      	subs	r2, #1
 801da08:	4293      	cmp	r3, r2
 801da0a:	f6bf af2c 	bge.w	801d866 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801da0e:	9b08      	ldr	r3, [sp, #32]
 801da10:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801da14:	1cdd      	adds	r5, r3, #3
 801da16:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801da1a:	f1bc 0f00 	cmp.w	ip, #0
 801da1e:	dc5f      	bgt.n	801dae0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801da20:	9b07      	ldr	r3, [sp, #28]
 801da22:	9a08      	ldr	r2, [sp, #32]
 801da24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da2c:	441a      	add	r2, r3
 801da2e:	9208      	str	r2, [sp, #32]
 801da30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801da32:	2b00      	cmp	r3, #0
 801da34:	f340 80e9 	ble.w	801dc0a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801da38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801da3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801da3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da46:	eef0 6a62 	vmov.f32	s13, s5
 801da4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da56:	ee16 aa90 	vmov	sl, s13
 801da5a:	eef0 6a43 	vmov.f32	s13, s6
 801da5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da62:	ee16 8a90 	vmov	r8, s13
 801da66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801da6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801da6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801da72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801da76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801da7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801da7e:	ee12 2a90 	vmov	r2, s5
 801da82:	eef0 2a47 	vmov.f32	s5, s14
 801da86:	fb92 f3f3 	sdiv	r3, r2, r3
 801da8a:	ee13 2a10 	vmov	r2, s6
 801da8e:	932b      	str	r3, [sp, #172]	@ 0xac
 801da90:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801da92:	eeb0 3a67 	vmov.f32	s6, s15
 801da96:	fb92 f3f3 	sdiv	r3, r2, r3
 801da9a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801da9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801da9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801daa0:	3b01      	subs	r3, #1
 801daa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801daa4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801daa6:	bf08      	it	eq
 801daa8:	4613      	moveq	r3, r2
 801daaa:	9307      	str	r3, [sp, #28]
 801daac:	e6b1      	b.n	801d812 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801daae:	1c47      	adds	r7, r0, #1
 801dab0:	d482      	bmi.n	801d9b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dab2:	42bb      	cmp	r3, r7
 801dab4:	db80      	blt.n	801d9b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dab6:	1c67      	adds	r7, r4, #1
 801dab8:	f53f af7e 	bmi.w	801d9b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dabc:	42be      	cmp	r6, r7
 801dabe:	f6ff af7b 	blt.w	801d9b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dac2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801dac4:	b236      	sxth	r6, r6
 801dac6:	9001      	str	r0, [sp, #4]
 801dac8:	b21b      	sxth	r3, r3
 801daca:	9600      	str	r6, [sp, #0]
 801dacc:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801dace:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801dad2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801dad6:	4629      	mov	r1, r5
 801dad8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dada:	f7ff fd82 	bl	801d5e2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801dade:	e76b      	b.n	801d9b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801dae0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801dae2:	ea4f 402a 	mov.w	r0, sl, asr #16
 801dae6:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801daea:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801daee:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801daf2:	ea4f 4128 	mov.w	r1, r8, asr #16
 801daf6:	fb07 0101 	mla	r1, r7, r1, r0
 801dafa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801dafc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db00:	1844      	adds	r4, r0, r1
 801db02:	5c40      	ldrb	r0, [r0, r1]
 801db04:	78a6      	ldrb	r6, [r4, #2]
 801db06:	7861      	ldrb	r1, [r4, #1]
 801db08:	960f      	str	r6, [sp, #60]	@ 0x3c
 801db0a:	78e6      	ldrb	r6, [r4, #3]
 801db0c:	910d      	str	r1, [sp, #52]	@ 0x34
 801db0e:	9610      	str	r6, [sp, #64]	@ 0x40
 801db10:	f894 9004 	ldrb.w	r9, [r4, #4]
 801db14:	f894 b005 	ldrb.w	fp, [r4, #5]
 801db18:	b192      	cbz	r2, 801db40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801db1a:	f06f 0604 	mvn.w	r6, #4
 801db1e:	2103      	movs	r1, #3
 801db20:	3405      	adds	r4, #5
 801db22:	fb17 6701 	smlabb	r7, r7, r1, r6
 801db26:	19e6      	adds	r6, r4, r7
 801db28:	5de4      	ldrb	r4, [r4, r7]
 801db2a:	9417      	str	r4, [sp, #92]	@ 0x5c
 801db2c:	7874      	ldrb	r4, [r6, #1]
 801db2e:	9419      	str	r4, [sp, #100]	@ 0x64
 801db30:	78b4      	ldrb	r4, [r6, #2]
 801db32:	941b      	str	r4, [sp, #108]	@ 0x6c
 801db34:	78f4      	ldrb	r4, [r6, #3]
 801db36:	9418      	str	r4, [sp, #96]	@ 0x60
 801db38:	7934      	ldrb	r4, [r6, #4]
 801db3a:	941a      	str	r4, [sp, #104]	@ 0x68
 801db3c:	7974      	ldrb	r4, [r6, #5]
 801db3e:	941c      	str	r4, [sp, #112]	@ 0x70
 801db40:	b29b      	uxth	r3, r3
 801db42:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801db44:	b292      	uxth	r2, r2
 801db46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801db48:	3503      	adds	r5, #3
 801db4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801db4e:	fb03 f402 	mul.w	r4, r3, r2
 801db52:	011b      	lsls	r3, r3, #4
 801db54:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801db58:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801db5c:	1b1b      	subs	r3, r3, r4
 801db5e:	b292      	uxth	r2, r2
 801db60:	b29b      	uxth	r3, r3
 801db62:	1ab6      	subs	r6, r6, r2
 801db64:	435f      	muls	r7, r3
 801db66:	b2b6      	uxth	r6, r6
 801db68:	fb03 f909 	mul.w	r9, r3, r9
 801db6c:	fb03 fb0b 	mul.w	fp, r3, fp
 801db70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db72:	fb06 7000 	mla	r0, r6, r0, r7
 801db76:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801db78:	fb06 bb03 	mla	fp, r6, r3, fp
 801db7c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db7e:	fb02 0007 	mla	r0, r2, r7, r0
 801db82:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801db84:	fb02 bb03 	mla	fp, r2, r3, fp
 801db88:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801db8a:	fb04 0007 	mla	r0, r4, r7, r0
 801db8e:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801db92:	fb17 f701 	smulbb	r7, r7, r1
 801db96:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801db9a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801db9c:	fb00 700e 	mla	r0, r0, lr, r7
 801dba0:	fb06 9101 	mla	r1, r6, r1, r9
 801dba4:	b280      	uxth	r0, r0
 801dba6:	1c47      	adds	r7, r0, #1
 801dba8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801dbac:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801dbae:	1200      	asrs	r0, r0, #8
 801dbb0:	f805 0c06 	strb.w	r0, [r5, #-6]
 801dbb4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801dbb6:	fb02 1100 	mla	r1, r2, r0, r1
 801dbba:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801dbbc:	fb04 1100 	mla	r1, r4, r0, r1
 801dbc0:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801dbc4:	fb04 b403 	mla	r4, r4, r3, fp
 801dbc8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801dbcc:	fb10 f007 	smulbb	r0, r0, r7
 801dbd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dbd4:	fb13 f307 	smulbb	r3, r3, r7
 801dbd8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801dbdc:	fb01 010e 	mla	r1, r1, lr, r0
 801dbe0:	fb04 340e 	mla	r4, r4, lr, r3
 801dbe4:	b289      	uxth	r1, r1
 801dbe6:	b2a4      	uxth	r4, r4
 801dbe8:	1c48      	adds	r0, r1, #1
 801dbea:	1c63      	adds	r3, r4, #1
 801dbec:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801dbf0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801dbf4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801dbf6:	1209      	asrs	r1, r1, #8
 801dbf8:	1224      	asrs	r4, r4, #8
 801dbfa:	449a      	add	sl, r3
 801dbfc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dbfe:	f805 1c05 	strb.w	r1, [r5, #-5]
 801dc02:	f805 4c04 	strb.w	r4, [r5, #-4]
 801dc06:	4498      	add	r8, r3
 801dc08:	e707      	b.n	801da1a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801dc0a:	b01f      	add	sp, #124	@ 0x7c
 801dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc10 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc14:	b087      	sub	sp, #28
 801dc16:	780d      	ldrb	r5, [r1, #0]
 801dc18:	784c      	ldrb	r4, [r1, #1]
 801dc1a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801dc1e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801dc22:	9004      	str	r0, [sp, #16]
 801dc24:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801dc28:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801dc2c:	9005      	str	r0, [sp, #20]
 801dc2e:	fb06 bc03 	mla	ip, r6, r3, fp
 801dc32:	2e00      	cmp	r6, #0
 801dc34:	7888      	ldrb	r0, [r1, #2]
 801dc36:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801dc3a:	eb02 090c 	add.w	r9, r2, ip
 801dc3e:	f2c0 8084 	blt.w	801dd4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dc42:	42b7      	cmp	r7, r6
 801dc44:	f340 8081 	ble.w	801dd4a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801dc48:	f1bb 0f00 	cmp.w	fp, #0
 801dc4c:	db79      	blt.n	801dd42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dc4e:	455b      	cmp	r3, fp
 801dc50:	dd77      	ble.n	801dd42 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801dc52:	f812 200c 	ldrb.w	r2, [r2, ip]
 801dc56:	9201      	str	r2, [sp, #4]
 801dc58:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dc5c:	9202      	str	r2, [sp, #8]
 801dc5e:	f899 2002 	ldrb.w	r2, [r9, #2]
 801dc62:	9203      	str	r2, [sp, #12]
 801dc64:	f11b 0201 	adds.w	r2, fp, #1
 801dc68:	d476      	bmi.n	801dd58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dc6a:	4293      	cmp	r3, r2
 801dc6c:	dd74      	ble.n	801dd58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dc6e:	9a04      	ldr	r2, [sp, #16]
 801dc70:	2a00      	cmp	r2, #0
 801dc72:	d071      	beq.n	801dd58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801dc74:	f899 8003 	ldrb.w	r8, [r9, #3]
 801dc78:	f899 c004 	ldrb.w	ip, [r9, #4]
 801dc7c:	f899 a005 	ldrb.w	sl, [r9, #5]
 801dc80:	3601      	adds	r6, #1
 801dc82:	d471      	bmi.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dc84:	42b7      	cmp	r7, r6
 801dc86:	dd6f      	ble.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dc88:	9a05      	ldr	r2, [sp, #20]
 801dc8a:	2a00      	cmp	r2, #0
 801dc8c:	d06c      	beq.n	801dd68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801dc8e:	f1bb 0f00 	cmp.w	fp, #0
 801dc92:	db65      	blt.n	801dd60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801dc94:	455b      	cmp	r3, fp
 801dc96:	dd63      	ble.n	801dd60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801dc98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801dc9c:	f819 e002 	ldrb.w	lr, [r9, r2]
 801dca0:	2203      	movs	r2, #3
 801dca2:	fb03 9602 	mla	r6, r3, r2, r9
 801dca6:	7877      	ldrb	r7, [r6, #1]
 801dca8:	78b6      	ldrb	r6, [r6, #2]
 801dcaa:	f11b 0b01 	adds.w	fp, fp, #1
 801dcae:	d40c      	bmi.n	801dcca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dcb0:	455b      	cmp	r3, fp
 801dcb2:	dd0a      	ble.n	801dcca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dcb4:	9a04      	ldr	r2, [sp, #16]
 801dcb6:	b142      	cbz	r2, 801dcca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801dcb8:	2203      	movs	r2, #3
 801dcba:	fb13 2002 	smlabb	r0, r3, r2, r2
 801dcbe:	f819 5000 	ldrb.w	r5, [r9, r0]
 801dcc2:	fb03 9002 	mla	r0, r3, r2, r9
 801dcc6:	7904      	ldrb	r4, [r0, #4]
 801dcc8:	7940      	ldrb	r0, [r0, #5]
 801dcca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801dcce:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801dcd2:	fb03 fb02 	mul.w	fp, r3, r2
 801dcd6:	011b      	lsls	r3, r3, #4
 801dcd8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801dcdc:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801dce0:	eba3 030b 	sub.w	r3, r3, fp
 801dce4:	b292      	uxth	r2, r2
 801dce6:	b29b      	uxth	r3, r3
 801dce8:	eba9 0902 	sub.w	r9, r9, r2
 801dcec:	9304      	str	r3, [sp, #16]
 801dcee:	fa1f f989 	uxth.w	r9, r9
 801dcf2:	fb03 f808 	mul.w	r8, r3, r8
 801dcf6:	9b01      	ldr	r3, [sp, #4]
 801dcf8:	fb09 8803 	mla	r8, r9, r3, r8
 801dcfc:	9b04      	ldr	r3, [sp, #16]
 801dcfe:	fb03 fc0c 	mul.w	ip, r3, ip
 801dd02:	9b02      	ldr	r3, [sp, #8]
 801dd04:	fb02 880e 	mla	r8, r2, lr, r8
 801dd08:	fb09 cc03 	mla	ip, r9, r3, ip
 801dd0c:	9b04      	ldr	r3, [sp, #16]
 801dd0e:	fb0b 8805 	mla	r8, fp, r5, r8
 801dd12:	fb02 c707 	mla	r7, r2, r7, ip
 801dd16:	fb03 f30a 	mul.w	r3, r3, sl
 801dd1a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dd1e:	fb0b 7404 	mla	r4, fp, r4, r7
 801dd22:	f881 8000 	strb.w	r8, [r1]
 801dd26:	1224      	asrs	r4, r4, #8
 801dd28:	704c      	strb	r4, [r1, #1]
 801dd2a:	9c03      	ldr	r4, [sp, #12]
 801dd2c:	fb09 3904 	mla	r9, r9, r4, r3
 801dd30:	fb02 9206 	mla	r2, r2, r6, r9
 801dd34:	fb0b 2000 	mla	r0, fp, r0, r2
 801dd38:	1200      	asrs	r0, r0, #8
 801dd3a:	7088      	strb	r0, [r1, #2]
 801dd3c:	b007      	add	sp, #28
 801dd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd42:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801dd46:	9501      	str	r5, [sp, #4]
 801dd48:	e78c      	b.n	801dc64 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801dd4a:	4682      	mov	sl, r0
 801dd4c:	46a4      	mov	ip, r4
 801dd4e:	46a8      	mov	r8, r5
 801dd50:	9501      	str	r5, [sp, #4]
 801dd52:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801dd56:	e793      	b.n	801dc80 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801dd58:	4682      	mov	sl, r0
 801dd5a:	46a4      	mov	ip, r4
 801dd5c:	46a8      	mov	r8, r5
 801dd5e:	e78f      	b.n	801dc80 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801dd60:	4606      	mov	r6, r0
 801dd62:	4627      	mov	r7, r4
 801dd64:	46ae      	mov	lr, r5
 801dd66:	e7a0      	b.n	801dcaa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801dd68:	4606      	mov	r6, r0
 801dd6a:	4627      	mov	r7, r4
 801dd6c:	46ae      	mov	lr, r5
 801dd6e:	e7ac      	b.n	801dcca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801dd70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd74:	b09b      	sub	sp, #108	@ 0x6c
 801dd76:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dd78:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801dd7a:	9019      	str	r0, [sp, #100]	@ 0x64
 801dd7c:	9109      	str	r1, [sp, #36]	@ 0x24
 801dd7e:	6850      	ldr	r0, [r2, #4]
 801dd80:	9306      	str	r3, [sp, #24]
 801dd82:	6812      	ldr	r2, [r2, #0]
 801dd84:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801dd88:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801dd8c:	fb00 1303 	mla	r3, r0, r3, r1
 801dd90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd94:	18d3      	adds	r3, r2, r3
 801dd96:	9307      	str	r3, [sp, #28]
 801dd98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	9308      	str	r3, [sp, #32]
 801dd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dda0:	2b00      	cmp	r3, #0
 801dda2:	dc03      	bgt.n	801ddac <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dda4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	f340 81ab 	ble.w	801e102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ddac:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ddae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ddb2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ddb6:	1e48      	subs	r0, r1, #1
 801ddb8:	1e55      	subs	r5, r2, #1
 801ddba:	9b06      	ldr	r3, [sp, #24]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	f340 80b1 	ble.w	801df24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ddc2:	ea5f 462b 	movs.w	r6, fp, asr #16
 801ddc6:	ea4f 4324 	mov.w	r3, r4, asr #16
 801ddca:	d406      	bmi.n	801ddda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ddcc:	4286      	cmp	r6, r0
 801ddce:	da04      	bge.n	801ddda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ddd0:	2b00      	cmp	r3, #0
 801ddd2:	db02      	blt.n	801ddda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ddd4:	42ab      	cmp	r3, r5
 801ddd6:	f2c0 80a6 	blt.w	801df26 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801ddda:	3601      	adds	r6, #1
 801dddc:	f100 8097 	bmi.w	801df0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dde0:	42b1      	cmp	r1, r6
 801dde2:	f2c0 8094 	blt.w	801df0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dde6:	3301      	adds	r3, #1
 801dde8:	f100 8091 	bmi.w	801df0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ddec:	429a      	cmp	r2, r3
 801ddee:	f2c0 808e 	blt.w	801df0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801ddf2:	9b06      	ldr	r3, [sp, #24]
 801ddf4:	9e07      	ldr	r6, [sp, #28]
 801ddf6:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	f340 80b0 	ble.w	801df60 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801de00:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801de02:	1425      	asrs	r5, r4, #16
 801de04:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de06:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801de0a:	68c7      	ldr	r7, [r0, #12]
 801de0c:	ea5f 402b 	movs.w	r0, fp, asr #16
 801de10:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801de14:	689b      	ldr	r3, [r3, #8]
 801de16:	f100 80ea 	bmi.w	801dfee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de1a:	f103 3cff 	add.w	ip, r3, #4294967295
 801de1e:	4560      	cmp	r0, ip
 801de20:	f280 80e5 	bge.w	801dfee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de24:	2d00      	cmp	r5, #0
 801de26:	f2c0 80e2 	blt.w	801dfee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de2a:	f107 3cff 	add.w	ip, r7, #4294967295
 801de2e:	4565      	cmp	r5, ip
 801de30:	f280 80dd 	bge.w	801dfee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801de34:	b21b      	sxth	r3, r3
 801de36:	fb05 0003 	mla	r0, r5, r3, r0
 801de3a:	9d08      	ldr	r5, [sp, #32]
 801de3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801de40:	182f      	adds	r7, r5, r0
 801de42:	5c2d      	ldrb	r5, [r5, r0]
 801de44:	7878      	ldrb	r0, [r7, #1]
 801de46:	f897 e002 	ldrb.w	lr, [r7, #2]
 801de4a:	900c      	str	r0, [sp, #48]	@ 0x30
 801de4c:	f897 9003 	ldrb.w	r9, [r7, #3]
 801de50:	f897 8004 	ldrb.w	r8, [r7, #4]
 801de54:	f897 a005 	ldrb.w	sl, [r7, #5]
 801de58:	b1c9      	cbz	r1, 801de8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801de5a:	f04f 0c03 	mov.w	ip, #3
 801de5e:	f06f 0004 	mvn.w	r0, #4
 801de62:	3705      	adds	r7, #5
 801de64:	fb13 030c 	smlabb	r3, r3, ip, r0
 801de68:	eb07 0c03 	add.w	ip, r7, r3
 801de6c:	5cfb      	ldrb	r3, [r7, r3]
 801de6e:	930d      	str	r3, [sp, #52]	@ 0x34
 801de70:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801de74:	930f      	str	r3, [sp, #60]	@ 0x3c
 801de76:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801de7a:	9311      	str	r3, [sp, #68]	@ 0x44
 801de7c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801de80:	930e      	str	r3, [sp, #56]	@ 0x38
 801de82:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801de86:	9310      	str	r3, [sp, #64]	@ 0x40
 801de88:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801de8c:	9312      	str	r3, [sp, #72]	@ 0x48
 801de8e:	b292      	uxth	r2, r2
 801de90:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801de92:	b289      	uxth	r1, r1
 801de94:	fb02 f301 	mul.w	r3, r2, r1
 801de98:	0112      	lsls	r2, r2, #4
 801de9a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801de9e:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801dea2:	1ad2      	subs	r2, r2, r3
 801dea4:	b289      	uxth	r1, r1
 801dea6:	b292      	uxth	r2, r2
 801dea8:	1a7f      	subs	r7, r7, r1
 801deaa:	fb02 f909 	mul.w	r9, r2, r9
 801deae:	b2bf      	uxth	r7, r7
 801deb0:	fb02 f808 	mul.w	r8, r2, r8
 801deb4:	fb02 fa0a 	mul.w	sl, r2, sl
 801deb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801deba:	fb07 9905 	mla	r9, r7, r5, r9
 801debe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801dec0:	fb07 8800 	mla	r8, r7, r0, r8
 801dec4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801dec6:	fb07 aa0e 	mla	sl, r7, lr, sl
 801deca:	fb01 9905 	mla	r9, r1, r5, r9
 801dece:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ded0:	fb01 8800 	mla	r8, r1, r0, r8
 801ded4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ded6:	fb01 a102 	mla	r1, r1, r2, sl
 801deda:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dedc:	fb03 9905 	mla	r9, r3, r5, r9
 801dee0:	fb03 8800 	mla	r8, r3, r0, r8
 801dee4:	fb03 1302 	mla	r3, r3, r2, r1
 801dee8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801deec:	ea4f 2828 	mov.w	r8, r8, asr #8
 801def0:	121b      	asrs	r3, r3, #8
 801def2:	f886 9000 	strb.w	r9, [r6]
 801def6:	f886 8001 	strb.w	r8, [r6, #1]
 801defa:	70b3      	strb	r3, [r6, #2]
 801defc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801defe:	3603      	adds	r6, #3
 801df00:	449b      	add	fp, r3
 801df02:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df04:	441c      	add	r4, r3
 801df06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df08:	3b01      	subs	r3, #1
 801df0a:	930a      	str	r3, [sp, #40]	@ 0x28
 801df0c:	e774      	b.n	801ddf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801df0e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801df10:	449b      	add	fp, r3
 801df12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df14:	441c      	add	r4, r3
 801df16:	9b06      	ldr	r3, [sp, #24]
 801df18:	3b01      	subs	r3, #1
 801df1a:	9306      	str	r3, [sp, #24]
 801df1c:	9b07      	ldr	r3, [sp, #28]
 801df1e:	3303      	adds	r3, #3
 801df20:	9307      	str	r3, [sp, #28]
 801df22:	e74a      	b.n	801ddba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801df24:	d024      	beq.n	801df70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801df26:	9b06      	ldr	r3, [sp, #24]
 801df28:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801df2a:	3b01      	subs	r3, #1
 801df2c:	fb00 b003 	mla	r0, r0, r3, fp
 801df30:	1400      	asrs	r0, r0, #16
 801df32:	f53f af5e 	bmi.w	801ddf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801df36:	3901      	subs	r1, #1
 801df38:	4288      	cmp	r0, r1
 801df3a:	f6bf af5a 	bge.w	801ddf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801df3e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801df40:	fb01 4303 	mla	r3, r1, r3, r4
 801df44:	141b      	asrs	r3, r3, #16
 801df46:	f53f af54 	bmi.w	801ddf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801df4a:	3a01      	subs	r2, #1
 801df4c:	4293      	cmp	r3, r2
 801df4e:	f6bf af50 	bge.w	801ddf2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801df52:	9b07      	ldr	r3, [sp, #28]
 801df54:	f8dd e018 	ldr.w	lr, [sp, #24]
 801df58:	1cde      	adds	r6, r3, #3
 801df5a:	f1be 0f00 	cmp.w	lr, #0
 801df5e:	dc5f      	bgt.n	801e020 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801df60:	9b06      	ldr	r3, [sp, #24]
 801df62:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801df66:	9b07      	ldr	r3, [sp, #28]
 801df68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801df6c:	4423      	add	r3, r4
 801df6e:	9307      	str	r3, [sp, #28]
 801df70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df72:	2b00      	cmp	r3, #0
 801df74:	f340 80c5 	ble.w	801e102 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801df78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df86:	eef0 6a62 	vmov.f32	s13, s5
 801df8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df96:	ee16 ba90 	vmov	fp, s13
 801df9a:	eef0 6a43 	vmov.f32	s13, s6
 801df9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfa2:	ee16 4a90 	vmov	r4, s13
 801dfa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dfba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dfbe:	ee12 2a90 	vmov	r2, s5
 801dfc2:	eef0 2a47 	vmov.f32	s5, s14
 801dfc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfca:	ee13 2a10 	vmov	r2, s6
 801dfce:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dfd0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfd2:	eeb0 3a67 	vmov.f32	s6, s15
 801dfd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801dfda:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dfdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dfe0:	3b01      	subs	r3, #1
 801dfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfe4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dfe6:	bf08      	it	eq
 801dfe8:	4613      	moveq	r3, r2
 801dfea:	9306      	str	r3, [sp, #24]
 801dfec:	e6d7      	b.n	801dd9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801dfee:	f110 0c01 	adds.w	ip, r0, #1
 801dff2:	d483      	bmi.n	801defc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801dff4:	4563      	cmp	r3, ip
 801dff6:	db81      	blt.n	801defc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801dff8:	f115 0c01 	adds.w	ip, r5, #1
 801dffc:	f53f af7e 	bmi.w	801defc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e000:	4567      	cmp	r7, ip
 801e002:	f6ff af7b 	blt.w	801defc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e006:	b23f      	sxth	r7, r7
 801e008:	b21b      	sxth	r3, r3
 801e00a:	9700      	str	r7, [sp, #0]
 801e00c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801e010:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801e014:	9a08      	ldr	r2, [sp, #32]
 801e016:	4631      	mov	r1, r6
 801e018:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e01a:	f7ff fdf9 	bl	801dc10 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801e01e:	e76d      	b.n	801defc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801e020:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801e022:	ea4f 402b 	mov.w	r0, fp, asr #16
 801e026:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801e02a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801e02e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801e032:	1421      	asrs	r1, r4, #16
 801e034:	930a      	str	r3, [sp, #40]	@ 0x28
 801e036:	fb0c 0101 	mla	r1, ip, r1, r0
 801e03a:	9808      	ldr	r0, [sp, #32]
 801e03c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e040:	1845      	adds	r5, r0, r1
 801e042:	5c40      	ldrb	r0, [r0, r1]
 801e044:	796f      	ldrb	r7, [r5, #5]
 801e046:	7869      	ldrb	r1, [r5, #1]
 801e048:	f895 8002 	ldrb.w	r8, [r5, #2]
 801e04c:	f895 a003 	ldrb.w	sl, [r5, #3]
 801e050:	f895 9004 	ldrb.w	r9, [r5, #4]
 801e054:	970c      	str	r7, [sp, #48]	@ 0x30
 801e056:	b1a2      	cbz	r2, 801e082 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801e058:	2703      	movs	r7, #3
 801e05a:	f06f 0304 	mvn.w	r3, #4
 801e05e:	3505      	adds	r5, #5
 801e060:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801e064:	eb05 070c 	add.w	r7, r5, ip
 801e068:	f815 500c 	ldrb.w	r5, [r5, ip]
 801e06c:	9513      	str	r5, [sp, #76]	@ 0x4c
 801e06e:	787d      	ldrb	r5, [r7, #1]
 801e070:	9515      	str	r5, [sp, #84]	@ 0x54
 801e072:	78bd      	ldrb	r5, [r7, #2]
 801e074:	9517      	str	r5, [sp, #92]	@ 0x5c
 801e076:	78fd      	ldrb	r5, [r7, #3]
 801e078:	9514      	str	r5, [sp, #80]	@ 0x50
 801e07a:	793d      	ldrb	r5, [r7, #4]
 801e07c:	9516      	str	r5, [sp, #88]	@ 0x58
 801e07e:	797d      	ldrb	r5, [r7, #5]
 801e080:	9518      	str	r5, [sp, #96]	@ 0x60
 801e082:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801e086:	b292      	uxth	r2, r2
 801e088:	3603      	adds	r6, #3
 801e08a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e08e:	fb03 f502 	mul.w	r5, r3, r2
 801e092:	011b      	lsls	r3, r3, #4
 801e094:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801e098:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801e09c:	1b5b      	subs	r3, r3, r5
 801e09e:	b292      	uxth	r2, r2
 801e0a0:	b29b      	uxth	r3, r3
 801e0a2:	1abf      	subs	r7, r7, r2
 801e0a4:	fb03 f909 	mul.w	r9, r3, r9
 801e0a8:	b2bf      	uxth	r7, r7
 801e0aa:	fb03 fa0a 	mul.w	sl, r3, sl
 801e0ae:	fb07 9901 	mla	r9, r7, r1, r9
 801e0b2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801e0b4:	fb07 aa00 	mla	sl, r7, r0, sl
 801e0b8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e0ba:	fb02 9901 	mla	r9, r2, r1, r9
 801e0be:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801e0c0:	fb02 aa00 	mla	sl, r2, r0, sl
 801e0c4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e0c6:	fb05 9901 	mla	r9, r5, r1, r9
 801e0ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801e0cc:	fb05 aa00 	mla	sl, r5, r0, sl
 801e0d0:	434b      	muls	r3, r1
 801e0d2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e0d4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e0d8:	fb07 3308 	mla	r3, r7, r8, r3
 801e0dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e0e0:	f806 ac06 	strb.w	sl, [r6, #-6]
 801e0e4:	fb02 3201 	mla	r2, r2, r1, r3
 801e0e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e0ea:	f806 9c05 	strb.w	r9, [r6, #-5]
 801e0ee:	fb05 2503 	mla	r5, r5, r3, r2
 801e0f2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e0f4:	122d      	asrs	r5, r5, #8
 801e0f6:	449b      	add	fp, r3
 801e0f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e0fa:	f806 5c04 	strb.w	r5, [r6, #-4]
 801e0fe:	441c      	add	r4, r3
 801e100:	e72b      	b.n	801df5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e102:	b01b      	add	sp, #108	@ 0x6c
 801e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e108 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e10c:	b087      	sub	sp, #28
 801e10e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801e112:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801e116:	fb05 7003 	mla	r0, r5, r3, r7
 801e11a:	2d00      	cmp	r5, #0
 801e11c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801e120:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801e124:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e128:	f2c0 811f 	blt.w	801e36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e12c:	45a8      	cmp	r8, r5
 801e12e:	f340 811c 	ble.w	801e36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801e132:	2f00      	cmp	r7, #0
 801e134:	f2c0 8117 	blt.w	801e366 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e138:	42bb      	cmp	r3, r7
 801e13a:	f340 8114 	ble.w	801e366 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801e13e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e142:	1c7a      	adds	r2, r7, #1
 801e144:	f100 8114 	bmi.w	801e370 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e148:	4293      	cmp	r3, r2
 801e14a:	f340 8111 	ble.w	801e370 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801e14e:	2c00      	cmp	r4, #0
 801e150:	f000 8110 	beq.w	801e374 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801e154:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e158:	3501      	adds	r5, #1
 801e15a:	f100 810f 	bmi.w	801e37c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e15e:	45a8      	cmp	r8, r5
 801e160:	f340 810c 	ble.w	801e37c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801e164:	f1be 0f00 	cmp.w	lr, #0
 801e168:	f000 810b 	beq.w	801e382 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801e16c:	2f00      	cmp	r7, #0
 801e16e:	f2c0 8103 	blt.w	801e378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e172:	42bb      	cmp	r3, r7
 801e174:	f340 8100 	ble.w	801e378 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801e178:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e17c:	3701      	adds	r7, #1
 801e17e:	f100 8103 	bmi.w	801e388 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e182:	42bb      	cmp	r3, r7
 801e184:	f340 8100 	ble.w	801e388 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801e188:	2c00      	cmp	r4, #0
 801e18a:	f000 80ff 	beq.w	801e38c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801e18e:	3301      	adds	r3, #1
 801e190:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e194:	fa1f fc84 	uxth.w	ip, r4
 801e198:	fa1f fe8e 	uxth.w	lr, lr
 801e19c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e1a0:	fb0c f90e 	mul.w	r9, ip, lr
 801e1a4:	0e13      	lsrs	r3, r2, #24
 801e1a6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e1aa:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e1ae:	9302      	str	r3, [sp, #8]
 801e1b0:	ebac 0709 	sub.w	r7, ip, r9
 801e1b4:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801e1b8:	fa1f f48e 	uxth.w	r4, lr
 801e1bc:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801e1c0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e1c4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e1c8:	fb0a fe0e 	mul.w	lr, sl, lr
 801e1cc:	1b1b      	subs	r3, r3, r4
 801e1ce:	fb0a f606 	mul.w	r6, sl, r6
 801e1d2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e1d6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e1da:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801e1de:	b29b      	uxth	r3, r3
 801e1e0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e1e4:	b2bf      	uxth	r7, r7
 801e1e6:	9301      	str	r3, [sp, #4]
 801e1e8:	44e6      	add	lr, ip
 801e1ea:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e1ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e1f2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e1f6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801e1fa:	9303      	str	r3, [sp, #12]
 801e1fc:	0a33      	lsrs	r3, r6, #8
 801e1fe:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801e202:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e206:	9304      	str	r3, [sp, #16]
 801e208:	fb0b f606 	mul.w	r6, fp, r6
 801e20c:	fb0b f000 	mul.w	r0, fp, r0
 801e210:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e214:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e218:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e21c:	44b6      	add	lr, r6
 801e21e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801e222:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e226:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801e22a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e22e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e232:	fb08 f606 	mul.w	r6, r8, r6
 801e236:	0a03      	lsrs	r3, r0, #8
 801e238:	fb08 f505 	mul.w	r5, r8, r5
 801e23c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e240:	0a30      	lsrs	r0, r6, #8
 801e242:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e246:	9305      	str	r3, [sp, #20]
 801e248:	0e13      	lsrs	r3, r2, #24
 801e24a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e24e:	fb0e fe07 	mul.w	lr, lr, r7
 801e252:	4430      	add	r0, r6
 801e254:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801e258:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e25c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801e260:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e264:	0a00      	lsrs	r0, r0, #8
 801e266:	435e      	muls	r6, r3
 801e268:	0a2d      	lsrs	r5, r5, #8
 801e26a:	435a      	muls	r2, r3
 801e26c:	9b03      	ldr	r3, [sp, #12]
 801e26e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e272:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e276:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e27a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e27e:	44b4      	add	ip, r6
 801e280:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801e284:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e288:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e28c:	9e01      	ldr	r6, [sp, #4]
 801e28e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e292:	fb03 ee06 	mla	lr, r3, r6, lr
 801e296:	9b04      	ldr	r3, [sp, #16]
 801e298:	0a12      	lsrs	r2, r2, #8
 801e29a:	fb0c ee09 	mla	lr, ip, r9, lr
 801e29e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801e2a2:	9b05      	ldr	r3, [sp, #20]
 801e2a4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e2a8:	fb00 ee04 	mla	lr, r0, r4, lr
 801e2ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2b0:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801e2b4:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801e2b8:	9b01      	ldr	r3, [sp, #4]
 801e2ba:	fb07 fe0e 	mul.w	lr, r7, lr
 801e2be:	fb07 f70b 	mul.w	r7, r7, fp
 801e2c2:	fb03 ee06 	mla	lr, r3, r6, lr
 801e2c6:	fb03 730a 	mla	r3, r3, sl, r7
 801e2ca:	fb09 e202 	mla	r2, r9, r2, lr
 801e2ce:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801e2d2:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e2d6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801e2da:	fb04 3408 	mla	r4, r4, r8, r3
 801e2de:	9b02      	ldr	r3, [sp, #8]
 801e2e0:	b292      	uxth	r2, r2
 801e2e2:	fb09 4903 	mla	r9, r9, r3, r4
 801e2e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2ea:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e2ee:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e2f2:	fb09 f902 	mul.w	r9, r9, r2
 801e2f6:	ea40 0e0e 	orr.w	lr, r0, lr
 801e2fa:	f109 0301 	add.w	r3, r9, #1
 801e2fe:	fa5f f08e 	uxtb.w	r0, lr
 801e302:	fb10 f002 	smulbb	r0, r0, r2
 801e306:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e30a:	780b      	ldrb	r3, [r1, #0]
 801e30c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e310:	fa5f f989 	uxtb.w	r9, r9
 801e314:	fb03 0309 	mla	r3, r3, r9, r0
 801e318:	b29b      	uxth	r3, r3
 801e31a:	1c58      	adds	r0, r3, #1
 801e31c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e320:	7848      	ldrb	r0, [r1, #1]
 801e322:	fb10 f009 	smulbb	r0, r0, r9
 801e326:	121b      	asrs	r3, r3, #8
 801e328:	700b      	strb	r3, [r1, #0]
 801e32a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e32e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e332:	fb03 0302 	mla	r3, r3, r2, r0
 801e336:	b29b      	uxth	r3, r3
 801e338:	1c58      	adds	r0, r3, #1
 801e33a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e33e:	121b      	asrs	r3, r3, #8
 801e340:	704b      	strb	r3, [r1, #1]
 801e342:	788b      	ldrb	r3, [r1, #2]
 801e344:	fb13 f909 	smulbb	r9, r3, r9
 801e348:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e34c:	fa1f fe8e 	uxth.w	lr, lr
 801e350:	f10e 0301 	add.w	r3, lr, #1
 801e354:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e358:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e35c:	f881 e002 	strb.w	lr, [r1, #2]
 801e360:	b007      	add	sp, #28
 801e362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e366:	2600      	movs	r6, #0
 801e368:	e6eb      	b.n	801e142 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e36a:	2000      	movs	r0, #0
 801e36c:	4606      	mov	r6, r0
 801e36e:	e6f3      	b.n	801e158 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e370:	2000      	movs	r0, #0
 801e372:	e6f1      	b.n	801e158 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e374:	4620      	mov	r0, r4
 801e376:	e6ef      	b.n	801e158 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e378:	2500      	movs	r5, #0
 801e37a:	e6ff      	b.n	801e17c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e37c:	2200      	movs	r2, #0
 801e37e:	4615      	mov	r5, r2
 801e380:	e708      	b.n	801e194 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e382:	4672      	mov	r2, lr
 801e384:	4675      	mov	r5, lr
 801e386:	e705      	b.n	801e194 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e388:	2200      	movs	r2, #0
 801e38a:	e703      	b.n	801e194 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e38c:	4622      	mov	r2, r4
 801e38e:	e701      	b.n	801e194 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e390 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e394:	b09d      	sub	sp, #116	@ 0x74
 801e396:	9219      	str	r2, [sp, #100]	@ 0x64
 801e398:	9307      	str	r3, [sp, #28]
 801e39a:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801e39c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801e3a0:	901b      	str	r0, [sp, #108]	@ 0x6c
 801e3a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801e3a4:	6850      	ldr	r0, [r2, #4]
 801e3a6:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e3a8:	6812      	ldr	r2, [r2, #0]
 801e3aa:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801e3ae:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801e3b2:	fb00 1303 	mla	r3, r0, r3, r1
 801e3b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3ba:	18d3      	adds	r3, r2, r3
 801e3bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e3be:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	9310      	str	r3, [sp, #64]	@ 0x40
 801e3c4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e3c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e3ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	dc03      	bgt.n	801e3d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e3d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	f340 8368 	ble.w	801eaa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e3d8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e3da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e3de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e3e2:	1e48      	subs	r0, r1, #1
 801e3e4:	1e57      	subs	r7, r2, #1
 801e3e6:	9b07      	ldr	r3, [sp, #28]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	f340 8187 	ble.w	801e6fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e3ee:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e3f2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e3f6:	d406      	bmi.n	801e406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e3f8:	4584      	cmp	ip, r0
 801e3fa:	da04      	bge.n	801e406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	db02      	blt.n	801e406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e400:	42bb      	cmp	r3, r7
 801e402:	f2c0 817c 	blt.w	801e6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e406:	f11c 0c01 	adds.w	ip, ip, #1
 801e40a:	f100 816c 	bmi.w	801e6e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e40e:	4561      	cmp	r1, ip
 801e410:	f2c0 8169 	blt.w	801e6e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e414:	3301      	adds	r3, #1
 801e416:	f100 8166 	bmi.w	801e6e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e41a:	429a      	cmp	r2, r3
 801e41c:	f2c0 8163 	blt.w	801e6e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e420:	9b07      	ldr	r3, [sp, #28]
 801e422:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e424:	9318      	str	r3, [sp, #96]	@ 0x60
 801e426:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e428:	2b00      	cmp	r3, #0
 801e42a:	f340 8186 	ble.w	801e73a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e42e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e430:	142a      	asrs	r2, r5, #16
 801e432:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e436:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e43a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e43e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e442:	f100 81cb 	bmi.w	801e7dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e446:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e44a:	4542      	cmp	r2, r8
 801e44c:	f280 81c6 	bge.w	801e7dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e450:	2800      	cmp	r0, #0
 801e452:	f2c0 81c3 	blt.w	801e7dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e456:	f103 38ff 	add.w	r8, r3, #4294967295
 801e45a:	4540      	cmp	r0, r8
 801e45c:	f280 81be 	bge.w	801e7dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e460:	fa0f f38e 	sxth.w	r3, lr
 801e464:	fb00 2203 	mla	r2, r0, r3, r2
 801e468:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e46a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801e46e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801e472:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e476:	2900      	cmp	r1, #0
 801e478:	f000 81a6 	beq.w	801e7c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e47c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e480:	900c      	str	r0, [sp, #48]	@ 0x30
 801e482:	0e00      	lsrs	r0, r0, #24
 801e484:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e486:	f1bc 0f00 	cmp.w	ip, #0
 801e48a:	d00f      	beq.n	801e4ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e48c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801e490:	3b01      	subs	r3, #1
 801e492:	009b      	lsls	r3, r3, #2
 801e494:	3304      	adds	r3, #4
 801e496:	eb08 0003 	add.w	r0, r8, r3
 801e49a:	f858 3003 	ldr.w	r3, [r8, r3]
 801e49e:	9308      	str	r3, [sp, #32]
 801e4a0:	0e1b      	lsrs	r3, r3, #24
 801e4a2:	9311      	str	r3, [sp, #68]	@ 0x44
 801e4a4:	6843      	ldr	r3, [r0, #4]
 801e4a6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e4a8:	0e1b      	lsrs	r3, r3, #24
 801e4aa:	9314      	str	r3, [sp, #80]	@ 0x50
 801e4ac:	b289      	uxth	r1, r1
 801e4ae:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e4b0:	fa1f fc8c 	uxth.w	ip, ip
 801e4b4:	0108      	lsls	r0, r1, #4
 801e4b6:	fb01 f90c 	mul.w	r9, r1, ip
 801e4ba:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801e4be:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801e4c2:	eba0 0809 	sub.w	r8, r0, r9
 801e4c6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e4c8:	fa1f f18c 	uxth.w	r1, ip
 801e4cc:	fa1f f888 	uxth.w	r8, r8
 801e4d0:	1a5b      	subs	r3, r3, r1
 801e4d2:	fb08 f000 	mul.w	r0, r8, r0
 801e4d6:	b29b      	uxth	r3, r3
 801e4d8:	fb03 000e 	mla	r0, r3, lr, r0
 801e4dc:	fb01 0004 	mla	r0, r1, r4, r0
 801e4e0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e4e2:	fb09 0004 	mla	r0, r9, r4, r0
 801e4e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e4ea:	2800      	cmp	r0, #0
 801e4ec:	f000 80f2 	beq.w	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e4f0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e4f4:	d01b      	beq.n	801e52e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e4f6:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801e4fa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e4fe:	fb0e fa0a 	mul.w	sl, lr, sl
 801e502:	fb0e fe02 	mul.w	lr, lr, r2
 801e506:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e50a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e50e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e512:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e516:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e51a:	4452      	add	r2, sl
 801e51c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e520:	0a12      	lsrs	r2, r2, #8
 801e522:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e526:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e52a:	ea42 020c 	orr.w	r2, r2, ip
 801e52e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e530:	2cff      	cmp	r4, #255	@ 0xff
 801e532:	d021      	beq.n	801e578 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e534:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e536:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e53a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e53c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e540:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e542:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e546:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e548:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e54c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e550:	fb04 fa0a 	mul.w	sl, r4, sl
 801e554:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e558:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e55c:	44de      	add	lr, fp
 801e55e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e562:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e566:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e56a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e56e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e572:	ea4e 040a 	orr.w	r4, lr, sl
 801e576:	940c      	str	r4, [sp, #48]	@ 0x30
 801e578:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e57a:	2cff      	cmp	r4, #255	@ 0xff
 801e57c:	d021      	beq.n	801e5c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e57e:	9c08      	ldr	r4, [sp, #32]
 801e580:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e584:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e586:	fb04 fb0b 	mul.w	fp, r4, fp
 801e58a:	9c08      	ldr	r4, [sp, #32]
 801e58c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e590:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e592:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e596:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e59a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e59e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e5a2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e5a6:	44de      	add	lr, fp
 801e5a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e5ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e5b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e5b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e5b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e5bc:	ea4e 040a 	orr.w	r4, lr, sl
 801e5c0:	9408      	str	r4, [sp, #32]
 801e5c2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e5c4:	2cff      	cmp	r4, #255	@ 0xff
 801e5c6:	d021      	beq.n	801e60c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e5c8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e5ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e5ce:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e5d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801e5d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e5d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e5da:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e5dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e5e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e5e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e5e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e5ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e5f0:	44de      	add	lr, fp
 801e5f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e5f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e5fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e5fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e602:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e606:	ea4e 040a 	orr.w	r4, lr, sl
 801e60a:	940d      	str	r4, [sp, #52]	@ 0x34
 801e60c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e60e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801e612:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e616:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e61a:	9c08      	ldr	r4, [sp, #32]
 801e61c:	fb08 fc0c 	mul.w	ip, r8, ip
 801e620:	fb03 cc0e 	mla	ip, r3, lr, ip
 801e624:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e628:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e62a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e62e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e632:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e634:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e638:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e63c:	fb08 f80e 	mul.w	r8, r8, lr
 801e640:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e644:	fb03 8202 	mla	r2, r3, r2, r8
 801e648:	9b08      	ldr	r3, [sp, #32]
 801e64a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e64e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801e652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e654:	fb01 220a 	mla	r2, r1, sl, r2
 801e658:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801e65c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e65e:	fb09 2901 	mla	r9, r9, r1, r2
 801e662:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e664:	4343      	muls	r3, r0
 801e666:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e66a:	1c58      	adds	r0, r3, #1
 801e66c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e670:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e674:	783b      	ldrb	r3, [r7, #0]
 801e676:	ea4c 0c09 	orr.w	ip, ip, r9
 801e67a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e67e:	fa5f f28c 	uxtb.w	r2, ip
 801e682:	b2c0      	uxtb	r0, r0
 801e684:	fb12 f201 	smulbb	r2, r2, r1
 801e688:	fb03 2300 	mla	r3, r3, r0, r2
 801e68c:	b29b      	uxth	r3, r3
 801e68e:	1c5a      	adds	r2, r3, #1
 801e690:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e694:	787a      	ldrb	r2, [r7, #1]
 801e696:	fb12 f200 	smulbb	r2, r2, r0
 801e69a:	121b      	asrs	r3, r3, #8
 801e69c:	703b      	strb	r3, [r7, #0]
 801e69e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e6a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e6a6:	fb03 2301 	mla	r3, r3, r1, r2
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	1c5a      	adds	r2, r3, #1
 801e6ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e6b2:	121b      	asrs	r3, r3, #8
 801e6b4:	707b      	strb	r3, [r7, #1]
 801e6b6:	78bb      	ldrb	r3, [r7, #2]
 801e6b8:	fb13 f000 	smulbb	r0, r3, r0
 801e6bc:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e6c0:	fa1f fc8c 	uxth.w	ip, ip
 801e6c4:	f10c 0301 	add.w	r3, ip, #1
 801e6c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e6cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e6d0:	f887 c002 	strb.w	ip, [r7, #2]
 801e6d4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e6d6:	3703      	adds	r7, #3
 801e6d8:	441d      	add	r5, r3
 801e6da:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e6dc:	441e      	add	r6, r3
 801e6de:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e6e0:	3b01      	subs	r3, #1
 801e6e2:	9318      	str	r3, [sp, #96]	@ 0x60
 801e6e4:	e69f      	b.n	801e426 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e6e6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e6e8:	441d      	add	r5, r3
 801e6ea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e6ec:	441e      	add	r6, r3
 801e6ee:	9b07      	ldr	r3, [sp, #28]
 801e6f0:	3b01      	subs	r3, #1
 801e6f2:	9307      	str	r3, [sp, #28]
 801e6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6f6:	3303      	adds	r3, #3
 801e6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e6fa:	e674      	b.n	801e3e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e6fc:	d025      	beq.n	801e74a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e6fe:	9b07      	ldr	r3, [sp, #28]
 801e700:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801e702:	3b01      	subs	r3, #1
 801e704:	fb00 5003 	mla	r0, r0, r3, r5
 801e708:	1400      	asrs	r0, r0, #16
 801e70a:	f53f ae89 	bmi.w	801e420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e70e:	3901      	subs	r1, #1
 801e710:	4288      	cmp	r0, r1
 801e712:	f6bf ae85 	bge.w	801e420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e716:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801e718:	fb01 6303 	mla	r3, r1, r3, r6
 801e71c:	141b      	asrs	r3, r3, #16
 801e71e:	f53f ae7f 	bmi.w	801e420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e722:	3a01      	subs	r2, #1
 801e724:	4293      	cmp	r3, r2
 801e726:	f6bf ae7b 	bge.w	801e420 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e72c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e730:	f103 0e03 	add.w	lr, r3, #3
 801e734:	f1bb 0f00 	cmp.w	fp, #0
 801e738:	dc6e      	bgt.n	801e818 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e73a:	9b07      	ldr	r3, [sp, #28]
 801e73c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e742:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e746:	4423      	add	r3, r4
 801e748:	930a      	str	r3, [sp, #40]	@ 0x28
 801e74a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f340 81ab 	ble.w	801eaa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e756:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e758:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e75c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e760:	eef0 6a62 	vmov.f32	s13, s5
 801e764:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e768:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e76c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e770:	ee16 5a90 	vmov	r5, s13
 801e774:	eef0 6a43 	vmov.f32	s13, s6
 801e778:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e77c:	ee16 6a90 	vmov	r6, s13
 801e780:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e784:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e788:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e78c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e790:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e794:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e798:	ee12 2a90 	vmov	r2, s5
 801e79c:	eef0 2a47 	vmov.f32	s5, s14
 801e7a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7a4:	ee13 2a10 	vmov	r2, s6
 801e7a8:	9329      	str	r3, [sp, #164]	@ 0xa4
 801e7aa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e7ac:	eeb0 3a67 	vmov.f32	s6, s15
 801e7b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7b4:	932a      	str	r3, [sp, #168]	@ 0xa8
 801e7b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e7b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e7ba:	3b01      	subs	r3, #1
 801e7bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e7c0:	bf08      	it	eq
 801e7c2:	4613      	moveq	r3, r2
 801e7c4:	9307      	str	r3, [sp, #28]
 801e7c6:	e600      	b.n	801e3ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e7c8:	f1bc 0f00 	cmp.w	ip, #0
 801e7cc:	f43f ae6e 	beq.w	801e4ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e7d0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e7d4:	9308      	str	r3, [sp, #32]
 801e7d6:	0e1b      	lsrs	r3, r3, #24
 801e7d8:	9311      	str	r3, [sp, #68]	@ 0x44
 801e7da:	e667      	b.n	801e4ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e7dc:	f112 0801 	adds.w	r8, r2, #1
 801e7e0:	f53f af78 	bmi.w	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e7e4:	45c6      	cmp	lr, r8
 801e7e6:	f6ff af75 	blt.w	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e7ea:	f110 0801 	adds.w	r8, r0, #1
 801e7ee:	f53f af71 	bmi.w	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e7f2:	4543      	cmp	r3, r8
 801e7f4:	f6ff af6e 	blt.w	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e7f8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e7fa:	b21b      	sxth	r3, r3
 801e7fc:	9201      	str	r2, [sp, #4]
 801e7fe:	9300      	str	r3, [sp, #0]
 801e800:	fa0f f38e 	sxth.w	r3, lr
 801e804:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e80a:	e9cd c404 	strd	ip, r4, [sp, #16]
 801e80e:	4639      	mov	r1, r7
 801e810:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e812:	f7ff fc79 	bl	801e108 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801e816:	e75d      	b.n	801e6d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e818:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e81a:	142f      	asrs	r7, r5, #16
 801e81c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e81e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e822:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e826:	1433      	asrs	r3, r6, #16
 801e828:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e82c:	fb02 7303 	mla	r3, r2, r3, r7
 801e830:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801e834:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e838:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e83c:	2900      	cmp	r1, #0
 801e83e:	f000 812a 	beq.w	801ea96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e842:	687c      	ldr	r4, [r7, #4]
 801e844:	940e      	str	r4, [sp, #56]	@ 0x38
 801e846:	0e24      	lsrs	r4, r4, #24
 801e848:	9415      	str	r4, [sp, #84]	@ 0x54
 801e84a:	b178      	cbz	r0, 801e86c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e84c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e850:	3a01      	subs	r2, #1
 801e852:	0092      	lsls	r2, r2, #2
 801e854:	3204      	adds	r2, #4
 801e856:	eb07 0802 	add.w	r8, r7, r2
 801e85a:	58ba      	ldr	r2, [r7, r2]
 801e85c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e85e:	0e12      	lsrs	r2, r2, #24
 801e860:	9212      	str	r2, [sp, #72]	@ 0x48
 801e862:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e866:	920f      	str	r2, [sp, #60]	@ 0x3c
 801e868:	0e12      	lsrs	r2, r2, #24
 801e86a:	9216      	str	r2, [sp, #88]	@ 0x58
 801e86c:	b289      	uxth	r1, r1
 801e86e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e870:	b280      	uxth	r0, r0
 801e872:	fb01 f900 	mul.w	r9, r1, r0
 801e876:	0109      	lsls	r1, r1, #4
 801e878:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e87c:	eba1 0809 	sub.w	r8, r1, r9
 801e880:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801e884:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801e886:	b280      	uxth	r0, r0
 801e888:	fa1f f888 	uxth.w	r8, r8
 801e88c:	1a12      	subs	r2, r2, r0
 801e88e:	fb08 f101 	mul.w	r1, r8, r1
 801e892:	b292      	uxth	r2, r2
 801e894:	fb02 110c 	mla	r1, r2, ip, r1
 801e898:	fb00 1104 	mla	r1, r0, r4, r1
 801e89c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e89e:	fb09 1104 	mla	r1, r9, r4, r1
 801e8a2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e8a6:	2900      	cmp	r1, #0
 801e8a8:	f000 80ec 	beq.w	801ea84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801e8ac:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e8b0:	d019      	beq.n	801e8e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801e8b2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e8b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e8ba:	fb0c fa0a 	mul.w	sl, ip, sl
 801e8be:	fb0c fc03 	mul.w	ip, ip, r3
 801e8c2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e8c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e8ca:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e8ce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e8d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e8d6:	4453      	add	r3, sl
 801e8d8:	0a3f      	lsrs	r7, r7, #8
 801e8da:	0a1b      	lsrs	r3, r3, #8
 801e8dc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e8e0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e8e4:	433b      	orrs	r3, r7
 801e8e6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e8e8:	2cff      	cmp	r4, #255	@ 0xff
 801e8ea:	d020      	beq.n	801e92e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801e8ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e8ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e8f2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e8f4:	4367      	muls	r7, r4
 801e8f6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e8f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e8fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e900:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e902:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e906:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e90a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e90e:	44bc      	add	ip, r7
 801e910:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e918:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e91c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e920:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e924:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e928:	ea4c 040a 	orr.w	r4, ip, sl
 801e92c:	940e      	str	r4, [sp, #56]	@ 0x38
 801e92e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e930:	2cff      	cmp	r4, #255	@ 0xff
 801e932:	d020      	beq.n	801e976 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801e934:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e936:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e93a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e93c:	4367      	muls	r7, r4
 801e93e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e940:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e944:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e948:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e94a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e94e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e952:	fb04 fa0a 	mul.w	sl, r4, sl
 801e956:	44bc      	add	ip, r7
 801e958:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e95c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e960:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e964:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e968:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e96c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e970:	ea4c 040a 	orr.w	r4, ip, sl
 801e974:	9409      	str	r4, [sp, #36]	@ 0x24
 801e976:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e978:	2cff      	cmp	r4, #255	@ 0xff
 801e97a:	d020      	beq.n	801e9be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801e97c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e97e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e982:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e984:	4367      	muls	r7, r4
 801e986:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e988:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e98c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e990:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e992:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e996:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e99a:	fb04 fa0a 	mul.w	sl, r4, sl
 801e99e:	44bc      	add	ip, r7
 801e9a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e9a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e9b8:	ea4c 040a 	orr.w	r4, ip, sl
 801e9bc:	940f      	str	r4, [sp, #60]	@ 0x3c
 801e9be:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e9c0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e9c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e9c8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e9cc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e9ce:	fb08 f707 	mul.w	r7, r8, r7
 801e9d2:	fb02 770c 	mla	r7, r2, ip, r7
 801e9d6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e9da:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e9dc:	fb00 770c 	mla	r7, r0, ip, r7
 801e9e0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e9e4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e9e6:	fb09 770c 	mla	r7, r9, ip, r7
 801e9ea:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e9ee:	fb08 f80c 	mul.w	r8, r8, ip
 801e9f2:	0a3f      	lsrs	r7, r7, #8
 801e9f4:	fb02 8303 	mla	r3, r2, r3, r8
 801e9f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9fa:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e9fe:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ea02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ea04:	fb00 330a 	mla	r3, r0, sl, r3
 801ea08:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ea0c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ea0e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ea12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea18:	434b      	muls	r3, r1
 801ea1a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ea1e:	1c59      	adds	r1, r3, #1
 801ea20:	ea47 070c 	orr.w	r7, r7, ip
 801ea24:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ea28:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ea2c:	b2fa      	uxtb	r2, r7
 801ea2e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ea32:	fb12 f200 	smulbb	r2, r2, r0
 801ea36:	b2c9      	uxtb	r1, r1
 801ea38:	fb03 2301 	mla	r3, r3, r1, r2
 801ea3c:	b29b      	uxth	r3, r3
 801ea3e:	1c5a      	adds	r2, r3, #1
 801ea40:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ea44:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ea48:	fb12 f201 	smulbb	r2, r2, r1
 801ea4c:	121b      	asrs	r3, r3, #8
 801ea4e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ea52:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ea56:	0c3f      	lsrs	r7, r7, #16
 801ea58:	fb03 2300 	mla	r3, r3, r0, r2
 801ea5c:	b29b      	uxth	r3, r3
 801ea5e:	1c5a      	adds	r2, r3, #1
 801ea60:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ea64:	121b      	asrs	r3, r3, #8
 801ea66:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ea6a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ea6e:	fb13 f101 	smulbb	r1, r3, r1
 801ea72:	fb07 1700 	mla	r7, r7, r0, r1
 801ea76:	b2bf      	uxth	r7, r7
 801ea78:	1c79      	adds	r1, r7, #1
 801ea7a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ea7e:	123f      	asrs	r7, r7, #8
 801ea80:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ea84:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ea86:	f10e 0e03 	add.w	lr, lr, #3
 801ea8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea8e:	441d      	add	r5, r3
 801ea90:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ea92:	441e      	add	r6, r3
 801ea94:	e64e      	b.n	801e734 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801ea96:	2800      	cmp	r0, #0
 801ea98:	f43f aee8 	beq.w	801e86c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ea9c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801eaa0:	9209      	str	r2, [sp, #36]	@ 0x24
 801eaa2:	0e12      	lsrs	r2, r2, #24
 801eaa4:	9212      	str	r2, [sp, #72]	@ 0x48
 801eaa6:	e6e1      	b.n	801e86c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801eaa8:	b01d      	add	sp, #116	@ 0x74
 801eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eaae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801eaae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eab2:	b087      	sub	sp, #28
 801eab4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801eab8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801eabc:	fb05 7003 	mla	r0, r5, r3, r7
 801eac0:	2d00      	cmp	r5, #0
 801eac2:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801eac6:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801eaca:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801eace:	f2c0 810a 	blt.w	801ece6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801ead2:	45a8      	cmp	r8, r5
 801ead4:	f340 8107 	ble.w	801ece6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801ead8:	2f00      	cmp	r7, #0
 801eada:	f2c0 8102 	blt.w	801ece2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801eade:	42bb      	cmp	r3, r7
 801eae0:	f340 80ff 	ble.w	801ece2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801eae4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801eae8:	1c7a      	adds	r2, r7, #1
 801eaea:	f100 80ff 	bmi.w	801ecec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801eaee:	4293      	cmp	r3, r2
 801eaf0:	f340 80fc 	ble.w	801ecec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801eaf4:	2c00      	cmp	r4, #0
 801eaf6:	f000 80fb 	beq.w	801ecf0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801eafa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801eafe:	3501      	adds	r5, #1
 801eb00:	f100 80fa 	bmi.w	801ecf8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801eb04:	45a8      	cmp	r8, r5
 801eb06:	f340 80f7 	ble.w	801ecf8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801eb0a:	f1be 0f00 	cmp.w	lr, #0
 801eb0e:	f000 80f6 	beq.w	801ecfe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801eb12:	2f00      	cmp	r7, #0
 801eb14:	f2c0 80ee 	blt.w	801ecf4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801eb18:	42bb      	cmp	r3, r7
 801eb1a:	f340 80eb 	ble.w	801ecf4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801eb1e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801eb22:	3701      	adds	r7, #1
 801eb24:	f100 80ee 	bmi.w	801ed04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801eb28:	42bb      	cmp	r3, r7
 801eb2a:	f340 80eb 	ble.w	801ed04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801eb2e:	2c00      	cmp	r4, #0
 801eb30:	f000 80ea 	beq.w	801ed08 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801eb34:	3301      	adds	r3, #1
 801eb36:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801eb3a:	fa1f fc84 	uxth.w	ip, r4
 801eb3e:	fa1f fe8e 	uxth.w	lr, lr
 801eb42:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801eb46:	fb0c f90e 	mul.w	r9, ip, lr
 801eb4a:	0e13      	lsrs	r3, r2, #24
 801eb4c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801eb50:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801eb54:	9302      	str	r3, [sp, #8]
 801eb56:	ebac 0709 	sub.w	r7, ip, r9
 801eb5a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801eb5e:	fa1f f48e 	uxth.w	r4, lr
 801eb62:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801eb66:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801eb6a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801eb6e:	fb0a fe0e 	mul.w	lr, sl, lr
 801eb72:	1b1b      	subs	r3, r3, r4
 801eb74:	fb0a f606 	mul.w	r6, sl, r6
 801eb78:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801eb7c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801eb80:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801eb84:	b29b      	uxth	r3, r3
 801eb86:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801eb8a:	b2bf      	uxth	r7, r7
 801eb8c:	9301      	str	r3, [sp, #4]
 801eb8e:	44e6      	add	lr, ip
 801eb90:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801eb94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb98:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801eb9c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801eba0:	9303      	str	r3, [sp, #12]
 801eba2:	0a33      	lsrs	r3, r6, #8
 801eba4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801eba8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ebac:	9304      	str	r3, [sp, #16]
 801ebae:	fb0b f606 	mul.w	r6, fp, r6
 801ebb2:	fb0b f000 	mul.w	r0, fp, r0
 801ebb6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ebba:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ebbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ebc2:	44b6      	add	lr, r6
 801ebc4:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ebc8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ebcc:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ebd0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ebd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ebd8:	fb08 f606 	mul.w	r6, r8, r6
 801ebdc:	0a03      	lsrs	r3, r0, #8
 801ebde:	fb08 f505 	mul.w	r5, r8, r5
 801ebe2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ebe6:	0a30      	lsrs	r0, r6, #8
 801ebe8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ebec:	9305      	str	r3, [sp, #20]
 801ebee:	0e13      	lsrs	r3, r2, #24
 801ebf0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ebf4:	fb0e fe07 	mul.w	lr, lr, r7
 801ebf8:	4430      	add	r0, r6
 801ebfa:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801ebfe:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801ec02:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801ec06:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ec0a:	0a00      	lsrs	r0, r0, #8
 801ec0c:	435e      	muls	r6, r3
 801ec0e:	0a2d      	lsrs	r5, r5, #8
 801ec10:	435a      	muls	r2, r3
 801ec12:	9b03      	ldr	r3, [sp, #12]
 801ec14:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801ec18:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ec1c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801ec20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ec24:	44b4      	add	ip, r6
 801ec26:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801ec2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec2e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801ec32:	9e01      	ldr	r6, [sp, #4]
 801ec34:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ec38:	fb03 ee06 	mla	lr, r3, r6, lr
 801ec3c:	9b04      	ldr	r3, [sp, #16]
 801ec3e:	0a12      	lsrs	r2, r2, #8
 801ec40:	fb0c ee09 	mla	lr, ip, r9, lr
 801ec44:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801ec48:	9b05      	ldr	r3, [sp, #20]
 801ec4a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ec4e:	fb00 ee04 	mla	lr, r0, r4, lr
 801ec52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec56:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801ec5a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ec5e:	9b01      	ldr	r3, [sp, #4]
 801ec60:	fb07 fe0e 	mul.w	lr, r7, lr
 801ec64:	fb07 f70b 	mul.w	r7, r7, fp
 801ec68:	fb03 ee06 	mla	lr, r3, r6, lr
 801ec6c:	fb03 730a 	mla	r3, r3, sl, r7
 801ec70:	fb09 e202 	mla	r2, r9, r2, lr
 801ec74:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801ec78:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ec7c:	fb04 3408 	mla	r4, r4, r8, r3
 801ec80:	9b02      	ldr	r3, [sp, #8]
 801ec82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec86:	fb09 4903 	mla	r9, r9, r3, r4
 801ec8a:	780b      	ldrb	r3, [r1, #0]
 801ec8c:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ec90:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ec94:	ea40 0e0e 	orr.w	lr, r0, lr
 801ec98:	fa5f f989 	uxtb.w	r9, r9
 801ec9c:	fb03 f209 	mul.w	r2, r3, r9
 801eca0:	1c53      	adds	r3, r2, #1
 801eca2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801eca6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ecaa:	700b      	strb	r3, [r1, #0]
 801ecac:	784b      	ldrb	r3, [r1, #1]
 801ecae:	fb03 f309 	mul.w	r3, r3, r9
 801ecb2:	1c5a      	adds	r2, r3, #1
 801ecb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ecb8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ecbc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ecc0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ecc4:	704b      	strb	r3, [r1, #1]
 801ecc6:	788b      	ldrb	r3, [r1, #2]
 801ecc8:	fb03 f909 	mul.w	r9, r3, r9
 801eccc:	f109 0301 	add.w	r3, r9, #1
 801ecd0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ecd4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801ecd8:	f881 e002 	strb.w	lr, [r1, #2]
 801ecdc:	b007      	add	sp, #28
 801ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ece2:	2600      	movs	r6, #0
 801ece4:	e700      	b.n	801eae8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801ece6:	2000      	movs	r0, #0
 801ece8:	4606      	mov	r6, r0
 801ecea:	e708      	b.n	801eafe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ecec:	2000      	movs	r0, #0
 801ecee:	e706      	b.n	801eafe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	e704      	b.n	801eafe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801ecf4:	2500      	movs	r5, #0
 801ecf6:	e714      	b.n	801eb22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801ecf8:	2200      	movs	r2, #0
 801ecfa:	4615      	mov	r5, r2
 801ecfc:	e71d      	b.n	801eb3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ecfe:	4672      	mov	r2, lr
 801ed00:	4675      	mov	r5, lr
 801ed02:	e71a      	b.n	801eb3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ed04:	2200      	movs	r2, #0
 801ed06:	e718      	b.n	801eb3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801ed08:	4622      	mov	r2, r4
 801ed0a:	e716      	b.n	801eb3a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801ed0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed10:	b099      	sub	sp, #100	@ 0x64
 801ed12:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801ed16:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801ed18:	9017      	str	r0, [sp, #92]	@ 0x5c
 801ed1a:	9306      	str	r3, [sp, #24]
 801ed1c:	6850      	ldr	r0, [r2, #4]
 801ed1e:	6812      	ldr	r2, [r2, #0]
 801ed20:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801ed24:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801ed28:	fb00 1303 	mla	r3, r0, r3, r1
 801ed2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed30:	18d3      	adds	r3, r2, r3
 801ed32:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed34:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	dc03      	bgt.n	801ed48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ed40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	f340 8360 	ble.w	801f408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ed48:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ed4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ed52:	1e48      	subs	r0, r1, #1
 801ed54:	1e57      	subs	r7, r2, #1
 801ed56:	9b06      	ldr	r3, [sp, #24]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	f340 817b 	ble.w	801f054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801ed5e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ed62:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ed66:	d406      	bmi.n	801ed76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ed68:	4584      	cmp	ip, r0
 801ed6a:	da04      	bge.n	801ed76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	db02      	blt.n	801ed76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ed70:	42bb      	cmp	r3, r7
 801ed72:	f2c0 8170 	blt.w	801f056 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ed76:	f11c 0c01 	adds.w	ip, ip, #1
 801ed7a:	f100 8160 	bmi.w	801f03e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ed7e:	4561      	cmp	r1, ip
 801ed80:	f2c0 815d 	blt.w	801f03e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ed84:	3301      	adds	r3, #1
 801ed86:	f100 815a 	bmi.w	801f03e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ed8a:	429a      	cmp	r2, r3
 801ed8c:	f2c0 8157 	blt.w	801f03e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ed90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ed94:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ed96:	f1b8 0f00 	cmp.w	r8, #0
 801ed9a:	f340 8179 	ble.w	801f090 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ed9e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801eda0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801eda4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801eda6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801edaa:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801edae:	142a      	asrs	r2, r5, #16
 801edb0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801edb4:	689b      	ldr	r3, [r3, #8]
 801edb6:	f100 81be 	bmi.w	801f136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801edba:	f103 39ff 	add.w	r9, r3, #4294967295
 801edbe:	454a      	cmp	r2, r9
 801edc0:	f280 81b9 	bge.w	801f136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801edc4:	f1bc 0f00 	cmp.w	ip, #0
 801edc8:	f2c0 81b5 	blt.w	801f136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801edcc:	f10e 39ff 	add.w	r9, lr, #4294967295
 801edd0:	45cc      	cmp	ip, r9
 801edd2:	f280 81b0 	bge.w	801f136 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801edd6:	b21b      	sxth	r3, r3
 801edd8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801edda:	fb0c 2203 	mla	r2, ip, r3, r2
 801edde:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ede2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ede6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801edea:	2900      	cmp	r1, #0
 801edec:	f000 8197 	beq.w	801f11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801edf0:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801edf4:	940a      	str	r4, [sp, #40]	@ 0x28
 801edf6:	0e24      	lsrs	r4, r4, #24
 801edf8:	9411      	str	r4, [sp, #68]	@ 0x44
 801edfa:	b180      	cbz	r0, 801ee1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801edfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ee00:	3b01      	subs	r3, #1
 801ee02:	009b      	lsls	r3, r3, #2
 801ee04:	3304      	adds	r3, #4
 801ee06:	eb09 0c03 	add.w	ip, r9, r3
 801ee0a:	f859 3003 	ldr.w	r3, [r9, r3]
 801ee0e:	9307      	str	r3, [sp, #28]
 801ee10:	0e1b      	lsrs	r3, r3, #24
 801ee12:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ee14:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ee18:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee1a:	0e1b      	lsrs	r3, r3, #24
 801ee1c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee1e:	b289      	uxth	r1, r1
 801ee20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ee22:	b280      	uxth	r0, r0
 801ee24:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ee26:	fb01 fa00 	mul.w	sl, r1, r0
 801ee2a:	0109      	lsls	r1, r1, #4
 801ee2c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ee30:	eba1 090a 	sub.w	r9, r1, sl
 801ee34:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ee38:	b280      	uxth	r0, r0
 801ee3a:	fa1f f989 	uxth.w	r9, r9
 801ee3e:	1a09      	subs	r1, r1, r0
 801ee40:	fb09 f303 	mul.w	r3, r9, r3
 801ee44:	b289      	uxth	r1, r1
 801ee46:	fb01 330e 	mla	r3, r1, lr, r3
 801ee4a:	fb00 3304 	mla	r3, r0, r4, r3
 801ee4e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ee50:	fb0a 3304 	mla	r3, sl, r4, r3
 801ee54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ee58:	2b00      	cmp	r3, #0
 801ee5a:	f000 80e8 	beq.w	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ee5e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ee62:	d01b      	beq.n	801ee9c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ee64:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801ee68:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ee6c:	fb0e fb0b 	mul.w	fp, lr, fp
 801ee70:	fb0e fe02 	mul.w	lr, lr, r2
 801ee74:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ee78:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ee7c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ee80:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ee84:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ee88:	445a      	add	r2, fp
 801ee8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee8e:	0a12      	lsrs	r2, r2, #8
 801ee90:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ee94:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ee98:	ea42 020c 	orr.w	r2, r2, ip
 801ee9c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ee9e:	2cff      	cmp	r4, #255	@ 0xff
 801eea0:	d021      	beq.n	801eee6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801eea2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eea4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eea8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eeaa:	fb04 fc0c 	mul.w	ip, r4, ip
 801eeae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eeb0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801eeb4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801eeb8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801eeba:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801eebe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eec2:	fb04 fb0b 	mul.w	fp, r4, fp
 801eec6:	44e6      	add	lr, ip
 801eec8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801eecc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eed0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801eed4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801eed8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801eedc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801eee0:	ea4e 040b 	orr.w	r4, lr, fp
 801eee4:	940a      	str	r4, [sp, #40]	@ 0x28
 801eee6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801eee8:	2cff      	cmp	r4, #255	@ 0xff
 801eeea:	d021      	beq.n	801ef30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801eeec:	9c07      	ldr	r4, [sp, #28]
 801eeee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eef2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801eef4:	fb04 fc0c 	mul.w	ip, r4, ip
 801eef8:	9c07      	ldr	r4, [sp, #28]
 801eefa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801eefe:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ef02:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ef04:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ef08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef0c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ef10:	44e6      	add	lr, ip
 801ef12:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ef16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef1a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ef1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef22:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ef26:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ef2a:	ea4e 040b 	orr.w	r4, lr, fp
 801ef2e:	9407      	str	r4, [sp, #28]
 801ef30:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ef32:	2cff      	cmp	r4, #255	@ 0xff
 801ef34:	d021      	beq.n	801ef7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ef36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef38:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ef3c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ef3e:	fb04 fc0c 	mul.w	ip, r4, ip
 801ef42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ef48:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ef4c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ef4e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ef52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef56:	fb04 fb0b 	mul.w	fp, r4, fp
 801ef5a:	44e6      	add	lr, ip
 801ef5c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ef60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ef64:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ef68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ef6c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ef70:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ef74:	ea4e 040b 	orr.w	r4, lr, fp
 801ef78:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ef7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ef7c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801ef80:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ef84:	2bff      	cmp	r3, #255	@ 0xff
 801ef86:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ef8a:	9c07      	ldr	r4, [sp, #28]
 801ef8c:	fb09 fc0c 	mul.w	ip, r9, ip
 801ef90:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ef94:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ef98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ef9a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ef9e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801efa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801efa4:	fb0a cc0e 	mla	ip, sl, lr, ip
 801efa8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801efac:	fb09 f90e 	mul.w	r9, r9, lr
 801efb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801efb4:	fb01 9202 	mla	r2, r1, r2, r9
 801efb8:	9907      	ldr	r1, [sp, #28]
 801efba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801efbe:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801efc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efc4:	fb00 220b 	mla	r2, r0, fp, r2
 801efc8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801efcc:	fb0a 2a00 	mla	sl, sl, r0, r2
 801efd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801efd4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801efd8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801efdc:	fa5f f08c 	uxtb.w	r0, ip
 801efe0:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801efe4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801efe8:	f000 80a2 	beq.w	801f130 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801efec:	43db      	mvns	r3, r3
 801efee:	783a      	ldrb	r2, [r7, #0]
 801eff0:	f897 a002 	ldrb.w	sl, [r7, #2]
 801eff4:	b2db      	uxtb	r3, r3
 801eff6:	fb02 fe03 	mul.w	lr, r2, r3
 801effa:	fb0a fa03 	mul.w	sl, sl, r3
 801effe:	f10e 0201 	add.w	r2, lr, #1
 801f002:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801f006:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f00a:	703a      	strb	r2, [r7, #0]
 801f00c:	787a      	ldrb	r2, [r7, #1]
 801f00e:	fb02 f003 	mul.w	r0, r2, r3
 801f012:	f10a 0301 	add.w	r3, sl, #1
 801f016:	1c42      	adds	r2, r0, #1
 801f018:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801f01c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801f020:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f024:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f028:	707a      	strb	r2, [r7, #1]
 801f02a:	f887 c002 	strb.w	ip, [r7, #2]
 801f02e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f030:	3703      	adds	r7, #3
 801f032:	f108 38ff 	add.w	r8, r8, #4294967295
 801f036:	441d      	add	r5, r3
 801f038:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f03a:	441e      	add	r6, r3
 801f03c:	e6ab      	b.n	801ed96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f03e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f040:	441d      	add	r5, r3
 801f042:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f044:	441e      	add	r6, r3
 801f046:	9b06      	ldr	r3, [sp, #24]
 801f048:	3b01      	subs	r3, #1
 801f04a:	9306      	str	r3, [sp, #24]
 801f04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f04e:	3303      	adds	r3, #3
 801f050:	9309      	str	r3, [sp, #36]	@ 0x24
 801f052:	e680      	b.n	801ed56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f054:	d024      	beq.n	801f0a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801f056:	9b06      	ldr	r3, [sp, #24]
 801f058:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801f05a:	3b01      	subs	r3, #1
 801f05c:	fb00 5003 	mla	r0, r0, r3, r5
 801f060:	1400      	asrs	r0, r0, #16
 801f062:	f53f ae95 	bmi.w	801ed90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f066:	3901      	subs	r1, #1
 801f068:	4288      	cmp	r0, r1
 801f06a:	f6bf ae91 	bge.w	801ed90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f06e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801f070:	fb01 6303 	mla	r3, r1, r3, r6
 801f074:	141b      	asrs	r3, r3, #16
 801f076:	f53f ae8b 	bmi.w	801ed90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f07a:	3a01      	subs	r2, #1
 801f07c:	4293      	cmp	r3, r2
 801f07e:	f6bf ae87 	bge.w	801ed90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f084:	f8dd b018 	ldr.w	fp, [sp, #24]
 801f088:	1cdf      	adds	r7, r3, #3
 801f08a:	f1bb 0f00 	cmp.w	fp, #0
 801f08e:	dc6e      	bgt.n	801f16e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801f090:	9b06      	ldr	r3, [sp, #24]
 801f092:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f098:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f09c:	4423      	add	r3, r4
 801f09e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f0a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	f340 81b0 	ble.w	801f408 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801f0a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f0ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f0ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0b6:	eef0 6a62 	vmov.f32	s13, s5
 801f0ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f0be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0c6:	ee16 5a90 	vmov	r5, s13
 801f0ca:	eef0 6a43 	vmov.f32	s13, s6
 801f0ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f0d2:	ee16 6a90 	vmov	r6, s13
 801f0d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0ee:	ee12 2a90 	vmov	r2, s5
 801f0f2:	eef0 2a47 	vmov.f32	s5, s14
 801f0f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0fa:	ee13 2a10 	vmov	r2, s6
 801f0fe:	9325      	str	r3, [sp, #148]	@ 0x94
 801f100:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f102:	eeb0 3a67 	vmov.f32	s6, s15
 801f106:	fb92 f3f3 	sdiv	r3, r2, r3
 801f10a:	9326      	str	r3, [sp, #152]	@ 0x98
 801f10c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f10e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f110:	3b01      	subs	r3, #1
 801f112:	9315      	str	r3, [sp, #84]	@ 0x54
 801f114:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f116:	bf08      	it	eq
 801f118:	4613      	moveq	r3, r2
 801f11a:	9306      	str	r3, [sp, #24]
 801f11c:	e60d      	b.n	801ed3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f11e:	2800      	cmp	r0, #0
 801f120:	f43f ae7d 	beq.w	801ee1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f124:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f128:	9307      	str	r3, [sp, #28]
 801f12a:	0e1b      	lsrs	r3, r3, #24
 801f12c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f12e:	e676      	b.n	801ee1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f130:	7038      	strb	r0, [r7, #0]
 801f132:	7079      	strb	r1, [r7, #1]
 801f134:	e779      	b.n	801f02a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801f136:	f112 0901 	adds.w	r9, r2, #1
 801f13a:	f53f af78 	bmi.w	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f13e:	454b      	cmp	r3, r9
 801f140:	f6ff af75 	blt.w	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f144:	f11c 0901 	adds.w	r9, ip, #1
 801f148:	f53f af71 	bmi.w	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f14c:	45ce      	cmp	lr, r9
 801f14e:	f6ff af6e 	blt.w	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f152:	b21b      	sxth	r3, r3
 801f154:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801f158:	fa0f f28e 	sxth.w	r2, lr
 801f15c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801f160:	9200      	str	r2, [sp, #0]
 801f162:	4639      	mov	r1, r7
 801f164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f166:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801f168:	f7ff fca1 	bl	801eaae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801f16c:	e75f      	b.n	801f02e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801f16e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801f170:	1429      	asrs	r1, r5, #16
 801f172:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f174:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f178:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801f17c:	1433      	asrs	r3, r6, #16
 801f17e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f182:	fb0c 1303 	mla	r3, ip, r3, r1
 801f186:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f188:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f18c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801f190:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f194:	2a00      	cmp	r2, #0
 801f196:	f000 8129 	beq.w	801f3ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801f19a:	684c      	ldr	r4, [r1, #4]
 801f19c:	940c      	str	r4, [sp, #48]	@ 0x30
 801f19e:	0e24      	lsrs	r4, r4, #24
 801f1a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801f1a2:	b198      	cbz	r0, 801f1cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f1a4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801f1a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f1ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801f1b0:	f10c 0c04 	add.w	ip, ip, #4
 801f1b4:	eb01 080c 	add.w	r8, r1, ip
 801f1b8:	f851 100c 	ldr.w	r1, [r1, ip]
 801f1bc:	9108      	str	r1, [sp, #32]
 801f1be:	0e09      	lsrs	r1, r1, #24
 801f1c0:	9110      	str	r1, [sp, #64]	@ 0x40
 801f1c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f1c6:	910d      	str	r1, [sp, #52]	@ 0x34
 801f1c8:	0e09      	lsrs	r1, r1, #24
 801f1ca:	9114      	str	r1, [sp, #80]	@ 0x50
 801f1cc:	b292      	uxth	r2, r2
 801f1ce:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f1d0:	b280      	uxth	r0, r0
 801f1d2:	fb02 f900 	mul.w	r9, r2, r0
 801f1d6:	0112      	lsls	r2, r2, #4
 801f1d8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801f1dc:	eba2 0809 	sub.w	r8, r2, r9
 801f1e0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801f1e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f1e6:	b280      	uxth	r0, r0
 801f1e8:	fa1f f888 	uxth.w	r8, r8
 801f1ec:	1a09      	subs	r1, r1, r0
 801f1ee:	fb08 f202 	mul.w	r2, r8, r2
 801f1f2:	b289      	uxth	r1, r1
 801f1f4:	fb01 220e 	mla	r2, r1, lr, r2
 801f1f8:	fb00 2204 	mla	r2, r0, r4, r2
 801f1fc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f1fe:	fb09 2204 	mla	r2, r9, r4, r2
 801f202:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f206:	2a00      	cmp	r2, #0
 801f208:	f000 80e8 	beq.w	801f3dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801f20c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f210:	d01b      	beq.n	801f24a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801f212:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f216:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f21a:	fb0e fa0a 	mul.w	sl, lr, sl
 801f21e:	fb0e fe03 	mul.w	lr, lr, r3
 801f222:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f226:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f22a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f22e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f232:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f236:	4453      	add	r3, sl
 801f238:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f23c:	0a1b      	lsrs	r3, r3, #8
 801f23e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f242:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f246:	ea43 030c 	orr.w	r3, r3, ip
 801f24a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f24c:	2cff      	cmp	r4, #255	@ 0xff
 801f24e:	d021      	beq.n	801f294 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f250:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f252:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f256:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f258:	fb04 fc0c 	mul.w	ip, r4, ip
 801f25c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f25e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f262:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f266:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f268:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f26c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f270:	fb04 fa0a 	mul.w	sl, r4, sl
 801f274:	44e6      	add	lr, ip
 801f276:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f27a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f27e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f282:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f286:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f28a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f28e:	ea4e 040a 	orr.w	r4, lr, sl
 801f292:	940c      	str	r4, [sp, #48]	@ 0x30
 801f294:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f296:	2cff      	cmp	r4, #255	@ 0xff
 801f298:	d021      	beq.n	801f2de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f29a:	9c08      	ldr	r4, [sp, #32]
 801f29c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f2a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f2a2:	fb04 fc0c 	mul.w	ip, r4, ip
 801f2a6:	9c08      	ldr	r4, [sp, #32]
 801f2a8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f2ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f2ae:	fb04 fa0e 	mul.w	sl, r4, lr
 801f2b2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f2b6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f2ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f2be:	44e6      	add	lr, ip
 801f2c0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f2c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f2c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f2cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f2d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f2d4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f2d8:	ea4e 040a 	orr.w	r4, lr, sl
 801f2dc:	9408      	str	r4, [sp, #32]
 801f2de:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f2e0:	2cff      	cmp	r4, #255	@ 0xff
 801f2e2:	d021      	beq.n	801f328 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f2e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f2e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f2ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f2ec:	fb04 fc0c 	mul.w	ip, r4, ip
 801f2f0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f2f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f2f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f2fa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f2fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f300:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f304:	fb04 fa0a 	mul.w	sl, r4, sl
 801f308:	44e6      	add	lr, ip
 801f30a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f30e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f312:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f316:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f31a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f31e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f322:	ea4e 040a 	orr.w	r4, lr, sl
 801f326:	940d      	str	r4, [sp, #52]	@ 0x34
 801f328:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f32a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801f32e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f332:	2aff      	cmp	r2, #255	@ 0xff
 801f334:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f338:	9c08      	ldr	r4, [sp, #32]
 801f33a:	fb08 fc0c 	mul.w	ip, r8, ip
 801f33e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f342:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f346:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f348:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f34c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f350:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f352:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f356:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f35a:	fb08 f80e 	mul.w	r8, r8, lr
 801f35e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f362:	fb01 8303 	mla	r3, r1, r3, r8
 801f366:	9908      	ldr	r1, [sp, #32]
 801f368:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f36c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f370:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f372:	fb00 330a 	mla	r3, r0, sl, r3
 801f376:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801f37a:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f37e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f382:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f386:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f38a:	fa5f f08c 	uxtb.w	r0, ip
 801f38e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f392:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f396:	d032      	beq.n	801f3fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f398:	43d2      	mvns	r2, r2
 801f39a:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f39e:	b2d2      	uxtb	r2, r2
 801f3a0:	fb0e fe02 	mul.w	lr, lr, r2
 801f3a4:	f10e 0301 	add.w	r3, lr, #1
 801f3a8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f3ac:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f3b0:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f3b4:	4350      	muls	r0, r2
 801f3b6:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f3ba:	1c43      	adds	r3, r0, #1
 801f3bc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f3c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f3c4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f3c8:	4353      	muls	r3, r2
 801f3ca:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f3ce:	1c5a      	adds	r2, r3, #1
 801f3d0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f3d4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f3d8:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f3dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f3de:	3703      	adds	r7, #3
 801f3e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f3e4:	441d      	add	r5, r3
 801f3e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f3e8:	441e      	add	r6, r3
 801f3ea:	e64e      	b.n	801f08a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f3ec:	2800      	cmp	r0, #0
 801f3ee:	f43f aeed 	beq.w	801f1cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f3f2:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f3f6:	9108      	str	r1, [sp, #32]
 801f3f8:	0e09      	lsrs	r1, r1, #24
 801f3fa:	9110      	str	r1, [sp, #64]	@ 0x40
 801f3fc:	e6e6      	b.n	801f1cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f3fe:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f402:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f406:	e7e7      	b.n	801f3d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f408:	b019      	add	sp, #100	@ 0x64
 801f40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f410 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f414:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801f418:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f41c:	2c00      	cmp	r4, #0
 801f41e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801f422:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801f426:	fb00 4e03 	mla	lr, r0, r3, r4
 801f42a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801f42e:	f2c0 80b8 	blt.w	801f5a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f432:	45a1      	cmp	r9, r4
 801f434:	f340 80b5 	ble.w	801f5a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f438:	2800      	cmp	r0, #0
 801f43a:	f2c0 80b2 	blt.w	801f5a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f43e:	4580      	cmp	r8, r0
 801f440:	f340 80af 	ble.w	801f5a2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f444:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801f448:	f01e 0f01 	tst.w	lr, #1
 801f44c:	5d56      	ldrb	r6, [r2, r5]
 801f44e:	bf0c      	ite	eq
 801f450:	f006 060f 	andeq.w	r6, r6, #15
 801f454:	1136      	asrne	r6, r6, #4
 801f456:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f45a:	b2f6      	uxtb	r6, r6
 801f45c:	f114 0a01 	adds.w	sl, r4, #1
 801f460:	f100 80a1 	bmi.w	801f5a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f464:	45d1      	cmp	r9, sl
 801f466:	f340 809e 	ble.w	801f5a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f46a:	2800      	cmp	r0, #0
 801f46c:	f2c0 809b 	blt.w	801f5a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f470:	4580      	cmp	r8, r0
 801f472:	f340 8098 	ble.w	801f5a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f476:	2f00      	cmp	r7, #0
 801f478:	f000 8097 	beq.w	801f5aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801f47c:	f10e 0b01 	add.w	fp, lr, #1
 801f480:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f484:	f01b 0f01 	tst.w	fp, #1
 801f488:	5d55      	ldrb	r5, [r2, r5]
 801f48a:	bf0c      	ite	eq
 801f48c:	f005 050f 	andeq.w	r5, r5, #15
 801f490:	112d      	asrne	r5, r5, #4
 801f492:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f496:	b2ed      	uxtb	r5, r5
 801f498:	f1bc 0f00 	cmp.w	ip, #0
 801f49c:	f000 8089 	beq.w	801f5b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801f4a0:	2c00      	cmp	r4, #0
 801f4a2:	f100 0001 	add.w	r0, r0, #1
 801f4a6:	f2c0 8082 	blt.w	801f5ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f4aa:	45a1      	cmp	r9, r4
 801f4ac:	dd7f      	ble.n	801f5ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f4ae:	2800      	cmp	r0, #0
 801f4b0:	db7d      	blt.n	801f5ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f4b2:	4580      	cmp	r8, r0
 801f4b4:	dd7b      	ble.n	801f5ae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f4b6:	eb03 0b0e 	add.w	fp, r3, lr
 801f4ba:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f4be:	f01b 0f01 	tst.w	fp, #1
 801f4c2:	5d14      	ldrb	r4, [r2, r4]
 801f4c4:	bf0c      	ite	eq
 801f4c6:	f004 040f 	andeq.w	r4, r4, #15
 801f4ca:	1124      	asrne	r4, r4, #4
 801f4cc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f4d0:	b2e4      	uxtb	r4, r4
 801f4d2:	f1ba 0f00 	cmp.w	sl, #0
 801f4d6:	db6f      	blt.n	801f5b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f4d8:	45d1      	cmp	r9, sl
 801f4da:	dd6d      	ble.n	801f5b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f4dc:	2800      	cmp	r0, #0
 801f4de:	db6b      	blt.n	801f5b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f4e0:	4580      	cmp	r8, r0
 801f4e2:	dd69      	ble.n	801f5b8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f4e4:	2f00      	cmp	r7, #0
 801f4e6:	d069      	beq.n	801f5bc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801f4e8:	3301      	adds	r3, #1
 801f4ea:	449e      	add	lr, r3
 801f4ec:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f4f0:	f01e 0f01 	tst.w	lr, #1
 801f4f4:	5cd0      	ldrb	r0, [r2, r3]
 801f4f6:	bf0c      	ite	eq
 801f4f8:	f000 000f 	andeq.w	r0, r0, #15
 801f4fc:	1100      	asrne	r0, r0, #4
 801f4fe:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f502:	b2c3      	uxtb	r3, r0
 801f504:	b2ba      	uxth	r2, r7
 801f506:	fa1f fc8c 	uxth.w	ip, ip
 801f50a:	fb02 f00c 	mul.w	r0, r2, ip
 801f50e:	0112      	lsls	r2, r2, #4
 801f510:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801f514:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f518:	1a12      	subs	r2, r2, r0
 801f51a:	fa1f fc8c 	uxth.w	ip, ip
 801f51e:	b292      	uxth	r2, r2
 801f520:	eba7 070c 	sub.w	r7, r7, ip
 801f524:	436a      	muls	r2, r5
 801f526:	b2bf      	uxth	r7, r7
 801f528:	fb06 2207 	mla	r2, r6, r7, r2
 801f52c:	fb0c 2404 	mla	r4, ip, r4, r2
 801f530:	fb00 4303 	mla	r3, r0, r3, r4
 801f534:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f538:	b38b      	cbz	r3, 801f59e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801f53a:	4a21      	ldr	r2, [pc, #132]	@ (801f5c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801f53c:	6814      	ldr	r4, [r2, #0]
 801f53e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801f542:	b2e5      	uxtb	r5, r4
 801f544:	4353      	muls	r3, r2
 801f546:	1c5a      	adds	r2, r3, #1
 801f548:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f54c:	1212      	asrs	r2, r2, #8
 801f54e:	b290      	uxth	r0, r2
 801f550:	43d2      	mvns	r2, r2
 801f552:	fb15 f500 	smulbb	r5, r5, r0
 801f556:	b2d3      	uxtb	r3, r2
 801f558:	780a      	ldrb	r2, [r1, #0]
 801f55a:	fb02 5203 	mla	r2, r2, r3, r5
 801f55e:	b292      	uxth	r2, r2
 801f560:	1c55      	adds	r5, r2, #1
 801f562:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f566:	784d      	ldrb	r5, [r1, #1]
 801f568:	fb15 f503 	smulbb	r5, r5, r3
 801f56c:	1212      	asrs	r2, r2, #8
 801f56e:	700a      	strb	r2, [r1, #0]
 801f570:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f574:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f578:	fb02 5200 	mla	r2, r2, r0, r5
 801f57c:	b292      	uxth	r2, r2
 801f57e:	1c55      	adds	r5, r2, #1
 801f580:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f584:	1212      	asrs	r2, r2, #8
 801f586:	704a      	strb	r2, [r1, #1]
 801f588:	788a      	ldrb	r2, [r1, #2]
 801f58a:	fb12 f303 	smulbb	r3, r2, r3
 801f58e:	fb04 3300 	mla	r3, r4, r0, r3
 801f592:	b29b      	uxth	r3, r3
 801f594:	1c5a      	adds	r2, r3, #1
 801f596:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f59a:	121b      	asrs	r3, r3, #8
 801f59c:	708b      	strb	r3, [r1, #2]
 801f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5a2:	2600      	movs	r6, #0
 801f5a4:	e75a      	b.n	801f45c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801f5a6:	2500      	movs	r5, #0
 801f5a8:	e776      	b.n	801f498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f5aa:	463d      	mov	r5, r7
 801f5ac:	e774      	b.n	801f498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f5ae:	2400      	movs	r4, #0
 801f5b0:	e78f      	b.n	801f4d2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801f5b2:	4663      	mov	r3, ip
 801f5b4:	4664      	mov	r4, ip
 801f5b6:	e7a5      	b.n	801f504 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	e7a3      	b.n	801f504 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f5bc:	463b      	mov	r3, r7
 801f5be:	e7a1      	b.n	801f504 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f5c0:	2401b550 	.word	0x2401b550

0801f5c4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c8:	b097      	sub	sp, #92	@ 0x5c
 801f5ca:	9214      	str	r2, [sp, #80]	@ 0x50
 801f5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f5ce:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801f5d0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801f5d4:	9015      	str	r0, [sp, #84]	@ 0x54
 801f5d6:	910c      	str	r1, [sp, #48]	@ 0x30
 801f5d8:	6850      	ldr	r0, [r2, #4]
 801f5da:	930e      	str	r3, [sp, #56]	@ 0x38
 801f5dc:	6812      	ldr	r2, [r2, #0]
 801f5de:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801f5e2:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801f5e6:	fb00 1303 	mla	r3, r0, r3, r1
 801f5ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5ee:	eb02 0a03 	add.w	sl, r2, r3
 801f5f2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f5f4:	689b      	ldr	r3, [r3, #8]
 801f5f6:	3301      	adds	r3, #1
 801f5f8:	f023 0301 	bic.w	r3, r3, #1
 801f5fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f5fe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f600:	681f      	ldr	r7, [r3, #0]
 801f602:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f604:	2b00      	cmp	r3, #0
 801f606:	dc03      	bgt.n	801f610 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f608:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	f340 8247 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f610:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f612:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f616:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f61a:	1e48      	subs	r0, r1, #1
 801f61c:	f102 3cff 	add.w	ip, r2, #4294967295
 801f620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f622:	2b00      	cmp	r3, #0
 801f624:	f340 80e5 	ble.w	801f7f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f628:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801f62c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f630:	d406      	bmi.n	801f640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f632:	4586      	cmp	lr, r0
 801f634:	da04      	bge.n	801f640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f636:	2b00      	cmp	r3, #0
 801f638:	db02      	blt.n	801f640 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f63a:	4563      	cmp	r3, ip
 801f63c:	f2c0 80da 	blt.w	801f7f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f640:	f11e 0e01 	adds.w	lr, lr, #1
 801f644:	f100 80cb 	bmi.w	801f7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f648:	4571      	cmp	r1, lr
 801f64a:	f2c0 80c8 	blt.w	801f7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f64e:	3301      	adds	r3, #1
 801f650:	f100 80c5 	bmi.w	801f7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f654:	429a      	cmp	r2, r3
 801f656:	f2c0 80c2 	blt.w	801f7de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f65c:	46d0      	mov	r8, sl
 801f65e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f662:	930d      	str	r3, [sp, #52]	@ 0x34
 801f664:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f666:	2b00      	cmp	r3, #0
 801f668:	f340 80e3 	ble.w	801f832 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f66c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f66e:	1430      	asrs	r0, r6, #16
 801f670:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f674:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f678:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801f67c:	142b      	asrs	r3, r5, #16
 801f67e:	f100 812e 	bmi.w	801f8de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f682:	f10c 3bff 	add.w	fp, ip, #4294967295
 801f686:	455b      	cmp	r3, fp
 801f688:	f280 8129 	bge.w	801f8de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f68c:	2800      	cmp	r0, #0
 801f68e:	f2c0 8126 	blt.w	801f8de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f692:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f696:	4558      	cmp	r0, fp
 801f698:	f280 8121 	bge.w	801f8de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f69c:	fb00 3309 	mla	r3, r0, r9, r3
 801f6a0:	0858      	lsrs	r0, r3, #1
 801f6a2:	07dc      	lsls	r4, r3, #31
 801f6a4:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f6a8:	bf54      	ite	pl
 801f6aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f6ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f6b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f6b6:	fa5f fc8c 	uxtb.w	ip, ip
 801f6ba:	2a00      	cmp	r2, #0
 801f6bc:	f000 80fe 	beq.w	801f8bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f6c0:	1c58      	adds	r0, r3, #1
 801f6c2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801f6c6:	07c0      	lsls	r0, r0, #31
 801f6c8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f6cc:	bf54      	ite	pl
 801f6ce:	f00e 0e0f 	andpl.w	lr, lr, #15
 801f6d2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801f6d6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801f6da:	fa5f f08e 	uxtb.w	r0, lr
 801f6de:	9010      	str	r0, [sp, #64]	@ 0x40
 801f6e0:	b1d9      	cbz	r1, 801f71a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f6e2:	444b      	add	r3, r9
 801f6e4:	0858      	lsrs	r0, r3, #1
 801f6e6:	07dc      	lsls	r4, r3, #31
 801f6e8:	f103 0301 	add.w	r3, r3, #1
 801f6ec:	5c38      	ldrb	r0, [r7, r0]
 801f6ee:	bf54      	ite	pl
 801f6f0:	f000 000f 	andpl.w	r0, r0, #15
 801f6f4:	1100      	asrmi	r0, r0, #4
 801f6f6:	07dc      	lsls	r4, r3, #31
 801f6f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f6fc:	b2c0      	uxtb	r0, r0
 801f6fe:	900a      	str	r0, [sp, #40]	@ 0x28
 801f700:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801f704:	f817 e000 	ldrb.w	lr, [r7, r0]
 801f708:	bf54      	ite	pl
 801f70a:	f00e 030f 	andpl.w	r3, lr, #15
 801f70e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801f712:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f716:	b2db      	uxtb	r3, r3
 801f718:	9311      	str	r3, [sp, #68]	@ 0x44
 801f71a:	b292      	uxth	r2, r2
 801f71c:	b289      	uxth	r1, r1
 801f71e:	0113      	lsls	r3, r2, #4
 801f720:	fb02 f001 	mul.w	r0, r2, r1
 801f724:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f726:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f72a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801f72e:	1a1b      	subs	r3, r3, r0
 801f730:	b289      	uxth	r1, r1
 801f732:	b29b      	uxth	r3, r3
 801f734:	ebae 0e01 	sub.w	lr, lr, r1
 801f738:	4353      	muls	r3, r2
 801f73a:	fa1f fe8e 	uxth.w	lr, lr
 801f73e:	fb0c 320e 	mla	r2, ip, lr, r3
 801f742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f744:	fb01 2203 	mla	r2, r1, r3, r2
 801f748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f74a:	fb00 2203 	mla	r2, r0, r3, r2
 801f74e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f752:	2a00      	cmp	r2, #0
 801f754:	d039      	beq.n	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f756:	4bc7      	ldr	r3, [pc, #796]	@ (801fa74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f758:	6819      	ldr	r1, [r3, #0]
 801f75a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f75c:	fa5f fc81 	uxtb.w	ip, r1
 801f760:	435a      	muls	r2, r3
 801f762:	1c53      	adds	r3, r2, #1
 801f764:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f768:	1212      	asrs	r2, r2, #8
 801f76a:	b290      	uxth	r0, r2
 801f76c:	43d2      	mvns	r2, r2
 801f76e:	fb1c fc00 	smulbb	ip, ip, r0
 801f772:	b2d3      	uxtb	r3, r2
 801f774:	f898 2000 	ldrb.w	r2, [r8]
 801f778:	fb02 c203 	mla	r2, r2, r3, ip
 801f77c:	b292      	uxth	r2, r2
 801f77e:	f102 0c01 	add.w	ip, r2, #1
 801f782:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f786:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f78a:	fb1c fc03 	smulbb	ip, ip, r3
 801f78e:	1212      	asrs	r2, r2, #8
 801f790:	f888 2000 	strb.w	r2, [r8]
 801f794:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f798:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f79c:	fb02 c200 	mla	r2, r2, r0, ip
 801f7a0:	b292      	uxth	r2, r2
 801f7a2:	f102 0c01 	add.w	ip, r2, #1
 801f7a6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f7aa:	1212      	asrs	r2, r2, #8
 801f7ac:	f888 2001 	strb.w	r2, [r8, #1]
 801f7b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f7b4:	fb12 f303 	smulbb	r3, r2, r3
 801f7b8:	fb01 3300 	mla	r3, r1, r0, r3
 801f7bc:	b29b      	uxth	r3, r3
 801f7be:	1c5a      	adds	r2, r3, #1
 801f7c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7c4:	121b      	asrs	r3, r3, #8
 801f7c6:	f888 3002 	strb.w	r3, [r8, #2]
 801f7ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f7cc:	f108 0803 	add.w	r8, r8, #3
 801f7d0:	441d      	add	r5, r3
 801f7d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f7d4:	441e      	add	r6, r3
 801f7d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7d8:	3b01      	subs	r3, #1
 801f7da:	930d      	str	r3, [sp, #52]	@ 0x34
 801f7dc:	e742      	b.n	801f664 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f7de:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f7e0:	f10a 0a03 	add.w	sl, sl, #3
 801f7e4:	441d      	add	r5, r3
 801f7e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f7e8:	441e      	add	r6, r3
 801f7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7ec:	3b01      	subs	r3, #1
 801f7ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7f0:	e716      	b.n	801f620 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f7f2:	d024      	beq.n	801f83e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7f6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f7f8:	3b01      	subs	r3, #1
 801f7fa:	fb00 5003 	mla	r0, r0, r3, r5
 801f7fe:	1400      	asrs	r0, r0, #16
 801f800:	f53f af2b 	bmi.w	801f65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f804:	3901      	subs	r1, #1
 801f806:	4288      	cmp	r0, r1
 801f808:	f6bf af27 	bge.w	801f65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f80c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801f80e:	fb01 6303 	mla	r3, r1, r3, r6
 801f812:	141b      	asrs	r3, r3, #16
 801f814:	f53f af21 	bmi.w	801f65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f818:	3a01      	subs	r2, #1
 801f81a:	4293      	cmp	r3, r2
 801f81c:	f6bf af1d 	bge.w	801f65a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f820:	f10a 0e03 	add.w	lr, sl, #3
 801f824:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801f828:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f82c:	f1b8 0f00 	cmp.w	r8, #0
 801f830:	dc76      	bgt.n	801f920 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801f832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f834:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f838:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f83c:	44a2      	add	sl, r4
 801f83e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f840:	2b00      	cmp	r3, #0
 801f842:	f340 812c 	ble.w	801fa9e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f84a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f84c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f850:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f854:	eef0 6a62 	vmov.f32	s13, s5
 801f858:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f85c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f860:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f864:	ee16 5a90 	vmov	r5, s13
 801f868:	eef0 6a43 	vmov.f32	s13, s6
 801f86c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f870:	ee16 6a90 	vmov	r6, s13
 801f874:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f878:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f87c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f880:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f884:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f888:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f88c:	ee12 2a90 	vmov	r2, s5
 801f890:	eef0 2a47 	vmov.f32	s5, s14
 801f894:	fb92 f3f3 	sdiv	r3, r2, r3
 801f898:	ee13 2a10 	vmov	r2, s6
 801f89c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801f89e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f8a0:	eeb0 3a67 	vmov.f32	s6, s15
 801f8a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8a8:	9324      	str	r3, [sp, #144]	@ 0x90
 801f8aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f8ae:	3b01      	subs	r3, #1
 801f8b0:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f8b4:	bf08      	it	eq
 801f8b6:	4613      	moveq	r3, r2
 801f8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801f8ba:	e6a2      	b.n	801f602 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f8bc:	2900      	cmp	r1, #0
 801f8be:	f43f af2c 	beq.w	801f71a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f8c2:	eb09 0003 	add.w	r0, r9, r3
 801f8c6:	0843      	lsrs	r3, r0, #1
 801f8c8:	07c0      	lsls	r0, r0, #31
 801f8ca:	5cfb      	ldrb	r3, [r7, r3]
 801f8cc:	bf54      	ite	pl
 801f8ce:	f003 030f 	andpl.w	r3, r3, #15
 801f8d2:	111b      	asrmi	r3, r3, #4
 801f8d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f8d8:	b2db      	uxtb	r3, r3
 801f8da:	930a      	str	r3, [sp, #40]	@ 0x28
 801f8dc:	e71d      	b.n	801f71a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f8de:	f113 0b01 	adds.w	fp, r3, #1
 801f8e2:	f53f af72 	bmi.w	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f8e6:	45dc      	cmp	ip, fp
 801f8e8:	f6ff af6f 	blt.w	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f8ec:	f110 0b01 	adds.w	fp, r0, #1
 801f8f0:	f53f af6b 	bmi.w	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f8f4:	45de      	cmp	lr, fp
 801f8f6:	f6ff af68 	blt.w	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f8fa:	9302      	str	r3, [sp, #8]
 801f8fc:	fa0f f38e 	sxth.w	r3, lr
 801f900:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f902:	9301      	str	r3, [sp, #4]
 801f904:	fa0f f38c 	sxth.w	r3, ip
 801f908:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801f90c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f910:	9300      	str	r3, [sp, #0]
 801f912:	463a      	mov	r2, r7
 801f914:	464b      	mov	r3, r9
 801f916:	4641      	mov	r1, r8
 801f918:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f91a:	f7ff fd79 	bl	801f410 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801f91e:	e754      	b.n	801f7ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f920:	142a      	asrs	r2, r5, #16
 801f922:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f926:	1433      	asrs	r3, r6, #16
 801f928:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f92c:	fb09 2303 	mla	r3, r9, r3, r2
 801f930:	085a      	lsrs	r2, r3, #1
 801f932:	07dc      	lsls	r4, r3, #31
 801f934:	5cba      	ldrb	r2, [r7, r2]
 801f936:	bf54      	ite	pl
 801f938:	f002 020f 	andpl.w	r2, r2, #15
 801f93c:	1112      	asrmi	r2, r2, #4
 801f93e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f942:	b2d2      	uxtb	r2, r2
 801f944:	2900      	cmp	r1, #0
 801f946:	f000 8097 	beq.w	801fa78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f94a:	f103 0b01 	add.w	fp, r3, #1
 801f94e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801f952:	f01b 0f01 	tst.w	fp, #1
 801f956:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f95a:	bf0c      	ite	eq
 801f95c:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f960:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f964:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f968:	fa5f f48c 	uxtb.w	r4, ip
 801f96c:	9412      	str	r4, [sp, #72]	@ 0x48
 801f96e:	b300      	cbz	r0, 801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f970:	444b      	add	r3, r9
 801f972:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f976:	07dc      	lsls	r4, r3, #31
 801f978:	f103 0301 	add.w	r3, r3, #1
 801f97c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f980:	bf54      	ite	pl
 801f982:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f986:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f98a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f98e:	fa5f f48c 	uxtb.w	r4, ip
 801f992:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f996:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f998:	07dc      	lsls	r4, r3, #31
 801f99a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f99e:	bf54      	ite	pl
 801f9a0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f9a4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f9a8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f9ac:	fa5f f38c 	uxtb.w	r3, ip
 801f9b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f9b2:	b289      	uxth	r1, r1
 801f9b4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9b6:	b280      	uxth	r0, r0
 801f9b8:	fb01 f300 	mul.w	r3, r1, r0
 801f9bc:	0109      	lsls	r1, r1, #4
 801f9be:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801f9c2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801f9c6:	1ac9      	subs	r1, r1, r3
 801f9c8:	b280      	uxth	r0, r0
 801f9ca:	b289      	uxth	r1, r1
 801f9cc:	ebac 0c00 	sub.w	ip, ip, r0
 801f9d0:	4361      	muls	r1, r4
 801f9d2:	fa1f fc8c 	uxth.w	ip, ip
 801f9d6:	fb02 120c 	mla	r2, r2, ip, r1
 801f9da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f9dc:	fb00 2001 	mla	r0, r0, r1, r2
 801f9e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f9e2:	fb03 0302 	mla	r3, r3, r2, r0
 801f9e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	d039      	beq.n	801fa62 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f9ee:	4a21      	ldr	r2, [pc, #132]	@ (801fa74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f9f0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801f9f4:	6810      	ldr	r0, [r2, #0]
 801f9f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9f8:	fa5f fc80 	uxtb.w	ip, r0
 801f9fc:	4353      	muls	r3, r2
 801f9fe:	1c5a      	adds	r2, r3, #1
 801fa00:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fa04:	121b      	asrs	r3, r3, #8
 801fa06:	b29a      	uxth	r2, r3
 801fa08:	43db      	mvns	r3, r3
 801fa0a:	fb1c fc02 	smulbb	ip, ip, r2
 801fa0e:	b2db      	uxtb	r3, r3
 801fa10:	fb01 c103 	mla	r1, r1, r3, ip
 801fa14:	b289      	uxth	r1, r1
 801fa16:	f101 0c01 	add.w	ip, r1, #1
 801fa1a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fa1e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801fa22:	fb1c fc03 	smulbb	ip, ip, r3
 801fa26:	1209      	asrs	r1, r1, #8
 801fa28:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801fa2c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801fa30:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801fa34:	fb01 c102 	mla	r1, r1, r2, ip
 801fa38:	b289      	uxth	r1, r1
 801fa3a:	f101 0c01 	add.w	ip, r1, #1
 801fa3e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801fa42:	1209      	asrs	r1, r1, #8
 801fa44:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801fa48:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801fa4c:	fb11 f303 	smulbb	r3, r1, r3
 801fa50:	fb00 3002 	mla	r0, r0, r2, r3
 801fa54:	b280      	uxth	r0, r0
 801fa56:	1c42      	adds	r2, r0, #1
 801fa58:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fa5c:	1200      	asrs	r0, r0, #8
 801fa5e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801fa62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fa64:	f10e 0e03 	add.w	lr, lr, #3
 801fa68:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa6c:	441d      	add	r5, r3
 801fa6e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa70:	441e      	add	r6, r3
 801fa72:	e6db      	b.n	801f82c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801fa74:	2401b550 	.word	0x2401b550
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d09a      	beq.n	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fa7c:	444b      	add	r3, r9
 801fa7e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fa82:	07db      	lsls	r3, r3, #31
 801fa84:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fa88:	bf54      	ite	pl
 801fa8a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fa8e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fa92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fa96:	fa5f f38c 	uxtb.w	r3, ip
 801fa9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fa9c:	e789      	b.n	801f9b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fa9e:	b017      	add	sp, #92	@ 0x5c
 801faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faa4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faa8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801faac:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fab0:	2d00      	cmp	r5, #0
 801fab2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801fab6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801faba:	fb04 5e03 	mla	lr, r4, r3, r5
 801fabe:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801fac2:	f2c0 80b1 	blt.w	801fc28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fac6:	45a9      	cmp	r9, r5
 801fac8:	f340 80ae 	ble.w	801fc28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801facc:	2c00      	cmp	r4, #0
 801face:	f2c0 80ab 	blt.w	801fc28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fad2:	45a0      	cmp	r8, r4
 801fad4:	f340 80a8 	ble.w	801fc28 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801fad8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801fadc:	f01e 0f01 	tst.w	lr, #1
 801fae0:	5d97      	ldrb	r7, [r2, r6]
 801fae2:	bf0c      	ite	eq
 801fae4:	f007 070f 	andeq.w	r7, r7, #15
 801fae8:	113f      	asrne	r7, r7, #4
 801faea:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801faee:	b2ff      	uxtb	r7, r7
 801faf0:	f115 0a01 	adds.w	sl, r5, #1
 801faf4:	f100 809a 	bmi.w	801fc2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801faf8:	45d1      	cmp	r9, sl
 801fafa:	f340 8097 	ble.w	801fc2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fafe:	2c00      	cmp	r4, #0
 801fb00:	f2c0 8094 	blt.w	801fc2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fb04:	45a0      	cmp	r8, r4
 801fb06:	f340 8091 	ble.w	801fc2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801fb0a:	2800      	cmp	r0, #0
 801fb0c:	f000 8090 	beq.w	801fc30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801fb10:	f10e 0b01 	add.w	fp, lr, #1
 801fb14:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801fb18:	f01b 0f01 	tst.w	fp, #1
 801fb1c:	5d96      	ldrb	r6, [r2, r6]
 801fb1e:	bf0c      	ite	eq
 801fb20:	f006 060f 	andeq.w	r6, r6, #15
 801fb24:	1136      	asrne	r6, r6, #4
 801fb26:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801fb2a:	b2f6      	uxtb	r6, r6
 801fb2c:	f1bc 0f00 	cmp.w	ip, #0
 801fb30:	f000 8082 	beq.w	801fc38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801fb34:	2d00      	cmp	r5, #0
 801fb36:	f104 0401 	add.w	r4, r4, #1
 801fb3a:	db7b      	blt.n	801fc34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fb3c:	45a9      	cmp	r9, r5
 801fb3e:	dd79      	ble.n	801fc34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fb40:	2c00      	cmp	r4, #0
 801fb42:	db77      	blt.n	801fc34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fb44:	45a0      	cmp	r8, r4
 801fb46:	dd75      	ble.n	801fc34 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801fb48:	eb03 0b0e 	add.w	fp, r3, lr
 801fb4c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801fb50:	f01b 0f01 	tst.w	fp, #1
 801fb54:	5d55      	ldrb	r5, [r2, r5]
 801fb56:	bf0c      	ite	eq
 801fb58:	f005 050f 	andeq.w	r5, r5, #15
 801fb5c:	112d      	asrne	r5, r5, #4
 801fb5e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801fb62:	b2ed      	uxtb	r5, r5
 801fb64:	f1ba 0f00 	cmp.w	sl, #0
 801fb68:	db69      	blt.n	801fc3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fb6a:	45d1      	cmp	r9, sl
 801fb6c:	dd67      	ble.n	801fc3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fb6e:	2c00      	cmp	r4, #0
 801fb70:	db65      	blt.n	801fc3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fb72:	45a0      	cmp	r8, r4
 801fb74:	dd63      	ble.n	801fc3e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801fb76:	2800      	cmp	r0, #0
 801fb78:	d063      	beq.n	801fc42 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801fb7a:	3301      	adds	r3, #1
 801fb7c:	449e      	add	lr, r3
 801fb7e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801fb82:	f01e 0f01 	tst.w	lr, #1
 801fb86:	5cd4      	ldrb	r4, [r2, r3]
 801fb88:	bf0c      	ite	eq
 801fb8a:	f004 040f 	andeq.w	r4, r4, #15
 801fb8e:	1124      	asrne	r4, r4, #4
 801fb90:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801fb94:	b2e3      	uxtb	r3, r4
 801fb96:	b282      	uxth	r2, r0
 801fb98:	fa1f fc8c 	uxth.w	ip, ip
 801fb9c:	fb02 f40c 	mul.w	r4, r2, ip
 801fba0:	0112      	lsls	r2, r2, #4
 801fba2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801fba6:	fa1f f08c 	uxth.w	r0, ip
 801fbaa:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801fbae:	1b12      	subs	r2, r2, r4
 801fbb0:	ebac 0c00 	sub.w	ip, ip, r0
 801fbb4:	b292      	uxth	r2, r2
 801fbb6:	fa1f fc8c 	uxth.w	ip, ip
 801fbba:	4372      	muls	r2, r6
 801fbbc:	fb07 220c 	mla	r2, r7, ip, r2
 801fbc0:	fb00 2005 	mla	r0, r0, r5, r2
 801fbc4:	fb04 0303 	mla	r3, r4, r3, r0
 801fbc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fbcc:	b353      	cbz	r3, 801fc24 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801fbce:	4a1e      	ldr	r2, [pc, #120]	@ (801fc48 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801fbd0:	7808      	ldrb	r0, [r1, #0]
 801fbd2:	6814      	ldr	r4, [r2, #0]
 801fbd4:	b29a      	uxth	r2, r3
 801fbd6:	43db      	mvns	r3, r3
 801fbd8:	b2e5      	uxtb	r5, r4
 801fbda:	b2db      	uxtb	r3, r3
 801fbdc:	fb15 f502 	smulbb	r5, r5, r2
 801fbe0:	fb00 5003 	mla	r0, r0, r3, r5
 801fbe4:	b280      	uxth	r0, r0
 801fbe6:	1c45      	adds	r5, r0, #1
 801fbe8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fbec:	784d      	ldrb	r5, [r1, #1]
 801fbee:	fb15 f503 	smulbb	r5, r5, r3
 801fbf2:	1200      	asrs	r0, r0, #8
 801fbf4:	7008      	strb	r0, [r1, #0]
 801fbf6:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801fbfa:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801fbfe:	fb00 5002 	mla	r0, r0, r2, r5
 801fc02:	b280      	uxth	r0, r0
 801fc04:	1c45      	adds	r5, r0, #1
 801fc06:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801fc0a:	1200      	asrs	r0, r0, #8
 801fc0c:	7048      	strb	r0, [r1, #1]
 801fc0e:	7888      	ldrb	r0, [r1, #2]
 801fc10:	fb10 f303 	smulbb	r3, r0, r3
 801fc14:	fb04 3202 	mla	r2, r4, r2, r3
 801fc18:	b292      	uxth	r2, r2
 801fc1a:	1c53      	adds	r3, r2, #1
 801fc1c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fc20:	1212      	asrs	r2, r2, #8
 801fc22:	708a      	strb	r2, [r1, #2]
 801fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc28:	2700      	movs	r7, #0
 801fc2a:	e761      	b.n	801faf0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801fc2c:	2600      	movs	r6, #0
 801fc2e:	e77d      	b.n	801fb2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fc30:	4606      	mov	r6, r0
 801fc32:	e77b      	b.n	801fb2c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801fc34:	2500      	movs	r5, #0
 801fc36:	e795      	b.n	801fb64 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801fc38:	4663      	mov	r3, ip
 801fc3a:	4665      	mov	r5, ip
 801fc3c:	e7ab      	b.n	801fb96 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fc3e:	2300      	movs	r3, #0
 801fc40:	e7a9      	b.n	801fb96 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fc42:	4603      	mov	r3, r0
 801fc44:	e7a7      	b.n	801fb96 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fc46:	bf00      	nop
 801fc48:	2401b550 	.word	0x2401b550

0801fc4c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc50:	b093      	sub	sp, #76	@ 0x4c
 801fc52:	461c      	mov	r4, r3
 801fc54:	920c      	str	r2, [sp, #48]	@ 0x30
 801fc56:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fc58:	9011      	str	r0, [sp, #68]	@ 0x44
 801fc5a:	9107      	str	r1, [sp, #28]
 801fc5c:	6850      	ldr	r0, [r2, #4]
 801fc5e:	6812      	ldr	r2, [r2, #0]
 801fc60:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801fc64:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801fc68:	fb00 1303 	mla	r3, r0, r3, r1
 801fc6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc70:	eb02 0b03 	add.w	fp, r2, r3
 801fc74:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fc76:	689b      	ldr	r3, [r3, #8]
 801fc78:	3301      	adds	r3, #1
 801fc7a:	f023 0301 	bic.w	r3, r3, #1
 801fc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fc82:	f8d3 8000 	ldr.w	r8, [r3]
 801fc86:	9b07      	ldr	r3, [sp, #28]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	dc03      	bgt.n	801fc94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fc8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc8e:	2b00      	cmp	r3, #0
 801fc90:	f340 822b 	ble.w	80200ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fc94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fc96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fc9e:	1e48      	subs	r0, r1, #1
 801fca0:	1e57      	subs	r7, r2, #1
 801fca2:	2c00      	cmp	r4, #0
 801fca4:	f340 80d7 	ble.w	801fe56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fca8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fcac:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fcb0:	d406      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fcb2:	4584      	cmp	ip, r0
 801fcb4:	da04      	bge.n	801fcc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	db02      	blt.n	801fcc0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fcba:	42bb      	cmp	r3, r7
 801fcbc:	f2c0 80cc 	blt.w	801fe58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fcc0:	f11c 0c01 	adds.w	ip, ip, #1
 801fcc4:	f100 80bf 	bmi.w	801fe46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fcc8:	4561      	cmp	r1, ip
 801fcca:	f2c0 80bc 	blt.w	801fe46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fcce:	3301      	adds	r3, #1
 801fcd0:	f100 80b9 	bmi.w	801fe46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fcd4:	429a      	cmp	r2, r3
 801fcd6:	f2c0 80b6 	blt.w	801fe46 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fcda:	46a2      	mov	sl, r4
 801fcdc:	465f      	mov	r7, fp
 801fcde:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fce2:	f1ba 0f00 	cmp.w	sl, #0
 801fce6:	f340 80d4 	ble.w	801fe92 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801fcea:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801fcee:	1430      	asrs	r0, r6, #16
 801fcf0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fcf4:	9308      	str	r3, [sp, #32]
 801fcf6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fcf8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fcfc:	142b      	asrs	r3, r5, #16
 801fcfe:	f100 8124 	bmi.w	801ff4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd02:	f10c 32ff 	add.w	r2, ip, #4294967295
 801fd06:	4293      	cmp	r3, r2
 801fd08:	f280 811f 	bge.w	801ff4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd0c:	2800      	cmp	r0, #0
 801fd0e:	f2c0 811c 	blt.w	801ff4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd12:	f10e 32ff 	add.w	r2, lr, #4294967295
 801fd16:	4290      	cmp	r0, r2
 801fd18:	f280 8117 	bge.w	801ff4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fd1c:	fb00 3309 	mla	r3, r0, r9, r3
 801fd20:	0858      	lsrs	r0, r3, #1
 801fd22:	07da      	lsls	r2, r3, #31
 801fd24:	9a08      	ldr	r2, [sp, #32]
 801fd26:	f818 c000 	ldrb.w	ip, [r8, r0]
 801fd2a:	bf54      	ite	pl
 801fd2c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801fd30:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801fd34:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801fd38:	fa5f fc8c 	uxtb.w	ip, ip
 801fd3c:	2a00      	cmp	r2, #0
 801fd3e:	f000 80ed 	beq.w	801ff1c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801fd42:	1c58      	adds	r0, r3, #1
 801fd44:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fd48:	07c0      	lsls	r0, r0, #31
 801fd4a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801fd4e:	bf54      	ite	pl
 801fd50:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fd54:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fd58:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fd5c:	fa5f fe8e 	uxtb.w	lr, lr
 801fd60:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801fd64:	b1c9      	cbz	r1, 801fd9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fd66:	444b      	add	r3, r9
 801fd68:	0858      	lsrs	r0, r3, #1
 801fd6a:	07da      	lsls	r2, r3, #31
 801fd6c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fd70:	bf54      	ite	pl
 801fd72:	f000 000f 	andpl.w	r0, r0, #15
 801fd76:	1100      	asrmi	r0, r0, #4
 801fd78:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fd7c:	b2c0      	uxtb	r0, r0
 801fd7e:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd80:	1c58      	adds	r0, r3, #1
 801fd82:	0843      	lsrs	r3, r0, #1
 801fd84:	07c2      	lsls	r2, r0, #31
 801fd86:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fd8a:	bf54      	ite	pl
 801fd8c:	f003 030f 	andpl.w	r3, r3, #15
 801fd90:	111b      	asrmi	r3, r3, #4
 801fd92:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fd96:	b2db      	uxtb	r3, r3
 801fd98:	930e      	str	r3, [sp, #56]	@ 0x38
 801fd9a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fd9e:	b289      	uxth	r1, r1
 801fda0:	fb02 f301 	mul.w	r3, r2, r1
 801fda4:	0112      	lsls	r2, r2, #4
 801fda6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fdaa:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801fdae:	1ad2      	subs	r2, r2, r3
 801fdb0:	b289      	uxth	r1, r1
 801fdb2:	b292      	uxth	r2, r2
 801fdb4:	1a40      	subs	r0, r0, r1
 801fdb6:	fa1f fe80 	uxth.w	lr, r0
 801fdba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801fdbc:	4342      	muls	r2, r0
 801fdbe:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801fdc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fdc4:	fb01 c102 	mla	r1, r1, r2, ip
 801fdc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fdca:	fb03 1302 	mla	r3, r3, r2, r1
 801fdce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fdd2:	b383      	cbz	r3, 801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fdd4:	4ac6      	ldr	r2, [pc, #792]	@ (80200f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801fdd6:	2bff      	cmp	r3, #255	@ 0xff
 801fdd8:	6812      	ldr	r2, [r2, #0]
 801fdda:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fdde:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801fde2:	b2d2      	uxtb	r2, r2
 801fde4:	f000 80ac 	beq.w	801ff40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fde8:	b299      	uxth	r1, r3
 801fdea:	43db      	mvns	r3, r3
 801fdec:	f897 c000 	ldrb.w	ip, [r7]
 801fdf0:	fb12 f201 	smulbb	r2, r2, r1
 801fdf4:	b2db      	uxtb	r3, r3
 801fdf6:	fb10 f001 	smulbb	r0, r0, r1
 801fdfa:	fb0c 2203 	mla	r2, ip, r3, r2
 801fdfe:	fb1e f101 	smulbb	r1, lr, r1
 801fe02:	b292      	uxth	r2, r2
 801fe04:	f102 0c01 	add.w	ip, r2, #1
 801fe08:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fe0c:	1212      	asrs	r2, r2, #8
 801fe0e:	703a      	strb	r2, [r7, #0]
 801fe10:	787a      	ldrb	r2, [r7, #1]
 801fe12:	fb02 0003 	mla	r0, r2, r3, r0
 801fe16:	b280      	uxth	r0, r0
 801fe18:	1c42      	adds	r2, r0, #1
 801fe1a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fe1e:	78ba      	ldrb	r2, [r7, #2]
 801fe20:	fb02 1303 	mla	r3, r2, r3, r1
 801fe24:	1200      	asrs	r0, r0, #8
 801fe26:	b29b      	uxth	r3, r3
 801fe28:	7078      	strb	r0, [r7, #1]
 801fe2a:	f103 0e01 	add.w	lr, r3, #1
 801fe2e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fe32:	121b      	asrs	r3, r3, #8
 801fe34:	70bb      	strb	r3, [r7, #2]
 801fe36:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fe38:	3703      	adds	r7, #3
 801fe3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fe3e:	441d      	add	r5, r3
 801fe40:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fe42:	441e      	add	r6, r3
 801fe44:	e74d      	b.n	801fce2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fe46:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fe48:	3c01      	subs	r4, #1
 801fe4a:	f10b 0b03 	add.w	fp, fp, #3
 801fe4e:	441d      	add	r5, r3
 801fe50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fe52:	441e      	add	r6, r3
 801fe54:	e725      	b.n	801fca2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fe56:	d021      	beq.n	801fe9c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fe58:	1e63      	subs	r3, r4, #1
 801fe5a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fe5c:	fb00 5003 	mla	r0, r0, r3, r5
 801fe60:	1400      	asrs	r0, r0, #16
 801fe62:	f53f af3a 	bmi.w	801fcda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fe66:	3901      	subs	r1, #1
 801fe68:	4288      	cmp	r0, r1
 801fe6a:	f6bf af36 	bge.w	801fcda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fe6e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fe70:	fb01 6303 	mla	r3, r1, r3, r6
 801fe74:	141b      	asrs	r3, r3, #16
 801fe76:	f53f af30 	bmi.w	801fcda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fe7a:	3a01      	subs	r2, #1
 801fe7c:	4293      	cmp	r3, r2
 801fe7e:	f6bf af2c 	bge.w	801fcda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fe82:	f10b 0c03 	add.w	ip, fp, #3
 801fe86:	46a6      	mov	lr, r4
 801fe88:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fe8c:	f1be 0f00 	cmp.w	lr, #0
 801fe90:	dc79      	bgt.n	801ff86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801fe92:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801fe96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe9a:	44a3      	add	fp, r4
 801fe9c:	9b07      	ldr	r3, [sp, #28]
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	f340 8123 	ble.w	80200ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fea4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fea8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801feaa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801feae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801feb2:	eef0 6a62 	vmov.f32	s13, s5
 801feb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801feba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801febe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fec2:	ee16 5a90 	vmov	r5, s13
 801fec6:	eef0 6a43 	vmov.f32	s13, s6
 801feca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fece:	ee16 6a90 	vmov	r6, s13
 801fed2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fed6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801feda:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fede:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fee2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fee6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801feea:	ee12 2a90 	vmov	r2, s5
 801feee:	eef0 2a47 	vmov.f32	s5, s14
 801fef2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fef6:	ee13 2a10 	vmov	r2, s6
 801fefa:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fefc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fefe:	eeb0 3a67 	vmov.f32	s6, s15
 801ff02:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff06:	9320      	str	r3, [sp, #128]	@ 0x80
 801ff08:	9b07      	ldr	r3, [sp, #28]
 801ff0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ff0c:	3b01      	subs	r3, #1
 801ff0e:	9307      	str	r3, [sp, #28]
 801ff10:	bf08      	it	eq
 801ff12:	4614      	moveq	r4, r2
 801ff14:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ff16:	bf18      	it	ne
 801ff18:	461c      	movne	r4, r3
 801ff1a:	e6b4      	b.n	801fc86 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ff1c:	2900      	cmp	r1, #0
 801ff1e:	f43f af3c 	beq.w	801fd9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ff22:	eb09 0003 	add.w	r0, r9, r3
 801ff26:	0843      	lsrs	r3, r0, #1
 801ff28:	07c0      	lsls	r0, r0, #31
 801ff2a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ff2e:	bf54      	ite	pl
 801ff30:	f003 030f 	andpl.w	r3, r3, #15
 801ff34:	111b      	asrmi	r3, r3, #4
 801ff36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ff3a:	b2db      	uxtb	r3, r3
 801ff3c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff3e:	e72c      	b.n	801fd9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ff40:	703a      	strb	r2, [r7, #0]
 801ff42:	7078      	strb	r0, [r7, #1]
 801ff44:	f887 e002 	strb.w	lr, [r7, #2]
 801ff48:	e775      	b.n	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff4a:	1c5a      	adds	r2, r3, #1
 801ff4c:	f53f af73 	bmi.w	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff50:	4594      	cmp	ip, r2
 801ff52:	f6ff af70 	blt.w	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff56:	1c42      	adds	r2, r0, #1
 801ff58:	f53f af6d 	bmi.w	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff5c:	4596      	cmp	lr, r2
 801ff5e:	f6ff af6a 	blt.w	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff62:	9302      	str	r3, [sp, #8]
 801ff64:	fa0f f38e 	sxth.w	r3, lr
 801ff68:	9a08      	ldr	r2, [sp, #32]
 801ff6a:	9301      	str	r3, [sp, #4]
 801ff6c:	fa0f f38c 	sxth.w	r3, ip
 801ff70:	9105      	str	r1, [sp, #20]
 801ff72:	4639      	mov	r1, r7
 801ff74:	9300      	str	r3, [sp, #0]
 801ff76:	464b      	mov	r3, r9
 801ff78:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ff7c:	4642      	mov	r2, r8
 801ff7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ff80:	f7ff fd90 	bl	801faa4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801ff84:	e757      	b.n	801fe36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ff86:	142a      	asrs	r2, r5, #16
 801ff88:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ff8c:	1433      	asrs	r3, r6, #16
 801ff8e:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801ff92:	fb09 2303 	mla	r3, r9, r3, r2
 801ff96:	085a      	lsrs	r2, r3, #1
 801ff98:	07d9      	lsls	r1, r3, #31
 801ff9a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801ff9e:	bf54      	ite	pl
 801ffa0:	f002 020f 	andpl.w	r2, r2, #15
 801ffa4:	1112      	asrmi	r2, r2, #4
 801ffa6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ffaa:	b2d2      	uxtb	r2, r2
 801ffac:	2800      	cmp	r0, #0
 801ffae:	f000 8085 	beq.w	80200bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801ffb2:	f103 0a01 	add.w	sl, r3, #1
 801ffb6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801ffba:	f01a 0f01 	tst.w	sl, #1
 801ffbe:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ffc2:	bf0c      	ite	eq
 801ffc4:	f001 010f 	andeq.w	r1, r1, #15
 801ffc8:	1109      	asrne	r1, r1, #4
 801ffca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ffce:	b2c9      	uxtb	r1, r1
 801ffd0:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ffd2:	b1df      	cbz	r7, 802000c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ffd4:	444b      	add	r3, r9
 801ffd6:	0859      	lsrs	r1, r3, #1
 801ffd8:	f013 0f01 	tst.w	r3, #1
 801ffdc:	f103 0301 	add.w	r3, r3, #1
 801ffe0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ffe4:	bf0c      	ite	eq
 801ffe6:	f001 010f 	andeq.w	r1, r1, #15
 801ffea:	1109      	asrne	r1, r1, #4
 801ffec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fff0:	b2c9      	uxtb	r1, r1
 801fff2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fff4:	0859      	lsrs	r1, r3, #1
 801fff6:	07db      	lsls	r3, r3, #31
 801fff8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fffc:	bf54      	ite	pl
 801fffe:	f001 010f 	andpl.w	r1, r1, #15
 8020002:	1109      	asrmi	r1, r1, #4
 8020004:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8020008:	b2c9      	uxtb	r1, r1
 802000a:	9110      	str	r1, [sp, #64]	@ 0x40
 802000c:	b280      	uxth	r0, r0
 802000e:	b2bf      	uxth	r7, r7
 8020010:	fb00 f307 	mul.w	r3, r0, r7
 8020014:	0100      	lsls	r0, r0, #4
 8020016:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802001a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802001e:	1ac0      	subs	r0, r0, r3
 8020020:	b2bf      	uxth	r7, r7
 8020022:	b280      	uxth	r0, r0
 8020024:	1bc9      	subs	r1, r1, r7
 8020026:	fa1f fa81 	uxth.w	sl, r1
 802002a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802002c:	4348      	muls	r0, r1
 802002e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020030:	fb02 020a 	mla	r2, r2, sl, r0
 8020034:	fb07 2701 	mla	r7, r7, r1, r2
 8020038:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802003a:	fb03 7302 	mla	r3, r3, r2, r7
 802003e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020042:	b393      	cbz	r3, 80200aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020044:	4a2a      	ldr	r2, [pc, #168]	@ (80200f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020046:	2bff      	cmp	r3, #255	@ 0xff
 8020048:	6811      	ldr	r1, [r2, #0]
 802004a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802004e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8020052:	b2c9      	uxtb	r1, r1
 8020054:	d042      	beq.n	80200dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8020056:	b298      	uxth	r0, r3
 8020058:	43db      	mvns	r3, r3
 802005a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802005e:	fb11 f100 	smulbb	r1, r1, r0
 8020062:	b2db      	uxtb	r3, r3
 8020064:	fb17 f700 	smulbb	r7, r7, r0
 8020068:	fb02 1103 	mla	r1, r2, r3, r1
 802006c:	fb1a f000 	smulbb	r0, sl, r0
 8020070:	b289      	uxth	r1, r1
 8020072:	1c4a      	adds	r2, r1, #1
 8020074:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020078:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802007c:	fb02 7703 	mla	r7, r2, r3, r7
 8020080:	1209      	asrs	r1, r1, #8
 8020082:	b2bf      	uxth	r7, r7
 8020084:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8020088:	1c7a      	adds	r2, r7, #1
 802008a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802008e:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8020092:	fb02 0303 	mla	r3, r2, r3, r0
 8020096:	123f      	asrs	r7, r7, #8
 8020098:	b29b      	uxth	r3, r3
 802009a:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802009e:	1c5a      	adds	r2, r3, #1
 80200a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80200a4:	121b      	asrs	r3, r3, #8
 80200a6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80200aa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80200ac:	f10c 0c03 	add.w	ip, ip, #3
 80200b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80200b4:	441d      	add	r5, r3
 80200b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80200b8:	441e      	add	r6, r3
 80200ba:	e6e7      	b.n	801fe8c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80200bc:	2f00      	cmp	r7, #0
 80200be:	d0a5      	beq.n	802000c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80200c0:	444b      	add	r3, r9
 80200c2:	0859      	lsrs	r1, r3, #1
 80200c4:	07db      	lsls	r3, r3, #31
 80200c6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80200ca:	bf54      	ite	pl
 80200cc:	f001 010f 	andpl.w	r1, r1, #15
 80200d0:	1109      	asrmi	r1, r1, #4
 80200d2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80200d6:	b2c9      	uxtb	r1, r1
 80200d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80200da:	e797      	b.n	802000c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80200dc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80200e0:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80200e4:	f80c ac01 	strb.w	sl, [ip, #-1]
 80200e8:	e7df      	b.n	80200aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80200ea:	b013      	add	sp, #76	@ 0x4c
 80200ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200f0:	2401b550 	.word	0x2401b550

080200f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 80200f4:	b530      	push	{r4, r5, lr}
 80200f6:	b29d      	uxth	r5, r3
 80200f8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80200fc:	780c      	ldrb	r4, [r1, #0]
 80200fe:	b298      	uxth	r0, r3
 8020100:	7813      	ldrb	r3, [r2, #0]
 8020102:	fb14 f405 	smulbb	r4, r4, r5
 8020106:	fb13 f300 	smulbb	r3, r3, r0
 802010a:	441c      	add	r4, r3
 802010c:	b2a4      	uxth	r4, r4
 802010e:	1c63      	adds	r3, r4, #1
 8020110:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020114:	7853      	ldrb	r3, [r2, #1]
 8020116:	fb13 f300 	smulbb	r3, r3, r0
 802011a:	1224      	asrs	r4, r4, #8
 802011c:	7014      	strb	r4, [r2, #0]
 802011e:	784c      	ldrb	r4, [r1, #1]
 8020120:	fb14 f405 	smulbb	r4, r4, r5
 8020124:	441c      	add	r4, r3
 8020126:	b2a4      	uxth	r4, r4
 8020128:	1c63      	adds	r3, r4, #1
 802012a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802012e:	1224      	asrs	r4, r4, #8
 8020130:	7054      	strb	r4, [r2, #1]
 8020132:	788b      	ldrb	r3, [r1, #2]
 8020134:	7891      	ldrb	r1, [r2, #2]
 8020136:	fb13 f305 	smulbb	r3, r3, r5
 802013a:	fb11 f000 	smulbb	r0, r1, r0
 802013e:	4403      	add	r3, r0
 8020140:	b29b      	uxth	r3, r3
 8020142:	1c59      	adds	r1, r3, #1
 8020144:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020148:	121b      	asrs	r3, r3, #8
 802014a:	7093      	strb	r3, [r2, #2]
 802014c:	bd30      	pop	{r4, r5, pc}
	...

08020150 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8020150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020154:	461c      	mov	r4, r3
 8020156:	b08b      	sub	sp, #44	@ 0x2c
 8020158:	460e      	mov	r6, r1
 802015a:	4615      	mov	r5, r2
 802015c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802015e:	4682      	mov	sl, r0
 8020160:	6861      	ldr	r1, [r4, #4]
 8020162:	aa06      	add	r2, sp, #24
 8020164:	6820      	ldr	r0, [r4, #0]
 8020166:	2702      	movs	r7, #2
 8020168:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802016c:	3504      	adds	r5, #4
 802016e:	c203      	stmia	r2!, {r0, r1}
 8020170:	6818      	ldr	r0, [r3, #0]
 8020172:	aa08      	add	r2, sp, #32
 8020174:	6859      	ldr	r1, [r3, #4]
 8020176:	c203      	stmia	r2!, {r0, r1}
 8020178:	a806      	add	r0, sp, #24
 802017a:	f7f4 f9ed 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802017e:	4621      	mov	r1, r4
 8020180:	a808      	add	r0, sp, #32
 8020182:	f7f4 fa11 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020186:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802018a:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802018e:	f002 0301 	and.w	r3, r2, #1
 8020192:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8020196:	9302      	str	r3, [sp, #8]
 8020198:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802019c:	f003 0101 	and.w	r1, r3, #1
 80201a0:	9101      	str	r1, [sp, #4]
 80201a2:	9801      	ldr	r0, [sp, #4]
 80201a4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80201a8:	4403      	add	r3, r0
 80201aa:	fb01 2303 	mla	r3, r1, r3, r2
 80201ae:	fb93 f3f7 	sdiv	r3, r3, r7
 80201b2:	441e      	add	r6, r3
 80201b4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80201b8:	441a      	add	r2, r3
 80201ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80201be:	4419      	add	r1, r3
 80201c0:	4b70      	ldr	r3, [pc, #448]	@ (8020384 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80201c2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80201c6:	6818      	ldr	r0, [r3, #0]
 80201c8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80201cc:	6803      	ldr	r3, [r0, #0]
 80201ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80201d0:	4798      	blx	r3
 80201d2:	4a6d      	ldr	r2, [pc, #436]	@ (8020388 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80201d4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80201d8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80201dc:	8813      	ldrh	r3, [r2, #0]
 80201de:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80201e2:	fb03 1404 	mla	r4, r3, r4, r1
 80201e6:	4611      	mov	r1, r2
 80201e8:	fb0b f303 	mul.w	r3, fp, r3
 80201ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80201f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80201f4:	4404      	add	r4, r0
 80201f6:	4423      	add	r3, r4
 80201f8:	d073      	beq.n	80202e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80201fa:	9705      	str	r7, [sp, #20]
 80201fc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8020200:	9b03      	ldr	r3, [sp, #12]
 8020202:	429c      	cmp	r4, r3
 8020204:	f080 80b5 	bcs.w	8020372 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8020208:	9b02      	ldr	r3, [sp, #8]
 802020a:	b35b      	cbz	r3, 8020264 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802020c:	7831      	ldrb	r1, [r6, #0]
 802020e:	4622      	mov	r2, r4
 8020210:	1c77      	adds	r7, r6, #1
 8020212:	3403      	adds	r4, #3
 8020214:	f001 010f 	and.w	r1, r1, #15
 8020218:	f108 3bff 	add.w	fp, r8, #4294967295
 802021c:	464b      	mov	r3, r9
 802021e:	4650      	mov	r0, sl
 8020220:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020224:	4429      	add	r1, r5
 8020226:	f7ff ff65 	bl	80200f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802022a:	f1bb 0f01 	cmp.w	fp, #1
 802022e:	dd1c      	ble.n	802026a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8020230:	7839      	ldrb	r1, [r7, #0]
 8020232:	4622      	mov	r2, r4
 8020234:	464b      	mov	r3, r9
 8020236:	4650      	mov	r0, sl
 8020238:	0909      	lsrs	r1, r1, #4
 802023a:	f1ab 0b02 	sub.w	fp, fp, #2
 802023e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020242:	4429      	add	r1, r5
 8020244:	f7ff ff56 	bl	80200f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020248:	f817 1b01 	ldrb.w	r1, [r7], #1
 802024c:	1ce2      	adds	r2, r4, #3
 802024e:	464b      	mov	r3, r9
 8020250:	f001 010f 	and.w	r1, r1, #15
 8020254:	4650      	mov	r0, sl
 8020256:	3406      	adds	r4, #6
 8020258:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802025c:	4429      	add	r1, r5
 802025e:	f7ff ff49 	bl	80200f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020262:	e7e2      	b.n	802022a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020264:	4637      	mov	r7, r6
 8020266:	46c3      	mov	fp, r8
 8020268:	e7df      	b.n	802022a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802026a:	d10a      	bne.n	8020282 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802026c:	7839      	ldrb	r1, [r7, #0]
 802026e:	4622      	mov	r2, r4
 8020270:	3403      	adds	r4, #3
 8020272:	464b      	mov	r3, r9
 8020274:	0909      	lsrs	r1, r1, #4
 8020276:	4650      	mov	r0, sl
 8020278:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802027c:	4429      	add	r1, r5
 802027e:	f7ff ff39 	bl	80200f4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020282:	9b04      	ldr	r3, [sp, #16]
 8020284:	9a01      	ldr	r2, [sp, #4]
 8020286:	881b      	ldrh	r3, [r3, #0]
 8020288:	eba3 0308 	sub.w	r3, r3, r8
 802028c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020290:	441c      	add	r4, r3
 8020292:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020296:	4413      	add	r3, r2
 8020298:	9a05      	ldr	r2, [sp, #20]
 802029a:	fb93 f3f2 	sdiv	r3, r3, r2
 802029e:	441e      	add	r6, r3
 80202a0:	e7ae      	b.n	8020200 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80202a2:	4632      	mov	r2, r6
 80202a4:	46c4      	mov	ip, r8
 80202a6:	e037      	b.n	8020318 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80202a8:	d10e      	bne.n	80202c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80202aa:	7812      	ldrb	r2, [r2, #0]
 80202ac:	3003      	adds	r0, #3
 80202ae:	0912      	lsrs	r2, r2, #4
 80202b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202b4:	18ac      	adds	r4, r5, r2
 80202b6:	5caa      	ldrb	r2, [r5, r2]
 80202b8:	f800 2c03 	strb.w	r2, [r0, #-3]
 80202bc:	7862      	ldrb	r2, [r4, #1]
 80202be:	f800 2c02 	strb.w	r2, [r0, #-2]
 80202c2:	78a2      	ldrb	r2, [r4, #2]
 80202c4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80202c8:	880c      	ldrh	r4, [r1, #0]
 80202ca:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80202ce:	eba4 0408 	sub.w	r4, r4, r8
 80202d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80202d6:	4404      	add	r4, r0
 80202d8:	9801      	ldr	r0, [sp, #4]
 80202da:	4402      	add	r2, r0
 80202dc:	fb92 f2f7 	sdiv	r2, r2, r7
 80202e0:	4416      	add	r6, r2
 80202e2:	429c      	cmp	r4, r3
 80202e4:	d245      	bcs.n	8020372 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80202e6:	9a02      	ldr	r2, [sp, #8]
 80202e8:	2a00      	cmp	r2, #0
 80202ea:	d0da      	beq.n	80202a2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80202ec:	7830      	ldrb	r0, [r6, #0]
 80202ee:	1c72      	adds	r2, r6, #1
 80202f0:	3403      	adds	r4, #3
 80202f2:	f000 000f 	and.w	r0, r0, #15
 80202f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80202fa:	eb05 0c00 	add.w	ip, r5, r0
 80202fe:	5c28      	ldrb	r0, [r5, r0]
 8020300:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020304:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020308:	f804 0c02 	strb.w	r0, [r4, #-2]
 802030c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8020310:	f108 3cff 	add.w	ip, r8, #4294967295
 8020314:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020318:	f1bc 0f01 	cmp.w	ip, #1
 802031c:	4620      	mov	r0, r4
 802031e:	f104 0406 	add.w	r4, r4, #6
 8020322:	ddc1      	ble.n	80202a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8020324:	7810      	ldrb	r0, [r2, #0]
 8020326:	f1ac 0c02 	sub.w	ip, ip, #2
 802032a:	0900      	lsrs	r0, r0, #4
 802032c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020330:	eb05 0e00 	add.w	lr, r5, r0
 8020334:	5c28      	ldrb	r0, [r5, r0]
 8020336:	f804 0c06 	strb.w	r0, [r4, #-6]
 802033a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802033e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8020342:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020346:	f804 0c04 	strb.w	r0, [r4, #-4]
 802034a:	f812 0b01 	ldrb.w	r0, [r2], #1
 802034e:	f000 000f 	and.w	r0, r0, #15
 8020352:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020356:	eb05 0e00 	add.w	lr, r5, r0
 802035a:	5c28      	ldrb	r0, [r5, r0]
 802035c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8020360:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020364:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020368:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802036c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8020370:	e7d2      	b.n	8020318 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020372:	4b04      	ldr	r3, [pc, #16]	@ (8020384 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020374:	6818      	ldr	r0, [r3, #0]
 8020376:	6803      	ldr	r3, [r0, #0]
 8020378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802037a:	4798      	blx	r3
 802037c:	b00b      	add	sp, #44	@ 0x2c
 802037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020382:	bf00      	nop
 8020384:	2401b548 	.word	0x2401b548
 8020388:	2401b542 	.word	0x2401b542

0802038c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 802038c:	b530      	push	{r4, r5, lr}
 802038e:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8020392:	780d      	ldrb	r5, [r1, #0]
 8020394:	28ff      	cmp	r0, #255	@ 0xff
 8020396:	d107      	bne.n	80203a8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020398:	2bff      	cmp	r3, #255	@ 0xff
 802039a:	d105      	bne.n	80203a8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 802039c:	7015      	strb	r5, [r2, #0]
 802039e:	784b      	ldrb	r3, [r1, #1]
 80203a0:	7053      	strb	r3, [r2, #1]
 80203a2:	788b      	ldrb	r3, [r1, #2]
 80203a4:	7093      	strb	r3, [r2, #2]
 80203a6:	bd30      	pop	{r4, r5, pc}
 80203a8:	fb10 f003 	smulbb	r0, r0, r3
 80203ac:	b283      	uxth	r3, r0
 80203ae:	1c58      	adds	r0, r3, #1
 80203b0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80203b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80203b8:	b284      	uxth	r4, r0
 80203ba:	43c0      	mvns	r0, r0
 80203bc:	fb15 f504 	smulbb	r5, r5, r4
 80203c0:	b2c3      	uxtb	r3, r0
 80203c2:	7810      	ldrb	r0, [r2, #0]
 80203c4:	fb00 5003 	mla	r0, r0, r3, r5
 80203c8:	b280      	uxth	r0, r0
 80203ca:	1c45      	adds	r5, r0, #1
 80203cc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80203d0:	7855      	ldrb	r5, [r2, #1]
 80203d2:	fb15 f503 	smulbb	r5, r5, r3
 80203d6:	1200      	asrs	r0, r0, #8
 80203d8:	7010      	strb	r0, [r2, #0]
 80203da:	7848      	ldrb	r0, [r1, #1]
 80203dc:	fb00 5004 	mla	r0, r0, r4, r5
 80203e0:	b280      	uxth	r0, r0
 80203e2:	1c45      	adds	r5, r0, #1
 80203e4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80203e8:	1200      	asrs	r0, r0, #8
 80203ea:	7050      	strb	r0, [r2, #1]
 80203ec:	7888      	ldrb	r0, [r1, #2]
 80203ee:	7891      	ldrb	r1, [r2, #2]
 80203f0:	fb11 f303 	smulbb	r3, r1, r3
 80203f4:	fb00 3304 	mla	r3, r0, r4, r3
 80203f8:	b29b      	uxth	r3, r3
 80203fa:	1c59      	adds	r1, r3, #1
 80203fc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020400:	121b      	asrs	r3, r3, #8
 8020402:	e7cf      	b.n	80203a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08020404 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8020404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020408:	461d      	mov	r5, r3
 802040a:	b08f      	sub	sp, #60	@ 0x3c
 802040c:	460c      	mov	r4, r1
 802040e:	4616      	mov	r6, r2
 8020410:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020412:	4680      	mov	r8, r0
 8020414:	6869      	ldr	r1, [r5, #4]
 8020416:	aa0a      	add	r2, sp, #40	@ 0x28
 8020418:	6828      	ldr	r0, [r5, #0]
 802041a:	3604      	adds	r6, #4
 802041c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8020420:	4f57      	ldr	r7, [pc, #348]	@ (8020580 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8020422:	c203      	stmia	r2!, {r0, r1}
 8020424:	6818      	ldr	r0, [r3, #0]
 8020426:	aa0c      	add	r2, sp, #48	@ 0x30
 8020428:	6859      	ldr	r1, [r3, #4]
 802042a:	c203      	stmia	r2!, {r0, r1}
 802042c:	a80a      	add	r0, sp, #40	@ 0x28
 802042e:	f7f4 f893 	bl	8014558 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020432:	4629      	mov	r1, r5
 8020434:	a80c      	add	r0, sp, #48	@ 0x30
 8020436:	2502      	movs	r5, #2
 8020438:	f7f4 f8b6 	bl	80145a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802043c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020440:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8020444:	f002 0301 	and.w	r3, r2, #1
 8020448:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 802044c:	9304      	str	r3, [sp, #16]
 802044e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020452:	f003 0101 	and.w	r1, r3, #1
 8020456:	9103      	str	r1, [sp, #12]
 8020458:	9803      	ldr	r0, [sp, #12]
 802045a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802045e:	4403      	add	r3, r0
 8020460:	6838      	ldr	r0, [r7, #0]
 8020462:	fb01 2303 	mla	r3, r1, r3, r2
 8020466:	fb93 f3f5 	sdiv	r3, r3, r5
 802046a:	18e5      	adds	r5, r4, r3
 802046c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020470:	441a      	add	r2, r3
 8020472:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020476:	4419      	add	r1, r3
 8020478:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802047c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8020480:	6803      	ldr	r3, [r0, #0]
 8020482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020484:	4798      	blx	r3
 8020486:	4a3f      	ldr	r2, [pc, #252]	@ (8020584 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8020488:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802048c:	8813      	ldrh	r3, [r2, #0]
 802048e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8020492:	9207      	str	r2, [sp, #28]
 8020494:	fb03 1404 	mla	r4, r3, r4, r1
 8020498:	fb0a f303 	mul.w	r3, sl, r3
 802049c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80204a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80204a4:	4404      	add	r4, r0
 80204a6:	18e3      	adds	r3, r4, r3
 80204a8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 80204ac:	9b05      	ldr	r3, [sp, #20]
 80204ae:	429c      	cmp	r4, r3
 80204b0:	d25d      	bcs.n	802056e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 80204b2:	9b04      	ldr	r3, [sp, #16]
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	d037      	beq.n	8020528 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 80204b8:	782b      	ldrb	r3, [r5, #0]
 80204ba:	1c6f      	adds	r7, r5, #1
 80204bc:	f003 030f 	and.w	r3, r3, #15
 80204c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80204c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80204c6:	0e1b      	lsrs	r3, r3, #24
 80204c8:	d006      	beq.n	80204d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80204ca:	9300      	str	r3, [sp, #0]
 80204cc:	4622      	mov	r2, r4
 80204ce:	464b      	mov	r3, r9
 80204d0:	a909      	add	r1, sp, #36	@ 0x24
 80204d2:	4640      	mov	r0, r8
 80204d4:	f7ff ff5a 	bl	802038c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80204d8:	3403      	adds	r4, #3
 80204da:	f10b 3aff 	add.w	sl, fp, #4294967295
 80204de:	f1ba 0f01 	cmp.w	sl, #1
 80204e2:	dd24      	ble.n	802052e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80204e4:	783b      	ldrb	r3, [r7, #0]
 80204e6:	091b      	lsrs	r3, r3, #4
 80204e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80204ec:	9308      	str	r3, [sp, #32]
 80204ee:	0e1b      	lsrs	r3, r3, #24
 80204f0:	d006      	beq.n	8020500 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80204f2:	9300      	str	r3, [sp, #0]
 80204f4:	4622      	mov	r2, r4
 80204f6:	464b      	mov	r3, r9
 80204f8:	a908      	add	r1, sp, #32
 80204fa:	4640      	mov	r0, r8
 80204fc:	f7ff ff46 	bl	802038c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020500:	f817 3b01 	ldrb.w	r3, [r7], #1
 8020504:	f003 030f 	and.w	r3, r3, #15
 8020508:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802050c:	9309      	str	r3, [sp, #36]	@ 0x24
 802050e:	0e1b      	lsrs	r3, r3, #24
 8020510:	d006      	beq.n	8020520 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8020512:	9300      	str	r3, [sp, #0]
 8020514:	1ce2      	adds	r2, r4, #3
 8020516:	464b      	mov	r3, r9
 8020518:	a909      	add	r1, sp, #36	@ 0x24
 802051a:	4640      	mov	r0, r8
 802051c:	f7ff ff36 	bl	802038c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020520:	3406      	adds	r4, #6
 8020522:	f1aa 0a02 	sub.w	sl, sl, #2
 8020526:	e7da      	b.n	80204de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8020528:	462f      	mov	r7, r5
 802052a:	46da      	mov	sl, fp
 802052c:	e7d7      	b.n	80204de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 802052e:	d10e      	bne.n	802054e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8020530:	783b      	ldrb	r3, [r7, #0]
 8020532:	091b      	lsrs	r3, r3, #4
 8020534:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020538:	9309      	str	r3, [sp, #36]	@ 0x24
 802053a:	0e1b      	lsrs	r3, r3, #24
 802053c:	d006      	beq.n	802054c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 802053e:	9300      	str	r3, [sp, #0]
 8020540:	4622      	mov	r2, r4
 8020542:	464b      	mov	r3, r9
 8020544:	a909      	add	r1, sp, #36	@ 0x24
 8020546:	4640      	mov	r0, r8
 8020548:	f7ff ff20 	bl	802038c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802054c:	3403      	adds	r4, #3
 802054e:	9b07      	ldr	r3, [sp, #28]
 8020550:	9a03      	ldr	r2, [sp, #12]
 8020552:	881b      	ldrh	r3, [r3, #0]
 8020554:	eba3 030b 	sub.w	r3, r3, fp
 8020558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802055c:	441c      	add	r4, r3
 802055e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020562:	4413      	add	r3, r2
 8020564:	2202      	movs	r2, #2
 8020566:	fb93 f3f2 	sdiv	r3, r3, r2
 802056a:	441d      	add	r5, r3
 802056c:	e79e      	b.n	80204ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802056e:	9b06      	ldr	r3, [sp, #24]
 8020570:	6818      	ldr	r0, [r3, #0]
 8020572:	6803      	ldr	r3, [r0, #0]
 8020574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020576:	4798      	blx	r3
 8020578:	b00f      	add	sp, #60	@ 0x3c
 802057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802057e:	bf00      	nop
 8020580:	2401b548 	.word	0x2401b548
 8020584:	2401b542 	.word	0x2401b542

08020588 <CRC_Lock>:
 8020588:	4a2d      	ldr	r2, [pc, #180]	@ (8020640 <CRC_Lock+0xb8>)
 802058a:	b530      	push	{r4, r5, lr}
 802058c:	6813      	ldr	r3, [r2, #0]
 802058e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8020592:	f023 0301 	bic.w	r3, r3, #1
 8020596:	6013      	str	r3, [r2, #0]
 8020598:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802059c:	4b29      	ldr	r3, [pc, #164]	@ (8020644 <CRC_Lock+0xbc>)
 802059e:	681c      	ldr	r4, [r3, #0]
 80205a0:	4014      	ands	r4, r2
 80205a2:	42ac      	cmp	r4, r5
 80205a4:	d005      	beq.n	80205b2 <CRC_Lock+0x2a>
 80205a6:	681c      	ldr	r4, [r3, #0]
 80205a8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80205ac:	4014      	ands	r4, r2
 80205ae:	42ac      	cmp	r4, r5
 80205b0:	d125      	bne.n	80205fe <CRC_Lock+0x76>
 80205b2:	4b25      	ldr	r3, [pc, #148]	@ (8020648 <CRC_Lock+0xc0>)
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	d139      	bne.n	802062e <CRC_Lock+0xa6>
 80205ba:	4b24      	ldr	r3, [pc, #144]	@ (802064c <CRC_Lock+0xc4>)
 80205bc:	681a      	ldr	r2, [r3, #0]
 80205be:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80205c2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80205c6:	d00d      	beq.n	80205e4 <CRC_Lock+0x5c>
 80205c8:	681a      	ldr	r2, [r3, #0]
 80205ca:	f240 4483 	movw	r4, #1155	@ 0x483
 80205ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80205d2:	42a2      	cmp	r2, r4
 80205d4:	d006      	beq.n	80205e4 <CRC_Lock+0x5c>
 80205d6:	681b      	ldr	r3, [r3, #0]
 80205d8:	f240 4285 	movw	r2, #1157	@ 0x485
 80205dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80205e0:	4293      	cmp	r3, r2
 80205e2:	d124      	bne.n	802062e <CRC_Lock+0xa6>
 80205e4:	4b1a      	ldr	r3, [pc, #104]	@ (8020650 <CRC_Lock+0xc8>)
 80205e6:	2201      	movs	r2, #1
 80205e8:	601a      	str	r2, [r3, #0]
 80205ea:	681a      	ldr	r2, [r3, #0]
 80205ec:	2a00      	cmp	r2, #0
 80205ee:	d1fc      	bne.n	80205ea <CRC_Lock+0x62>
 80205f0:	4b18      	ldr	r3, [pc, #96]	@ (8020654 <CRC_Lock+0xcc>)
 80205f2:	6018      	str	r0, [r3, #0]
 80205f4:	6818      	ldr	r0, [r3, #0]
 80205f6:	1a43      	subs	r3, r0, r1
 80205f8:	4258      	negs	r0, r3
 80205fa:	4158      	adcs	r0, r3
 80205fc:	e00e      	b.n	802061c <CRC_Lock+0x94>
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	4013      	ands	r3, r2
 8020602:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8020606:	4293      	cmp	r3, r2
 8020608:	d111      	bne.n	802062e <CRC_Lock+0xa6>
 802060a:	4b13      	ldr	r3, [pc, #76]	@ (8020658 <CRC_Lock+0xd0>)
 802060c:	f240 4286 	movw	r2, #1158	@ 0x486
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020616:	4293      	cmp	r3, r2
 8020618:	d001      	beq.n	802061e <CRC_Lock+0x96>
 802061a:	2000      	movs	r0, #0
 802061c:	bd30      	pop	{r4, r5, pc}
 802061e:	4b0f      	ldr	r3, [pc, #60]	@ (802065c <CRC_Lock+0xd4>)
 8020620:	2201      	movs	r2, #1
 8020622:	601a      	str	r2, [r3, #0]
 8020624:	681a      	ldr	r2, [r3, #0]
 8020626:	2a00      	cmp	r2, #0
 8020628:	d1fc      	bne.n	8020624 <CRC_Lock+0x9c>
 802062a:	4b0d      	ldr	r3, [pc, #52]	@ (8020660 <CRC_Lock+0xd8>)
 802062c:	e7e1      	b.n	80205f2 <CRC_Lock+0x6a>
 802062e:	4b0d      	ldr	r3, [pc, #52]	@ (8020664 <CRC_Lock+0xdc>)
 8020630:	2201      	movs	r2, #1
 8020632:	601a      	str	r2, [r3, #0]
 8020634:	681a      	ldr	r2, [r3, #0]
 8020636:	2a00      	cmp	r2, #0
 8020638:	d1fc      	bne.n	8020634 <CRC_Lock+0xac>
 802063a:	4b0b      	ldr	r3, [pc, #44]	@ (8020668 <CRC_Lock+0xe0>)
 802063c:	e7d9      	b.n	80205f2 <CRC_Lock+0x6a>
 802063e:	bf00      	nop
 8020640:	e0002000 	.word	0xe0002000
 8020644:	e000ed00 	.word	0xe000ed00
 8020648:	e0042000 	.word	0xe0042000
 802064c:	5c001000 	.word	0x5c001000
 8020650:	58024c08 	.word	0x58024c08
 8020654:	58024c00 	.word	0x58024c00
 8020658:	46008ff0 	.word	0x46008ff0
 802065c:	46024c08 	.word	0x46024c08
 8020660:	46024c00 	.word	0x46024c00
 8020664:	40023008 	.word	0x40023008
 8020668:	40023000 	.word	0x40023000

0802066c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802066c:	6101      	str	r1, [r0, #16]
 802066e:	4770      	bx	lr

08020670 <_ZN8touchgfx8Gestures4tickEv>:
 8020670:	7b83      	ldrb	r3, [r0, #14]
 8020672:	b14b      	cbz	r3, 8020688 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020674:	8903      	ldrh	r3, [r0, #8]
 8020676:	3301      	adds	r3, #1
 8020678:	b29b      	uxth	r3, r3
 802067a:	2b07      	cmp	r3, #7
 802067c:	8103      	strh	r3, [r0, #8]
 802067e:	bf81      	itttt	hi
 8020680:	2300      	movhi	r3, #0
 8020682:	8143      	strhhi	r3, [r0, #10]
 8020684:	8183      	strhhi	r3, [r0, #12]
 8020686:	7383      	strbhi	r3, [r0, #14]
 8020688:	4770      	bx	lr
	...

0802068c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802068c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020690:	4698      	mov	r8, r3
 8020692:	8883      	ldrh	r3, [r0, #4]
 8020694:	4604      	mov	r4, r0
 8020696:	4617      	mov	r7, r2
 8020698:	f8ad 3006 	strh.w	r3, [sp, #6]
 802069c:	eba8 0303 	sub.w	r3, r8, r3
 80206a0:	4a19      	ldr	r2, [pc, #100]	@ (8020708 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80206a2:	460e      	mov	r6, r1
 80206a4:	b21b      	sxth	r3, r3
 80206a6:	88c1      	ldrh	r1, [r0, #6]
 80206a8:	9200      	str	r2, [sp, #0]
 80206aa:	2000      	movs	r0, #0
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	8aa2      	ldrh	r2, [r4, #20]
 80206b0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80206b4:	bfb8      	it	lt
 80206b6:	425b      	neglt	r3, r3
 80206b8:	f88d 0004 	strb.w	r0, [sp, #4]
 80206bc:	f8ad 1008 	strh.w	r1, [sp, #8]
 80206c0:	b21b      	sxth	r3, r3
 80206c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80206c6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80206ca:	4293      	cmp	r3, r2
 80206cc:	dc07      	bgt.n	80206de <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80206ce:	1a69      	subs	r1, r5, r1
 80206d0:	b209      	sxth	r1, r1
 80206d2:	2900      	cmp	r1, #0
 80206d4:	bfb8      	it	lt
 80206d6:	4249      	neglt	r1, r1
 80206d8:	b209      	sxth	r1, r1
 80206da:	428a      	cmp	r2, r1
 80206dc:	da10      	bge.n	8020700 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80206de:	6920      	ldr	r0, [r4, #16]
 80206e0:	4669      	mov	r1, sp
 80206e2:	eba8 0606 	sub.w	r6, r8, r6
 80206e6:	1bef      	subs	r7, r5, r7
 80206e8:	6803      	ldr	r3, [r0, #0]
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	4798      	blx	r3
 80206ee:	2300      	movs	r3, #0
 80206f0:	2001      	movs	r0, #1
 80206f2:	8166      	strh	r6, [r4, #10]
 80206f4:	8123      	strh	r3, [r4, #8]
 80206f6:	81a7      	strh	r7, [r4, #12]
 80206f8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80206fc:	80e5      	strh	r5, [r4, #6]
 80206fe:	73a0      	strb	r0, [r4, #14]
 8020700:	b004      	add	sp, #16
 8020702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020706:	bf00      	nop
 8020708:	0802322c 	.word	0x0802322c

0802070c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802070e:	461e      	mov	r6, r3
 8020710:	1e4b      	subs	r3, r1, #1
 8020712:	b085      	sub	sp, #20
 8020714:	4604      	mov	r4, r0
 8020716:	2b01      	cmp	r3, #1
 8020718:	460d      	mov	r5, r1
 802071a:	4617      	mov	r7, r2
 802071c:	d84b      	bhi.n	80207b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802071e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020722:	1cd3      	adds	r3, r2, #3
 8020724:	b29b      	uxth	r3, r3
 8020726:	2b06      	cmp	r3, #6
 8020728:	d916      	bls.n	8020758 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802072a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80207cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802072e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020732:	f8cd c004 	str.w	ip, [sp, #4]
 8020736:	f04f 0c00 	mov.w	ip, #0
 802073a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802073e:	6900      	ldr	r0, [r0, #16]
 8020740:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020744:	a901      	add	r1, sp, #4
 8020746:	f88d c008 	strb.w	ip, [sp, #8]
 802074a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802074e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020752:	6803      	ldr	r3, [r0, #0]
 8020754:	689b      	ldr	r3, [r3, #8]
 8020756:	4798      	blx	r3
 8020758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802075c:	1cd3      	adds	r3, r2, #3
 802075e:	b29b      	uxth	r3, r3
 8020760:	2b06      	cmp	r3, #6
 8020762:	d916      	bls.n	8020792 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020764:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80207cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020768:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802076c:	f8cd c004 	str.w	ip, [sp, #4]
 8020770:	f04f 0c01 	mov.w	ip, #1
 8020774:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020778:	6920      	ldr	r0, [r4, #16]
 802077a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802077e:	a901      	add	r1, sp, #4
 8020780:	f88d c008 	strb.w	ip, [sp, #8]
 8020784:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020788:	f8ad 300e 	strh.w	r3, [sp, #14]
 802078c:	6803      	ldr	r3, [r0, #0]
 802078e:	689b      	ldr	r3, [r3, #8]
 8020790:	4798      	blx	r3
 8020792:	4b0d      	ldr	r3, [pc, #52]	@ (80207c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020794:	a901      	add	r1, sp, #4
 8020796:	6920      	ldr	r0, [r4, #16]
 8020798:	9301      	str	r3, [sp, #4]
 802079a:	2300      	movs	r3, #0
 802079c:	f88d 5008 	strb.w	r5, [sp, #8]
 80207a0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80207a4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80207a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80207ac:	6803      	ldr	r3, [r0, #0]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	4798      	blx	r3
 80207b2:	b005      	add	sp, #20
 80207b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207b6:	2900      	cmp	r1, #0
 80207b8:	d1eb      	bne.n	8020792 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80207ba:	80a2      	strh	r2, [r4, #4]
 80207bc:	80c6      	strh	r6, [r0, #6]
 80207be:	60a1      	str	r1, [r4, #8]
 80207c0:	81a1      	strh	r1, [r4, #12]
 80207c2:	73a1      	strb	r1, [r4, #14]
 80207c4:	e7e5      	b.n	8020792 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80207c6:	bf00      	nop
 80207c8:	08023218 	.word	0x08023218
 80207cc:	08023240 	.word	0x08023240

080207d0 <__aeabi_atexit>:
 80207d0:	460b      	mov	r3, r1
 80207d2:	4601      	mov	r1, r0
 80207d4:	4618      	mov	r0, r3
 80207d6:	f000 b911 	b.w	80209fc <__cxa_atexit>

080207da <_ZdlPvj>:
 80207da:	f000 b812 	b.w	8020802 <_ZdlPv>

080207de <__cxa_guard_acquire>:
 80207de:	6802      	ldr	r2, [r0, #0]
 80207e0:	07d2      	lsls	r2, r2, #31
 80207e2:	4603      	mov	r3, r0
 80207e4:	d405      	bmi.n	80207f2 <__cxa_guard_acquire+0x14>
 80207e6:	7842      	ldrb	r2, [r0, #1]
 80207e8:	b102      	cbz	r2, 80207ec <__cxa_guard_acquire+0xe>
 80207ea:	deff      	udf	#255	@ 0xff
 80207ec:	2001      	movs	r0, #1
 80207ee:	7058      	strb	r0, [r3, #1]
 80207f0:	4770      	bx	lr
 80207f2:	2000      	movs	r0, #0
 80207f4:	4770      	bx	lr

080207f6 <__cxa_guard_release>:
 80207f6:	2301      	movs	r3, #1
 80207f8:	6003      	str	r3, [r0, #0]
 80207fa:	4770      	bx	lr

080207fc <__cxa_pure_virtual>:
 80207fc:	b508      	push	{r3, lr}
 80207fe:	f000 f80f 	bl	8020820 <_ZSt9terminatev>

08020802 <_ZdlPv>:
 8020802:	f000 b845 	b.w	8020890 <free>

08020806 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020806:	b508      	push	{r3, lr}
 8020808:	4780      	blx	r0
 802080a:	f000 f80e 	bl	802082a <abort>
	...

08020810 <_ZSt13get_terminatev>:
 8020810:	4b02      	ldr	r3, [pc, #8]	@ (802081c <_ZSt13get_terminatev+0xc>)
 8020812:	6818      	ldr	r0, [r3, #0]
 8020814:	f3bf 8f5b 	dmb	ish
 8020818:	4770      	bx	lr
 802081a:	bf00      	nop
 802081c:	240000ac 	.word	0x240000ac

08020820 <_ZSt9terminatev>:
 8020820:	b508      	push	{r3, lr}
 8020822:	f7ff fff5 	bl	8020810 <_ZSt13get_terminatev>
 8020826:	f7ff ffee 	bl	8020806 <_ZN10__cxxabiv111__terminateEPFvvE>

0802082a <abort>:
 802082a:	b508      	push	{r3, lr}
 802082c:	2006      	movs	r0, #6
 802082e:	f000 fa3b 	bl	8020ca8 <raise>
 8020832:	2001      	movs	r0, #1
 8020834:	f7e0 fd1a 	bl	800126c <_exit>

08020838 <__assert_func>:
 8020838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802083a:	4614      	mov	r4, r2
 802083c:	461a      	mov	r2, r3
 802083e:	4b09      	ldr	r3, [pc, #36]	@ (8020864 <__assert_func+0x2c>)
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	4605      	mov	r5, r0
 8020844:	68d8      	ldr	r0, [r3, #12]
 8020846:	b954      	cbnz	r4, 802085e <__assert_func+0x26>
 8020848:	4b07      	ldr	r3, [pc, #28]	@ (8020868 <__assert_func+0x30>)
 802084a:	461c      	mov	r4, r3
 802084c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020850:	9100      	str	r1, [sp, #0]
 8020852:	462b      	mov	r3, r5
 8020854:	4905      	ldr	r1, [pc, #20]	@ (802086c <__assert_func+0x34>)
 8020856:	f000 f983 	bl	8020b60 <fiprintf>
 802085a:	f7ff ffe6 	bl	802082a <abort>
 802085e:	4b04      	ldr	r3, [pc, #16]	@ (8020870 <__assert_func+0x38>)
 8020860:	e7f4      	b.n	802084c <__assert_func+0x14>
 8020862:	bf00      	nop
 8020864:	240000bc 	.word	0x240000bc
 8020868:	080234eb 	.word	0x080234eb
 802086c:	080234bd 	.word	0x080234bd
 8020870:	080234b0 	.word	0x080234b0

08020874 <atexit>:
 8020874:	2300      	movs	r3, #0
 8020876:	4601      	mov	r1, r0
 8020878:	461a      	mov	r2, r3
 802087a:	4618      	mov	r0, r3
 802087c:	f000 bb18 	b.w	8020eb0 <__register_exitproc>

08020880 <malloc>:
 8020880:	4b02      	ldr	r3, [pc, #8]	@ (802088c <malloc+0xc>)
 8020882:	4601      	mov	r1, r0
 8020884:	6818      	ldr	r0, [r3, #0]
 8020886:	f000 b82d 	b.w	80208e4 <_malloc_r>
 802088a:	bf00      	nop
 802088c:	240000bc 	.word	0x240000bc

08020890 <free>:
 8020890:	4b02      	ldr	r3, [pc, #8]	@ (802089c <free+0xc>)
 8020892:	4601      	mov	r1, r0
 8020894:	6818      	ldr	r0, [r3, #0]
 8020896:	f000 bb67 	b.w	8020f68 <_free_r>
 802089a:	bf00      	nop
 802089c:	240000bc 	.word	0x240000bc

080208a0 <sbrk_aligned>:
 80208a0:	b570      	push	{r4, r5, r6, lr}
 80208a2:	4e0f      	ldr	r6, [pc, #60]	@ (80208e0 <sbrk_aligned+0x40>)
 80208a4:	460c      	mov	r4, r1
 80208a6:	6831      	ldr	r1, [r6, #0]
 80208a8:	4605      	mov	r5, r0
 80208aa:	b911      	cbnz	r1, 80208b2 <sbrk_aligned+0x12>
 80208ac:	f000 faa2 	bl	8020df4 <_sbrk_r>
 80208b0:	6030      	str	r0, [r6, #0]
 80208b2:	4621      	mov	r1, r4
 80208b4:	4628      	mov	r0, r5
 80208b6:	f000 fa9d 	bl	8020df4 <_sbrk_r>
 80208ba:	1c43      	adds	r3, r0, #1
 80208bc:	d103      	bne.n	80208c6 <sbrk_aligned+0x26>
 80208be:	f04f 34ff 	mov.w	r4, #4294967295
 80208c2:	4620      	mov	r0, r4
 80208c4:	bd70      	pop	{r4, r5, r6, pc}
 80208c6:	1cc4      	adds	r4, r0, #3
 80208c8:	f024 0403 	bic.w	r4, r4, #3
 80208cc:	42a0      	cmp	r0, r4
 80208ce:	d0f8      	beq.n	80208c2 <sbrk_aligned+0x22>
 80208d0:	1a21      	subs	r1, r4, r0
 80208d2:	4628      	mov	r0, r5
 80208d4:	f000 fa8e 	bl	8020df4 <_sbrk_r>
 80208d8:	3001      	adds	r0, #1
 80208da:	d1f2      	bne.n	80208c2 <sbrk_aligned+0x22>
 80208dc:	e7ef      	b.n	80208be <sbrk_aligned+0x1e>
 80208de:	bf00      	nop
 80208e0:	2401be74 	.word	0x2401be74

080208e4 <_malloc_r>:
 80208e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208e8:	1ccd      	adds	r5, r1, #3
 80208ea:	f025 0503 	bic.w	r5, r5, #3
 80208ee:	3508      	adds	r5, #8
 80208f0:	2d0c      	cmp	r5, #12
 80208f2:	bf38      	it	cc
 80208f4:	250c      	movcc	r5, #12
 80208f6:	2d00      	cmp	r5, #0
 80208f8:	4606      	mov	r6, r0
 80208fa:	db01      	blt.n	8020900 <_malloc_r+0x1c>
 80208fc:	42a9      	cmp	r1, r5
 80208fe:	d904      	bls.n	802090a <_malloc_r+0x26>
 8020900:	230c      	movs	r3, #12
 8020902:	6033      	str	r3, [r6, #0]
 8020904:	2000      	movs	r0, #0
 8020906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802090a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80209e0 <_malloc_r+0xfc>
 802090e:	f000 f869 	bl	80209e4 <__malloc_lock>
 8020912:	f8d8 3000 	ldr.w	r3, [r8]
 8020916:	461c      	mov	r4, r3
 8020918:	bb44      	cbnz	r4, 802096c <_malloc_r+0x88>
 802091a:	4629      	mov	r1, r5
 802091c:	4630      	mov	r0, r6
 802091e:	f7ff ffbf 	bl	80208a0 <sbrk_aligned>
 8020922:	1c43      	adds	r3, r0, #1
 8020924:	4604      	mov	r4, r0
 8020926:	d158      	bne.n	80209da <_malloc_r+0xf6>
 8020928:	f8d8 4000 	ldr.w	r4, [r8]
 802092c:	4627      	mov	r7, r4
 802092e:	2f00      	cmp	r7, #0
 8020930:	d143      	bne.n	80209ba <_malloc_r+0xd6>
 8020932:	2c00      	cmp	r4, #0
 8020934:	d04b      	beq.n	80209ce <_malloc_r+0xea>
 8020936:	6823      	ldr	r3, [r4, #0]
 8020938:	4639      	mov	r1, r7
 802093a:	4630      	mov	r0, r6
 802093c:	eb04 0903 	add.w	r9, r4, r3
 8020940:	f000 fa58 	bl	8020df4 <_sbrk_r>
 8020944:	4581      	cmp	r9, r0
 8020946:	d142      	bne.n	80209ce <_malloc_r+0xea>
 8020948:	6821      	ldr	r1, [r4, #0]
 802094a:	1a6d      	subs	r5, r5, r1
 802094c:	4629      	mov	r1, r5
 802094e:	4630      	mov	r0, r6
 8020950:	f7ff ffa6 	bl	80208a0 <sbrk_aligned>
 8020954:	3001      	adds	r0, #1
 8020956:	d03a      	beq.n	80209ce <_malloc_r+0xea>
 8020958:	6823      	ldr	r3, [r4, #0]
 802095a:	442b      	add	r3, r5
 802095c:	6023      	str	r3, [r4, #0]
 802095e:	f8d8 3000 	ldr.w	r3, [r8]
 8020962:	685a      	ldr	r2, [r3, #4]
 8020964:	bb62      	cbnz	r2, 80209c0 <_malloc_r+0xdc>
 8020966:	f8c8 7000 	str.w	r7, [r8]
 802096a:	e00f      	b.n	802098c <_malloc_r+0xa8>
 802096c:	6822      	ldr	r2, [r4, #0]
 802096e:	1b52      	subs	r2, r2, r5
 8020970:	d420      	bmi.n	80209b4 <_malloc_r+0xd0>
 8020972:	2a0b      	cmp	r2, #11
 8020974:	d917      	bls.n	80209a6 <_malloc_r+0xc2>
 8020976:	1961      	adds	r1, r4, r5
 8020978:	42a3      	cmp	r3, r4
 802097a:	6025      	str	r5, [r4, #0]
 802097c:	bf18      	it	ne
 802097e:	6059      	strne	r1, [r3, #4]
 8020980:	6863      	ldr	r3, [r4, #4]
 8020982:	bf08      	it	eq
 8020984:	f8c8 1000 	streq.w	r1, [r8]
 8020988:	5162      	str	r2, [r4, r5]
 802098a:	604b      	str	r3, [r1, #4]
 802098c:	4630      	mov	r0, r6
 802098e:	f000 f82f 	bl	80209f0 <__malloc_unlock>
 8020992:	f104 000b 	add.w	r0, r4, #11
 8020996:	1d23      	adds	r3, r4, #4
 8020998:	f020 0007 	bic.w	r0, r0, #7
 802099c:	1ac2      	subs	r2, r0, r3
 802099e:	bf1c      	itt	ne
 80209a0:	1a1b      	subne	r3, r3, r0
 80209a2:	50a3      	strne	r3, [r4, r2]
 80209a4:	e7af      	b.n	8020906 <_malloc_r+0x22>
 80209a6:	6862      	ldr	r2, [r4, #4]
 80209a8:	42a3      	cmp	r3, r4
 80209aa:	bf0c      	ite	eq
 80209ac:	f8c8 2000 	streq.w	r2, [r8]
 80209b0:	605a      	strne	r2, [r3, #4]
 80209b2:	e7eb      	b.n	802098c <_malloc_r+0xa8>
 80209b4:	4623      	mov	r3, r4
 80209b6:	6864      	ldr	r4, [r4, #4]
 80209b8:	e7ae      	b.n	8020918 <_malloc_r+0x34>
 80209ba:	463c      	mov	r4, r7
 80209bc:	687f      	ldr	r7, [r7, #4]
 80209be:	e7b6      	b.n	802092e <_malloc_r+0x4a>
 80209c0:	461a      	mov	r2, r3
 80209c2:	685b      	ldr	r3, [r3, #4]
 80209c4:	42a3      	cmp	r3, r4
 80209c6:	d1fb      	bne.n	80209c0 <_malloc_r+0xdc>
 80209c8:	2300      	movs	r3, #0
 80209ca:	6053      	str	r3, [r2, #4]
 80209cc:	e7de      	b.n	802098c <_malloc_r+0xa8>
 80209ce:	230c      	movs	r3, #12
 80209d0:	6033      	str	r3, [r6, #0]
 80209d2:	4630      	mov	r0, r6
 80209d4:	f000 f80c 	bl	80209f0 <__malloc_unlock>
 80209d8:	e794      	b.n	8020904 <_malloc_r+0x20>
 80209da:	6005      	str	r5, [r0, #0]
 80209dc:	e7d6      	b.n	802098c <_malloc_r+0xa8>
 80209de:	bf00      	nop
 80209e0:	2401be78 	.word	0x2401be78

080209e4 <__malloc_lock>:
 80209e4:	4801      	ldr	r0, [pc, #4]	@ (80209ec <__malloc_lock+0x8>)
 80209e6:	f000 ba52 	b.w	8020e8e <__retarget_lock_acquire_recursive>
 80209ea:	bf00      	nop
 80209ec:	2401bfbc 	.word	0x2401bfbc

080209f0 <__malloc_unlock>:
 80209f0:	4801      	ldr	r0, [pc, #4]	@ (80209f8 <__malloc_unlock+0x8>)
 80209f2:	f000 ba4d 	b.w	8020e90 <__retarget_lock_release_recursive>
 80209f6:	bf00      	nop
 80209f8:	2401bfbc 	.word	0x2401bfbc

080209fc <__cxa_atexit>:
 80209fc:	b510      	push	{r4, lr}
 80209fe:	4604      	mov	r4, r0
 8020a00:	4804      	ldr	r0, [pc, #16]	@ (8020a14 <__cxa_atexit+0x18>)
 8020a02:	4613      	mov	r3, r2
 8020a04:	b120      	cbz	r0, 8020a10 <__cxa_atexit+0x14>
 8020a06:	460a      	mov	r2, r1
 8020a08:	2002      	movs	r0, #2
 8020a0a:	4621      	mov	r1, r4
 8020a0c:	f000 fa50 	bl	8020eb0 <__register_exitproc>
 8020a10:	bd10      	pop	{r4, pc}
 8020a12:	bf00      	nop
 8020a14:	08020eb1 	.word	0x08020eb1

08020a18 <std>:
 8020a18:	2300      	movs	r3, #0
 8020a1a:	b510      	push	{r4, lr}
 8020a1c:	4604      	mov	r4, r0
 8020a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8020a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020a26:	6083      	str	r3, [r0, #8]
 8020a28:	8181      	strh	r1, [r0, #12]
 8020a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8020a2c:	81c2      	strh	r2, [r0, #14]
 8020a2e:	6183      	str	r3, [r0, #24]
 8020a30:	4619      	mov	r1, r3
 8020a32:	2208      	movs	r2, #8
 8020a34:	305c      	adds	r0, #92	@ 0x5c
 8020a36:	f000 f906 	bl	8020c46 <memset>
 8020a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8020a70 <std+0x58>)
 8020a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8020a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8020a74 <std+0x5c>)
 8020a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020a42:	4b0d      	ldr	r3, [pc, #52]	@ (8020a78 <std+0x60>)
 8020a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020a46:	4b0d      	ldr	r3, [pc, #52]	@ (8020a7c <std+0x64>)
 8020a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8020a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8020a80 <std+0x68>)
 8020a4c:	6224      	str	r4, [r4, #32]
 8020a4e:	429c      	cmp	r4, r3
 8020a50:	d006      	beq.n	8020a60 <std+0x48>
 8020a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020a56:	4294      	cmp	r4, r2
 8020a58:	d002      	beq.n	8020a60 <std+0x48>
 8020a5a:	33d0      	adds	r3, #208	@ 0xd0
 8020a5c:	429c      	cmp	r4, r3
 8020a5e:	d105      	bne.n	8020a6c <std+0x54>
 8020a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a68:	f000 ba10 	b.w	8020e8c <__retarget_lock_init_recursive>
 8020a6c:	bd10      	pop	{r4, pc}
 8020a6e:	bf00      	nop
 8020a70:	08020bc1 	.word	0x08020bc1
 8020a74:	08020be3 	.word	0x08020be3
 8020a78:	08020c1b 	.word	0x08020c1b
 8020a7c:	08020c3f 	.word	0x08020c3f
 8020a80:	2401be7c 	.word	0x2401be7c

08020a84 <stdio_exit_handler>:
 8020a84:	4a02      	ldr	r2, [pc, #8]	@ (8020a90 <stdio_exit_handler+0xc>)
 8020a86:	4903      	ldr	r1, [pc, #12]	@ (8020a94 <stdio_exit_handler+0x10>)
 8020a88:	4803      	ldr	r0, [pc, #12]	@ (8020a98 <stdio_exit_handler+0x14>)
 8020a8a:	f000 b87b 	b.w	8020b84 <_fwalk_sglue>
 8020a8e:	bf00      	nop
 8020a90:	240000b0 	.word	0x240000b0
 8020a94:	080216a5 	.word	0x080216a5
 8020a98:	240000c0 	.word	0x240000c0

08020a9c <cleanup_stdio>:
 8020a9c:	6841      	ldr	r1, [r0, #4]
 8020a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8020ad0 <cleanup_stdio+0x34>)
 8020aa0:	4299      	cmp	r1, r3
 8020aa2:	b510      	push	{r4, lr}
 8020aa4:	4604      	mov	r4, r0
 8020aa6:	d001      	beq.n	8020aac <cleanup_stdio+0x10>
 8020aa8:	f000 fdfc 	bl	80216a4 <_fflush_r>
 8020aac:	68a1      	ldr	r1, [r4, #8]
 8020aae:	4b09      	ldr	r3, [pc, #36]	@ (8020ad4 <cleanup_stdio+0x38>)
 8020ab0:	4299      	cmp	r1, r3
 8020ab2:	d002      	beq.n	8020aba <cleanup_stdio+0x1e>
 8020ab4:	4620      	mov	r0, r4
 8020ab6:	f000 fdf5 	bl	80216a4 <_fflush_r>
 8020aba:	68e1      	ldr	r1, [r4, #12]
 8020abc:	4b06      	ldr	r3, [pc, #24]	@ (8020ad8 <cleanup_stdio+0x3c>)
 8020abe:	4299      	cmp	r1, r3
 8020ac0:	d004      	beq.n	8020acc <cleanup_stdio+0x30>
 8020ac2:	4620      	mov	r0, r4
 8020ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ac8:	f000 bdec 	b.w	80216a4 <_fflush_r>
 8020acc:	bd10      	pop	{r4, pc}
 8020ace:	bf00      	nop
 8020ad0:	2401be7c 	.word	0x2401be7c
 8020ad4:	2401bee4 	.word	0x2401bee4
 8020ad8:	2401bf4c 	.word	0x2401bf4c

08020adc <global_stdio_init.part.0>:
 8020adc:	b510      	push	{r4, lr}
 8020ade:	4b0b      	ldr	r3, [pc, #44]	@ (8020b0c <global_stdio_init.part.0+0x30>)
 8020ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8020b10 <global_stdio_init.part.0+0x34>)
 8020ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8020b14 <global_stdio_init.part.0+0x38>)
 8020ae4:	601a      	str	r2, [r3, #0]
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	2200      	movs	r2, #0
 8020aea:	2104      	movs	r1, #4
 8020aec:	f7ff ff94 	bl	8020a18 <std>
 8020af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020af4:	2201      	movs	r2, #1
 8020af6:	2109      	movs	r1, #9
 8020af8:	f7ff ff8e 	bl	8020a18 <std>
 8020afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020b00:	2202      	movs	r2, #2
 8020b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b06:	2112      	movs	r1, #18
 8020b08:	f7ff bf86 	b.w	8020a18 <std>
 8020b0c:	2401bfb4 	.word	0x2401bfb4
 8020b10:	2401be7c 	.word	0x2401be7c
 8020b14:	08020a85 	.word	0x08020a85

08020b18 <__sfp_lock_acquire>:
 8020b18:	4801      	ldr	r0, [pc, #4]	@ (8020b20 <__sfp_lock_acquire+0x8>)
 8020b1a:	f000 b9b8 	b.w	8020e8e <__retarget_lock_acquire_recursive>
 8020b1e:	bf00      	nop
 8020b20:	2401bfbe 	.word	0x2401bfbe

08020b24 <__sfp_lock_release>:
 8020b24:	4801      	ldr	r0, [pc, #4]	@ (8020b2c <__sfp_lock_release+0x8>)
 8020b26:	f000 b9b3 	b.w	8020e90 <__retarget_lock_release_recursive>
 8020b2a:	bf00      	nop
 8020b2c:	2401bfbe 	.word	0x2401bfbe

08020b30 <__sinit>:
 8020b30:	b510      	push	{r4, lr}
 8020b32:	4604      	mov	r4, r0
 8020b34:	f7ff fff0 	bl	8020b18 <__sfp_lock_acquire>
 8020b38:	6a23      	ldr	r3, [r4, #32]
 8020b3a:	b11b      	cbz	r3, 8020b44 <__sinit+0x14>
 8020b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b40:	f7ff bff0 	b.w	8020b24 <__sfp_lock_release>
 8020b44:	4b04      	ldr	r3, [pc, #16]	@ (8020b58 <__sinit+0x28>)
 8020b46:	6223      	str	r3, [r4, #32]
 8020b48:	4b04      	ldr	r3, [pc, #16]	@ (8020b5c <__sinit+0x2c>)
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	2b00      	cmp	r3, #0
 8020b4e:	d1f5      	bne.n	8020b3c <__sinit+0xc>
 8020b50:	f7ff ffc4 	bl	8020adc <global_stdio_init.part.0>
 8020b54:	e7f2      	b.n	8020b3c <__sinit+0xc>
 8020b56:	bf00      	nop
 8020b58:	08020a9d 	.word	0x08020a9d
 8020b5c:	2401bfb4 	.word	0x2401bfb4

08020b60 <fiprintf>:
 8020b60:	b40e      	push	{r1, r2, r3}
 8020b62:	b503      	push	{r0, r1, lr}
 8020b64:	4601      	mov	r1, r0
 8020b66:	ab03      	add	r3, sp, #12
 8020b68:	4805      	ldr	r0, [pc, #20]	@ (8020b80 <fiprintf+0x20>)
 8020b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b6e:	6800      	ldr	r0, [r0, #0]
 8020b70:	9301      	str	r3, [sp, #4]
 8020b72:	f000 fa6d 	bl	8021050 <_vfiprintf_r>
 8020b76:	b002      	add	sp, #8
 8020b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8020b7c:	b003      	add	sp, #12
 8020b7e:	4770      	bx	lr
 8020b80:	240000bc 	.word	0x240000bc

08020b84 <_fwalk_sglue>:
 8020b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b88:	4607      	mov	r7, r0
 8020b8a:	4688      	mov	r8, r1
 8020b8c:	4614      	mov	r4, r2
 8020b8e:	2600      	movs	r6, #0
 8020b90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b94:	f1b9 0901 	subs.w	r9, r9, #1
 8020b98:	d505      	bpl.n	8020ba6 <_fwalk_sglue+0x22>
 8020b9a:	6824      	ldr	r4, [r4, #0]
 8020b9c:	2c00      	cmp	r4, #0
 8020b9e:	d1f7      	bne.n	8020b90 <_fwalk_sglue+0xc>
 8020ba0:	4630      	mov	r0, r6
 8020ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ba6:	89ab      	ldrh	r3, [r5, #12]
 8020ba8:	2b01      	cmp	r3, #1
 8020baa:	d907      	bls.n	8020bbc <_fwalk_sglue+0x38>
 8020bac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020bb0:	3301      	adds	r3, #1
 8020bb2:	d003      	beq.n	8020bbc <_fwalk_sglue+0x38>
 8020bb4:	4629      	mov	r1, r5
 8020bb6:	4638      	mov	r0, r7
 8020bb8:	47c0      	blx	r8
 8020bba:	4306      	orrs	r6, r0
 8020bbc:	3568      	adds	r5, #104	@ 0x68
 8020bbe:	e7e9      	b.n	8020b94 <_fwalk_sglue+0x10>

08020bc0 <__sread>:
 8020bc0:	b510      	push	{r4, lr}
 8020bc2:	460c      	mov	r4, r1
 8020bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bc8:	f000 f8ee 	bl	8020da8 <_read_r>
 8020bcc:	2800      	cmp	r0, #0
 8020bce:	bfab      	itete	ge
 8020bd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8020bd4:	181b      	addge	r3, r3, r0
 8020bd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020bda:	bfac      	ite	ge
 8020bdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020bde:	81a3      	strhlt	r3, [r4, #12]
 8020be0:	bd10      	pop	{r4, pc}

08020be2 <__swrite>:
 8020be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020be6:	461f      	mov	r7, r3
 8020be8:	898b      	ldrh	r3, [r1, #12]
 8020bea:	05db      	lsls	r3, r3, #23
 8020bec:	4605      	mov	r5, r0
 8020bee:	460c      	mov	r4, r1
 8020bf0:	4616      	mov	r6, r2
 8020bf2:	d505      	bpl.n	8020c00 <__swrite+0x1e>
 8020bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bf8:	2302      	movs	r3, #2
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	f000 f8c2 	bl	8020d84 <_lseek_r>
 8020c00:	89a3      	ldrh	r3, [r4, #12]
 8020c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020c06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020c0a:	81a3      	strh	r3, [r4, #12]
 8020c0c:	4632      	mov	r2, r6
 8020c0e:	463b      	mov	r3, r7
 8020c10:	4628      	mov	r0, r5
 8020c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020c16:	f000 b8fd 	b.w	8020e14 <_write_r>

08020c1a <__sseek>:
 8020c1a:	b510      	push	{r4, lr}
 8020c1c:	460c      	mov	r4, r1
 8020c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c22:	f000 f8af 	bl	8020d84 <_lseek_r>
 8020c26:	1c43      	adds	r3, r0, #1
 8020c28:	89a3      	ldrh	r3, [r4, #12]
 8020c2a:	bf15      	itete	ne
 8020c2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020c2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020c32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020c36:	81a3      	strheq	r3, [r4, #12]
 8020c38:	bf18      	it	ne
 8020c3a:	81a3      	strhne	r3, [r4, #12]
 8020c3c:	bd10      	pop	{r4, pc}

08020c3e <__sclose>:
 8020c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c42:	f000 b839 	b.w	8020cb8 <_close_r>

08020c46 <memset>:
 8020c46:	4402      	add	r2, r0
 8020c48:	4603      	mov	r3, r0
 8020c4a:	4293      	cmp	r3, r2
 8020c4c:	d100      	bne.n	8020c50 <memset+0xa>
 8020c4e:	4770      	bx	lr
 8020c50:	f803 1b01 	strb.w	r1, [r3], #1
 8020c54:	e7f9      	b.n	8020c4a <memset+0x4>

08020c56 <_raise_r>:
 8020c56:	291f      	cmp	r1, #31
 8020c58:	b538      	push	{r3, r4, r5, lr}
 8020c5a:	4605      	mov	r5, r0
 8020c5c:	460c      	mov	r4, r1
 8020c5e:	d904      	bls.n	8020c6a <_raise_r+0x14>
 8020c60:	2316      	movs	r3, #22
 8020c62:	6003      	str	r3, [r0, #0]
 8020c64:	f04f 30ff 	mov.w	r0, #4294967295
 8020c68:	bd38      	pop	{r3, r4, r5, pc}
 8020c6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020c6c:	b112      	cbz	r2, 8020c74 <_raise_r+0x1e>
 8020c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020c72:	b94b      	cbnz	r3, 8020c88 <_raise_r+0x32>
 8020c74:	4628      	mov	r0, r5
 8020c76:	f000 f8bb 	bl	8020df0 <_getpid_r>
 8020c7a:	4622      	mov	r2, r4
 8020c7c:	4601      	mov	r1, r0
 8020c7e:	4628      	mov	r0, r5
 8020c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c84:	f000 b8a2 	b.w	8020dcc <_kill_r>
 8020c88:	2b01      	cmp	r3, #1
 8020c8a:	d00a      	beq.n	8020ca2 <_raise_r+0x4c>
 8020c8c:	1c59      	adds	r1, r3, #1
 8020c8e:	d103      	bne.n	8020c98 <_raise_r+0x42>
 8020c90:	2316      	movs	r3, #22
 8020c92:	6003      	str	r3, [r0, #0]
 8020c94:	2001      	movs	r0, #1
 8020c96:	e7e7      	b.n	8020c68 <_raise_r+0x12>
 8020c98:	2100      	movs	r1, #0
 8020c9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020c9e:	4620      	mov	r0, r4
 8020ca0:	4798      	blx	r3
 8020ca2:	2000      	movs	r0, #0
 8020ca4:	e7e0      	b.n	8020c68 <_raise_r+0x12>
	...

08020ca8 <raise>:
 8020ca8:	4b02      	ldr	r3, [pc, #8]	@ (8020cb4 <raise+0xc>)
 8020caa:	4601      	mov	r1, r0
 8020cac:	6818      	ldr	r0, [r3, #0]
 8020cae:	f7ff bfd2 	b.w	8020c56 <_raise_r>
 8020cb2:	bf00      	nop
 8020cb4:	240000bc 	.word	0x240000bc

08020cb8 <_close_r>:
 8020cb8:	b538      	push	{r3, r4, r5, lr}
 8020cba:	4d06      	ldr	r5, [pc, #24]	@ (8020cd4 <_close_r+0x1c>)
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	4604      	mov	r4, r0
 8020cc0:	4608      	mov	r0, r1
 8020cc2:	602b      	str	r3, [r5, #0]
 8020cc4:	f7e0 fb16 	bl	80012f4 <_close>
 8020cc8:	1c43      	adds	r3, r0, #1
 8020cca:	d102      	bne.n	8020cd2 <_close_r+0x1a>
 8020ccc:	682b      	ldr	r3, [r5, #0]
 8020cce:	b103      	cbz	r3, 8020cd2 <_close_r+0x1a>
 8020cd0:	6023      	str	r3, [r4, #0]
 8020cd2:	bd38      	pop	{r3, r4, r5, pc}
 8020cd4:	2401bfb8 	.word	0x2401bfb8

08020cd8 <_reclaim_reent>:
 8020cd8:	4b29      	ldr	r3, [pc, #164]	@ (8020d80 <_reclaim_reent+0xa8>)
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	4283      	cmp	r3, r0
 8020cde:	b570      	push	{r4, r5, r6, lr}
 8020ce0:	4604      	mov	r4, r0
 8020ce2:	d04b      	beq.n	8020d7c <_reclaim_reent+0xa4>
 8020ce4:	69c3      	ldr	r3, [r0, #28]
 8020ce6:	b1ab      	cbz	r3, 8020d14 <_reclaim_reent+0x3c>
 8020ce8:	68db      	ldr	r3, [r3, #12]
 8020cea:	b16b      	cbz	r3, 8020d08 <_reclaim_reent+0x30>
 8020cec:	2500      	movs	r5, #0
 8020cee:	69e3      	ldr	r3, [r4, #28]
 8020cf0:	68db      	ldr	r3, [r3, #12]
 8020cf2:	5959      	ldr	r1, [r3, r5]
 8020cf4:	2900      	cmp	r1, #0
 8020cf6:	d13b      	bne.n	8020d70 <_reclaim_reent+0x98>
 8020cf8:	3504      	adds	r5, #4
 8020cfa:	2d80      	cmp	r5, #128	@ 0x80
 8020cfc:	d1f7      	bne.n	8020cee <_reclaim_reent+0x16>
 8020cfe:	69e3      	ldr	r3, [r4, #28]
 8020d00:	4620      	mov	r0, r4
 8020d02:	68d9      	ldr	r1, [r3, #12]
 8020d04:	f000 f930 	bl	8020f68 <_free_r>
 8020d08:	69e3      	ldr	r3, [r4, #28]
 8020d0a:	6819      	ldr	r1, [r3, #0]
 8020d0c:	b111      	cbz	r1, 8020d14 <_reclaim_reent+0x3c>
 8020d0e:	4620      	mov	r0, r4
 8020d10:	f000 f92a 	bl	8020f68 <_free_r>
 8020d14:	6961      	ldr	r1, [r4, #20]
 8020d16:	b111      	cbz	r1, 8020d1e <_reclaim_reent+0x46>
 8020d18:	4620      	mov	r0, r4
 8020d1a:	f000 f925 	bl	8020f68 <_free_r>
 8020d1e:	69e1      	ldr	r1, [r4, #28]
 8020d20:	b111      	cbz	r1, 8020d28 <_reclaim_reent+0x50>
 8020d22:	4620      	mov	r0, r4
 8020d24:	f000 f920 	bl	8020f68 <_free_r>
 8020d28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020d2a:	b111      	cbz	r1, 8020d32 <_reclaim_reent+0x5a>
 8020d2c:	4620      	mov	r0, r4
 8020d2e:	f000 f91b 	bl	8020f68 <_free_r>
 8020d32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020d34:	b111      	cbz	r1, 8020d3c <_reclaim_reent+0x64>
 8020d36:	4620      	mov	r0, r4
 8020d38:	f000 f916 	bl	8020f68 <_free_r>
 8020d3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020d3e:	b111      	cbz	r1, 8020d46 <_reclaim_reent+0x6e>
 8020d40:	4620      	mov	r0, r4
 8020d42:	f000 f911 	bl	8020f68 <_free_r>
 8020d46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020d48:	b111      	cbz	r1, 8020d50 <_reclaim_reent+0x78>
 8020d4a:	4620      	mov	r0, r4
 8020d4c:	f000 f90c 	bl	8020f68 <_free_r>
 8020d50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020d52:	b111      	cbz	r1, 8020d5a <_reclaim_reent+0x82>
 8020d54:	4620      	mov	r0, r4
 8020d56:	f000 f907 	bl	8020f68 <_free_r>
 8020d5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020d5c:	b111      	cbz	r1, 8020d64 <_reclaim_reent+0x8c>
 8020d5e:	4620      	mov	r0, r4
 8020d60:	f000 f902 	bl	8020f68 <_free_r>
 8020d64:	6a23      	ldr	r3, [r4, #32]
 8020d66:	b14b      	cbz	r3, 8020d7c <_reclaim_reent+0xa4>
 8020d68:	4620      	mov	r0, r4
 8020d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020d6e:	4718      	bx	r3
 8020d70:	680e      	ldr	r6, [r1, #0]
 8020d72:	4620      	mov	r0, r4
 8020d74:	f000 f8f8 	bl	8020f68 <_free_r>
 8020d78:	4631      	mov	r1, r6
 8020d7a:	e7bb      	b.n	8020cf4 <_reclaim_reent+0x1c>
 8020d7c:	bd70      	pop	{r4, r5, r6, pc}
 8020d7e:	bf00      	nop
 8020d80:	240000bc 	.word	0x240000bc

08020d84 <_lseek_r>:
 8020d84:	b538      	push	{r3, r4, r5, lr}
 8020d86:	4d07      	ldr	r5, [pc, #28]	@ (8020da4 <_lseek_r+0x20>)
 8020d88:	4604      	mov	r4, r0
 8020d8a:	4608      	mov	r0, r1
 8020d8c:	4611      	mov	r1, r2
 8020d8e:	2200      	movs	r2, #0
 8020d90:	602a      	str	r2, [r5, #0]
 8020d92:	461a      	mov	r2, r3
 8020d94:	f7e0 fad5 	bl	8001342 <_lseek>
 8020d98:	1c43      	adds	r3, r0, #1
 8020d9a:	d102      	bne.n	8020da2 <_lseek_r+0x1e>
 8020d9c:	682b      	ldr	r3, [r5, #0]
 8020d9e:	b103      	cbz	r3, 8020da2 <_lseek_r+0x1e>
 8020da0:	6023      	str	r3, [r4, #0]
 8020da2:	bd38      	pop	{r3, r4, r5, pc}
 8020da4:	2401bfb8 	.word	0x2401bfb8

08020da8 <_read_r>:
 8020da8:	b538      	push	{r3, r4, r5, lr}
 8020daa:	4d07      	ldr	r5, [pc, #28]	@ (8020dc8 <_read_r+0x20>)
 8020dac:	4604      	mov	r4, r0
 8020dae:	4608      	mov	r0, r1
 8020db0:	4611      	mov	r1, r2
 8020db2:	2200      	movs	r2, #0
 8020db4:	602a      	str	r2, [r5, #0]
 8020db6:	461a      	mov	r2, r3
 8020db8:	f7e0 fa63 	bl	8001282 <_read>
 8020dbc:	1c43      	adds	r3, r0, #1
 8020dbe:	d102      	bne.n	8020dc6 <_read_r+0x1e>
 8020dc0:	682b      	ldr	r3, [r5, #0]
 8020dc2:	b103      	cbz	r3, 8020dc6 <_read_r+0x1e>
 8020dc4:	6023      	str	r3, [r4, #0]
 8020dc6:	bd38      	pop	{r3, r4, r5, pc}
 8020dc8:	2401bfb8 	.word	0x2401bfb8

08020dcc <_kill_r>:
 8020dcc:	b538      	push	{r3, r4, r5, lr}
 8020dce:	4d07      	ldr	r5, [pc, #28]	@ (8020dec <_kill_r+0x20>)
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	4604      	mov	r4, r0
 8020dd4:	4608      	mov	r0, r1
 8020dd6:	4611      	mov	r1, r2
 8020dd8:	602b      	str	r3, [r5, #0]
 8020dda:	f7e0 fa37 	bl	800124c <_kill>
 8020dde:	1c43      	adds	r3, r0, #1
 8020de0:	d102      	bne.n	8020de8 <_kill_r+0x1c>
 8020de2:	682b      	ldr	r3, [r5, #0]
 8020de4:	b103      	cbz	r3, 8020de8 <_kill_r+0x1c>
 8020de6:	6023      	str	r3, [r4, #0]
 8020de8:	bd38      	pop	{r3, r4, r5, pc}
 8020dea:	bf00      	nop
 8020dec:	2401bfb8 	.word	0x2401bfb8

08020df0 <_getpid_r>:
 8020df0:	f7e0 ba24 	b.w	800123c <_getpid>

08020df4 <_sbrk_r>:
 8020df4:	b538      	push	{r3, r4, r5, lr}
 8020df6:	4d06      	ldr	r5, [pc, #24]	@ (8020e10 <_sbrk_r+0x1c>)
 8020df8:	2300      	movs	r3, #0
 8020dfa:	4604      	mov	r4, r0
 8020dfc:	4608      	mov	r0, r1
 8020dfe:	602b      	str	r3, [r5, #0]
 8020e00:	f7e0 faac 	bl	800135c <_sbrk>
 8020e04:	1c43      	adds	r3, r0, #1
 8020e06:	d102      	bne.n	8020e0e <_sbrk_r+0x1a>
 8020e08:	682b      	ldr	r3, [r5, #0]
 8020e0a:	b103      	cbz	r3, 8020e0e <_sbrk_r+0x1a>
 8020e0c:	6023      	str	r3, [r4, #0]
 8020e0e:	bd38      	pop	{r3, r4, r5, pc}
 8020e10:	2401bfb8 	.word	0x2401bfb8

08020e14 <_write_r>:
 8020e14:	b538      	push	{r3, r4, r5, lr}
 8020e16:	4d07      	ldr	r5, [pc, #28]	@ (8020e34 <_write_r+0x20>)
 8020e18:	4604      	mov	r4, r0
 8020e1a:	4608      	mov	r0, r1
 8020e1c:	4611      	mov	r1, r2
 8020e1e:	2200      	movs	r2, #0
 8020e20:	602a      	str	r2, [r5, #0]
 8020e22:	461a      	mov	r2, r3
 8020e24:	f7e0 fa4a 	bl	80012bc <_write>
 8020e28:	1c43      	adds	r3, r0, #1
 8020e2a:	d102      	bne.n	8020e32 <_write_r+0x1e>
 8020e2c:	682b      	ldr	r3, [r5, #0]
 8020e2e:	b103      	cbz	r3, 8020e32 <_write_r+0x1e>
 8020e30:	6023      	str	r3, [r4, #0]
 8020e32:	bd38      	pop	{r3, r4, r5, pc}
 8020e34:	2401bfb8 	.word	0x2401bfb8

08020e38 <__errno>:
 8020e38:	4b01      	ldr	r3, [pc, #4]	@ (8020e40 <__errno+0x8>)
 8020e3a:	6818      	ldr	r0, [r3, #0]
 8020e3c:	4770      	bx	lr
 8020e3e:	bf00      	nop
 8020e40:	240000bc 	.word	0x240000bc

08020e44 <__libc_init_array>:
 8020e44:	b570      	push	{r4, r5, r6, lr}
 8020e46:	4d0d      	ldr	r5, [pc, #52]	@ (8020e7c <__libc_init_array+0x38>)
 8020e48:	4c0d      	ldr	r4, [pc, #52]	@ (8020e80 <__libc_init_array+0x3c>)
 8020e4a:	1b64      	subs	r4, r4, r5
 8020e4c:	10a4      	asrs	r4, r4, #2
 8020e4e:	2600      	movs	r6, #0
 8020e50:	42a6      	cmp	r6, r4
 8020e52:	d109      	bne.n	8020e68 <__libc_init_array+0x24>
 8020e54:	4d0b      	ldr	r5, [pc, #44]	@ (8020e84 <__libc_init_array+0x40>)
 8020e56:	4c0c      	ldr	r4, [pc, #48]	@ (8020e88 <__libc_init_array+0x44>)
 8020e58:	f000 fd64 	bl	8021924 <_init>
 8020e5c:	1b64      	subs	r4, r4, r5
 8020e5e:	10a4      	asrs	r4, r4, #2
 8020e60:	2600      	movs	r6, #0
 8020e62:	42a6      	cmp	r6, r4
 8020e64:	d105      	bne.n	8020e72 <__libc_init_array+0x2e>
 8020e66:	bd70      	pop	{r4, r5, r6, pc}
 8020e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e6c:	4798      	blx	r3
 8020e6e:	3601      	adds	r6, #1
 8020e70:	e7ee      	b.n	8020e50 <__libc_init_array+0xc>
 8020e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8020e76:	4798      	blx	r3
 8020e78:	3601      	adds	r6, #1
 8020e7a:	e7f2      	b.n	8020e62 <__libc_init_array+0x1e>
 8020e7c:	08023544 	.word	0x08023544
 8020e80:	08023544 	.word	0x08023544
 8020e84:	08023544 	.word	0x08023544
 8020e88:	08023558 	.word	0x08023558

08020e8c <__retarget_lock_init_recursive>:
 8020e8c:	4770      	bx	lr

08020e8e <__retarget_lock_acquire_recursive>:
 8020e8e:	4770      	bx	lr

08020e90 <__retarget_lock_release_recursive>:
 8020e90:	4770      	bx	lr

08020e92 <memcpy>:
 8020e92:	440a      	add	r2, r1
 8020e94:	4291      	cmp	r1, r2
 8020e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e9a:	d100      	bne.n	8020e9e <memcpy+0xc>
 8020e9c:	4770      	bx	lr
 8020e9e:	b510      	push	{r4, lr}
 8020ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020ea8:	4291      	cmp	r1, r2
 8020eaa:	d1f9      	bne.n	8020ea0 <memcpy+0xe>
 8020eac:	bd10      	pop	{r4, pc}
	...

08020eb0 <__register_exitproc>:
 8020eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020eb4:	4d27      	ldr	r5, [pc, #156]	@ (8020f54 <__register_exitproc+0xa4>)
 8020eb6:	4607      	mov	r7, r0
 8020eb8:	6828      	ldr	r0, [r5, #0]
 8020eba:	4691      	mov	r9, r2
 8020ebc:	460e      	mov	r6, r1
 8020ebe:	4698      	mov	r8, r3
 8020ec0:	f7ff ffe5 	bl	8020e8e <__retarget_lock_acquire_recursive>
 8020ec4:	4a24      	ldr	r2, [pc, #144]	@ (8020f58 <__register_exitproc+0xa8>)
 8020ec6:	6814      	ldr	r4, [r2, #0]
 8020ec8:	b93c      	cbnz	r4, 8020eda <__register_exitproc+0x2a>
 8020eca:	4b24      	ldr	r3, [pc, #144]	@ (8020f5c <__register_exitproc+0xac>)
 8020ecc:	6013      	str	r3, [r2, #0]
 8020ece:	4a24      	ldr	r2, [pc, #144]	@ (8020f60 <__register_exitproc+0xb0>)
 8020ed0:	b112      	cbz	r2, 8020ed8 <__register_exitproc+0x28>
 8020ed2:	6812      	ldr	r2, [r2, #0]
 8020ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8020ed8:	4c20      	ldr	r4, [pc, #128]	@ (8020f5c <__register_exitproc+0xac>)
 8020eda:	6863      	ldr	r3, [r4, #4]
 8020edc:	2b1f      	cmp	r3, #31
 8020ede:	dd06      	ble.n	8020eee <__register_exitproc+0x3e>
 8020ee0:	6828      	ldr	r0, [r5, #0]
 8020ee2:	f7ff ffd5 	bl	8020e90 <__retarget_lock_release_recursive>
 8020ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8020eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020eee:	b32f      	cbz	r7, 8020f3c <__register_exitproc+0x8c>
 8020ef0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8020ef4:	b968      	cbnz	r0, 8020f12 <__register_exitproc+0x62>
 8020ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8020f64 <__register_exitproc+0xb4>)
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d0f1      	beq.n	8020ee0 <__register_exitproc+0x30>
 8020efc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020f00:	f7ff fcbe 	bl	8020880 <malloc>
 8020f04:	2800      	cmp	r0, #0
 8020f06:	d0eb      	beq.n	8020ee0 <__register_exitproc+0x30>
 8020f08:	2300      	movs	r3, #0
 8020f0a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020f0e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8020f12:	6863      	ldr	r3, [r4, #4]
 8020f14:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020f18:	2201      	movs	r2, #1
 8020f1a:	409a      	lsls	r2, r3
 8020f1c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020f20:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020f24:	4313      	orrs	r3, r2
 8020f26:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020f2a:	2f02      	cmp	r7, #2
 8020f2c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8020f30:	bf02      	ittt	eq
 8020f32:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8020f36:	4313      	orreq	r3, r2
 8020f38:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8020f3c:	6863      	ldr	r3, [r4, #4]
 8020f3e:	6828      	ldr	r0, [r5, #0]
 8020f40:	1c5a      	adds	r2, r3, #1
 8020f42:	3302      	adds	r3, #2
 8020f44:	6062      	str	r2, [r4, #4]
 8020f46:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8020f4a:	f7ff ffa1 	bl	8020e90 <__retarget_lock_release_recursive>
 8020f4e:	2000      	movs	r0, #0
 8020f50:	e7cb      	b.n	8020eea <__register_exitproc+0x3a>
 8020f52:	bf00      	nop
 8020f54:	2400010c 	.word	0x2400010c
 8020f58:	2401c04c 	.word	0x2401c04c
 8020f5c:	2401bfc0 	.word	0x2401bfc0
 8020f60:	080234ec 	.word	0x080234ec
 8020f64:	08020881 	.word	0x08020881

08020f68 <_free_r>:
 8020f68:	b538      	push	{r3, r4, r5, lr}
 8020f6a:	4605      	mov	r5, r0
 8020f6c:	2900      	cmp	r1, #0
 8020f6e:	d041      	beq.n	8020ff4 <_free_r+0x8c>
 8020f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020f74:	1f0c      	subs	r4, r1, #4
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	bfb8      	it	lt
 8020f7a:	18e4      	addlt	r4, r4, r3
 8020f7c:	f7ff fd32 	bl	80209e4 <__malloc_lock>
 8020f80:	4a1d      	ldr	r2, [pc, #116]	@ (8020ff8 <_free_r+0x90>)
 8020f82:	6813      	ldr	r3, [r2, #0]
 8020f84:	b933      	cbnz	r3, 8020f94 <_free_r+0x2c>
 8020f86:	6063      	str	r3, [r4, #4]
 8020f88:	6014      	str	r4, [r2, #0]
 8020f8a:	4628      	mov	r0, r5
 8020f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020f90:	f7ff bd2e 	b.w	80209f0 <__malloc_unlock>
 8020f94:	42a3      	cmp	r3, r4
 8020f96:	d908      	bls.n	8020faa <_free_r+0x42>
 8020f98:	6820      	ldr	r0, [r4, #0]
 8020f9a:	1821      	adds	r1, r4, r0
 8020f9c:	428b      	cmp	r3, r1
 8020f9e:	bf01      	itttt	eq
 8020fa0:	6819      	ldreq	r1, [r3, #0]
 8020fa2:	685b      	ldreq	r3, [r3, #4]
 8020fa4:	1809      	addeq	r1, r1, r0
 8020fa6:	6021      	streq	r1, [r4, #0]
 8020fa8:	e7ed      	b.n	8020f86 <_free_r+0x1e>
 8020faa:	461a      	mov	r2, r3
 8020fac:	685b      	ldr	r3, [r3, #4]
 8020fae:	b10b      	cbz	r3, 8020fb4 <_free_r+0x4c>
 8020fb0:	42a3      	cmp	r3, r4
 8020fb2:	d9fa      	bls.n	8020faa <_free_r+0x42>
 8020fb4:	6811      	ldr	r1, [r2, #0]
 8020fb6:	1850      	adds	r0, r2, r1
 8020fb8:	42a0      	cmp	r0, r4
 8020fba:	d10b      	bne.n	8020fd4 <_free_r+0x6c>
 8020fbc:	6820      	ldr	r0, [r4, #0]
 8020fbe:	4401      	add	r1, r0
 8020fc0:	1850      	adds	r0, r2, r1
 8020fc2:	4283      	cmp	r3, r0
 8020fc4:	6011      	str	r1, [r2, #0]
 8020fc6:	d1e0      	bne.n	8020f8a <_free_r+0x22>
 8020fc8:	6818      	ldr	r0, [r3, #0]
 8020fca:	685b      	ldr	r3, [r3, #4]
 8020fcc:	6053      	str	r3, [r2, #4]
 8020fce:	4408      	add	r0, r1
 8020fd0:	6010      	str	r0, [r2, #0]
 8020fd2:	e7da      	b.n	8020f8a <_free_r+0x22>
 8020fd4:	d902      	bls.n	8020fdc <_free_r+0x74>
 8020fd6:	230c      	movs	r3, #12
 8020fd8:	602b      	str	r3, [r5, #0]
 8020fda:	e7d6      	b.n	8020f8a <_free_r+0x22>
 8020fdc:	6820      	ldr	r0, [r4, #0]
 8020fde:	1821      	adds	r1, r4, r0
 8020fe0:	428b      	cmp	r3, r1
 8020fe2:	bf04      	itt	eq
 8020fe4:	6819      	ldreq	r1, [r3, #0]
 8020fe6:	685b      	ldreq	r3, [r3, #4]
 8020fe8:	6063      	str	r3, [r4, #4]
 8020fea:	bf04      	itt	eq
 8020fec:	1809      	addeq	r1, r1, r0
 8020fee:	6021      	streq	r1, [r4, #0]
 8020ff0:	6054      	str	r4, [r2, #4]
 8020ff2:	e7ca      	b.n	8020f8a <_free_r+0x22>
 8020ff4:	bd38      	pop	{r3, r4, r5, pc}
 8020ff6:	bf00      	nop
 8020ff8:	2401be78 	.word	0x2401be78

08020ffc <__sfputc_r>:
 8020ffc:	6893      	ldr	r3, [r2, #8]
 8020ffe:	3b01      	subs	r3, #1
 8021000:	2b00      	cmp	r3, #0
 8021002:	b410      	push	{r4}
 8021004:	6093      	str	r3, [r2, #8]
 8021006:	da08      	bge.n	802101a <__sfputc_r+0x1e>
 8021008:	6994      	ldr	r4, [r2, #24]
 802100a:	42a3      	cmp	r3, r4
 802100c:	db01      	blt.n	8021012 <__sfputc_r+0x16>
 802100e:	290a      	cmp	r1, #10
 8021010:	d103      	bne.n	802101a <__sfputc_r+0x1e>
 8021012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021016:	f000 bb6d 	b.w	80216f4 <__swbuf_r>
 802101a:	6813      	ldr	r3, [r2, #0]
 802101c:	1c58      	adds	r0, r3, #1
 802101e:	6010      	str	r0, [r2, #0]
 8021020:	7019      	strb	r1, [r3, #0]
 8021022:	4608      	mov	r0, r1
 8021024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021028:	4770      	bx	lr

0802102a <__sfputs_r>:
 802102a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802102c:	4606      	mov	r6, r0
 802102e:	460f      	mov	r7, r1
 8021030:	4614      	mov	r4, r2
 8021032:	18d5      	adds	r5, r2, r3
 8021034:	42ac      	cmp	r4, r5
 8021036:	d101      	bne.n	802103c <__sfputs_r+0x12>
 8021038:	2000      	movs	r0, #0
 802103a:	e007      	b.n	802104c <__sfputs_r+0x22>
 802103c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021040:	463a      	mov	r2, r7
 8021042:	4630      	mov	r0, r6
 8021044:	f7ff ffda 	bl	8020ffc <__sfputc_r>
 8021048:	1c43      	adds	r3, r0, #1
 802104a:	d1f3      	bne.n	8021034 <__sfputs_r+0xa>
 802104c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021050 <_vfiprintf_r>:
 8021050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021054:	460d      	mov	r5, r1
 8021056:	b09d      	sub	sp, #116	@ 0x74
 8021058:	4614      	mov	r4, r2
 802105a:	4698      	mov	r8, r3
 802105c:	4606      	mov	r6, r0
 802105e:	b118      	cbz	r0, 8021068 <_vfiprintf_r+0x18>
 8021060:	6a03      	ldr	r3, [r0, #32]
 8021062:	b90b      	cbnz	r3, 8021068 <_vfiprintf_r+0x18>
 8021064:	f7ff fd64 	bl	8020b30 <__sinit>
 8021068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802106a:	07d9      	lsls	r1, r3, #31
 802106c:	d405      	bmi.n	802107a <_vfiprintf_r+0x2a>
 802106e:	89ab      	ldrh	r3, [r5, #12]
 8021070:	059a      	lsls	r2, r3, #22
 8021072:	d402      	bmi.n	802107a <_vfiprintf_r+0x2a>
 8021074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021076:	f7ff ff0a 	bl	8020e8e <__retarget_lock_acquire_recursive>
 802107a:	89ab      	ldrh	r3, [r5, #12]
 802107c:	071b      	lsls	r3, r3, #28
 802107e:	d501      	bpl.n	8021084 <_vfiprintf_r+0x34>
 8021080:	692b      	ldr	r3, [r5, #16]
 8021082:	b99b      	cbnz	r3, 80210ac <_vfiprintf_r+0x5c>
 8021084:	4629      	mov	r1, r5
 8021086:	4630      	mov	r0, r6
 8021088:	f000 fb72 	bl	8021770 <__swsetup_r>
 802108c:	b170      	cbz	r0, 80210ac <_vfiprintf_r+0x5c>
 802108e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021090:	07dc      	lsls	r4, r3, #31
 8021092:	d504      	bpl.n	802109e <_vfiprintf_r+0x4e>
 8021094:	f04f 30ff 	mov.w	r0, #4294967295
 8021098:	b01d      	add	sp, #116	@ 0x74
 802109a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802109e:	89ab      	ldrh	r3, [r5, #12]
 80210a0:	0598      	lsls	r0, r3, #22
 80210a2:	d4f7      	bmi.n	8021094 <_vfiprintf_r+0x44>
 80210a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80210a6:	f7ff fef3 	bl	8020e90 <__retarget_lock_release_recursive>
 80210aa:	e7f3      	b.n	8021094 <_vfiprintf_r+0x44>
 80210ac:	2300      	movs	r3, #0
 80210ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80210b0:	2320      	movs	r3, #32
 80210b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80210b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80210ba:	2330      	movs	r3, #48	@ 0x30
 80210bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802126c <_vfiprintf_r+0x21c>
 80210c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80210c4:	f04f 0901 	mov.w	r9, #1
 80210c8:	4623      	mov	r3, r4
 80210ca:	469a      	mov	sl, r3
 80210cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80210d0:	b10a      	cbz	r2, 80210d6 <_vfiprintf_r+0x86>
 80210d2:	2a25      	cmp	r2, #37	@ 0x25
 80210d4:	d1f9      	bne.n	80210ca <_vfiprintf_r+0x7a>
 80210d6:	ebba 0b04 	subs.w	fp, sl, r4
 80210da:	d00b      	beq.n	80210f4 <_vfiprintf_r+0xa4>
 80210dc:	465b      	mov	r3, fp
 80210de:	4622      	mov	r2, r4
 80210e0:	4629      	mov	r1, r5
 80210e2:	4630      	mov	r0, r6
 80210e4:	f7ff ffa1 	bl	802102a <__sfputs_r>
 80210e8:	3001      	adds	r0, #1
 80210ea:	f000 80a7 	beq.w	802123c <_vfiprintf_r+0x1ec>
 80210ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80210f0:	445a      	add	r2, fp
 80210f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80210f4:	f89a 3000 	ldrb.w	r3, [sl]
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	f000 809f 	beq.w	802123c <_vfiprintf_r+0x1ec>
 80210fe:	2300      	movs	r3, #0
 8021100:	f04f 32ff 	mov.w	r2, #4294967295
 8021104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021108:	f10a 0a01 	add.w	sl, sl, #1
 802110c:	9304      	str	r3, [sp, #16]
 802110e:	9307      	str	r3, [sp, #28]
 8021110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021114:	931a      	str	r3, [sp, #104]	@ 0x68
 8021116:	4654      	mov	r4, sl
 8021118:	2205      	movs	r2, #5
 802111a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802111e:	4853      	ldr	r0, [pc, #332]	@ (802126c <_vfiprintf_r+0x21c>)
 8021120:	f7df f8e6 	bl	80002f0 <memchr>
 8021124:	9a04      	ldr	r2, [sp, #16]
 8021126:	b9d8      	cbnz	r0, 8021160 <_vfiprintf_r+0x110>
 8021128:	06d1      	lsls	r1, r2, #27
 802112a:	bf44      	itt	mi
 802112c:	2320      	movmi	r3, #32
 802112e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021132:	0713      	lsls	r3, r2, #28
 8021134:	bf44      	itt	mi
 8021136:	232b      	movmi	r3, #43	@ 0x2b
 8021138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802113c:	f89a 3000 	ldrb.w	r3, [sl]
 8021140:	2b2a      	cmp	r3, #42	@ 0x2a
 8021142:	d015      	beq.n	8021170 <_vfiprintf_r+0x120>
 8021144:	9a07      	ldr	r2, [sp, #28]
 8021146:	4654      	mov	r4, sl
 8021148:	2000      	movs	r0, #0
 802114a:	f04f 0c0a 	mov.w	ip, #10
 802114e:	4621      	mov	r1, r4
 8021150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021154:	3b30      	subs	r3, #48	@ 0x30
 8021156:	2b09      	cmp	r3, #9
 8021158:	d94b      	bls.n	80211f2 <_vfiprintf_r+0x1a2>
 802115a:	b1b0      	cbz	r0, 802118a <_vfiprintf_r+0x13a>
 802115c:	9207      	str	r2, [sp, #28]
 802115e:	e014      	b.n	802118a <_vfiprintf_r+0x13a>
 8021160:	eba0 0308 	sub.w	r3, r0, r8
 8021164:	fa09 f303 	lsl.w	r3, r9, r3
 8021168:	4313      	orrs	r3, r2
 802116a:	9304      	str	r3, [sp, #16]
 802116c:	46a2      	mov	sl, r4
 802116e:	e7d2      	b.n	8021116 <_vfiprintf_r+0xc6>
 8021170:	9b03      	ldr	r3, [sp, #12]
 8021172:	1d19      	adds	r1, r3, #4
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	9103      	str	r1, [sp, #12]
 8021178:	2b00      	cmp	r3, #0
 802117a:	bfbb      	ittet	lt
 802117c:	425b      	neglt	r3, r3
 802117e:	f042 0202 	orrlt.w	r2, r2, #2
 8021182:	9307      	strge	r3, [sp, #28]
 8021184:	9307      	strlt	r3, [sp, #28]
 8021186:	bfb8      	it	lt
 8021188:	9204      	strlt	r2, [sp, #16]
 802118a:	7823      	ldrb	r3, [r4, #0]
 802118c:	2b2e      	cmp	r3, #46	@ 0x2e
 802118e:	d10a      	bne.n	80211a6 <_vfiprintf_r+0x156>
 8021190:	7863      	ldrb	r3, [r4, #1]
 8021192:	2b2a      	cmp	r3, #42	@ 0x2a
 8021194:	d132      	bne.n	80211fc <_vfiprintf_r+0x1ac>
 8021196:	9b03      	ldr	r3, [sp, #12]
 8021198:	1d1a      	adds	r2, r3, #4
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	9203      	str	r2, [sp, #12]
 802119e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80211a2:	3402      	adds	r4, #2
 80211a4:	9305      	str	r3, [sp, #20]
 80211a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802127c <_vfiprintf_r+0x22c>
 80211aa:	7821      	ldrb	r1, [r4, #0]
 80211ac:	2203      	movs	r2, #3
 80211ae:	4650      	mov	r0, sl
 80211b0:	f7df f89e 	bl	80002f0 <memchr>
 80211b4:	b138      	cbz	r0, 80211c6 <_vfiprintf_r+0x176>
 80211b6:	9b04      	ldr	r3, [sp, #16]
 80211b8:	eba0 000a 	sub.w	r0, r0, sl
 80211bc:	2240      	movs	r2, #64	@ 0x40
 80211be:	4082      	lsls	r2, r0
 80211c0:	4313      	orrs	r3, r2
 80211c2:	3401      	adds	r4, #1
 80211c4:	9304      	str	r3, [sp, #16]
 80211c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80211ca:	4829      	ldr	r0, [pc, #164]	@ (8021270 <_vfiprintf_r+0x220>)
 80211cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80211d0:	2206      	movs	r2, #6
 80211d2:	f7df f88d 	bl	80002f0 <memchr>
 80211d6:	2800      	cmp	r0, #0
 80211d8:	d03f      	beq.n	802125a <_vfiprintf_r+0x20a>
 80211da:	4b26      	ldr	r3, [pc, #152]	@ (8021274 <_vfiprintf_r+0x224>)
 80211dc:	bb1b      	cbnz	r3, 8021226 <_vfiprintf_r+0x1d6>
 80211de:	9b03      	ldr	r3, [sp, #12]
 80211e0:	3307      	adds	r3, #7
 80211e2:	f023 0307 	bic.w	r3, r3, #7
 80211e6:	3308      	adds	r3, #8
 80211e8:	9303      	str	r3, [sp, #12]
 80211ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80211ec:	443b      	add	r3, r7
 80211ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80211f0:	e76a      	b.n	80210c8 <_vfiprintf_r+0x78>
 80211f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80211f6:	460c      	mov	r4, r1
 80211f8:	2001      	movs	r0, #1
 80211fa:	e7a8      	b.n	802114e <_vfiprintf_r+0xfe>
 80211fc:	2300      	movs	r3, #0
 80211fe:	3401      	adds	r4, #1
 8021200:	9305      	str	r3, [sp, #20]
 8021202:	4619      	mov	r1, r3
 8021204:	f04f 0c0a 	mov.w	ip, #10
 8021208:	4620      	mov	r0, r4
 802120a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802120e:	3a30      	subs	r2, #48	@ 0x30
 8021210:	2a09      	cmp	r2, #9
 8021212:	d903      	bls.n	802121c <_vfiprintf_r+0x1cc>
 8021214:	2b00      	cmp	r3, #0
 8021216:	d0c6      	beq.n	80211a6 <_vfiprintf_r+0x156>
 8021218:	9105      	str	r1, [sp, #20]
 802121a:	e7c4      	b.n	80211a6 <_vfiprintf_r+0x156>
 802121c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021220:	4604      	mov	r4, r0
 8021222:	2301      	movs	r3, #1
 8021224:	e7f0      	b.n	8021208 <_vfiprintf_r+0x1b8>
 8021226:	ab03      	add	r3, sp, #12
 8021228:	9300      	str	r3, [sp, #0]
 802122a:	462a      	mov	r2, r5
 802122c:	4b12      	ldr	r3, [pc, #72]	@ (8021278 <_vfiprintf_r+0x228>)
 802122e:	a904      	add	r1, sp, #16
 8021230:	4630      	mov	r0, r6
 8021232:	f3af 8000 	nop.w
 8021236:	4607      	mov	r7, r0
 8021238:	1c78      	adds	r0, r7, #1
 802123a:	d1d6      	bne.n	80211ea <_vfiprintf_r+0x19a>
 802123c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802123e:	07d9      	lsls	r1, r3, #31
 8021240:	d405      	bmi.n	802124e <_vfiprintf_r+0x1fe>
 8021242:	89ab      	ldrh	r3, [r5, #12]
 8021244:	059a      	lsls	r2, r3, #22
 8021246:	d402      	bmi.n	802124e <_vfiprintf_r+0x1fe>
 8021248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802124a:	f7ff fe21 	bl	8020e90 <__retarget_lock_release_recursive>
 802124e:	89ab      	ldrh	r3, [r5, #12]
 8021250:	065b      	lsls	r3, r3, #25
 8021252:	f53f af1f 	bmi.w	8021094 <_vfiprintf_r+0x44>
 8021256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021258:	e71e      	b.n	8021098 <_vfiprintf_r+0x48>
 802125a:	ab03      	add	r3, sp, #12
 802125c:	9300      	str	r3, [sp, #0]
 802125e:	462a      	mov	r2, r5
 8021260:	4b05      	ldr	r3, [pc, #20]	@ (8021278 <_vfiprintf_r+0x228>)
 8021262:	a904      	add	r1, sp, #16
 8021264:	4630      	mov	r0, r6
 8021266:	f000 f879 	bl	802135c <_printf_i>
 802126a:	e7e4      	b.n	8021236 <_vfiprintf_r+0x1e6>
 802126c:	080234f0 	.word	0x080234f0
 8021270:	080234fa 	.word	0x080234fa
 8021274:	00000000 	.word	0x00000000
 8021278:	0802102b 	.word	0x0802102b
 802127c:	080234f6 	.word	0x080234f6

08021280 <_printf_common>:
 8021280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021284:	4616      	mov	r6, r2
 8021286:	4698      	mov	r8, r3
 8021288:	688a      	ldr	r2, [r1, #8]
 802128a:	690b      	ldr	r3, [r1, #16]
 802128c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021290:	4293      	cmp	r3, r2
 8021292:	bfb8      	it	lt
 8021294:	4613      	movlt	r3, r2
 8021296:	6033      	str	r3, [r6, #0]
 8021298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802129c:	4607      	mov	r7, r0
 802129e:	460c      	mov	r4, r1
 80212a0:	b10a      	cbz	r2, 80212a6 <_printf_common+0x26>
 80212a2:	3301      	adds	r3, #1
 80212a4:	6033      	str	r3, [r6, #0]
 80212a6:	6823      	ldr	r3, [r4, #0]
 80212a8:	0699      	lsls	r1, r3, #26
 80212aa:	bf42      	ittt	mi
 80212ac:	6833      	ldrmi	r3, [r6, #0]
 80212ae:	3302      	addmi	r3, #2
 80212b0:	6033      	strmi	r3, [r6, #0]
 80212b2:	6825      	ldr	r5, [r4, #0]
 80212b4:	f015 0506 	ands.w	r5, r5, #6
 80212b8:	d106      	bne.n	80212c8 <_printf_common+0x48>
 80212ba:	f104 0a19 	add.w	sl, r4, #25
 80212be:	68e3      	ldr	r3, [r4, #12]
 80212c0:	6832      	ldr	r2, [r6, #0]
 80212c2:	1a9b      	subs	r3, r3, r2
 80212c4:	42ab      	cmp	r3, r5
 80212c6:	dc26      	bgt.n	8021316 <_printf_common+0x96>
 80212c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80212cc:	6822      	ldr	r2, [r4, #0]
 80212ce:	3b00      	subs	r3, #0
 80212d0:	bf18      	it	ne
 80212d2:	2301      	movne	r3, #1
 80212d4:	0692      	lsls	r2, r2, #26
 80212d6:	d42b      	bmi.n	8021330 <_printf_common+0xb0>
 80212d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80212dc:	4641      	mov	r1, r8
 80212de:	4638      	mov	r0, r7
 80212e0:	47c8      	blx	r9
 80212e2:	3001      	adds	r0, #1
 80212e4:	d01e      	beq.n	8021324 <_printf_common+0xa4>
 80212e6:	6823      	ldr	r3, [r4, #0]
 80212e8:	6922      	ldr	r2, [r4, #16]
 80212ea:	f003 0306 	and.w	r3, r3, #6
 80212ee:	2b04      	cmp	r3, #4
 80212f0:	bf02      	ittt	eq
 80212f2:	68e5      	ldreq	r5, [r4, #12]
 80212f4:	6833      	ldreq	r3, [r6, #0]
 80212f6:	1aed      	subeq	r5, r5, r3
 80212f8:	68a3      	ldr	r3, [r4, #8]
 80212fa:	bf0c      	ite	eq
 80212fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021300:	2500      	movne	r5, #0
 8021302:	4293      	cmp	r3, r2
 8021304:	bfc4      	itt	gt
 8021306:	1a9b      	subgt	r3, r3, r2
 8021308:	18ed      	addgt	r5, r5, r3
 802130a:	2600      	movs	r6, #0
 802130c:	341a      	adds	r4, #26
 802130e:	42b5      	cmp	r5, r6
 8021310:	d11a      	bne.n	8021348 <_printf_common+0xc8>
 8021312:	2000      	movs	r0, #0
 8021314:	e008      	b.n	8021328 <_printf_common+0xa8>
 8021316:	2301      	movs	r3, #1
 8021318:	4652      	mov	r2, sl
 802131a:	4641      	mov	r1, r8
 802131c:	4638      	mov	r0, r7
 802131e:	47c8      	blx	r9
 8021320:	3001      	adds	r0, #1
 8021322:	d103      	bne.n	802132c <_printf_common+0xac>
 8021324:	f04f 30ff 	mov.w	r0, #4294967295
 8021328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802132c:	3501      	adds	r5, #1
 802132e:	e7c6      	b.n	80212be <_printf_common+0x3e>
 8021330:	18e1      	adds	r1, r4, r3
 8021332:	1c5a      	adds	r2, r3, #1
 8021334:	2030      	movs	r0, #48	@ 0x30
 8021336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802133a:	4422      	add	r2, r4
 802133c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021344:	3302      	adds	r3, #2
 8021346:	e7c7      	b.n	80212d8 <_printf_common+0x58>
 8021348:	2301      	movs	r3, #1
 802134a:	4622      	mov	r2, r4
 802134c:	4641      	mov	r1, r8
 802134e:	4638      	mov	r0, r7
 8021350:	47c8      	blx	r9
 8021352:	3001      	adds	r0, #1
 8021354:	d0e6      	beq.n	8021324 <_printf_common+0xa4>
 8021356:	3601      	adds	r6, #1
 8021358:	e7d9      	b.n	802130e <_printf_common+0x8e>
	...

0802135c <_printf_i>:
 802135c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021360:	7e0f      	ldrb	r7, [r1, #24]
 8021362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021364:	2f78      	cmp	r7, #120	@ 0x78
 8021366:	4691      	mov	r9, r2
 8021368:	4680      	mov	r8, r0
 802136a:	460c      	mov	r4, r1
 802136c:	469a      	mov	sl, r3
 802136e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021372:	d807      	bhi.n	8021384 <_printf_i+0x28>
 8021374:	2f62      	cmp	r7, #98	@ 0x62
 8021376:	d80a      	bhi.n	802138e <_printf_i+0x32>
 8021378:	2f00      	cmp	r7, #0
 802137a:	f000 80d2 	beq.w	8021522 <_printf_i+0x1c6>
 802137e:	2f58      	cmp	r7, #88	@ 0x58
 8021380:	f000 80b9 	beq.w	80214f6 <_printf_i+0x19a>
 8021384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802138c:	e03a      	b.n	8021404 <_printf_i+0xa8>
 802138e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021392:	2b15      	cmp	r3, #21
 8021394:	d8f6      	bhi.n	8021384 <_printf_i+0x28>
 8021396:	a101      	add	r1, pc, #4	@ (adr r1, 802139c <_printf_i+0x40>)
 8021398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802139c:	080213f5 	.word	0x080213f5
 80213a0:	08021409 	.word	0x08021409
 80213a4:	08021385 	.word	0x08021385
 80213a8:	08021385 	.word	0x08021385
 80213ac:	08021385 	.word	0x08021385
 80213b0:	08021385 	.word	0x08021385
 80213b4:	08021409 	.word	0x08021409
 80213b8:	08021385 	.word	0x08021385
 80213bc:	08021385 	.word	0x08021385
 80213c0:	08021385 	.word	0x08021385
 80213c4:	08021385 	.word	0x08021385
 80213c8:	08021509 	.word	0x08021509
 80213cc:	08021433 	.word	0x08021433
 80213d0:	080214c3 	.word	0x080214c3
 80213d4:	08021385 	.word	0x08021385
 80213d8:	08021385 	.word	0x08021385
 80213dc:	0802152b 	.word	0x0802152b
 80213e0:	08021385 	.word	0x08021385
 80213e4:	08021433 	.word	0x08021433
 80213e8:	08021385 	.word	0x08021385
 80213ec:	08021385 	.word	0x08021385
 80213f0:	080214cb 	.word	0x080214cb
 80213f4:	6833      	ldr	r3, [r6, #0]
 80213f6:	1d1a      	adds	r2, r3, #4
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	6032      	str	r2, [r6, #0]
 80213fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021404:	2301      	movs	r3, #1
 8021406:	e09d      	b.n	8021544 <_printf_i+0x1e8>
 8021408:	6833      	ldr	r3, [r6, #0]
 802140a:	6820      	ldr	r0, [r4, #0]
 802140c:	1d19      	adds	r1, r3, #4
 802140e:	6031      	str	r1, [r6, #0]
 8021410:	0606      	lsls	r6, r0, #24
 8021412:	d501      	bpl.n	8021418 <_printf_i+0xbc>
 8021414:	681d      	ldr	r5, [r3, #0]
 8021416:	e003      	b.n	8021420 <_printf_i+0xc4>
 8021418:	0645      	lsls	r5, r0, #25
 802141a:	d5fb      	bpl.n	8021414 <_printf_i+0xb8>
 802141c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021420:	2d00      	cmp	r5, #0
 8021422:	da03      	bge.n	802142c <_printf_i+0xd0>
 8021424:	232d      	movs	r3, #45	@ 0x2d
 8021426:	426d      	negs	r5, r5
 8021428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802142c:	4859      	ldr	r0, [pc, #356]	@ (8021594 <_printf_i+0x238>)
 802142e:	230a      	movs	r3, #10
 8021430:	e011      	b.n	8021456 <_printf_i+0xfa>
 8021432:	6821      	ldr	r1, [r4, #0]
 8021434:	6833      	ldr	r3, [r6, #0]
 8021436:	0608      	lsls	r0, r1, #24
 8021438:	f853 5b04 	ldr.w	r5, [r3], #4
 802143c:	d402      	bmi.n	8021444 <_printf_i+0xe8>
 802143e:	0649      	lsls	r1, r1, #25
 8021440:	bf48      	it	mi
 8021442:	b2ad      	uxthmi	r5, r5
 8021444:	2f6f      	cmp	r7, #111	@ 0x6f
 8021446:	4853      	ldr	r0, [pc, #332]	@ (8021594 <_printf_i+0x238>)
 8021448:	6033      	str	r3, [r6, #0]
 802144a:	bf14      	ite	ne
 802144c:	230a      	movne	r3, #10
 802144e:	2308      	moveq	r3, #8
 8021450:	2100      	movs	r1, #0
 8021452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021456:	6866      	ldr	r6, [r4, #4]
 8021458:	60a6      	str	r6, [r4, #8]
 802145a:	2e00      	cmp	r6, #0
 802145c:	bfa2      	ittt	ge
 802145e:	6821      	ldrge	r1, [r4, #0]
 8021460:	f021 0104 	bicge.w	r1, r1, #4
 8021464:	6021      	strge	r1, [r4, #0]
 8021466:	b90d      	cbnz	r5, 802146c <_printf_i+0x110>
 8021468:	2e00      	cmp	r6, #0
 802146a:	d04b      	beq.n	8021504 <_printf_i+0x1a8>
 802146c:	4616      	mov	r6, r2
 802146e:	fbb5 f1f3 	udiv	r1, r5, r3
 8021472:	fb03 5711 	mls	r7, r3, r1, r5
 8021476:	5dc7      	ldrb	r7, [r0, r7]
 8021478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802147c:	462f      	mov	r7, r5
 802147e:	42bb      	cmp	r3, r7
 8021480:	460d      	mov	r5, r1
 8021482:	d9f4      	bls.n	802146e <_printf_i+0x112>
 8021484:	2b08      	cmp	r3, #8
 8021486:	d10b      	bne.n	80214a0 <_printf_i+0x144>
 8021488:	6823      	ldr	r3, [r4, #0]
 802148a:	07df      	lsls	r7, r3, #31
 802148c:	d508      	bpl.n	80214a0 <_printf_i+0x144>
 802148e:	6923      	ldr	r3, [r4, #16]
 8021490:	6861      	ldr	r1, [r4, #4]
 8021492:	4299      	cmp	r1, r3
 8021494:	bfde      	ittt	le
 8021496:	2330      	movle	r3, #48	@ 0x30
 8021498:	f806 3c01 	strble.w	r3, [r6, #-1]
 802149c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80214a0:	1b92      	subs	r2, r2, r6
 80214a2:	6122      	str	r2, [r4, #16]
 80214a4:	f8cd a000 	str.w	sl, [sp]
 80214a8:	464b      	mov	r3, r9
 80214aa:	aa03      	add	r2, sp, #12
 80214ac:	4621      	mov	r1, r4
 80214ae:	4640      	mov	r0, r8
 80214b0:	f7ff fee6 	bl	8021280 <_printf_common>
 80214b4:	3001      	adds	r0, #1
 80214b6:	d14a      	bne.n	802154e <_printf_i+0x1f2>
 80214b8:	f04f 30ff 	mov.w	r0, #4294967295
 80214bc:	b004      	add	sp, #16
 80214be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80214c2:	6823      	ldr	r3, [r4, #0]
 80214c4:	f043 0320 	orr.w	r3, r3, #32
 80214c8:	6023      	str	r3, [r4, #0]
 80214ca:	4833      	ldr	r0, [pc, #204]	@ (8021598 <_printf_i+0x23c>)
 80214cc:	2778      	movs	r7, #120	@ 0x78
 80214ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80214d2:	6823      	ldr	r3, [r4, #0]
 80214d4:	6831      	ldr	r1, [r6, #0]
 80214d6:	061f      	lsls	r7, r3, #24
 80214d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80214dc:	d402      	bmi.n	80214e4 <_printf_i+0x188>
 80214de:	065f      	lsls	r7, r3, #25
 80214e0:	bf48      	it	mi
 80214e2:	b2ad      	uxthmi	r5, r5
 80214e4:	6031      	str	r1, [r6, #0]
 80214e6:	07d9      	lsls	r1, r3, #31
 80214e8:	bf44      	itt	mi
 80214ea:	f043 0320 	orrmi.w	r3, r3, #32
 80214ee:	6023      	strmi	r3, [r4, #0]
 80214f0:	b11d      	cbz	r5, 80214fa <_printf_i+0x19e>
 80214f2:	2310      	movs	r3, #16
 80214f4:	e7ac      	b.n	8021450 <_printf_i+0xf4>
 80214f6:	4827      	ldr	r0, [pc, #156]	@ (8021594 <_printf_i+0x238>)
 80214f8:	e7e9      	b.n	80214ce <_printf_i+0x172>
 80214fa:	6823      	ldr	r3, [r4, #0]
 80214fc:	f023 0320 	bic.w	r3, r3, #32
 8021500:	6023      	str	r3, [r4, #0]
 8021502:	e7f6      	b.n	80214f2 <_printf_i+0x196>
 8021504:	4616      	mov	r6, r2
 8021506:	e7bd      	b.n	8021484 <_printf_i+0x128>
 8021508:	6833      	ldr	r3, [r6, #0]
 802150a:	6825      	ldr	r5, [r4, #0]
 802150c:	6961      	ldr	r1, [r4, #20]
 802150e:	1d18      	adds	r0, r3, #4
 8021510:	6030      	str	r0, [r6, #0]
 8021512:	062e      	lsls	r6, r5, #24
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	d501      	bpl.n	802151c <_printf_i+0x1c0>
 8021518:	6019      	str	r1, [r3, #0]
 802151a:	e002      	b.n	8021522 <_printf_i+0x1c6>
 802151c:	0668      	lsls	r0, r5, #25
 802151e:	d5fb      	bpl.n	8021518 <_printf_i+0x1bc>
 8021520:	8019      	strh	r1, [r3, #0]
 8021522:	2300      	movs	r3, #0
 8021524:	6123      	str	r3, [r4, #16]
 8021526:	4616      	mov	r6, r2
 8021528:	e7bc      	b.n	80214a4 <_printf_i+0x148>
 802152a:	6833      	ldr	r3, [r6, #0]
 802152c:	1d1a      	adds	r2, r3, #4
 802152e:	6032      	str	r2, [r6, #0]
 8021530:	681e      	ldr	r6, [r3, #0]
 8021532:	6862      	ldr	r2, [r4, #4]
 8021534:	2100      	movs	r1, #0
 8021536:	4630      	mov	r0, r6
 8021538:	f7de feda 	bl	80002f0 <memchr>
 802153c:	b108      	cbz	r0, 8021542 <_printf_i+0x1e6>
 802153e:	1b80      	subs	r0, r0, r6
 8021540:	6060      	str	r0, [r4, #4]
 8021542:	6863      	ldr	r3, [r4, #4]
 8021544:	6123      	str	r3, [r4, #16]
 8021546:	2300      	movs	r3, #0
 8021548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802154c:	e7aa      	b.n	80214a4 <_printf_i+0x148>
 802154e:	6923      	ldr	r3, [r4, #16]
 8021550:	4632      	mov	r2, r6
 8021552:	4649      	mov	r1, r9
 8021554:	4640      	mov	r0, r8
 8021556:	47d0      	blx	sl
 8021558:	3001      	adds	r0, #1
 802155a:	d0ad      	beq.n	80214b8 <_printf_i+0x15c>
 802155c:	6823      	ldr	r3, [r4, #0]
 802155e:	079b      	lsls	r3, r3, #30
 8021560:	d413      	bmi.n	802158a <_printf_i+0x22e>
 8021562:	68e0      	ldr	r0, [r4, #12]
 8021564:	9b03      	ldr	r3, [sp, #12]
 8021566:	4298      	cmp	r0, r3
 8021568:	bfb8      	it	lt
 802156a:	4618      	movlt	r0, r3
 802156c:	e7a6      	b.n	80214bc <_printf_i+0x160>
 802156e:	2301      	movs	r3, #1
 8021570:	4632      	mov	r2, r6
 8021572:	4649      	mov	r1, r9
 8021574:	4640      	mov	r0, r8
 8021576:	47d0      	blx	sl
 8021578:	3001      	adds	r0, #1
 802157a:	d09d      	beq.n	80214b8 <_printf_i+0x15c>
 802157c:	3501      	adds	r5, #1
 802157e:	68e3      	ldr	r3, [r4, #12]
 8021580:	9903      	ldr	r1, [sp, #12]
 8021582:	1a5b      	subs	r3, r3, r1
 8021584:	42ab      	cmp	r3, r5
 8021586:	dcf2      	bgt.n	802156e <_printf_i+0x212>
 8021588:	e7eb      	b.n	8021562 <_printf_i+0x206>
 802158a:	2500      	movs	r5, #0
 802158c:	f104 0619 	add.w	r6, r4, #25
 8021590:	e7f5      	b.n	802157e <_printf_i+0x222>
 8021592:	bf00      	nop
 8021594:	08023501 	.word	0x08023501
 8021598:	08023512 	.word	0x08023512

0802159c <__sflush_r>:
 802159c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80215a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215a4:	0716      	lsls	r6, r2, #28
 80215a6:	4605      	mov	r5, r0
 80215a8:	460c      	mov	r4, r1
 80215aa:	d454      	bmi.n	8021656 <__sflush_r+0xba>
 80215ac:	684b      	ldr	r3, [r1, #4]
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	dc02      	bgt.n	80215b8 <__sflush_r+0x1c>
 80215b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	dd48      	ble.n	802164a <__sflush_r+0xae>
 80215b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215ba:	2e00      	cmp	r6, #0
 80215bc:	d045      	beq.n	802164a <__sflush_r+0xae>
 80215be:	2300      	movs	r3, #0
 80215c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80215c4:	682f      	ldr	r7, [r5, #0]
 80215c6:	6a21      	ldr	r1, [r4, #32]
 80215c8:	602b      	str	r3, [r5, #0]
 80215ca:	d030      	beq.n	802162e <__sflush_r+0x92>
 80215cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80215ce:	89a3      	ldrh	r3, [r4, #12]
 80215d0:	0759      	lsls	r1, r3, #29
 80215d2:	d505      	bpl.n	80215e0 <__sflush_r+0x44>
 80215d4:	6863      	ldr	r3, [r4, #4]
 80215d6:	1ad2      	subs	r2, r2, r3
 80215d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80215da:	b10b      	cbz	r3, 80215e0 <__sflush_r+0x44>
 80215dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80215de:	1ad2      	subs	r2, r2, r3
 80215e0:	2300      	movs	r3, #0
 80215e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80215e4:	6a21      	ldr	r1, [r4, #32]
 80215e6:	4628      	mov	r0, r5
 80215e8:	47b0      	blx	r6
 80215ea:	1c43      	adds	r3, r0, #1
 80215ec:	89a3      	ldrh	r3, [r4, #12]
 80215ee:	d106      	bne.n	80215fe <__sflush_r+0x62>
 80215f0:	6829      	ldr	r1, [r5, #0]
 80215f2:	291d      	cmp	r1, #29
 80215f4:	d82b      	bhi.n	802164e <__sflush_r+0xb2>
 80215f6:	4a2a      	ldr	r2, [pc, #168]	@ (80216a0 <__sflush_r+0x104>)
 80215f8:	410a      	asrs	r2, r1
 80215fa:	07d6      	lsls	r6, r2, #31
 80215fc:	d427      	bmi.n	802164e <__sflush_r+0xb2>
 80215fe:	2200      	movs	r2, #0
 8021600:	6062      	str	r2, [r4, #4]
 8021602:	04d9      	lsls	r1, r3, #19
 8021604:	6922      	ldr	r2, [r4, #16]
 8021606:	6022      	str	r2, [r4, #0]
 8021608:	d504      	bpl.n	8021614 <__sflush_r+0x78>
 802160a:	1c42      	adds	r2, r0, #1
 802160c:	d101      	bne.n	8021612 <__sflush_r+0x76>
 802160e:	682b      	ldr	r3, [r5, #0]
 8021610:	b903      	cbnz	r3, 8021614 <__sflush_r+0x78>
 8021612:	6560      	str	r0, [r4, #84]	@ 0x54
 8021614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021616:	602f      	str	r7, [r5, #0]
 8021618:	b1b9      	cbz	r1, 802164a <__sflush_r+0xae>
 802161a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802161e:	4299      	cmp	r1, r3
 8021620:	d002      	beq.n	8021628 <__sflush_r+0x8c>
 8021622:	4628      	mov	r0, r5
 8021624:	f7ff fca0 	bl	8020f68 <_free_r>
 8021628:	2300      	movs	r3, #0
 802162a:	6363      	str	r3, [r4, #52]	@ 0x34
 802162c:	e00d      	b.n	802164a <__sflush_r+0xae>
 802162e:	2301      	movs	r3, #1
 8021630:	4628      	mov	r0, r5
 8021632:	47b0      	blx	r6
 8021634:	4602      	mov	r2, r0
 8021636:	1c50      	adds	r0, r2, #1
 8021638:	d1c9      	bne.n	80215ce <__sflush_r+0x32>
 802163a:	682b      	ldr	r3, [r5, #0]
 802163c:	2b00      	cmp	r3, #0
 802163e:	d0c6      	beq.n	80215ce <__sflush_r+0x32>
 8021640:	2b1d      	cmp	r3, #29
 8021642:	d001      	beq.n	8021648 <__sflush_r+0xac>
 8021644:	2b16      	cmp	r3, #22
 8021646:	d11e      	bne.n	8021686 <__sflush_r+0xea>
 8021648:	602f      	str	r7, [r5, #0]
 802164a:	2000      	movs	r0, #0
 802164c:	e022      	b.n	8021694 <__sflush_r+0xf8>
 802164e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021652:	b21b      	sxth	r3, r3
 8021654:	e01b      	b.n	802168e <__sflush_r+0xf2>
 8021656:	690f      	ldr	r7, [r1, #16]
 8021658:	2f00      	cmp	r7, #0
 802165a:	d0f6      	beq.n	802164a <__sflush_r+0xae>
 802165c:	0793      	lsls	r3, r2, #30
 802165e:	680e      	ldr	r6, [r1, #0]
 8021660:	bf08      	it	eq
 8021662:	694b      	ldreq	r3, [r1, #20]
 8021664:	600f      	str	r7, [r1, #0]
 8021666:	bf18      	it	ne
 8021668:	2300      	movne	r3, #0
 802166a:	eba6 0807 	sub.w	r8, r6, r7
 802166e:	608b      	str	r3, [r1, #8]
 8021670:	f1b8 0f00 	cmp.w	r8, #0
 8021674:	dde9      	ble.n	802164a <__sflush_r+0xae>
 8021676:	6a21      	ldr	r1, [r4, #32]
 8021678:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802167a:	4643      	mov	r3, r8
 802167c:	463a      	mov	r2, r7
 802167e:	4628      	mov	r0, r5
 8021680:	47b0      	blx	r6
 8021682:	2800      	cmp	r0, #0
 8021684:	dc08      	bgt.n	8021698 <__sflush_r+0xfc>
 8021686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802168a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802168e:	81a3      	strh	r3, [r4, #12]
 8021690:	f04f 30ff 	mov.w	r0, #4294967295
 8021694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021698:	4407      	add	r7, r0
 802169a:	eba8 0800 	sub.w	r8, r8, r0
 802169e:	e7e7      	b.n	8021670 <__sflush_r+0xd4>
 80216a0:	dfbffffe 	.word	0xdfbffffe

080216a4 <_fflush_r>:
 80216a4:	b538      	push	{r3, r4, r5, lr}
 80216a6:	690b      	ldr	r3, [r1, #16]
 80216a8:	4605      	mov	r5, r0
 80216aa:	460c      	mov	r4, r1
 80216ac:	b913      	cbnz	r3, 80216b4 <_fflush_r+0x10>
 80216ae:	2500      	movs	r5, #0
 80216b0:	4628      	mov	r0, r5
 80216b2:	bd38      	pop	{r3, r4, r5, pc}
 80216b4:	b118      	cbz	r0, 80216be <_fflush_r+0x1a>
 80216b6:	6a03      	ldr	r3, [r0, #32]
 80216b8:	b90b      	cbnz	r3, 80216be <_fflush_r+0x1a>
 80216ba:	f7ff fa39 	bl	8020b30 <__sinit>
 80216be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	d0f3      	beq.n	80216ae <_fflush_r+0xa>
 80216c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80216c8:	07d0      	lsls	r0, r2, #31
 80216ca:	d404      	bmi.n	80216d6 <_fflush_r+0x32>
 80216cc:	0599      	lsls	r1, r3, #22
 80216ce:	d402      	bmi.n	80216d6 <_fflush_r+0x32>
 80216d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216d2:	f7ff fbdc 	bl	8020e8e <__retarget_lock_acquire_recursive>
 80216d6:	4628      	mov	r0, r5
 80216d8:	4621      	mov	r1, r4
 80216da:	f7ff ff5f 	bl	802159c <__sflush_r>
 80216de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80216e0:	07da      	lsls	r2, r3, #31
 80216e2:	4605      	mov	r5, r0
 80216e4:	d4e4      	bmi.n	80216b0 <_fflush_r+0xc>
 80216e6:	89a3      	ldrh	r3, [r4, #12]
 80216e8:	059b      	lsls	r3, r3, #22
 80216ea:	d4e1      	bmi.n	80216b0 <_fflush_r+0xc>
 80216ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216ee:	f7ff fbcf 	bl	8020e90 <__retarget_lock_release_recursive>
 80216f2:	e7dd      	b.n	80216b0 <_fflush_r+0xc>

080216f4 <__swbuf_r>:
 80216f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216f6:	460e      	mov	r6, r1
 80216f8:	4614      	mov	r4, r2
 80216fa:	4605      	mov	r5, r0
 80216fc:	b118      	cbz	r0, 8021706 <__swbuf_r+0x12>
 80216fe:	6a03      	ldr	r3, [r0, #32]
 8021700:	b90b      	cbnz	r3, 8021706 <__swbuf_r+0x12>
 8021702:	f7ff fa15 	bl	8020b30 <__sinit>
 8021706:	69a3      	ldr	r3, [r4, #24]
 8021708:	60a3      	str	r3, [r4, #8]
 802170a:	89a3      	ldrh	r3, [r4, #12]
 802170c:	071a      	lsls	r2, r3, #28
 802170e:	d501      	bpl.n	8021714 <__swbuf_r+0x20>
 8021710:	6923      	ldr	r3, [r4, #16]
 8021712:	b943      	cbnz	r3, 8021726 <__swbuf_r+0x32>
 8021714:	4621      	mov	r1, r4
 8021716:	4628      	mov	r0, r5
 8021718:	f000 f82a 	bl	8021770 <__swsetup_r>
 802171c:	b118      	cbz	r0, 8021726 <__swbuf_r+0x32>
 802171e:	f04f 37ff 	mov.w	r7, #4294967295
 8021722:	4638      	mov	r0, r7
 8021724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021726:	6823      	ldr	r3, [r4, #0]
 8021728:	6922      	ldr	r2, [r4, #16]
 802172a:	1a98      	subs	r0, r3, r2
 802172c:	6963      	ldr	r3, [r4, #20]
 802172e:	b2f6      	uxtb	r6, r6
 8021730:	4283      	cmp	r3, r0
 8021732:	4637      	mov	r7, r6
 8021734:	dc05      	bgt.n	8021742 <__swbuf_r+0x4e>
 8021736:	4621      	mov	r1, r4
 8021738:	4628      	mov	r0, r5
 802173a:	f7ff ffb3 	bl	80216a4 <_fflush_r>
 802173e:	2800      	cmp	r0, #0
 8021740:	d1ed      	bne.n	802171e <__swbuf_r+0x2a>
 8021742:	68a3      	ldr	r3, [r4, #8]
 8021744:	3b01      	subs	r3, #1
 8021746:	60a3      	str	r3, [r4, #8]
 8021748:	6823      	ldr	r3, [r4, #0]
 802174a:	1c5a      	adds	r2, r3, #1
 802174c:	6022      	str	r2, [r4, #0]
 802174e:	701e      	strb	r6, [r3, #0]
 8021750:	6962      	ldr	r2, [r4, #20]
 8021752:	1c43      	adds	r3, r0, #1
 8021754:	429a      	cmp	r2, r3
 8021756:	d004      	beq.n	8021762 <__swbuf_r+0x6e>
 8021758:	89a3      	ldrh	r3, [r4, #12]
 802175a:	07db      	lsls	r3, r3, #31
 802175c:	d5e1      	bpl.n	8021722 <__swbuf_r+0x2e>
 802175e:	2e0a      	cmp	r6, #10
 8021760:	d1df      	bne.n	8021722 <__swbuf_r+0x2e>
 8021762:	4621      	mov	r1, r4
 8021764:	4628      	mov	r0, r5
 8021766:	f7ff ff9d 	bl	80216a4 <_fflush_r>
 802176a:	2800      	cmp	r0, #0
 802176c:	d0d9      	beq.n	8021722 <__swbuf_r+0x2e>
 802176e:	e7d6      	b.n	802171e <__swbuf_r+0x2a>

08021770 <__swsetup_r>:
 8021770:	b538      	push	{r3, r4, r5, lr}
 8021772:	4b29      	ldr	r3, [pc, #164]	@ (8021818 <__swsetup_r+0xa8>)
 8021774:	4605      	mov	r5, r0
 8021776:	6818      	ldr	r0, [r3, #0]
 8021778:	460c      	mov	r4, r1
 802177a:	b118      	cbz	r0, 8021784 <__swsetup_r+0x14>
 802177c:	6a03      	ldr	r3, [r0, #32]
 802177e:	b90b      	cbnz	r3, 8021784 <__swsetup_r+0x14>
 8021780:	f7ff f9d6 	bl	8020b30 <__sinit>
 8021784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021788:	0719      	lsls	r1, r3, #28
 802178a:	d422      	bmi.n	80217d2 <__swsetup_r+0x62>
 802178c:	06da      	lsls	r2, r3, #27
 802178e:	d407      	bmi.n	80217a0 <__swsetup_r+0x30>
 8021790:	2209      	movs	r2, #9
 8021792:	602a      	str	r2, [r5, #0]
 8021794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021798:	81a3      	strh	r3, [r4, #12]
 802179a:	f04f 30ff 	mov.w	r0, #4294967295
 802179e:	e033      	b.n	8021808 <__swsetup_r+0x98>
 80217a0:	0758      	lsls	r0, r3, #29
 80217a2:	d512      	bpl.n	80217ca <__swsetup_r+0x5a>
 80217a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80217a6:	b141      	cbz	r1, 80217ba <__swsetup_r+0x4a>
 80217a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80217ac:	4299      	cmp	r1, r3
 80217ae:	d002      	beq.n	80217b6 <__swsetup_r+0x46>
 80217b0:	4628      	mov	r0, r5
 80217b2:	f7ff fbd9 	bl	8020f68 <_free_r>
 80217b6:	2300      	movs	r3, #0
 80217b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80217ba:	89a3      	ldrh	r3, [r4, #12]
 80217bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80217c0:	81a3      	strh	r3, [r4, #12]
 80217c2:	2300      	movs	r3, #0
 80217c4:	6063      	str	r3, [r4, #4]
 80217c6:	6923      	ldr	r3, [r4, #16]
 80217c8:	6023      	str	r3, [r4, #0]
 80217ca:	89a3      	ldrh	r3, [r4, #12]
 80217cc:	f043 0308 	orr.w	r3, r3, #8
 80217d0:	81a3      	strh	r3, [r4, #12]
 80217d2:	6923      	ldr	r3, [r4, #16]
 80217d4:	b94b      	cbnz	r3, 80217ea <__swsetup_r+0x7a>
 80217d6:	89a3      	ldrh	r3, [r4, #12]
 80217d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80217dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80217e0:	d003      	beq.n	80217ea <__swsetup_r+0x7a>
 80217e2:	4621      	mov	r1, r4
 80217e4:	4628      	mov	r0, r5
 80217e6:	f000 f83f 	bl	8021868 <__smakebuf_r>
 80217ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80217ee:	f013 0201 	ands.w	r2, r3, #1
 80217f2:	d00a      	beq.n	802180a <__swsetup_r+0x9a>
 80217f4:	2200      	movs	r2, #0
 80217f6:	60a2      	str	r2, [r4, #8]
 80217f8:	6962      	ldr	r2, [r4, #20]
 80217fa:	4252      	negs	r2, r2
 80217fc:	61a2      	str	r2, [r4, #24]
 80217fe:	6922      	ldr	r2, [r4, #16]
 8021800:	b942      	cbnz	r2, 8021814 <__swsetup_r+0xa4>
 8021802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021806:	d1c5      	bne.n	8021794 <__swsetup_r+0x24>
 8021808:	bd38      	pop	{r3, r4, r5, pc}
 802180a:	0799      	lsls	r1, r3, #30
 802180c:	bf58      	it	pl
 802180e:	6962      	ldrpl	r2, [r4, #20]
 8021810:	60a2      	str	r2, [r4, #8]
 8021812:	e7f4      	b.n	80217fe <__swsetup_r+0x8e>
 8021814:	2000      	movs	r0, #0
 8021816:	e7f7      	b.n	8021808 <__swsetup_r+0x98>
 8021818:	240000bc 	.word	0x240000bc

0802181c <__swhatbuf_r>:
 802181c:	b570      	push	{r4, r5, r6, lr}
 802181e:	460c      	mov	r4, r1
 8021820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021824:	2900      	cmp	r1, #0
 8021826:	b096      	sub	sp, #88	@ 0x58
 8021828:	4615      	mov	r5, r2
 802182a:	461e      	mov	r6, r3
 802182c:	da0d      	bge.n	802184a <__swhatbuf_r+0x2e>
 802182e:	89a3      	ldrh	r3, [r4, #12]
 8021830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021834:	f04f 0100 	mov.w	r1, #0
 8021838:	bf14      	ite	ne
 802183a:	2340      	movne	r3, #64	@ 0x40
 802183c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021840:	2000      	movs	r0, #0
 8021842:	6031      	str	r1, [r6, #0]
 8021844:	602b      	str	r3, [r5, #0]
 8021846:	b016      	add	sp, #88	@ 0x58
 8021848:	bd70      	pop	{r4, r5, r6, pc}
 802184a:	466a      	mov	r2, sp
 802184c:	f000 f848 	bl	80218e0 <_fstat_r>
 8021850:	2800      	cmp	r0, #0
 8021852:	dbec      	blt.n	802182e <__swhatbuf_r+0x12>
 8021854:	9901      	ldr	r1, [sp, #4]
 8021856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802185a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802185e:	4259      	negs	r1, r3
 8021860:	4159      	adcs	r1, r3
 8021862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021866:	e7eb      	b.n	8021840 <__swhatbuf_r+0x24>

08021868 <__smakebuf_r>:
 8021868:	898b      	ldrh	r3, [r1, #12]
 802186a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802186c:	079d      	lsls	r5, r3, #30
 802186e:	4606      	mov	r6, r0
 8021870:	460c      	mov	r4, r1
 8021872:	d507      	bpl.n	8021884 <__smakebuf_r+0x1c>
 8021874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021878:	6023      	str	r3, [r4, #0]
 802187a:	6123      	str	r3, [r4, #16]
 802187c:	2301      	movs	r3, #1
 802187e:	6163      	str	r3, [r4, #20]
 8021880:	b003      	add	sp, #12
 8021882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021884:	ab01      	add	r3, sp, #4
 8021886:	466a      	mov	r2, sp
 8021888:	f7ff ffc8 	bl	802181c <__swhatbuf_r>
 802188c:	9f00      	ldr	r7, [sp, #0]
 802188e:	4605      	mov	r5, r0
 8021890:	4639      	mov	r1, r7
 8021892:	4630      	mov	r0, r6
 8021894:	f7ff f826 	bl	80208e4 <_malloc_r>
 8021898:	b948      	cbnz	r0, 80218ae <__smakebuf_r+0x46>
 802189a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802189e:	059a      	lsls	r2, r3, #22
 80218a0:	d4ee      	bmi.n	8021880 <__smakebuf_r+0x18>
 80218a2:	f023 0303 	bic.w	r3, r3, #3
 80218a6:	f043 0302 	orr.w	r3, r3, #2
 80218aa:	81a3      	strh	r3, [r4, #12]
 80218ac:	e7e2      	b.n	8021874 <__smakebuf_r+0xc>
 80218ae:	89a3      	ldrh	r3, [r4, #12]
 80218b0:	6020      	str	r0, [r4, #0]
 80218b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80218b6:	81a3      	strh	r3, [r4, #12]
 80218b8:	9b01      	ldr	r3, [sp, #4]
 80218ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80218be:	b15b      	cbz	r3, 80218d8 <__smakebuf_r+0x70>
 80218c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218c4:	4630      	mov	r0, r6
 80218c6:	f000 f81d 	bl	8021904 <_isatty_r>
 80218ca:	b128      	cbz	r0, 80218d8 <__smakebuf_r+0x70>
 80218cc:	89a3      	ldrh	r3, [r4, #12]
 80218ce:	f023 0303 	bic.w	r3, r3, #3
 80218d2:	f043 0301 	orr.w	r3, r3, #1
 80218d6:	81a3      	strh	r3, [r4, #12]
 80218d8:	89a3      	ldrh	r3, [r4, #12]
 80218da:	431d      	orrs	r5, r3
 80218dc:	81a5      	strh	r5, [r4, #12]
 80218de:	e7cf      	b.n	8021880 <__smakebuf_r+0x18>

080218e0 <_fstat_r>:
 80218e0:	b538      	push	{r3, r4, r5, lr}
 80218e2:	4d07      	ldr	r5, [pc, #28]	@ (8021900 <_fstat_r+0x20>)
 80218e4:	2300      	movs	r3, #0
 80218e6:	4604      	mov	r4, r0
 80218e8:	4608      	mov	r0, r1
 80218ea:	4611      	mov	r1, r2
 80218ec:	602b      	str	r3, [r5, #0]
 80218ee:	f7df fd0d 	bl	800130c <_fstat>
 80218f2:	1c43      	adds	r3, r0, #1
 80218f4:	d102      	bne.n	80218fc <_fstat_r+0x1c>
 80218f6:	682b      	ldr	r3, [r5, #0]
 80218f8:	b103      	cbz	r3, 80218fc <_fstat_r+0x1c>
 80218fa:	6023      	str	r3, [r4, #0]
 80218fc:	bd38      	pop	{r3, r4, r5, pc}
 80218fe:	bf00      	nop
 8021900:	2401bfb8 	.word	0x2401bfb8

08021904 <_isatty_r>:
 8021904:	b538      	push	{r3, r4, r5, lr}
 8021906:	4d06      	ldr	r5, [pc, #24]	@ (8021920 <_isatty_r+0x1c>)
 8021908:	2300      	movs	r3, #0
 802190a:	4604      	mov	r4, r0
 802190c:	4608      	mov	r0, r1
 802190e:	602b      	str	r3, [r5, #0]
 8021910:	f7df fd0c 	bl	800132c <_isatty>
 8021914:	1c43      	adds	r3, r0, #1
 8021916:	d102      	bne.n	802191e <_isatty_r+0x1a>
 8021918:	682b      	ldr	r3, [r5, #0]
 802191a:	b103      	cbz	r3, 802191e <_isatty_r+0x1a>
 802191c:	6023      	str	r3, [r4, #0]
 802191e:	bd38      	pop	{r3, r4, r5, pc}
 8021920:	2401bfb8 	.word	0x2401bfb8

08021924 <_init>:
 8021924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021926:	bf00      	nop
 8021928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802192a:	bc08      	pop	{r3}
 802192c:	469e      	mov	lr, r3
 802192e:	4770      	bx	lr

08021930 <_fini>:
 8021930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021932:	bf00      	nop
 8021934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021936:	bc08      	pop	{r3}
 8021938:	469e      	mov	lr, r3
 802193a:	4770      	bx	lr
