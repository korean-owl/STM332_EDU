
TouchGFX_Training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025dac  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002888  0802605c  0802605c  0002705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000020  080288e4  080288e4  000298e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08028904  08028904  00143fd4  2**0
                  CONTENTS
  5 .ARM          00000008  08028904  08028904  00029904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802890c  0802890c  00143fd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802890c  0802890c  0002990c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08028920  08028920  00029920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000110  24000000  08028928  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001c638  24000110  08028a38  0002a110  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2401c748  08028a38  0002a748  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00143fd4  2**0
                  CONTENTS, READONLY
 13 FramebufferSection 0005fa00  24040000  24040000  0002b000  2**2
                  ALLOC
 14 FontFlashSection 00003e44  90000000  90000000  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 TextFlashSection 00000040  90003e44  90003e44  0002ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 ExtFlashSection 00115150  90003e84  90003e84  0002ee84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000a91d7  00000000  00000000  00144002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00012d4a  00000000  00000000  001ed1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003fb0  00000000  00000000  001fff28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002eed  00000000  00000000  00203ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00040d23  00000000  00000000  00206dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004cde5  00000000  00000000  00247ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00173ab9  00000000  00000000  002948cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  00408386  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000110d0  00000000  00000000  00408448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000004e  00000000  00000000  00419518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000110 	.word	0x24000110
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08026044 	.word	0x08026044

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000114 	.word	0x24000114
 80002ec:	08026044 	.word	0x08026044

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
    vTaskDelete() API function (as this demo application does) then it is also
    important that vApplicationIdleHook() is permitted to return to its calling
    function, because it is the responsibility of the idle task to clean up
    memory allocated by the kernel to any task that has since been deleted. */

    vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000394:	4902      	ldr	r1, [pc, #8]	@ (80003a0 <vApplicationIdleHook+0x10>)
 8000396:	2000      	movs	r0, #0
 8000398:	f00b fe30 	bl	800bffc <vTaskSetApplicationTaskTag>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	08011a21 	.word	0x08011a21

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003aa:	f000 fb93 	bl	8000ad4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ae:	4b49      	ldr	r3, [pc, #292]	@ (80004d4 <main+0x130>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11b      	bne.n	80003f2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003ba:	f3bf 8f4f 	dsb	sy
}
 80003be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c0:	f3bf 8f6f 	isb	sy
}
 80003c4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003c6:	4b43      	ldr	r3, [pc, #268]	@ (80004d4 <main+0x130>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ce:	f3bf 8f4f 	dsb	sy
}
 80003d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
}
 80003d8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003da:	4b3e      	ldr	r3, [pc, #248]	@ (80004d4 <main+0x130>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a3d      	ldr	r2, [pc, #244]	@ (80004d4 <main+0x130>)
 80003e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003e6:	f3bf 8f4f 	dsb	sy
}
 80003ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003ec:	f3bf 8f6f 	isb	sy
}
 80003f0:	e000      	b.n	80003f4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003f2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003f4:	4b37      	ldr	r3, [pc, #220]	@ (80004d4 <main+0x130>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d138      	bne.n	8000472 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000400:	4b34      	ldr	r3, [pc, #208]	@ (80004d4 <main+0x130>)
 8000402:	2200      	movs	r2, #0
 8000404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000408:	f3bf 8f4f 	dsb	sy
}
 800040c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800040e:	4b31      	ldr	r3, [pc, #196]	@ (80004d4 <main+0x130>)
 8000410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000414:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	0b5b      	lsrs	r3, r3, #13
 800041a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800041e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	08db      	lsrs	r3, r3, #3
 8000424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000428:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	015a      	lsls	r2, r3, #5
 800042e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000432:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000438:	4926      	ldr	r1, [pc, #152]	@ (80004d4 <main+0x130>)
 800043a:	4313      	orrs	r3, r2
 800043c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	1e5a      	subs	r2, r3, #1
 8000444:	607a      	str	r2, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d1ef      	bne.n	800042a <main+0x86>
    } while(sets-- != 0U);
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	1e5a      	subs	r2, r3, #1
 800044e:	60ba      	str	r2, [r7, #8]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d1e5      	bne.n	8000420 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000454:	f3bf 8f4f 	dsb	sy
}
 8000458:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <main+0x130>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a1d      	ldr	r2, [pc, #116]	@ (80004d4 <main+0x130>)
 8000460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000464:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000466:	f3bf 8f4f 	dsb	sy
}
 800046a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800046c:	f3bf 8f6f 	isb	sy
}
 8000470:	e000      	b.n	8000474 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000472:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000474:	f003 fcde 	bl	8003e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000478:	f000 f83c 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047c:	f000 fa2a 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000480:	f000 f8ce 	bl	8000620 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8000484:	f000 f906 	bl	8000694 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8000488:	f000 f9c6 	bl	8000818 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 800048c:	f000 f8a6 	bl	80005dc <MX_CRC_Init>
  MX_LTDC_Init();
 8000490:	f000 f940 	bl	8000714 <MX_LTDC_Init>
  MX_TouchGFX_Init();
 8000494:	f00d fa01 	bl	800d89a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000498:	f00d f9f8 	bl	800d88c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  //SDRAM_Initialization_Sequence(&hsdram1, &command);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2102      	movs	r1, #2
 80004a0:	480d      	ldr	r0, [pc, #52]	@ (80004d8 <main+0x134>)
 80004a2:	f004 fc9f 	bl	8004de4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a6:	f009 fd6b 	bl	8009f80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004aa:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <main+0x138>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	480c      	ldr	r0, [pc, #48]	@ (80004e0 <main+0x13c>)
 80004b0:	f009 fdb0 	bl	800a014 <osThreadNew>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <main+0x140>)
 80004b8:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80004ba:	4a0b      	ldr	r2, [pc, #44]	@ (80004e8 <main+0x144>)
 80004bc:	2100      	movs	r1, #0
 80004be:	480b      	ldr	r0, [pc, #44]	@ (80004ec <main+0x148>)
 80004c0:	f009 fda8 	bl	800a014 <osThreadNew>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <main+0x14c>)
 80004c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004ca:	f009 fd7d 	bl	8009fc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <main+0x12a>
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00
 80004d8:	58020000 	.word	0x58020000
 80004dc:	08026e10 	.word	0x08026e10
 80004e0:	08000ac5 	.word	0x08000ac5
 80004e4:	24000310 	.word	0x24000310
 80004e8:	08026e34 	.word	0x08026e34
 80004ec:	0800d8ab 	.word	0x0800d8ab
 80004f0:	24000314 	.word	0x24000314

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09c      	sub	sp, #112	@ 0x70
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004fe:	224c      	movs	r2, #76	@ 0x4c
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f024 ff2f 	bl	8025366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2220      	movs	r2, #32
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f024 ff29 	bl	8025366 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000514:	4b2f      	ldr	r3, [pc, #188]	@ (80005d4 <SystemClock_Config+0xe0>)
 8000516:	f04f 32ff 	mov.w	r2, #4294967295
 800051a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800051e:	2004      	movs	r0, #4
 8000520:	f006 fea0 	bl	8007264 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000524:	2300      	movs	r3, #0
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b2b      	ldr	r3, [pc, #172]	@ (80005d8 <SystemClock_Config+0xe4>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a2a      	ldr	r2, [pc, #168]	@ (80005d8 <SystemClock_Config+0xe4>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <SystemClock_Config+0xe4>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000540:	bf00      	nop
 8000542:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <SystemClock_Config+0xe4>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d1f8      	bne.n	8000542 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	2302      	movs	r3, #2
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000562:	230c      	movs	r3, #12
 8000564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000566:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800056a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800056c:	2302      	movs	r3, #2
 800056e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000578:	2304      	movs	r3, #4
 800057a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800057c:	2300      	movs	r3, #0
 800057e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000588:	4618      	mov	r0, r3
 800058a:	f006 fec5 	bl	8007318 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000594:	f000 fafe 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	233f      	movs	r3, #63	@ 0x3f
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a4:	2308      	movs	r3, #8
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2103      	movs	r1, #3
 80005bc:	4618      	mov	r0, r3
 80005be:	f007 fadd 	bl	8007b7c <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005c8:	f000 fae4 	bl	8000b94 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3770      	adds	r7, #112	@ 0x70
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	58024400 	.word	0x58024400
 80005d8:	58024800 	.word	0x58024800

080005dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_CRC_Init+0x40>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <MX_CRC_Init+0x3c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000604:	4804      	ldr	r0, [pc, #16]	@ (8000618 <MX_CRC_Init+0x3c>)
 8000606:	f003 fe1f 	bl	8004248 <HAL_CRC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000610:	f000 fac0 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2400012c 	.word	0x2400012c
 800061c:	40023000 	.word	0x40023000

08000620 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000626:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <MX_DMA2D_Init+0x70>)
 8000628:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800062a:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_DMA2D_Init+0x6c>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000630:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000632:	2202      	movs	r2, #2
 8000634:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000636:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_DMA2D_Init+0x6c>)
 800063e:	2200      	movs	r2, #0
 8000640:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000644:	2202      	movs	r2, #2
 8000646:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_DMA2D_Init+0x6c>)
 800064a:	2200      	movs	r2, #0
 800064c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000650:	2200      	movs	r2, #0
 8000652:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000654:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000656:	2200      	movs	r2, #0
 8000658:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_DMA2D_Init+0x6c>)
 800065c:	2200      	movs	r2, #0
 800065e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000662:	2200      	movs	r2, #0
 8000664:	65da      	str	r2, [r3, #92]	@ 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000666:	4809      	ldr	r0, [pc, #36]	@ (800068c <MX_DMA2D_Init+0x6c>)
 8000668:	f003 fee0 	bl	800442c <HAL_DMA2D_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000672:	f000 fa8f 	bl	8000b94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000676:	2101      	movs	r1, #1
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_DMA2D_Init+0x6c>)
 800067a:	f004 f84b 	bl	8004714 <HAL_DMA2D_ConfigLayer>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8000684:	f000 fa86 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	24000150 	.word	0x24000150
 8000690:	52001000 	.word	0x52001000

08000694 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_I2C4_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <MX_I2C4_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30808BD0;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <MX_I2C4_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006d0:	f004 fbe0 	bl	8004e94 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 fa5b 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80006de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e2:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006e4:	f005 f9ac 	bl	8005a40 <HAL_I2CEx_ConfigAnalogFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C4_Init+0x5e>
  {
    Error_Handler();
 80006ee:	f000 fa51 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_I2C4_Init+0x74>)
 80006f6:	f005 f9ee 	bl	8005ad6 <HAL_I2CEx_ConfigDigitalFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C4_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fa48 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	240001b8 	.word	0x240001b8
 800070c:	58001c00 	.word	0x58001c00
 8000710:	30808bd0 	.word	0x30808bd0

08000714 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08e      	sub	sp, #56	@ 0x38
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2234      	movs	r2, #52	@ 0x34
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f024 fe20 	bl	8025366 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000726:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000728:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <MX_LTDC_Init+0x100>)
 800072a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800072c:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000732:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000738:	4b35      	ldr	r3, [pc, #212]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800073e:	4b34      	ldr	r3, [pc, #208]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000744:	4b32      	ldr	r3, [pc, #200]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000746:	2228      	movs	r2, #40	@ 0x28
 8000748:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800074a:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800074c:	2209      	movs	r2, #9
 800074e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8000750:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000752:	222a      	movs	r2, #42	@ 0x2a
 8000754:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000756:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000758:	220b      	movs	r2, #11
 800075a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 800075c:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800075e:	f240 220a 	movw	r2, #522	@ 0x20a
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000766:	f240 121b 	movw	r2, #283	@ 0x11b
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 554;
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800076e:	f240 222a 	movw	r2, #554	@ 0x22a
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000774:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000776:	f240 121d 	movw	r2, #285	@ 0x11d
 800077a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_LTDC_Init+0xfc>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000794:	481e      	ldr	r0, [pc, #120]	@ (8000810 <MX_LTDC_Init+0xfc>)
 8000796:	f005 f9eb 	bl	8005b70 <HAL_LTDC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 f9f8 	bl	8000b94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007a8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80007ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80007b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 80007b8:	2301      	movs	r3, #1
 80007ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007bc:	23ff      	movs	r3, #255	@ 0xff
 80007be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007ca:	2305      	movs	r3, #5
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007ce:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80007d4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80007da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80007de:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 255;
 80007e0:	23ff      	movs	r3, #255	@ 0xff
 80007e2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_LTDC_Init+0xfc>)
 80007fa:	f005 fb41 	bl	8005e80 <HAL_LTDC_ConfigLayer>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000804:	f000 f9c6 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	@ 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2400020c 	.word	0x2400020c
 8000814:	50001000 	.word	0x50001000

08000818 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800081e:	4b2b      	ldr	r3, [pc, #172]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000820:	4a2b      	ldr	r2, [pc, #172]	@ (80008d0 <MX_OCTOSPI1_Init+0xb8>)
 8000822:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000826:	2201      	movs	r2, #1
 8000828:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000838:	221a      	movs	r2, #26
 800083a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800083e:	2202      	movs	r2, #2
 8000840:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000842:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3;
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000856:	2203      	movs	r2, #3
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000860:	4b1a      	ldr	r3, [pc, #104]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 800087a:	2200      	movs	r2, #0
 800087c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800087e:	4813      	ldr	r0, [pc, #76]	@ (80008cc <MX_OCTOSPI1_Init+0xb4>)
 8000880:	f005 fd90 	bl	80063a4 <HAL_OSPI_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_OCTOSPI1_Init+0x76>
  {
    Error_Handler();
 800088a:	f000 f983 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */
  BSP_OSPI_NOR_Init_t Flash;
  Flash.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 800088e:	2301      	movs	r3, #1
 8000890:	703b      	strb	r3, [r7, #0]
  Flash.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000892:	2301      	movs	r3, #1
 8000894:	707b      	strb	r3, [r7, #1]
  BSP_OSPI_NOR_DeInit(0);
 8000896:	2000      	movs	r0, #0
 8000898:	f002 faba 	bl	8002e10 <BSP_OSPI_NOR_DeInit>
  int32_t RetVal = BSP_OSPI_NOR_Init(0, &Flash);
 800089c:	463b      	mov	r3, r7
 800089e:	4619      	mov	r1, r3
 80008a0:	2000      	movs	r0, #0
 80008a2:	f002 fa2b 	bl	8002cfc <BSP_OSPI_NOR_Init>
 80008a6:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80008ae:	f000 f971 	bl	8000b94 <Error_Handler>
  }
  RetVal = BSP_OSPI_NOR_EnableMemoryMappedMode(0);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f002 fb48 	bl	8002f48 <BSP_OSPI_NOR_EnableMemoryMappedMode>
 80008b8:	6078      	str	r0, [r7, #4]
  if(RetVal != BSP_ERROR_NONE)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 80008c0:	f000 f968 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	240002b4 	.word	0x240002b4
 80008d0:	52005000 	.word	0x52005000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08c      	sub	sp, #48	@ 0x30
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ea:	4b71      	ldr	r3, [pc, #452]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80008f0:	4a6f      	ldr	r2, [pc, #444]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80008f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80008fa:	4b6d      	ldr	r3, [pc, #436]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000908:	4b69      	ldr	r3, [pc, #420]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800090e:	4a68      	ldr	r2, [pc, #416]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000914:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000918:	4b65      	ldr	r3, [pc, #404]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800091e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000926:	4b62      	ldr	r3, [pc, #392]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800092c:	4a60      	ldr	r2, [pc, #384]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 800092e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000932:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000936:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800093c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000944:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000946:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800094a:	4a59      	ldr	r2, [pc, #356]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 800094c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000950:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000954:	4b56      	ldr	r3, [pc, #344]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000956:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800095a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000962:	4b53      	ldr	r3, [pc, #332]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000964:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000968:	4a51      	ldr	r2, [pc, #324]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 800096a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800096e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000972:	4b4f      	ldr	r3, [pc, #316]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000974:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000980:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000982:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000986:	4a4a      	ldr	r2, [pc, #296]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000990:	4b47      	ldr	r3, [pc, #284]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 8000992:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b44      	ldr	r3, [pc, #272]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80009a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009a4:	4a42      	ldr	r2, [pc, #264]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80009ae:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <MX_GPIO_Init+0x1dc>)
 80009b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f640 0104 	movw	r1, #2052	@ 0x804
 80009c2:	483c      	ldr	r0, [pc, #240]	@ (8000ab4 <MX_GPIO_Init+0x1e0>)
 80009c4:	f004 fa0e 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 41c4 	mov.w	r1, #25088	@ 0x6200
 80009ce:	483a      	ldr	r0, [pc, #232]	@ (8000ab8 <MX_GPIO_Init+0x1e4>)
 80009d0:	f004 fa08 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009da:	4838      	ldr	r0, [pc, #224]	@ (8000abc <MX_GPIO_Init+0x1e8>)
 80009dc:	f004 fa02 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2106      	movs	r1, #6
 80009e4:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <MX_GPIO_Init+0x1ec>)
 80009e6:	f004 f9fd 	bl	8004de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80009ea:	f640 0304 	movw	r3, #2052	@ 0x804
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	482c      	ldr	r0, [pc, #176]	@ (8000ab4 <MX_GPIO_Init+0x1e0>)
 8000a04:	f003 ff34 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 8000a08:	f44f 43c4 	mov.w	r3, #25088	@ 0x6200
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000a22:	f003 ff25 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000a26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481f      	ldr	r0, [pc, #124]	@ (8000abc <MX_GPIO_Init+0x1e8>)
 8000a40:	f003 ff16 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000a44:	2304      	movs	r3, #4
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4817      	ldr	r0, [pc, #92]	@ (8000ab8 <MX_GPIO_Init+0x1e4>)
 8000a5a:	f003 ff09 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0x1ec>)
 8000a76:	f003 fefb 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480b      	ldr	r0, [pc, #44]	@ (8000ac0 <MX_GPIO_Init+0x1ec>)
 8000a92:	f003 feed 	bl	8004870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	2008      	movs	r0, #8
 8000a9c:	f003 fb26 	bl	80040ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aa0:	2008      	movs	r0, #8
 8000aa2:	f003 fb3d 	bl	8004120 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	58021800 	.word	0x58021800
 8000ab8:	58021c00 	.word	0x58021c00
 8000abc:	58022000 	.word	0x58022000
 8000ac0:	58020000 	.word	0x58020000

08000ac4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000acc:	2064      	movs	r0, #100	@ 0x64
 8000ace:	f009 fb33 	bl	800a138 <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartDefaultTask+0x8>

08000ad4 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ada:	463b      	mov	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ae6:	f003 fb37 	bl	8004158 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000af2:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000af6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000af8:	231b      	movs	r3, #27
 8000afa:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b04:	2300      	movs	r3, #0
 8000b06:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fb54 	bl	80041c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000b24:	2319      	movs	r3, #25
 8000b26:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b30:	463b      	mov	r3, r7
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fb48 	bl	80041c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b3c:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000b42:	2313      	movs	r3, #19
 8000b44:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fb3d 	bl	80041c8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b52:	2311      	movs	r3, #17
 8000b54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fb33 	bl	80041c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f003 fb10 	bl	8004188 <HAL_MPU_Enable>

}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f003 f993 	bl	8003eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_MspInit+0x38>)
 8000ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_MspInit+0x38>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x38>)
 8000bb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f06f 0001 	mvn.w	r0, #1
 8000bcc:	f003 fa8e 	bl	80040ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400

08000bdc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <HAL_CRC_MspInit+0x3c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10e      	bne.n	8000c0c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_CRC_MspInit+0x40>)
 8000bf0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000bf4:	4a09      	ldr	r2, [pc, #36]	@ (8000c1c <HAL_CRC_MspInit+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_CRC_MspInit+0x40>)
 8000c00:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40023000 	.word	0x40023000
 8000c1c:	58024400 	.word	0x58024400

08000c20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c68 <HAL_DMA2D_MspInit+0x48>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d116      	bne.n	8000c60 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_DMA2D_MspInit+0x4c>)
 8000c34:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <HAL_DMA2D_MspInit+0x4c>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_DMA2D_MspInit+0x4c>)
 8000c44:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2105      	movs	r1, #5
 8000c54:	205a      	movs	r0, #90	@ 0x5a
 8000c56:	f003 fa49 	bl	80040ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000c5a:	205a      	movs	r0, #90	@ 0x5a
 8000c5c:	f003 fa60 	bl	8004120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	52001000 	.word	0x52001000
 8000c6c:	58024400 	.word	0x58024400

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ba      	sub	sp, #232	@ 0xe8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	22c0      	movs	r2, #192	@ 0xc0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f024 fb68 	bl	8025366 <memset>
  if(hi2c->Instance==I2C4)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a27      	ldr	r2, [pc, #156]	@ (8000d38 <HAL_I2C_MspInit+0xc8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d146      	bne.n	8000d2e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000ca0:	f04f 0210 	mov.w	r2, #16
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fb2e 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000cc2:	f7ff ff67 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000cd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8000ce4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <HAL_I2C_MspInit+0xd0>)
 8000d0c:	f003 fdb0 	bl	8004870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d12:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_I2C_MspInit+0xcc>)
 8000d22:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	37e8      	adds	r7, #232	@ 0xe8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	58001c00 	.word	0x58001c00
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020c00 	.word	0x58020c00

08000d44 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <HAL_I2C_MspDeInit+0x40>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d111      	bne.n	8000d7a <HAL_I2C_MspDeInit+0x36>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <HAL_I2C_MspDeInit+0x44>)
 8000d58:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_I2C_MspDeInit+0x44>)
 8000d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d62:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_13);
 8000d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6a:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <HAL_I2C_MspDeInit+0x48>)
 8000d6c:	f003 ff30 	bl	8004bd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12);
 8000d70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <HAL_I2C_MspDeInit+0x48>)
 8000d76:	f003 ff2b 	bl	8004bd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	58001c00 	.word	0x58001c00
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58020c00 	.word	0x58020c00

08000d90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0bc      	sub	sp, #240	@ 0xf0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	22c0      	movs	r2, #192	@ 0xc0
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f024 fad8 	bl	8025366 <memset>
  if(hltdc->Instance==LTDC)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a57      	ldr	r2, [pc, #348]	@ (8000f18 <HAL_LTDC_MspInit+0x188>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f040 80a6 	bne.w	8000f0e <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dc2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000dce:	2318      	movs	r3, #24
 8000dd0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8000dd2:	23c9      	movs	r3, #201	@ 0xc9
 8000dd4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8000dde:	2315      	movs	r3, #21
 8000de0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8000dea:	f241 5356 	movw	r3, #5462	@ 0x1556
 8000dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f007 fa8f 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000e00:	f7ff fec8 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e04:	4b45      	ldr	r3, [pc, #276]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e06:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8000e0a:	4a44      	ldr	r2, [pc, #272]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
 8000e14:	4b41      	ldr	r3, [pc, #260]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e16:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e22:	4b3e      	ldr	r3, [pc, #248]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e28:	4a3c      	ldr	r2, [pc, #240]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e32:	4b3a      	ldr	r3, [pc, #232]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e40:	4b36      	ldr	r3, [pc, #216]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e46:	4a35      	ldr	r2, [pc, #212]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e50:	4b32      	ldr	r3, [pc, #200]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e64:	4a2d      	ldr	r2, [pc, #180]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_LTDC_MspInit+0x18c>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000e7c:	23ff      	movs	r3, #255	@ 0xff
 8000e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e94:	230e      	movs	r3, #14
 8000e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e9a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481f      	ldr	r0, [pc, #124]	@ (8000f20 <HAL_LTDC_MspInit+0x190>)
 8000ea2:	f003 fce5 	bl	8004870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000ea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ec0:	230e      	movs	r3, #14
 8000ec2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ec6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4815      	ldr	r0, [pc, #84]	@ (8000f24 <HAL_LTDC_MspInit+0x194>)
 8000ece:	f003 fccf 	bl	8004870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8000ed2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eec:	230e      	movs	r3, #14
 8000eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ef2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <HAL_LTDC_MspInit+0x198>)
 8000efa:	f003 fcb9 	bl	8004870 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2105      	movs	r1, #5
 8000f02:	2058      	movs	r0, #88	@ 0x58
 8000f04:	f003 f8f2 	bl	80040ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f08:	2058      	movs	r0, #88	@ 0x58
 8000f0a:	f003 f909 	bl	8004120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	37f0      	adds	r7, #240	@ 0xf0
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	50001000 	.word	0x50001000
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58022800 	.word	0x58022800
 8000f24:	58022400 	.word	0x58022400
 8000f28:	58022000 	.word	0x58022000

08000f2c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b0b4      	sub	sp, #208	@ 0xd0
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22c0      	movs	r2, #192	@ 0xc0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f024 fa12 	bl	8025366 <memset>
  if(hospi->Instance==OCTOSPI1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc4 <HAL_OSPI_MspInit+0x98>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d137      	bne.n	8000fbc <HAL_OSPI_MspInit+0x90>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 f9d9 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_OSPI_MspInit+0x44>
    {
      Error_Handler();
 8000f6c:	f7ff fe12 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000f72:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000f76:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000f78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f7c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000f82:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000f90:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000f94:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_OSPI_MspInit+0x9c>)
 8000fa0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	2105      	movs	r1, #5
 8000fb0:	205c      	movs	r0, #92	@ 0x5c
 8000fb2:	f003 f89b 	bl	80040ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8000fb6:	205c      	movs	r0, #92	@ 0x5c
 8000fb8:	f003 f8b2 	bl	8004120 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	37d0      	adds	r7, #208	@ 0xd0
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	52005000 	.word	0x52005000
 8000fc8:	58024400 	.word	0x58024400

08000fcc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <HAL_OSPI_MspDeInit+0x40>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d112      	bne.n	8001004 <HAL_OSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_OSPI_MspDeInit+0x44>)
 8000fe0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <HAL_OSPI_MspDeInit+0x44>)
 8000fe6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000fea:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_OSPI_MspDeInit+0x44>)
 8000ff0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000ff4:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_OSPI_MspDeInit+0x44>)
 8000ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ffa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

    /* OCTOSPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(OCTOSPI1_IRQn);
 8000ffe:	205c      	movs	r0, #92	@ 0x5c
 8001000:	f003 f89c 	bl	800413c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	52005000 	.word	0x52005000
 8001010:	58024400 	.word	0x58024400

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b090      	sub	sp, #64	@ 0x40
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	d827      	bhi.n	8001072 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001022:	2200      	movs	r2, #0
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	2036      	movs	r0, #54	@ 0x36
 8001028:	f003 f860 	bl	80040ec <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800102c:	2036      	movs	r0, #54	@ 0x36
 800102e:	f003 f877 	bl	8004120 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001032:	4a29      	ldr	r2, [pc, #164]	@ (80010d8 <HAL_InitTick+0xc4>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <HAL_InitTick+0xc8>)
 800103a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800103e:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <HAL_InitTick+0xc8>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <HAL_InitTick+0xc8>)
 800104a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001056:	f107 0210 	add.w	r2, r7, #16
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f007 f917 	bl	8008294 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800106c:	2b00      	cmp	r3, #0
 800106e:	d106      	bne.n	800107e <HAL_InitTick+0x6a>
 8001070:	e001      	b.n	8001076 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e02b      	b.n	80010ce <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001076:	f007 f8e1 	bl	800823c <HAL_RCC_GetPCLK1Freq>
 800107a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800107c:	e004      	b.n	8001088 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800107e:	f007 f8dd 	bl	800823c <HAL_RCC_GetPCLK1Freq>
 8001082:	4603      	mov	r3, r0
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800108a:	4a15      	ldr	r2, [pc, #84]	@ (80010e0 <HAL_InitTick+0xcc>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	3b01      	subs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_InitTick+0xd0>)
 8001098:	4a13      	ldr	r2, [pc, #76]	@ (80010e8 <HAL_InitTick+0xd4>)
 800109a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <HAL_InitTick+0xd0>)
 800109e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a4:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b6:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010b8:	f008 fc50 	bl	800995c <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d104      	bne.n	80010cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <HAL_InitTick+0xd0>)
 80010c4:	f008 fcac 	bl	8009a20 <HAL_TIM_Base_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	e000      	b.n	80010ce <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3740      	adds	r7, #64	@ 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400003c 	.word	0x2400003c
 80010dc:	58024400 	.word	0x58024400
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	24000318 	.word	0x24000318
 80010e8:	40001000 	.word	0x40001000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8001126:	2004      	movs	r0, #4
 8001128:	f003 fe8f 	bl	8004e4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <TIM6_DAC_IRQHandler+0x10>)
 8001136:	f008 fceb 	bl	8009b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000318 	.word	0x24000318

08001144 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <LTDC_IRQHandler+0x10>)
 800114a:	f004 fde1 	bl	8005d10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2400020c 	.word	0x2400020c

08001158 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <DMA2D_IRQHandler+0x10>)
 800115e:	f003 f9c9 	bl	80044f4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	24000150 	.word	0x24000150

0800116c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <OCTOSPI1_IRQHandler+0x10>)
 8001172:	f005 f9fb 	bl	800656c <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	240002b4 	.word	0x240002b4

08001180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return 1;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_kill>:

int _kill(int pid, int sig)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800119a:	f024 f9dd 	bl	8025558 <__errno>
 800119e:	4603      	mov	r3, r0
 80011a0:	2216      	movs	r2, #22
 80011a2:	601a      	str	r2, [r3, #0]
  return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_exit>:

void _exit (int status)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffe7 	bl	8001190 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011c2:	bf00      	nop
 80011c4:	e7fd      	b.n	80011c2 <_exit+0x12>

080011c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e00a      	b.n	80011ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d8:	f3af 8000 	nop.w
 80011dc:	4601      	mov	r1, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	60ba      	str	r2, [r7, #8]
 80011e4:	b2ca      	uxtb	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf0      	blt.n	80011d8 <_read+0x12>
  }

  return len;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e009      	b.n	8001226 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60ba      	str	r2, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf1      	blt.n	8001212 <_write+0x12>
  }
  return len;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_close>:

int _close(int file)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	605a      	str	r2, [r3, #4]
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_isatty>:

int _isatty(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f024 f942 	bl	8025558 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24040000 	.word	0x24040000
 8001300:	00001000 	.word	0x00001000
 8001304:	24000364 	.word	0x24000364
 8001308:	2401c748 	.word	0x2401c748

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001310:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <SystemInit+0xd0>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a31      	ldr	r2, [pc, #196]	@ (80013dc <SystemInit+0xd0>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001320:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <SystemInit+0xd4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 030f 	and.w	r3, r3, #15
 8001328:	2b02      	cmp	r3, #2
 800132a:	d807      	bhi.n	800133c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800132c:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <SystemInit+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f023 030f 	bic.w	r3, r3, #15
 8001334:	4a2a      	ldr	r2, [pc, #168]	@ (80013e0 <SystemInit+0xd4>)
 8001336:	f043 0303 	orr.w	r3, r3, #3
 800133a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <SystemInit+0xd8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a28      	ldr	r2, [pc, #160]	@ (80013e4 <SystemInit+0xd8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001348:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <SystemInit+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <SystemInit+0xd8>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4924      	ldr	r1, [pc, #144]	@ (80013e4 <SystemInit+0xd8>)
 8001354:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <SystemInit+0xdc>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <SystemInit+0xd4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <SystemInit+0xd4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 030f 	bic.w	r3, r3, #15
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <SystemInit+0xd4>)
 8001370:	f043 0303 	orr.w	r3, r3, #3
 8001374:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <SystemInit+0xd8>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <SystemInit+0xd8>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SystemInit+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001388:	4b16      	ldr	r3, [pc, #88]	@ (80013e4 <SystemInit+0xd8>)
 800138a:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <SystemInit+0xe0>)
 800138c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <SystemInit+0xd8>)
 8001390:	4a17      	ldr	r2, [pc, #92]	@ (80013f0 <SystemInit+0xe4>)
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001394:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <SystemInit+0xd8>)
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <SystemInit+0xe8>)
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <SystemInit+0xd8>)
 800139c:	2200      	movs	r2, #0
 800139e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013a0:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <SystemInit+0xd8>)
 80013a2:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <SystemInit+0xe8>)
 80013a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <SystemInit+0xd8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <SystemInit+0xd8>)
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <SystemInit+0xe8>)
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <SystemInit+0xd8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <SystemInit+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <SystemInit+0xd8>)
 80013be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <SystemInit+0xd8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <SystemInit+0xec>)
 80013cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	52002000 	.word	0x52002000
 80013e4:	58024400 	.word	0x58024400
 80013e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013ec:	02020200 	.word	0x02020200
 80013f0:	01ff0000 	.word	0x01ff0000
 80013f4:	01010280 	.word	0x01010280
 80013f8:	52004000 	.word	0x52004000

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001400:	f7ff ff84 	bl	800130c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142a:	f024 f89b 	bl	8025564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7fe ffb9 	bl	80003a4 <main>
  bx  lr
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001438:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800143c:	24000110 	.word	0x24000110
  ldr r2, =_sidata
 8001440:	08028928 	.word	0x08028928
  ldr r2, =_sbss
 8001444:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 8001448:	2401c748 	.word	0x2401c748

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>
	...

08001450 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e02c      	b.n	80014c2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	891a      	ldrh	r2, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <FT5336_RegisterBusIO+0x7c>)
 800149c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <FT5336_RegisterBusIO+0x80>)
 80014a2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4798      	blx	r3
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	e002      	b.n	80014c2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	080018c9 	.word	0x080018c9
 80014d0:	080018fd 	.word	0x080018fd

080014d4 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2205      	movs	r2, #5
 80014ee:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80014f6:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80014fe:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10d      	bne.n	8001540 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f987 	bl	800183e <FT5336_DisableIT>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4413      	add	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8001546:	f04f 33ff 	mov.w	r3, #4294967295
 800154a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001568:	2b01      	cmp	r3, #1
 800156a:	d103      	bne.n	8001574 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f103 0218 	add.w	r2, r3, #24
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 fa25 	bl	80019ea <ft5336_radian_value>
 80015a0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f103 0218 	add.w	r2, r3, #24
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f000 fa2b 	bl	8001a0c <ft5336_offset_left_right>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 0218 	add.w	r2, r3, #24
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f000 fa2e 	bl	8001a2e <ft5336_offset_up_down>
 80015d2:	4602      	mov	r2, r0
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f103 0218 	add.w	r2, r3, #24
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f000 fa31 	bl	8001a50 <ft5336_disatnce_left_right>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f103 0218 	add.w	r2, r3, #24
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f000 fa34 	bl	8001a72 <ft5336_distance_up_down>
 800160a:	4602      	mov	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f103 0218 	add.w	r2, r3, #24
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f000 fa37 	bl	8001a94 <ft5336_distance_zoom>
 8001626:	4602      	mov	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3318      	adds	r3, #24
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fa3f 	bl	8001ad8 <ft5336_chip_id>
 800165a:	4603      	mov	r3, r0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f908 	bl	8001888 <FT5336_DetectTouch>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 0018 	add.w	r0, r3, #24
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	2304      	movs	r3, #4
 800168c:	2103      	movs	r1, #3
 800168e:	f000 f94f 	bl	8001930 <ft5336_read_reg>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e00f      	b.n	80016c0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 80016a0:	7a3b      	ldrb	r3, [r7, #8]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80016a8:	7a7a      	ldrb	r2, [r7, #9]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80016b0:	7abb      	ldrb	r3, [r7, #10]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80016b8:	7afa      	ldrb	r2, [r7, #11]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b08c      	sub	sp, #48	@ 0x30
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8d5 	bl	8001888 <FT5336_DetectTouch>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 0018 	add.w	r0, r3, #24
 80016ec:	f107 0208 	add.w	r2, r7, #8
 80016f0:	231e      	movs	r3, #30
 80016f2:	2103      	movs	r1, #3
 80016f4:	f000 f91c 	bl	8001930 <ft5336_read_reg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001704:	e077      	b.n	80017f6 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170a:	e071      	b.n	80017f0 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800170c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3330      	adds	r3, #48	@ 0x30
 8001718:	443b      	add	r3, r7
 800171a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8001724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	3301      	adds	r3, #1
 8001730:	3330      	adds	r3, #48	@ 0x30
 8001732:	443b      	add	r3, r7
 8001734:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001738:	ea41 0203 	orr.w	r2, r1, r3
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8001746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	3302      	adds	r3, #2
 8001752:	3330      	adds	r3, #48	@ 0x30
 8001754:	443b      	add	r3, r7
 8001756:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 8001760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	3303      	adds	r3, #3
 800176c:	3330      	adds	r3, #48	@ 0x30
 800176e:	443b      	add	r3, r7
 8001770:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001774:	4319      	orrs	r1, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800177a:	3206      	adds	r2, #6
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8001780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	3330      	adds	r3, #48	@ 0x30
 800178c:	443b      	add	r3, r7
 800178e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4619      	mov	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800179c:	3210      	adds	r2, #16
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 80017a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	3304      	adds	r3, #4
 80017ae:	3330      	adds	r3, #48	@ 0x30
 80017b0:	443b      	add	r3, r7
 80017b2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017b6:	4619      	mov	r1, r3
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	330a      	adds	r3, #10
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80017c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	3305      	adds	r3, #5
 80017d0:	3330      	adds	r3, #48	@ 0x30
 80017d2:	443b      	add	r3, r7
 80017d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e2:	3314      	adds	r3, #20
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	3301      	adds	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d98a      	bls.n	800170c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80017f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3730      	adds	r7, #48	@ 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3318      	adds	r3, #24
 800180e:	6839      	ldr	r1, [r7, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8bb 	bl	800198c <ft5336_gest_id>
 8001816:	4603      	mov	r3, r0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3318      	adds	r3, #24
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f941 	bl	8001ab6 <ft5336_g_mode>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3318      	adds	r3, #24
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f932 	bl	8001ab6 <ft5336_g_mode>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3318      	adds	r3, #24
 8001894:	f107 020b 	add.w	r2, r7, #11
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f886 	bl	80019ac <ft5336_td_status>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e007      	b.n	80018be <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d902      	bls.n	80018ba <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e001      	b.n	80018be <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	461a      	mov	r2, r3
 80018d4:	460b      	mov	r3, r1
 80018d6:	72fb      	strb	r3, [r7, #11]
 80018d8:	4613      	mov	r3, r2
 80018da:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	691c      	ldr	r4, [r3, #16]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	8918      	ldrh	r0, [r3, #8]
 80018e8:	7afb      	ldrb	r3, [r7, #11]
 80018ea:	b299      	uxth	r1, r3
 80018ec:	893b      	ldrh	r3, [r7, #8]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	47a0      	blx	r4
 80018f2:	4603      	mov	r3, r0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}

080018fc <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	461a      	mov	r2, r3
 8001908:	460b      	mov	r3, r1
 800190a:	72fb      	strb	r3, [r7, #11]
 800190c:	4613      	mov	r3, r2
 800190e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	68dc      	ldr	r4, [r3, #12]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	8918      	ldrh	r0, [r3, #8]
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b299      	uxth	r1, r3
 8001920:	893b      	ldrh	r3, [r7, #8]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	47a0      	blx	r4
 8001926:	4603      	mov	r3, r0
}
 8001928:	4618      	mov	r0, r3
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	460b      	mov	r3, r1
 800193e:	72fb      	strb	r3, [r7, #11]
 8001940:	4613      	mov	r3, r2
 8001942:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685c      	ldr	r4, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6898      	ldr	r0, [r3, #8]
 800194c:	893b      	ldrh	r3, [r7, #8]
 800194e:	7af9      	ldrb	r1, [r7, #11]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	47a0      	blx	r4
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}

0800195e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	461a      	mov	r2, r3
 800196a:	460b      	mov	r3, r1
 800196c:	72fb      	strb	r3, [r7, #11]
 800196e:	4613      	mov	r3, r2
 8001970:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681c      	ldr	r4, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6898      	ldr	r0, [r3, #8]
 800197a:	893b      	ldrh	r3, [r7, #8]
 800197c:	7af9      	ldrb	r1, [r7, #11]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	47a0      	blx	r4
 8001982:	4603      	mov	r3, r0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}

0800198c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8001996:	2301      	movs	r3, #1
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffc7 	bl	8001930 <ft5336_read_reg>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80019b6:	2301      	movs	r3, #1
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	2102      	movs	r1, #2
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffb7 	bl	8001930 <ft5336_read_reg>
 80019c2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80019f6:	1cfa      	adds	r2, r7, #3
 80019f8:	2301      	movs	r3, #1
 80019fa:	2191      	movs	r1, #145	@ 0x91
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffae 	bl	800195e <ft5336_write_reg>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8001a18:	1cfa      	adds	r2, r7, #3
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	2192      	movs	r1, #146	@ 0x92
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff9d 	bl	800195e <ft5336_write_reg>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8001a3a:	1cfa      	adds	r2, r7, #3
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	2193      	movs	r1, #147	@ 0x93
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ff8c 	bl	800195e <ft5336_write_reg>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8001a5c:	1cfa      	adds	r2, r7, #3
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2194      	movs	r1, #148	@ 0x94
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff7b 	bl	800195e <ft5336_write_reg>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8001a7e:	1cfa      	adds	r2, r7, #3
 8001a80:	2301      	movs	r3, #1
 8001a82:	2195      	movs	r1, #149	@ 0x95
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff6a 	bl	800195e <ft5336_write_reg>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8001aa0:	1cfa      	adds	r2, r7, #3
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2196      	movs	r1, #150	@ 0x96
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff59 	bl	800195e <ft5336_write_reg>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8001ac2:	1cfa      	adds	r2, r7, #3
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	21a4      	movs	r1, #164	@ 0xa4
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff48 	bl	800195e <ft5336_write_reg>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	21a8      	movs	r1, #168	@ 0xa8
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff21 	bl	8001930 <ft5336_read_reg>
 8001aee:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <MX25LM51245G_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval error status
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b1e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b26:	605a      	str	r2, [r3, #4]
  pInfo->EraseSectorsNumber     = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SECTOR_64K);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2e:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b36:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b3e:	611a      	str	r2, [r3, #16]
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b46:	615a      	str	r2, [r3, #20]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b4e:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b56:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b5e:	621a      	str	r2, [r3, #32]

  return MX25LM51245G_OK;
 8001b60:	2300      	movs	r3, #0
};
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b09c      	sub	sp, #112	@ 0x70
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	70fb      	strb	r3, [r7, #3]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef  s_command = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2250      	movs	r2, #80	@ 0x50
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f023 fbed 	bl	8025366 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <MX25LM51245G_AutoPollingMemReady+0x40>
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d102      	bne.n	8001bae <MX25LM51245G_AutoPollingMemReady+0x40>
  {
    return MX25LM51245G_ERROR;
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	e088      	b.n	8001cc0 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  /* Configure automatic polling mode to wait for memory ready */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <MX25LM51245G_AutoPollingMemReady+0x52>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <MX25LM51245G_AutoPollingMemReady+0x54>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001bc4:	78bb      	ldrb	r3, [r7, #2]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <MX25LM51245G_AutoPollingMemReady+0x60>
 8001bca:	2308      	movs	r3, #8
 8001bcc:	e000      	b.n	8001bd0 <MX25LM51245G_AutoPollingMemReady+0x62>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <MX25LM51245G_AutoPollingMemReady+0x6e>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e000      	b.n	8001bde <MX25LM51245G_AutoPollingMemReady+0x70>
 8001bdc:	2310      	movs	r3, #16
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <MX25LM51245G_AutoPollingMemReady+0x7c>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e001      	b.n	8001bee <MX25LM51245G_AutoPollingMemReady+0x80>
 8001bea:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <MX25LM51245G_AutoPollingMemReady+0x8c>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e001      	b.n	8001bfe <MX25LM51245G_AutoPollingMemReady+0x90>
 8001bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001c00:	78bb      	ldrb	r3, [r7, #2]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <MX25LM51245G_AutoPollingMemReady+0x9e>
 8001c06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c0a:	e000      	b.n	8001c0e <MX25LM51245G_AutoPollingMemReady+0xa0>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001c10:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c14:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address            = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <MX25LM51245G_AutoPollingMemReady+0xbc>
 8001c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c28:	e001      	b.n	8001c2e <MX25LM51245G_AutoPollingMemReady+0xc0>
 8001c2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8001c30:	78bb      	ldrb	r3, [r7, #2]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <MX25LM51245G_AutoPollingMemReady+0xce>
 8001c36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001c3a:	e000      	b.n	8001c3e <MX25LM51245G_AutoPollingMemReady+0xd0>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <MX25LM51245G_AutoPollingMemReady+0xdc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <MX25LM51245G_AutoPollingMemReady+0xde>
 8001c4a:	2305      	movs	r3, #5
 8001c4c:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8001c4e:	78bb      	ldrb	r3, [r7, #2]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <MX25LM51245G_AutoPollingMemReady+0xea>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e000      	b.n	8001c5a <MX25LM51245G_AutoPollingMemReady+0xec>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d102      	bne.n	8001c68 <MX25LM51245G_AutoPollingMemReady+0xfa>
 8001c62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c66:	e000      	b.n	8001c6a <MX25LM51245G_AutoPollingMemReady+0xfc>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  s_config.Match         = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	613b      	str	r3, [r7, #16]
  s_config.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  s_config.Interval      = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8001c80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c84:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f004 fdad 	bl	80067f0 <HAL_OSPI_Command>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <MX25LM51245G_AutoPollingMemReady+0x134>
  {
    return MX25LM51245G_ERROR;
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	e00e      	b.n	8001cc0 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f004 ff42 	bl	8006b36 <HAL_OSPI_AutoPolling>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <MX25LM51245G_AutoPollingMemReady+0x150>
  {
    return MX25LM51245G_ERROR;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	e000      	b.n	8001cc0 <MX25LM51245G_AutoPollingMemReady+0x152>
  }

  return MX25LM51245G_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3770      	adds	r7, #112	@ 0x70
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <MX25LM51245G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeSTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b098      	sub	sp, #96	@ 0x60
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef      s_command = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	2250      	movs	r2, #80	@ 0x50
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f023 fb40 	bl	8025366 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d105      	bne.n	8001d02 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
 8001cf6:	78bb      	ldrb	r3, [r7, #2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <MX25LM51245G_EnableMemoryMappedModeSTR+0x3a>
  {
    return MX25LM51245G_ERROR;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001d00:	e088      	b.n	8001e14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8001d02:	2301      	movs	r3, #1
 8001d04:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4c>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <MX25LM51245G_EnableMemoryMappedModeSTR+0x4e>
 8001d14:	2304      	movs	r3, #4
 8001d16:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <MX25LM51245G_EnableMemoryMappedModeSTR+0x5e>
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <MX25LM51245G_EnableMemoryMappedModeSTR+0x60>
 8001d26:	2310      	movs	r3, #16
 8001d28:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d106      	bne.n	8001d3e <MX25LM51245G_EnableMemoryMappedModeSTR+0x76>
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <MX25LM51245G_EnableMemoryMappedModeSTR+0x72>
 8001d36:	230b      	movs	r3, #11
 8001d38:	e003      	b.n	8001d42 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	e001      	b.n	8001d42 <MX25LM51245G_EnableMemoryMappedModeSTR+0x7a>
 8001d3e:	f64e 4313 	movw	r3, #60435	@ 0xec13
 8001d42:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <MX25LM51245G_EnableMemoryMappedModeSTR+0x88>
 8001d4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d4e:	e001      	b.n	8001d54 <MX25LM51245G_EnableMemoryMappedModeSTR+0x8c>
 8001d50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8001d5a:	78bb      	ldrb	r3, [r7, #2]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <MX25LM51245G_EnableMemoryMappedModeSTR+0x9e>
 8001d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d64:	e001      	b.n	8001d6a <MX25LM51245G_EnableMemoryMappedModeSTR+0xa2>
 8001d66:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <MX25LM51245G_EnableMemoryMappedModeSTR+0xb4>
 8001d76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d7a:	e001      	b.n	8001d80 <MX25LM51245G_EnableMemoryMappedModeSTR+0xb8>
 8001d7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d80:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <MX25LM51245G_EnableMemoryMappedModeSTR+0xc8>
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	e000      	b.n	8001d92 <MX25LM51245G_EnableMemoryMappedModeSTR+0xca>
 8001d90:	2306      	movs	r3, #6
 8001d92:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the read command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f004 fd22 	bl	80067f0 <HAL_OSPI_Command>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <MX25LM51245G_EnableMemoryMappedModeSTR+0xf0>
  {
    return MX25LM51245G_ERROR;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e02d      	b.n	8001e14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Initialize the program command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001db8:	2302      	movs	r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <MX25LM51245G_EnableMemoryMappedModeSTR+0x108>
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <MX25LM51245G_EnableMemoryMappedModeSTR+0x104>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e003      	b.n	8001dd4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8001dcc:	2312      	movs	r3, #18
 8001dce:	e001      	b.n	8001dd4 <MX25LM51245G_EnableMemoryMappedModeSTR+0x10c>
 8001dd0:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001dd4:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles        = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the write command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f004 fd03 	bl	80067f0 <HAL_OSPI_Command>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <MX25LM51245G_EnableMemoryMappedModeSTR+0x12e>
  {
    return MX25LM51245G_ERROR;
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	e00e      	b.n	8001e14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f004 ff1f 	bl	8006c44 <HAL_OSPI_MemoryMapped>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14a>
  {
    return MX25LM51245G_ERROR;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e10:	e000      	b.n	8001e14 <MX25LM51245G_EnableMemoryMappedModeSTR+0x14c>
  }

  return MX25LM51245G_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3760      	adds	r7, #96	@ 0x60
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <MX25LM51245G_EnableMemoryMappedModeDTR>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableMemoryMappedModeDTR(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b098      	sub	sp, #96	@ 0x60
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	2250      	movs	r2, #80	@ 0x50
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f023 fa98 	bl	8025366 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8001e40:	2301      	movs	r3, #1
 8001e42:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8001e50:	2310      	movs	r3, #16
 8001e52:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 8001e54:	f64e 6311 	movw	r3, #60945	@ 0xee11
 8001e58:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
 8001e60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8001e66:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 8001e70:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = HAL_OSPI_DATA_DTR_ENABLE;
 8001e76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001e7a:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 8001e7c:	2306      	movs	r3, #6
 8001e7e:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8001e80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e84:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001e86:	2300      	movs	r3, #0
 8001e88:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f004 fcab 	bl	80067f0 <HAL_OSPI_Command>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <MX25LM51245G_EnableMemoryMappedModeDTR+0x8a>
  {
    return MX25LM51245G_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea4:	e025      	b.n	8001ef2 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  /* Initialize the program command */
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8001eaa:	f241 23ed 	movw	r3, #4845	@ 0x12ed
 8001eae:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles   = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f004 fc94 	bl	80067f0 <HAL_OSPI_Command>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <MX25LM51245G_EnableMemoryMappedModeDTR+0xb8>
  {
    return MX25LM51245G_ERROR;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e00e      	b.n	8001ef2 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]

  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4619      	mov	r1, r3
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f004 feb0 	bl	8006c44 <HAL_OSPI_MemoryMapped>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd4>
  {
    return MX25LM51245G_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e000      	b.n	8001ef2 <MX25LM51245G_EnableMemoryMappedModeDTR+0xd6>
  }

  return MX25LM51245G_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3760      	adds	r7, #96	@ 0x60
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b09c      	sub	sp, #112	@ 0x70
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
 8001f06:	4613      	mov	r3, r2
 8001f08:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef     s_command = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2250      	movs	r2, #80	@ 0x50
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f023 fa27 	bl	8025366 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <MX25LM51245G_WriteEnable+0x40>
 8001f2e:	78bb      	ldrb	r3, [r7, #2]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <MX25LM51245G_WriteEnable+0x40>
  {
    return MX25LM51245G_ERROR;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
 8001f38:	e0a6      	b.n	8002088 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Initialize the write enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <MX25LM51245G_WriteEnable+0x52>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <MX25LM51245G_WriteEnable+0x54>
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <MX25LM51245G_WriteEnable+0x60>
 8001f56:	2308      	movs	r3, #8
 8001f58:	e000      	b.n	8001f5c <MX25LM51245G_WriteEnable+0x62>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <MX25LM51245G_WriteEnable+0x6e>
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <MX25LM51245G_WriteEnable+0x70>
 8001f68:	2310      	movs	r3, #16
 8001f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <MX25LM51245G_WriteEnable+0x7c>
 8001f72:	2306      	movs	r3, #6
 8001f74:	e001      	b.n	8001f7a <MX25LM51245G_WriteEnable+0x80>
 8001f76:	f240 63f9 	movw	r3, #1785	@ 0x6f9
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DummyCycles        = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001f90:	2300      	movs	r3, #0
 8001f92:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f004 fc26 	bl	80067f0 <HAL_OSPI_Command>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <MX25LM51245G_WriteEnable+0xb6>
  {
    return MX25LM51245G_ERROR;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e06b      	b.n	8002088 <MX25LM51245G_WriteEnable+0x18e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <MX25LM51245G_WriteEnable+0xc0>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e001      	b.n	8001fbe <MX25LM51245G_WriteEnable+0xc4>
 8001fba:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <MX25LM51245G_WriteEnable+0xd0>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e001      	b.n	8001fce <MX25LM51245G_WriteEnable+0xd4>
 8001fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8001fd0:	78bb      	ldrb	r3, [r7, #2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d102      	bne.n	8001fdc <MX25LM51245G_WriteEnable+0xe2>
 8001fd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fda:	e000      	b.n	8001fde <MX25LM51245G_WriteEnable+0xe4>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 8001fe0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.Address        = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d102      	bne.n	8001ff6 <MX25LM51245G_WriteEnable+0xfc>
 8001ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ff4:	e001      	b.n	8001ffa <MX25LM51245G_WriteEnable+0x100>
 8001ff6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d102      	bne.n	8002008 <MX25LM51245G_WriteEnable+0x10e>
 8002002:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002006:	e000      	b.n	800200a <MX25LM51245G_WriteEnable+0x110>
 8002008:	2300      	movs	r3, #0
 800200a:	663b      	str	r3, [r7, #96]	@ 0x60
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <MX25LM51245G_WriteEnable+0x11c>
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <MX25LM51245G_WriteEnable+0x11e>
 8002016:	2305      	movs	r3, #5
 8002018:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800201a:	78bb      	ldrb	r3, [r7, #2]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <MX25LM51245G_WriteEnable+0x12a>
 8002020:	2302      	movs	r3, #2
 8002022:	e000      	b.n	8002026 <MX25LM51245G_WriteEnable+0x12c>
 8002024:	2301      	movs	r3, #1
 8002026:	65fb      	str	r3, [r7, #92]	@ 0x5c
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8002028:	78bb      	ldrb	r3, [r7, #2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <MX25LM51245G_WriteEnable+0x13a>
 800202e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002032:	e000      	b.n	8002036 <MX25LM51245G_WriteEnable+0x13c>
 8002034:	2300      	movs	r3, #0
 8002036:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002040:	4619      	mov	r1, r3
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f004 fbd4 	bl	80067f0 <HAL_OSPI_Command>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <MX25LM51245G_WriteEnable+0x15a>
  {
    return MX25LM51245G_ERROR;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e019      	b.n	8002088 <MX25LM51245G_WriteEnable+0x18e>
  }

  s_config.Match           = 2U;
 8002054:	2302      	movs	r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
  s_config.Mask            = 2U;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MX25LM51245G_AUTOPOLLING_INTERVAL_TIME;
 8002060:	2310      	movs	r3, #16
 8002062:	61fb      	str	r3, [r7, #28]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8002064:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002068:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f004 fd5e 	bl	8006b36 <HAL_OSPI_AutoPolling>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <MX25LM51245G_WriteEnable+0x18c>
  {
    return MX25LM51245G_ERROR;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	e000      	b.n	8002088 <MX25LM51245G_WriteEnable+0x18e>
  }

  return MX25LM51245G_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3770      	adds	r7, #112	@ 0x70
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b098      	sub	sp, #96	@ 0x60
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	72fb      	strb	r3, [r7, #11]
 800209e:	4613      	mov	r3, r2
 80020a0:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	2250      	movs	r2, #80	@ 0x50
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f023 f95b 	bl	8025366 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <MX25LM51245G_WriteCfg2Register+0x32>
 80020b6:	7abb      	ldrb	r3, [r7, #10]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d102      	bne.n	80020c2 <MX25LM51245G_WriteCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80020bc:	f04f 33ff 	mov.w	r3, #4294967295
 80020c0:	e077      	b.n	80021b2 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  /* Initialize the writing of configuration register 2 */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <MX25LM51245G_WriteCfg2Register+0x44>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <MX25LM51245G_WriteCfg2Register+0x46>
 80020d4:	2304      	movs	r3, #4
 80020d6:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80020d8:	7abb      	ldrb	r3, [r7, #10]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <MX25LM51245G_WriteCfg2Register+0x52>
 80020de:	2308      	movs	r3, #8
 80020e0:	e000      	b.n	80020e4 <MX25LM51245G_WriteCfg2Register+0x54>
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <MX25LM51245G_WriteCfg2Register+0x60>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <MX25LM51245G_WriteCfg2Register+0x62>
 80020f0:	2310      	movs	r3, #16
 80020f2:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <MX25LM51245G_WriteCfg2Register+0x6e>
 80020fa:	2372      	movs	r3, #114	@ 0x72
 80020fc:	e001      	b.n	8002102 <MX25LM51245G_WriteCfg2Register+0x72>
 80020fe:	f247 238d 	movw	r3, #29325	@ 0x728d
 8002102:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <MX25LM51245G_WriteCfg2Register+0x80>
 800210a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800210e:	e001      	b.n	8002114 <MX25LM51245G_WriteCfg2Register+0x84>
 8002110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002116:	7abb      	ldrb	r3, [r7, #10]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <MX25LM51245G_WriteCfg2Register+0x92>
 800211c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002120:	e000      	b.n	8002124 <MX25LM51245G_WriteCfg2Register+0x94>
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002126:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800212a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = WriteAddr;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002130:	2300      	movs	r3, #0
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <MX25LM51245G_WriteCfg2Register+0xb0>
 800213a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800213e:	e001      	b.n	8002144 <MX25LM51245G_WriteCfg2Register+0xb4>
 8002140:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002146:	7abb      	ldrb	r3, [r7, #10]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <MX25LM51245G_WriteCfg2Register+0xc2>
 800214c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002150:	e000      	b.n	8002154 <MX25LM51245G_WriteCfg2Register+0xc4>
 8002152:	2300      	movs	r3, #0
 8002154:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <MX25LM51245G_WriteCfg2Register+0xde>
 8002160:	7abb      	ldrb	r3, [r7, #10]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <MX25LM51245G_WriteCfg2Register+0xda>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <MX25LM51245G_WriteCfg2Register+0xe0>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <MX25LM51245G_WriteCfg2Register+0xe0>
 800216e:	2301      	movs	r3, #1
 8002170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002176:	2300      	movs	r3, #0
 8002178:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800217a:	f107 0310 	add.w	r3, r7, #16
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4619      	mov	r1, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f004 fb33 	bl	80067f0 <HAL_OSPI_Command>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <MX25LM51245G_WriteCfg2Register+0x106>
  {
    return MX25LM51245G_ERROR;
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	e00d      	b.n	80021b2 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800219a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f004 fbb3 	bl	800690a <HAL_OSPI_Transmit>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <MX25LM51245G_WriteCfg2Register+0x120>
  {
    return MX25LM51245G_ERROR;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e000      	b.n	80021b2 <MX25LM51245G_WriteCfg2Register+0x122>
  }

  return MX25LM51245G_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3760      	adds	r7, #96	@ 0x60
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b098      	sub	sp, #96	@ 0x60
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	72fb      	strb	r3, [r7, #11]
 80021c8:	4613      	mov	r3, r2
 80021ca:	72bb      	strb	r3, [r7, #10]
  OSPI_RegularCmdTypeDef s_command = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2250      	movs	r2, #80	@ 0x50
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f023 f8c6 	bl	8025366 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <MX25LM51245G_ReadCfg2Register+0x32>
 80021e0:	7abb      	ldrb	r3, [r7, #10]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <MX25LM51245G_ReadCfg2Register+0x32>
  {
    return MX25LM51245G_ERROR;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e07c      	b.n	80022e6 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Initialize the reading of status register */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80021f4:	7afb      	ldrb	r3, [r7, #11]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <MX25LM51245G_ReadCfg2Register+0x44>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <MX25LM51245G_ReadCfg2Register+0x46>
 80021fe:	2304      	movs	r3, #4
 8002200:	61fb      	str	r3, [r7, #28]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002202:	7abb      	ldrb	r3, [r7, #10]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <MX25LM51245G_ReadCfg2Register+0x52>
 8002208:	2308      	movs	r3, #8
 800220a:	e000      	b.n	800220e <MX25LM51245G_ReadCfg2Register+0x54>
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <MX25LM51245G_ReadCfg2Register+0x60>
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <MX25LM51245G_ReadCfg2Register+0x62>
 800221a:	2310      	movs	r3, #16
 800221c:	623b      	str	r3, [r7, #32]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <MX25LM51245G_ReadCfg2Register+0x6e>
 8002224:	2371      	movs	r3, #113	@ 0x71
 8002226:	e001      	b.n	800222c <MX25LM51245G_ReadCfg2Register+0x72>
 8002228:	f247 138e 	movw	r3, #29070	@ 0x718e
 800222c:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <MX25LM51245G_ReadCfg2Register+0x80>
 8002234:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002238:	e001      	b.n	800223e <MX25LM51245G_ReadCfg2Register+0x84>
 800223a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800223e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002240:	7abb      	ldrb	r3, [r7, #10]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <MX25LM51245G_ReadCfg2Register+0x92>
 8002246:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800224a:	e000      	b.n	800224e <MX25LM51245G_ReadCfg2Register+0x94>
 800224c:	2300      	movs	r3, #0
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8002250:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002254:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.Address            = ReadAddr;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800225a:	2300      	movs	r3, #0
 800225c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <MX25LM51245G_ReadCfg2Register+0xb0>
 8002264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002268:	e001      	b.n	800226e <MX25LM51245G_ReadCfg2Register+0xb4>
 800226a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800226e:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8002270:	7abb      	ldrb	r3, [r7, #10]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <MX25LM51245G_ReadCfg2Register+0xc2>
 8002276:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800227a:	e000      	b.n	800227e <MX25LM51245G_ReadCfg2Register+0xc4>
 800227c:	2300      	movs	r3, #0
 800227e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <MX25LM51245G_ReadCfg2Register+0xd0>
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <MX25LM51245G_ReadCfg2Register+0xd2>
 800228a:	2305      	movs	r3, #5
 800228c:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800228e:	7abb      	ldrb	r3, [r7, #10]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <MX25LM51245G_ReadCfg2Register+0xde>
 8002294:	2302      	movs	r3, #2
 8002296:	e000      	b.n	800229a <MX25LM51245G_ReadCfg2Register+0xe0>
 8002298:	2301      	movs	r3, #1
 800229a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800229c:	7abb      	ldrb	r3, [r7, #10]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <MX25LM51245G_ReadCfg2Register+0xee>
 80022a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80022a6:	e000      	b.n	80022aa <MX25LM51245G_ReadCfg2Register+0xf0>
 80022a8:	2300      	movs	r3, #0
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b8:	4619      	mov	r1, r3
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f004 fa98 	bl	80067f0 <HAL_OSPI_Command>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <MX25LM51245G_ReadCfg2Register+0x112>
  {
    return MX25LM51245G_ERROR;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	e00c      	b.n	80022e6 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80022cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f004 fb8c 	bl	80069f0 <HAL_OSPI_Receive>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <MX25LM51245G_ReadCfg2Register+0x12a>
  {
    return MX25LM51245G_ERROR;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e000      	b.n	80022e6 <MX25LM51245G_ReadCfg2Register+0x12c>
  }

  return MX25LM51245G_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3760      	adds	r7, #96	@ 0x60
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b096      	sub	sp, #88	@ 0x58
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
 80022fa:	4613      	mov	r3, r2
 80022fc:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	2250      	movs	r2, #80	@ 0x50
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f023 f82d 	bl	8025366 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <MX25LM51245G_ResetEnable+0x30>
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d102      	bne.n	800231e <MX25LM51245G_ResetEnable+0x30>
  {
    return MX25LM51245G_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	e03b      	b.n	8002396 <MX25LM51245G_ResetEnable+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <MX25LM51245G_ResetEnable+0x42>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <MX25LM51245G_ResetEnable+0x44>
 8002330:	2304      	movs	r3, #4
 8002332:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002334:	78bb      	ldrb	r3, [r7, #2]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <MX25LM51245G_ResetEnable+0x50>
 800233a:	2308      	movs	r3, #8
 800233c:	e000      	b.n	8002340 <MX25LM51245G_ResetEnable+0x52>
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <MX25LM51245G_ResetEnable+0x5e>
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <MX25LM51245G_ResetEnable+0x60>
 800234c:	2310      	movs	r3, #16
 800234e:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <MX25LM51245G_ResetEnable+0x6c>
 8002356:	2366      	movs	r3, #102	@ 0x66
 8002358:	e001      	b.n	800235e <MX25LM51245G_ResetEnable+0x70>
 800235a:	f246 6399 	movw	r3, #26265	@ 0x6699
 800235e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002360:	2300      	movs	r3, #0
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8002368:	2300      	movs	r3, #0
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002374:	2300      	movs	r3, #0
 8002376:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f004 fa34 	bl	80067f0 <HAL_OSPI_Command>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <MX25LM51245G_ResetEnable+0xa6>
  {
    return MX25LM51245G_ERROR;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e000      	b.n	8002396 <MX25LM51245G_ResetEnable+0xa8>
  }

  return MX25LM51245G_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3758      	adds	r7, #88	@ 0x58
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b096      	sub	sp, #88	@ 0x58
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
 80023aa:	4613      	mov	r3, r2
 80023ac:	70bb      	strb	r3, [r7, #2]
  OSPI_RegularCmdTypeDef s_command = {0};
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	2250      	movs	r2, #80	@ 0x50
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f022 ffd5 	bl	8025366 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <MX25LM51245G_ResetMemory+0x30>
 80023c2:	78bb      	ldrb	r3, [r7, #2]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <MX25LM51245G_ResetMemory+0x30>
  {
    return MX25LM51245G_ERROR;
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	e03b      	b.n	8002446 <MX25LM51245G_ResetMemory+0xa8>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <MX25LM51245G_ResetMemory+0x42>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <MX25LM51245G_ResetMemory+0x44>
 80023e0:	2304      	movs	r3, #4
 80023e2:	617b      	str	r3, [r7, #20]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80023e4:	78bb      	ldrb	r3, [r7, #2]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <MX25LM51245G_ResetMemory+0x50>
 80023ea:	2308      	movs	r3, #8
 80023ec:	e000      	b.n	80023f0 <MX25LM51245G_ResetMemory+0x52>
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <MX25LM51245G_ResetMemory+0x5e>
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <MX25LM51245G_ResetMemory+0x60>
 80023fc:	2310      	movs	r3, #16
 80023fe:	61bb      	str	r3, [r7, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <MX25LM51245G_ResetMemory+0x6c>
 8002406:	2399      	movs	r3, #153	@ 0x99
 8002408:	e001      	b.n	800240e <MX25LM51245G_ResetMemory+0x70>
 800240a:	f649 1366 	movw	r3, #39270	@ 0x9966
 800240e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode           = HAL_OSPI_DATA_NONE;
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DummyCycles        = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002424:	2300      	movs	r3, #0
 8002426:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002428:	f107 0308 	add.w	r3, r7, #8
 800242c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f004 f9dc 	bl	80067f0 <HAL_OSPI_Command>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <MX25LM51245G_ResetMemory+0xa6>
  {
    return MX25LM51245G_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e000      	b.n	8002446 <MX25LM51245G_ResetMemory+0xa8>
  }

  return MX25LM51245G_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3758      	adds	r7, #88	@ 0x58
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <BSP_I2C4_Init+0x64>)
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <BSP_I2C4_Init+0x68>)
 800245e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002460:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <BSP_I2C4_Init+0x6c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11f      	bne.n	80024a8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <BSP_I2C4_Init+0x6c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3301      	adds	r3, #1
 800246e:	4a13      	ldr	r2, [pc, #76]	@ (80024bc <BSP_I2C4_Init+0x6c>)
 8002470:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002472:	4810      	ldr	r0, [pc, #64]	@ (80024b4 <BSP_I2C4_Init+0x64>)
 8002474:	f003 f808 	bl	8005488 <HAL_I2C_GetState>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d114      	bne.n	80024a8 <BSP_I2C4_Init+0x58>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800247e:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <BSP_I2C4_Init+0x64>)
 8002480:	f000 fb60 	bl	8002b44 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002484:	f005 fef0 	bl	8008268 <HAL_RCC_GetPCLK2Freq>
 8002488:	4603      	mov	r3, r0
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <BSP_I2C4_Init+0x70>)
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f8e3 	bl	8002658 <I2C_GetTiming>
 8002492:	4603      	mov	r3, r0
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	@ (80024b4 <BSP_I2C4_Init+0x64>)
 8002498:	f000 f838 	bl	800250c <MX_I2C4_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80024a2:	f06f 0307 	mvn.w	r3, #7
 80024a6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	24000d70 	.word	0x24000d70
 80024b8:	58001c00 	.word	0x58001c00
 80024bc:	24000368 	.word	0x24000368
 80024c0:	00061a80 	.word	0x00061a80

080024c4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <BSP_I2C4_DeInit+0x40>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <BSP_I2C4_DeInit+0x40>)
 80024d6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80024d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <BSP_I2C4_DeInit+0x40>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10b      	bne.n	80024f8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80024e0:	4809      	ldr	r0, [pc, #36]	@ (8002508 <BSP_I2C4_DeInit+0x44>)
 80024e2:	f000 fb9b 	bl	8002c1c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80024e6:	4808      	ldr	r0, [pc, #32]	@ (8002508 <BSP_I2C4_DeInit+0x44>)
 80024e8:	f002 fd70 	bl	8004fcc <HAL_I2C_DeInit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80024f2:	f06f 0307 	mvn.w	r3, #7
 80024f6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	24000368 	.word	0x24000368
 8002508:	24000d70 	.word	0x24000d70

0800250c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f002 fca2 	bl	8004e94 <HAL_I2C_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e014      	b.n	8002586 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f003 fa6c 	bl	8005a40 <HAL_I2CEx_ConfigAnalogFilter>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e008      	b.n	8002586 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002574:	2100      	movs	r1, #0
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f003 faad 	bl	8005ad6 <HAL_I2CEx_ConfigDigitalFilter>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002586:	7bfb      	ldrb	r3, [r7, #15]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60ba      	str	r2, [r7, #8]
 8002598:	461a      	mov	r2, r3
 800259a:	4603      	mov	r3, r0
 800259c:	81fb      	strh	r3, [r7, #14]
 800259e:	460b      	mov	r3, r1
 80025a0:	81bb      	strh	r3, [r7, #12]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80025a6:	89b9      	ldrh	r1, [r7, #12]
 80025a8:	89f8      	ldrh	r0, [r7, #14]
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f000 fb57 	bl	8002c64 <I2C4_WriteReg>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e00c      	b.n	80025dc <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80025c2:	4809      	ldr	r0, [pc, #36]	@ (80025e8 <BSP_I2C4_WriteReg+0x58>)
 80025c4:	f002 ff6e 	bl	80054a4 <HAL_I2C_GetError>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d103      	bne.n	80025d6 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025ce:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e002      	b.n	80025dc <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80025d6:	f06f 0303 	mvn.w	r3, #3
 80025da:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80025dc:	697b      	ldr	r3, [r7, #20]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	24000d70 	.word	0x24000d70

080025ec <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60ba      	str	r2, [r7, #8]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	81fb      	strh	r3, [r7, #14]
 80025fa:	460b      	mov	r3, r1
 80025fc:	81bb      	strh	r3, [r7, #12]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002602:	89b9      	ldrh	r1, [r7, #12]
 8002604:	89f8      	ldrh	r0, [r7, #14]
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2201      	movs	r2, #1
 800260e:	f000 fb4f 	bl	8002cb0 <I2C4_ReadReg>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00c      	b.n	8002638 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800261e:	4809      	ldr	r0, [pc, #36]	@ (8002644 <BSP_I2C4_ReadReg+0x58>)
 8002620:	f002 ff40 	bl	80054a4 <HAL_I2C_GetError>
 8002624:	4603      	mov	r3, r0
 8002626:	2b04      	cmp	r3, #4
 8002628:	d103      	bne.n	8002632 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800262a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e002      	b.n	8002638 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002632:	f06f 0303 	mvn.w	r3, #3
 8002636:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002638:	697b      	ldr	r3, [r7, #20]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	24000d70 	.word	0x24000d70

08002648 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800264c:	f001 fc42 	bl	8003ed4 <HAL_GetTick>
 8002650:	4603      	mov	r3, r0
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06b      	beq.n	8002744 <I2C_GetTiming+0xec>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d068      	beq.n	8002744 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e060      	b.n	800273a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002678:	4a35      	ldr	r2, [pc, #212]	@ (8002750 <I2C_GetTiming+0xf8>)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	212c      	movs	r1, #44	@ 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3304      	adds	r3, #4
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d352      	bcc.n	8002734 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800268e:	4a30      	ldr	r2, [pc, #192]	@ (8002750 <I2C_GetTiming+0xf8>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	212c      	movs	r1, #44	@ 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3308      	adds	r3, #8
 800269c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d847      	bhi.n	8002734 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80026a4:	6939      	ldr	r1, [r7, #16]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f856 	bl	8002758 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80026ac:	6939      	ldr	r1, [r7, #16]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f940 	bl	8002934 <I2C_Compute_SCLL_SCLH>
 80026b4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80026ba:	d842      	bhi.n	8002742 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80026bc:	4925      	ldr	r1, [pc, #148]	@ (8002754 <I2C_GetTiming+0xfc>)
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80026ce:	4821      	ldr	r0, [pc, #132]	@ (8002754 <I2C_GetTiming+0xfc>)
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4403      	add	r3, r0
 80026dc:	3304      	adds	r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	051b      	lsls	r3, r3, #20
 80026e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80026e6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80026e8:	481a      	ldr	r0, [pc, #104]	@ (8002754 <I2C_GetTiming+0xfc>)
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4403      	add	r3, r0
 80026f6:	3308      	adds	r3, #8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002700:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002702:	4814      	ldr	r0, [pc, #80]	@ (8002754 <I2C_GetTiming+0xfc>)
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4403      	add	r3, r0
 8002710:	330c      	adds	r3, #12
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002718:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800271a:	480e      	ldr	r0, [pc, #56]	@ (8002754 <I2C_GetTiming+0xfc>)
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4403      	add	r3, r0
 8002728:	3310      	adds	r3, #16
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800272e:	430b      	orrs	r3, r1
 8002730:	617b      	str	r3, [r7, #20]
        }
        break;
 8002732:	e006      	b.n	8002742 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3301      	adds	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d99b      	bls.n	8002678 <I2C_GetTiming+0x20>
 8002740:	e000      	b.n	8002744 <I2C_GetTiming+0xec>
        break;
 8002742:	bf00      	nop
      }
    }
  }

  return ret;
 8002744:	697b      	ldr	r3, [r7, #20]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08026e68 	.word	0x08026e68
 8002754:	2400036c 	.word	0x2400036c

08002758 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002758:	b480      	push	{r7}
 800275a:	b08f      	sub	sp, #60	@ 0x3c
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002762:	2310      	movs	r3, #16
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	085a      	lsrs	r2, r3, #1
 800276a:	4b6e      	ldr	r3, [pc, #440]	@ (8002924 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800276c:	4413      	add	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	fbb3 f3f2 	udiv	r3, r3, r2
 8002774:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002776:	2332      	movs	r3, #50	@ 0x32
 8002778:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800277a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800277e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002780:	4a69      	ldr	r2, [pc, #420]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	212c      	movs	r1, #44	@ 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	3324      	adds	r3, #36	@ 0x24
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	4a65      	ldr	r2, [pc, #404]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	212c      	movs	r1, #44	@ 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	330c      	adds	r3, #12
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80027a4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80027a6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80027a8:	495f      	ldr	r1, [pc, #380]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	202c      	movs	r0, #44	@ 0x2c
 80027ae:	fb00 f303 	mul.w	r3, r0, r3
 80027b2:	440b      	add	r3, r1
 80027b4:	3328      	adds	r3, #40	@ 0x28
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3303      	adds	r3, #3
 80027ba:	69f9      	ldr	r1, [r7, #28]
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80027c4:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	212c      	movs	r1, #44	@ 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3310      	adds	r3, #16
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	4a54      	ldr	r2, [pc, #336]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	212c      	movs	r1, #44	@ 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3320      	adds	r3, #32
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80027e8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80027ea:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80027ec:	494e      	ldr	r1, [pc, #312]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	202c      	movs	r0, #44	@ 0x2c
 80027f2:	fb00 f303 	mul.w	r3, r0, r3
 80027f6:	440b      	add	r3, r1
 80027f8:	3328      	adds	r3, #40	@ 0x28
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	69f9      	ldr	r1, [r7, #28]
 8002800:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002808:	4a47      	ldr	r2, [pc, #284]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	212c      	movs	r1, #44	@ 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3320      	adds	r3, #32
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	4a43      	ldr	r2, [pc, #268]	@ (8002928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	212c      	movs	r1, #44	@ 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3314      	adds	r3, #20
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4403      	add	r3, r0
 800282c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	2b00      	cmp	r3, #0
 8002832:	dc01      	bgt.n	8002838 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	dc01      	bgt.n	8002842 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002846:	e062      	b.n	800290e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
 800284c:	e059      	b.n	8002902 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	3301      	adds	r3, #1
 8002852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002854:	3201      	adds	r2, #1
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	d348      	bcc.n	80028fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	e042      	b.n	80028f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002872:	3301      	adds	r3, #1
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	d332      	bcc.n	80028f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d82e      	bhi.n	80028f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	429a      	cmp	r2, r3
 8002898:	d02a      	beq.n	80028f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4924      	ldr	r1, [pc, #144]	@ (8002930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028ac:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	491f      	ldr	r1, [pc, #124]	@ (8002930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3304      	adds	r3, #4
 80028c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4919      	ldr	r1, [pc, #100]	@ (8002930 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3308      	adds	r3, #8
 80028d6:	6a3a      	ldr	r2, [r7, #32]
 80028d8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	4a11      	ldr	r2, [pc, #68]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028e6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80028ee:	d812      	bhi.n	8002916 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	3301      	adds	r3, #1
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d9b9      	bls.n	8002870 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	3301      	adds	r3, #1
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d9a2      	bls.n	800284e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	3301      	adds	r3, #1
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d999      	bls.n	8002848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002914:	e000      	b.n	8002918 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002916:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002918:	373c      	adds	r7, #60	@ 0x3c
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	3b9aca00 	.word	0x3b9aca00
 8002928:	08026e68 	.word	0x08026e68
 800292c:	24000d6c 	.word	0x24000d6c
 8002930:	2400036c 	.word	0x2400036c

08002934 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002934:	b480      	push	{r7}
 8002936:	b093      	sub	sp, #76	@ 0x4c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	085a      	lsrs	r2, r3, #1
 8002948:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <I2C_Compute_SCLL_SCLH+0x200>)
 800294a:	4413      	add	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002954:	4a78      	ldr	r2, [pc, #480]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	212c      	movs	r1, #44	@ 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	085a      	lsrs	r2, r3, #1
 8002964:	4b73      	ldr	r3, [pc, #460]	@ (8002b34 <I2C_Compute_SCLL_SCLH+0x200>)
 8002966:	4413      	add	r3, r2
 8002968:	4973      	ldr	r1, [pc, #460]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	202c      	movs	r0, #44	@ 0x2c
 800296e:	fb00 f202 	mul.w	r2, r0, r2
 8002972:	440a      	add	r2, r1
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	fbb3 f3f2 	udiv	r3, r3, r2
 800297a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800297c:	2332      	movs	r3, #50	@ 0x32
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002980:	4a6d      	ldr	r2, [pc, #436]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	212c      	movs	r1, #44	@ 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3328      	adds	r3, #40	@ 0x28
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002998:	4a67      	ldr	r2, [pc, #412]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	212c      	movs	r1, #44	@ 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3304      	adds	r3, #4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a62      	ldr	r2, [pc, #392]	@ (8002b34 <I2C_Compute_SCLL_SCLH+0x200>)
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80029b0:	4a61      	ldr	r2, [pc, #388]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	212c      	movs	r1, #44	@ 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3308      	adds	r3, #8
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002b34 <I2C_Compute_SCLL_SCLH+0x200>)
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80029d0:	e0a3      	b.n	8002b1a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80029d2:	495a      	ldr	r1, [pc, #360]	@ (8002b3c <I2C_Compute_SCLL_SCLH+0x208>)
 80029d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80029ec:	2300      	movs	r3, #0
 80029ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029f0:	e08c      	b.n	8002b0c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80029f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	441a      	add	r2, r3
 80029f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fa:	3301      	adds	r3, #1
 80029fc:	6979      	ldr	r1, [r7, #20]
 80029fe:	fb03 f101 	mul.w	r1, r3, r1
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	4413      	add	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	212c      	movs	r1, #44	@ 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3318      	adds	r3, #24
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d971      	bls.n	8002b06 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	1ad2      	subs	r2, r2, r3
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d268      	bcs.n	8002b06 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a38:	e062      	b.n	8002b00 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	441a      	add	r2, r3
 8002a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a42:	3301      	adds	r3, #1
 8002a44:	6979      	ldr	r1, [r7, #20]
 8002a46:	fb03 f101 	mul.w	r1, r3, r1
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	4413      	add	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	441a      	add	r2, r3
 8002a5a:	4937      	ldr	r1, [pc, #220]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	202c      	movs	r0, #44	@ 0x2c
 8002a60:	fb00 f303 	mul.w	r3, r0, r3
 8002a64:	440b      	add	r3, r1
 8002a66:	3320      	adds	r3, #32
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	4932      	ldr	r1, [pc, #200]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	202c      	movs	r0, #44	@ 0x2c
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	440b      	add	r3, r1
 8002a78:	3324      	adds	r3, #36	@ 0x24
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d338      	bcc.n	8002afa <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d834      	bhi.n	8002afa <I2C_Compute_SCLL_SCLH+0x1c6>
 8002a90:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <I2C_Compute_SCLL_SCLH+0x204>)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	212c      	movs	r1, #44	@ 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	331c      	adds	r3, #28
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d329      	bcc.n	8002afa <I2C_Compute_SCLL_SCLH+0x1c6>
 8002aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d225      	bcs.n	8002afa <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da02      	bge.n	8002ac2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abe:	425b      	negs	r3, r3
 8002ac0:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d917      	bls.n	8002afa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002acc:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8002ace:	491b      	ldr	r1, [pc, #108]	@ (8002b3c <I2C_Compute_SCLL_SCLH+0x208>)
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3310      	adds	r3, #16
 8002ade:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ae0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8002ae2:	4916      	ldr	r1, [pc, #88]	@ (8002b3c <I2C_Compute_SCLL_SCLH+0x208>)
 8002ae4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	330c      	adds	r3, #12
 8002af2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af4:	601a      	str	r2, [r3, #0]
              ret = count;
 8002af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af8:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afc:	3301      	adds	r3, #1
 8002afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	2bff      	cmp	r3, #255	@ 0xff
 8002b04:	d999      	bls.n	8002a3a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b08:	3301      	adds	r3, #1
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0e:	2bff      	cmp	r3, #255	@ 0xff
 8002b10:	f67f af6f 	bls.w	80029f2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	3301      	adds	r3, #1
 8002b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f4ff af56 	bcc.w	80029d2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8002b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	374c      	adds	r7, #76	@ 0x4c
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	3b9aca00 	.word	0x3b9aca00
 8002b38:	08026e68 	.word	0x08026e68
 8002b3c:	2400036c 	.word	0x2400036c
 8002b40:	24000d6c 	.word	0x24000d6c

08002b44 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	@ 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8002b4c:	4b31      	ldr	r3, [pc, #196]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b52:	4a30      	ldr	r2, [pc, #192]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b70:	4a28      	ldr	r2, [pc, #160]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8002b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002b8e:	2312      	movs	r3, #18
 8002b90:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002b96:	2302      	movs	r3, #2
 8002b98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	481c      	ldr	r0, [pc, #112]	@ (8002c18 <I2C4_MspInit+0xd4>)
 8002ba6:	f001 fe63 	bl	8004870 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8002baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8002bb0:	2312      	movs	r3, #18
 8002bb2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4814      	ldr	r0, [pc, #80]	@ (8002c18 <I2C4_MspInit+0xd4>)
 8002bc8:	f001 fe52 	bl	8004870 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002bd2:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bd8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bde:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bf0:	4a08      	ldr	r2, [pc, #32]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c00:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <I2C4_MspInit+0xd0>)
 8002c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c06:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	@ 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58020c00 	.word	0x58020c00

08002c1c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480b      	ldr	r0, [pc, #44]	@ (8002c5c <I2C4_MspDeInit+0x40>)
 8002c30:	f001 ffce 	bl	8004bd0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4807      	ldr	r0, [pc, #28]	@ (8002c5c <I2C4_MspDeInit+0x40>)
 8002c40:	f001 ffc6 	bl	8004bd0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <I2C4_MspDeInit+0x44>)
 8002c46:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002c4a:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <I2C4_MspDeInit+0x44>)
 8002c4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c50:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58020c00 	.word	0x58020c00
 8002c60:	58024400 	.word	0x58024400

08002c64 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af04      	add	r7, sp, #16
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	81fb      	strh	r3, [r7, #14]
 8002c70:	460b      	mov	r3, r1
 8002c72:	81bb      	strh	r3, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002c78:	8978      	ldrh	r0, [r7, #10]
 8002c7a:	89ba      	ldrh	r2, [r7, #12]
 8002c7c:	89f9      	ldrh	r1, [r7, #14]
 8002c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c82:	9302      	str	r3, [sp, #8]
 8002c84:	8b3b      	ldrh	r3, [r7, #24]
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4807      	ldr	r0, [pc, #28]	@ (8002cac <I2C4_WriteReg+0x48>)
 8002c90:	f002 f9cc 	bl	800502c <HAL_I2C_Mem_Write>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e001      	b.n	8002ca2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002c9e:	f06f 0307 	mvn.w	r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	24000d70 	.word	0x24000d70

08002cb0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af04      	add	r7, sp, #16
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	81fb      	strh	r3, [r7, #14]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	81bb      	strh	r3, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002cc4:	8978      	ldrh	r0, [r7, #10]
 8002cc6:	89ba      	ldrh	r2, [r7, #12]
 8002cc8:	89f9      	ldrh	r1, [r7, #14]
 8002cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cce:	9302      	str	r3, [sp, #8]
 8002cd0:	8b3b      	ldrh	r3, [r7, #24]
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <I2C4_ReadReg+0x48>)
 8002cdc:	f002 faba 	bl	8005254 <HAL_I2C_Mem_Read>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e001      	b.n	8002cee <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002cea:	f06f 0307 	mvn.w	r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	24000d70 	.word	0x24000d70

08002cfc <BSP_OSPI_NOR_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_Init(uint32_t Instance, BSP_OSPI_NOR_Init_t *Init)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b094      	sub	sp, #80	@ 0x50
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  BSP_OSPI_NOR_Info_t pInfo;
  MX_OSPI_Config ospi_config;

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <BSP_OSPI_NOR_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d10:	f06f 0301 	mvn.w	r3, #1
 8002d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d16:	e071      	b.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8002d18:	4a3b      	ldr	r2, [pc, #236]	@ (8002e08 <BSP_OSPI_NOR_Init+0x10c>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d16b      	bne.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_NOR_MspInit(&hospi_nor[Instance]);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	225c      	movs	r2, #92	@ 0x5c
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4a37      	ldr	r2, [pc, #220]	@ (8002e0c <BSP_OSPI_NOR_Init+0x110>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fa09 	bl	8003148 <OSPI_NOR_MspInit>
      if(ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

        /* Get Flash informations of one memory */
        (void)MX25LM51245G_GetFlashInfo(&pInfo);
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fee8 	bl	8001b10 <MX25LM51245G_GetFlashInfo>

        /* Fill config structure */
        ospi_config.ClockPrescaler = 3U;
 8002d40:	2303      	movs	r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
        ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	643b      	str	r3, [r7, #64]	@ 0x40
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d52:	64bb      	str	r3, [r7, #72]	@ 0x48
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <BSP_OSPI_NOR_Init+0x62>
  {
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <BSP_OSPI_NOR_Init+0x6a>
  }
  return __builtin_clz(value);
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	60fb      	str	r3, [r7, #12]
        ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
        ospi_config.TransferRate   = (uint32_t)Init->TransferRate;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	61bb      	str	r3, [r7, #24]

        /* STM32 OSPI interface initialization */
        if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	225c      	movs	r2, #92	@ 0x5c
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	4a24      	ldr	r2, [pc, #144]	@ (8002e0c <BSP_OSPI_NOR_Init+0x110>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f107 020c 	add.w	r2, r7, #12
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f895 	bl	8002eb4 <MX_OSPI_NOR_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <BSP_OSPI_NOR_Init+0x9c>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8002d90:	f06f 0303 	mvn.w	r3, #3
 8002d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d96:	e031      	b.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
        }
        /* OSPI memory reset */
        else if (OSPI_NOR_ResetMemory(Instance) != BSP_ERROR_NONE)
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb7f 	bl	800349c <OSPI_NOR_ResetMemory>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <BSP_OSPI_NOR_Init+0xb0>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002da4:	f06f 0304 	mvn.w	r3, #4
 8002da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002daa:	e027      	b.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
        }
        /* Check if memory is ready */
        else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	225c      	movs	r2, #92	@ 0x5c
 8002db0:	fb02 f303 	mul.w	r3, r2, r3
 8002db4:	4a15      	ldr	r2, [pc, #84]	@ (8002e0c <BSP_OSPI_NOR_Init+0x110>)
 8002db6:	1898      	adds	r0, r3, r2
 8002db8:	4a13      	ldr	r2, [pc, #76]	@ (8002e08 <BSP_OSPI_NOR_Init+0x10c>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	7859      	ldrb	r1, [r3, #1]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <BSP_OSPI_NOR_Init+0x10c>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	789b      	ldrb	r3, [r3, #2]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f7fe fece 	bl	8001b6e <MX25LM51245G_AutoPollingMemReady>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <BSP_OSPI_NOR_Init+0xe4>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8002dd8:	f06f 0304 	mvn.w	r3, #4
 8002ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dde:	e00d      	b.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
        }
        else
        {
          /* Configure the memory */
          if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7819      	ldrb	r1, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	461a      	mov	r2, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f936 	bl	800305c <BSP_OSPI_NOR_ConfigFlash>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <BSP_OSPI_NOR_Init+0x100>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8002df6:	f06f 0304 	mvn.w	r3, #4
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif
    }
  }

  /* Return BSP status */
  return ret;
 8002dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3750      	adds	r7, #80	@ 0x50
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	24000e20 	.word	0x24000e20
 8002e0c:	24000dc4 	.word	0x24000dc4

08002e10 <BSP_OSPI_NOR_DeInit>:
  * @brief  De-Initializes the OSPI interface.
  * @param  Instance   OSPI Instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DeInit(uint32_t Instance)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <BSP_OSPI_NOR_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e22:	f06f 0301 	mvn.w	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e03a      	b.n	8002ea0 <BSP_OSPI_NOR_DeInit+0x90>
  }
  else
  {
    /* Disable Memory mapped mode */
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8002e2a:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <BSP_OSPI_NOR_DeInit+0x9c>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d108      	bne.n	8002e48 <BSP_OSPI_NOR_DeInit+0x38>
    {
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8da 	bl	8002ff0 <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <BSP_OSPI_NOR_DeInit+0x38>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002e42:	f06f 0304 	mvn.w	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
      }
    }

    if(ret == BSP_ERROR_NONE)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d128      	bne.n	8002ea0 <BSP_OSPI_NOR_DeInit+0x90>
    {
      /* Set default Ospi_Nor_Ctx values */
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8002e4e:	4a17      	ldr	r2, [pc, #92]	@ (8002eac <BSP_OSPI_NOR_DeInit+0x9c>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2100      	movs	r1, #0
 8002e54:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;
 8002e58:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <BSP_OSPI_NOR_DeInit+0x9c>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	2200      	movs	r2, #0
 8002e62:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8002e64:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <BSP_OSPI_NOR_DeInit+0x9c>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	709a      	strb	r2, [r3, #2]

#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      OSPI_NOR_MspDeInit(&hospi_nor[Instance]);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	225c      	movs	r2, #92	@ 0x5c
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <BSP_OSPI_NOR_DeInit+0xa0>)
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fab3 	bl	80033e8 <OSPI_NOR_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS == 0) */

      /* Call the DeInit function to reset the driver */
      if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	225c      	movs	r2, #92	@ 0x5c
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	@ (8002eb0 <BSP_OSPI_NOR_DeInit+0xa0>)
 8002e8c:	4413      	add	r3, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fb44 	bl	800651c <HAL_OSPI_DeInit>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <BSP_OSPI_NOR_DeInit+0x90>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8002e9a:	f06f 0303 	mvn.w	r3, #3
 8002e9e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	24000e20 	.word	0x24000e20
 8002eb0:	24000dc4 	.word	0x24000dc4

08002eb4 <MX_OSPI_NOR_Init>:
  * @param  hospi          OSPI handle
  * @param  Config         OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_NOR_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_Config *Config)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
    /* OctoSPI initialization */
  hospi->Instance = OCTOSPI1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <MX_OSPI_NOR_Init+0x90>)
 8002ec2:	601a      	str	r2, [r3, #0]

  hospi->Init.FifoThreshold      = 4;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode          = HAL_OSPI_CLOCK_MODE_0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.ChipSelectBoundary = 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi->Init.DelayBlockBypass   = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (Config->TransferRate == (uint32_t)BSP_OSPI_NOR_DTR_TRANSFER)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <MX_OSPI_NOR_Init+0x72>
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f1a:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f22:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f24:	e005      	b.n	8002f32 <MX_OSPI_NOR_Init+0x7e>
  }
  else
  {
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60da      	str	r2, [r3, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OSPI_Init(hospi);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f003 fa36 	bl	80063a4 <HAL_OSPI_Init>
 8002f38:	4603      	mov	r3, r0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	52005000 	.word	0x52005000

08002f48 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_EnableMemoryMappedMode(uint32_t Instance)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f5a:	f06f 0301 	mvn.w	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e03d      	b.n	8002fde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
  }
  else if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8002f62:	4a21      	ldr	r2, [pc, #132]	@ (8002fe8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	789b      	ldrb	r3, [r3, #2]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11b      	bne.n	8002fa8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x60>
  {
    if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	225c      	movs	r2, #92	@ 0x5c
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8002f7a:	1898      	adds	r0, r3, r2
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	785b      	ldrb	r3, [r3, #1]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fe fe9d 	bl	8001cc8 <MX25LM51245G_EnableMemoryMappedModeSTR>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002f94:	f06f 0304 	mvn.w	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e020      	b.n	8002fde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8002f9c:	4a12      	ldr	r2, [pc, #72]	@ (8002fe8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8002fa6:	e01a      	b.n	8002fde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
  }
  else
  {
    if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	225c      	movs	r2, #92	@ 0x5c
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002fec <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa4>)
 8002fb2:	441a      	add	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	@ (8002fe8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fe ff2b 	bl	8001e1c <MX25LM51245G_EnableMemoryMappedModeDTR>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002fcc:	f06f 0304 	mvn.w	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e004      	b.n	8002fde <BSP_OSPI_NOR_EnableMemoryMappedMode+0x96>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8002fd4:	4a04      	ldr	r2, [pc, #16]	@ (8002fe8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0xa0>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2102      	movs	r1, #2
 8002fda:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8002fde:	68fb      	ldr	r3, [r7, #12]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	24000e20 	.word	0x24000e20
 8002fec:	24000dc4 	.word	0x24000dc4

08002ff0 <BSP_OSPI_NOR_DisableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_DisableMemoryMappedMode(uint32_t Instance)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003002:	f06f 0301 	mvn.w	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e01e      	b.n	8003048 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 800300a:	4a12      	ldr	r2, [pc, #72]	@ (8003054 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d003      	beq.n	800301e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2e>
  {
    ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8003016:	f06f 031a 	mvn.w	r3, #26
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e014      	b.n	8003048 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }/* Abort MMP back to indirect mode */
  else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	225c      	movs	r2, #92	@ 0x5c
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a0c      	ldr	r2, [pc, #48]	@ (8003058 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x68>)
 8003028:	4413      	add	r3, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f003 fea8 	bl	8006d80 <HAL_OSPI_Abort>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <BSP_OSPI_NOR_DisableMemoryMappedMode+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003036:	f06f 0303 	mvn.w	r3, #3
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e004      	b.n	8003048 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x58>
  }
  else
  {
    /* Update OSPI context if all operations are well done */
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 800303e:	4a05      	ldr	r2, [pc, #20]	@ (8003054 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x64>)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2101      	movs	r1, #1
 8003044:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  }

  /* Return BSP status */
  return ret;
 8003048:	68fb      	ldr	r3, [r7, #12]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	24000e20 	.word	0x24000e20
 8003058:	24000dc4 	.word	0x24000dc4

0800305c <BSP_OSPI_NOR_ConfigFlash>:
  * @param  Mode      OSPI mode
  * @param  Rate      OSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_OSPI_NOR_ConfigFlash(uint32_t Instance, BSP_OSPI_NOR_Interface_t Mode, BSP_OSPI_NOR_Transfer_t Rate)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	4613      	mov	r3, r2
 800306a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <BSP_OSPI_NOR_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003076:	f06f 0301 	mvn.w	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e05d      	b.n	800313a <BSP_OSPI_NOR_ConfigFlash+0xde>
  }/* Check if MMP mode locked ************************************************/
  else if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 800307e:	4a31      	ldr	r2, [pc, #196]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d103      	bne.n	8003092 <BSP_OSPI_NOR_ConfigFlash+0x36>
  {
    ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 800308a:	f06f 0319 	mvn.w	r3, #25
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e053      	b.n	800313a <BSP_OSPI_NOR_ConfigFlash+0xde>
  }
  else
  {
    /* Setup Flash interface ***************************************************/
    switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d125      	bne.n	80030ec <BSP_OSPI_NOR_ConfigFlash+0x90>
    {
    case BSP_OSPI_NOR_OPI_MODE :  /* 8-8-8 commands */
      if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <BSP_OSPI_NOR_ConfigFlash+0x5a>
 80030a6:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	78ba      	ldrb	r2, [r7, #2]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d02a      	beq.n	800310c <BSP_OSPI_NOR_ConfigFlash+0xb0>
      {
        /* Exit OPI mode */
        ret = OSPI_NOR_ExitOPIMode(Instance);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fbfc 	bl	80038b4 <OSPI_NOR_ExitOPIMode>
 80030bc:	60f8      	str	r0, [r7, #12]

        if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d123      	bne.n	800310c <BSP_OSPI_NOR_ConfigFlash+0xb0>
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d120      	bne.n	800310c <BSP_OSPI_NOR_ConfigFlash+0xb0>
        {

          if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 80030ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	789b      	ldrb	r3, [r3, #2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <BSP_OSPI_NOR_ConfigFlash+0x86>
          {
            /* Enter DTR OPI mode */
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fa6f 	bl	80035bc <OSPI_NOR_EnterDOPIMode>
 80030de:	60f8      	str	r0, [r7, #12]
            /* Enter STR OPI mode */
            ret = OSPI_NOR_EnterSOPIMode(Instance);
          }
        }
      }
      break;
 80030e0:	e014      	b.n	800310c <BSP_OSPI_NOR_ConfigFlash+0xb0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb3a 	bl	800375c <OSPI_NOR_EnterSOPIMode>
 80030e8:	60f8      	str	r0, [r7, #12]
      break;
 80030ea:	e00f      	b.n	800310c <BSP_OSPI_NOR_ConfigFlash+0xb0>

    case BSP_OSPI_NOR_SPI_MODE :  /* 1-1-1 commands, Power on H/W default setting */
    default :
      if(Mode == BSP_OSPI_NOR_OPI_MODE)
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      {
        if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 80030f2:	78bb      	ldrb	r3, [r7, #2]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <BSP_OSPI_NOR_ConfigFlash+0xa6>
        {
          /* Enter STR OPI mode */
          ret = OSPI_NOR_EnterSOPIMode(Instance);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fb2f 	bl	800375c <OSPI_NOR_EnterSOPIMode>
 80030fe:	60f8      	str	r0, [r7, #12]
        {
          /* Enter DTR OPI mode */
          ret = OSPI_NOR_EnterDOPIMode(Instance);
        }
      }
      break;
 8003100:	e006      	b.n	8003110 <BSP_OSPI_NOR_ConfigFlash+0xb4>
          ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa5a 	bl	80035bc <OSPI_NOR_EnterDOPIMode>
 8003108:	60f8      	str	r0, [r7, #12]
      break;
 800310a:	e001      	b.n	8003110 <BSP_OSPI_NOR_ConfigFlash+0xb4>
      break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <BSP_OSPI_NOR_ConfigFlash+0xb6>
      break;
 8003110:	bf00      	nop
    }

    /* Update OSPI context if all operations are well done */
    if(ret == BSP_ERROR_NONE)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d110      	bne.n	800313a <BSP_OSPI_NOR_ConfigFlash+0xde>
    {
      /* Update current status parameter *****************************************/
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003118:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2101      	movs	r1, #1
 800311e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	705a      	strb	r2, [r3, #1]
      Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 800312e:	4a05      	ldr	r2, [pc, #20]	@ (8003144 <BSP_OSPI_NOR_ConfigFlash+0xe8>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	78ba      	ldrb	r2, [r7, #2]
 8003138:	709a      	strb	r2, [r3, #2]
    }
  }

  /* Return BSP status */
  return ret;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	24000e20 	.word	0x24000e20

08003148 <OSPI_NOR_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspInit(OSPI_HandleTypeDef *hospi)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b094      	sub	sp, #80	@ 0x50
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* Enable the OctoSPI memory interface clock */
  OSPI_CLK_ENABLE();
 8003150:	4b9e      	ldr	r3, [pc, #632]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003152:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003156:	4a9d      	ldr	r2, [pc, #628]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800315c:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8003160:	4b9a      	ldr	r3, [pc, #616]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003162:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800316e:	4b97      	ldr	r3, [pc, #604]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003172:	4a96      	ldr	r2, [pc, #600]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003178:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RELEASE_RESET();
 800317a:	4b94      	ldr	r3, [pc, #592]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800317c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800317e:	4a93      	ldr	r2, [pc, #588]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003184:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Enable GPIO clocks */
  OSPI_CLK_GPIO_CLK_ENABLE();
 8003186:	4b91      	ldr	r3, [pc, #580]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003188:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800318c:	4a8f      	ldr	r2, [pc, #572]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003196:	4b8d      	ldr	r3, [pc, #564]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003198:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_DQS_GPIO_CLK_ENABLE();
 80031a4:	4b89      	ldr	r3, [pc, #548]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031aa:	4a88      	ldr	r2, [pc, #544]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031b4:	4b85      	ldr	r3, [pc, #532]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_CS_GPIO_CLK_ENABLE();
 80031c2:	4b82      	ldr	r3, [pc, #520]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031c8:	4a80      	ldr	r2, [pc, #512]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031d2:	4b7e      	ldr	r3, [pc, #504]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_D0_GPIO_CLK_ENABLE();
 80031e0:	4b7a      	ldr	r3, [pc, #488]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031e6:	4a79      	ldr	r2, [pc, #484]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031f0:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80031f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_D1_GPIO_CLK_ENABLE();
 80031fe:	4b73      	ldr	r3, [pc, #460]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003200:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003204:	4a71      	ldr	r2, [pc, #452]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003206:	f043 0320 	orr.w	r3, r3, #32
 800320a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800320e:	4b6f      	ldr	r3, [pc, #444]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003210:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
 800321a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_D2_GPIO_CLK_ENABLE();
 800321c:	4b6b      	ldr	r3, [pc, #428]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800321e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003222:	4a6a      	ldr	r2, [pc, #424]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003224:	f043 0320 	orr.w	r3, r3, #32
 8003228:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800322c:	4b67      	ldr	r3, [pc, #412]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800322e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	623b      	str	r3, [r7, #32]
 8003238:	6a3b      	ldr	r3, [r7, #32]
  OSPI_D3_GPIO_CLK_ENABLE();
 800323a:	4b64      	ldr	r3, [pc, #400]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800323c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003240:	4a62      	ldr	r2, [pc, #392]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003242:	f043 0320 	orr.w	r3, r3, #32
 8003246:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800324a:	4b60      	ldr	r3, [pc, #384]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800324c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	69fb      	ldr	r3, [r7, #28]
  OSPI_D4_GPIO_CLK_ENABLE();
 8003258:	4b5c      	ldr	r3, [pc, #368]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800325a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003268:	4b58      	ldr	r3, [pc, #352]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800326a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]
  OSPI_D5_GPIO_CLK_ENABLE();
 8003276:	4b55      	ldr	r3, [pc, #340]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003278:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800327c:	4a53      	ldr	r2, [pc, #332]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800327e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003282:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003286:	4b51      	ldr	r3, [pc, #324]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003288:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800328c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	697b      	ldr	r3, [r7, #20]
  OSPI_D6_GPIO_CLK_ENABLE();
 8003294:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 8003296:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800329a:	4a4c      	ldr	r2, [pc, #304]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 800329c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032a4:	4b49      	ldr	r3, [pc, #292]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80032a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	693b      	ldr	r3, [r7, #16]
  OSPI_D7_GPIO_CLK_ENABLE();
 80032b2:	4b46      	ldr	r3, [pc, #280]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80032b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032b8:	4a44      	ldr	r2, [pc, #272]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80032ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80032c2:	4b42      	ldr	r3, [pc, #264]	@ (80033cc <OSPI_NOR_MspInit+0x284>)
 80032c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CS_PIN;
 80032d0:	2340      	movs	r3, #64	@ 0x40
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80032d4:	2302      	movs	r3, #2
 80032d6:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80032d8:	2301      	movs	r3, #1
 80032da:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80032dc:	2303      	movs	r3, #3
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_CS_PIN_AF;
 80032e0:	230a      	movs	r3, #10
 80032e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 80032e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032e8:	4619      	mov	r1, r3
 80032ea:	4839      	ldr	r0, [pc, #228]	@ (80033d0 <OSPI_NOR_MspInit+0x288>)
 80032ec:	f001 fac0 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_DQS_PIN;
 80032f0:	2320      	movs	r3, #32
 80032f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_DQS_PIN_AF;
 80032f4:	230a      	movs	r3, #10
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_DQS_GPIO_PORT, &GPIO_InitStruct);
 80032f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032fc:	4619      	mov	r1, r3
 80032fe:	4835      	ldr	r0, [pc, #212]	@ (80033d4 <OSPI_NOR_MspInit+0x28c>)
 8003300:	f001 fab6 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_CLK_PIN;
 8003304:	2304      	movs	r3, #4
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Alternate = OSPI_CLK_PIN_AF;
 800330c:	2309      	movs	r3, #9
 800330e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8003310:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003314:	4619      	mov	r1, r3
 8003316:	4830      	ldr	r0, [pc, #192]	@ (80033d8 <OSPI_NOR_MspInit+0x290>)
 8003318:	f001 faaa 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D0_PIN;
 800331c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D0_PIN_AF;
 8003322:	2309      	movs	r3, #9
 8003324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8003326:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800332a:	4619      	mov	r1, r3
 800332c:	482b      	ldr	r0, [pc, #172]	@ (80033dc <OSPI_NOR_MspInit+0x294>)
 800332e:	f001 fa9f 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D1_PIN;
 8003332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D1_PIN_AF;
 8003338:	230a      	movs	r3, #10
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 800333c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003340:	4619      	mov	r1, r3
 8003342:	4827      	ldr	r0, [pc, #156]	@ (80033e0 <OSPI_NOR_MspInit+0x298>)
 8003344:	f001 fa94 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D2_PIN;
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D2_PIN_AF;
 800334c:	230a      	movs	r3, #10
 800334e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8003350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003354:	4619      	mov	r1, r3
 8003356:	4822      	ldr	r0, [pc, #136]	@ (80033e0 <OSPI_NOR_MspInit+0x298>)
 8003358:	f001 fa8a 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D3_PIN;
 800335c:	2340      	movs	r3, #64	@ 0x40
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D3_PIN_AF;
 8003360:	230a      	movs	r3, #10
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8003364:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003368:	4619      	mov	r1, r3
 800336a:	481d      	ldr	r0, [pc, #116]	@ (80033e0 <OSPI_NOR_MspInit+0x298>)
 800336c:	f001 fa80 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D4_PIN;
 8003370:	2302      	movs	r3, #2
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D4_PIN_AF;
 8003374:	230a      	movs	r3, #10
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D4_GPIO_PORT, &GPIO_InitStruct);
 8003378:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800337c:	4619      	mov	r1, r3
 800337e:	4815      	ldr	r0, [pc, #84]	@ (80033d4 <OSPI_NOR_MspInit+0x28c>)
 8003380:	f001 fa76 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D5_PIN;
 8003384:	2308      	movs	r3, #8
 8003386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D5_PIN_AF;
 8003388:	2309      	movs	r3, #9
 800338a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D5_GPIO_PORT, &GPIO_InitStruct);
 800338c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003390:	4619      	mov	r1, r3
 8003392:	4814      	ldr	r0, [pc, #80]	@ (80033e4 <OSPI_NOR_MspInit+0x29c>)
 8003394:	f001 fa6c 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D6_PIN;
 8003398:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D6_PIN_AF;
 800339e:	2309      	movs	r3, #9
 80033a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D6_GPIO_PORT, &GPIO_InitStruct);
 80033a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033a6:	4619      	mov	r1, r3
 80033a8:	4809      	ldr	r0, [pc, #36]	@ (80033d0 <OSPI_NOR_MspInit+0x288>)
 80033aa:	f001 fa61 	bl	8004870 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_D7_PIN;
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_D7_PIN_AF;
 80033b2:	230a      	movs	r3, #10
 80033b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_D7_GPIO_PORT, &GPIO_InitStruct);
 80033b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033ba:	4619      	mov	r1, r3
 80033bc:	4807      	ldr	r0, [pc, #28]	@ (80033dc <OSPI_NOR_MspInit+0x294>)
 80033be:	f001 fa57 	bl	8004870 <HAL_GPIO_Init>
}
 80033c2:	bf00      	nop
 80033c4:	3750      	adds	r7, #80	@ 0x50
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	58024400 	.word	0x58024400
 80033d0:	58021800 	.word	0x58021800
 80033d4:	58020800 	.word	0x58020800
 80033d8:	58020400 	.word	0x58020400
 80033dc:	58020c00 	.word	0x58020c00
 80033e0:	58021400 	.word	0x58021400
 80033e4:	58021c00 	.word	0x58021c00

080033e8 <OSPI_NOR_MspDeInit>:
  * @brief  De-Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_NOR_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* hospi unused argument(s) compilation warning */
  UNUSED(hospi);

  /* OctoSPI GPIO pins de-configuration  */
  HAL_GPIO_DeInit(OSPI_CLK_GPIO_PORT, OSPI_CLK_PIN);
 80033f0:	2104      	movs	r1, #4
 80033f2:	4823      	ldr	r0, [pc, #140]	@ (8003480 <OSPI_NOR_MspDeInit+0x98>)
 80033f4:	f001 fbec 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_DQS_GPIO_PORT, OSPI_DQS_PIN);
 80033f8:	2120      	movs	r1, #32
 80033fa:	4822      	ldr	r0, [pc, #136]	@ (8003484 <OSPI_NOR_MspDeInit+0x9c>)
 80033fc:	f001 fbe8 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_CS_GPIO_PORT, OSPI_CS_PIN);
 8003400:	2140      	movs	r1, #64	@ 0x40
 8003402:	4821      	ldr	r0, [pc, #132]	@ (8003488 <OSPI_NOR_MspDeInit+0xa0>)
 8003404:	f001 fbe4 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D0_GPIO_PORT, OSPI_D0_PIN);
 8003408:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800340c:	481f      	ldr	r0, [pc, #124]	@ (800348c <OSPI_NOR_MspDeInit+0xa4>)
 800340e:	f001 fbdf 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D1_GPIO_PORT, OSPI_D1_PIN);
 8003412:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003416:	481e      	ldr	r0, [pc, #120]	@ (8003490 <OSPI_NOR_MspDeInit+0xa8>)
 8003418:	f001 fbda 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D2_GPIO_PORT, OSPI_D2_PIN);
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	481c      	ldr	r0, [pc, #112]	@ (8003490 <OSPI_NOR_MspDeInit+0xa8>)
 8003420:	f001 fbd6 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D3_GPIO_PORT, OSPI_D3_PIN);
 8003424:	2140      	movs	r1, #64	@ 0x40
 8003426:	481a      	ldr	r0, [pc, #104]	@ (8003490 <OSPI_NOR_MspDeInit+0xa8>)
 8003428:	f001 fbd2 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D4_GPIO_PORT, OSPI_D4_PIN);
 800342c:	2102      	movs	r1, #2
 800342e:	4815      	ldr	r0, [pc, #84]	@ (8003484 <OSPI_NOR_MspDeInit+0x9c>)
 8003430:	f001 fbce 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D5_GPIO_PORT, OSPI_D5_PIN);
 8003434:	2108      	movs	r1, #8
 8003436:	4817      	ldr	r0, [pc, #92]	@ (8003494 <OSPI_NOR_MspDeInit+0xac>)
 8003438:	f001 fbca 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D6_GPIO_PORT, OSPI_D6_PIN);
 800343c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003440:	4811      	ldr	r0, [pc, #68]	@ (8003488 <OSPI_NOR_MspDeInit+0xa0>)
 8003442:	f001 fbc5 	bl	8004bd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_D7_GPIO_PORT, OSPI_D7_PIN);
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	4810      	ldr	r0, [pc, #64]	@ (800348c <OSPI_NOR_MspDeInit+0xa4>)
 800344a:	f001 fbc1 	bl	8004bd0 <HAL_GPIO_DeInit>

  /* Reset the OctoSPI memory interface */
  OSPI_FORCE_RESET();
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 8003450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003452:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003458:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RELEASE_RESET();
 800345a:	4b0f      	ldr	r3, [pc, #60]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 800345c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800345e:	4a0e      	ldr	r2, [pc, #56]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 8003460:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003464:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* Disable the OctoSPI memory interface clock */
  OSPI_CLK_DISABLE();
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 8003468:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800346c:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <OSPI_NOR_MspDeInit+0xb0>)
 800346e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003472:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	58020400 	.word	0x58020400
 8003484:	58020800 	.word	0x58020800
 8003488:	58021800 	.word	0x58021800
 800348c:	58020c00 	.word	0x58020c00
 8003490:	58021400 	.word	0x58021400
 8003494:	58021c00 	.word	0x58021c00
 8003498:	58024400 	.word	0x58024400

0800349c <OSPI_NOR_ResetMemory>:
  * @brief  This function reset the OSPI memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ResetMemory (uint32_t Instance)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Enable write operations */
  if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	225c      	movs	r2, #92	@ 0x5c
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	4a40      	ldr	r2, [pc, #256]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 80034b2:	4413      	add	r3, r2
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe ff18 	bl	80022ee <MX25LM51245G_ResetEnable>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <OSPI_NOR_ResetMemory+0x30>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80034c4:	f06f 0304 	mvn.w	r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e06d      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	225c      	movs	r2, #92	@ 0x5c
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	4a37      	ldr	r2, [pc, #220]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 80034d6:	4413      	add	r3, r2
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe ff5e 	bl	800239e <MX25LM51245G_ResetMemory>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <OSPI_NOR_ResetMemory+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80034e8:	f06f 0304 	mvn.w	r3, #4
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	e05b      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	225c      	movs	r2, #92	@ 0x5c
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	4a2e      	ldr	r2, [pc, #184]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 80034fa:	4413      	add	r3, r2
 80034fc:	2200      	movs	r2, #0
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fef4 	bl	80022ee <MX25LM51245G_ResetEnable>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <OSPI_NOR_ResetMemory+0x78>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800350c:	f06f 0304 	mvn.w	r3, #4
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e049      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	225c      	movs	r2, #92	@ 0x5c
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	4a25      	ldr	r2, [pc, #148]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 800351e:	4413      	add	r3, r2
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe ff3a 	bl	800239e <MX25LM51245G_ResetMemory>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <OSPI_NOR_ResetMemory+0x9c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003530:	f06f 0304 	mvn.w	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e037      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	225c      	movs	r2, #92	@ 0x5c
 800353c:	fb02 f303 	mul.w	r3, r2, r3
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 8003542:	4413      	add	r3, r2
 8003544:	2201      	movs	r2, #1
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fed0 	bl	80022ee <MX25LM51245G_ResetEnable>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <OSPI_NOR_ResetMemory+0xc0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003554:	f06f 0304 	mvn.w	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e025      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	225c      	movs	r2, #92	@ 0x5c
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <OSPI_NOR_ResetMemory+0x118>)
 8003566:	4413      	add	r3, r2
 8003568:	2201      	movs	r2, #1
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f7fe ff16 	bl	800239e <MX25LM51245G_ResetMemory>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <OSPI_NOR_ResetMemory+0xe4>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003578:	f06f 0304 	mvn.w	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e013      	b.n	80035a8 <OSPI_NOR_ResetMemory+0x10c>
  }
  else
  {
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <OSPI_NOR_ResetMemory+0x11c>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2101      	movs	r1, #1
 8003586:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    Ospi_Nor_Ctx[Instance].InterfaceMode = BSP_OSPI_NOR_SPI_MODE;         /* After reset H/W back to SPI mode by default  */
 800358a:	4a0b      	ldr	r2, [pc, #44]	@ (80035b8 <OSPI_NOR_ResetMemory+0x11c>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	2200      	movs	r2, #0
 8003594:	705a      	strb	r2, [r3, #1]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <OSPI_NOR_ResetMemory+0x11c>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	709a      	strb	r2, [r3, #2]

    /* After SWreset CMD, wait in case SWReset occurred during erase operation */
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 80035a2:	2064      	movs	r0, #100	@ 0x64
 80035a4:	f000 fca2 	bl	8003eec <HAL_Delay>
  }

  /* Return BSP status */
  return ret;
 80035a8:	68fb      	ldr	r3, [r7, #12]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	24000dc4 	.word	0x24000dc4
 80035b8:	24000e20 	.word	0x24000e20

080035bc <OSPI_NOR_EnterDOPIMode>:
  * @brief  This function enables the octal DTR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	225c      	movs	r2, #92	@ 0x5c
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	4a60      	ldr	r2, [pc, #384]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 80035d2:	1898      	adds	r0, r3, r2
 80035d4:	4a60      	ldr	r2, [pc, #384]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	7859      	ldrb	r1, [r3, #1]
 80035de:	4a5e      	ldr	r2, [pc, #376]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	789b      	ldrb	r3, [r3, #2]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f7fe fc86 	bl	8001efa <MX25LM51245G_WriteEnable>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <OSPI_NOR_EnterDOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80035f4:	f06f 0304 	mvn.w	r3, #4
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e0a6      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	225c      	movs	r2, #92	@ 0x5c
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	4a53      	ldr	r2, [pc, #332]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003606:	1898      	adds	r0, r3, r2
 8003608:	4a53      	ldr	r2, [pc, #332]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	7859      	ldrb	r1, [r3, #1]
 8003612:	4a51      	ldr	r2, [pc, #324]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	789a      	ldrb	r2, [r3, #2]
 800361c:	2307      	movs	r3, #7
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003624:	f7fe fd34 	bl	8002090 <MX25LM51245G_WriteCfg2Register>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <OSPI_NOR_EnterDOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800362e:	f06f 0304 	mvn.w	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e089      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	225c      	movs	r2, #92	@ 0x5c
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4a45      	ldr	r2, [pc, #276]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003640:	1898      	adds	r0, r3, r2
 8003642:	4a45      	ldr	r2, [pc, #276]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	4413      	add	r3, r2
 800364a:	7859      	ldrb	r1, [r3, #1]
 800364c:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	789b      	ldrb	r3, [r3, #2]
 8003656:	461a      	mov	r2, r3
 8003658:	f7fe fc4f 	bl	8001efa <MX25LM51245G_WriteEnable>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <OSPI_NOR_EnterDOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003662:	f06f 0304 	mvn.w	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e06f      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	225c      	movs	r2, #92	@ 0x5c
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	4a38      	ldr	r2, [pc, #224]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 8003674:	1898      	adds	r0, r3, r2
 8003676:	4a38      	ldr	r2, [pc, #224]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	7859      	ldrb	r1, [r3, #1]
 8003680:	4a35      	ldr	r2, [pc, #212]	@ (8003758 <OSPI_NOR_EnterDOPIMode+0x19c>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	789a      	ldrb	r2, [r3, #2]
 800368a:	2302      	movs	r3, #2
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	f7fe fcfe 	bl	8002090 <MX25LM51245G_WriteCfg2Register>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <OSPI_NOR_EnterDOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800369a:	f06f 0304 	mvn.w	r3, #4
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e053      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 80036a2:	2028      	movs	r0, #40	@ 0x28
 80036a4:	f000 fc22 	bl	8003eec <HAL_Delay>

    /* Reconfigure the memory type of the peripheral */
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80036a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	215c      	movs	r1, #92	@ 0x5c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	330c      	adds	r3, #12
 80036b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ba:	601a      	str	r2, [r3, #0]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80036bc:	4a25      	ldr	r2, [pc, #148]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	215c      	movs	r1, #92	@ 0x5c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	332c      	adds	r3, #44	@ 0x2c
 80036ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ce:	601a      	str	r2, [r3, #0]
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	225c      	movs	r2, #92	@ 0x5c
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036da:	4413      	add	r3, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fe61 	bl	80063a4 <HAL_OSPI_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <OSPI_NOR_EnterDOPIMode+0x134>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80036e8:	f06f 0303 	mvn.w	r3, #3
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e02c      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check Flash busy ? */
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	225c      	movs	r2, #92	@ 0x5c
 80036f4:	fb02 f303 	mul.w	r3, r2, r3
 80036f8:	4a16      	ldr	r2, [pc, #88]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 80036fa:	4413      	add	r3, r2
 80036fc:	2201      	movs	r2, #1
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fa34 	bl	8001b6e <MX25LM51245G_AutoPollingMemReady>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <OSPI_NOR_EnterDOPIMode+0x158>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800370c:	f06f 0304 	mvn.w	r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e01a      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	225c      	movs	r2, #92	@ 0x5c
 8003718:	fb02 f303 	mul.w	r3, r2, r3
 800371c:	4a0d      	ldr	r2, [pc, #52]	@ (8003754 <OSPI_NOR_EnterDOPIMode+0x198>)
 800371e:	1898      	adds	r0, r3, r2
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2300      	movs	r3, #0
 8003728:	2201      	movs	r2, #1
 800372a:	2101      	movs	r1, #1
 800372c:	f7fe fd45 	bl	80021ba <MX25LM51245G_ReadCfg2Register>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <OSPI_NOR_EnterDOPIMode+0x182>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003736:	f06f 0304 	mvn.w	r3, #4
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e005      	b.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_DOPI)
 800373e:	7a3b      	ldrb	r3, [r7, #8]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d002      	beq.n	800374a <OSPI_NOR_EnterDOPIMode+0x18e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003744:	f06f 0304 	mvn.w	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	24000dc4 	.word	0x24000dc4
 8003758:	24000e20 	.word	0x24000e20

0800375c <OSPI_NOR_EnterSOPIMode>:
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	225c      	movs	r2, #92	@ 0x5c
 800376c:	fb02 f303 	mul.w	r3, r2, r3
 8003770:	4a4e      	ldr	r2, [pc, #312]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 8003772:	1898      	adds	r0, r3, r2
 8003774:	4a4e      	ldr	r2, [pc, #312]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	7859      	ldrb	r1, [r3, #1]
 800377e:	4a4c      	ldr	r2, [pc, #304]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4413      	add	r3, r2
 8003786:	789b      	ldrb	r3, [r3, #2]
 8003788:	461a      	mov	r2, r3
 800378a:	f7fe fbb6 	bl	8001efa <MX25LM51245G_WriteEnable>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <OSPI_NOR_EnterSOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003794:	f06f 0304 	mvn.w	r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e082      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with new dummy cycles) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, MX25LM51245G_CR2_DC_6_CYCLES) != MX25LM51245G_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	225c      	movs	r2, #92	@ 0x5c
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	4a41      	ldr	r2, [pc, #260]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 80037a6:	1898      	adds	r0, r3, r2
 80037a8:	4a41      	ldr	r2, [pc, #260]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	7859      	ldrb	r1, [r3, #1]
 80037b2:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	789a      	ldrb	r2, [r3, #2]
 80037bc:	2307      	movs	r3, #7
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80037c4:	f7fe fc64 	bl	8002090 <MX25LM51245G_WriteCfg2Register>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <OSPI_NOR_EnterSOPIMode+0x7a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80037ce:	f06f 0304 	mvn.w	r3, #4
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	e065      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	225c      	movs	r2, #92	@ 0x5c
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	4a33      	ldr	r2, [pc, #204]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 80037e0:	1898      	adds	r0, r3, r2
 80037e2:	4a33      	ldr	r2, [pc, #204]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	7859      	ldrb	r1, [r3, #1]
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	789b      	ldrb	r3, [r3, #2]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7fe fb7f 	bl	8001efa <MX25LM51245G_WriteEnable>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <OSPI_NOR_EnterSOPIMode+0xae>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003802:	f06f 0304 	mvn.w	r3, #4
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e04b      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  /* Write Configuration register 2 (with Octal I/O SPI protocol) */
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	225c      	movs	r2, #92	@ 0x5c
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 8003814:	1898      	adds	r0, r3, r2
 8003816:	4a26      	ldr	r2, [pc, #152]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	7859      	ldrb	r1, [r3, #1]
 8003820:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <OSPI_NOR_EnterSOPIMode+0x154>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	789a      	ldrb	r2, [r3, #2]
 800382a:	2301      	movs	r3, #1
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	2300      	movs	r3, #0
 8003830:	f7fe fc2e 	bl	8002090 <MX25LM51245G_WriteCfg2Register>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <OSPI_NOR_EnterSOPIMode+0xe6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800383a:	f06f 0304 	mvn.w	r3, #4
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e02f      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
  }
  else
  {
    /* Wait that the configuration is effective and check that memory is ready */
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003842:	2028      	movs	r0, #40	@ 0x28
 8003844:	f000 fb52 	bl	8003eec <HAL_Delay>

    /* Check Flash busy ? */
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	225c      	movs	r2, #92	@ 0x5c
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 8003852:	4413      	add	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe f988 	bl	8001b6e <MX25LM51245G_AutoPollingMemReady>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <OSPI_NOR_EnterSOPIMode+0x110>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003864:	f06f 0304 	mvn.w	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	e01a      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    /* Check the configuration has been correctly done */
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	225c      	movs	r2, #92	@ 0x5c
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	4a0d      	ldr	r2, [pc, #52]	@ (80038ac <OSPI_NOR_EnterSOPIMode+0x150>)
 8003876:	1898      	adds	r0, r3, r2
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	2200      	movs	r2, #0
 8003882:	2101      	movs	r1, #1
 8003884:	f7fe fc99 	bl	80021ba <MX25LM51245G_ReadCfg2Register>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <OSPI_NOR_EnterSOPIMode+0x13a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800388e:	f06f 0304 	mvn.w	r3, #4
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e005      	b.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
    }
    else
    {
      if (reg[0] != MX25LM51245G_CR2_SOPI)
 8003896:	7a3b      	ldrb	r3, [r7, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <OSPI_NOR_EnterSOPIMode+0x146>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800389c:	f06f 0304 	mvn.w	r3, #4
 80038a0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80038a2:	68fb      	ldr	r3, [r7, #12]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	24000dc4 	.word	0x24000dc4
 80038b0:	24000e20 	.word	0x24000e20

080038b4 <OSPI_NOR_ExitOPIMode>:
  * @brief  This function disables the octal DTR or STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_ExitOPIMode (uint32_t Instance)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
  uint8_t reg[2];

  /* Enable write operations */
  if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	225c      	movs	r2, #92	@ 0x5c
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	4a49      	ldr	r2, [pc, #292]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 80038ca:	1898      	adds	r0, r3, r2
 80038cc:	4a49      	ldr	r2, [pc, #292]	@ (80039f4 <OSPI_NOR_ExitOPIMode+0x140>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	7859      	ldrb	r1, [r3, #1]
 80038d6:	4a47      	ldr	r2, [pc, #284]	@ (80039f4 <OSPI_NOR_ExitOPIMode+0x140>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	789b      	ldrb	r3, [r3, #2]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f7fe fb0a 	bl	8001efa <MX25LM51245G_WriteEnable>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <OSPI_NOR_ExitOPIMode+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80038ec:	f06f 0304 	mvn.w	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e077      	b.n	80039e4 <OSPI_NOR_ExitOPIMode+0x130>
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	723b      	strb	r3, [r7, #8]
    reg[1] = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	727b      	strb	r3, [r7, #9]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	225c      	movs	r2, #92	@ 0x5c
 8003900:	fb02 f303 	mul.w	r3, r2, r3
 8003904:	4a3a      	ldr	r2, [pc, #232]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 8003906:	1898      	adds	r0, r3, r2
 8003908:	4a3a      	ldr	r2, [pc, #232]	@ (80039f4 <OSPI_NOR_ExitOPIMode+0x140>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	7859      	ldrb	r1, [r3, #1]
 8003912:	4a38      	ldr	r2, [pc, #224]	@ (80039f4 <OSPI_NOR_ExitOPIMode+0x140>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4413      	add	r3, r2
 800391a:	789a      	ldrb	r2, [r3, #2]
 800391c:	7a3b      	ldrb	r3, [r7, #8]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2300      	movs	r3, #0
 8003922:	f7fe fbb5 	bl	8002090 <MX25LM51245G_WriteCfg2Register>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <OSPI_NOR_ExitOPIMode+0x80>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800392c:	f06f 0304 	mvn.w	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e057      	b.n	80039e4 <OSPI_NOR_ExitOPIMode+0x130>
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003934:	2028      	movs	r0, #40	@ 0x28
 8003936:	f000 fad9 	bl	8003eec <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 800393a:	4a2e      	ldr	r2, [pc, #184]	@ (80039f4 <OSPI_NOR_ExitOPIMode+0x140>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d120      	bne.n	800398a <OSPI_NOR_ExitOPIMode+0xd6>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003948:	4a29      	ldr	r2, [pc, #164]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	215c      	movs	r1, #92	@ 0x5c
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	330c      	adds	r3, #12
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800395a:	4a25      	ldr	r2, [pc, #148]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	215c      	movs	r1, #92	@ 0x5c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	332c      	adds	r3, #44	@ 0x2c
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	225c      	movs	r2, #92	@ 0x5c
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 8003976:	4413      	add	r3, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f002 fd13 	bl	80063a4 <HAL_OSPI_Init>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <OSPI_NOR_ExitOPIMode+0xd6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8003984:	f06f 0303 	mvn.w	r3, #3
 8003988:	60fb      	str	r3, [r7, #12]
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	225c      	movs	r2, #92	@ 0x5c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 8003994:	4413      	add	r3, r2
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe f8e7 	bl	8001b6e <MX25LM51245G_AutoPollingMemReady>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <OSPI_NOR_ExitOPIMode+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039a6:	f06f 0304 	mvn.w	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e01a      	b.n	80039e4 <OSPI_NOR_ExitOPIMode+0x130>
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	225c      	movs	r2, #92	@ 0x5c
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	4a0e      	ldr	r2, [pc, #56]	@ (80039f0 <OSPI_NOR_ExitOPIMode+0x13c>)
 80039b8:	1898      	adds	r0, r3, r2
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2300      	movs	r3, #0
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	f7fe fbf8 	bl	80021ba <MX25LM51245G_ReadCfg2Register>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <OSPI_NOR_ExitOPIMode+0x124>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80039d0:	f06f 0304 	mvn.w	r3, #4
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e005      	b.n	80039e4 <OSPI_NOR_ExitOPIMode+0x130>
      }
      else
      {
        if (reg[0] != 0U)
 80039d8:	7a3b      	ldrb	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <OSPI_NOR_ExitOPIMode+0x130>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80039de:	f06f 0304 	mvn.w	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	24000dc4 	.word	0x24000dc4
 80039f4:	24000e20 	.word	0x24000e20

080039f8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11c      	bne.n	8003a46 <BSP_TS_Init+0x4e>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d018      	beq.n	8003a46 <BSP_TS_Init+0x4e>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003a1c:	d813      	bhi.n	8003a46 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00f      	beq.n	8003a46 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003a2e:	d80a      	bhi.n	8003a46 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	bf28      	it	cs
 8003a40:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d903      	bls.n	8003a4e <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a46:	f06f 0301 	mvn.w	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e06e      	b.n	8003b2c <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f98c 	bl	8003d6c <FT5336_Probe>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e064      	b.n	8003b2c <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4934      	ldr	r1, [pc, #208]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	015b      	lsls	r3, r3, #5
 8003a6c:	440b      	add	r3, r1
 8003a6e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4930      	ldr	r1, [pc, #192]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	015b      	lsls	r3, r3, #5
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	492c      	ldr	r1, [pc, #176]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	015b      	lsls	r3, r3, #5
 8003a8a:	440b      	add	r3, r1
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4928      	ldr	r1, [pc, #160]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	015b      	lsls	r3, r3, #5
 8003a9a:	440b      	add	r3, r1
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003aa0:	4b26      	ldr	r3, [pc, #152]	@ (8003b3c <BSP_TS_Init+0x144>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4926      	ldr	r1, [pc, #152]	@ (8003b40 <BSP_TS_Init+0x148>)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003aae:	f107 010c 	add.w	r1, r7, #12
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4798      	blx	r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	da03      	bge.n	8003ac4 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003abc:	f06f 0304 	mvn.w	r3, #4
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e033      	b.n	8003b2c <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	491c      	ldr	r1, [pc, #112]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	015b      	lsls	r3, r3, #5
 8003acc:	440b      	add	r3, r1
 8003ace:	3310      	adds	r3, #16
 8003ad0:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4918      	ldr	r1, [pc, #96]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	015b      	lsls	r3, r3, #5
 8003ada:	440b      	add	r3, r1
 8003adc:	3314      	adds	r3, #20
 8003ade:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e01f      	b.n	8003b26 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4811      	ldr	r0, [pc, #68]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	440b      	add	r3, r1
 8003afc:	3306      	adds	r3, #6
 8003afe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	480a      	ldr	r0, [pc, #40]	@ (8003b38 <BSP_TS_Init+0x140>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	00d9      	lsls	r1, r3, #3
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	440b      	add	r3, r1
 8003b18:	3306      	adds	r3, #6
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	3301      	adds	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0dc      	beq.n	8003ae6 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	24000e30 	.word	0x24000e30
 8003b3c:	24000e28 	.word	0x24000e28
 8003b40:	24000e2c 	.word	0x24000e2c

08003b44 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	@ 0x28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b58:	f06f 0301 	mvn.w	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5e:	e0f9      	b.n	8003d54 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8003b60:	4b7f      	ldr	r3, [pc, #508]	@ (8003d60 <BSP_TS_GetState+0x21c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	497f      	ldr	r1, [pc, #508]	@ (8003d64 <BSP_TS_GetState+0x220>)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003b6e:	f107 0108 	add.w	r1, r7, #8
 8003b72:	4610      	mov	r0, r2
 8003b74:	4798      	blx	r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da03      	bge.n	8003b84 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b7c:	f06f 0304 	mvn.w	r3, #4
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b82:	e0e7      	b.n	8003d54 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80d1 	beq.w	8003d2e <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003b94:	4a74      	ldr	r2, [pc, #464]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	015b      	lsls	r3, r3, #5
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003bb0:	4a6d      	ldr	r2, [pc, #436]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	015b      	lsls	r3, r3, #5
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3308      	adds	r3, #8
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003bc4:	4a68      	ldr	r2, [pc, #416]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	015b      	lsls	r3, r3, #5
 8003bca:	4413      	add	r3, r2
 8003bcc:	3310      	adds	r3, #16
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8003bd8:	4a63      	ldr	r2, [pc, #396]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	015b      	lsls	r3, r3, #5
 8003bde:	4413      	add	r3, r2
 8003be0:	3308      	adds	r3, #8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003bec:	4a5e      	ldr	r2, [pc, #376]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	015b      	lsls	r3, r3, #5
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	015b      	lsls	r3, r3, #5
 8003c04:	4413      	add	r3, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	4956      	ldr	r1, [pc, #344]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	015b      	lsls	r3, r3, #5
 8003c14:	440b      	add	r3, r1
 8003c16:	3310      	adds	r3, #16
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003c22:	4a51      	ldr	r2, [pc, #324]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	015b      	lsls	r3, r3, #5
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	fb03 f202 	mul.w	r2, r3, r2
 8003c34:	494c      	ldr	r1, [pc, #304]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4945      	ldr	r1, [pc, #276]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	015b      	lsls	r3, r3, #5
 8003c58:	440b      	add	r3, r1
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d909      	bls.n	8003c76 <BSP_TS_GetState+0x132>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	4940      	ldr	r1, [pc, #256]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	015b      	lsls	r3, r3, #5
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3318      	adds	r3, #24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	e008      	b.n	8003c88 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8003c76:	4a3c      	ldr	r2, [pc, #240]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	015b      	lsls	r3, r3, #5
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3318      	adds	r3, #24
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8003c86:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8003c88:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	4936      	ldr	r1, [pc, #216]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	440b      	add	r3, r1
 8003c96:	331c      	adds	r3, #28
 8003c98:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d909      	bls.n	8003cb2 <BSP_TS_GetState+0x16e>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	4931      	ldr	r1, [pc, #196]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	015b      	lsls	r3, r3, #5
 8003ca8:	440b      	add	r3, r1
 8003caa:	331c      	adds	r3, #28
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	e008      	b.n	8003cc4 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	015b      	lsls	r3, r3, #5
 8003cb8:	4413      	add	r3, r2
 8003cba:	331c      	adds	r3, #28
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003cc2:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003cc4:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8003cc6:	4a28      	ldr	r2, [pc, #160]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	015b      	lsls	r3, r3, #5
 8003ccc:	4413      	add	r3, r2
 8003cce:	330c      	adds	r3, #12
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d808      	bhi.n	8003cea <BSP_TS_GetState+0x1a6>
 8003cd8:	4a23      	ldr	r2, [pc, #140]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	015b      	lsls	r3, r3, #5
 8003cde:	4413      	add	r3, r2
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	491e      	ldr	r1, [pc, #120]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	015b      	lsls	r3, r3, #5
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	491a      	ldr	r1, [pc, #104]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	015b      	lsls	r3, r3, #5
 8003d04:	440b      	add	r3, r1
 8003d06:	331c      	adds	r3, #28
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e023      	b.n	8003d54 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003d0c:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	015b      	lsls	r3, r3, #5
 8003d12:	4413      	add	r3, r2
 8003d14:	3318      	adds	r3, #24
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003d1c:	4a12      	ldr	r2, [pc, #72]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	015b      	lsls	r3, r3, #5
 8003d22:	4413      	add	r3, r2
 8003d24:	331c      	adds	r3, #28
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e012      	b.n	8003d54 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003d34:	4a0c      	ldr	r2, [pc, #48]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	015b      	lsls	r3, r3, #5
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3318      	adds	r3, #24
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003d44:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <BSP_TS_GetState+0x224>)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	015b      	lsls	r3, r3, #5
 8003d4a:	4413      	add	r3, r2
 8003d4c:	331c      	adds	r3, #28
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3728      	adds	r7, #40	@ 0x28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	24000e28 	.word	0x24000e28
 8003d64:	24000e2c 	.word	0x24000e2c
 8003d68:	24000e30 	.word	0x24000e30

08003d6c <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  int32_t ret              = BSP_ERROR_NONE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8003d7c:	2370      	movs	r3, #112	@ 0x70
 8003d7e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003d80:	4b23      	ldr	r3, [pc, #140]	@ (8003e10 <FT5336_Probe+0xa4>)
 8003d82:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003d84:	4b23      	ldr	r3, [pc, #140]	@ (8003e14 <FT5336_Probe+0xa8>)
 8003d86:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8003d88:	4b23      	ldr	r3, [pc, #140]	@ (8003e18 <FT5336_Probe+0xac>)
 8003d8a:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003d8c:	4b23      	ldr	r3, [pc, #140]	@ (8003e1c <FT5336_Probe+0xb0>)
 8003d8e:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003d90:	4b23      	ldr	r3, [pc, #140]	@ (8003e20 <FT5336_Probe+0xb4>)
 8003d92:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4822      	ldr	r0, [pc, #136]	@ (8003e24 <FT5336_Probe+0xb8>)
 8003d9c:	f7fd fb58 	bl	8001450 <FT5336_RegisterBusIO>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8003da6:	f06f 0307 	mvn.w	r3, #7
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dac:	e02a      	b.n	8003e04 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	4619      	mov	r1, r3
 8003db4:	481b      	ldr	r0, [pc, #108]	@ (8003e24 <FT5336_Probe+0xb8>)
 8003db6:	f7fd fc45 	bl	8001644 <FT5336_ReadID>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003dc0:	f06f 0304 	mvn.w	r3, #4
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	e01d      	b.n	8003e04 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b51      	cmp	r3, #81	@ 0x51
 8003dcc:	d003      	beq.n	8003dd6 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003dce:	f06f 0306 	mvn.w	r3, #6
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd4:	e016      	b.n	8003e04 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8003dd6:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <FT5336_Probe+0xbc>)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4912      	ldr	r1, [pc, #72]	@ (8003e24 <FT5336_Probe+0xb8>)
 8003ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003de0:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <FT5336_Probe+0xc0>)
 8003de2:	4a13      	ldr	r2, [pc, #76]	@ (8003e30 <FT5336_Probe+0xc4>)
 8003de4:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8003de6:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <FT5336_Probe+0xc0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	490e      	ldr	r1, [pc, #56]	@ (8003e28 <FT5336_Probe+0xbc>)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003df4:	4610      	mov	r0, r2
 8003df6:	4798      	blx	r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003dfe:	f06f 0304 	mvn.w	r3, #4
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3728      	adds	r7, #40	@ 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	08002451 	.word	0x08002451
 8003e14:	080024c5 	.word	0x080024c5
 8003e18:	080025ed 	.word	0x080025ed
 8003e1c:	08002591 	.word	0x08002591
 8003e20:	08002649 	.word	0x08002649
 8003e24:	24000e50 	.word	0x24000e50
 8003e28:	24000e2c 	.word	0x24000e2c
 8003e2c:	24000e28 	.word	0x24000e28
 8003e30:	2400000c 	.word	0x2400000c

08003e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e3a:	2003      	movs	r0, #3
 8003e3c:	f000 f94b 	bl	80040d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003e40:	f004 f852 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_Init+0x68>)
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	4913      	ldr	r1, [pc, #76]	@ (8003ea0 <HAL_Init+0x6c>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <HAL_Init+0x68>)
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea0 <HAL_Init+0x6c>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea4 <HAL_Init+0x70>)
 8003e76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <HAL_Init+0x74>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e7e:	200f      	movs	r0, #15
 8003e80:	f7fd f8c8 	bl	8001014 <HAL_InitTick>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e002      	b.n	8003e94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e8e:	f7fc fe87 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	08026e58 	.word	0x08026e58
 8003ea4:	24000008 	.word	0x24000008
 8003ea8:	24000004 	.word	0x24000004

08003eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_IncTick+0x20>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_IncTick+0x24>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <HAL_IncTick+0x24>)
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	24000040 	.word	0x24000040
 8003ed0:	24000e78 	.word	0x24000e78

08003ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ed8:	4b03      	ldr	r3, [pc, #12]	@ (8003ee8 <HAL_GetTick+0x14>)
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	24000e78 	.word	0x24000e78

08003eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef4:	f7ff ffee 	bl	8003ed4 <HAL_GetTick>
 8003ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d005      	beq.n	8003f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_Delay+0x44>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f12:	bf00      	nop
 8003f14:	f7ff ffde 	bl	8003ed4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d8f7      	bhi.n	8003f14 <HAL_Delay+0x28>
  {
  }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	24000040 	.word	0x24000040

08003f34 <__NVIC_SetPriorityGrouping>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f44:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f50:	4013      	ands	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f62:	4a04      	ldr	r2, [pc, #16]	@ (8003f74 <__NVIC_SetPriorityGrouping+0x40>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	60d3      	str	r3, [r2, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	05fa0000 	.word	0x05fa0000

08003f7c <__NVIC_GetPriorityGrouping>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__NVIC_GetPriorityGrouping+0x18>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0307 	and.w	r3, r3, #7
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	e000ed00 	.word	0xe000ed00

08003f98 <__NVIC_EnableIRQ>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0b      	blt.n	8003fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	4907      	ldr	r1, [pc, #28]	@ (8003fd0 <__NVIC_EnableIRQ+0x38>)
 8003fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2001      	movs	r0, #1
 8003fba:	fa00 f202 	lsl.w	r2, r0, r2
 8003fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e100 	.word	0xe000e100

08003fd4 <__NVIC_DisableIRQ>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	db12      	blt.n	800400c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	f003 021f 	and.w	r2, r3, #31
 8003fec:	490a      	ldr	r1, [pc, #40]	@ (8004018 <__NVIC_DisableIRQ+0x44>)
 8003fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffa:	3320      	adds	r3, #32
 8003ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004000:	f3bf 8f4f 	dsb	sy
}
 8004004:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004006:	f3bf 8f6f 	isb	sy
}
 800400a:	bf00      	nop
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100

0800401c <__NVIC_SetPriority>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db0a      	blt.n	8004046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	490c      	ldr	r1, [pc, #48]	@ (8004068 <__NVIC_SetPriority+0x4c>)
 8004036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403a:	0112      	lsls	r2, r2, #4
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	440b      	add	r3, r1
 8004040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004044:	e00a      	b.n	800405c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4908      	ldr	r1, [pc, #32]	@ (800406c <__NVIC_SetPriority+0x50>)
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	3b04      	subs	r3, #4
 8004054:	0112      	lsls	r2, r2, #4
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	440b      	add	r3, r1
 800405a:	761a      	strb	r2, [r3, #24]
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000e100 	.word	0xe000e100
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <NVIC_EncodePriority>:
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f1c3 0307 	rsb	r3, r3, #7
 800408a:	2b04      	cmp	r3, #4
 800408c:	bf28      	it	cs
 800408e:	2304      	movcs	r3, #4
 8004090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3304      	adds	r3, #4
 8004096:	2b06      	cmp	r3, #6
 8004098:	d902      	bls.n	80040a0 <NVIC_EncodePriority+0x30>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3b03      	subs	r3, #3
 800409e:	e000      	b.n	80040a2 <NVIC_EncodePriority+0x32>
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	401a      	ands	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b8:	f04f 31ff 	mov.w	r1, #4294967295
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	43d9      	mvns	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c8:	4313      	orrs	r3, r2
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3724      	adds	r7, #36	@ 0x24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff28 	bl	8003f34 <__NVIC_SetPriorityGrouping>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040fa:	f7ff ff3f 	bl	8003f7c <__NVIC_GetPriorityGrouping>
 80040fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	6978      	ldr	r0, [r7, #20]
 8004106:	f7ff ffb3 	bl	8004070 <NVIC_EncodePriority>
 800410a:	4602      	mov	r2, r0
 800410c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff82 	bl	800401c <__NVIC_SetPriority>
}
 8004118:	bf00      	nop
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800412a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff ff32 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff42 	bl	8003fd4 <__NVIC_DisableIRQ>
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800415c:	f3bf 8f5f 	dmb	sy
}
 8004160:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004162:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <HAL_MPU_Disable+0x28>)
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	4a06      	ldr	r2, [pc, #24]	@ (8004180 <HAL_MPU_Disable+0x28>)
 8004168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800416e:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <HAL_MPU_Disable+0x2c>)
 8004170:	2200      	movs	r2, #0
 8004172:	605a      	str	r2, [r3, #4]
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	e000ed00 	.word	0xe000ed00
 8004184:	e000ed90 	.word	0xe000ed90

08004188 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004190:	4a0b      	ldr	r2, [pc, #44]	@ (80041c0 <HAL_MPU_Enable+0x38>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <HAL_MPU_Enable+0x3c>)
 800419c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419e:	4a09      	ldr	r2, [pc, #36]	@ (80041c4 <HAL_MPU_Enable+0x3c>)
 80041a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80041a6:	f3bf 8f4f 	dsb	sy
}
 80041aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ac:	f3bf 8f6f 	isb	sy
}
 80041b0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000ed90 	.word	0xe000ed90
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	785a      	ldrb	r2, [r3, #1]
 80041d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <HAL_MPU_ConfigRegion+0x7c>)
 80041d6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80041d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004244 <HAL_MPU_ConfigRegion+0x7c>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4a19      	ldr	r2, [pc, #100]	@ (8004244 <HAL_MPU_ConfigRegion+0x7c>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80041e4:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <HAL_MPU_ConfigRegion+0x7c>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	7b1b      	ldrb	r3, [r3, #12]
 80041f0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7adb      	ldrb	r3, [r3, #11]
 80041f6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	7a9b      	ldrb	r3, [r3, #10]
 80041fe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	7b5b      	ldrb	r3, [r3, #13]
 8004206:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004208:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7b9b      	ldrb	r3, [r3, #14]
 800420e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004210:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7bdb      	ldrb	r3, [r3, #15]
 8004216:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	7a5b      	ldrb	r3, [r3, #9]
 800421e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004220:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7a1b      	ldrb	r3, [r3, #8]
 8004226:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004228:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004230:	4a04      	ldr	r2, [pc, #16]	@ (8004244 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004232:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004234:	6113      	str	r3, [r2, #16]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	e000ed90 	.word	0xe000ed90

08004248 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e054      	b.n	8004304 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7f5b      	ldrb	r3, [r3, #29]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fcb6 	bl	8000bdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	791b      	ldrb	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a22      	ldr	r2, [pc, #136]	@ (800430c <HAL_CRC_Init+0xc4>)
 8004284:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0218 	bic.w	r2, r2, #24
 8004294:	609a      	str	r2, [r3, #8]
 8004296:	e00c      	b.n	80042b2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6899      	ldr	r1, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f834 	bl	8004310 <HAL_CRCEx_Polynomial_Set>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e028      	b.n	8004304 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	795b      	ldrb	r3, [r3, #5]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f04f 32ff 	mov.w	r2, #4294967295
 80042c2:	611a      	str	r2, [r3, #16]
 80042c4:	e004      	b.n	80042d0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6912      	ldr	r2, [r2, #16]
 80042ce:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	04c11db7 	.word	0x04c11db7

08004310 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004320:	231f      	movs	r3, #31
 8004322:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
 8004332:	e063      	b.n	80043fc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004334:	bf00      	nop
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	613a      	str	r2, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_CRCEx_Polynomial_Set+0x44>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b18      	cmp	r3, #24
 8004358:	d846      	bhi.n	80043e8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800435a:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <HAL_CRCEx_Polynomial_Set+0x50>)
 800435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004360:	080043ef 	.word	0x080043ef
 8004364:	080043e9 	.word	0x080043e9
 8004368:	080043e9 	.word	0x080043e9
 800436c:	080043e9 	.word	0x080043e9
 8004370:	080043e9 	.word	0x080043e9
 8004374:	080043e9 	.word	0x080043e9
 8004378:	080043e9 	.word	0x080043e9
 800437c:	080043e9 	.word	0x080043e9
 8004380:	080043dd 	.word	0x080043dd
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080043e9 	.word	0x080043e9
 800438c:	080043e9 	.word	0x080043e9
 8004390:	080043e9 	.word	0x080043e9
 8004394:	080043e9 	.word	0x080043e9
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043e9 	.word	0x080043e9
 80043a0:	080043d1 	.word	0x080043d1
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	080043e9 	.word	0x080043e9
 80043ac:	080043e9 	.word	0x080043e9
 80043b0:	080043e9 	.word	0x080043e9
 80043b4:	080043e9 	.word	0x080043e9
 80043b8:	080043e9 	.word	0x080043e9
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	080043c5 	.word	0x080043c5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d913      	bls.n	80043f2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80043ce:	e010      	b.n	80043f2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	2b07      	cmp	r3, #7
 80043d4:	d90f      	bls.n	80043f6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80043da:	e00c      	b.n	80043f6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	d90b      	bls.n	80043fa <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80043e6:	e008      	b.n	80043fa <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
        break;
 80043ec:	e006      	b.n	80043fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043ee:	bf00      	nop
 80043f0:	e004      	b.n	80043fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80043fa:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 0118 	bic.w	r1, r3, #24
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	430a      	orrs	r2, r1
 800441c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e04f      	b.n	80044de <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fbe4 	bl	8000c20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b20      	ldr	r3, [pc, #128]	@ (80044e8 <HAL_DMA2D_Init+0xbc>)
 8004468:	4013      	ands	r3, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6851      	ldr	r1, [r2, #4]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	69d2      	ldr	r2, [r2, #28]
 8004472:	4311      	orrs	r1, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	430b      	orrs	r3, r1
 800447a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <HAL_DMA2D_Init+0xc0>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6891      	ldr	r1, [r2, #8]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6992      	ldr	r2, [r2, #24]
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	430b      	orrs	r3, r1
 8004496:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_DMA2D_Init+0xc4>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68d1      	ldr	r1, [r2, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	430b      	orrs	r3, r1
 80044ac:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	051a      	lsls	r2, r3, #20
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	055b      	lsls	r3, r3, #21
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	fff8ffbf 	.word	0xfff8ffbf
 80044ec:	fffffef8 	.word	0xfffffef8
 80044f0:	ffff0000 	.word	0xffff0000

080044f4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d026      	beq.n	8004564 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d021      	beq.n	8004564 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800452e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2204      	movs	r2, #4
 8004548:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d026      	beq.n	80045bc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d021      	beq.n	80045bc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004586:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2220      	movs	r2, #32
 800458e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004594:	f043 0202 	orr.w	r2, r3, #2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2204      	movs	r2, #4
 80045a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d026      	beq.n	8004614 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d021      	beq.n	8004614 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045de:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2208      	movs	r2, #8
 80045e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2204      	movs	r2, #4
 80045f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d013      	beq.n	8004646 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004636:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f853 	bl	80046ec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d024      	beq.n	800469a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01f      	beq.n	800469a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004668:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2202      	movs	r2, #2
 8004670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01f      	beq.n	80046e4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01a      	beq.n	80046e4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046bc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f80e 	bl	8004700 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_DMA2D_ConfigLayer+0x24>
 8004734:	2302      	movs	r3, #2
 8004736:	e092      	b.n	800485e <HAL_DMA2D_ConfigLayer+0x14a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	3328      	adds	r3, #40	@ 0x28
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4413      	add	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800476c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004778:	4b3c      	ldr	r3, [pc, #240]	@ (800486c <HAL_DMA2D_ConfigLayer+0x158>)
 800477a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b0a      	cmp	r3, #10
 8004782:	d003      	beq.n	800478c <HAL_DMA2D_ConfigLayer+0x78>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b09      	cmp	r3, #9
 800478a:	d107      	bne.n	800479c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e005      	b.n	80047a8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	061b      	lsls	r3, r3, #24
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d120      	bne.n	80047f0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	ea02 0103 	and.w	r1, r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d003      	beq.n	80047e0 <HAL_DMA2D_ConfigLayer+0xcc>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b09      	cmp	r3, #9
 80047de:	d135      	bne.n	800484c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80047ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ee:	e02d      	b.n	800484c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b0b      	cmp	r3, #11
 80047f6:	d109      	bne.n	800480c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	049b      	lsls	r3, r3, #18
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800480a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	43db      	mvns	r3, r3
 8004816:	ea02 0103 	and.w	r1, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	430a      	orrs	r2, r1
 8004822:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b0a      	cmp	r3, #10
 8004834:	d003      	beq.n	800483e <HAL_DMA2D_ConfigLayer+0x12a>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b09      	cmp	r3, #9
 800483c:	d106      	bne.n	800484c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800484a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	ff33000f 	.word	0xff33000f

08004870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	@ 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800487e:	4b89      	ldr	r3, [pc, #548]	@ (8004aa4 <HAL_GPIO_Init+0x234>)
 8004880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004882:	e194      	b.n	8004bae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	2101      	movs	r1, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa01 f303 	lsl.w	r3, r1, r3
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8186 	beq.w	8004ba8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d005      	beq.n	80048b4 <HAL_GPIO_Init+0x44>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d130      	bne.n	8004916 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048ea:	2201      	movs	r2, #1
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	f003 0201 	and.w	r2, r3, #1
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b03      	cmp	r3, #3
 8004920:	d017      	beq.n	8004952 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	2203      	movs	r2, #3
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d123      	bne.n	80049a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	08da      	lsrs	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3208      	adds	r2, #8
 8004966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	08da      	lsrs	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3208      	adds	r2, #8
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2203      	movs	r2, #3
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80e0 	beq.w	8004ba8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e8:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <HAL_GPIO_Init+0x238>)
 80049ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80049ee:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa8 <HAL_GPIO_Init+0x238>)
 80049f0:	f043 0302 	orr.w	r3, r3, #2
 80049f4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80049f8:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <HAL_GPIO_Init+0x238>)
 80049fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a06:	4a29      	ldr	r2, [pc, #164]	@ (8004aac <HAL_GPIO_Init+0x23c>)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	@ (8004ab0 <HAL_GPIO_Init+0x240>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d052      	beq.n	8004ad8 <HAL_GPIO_Init+0x268>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab4 <HAL_GPIO_Init+0x244>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d031      	beq.n	8004a9e <HAL_GPIO_Init+0x22e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab8 <HAL_GPIO_Init+0x248>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02b      	beq.n	8004a9a <HAL_GPIO_Init+0x22a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	@ (8004abc <HAL_GPIO_Init+0x24c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d025      	beq.n	8004a96 <HAL_GPIO_Init+0x226>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac0 <HAL_GPIO_Init+0x250>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d01f      	beq.n	8004a92 <HAL_GPIO_Init+0x222>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac4 <HAL_GPIO_Init+0x254>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d019      	beq.n	8004a8e <HAL_GPIO_Init+0x21e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ac8 <HAL_GPIO_Init+0x258>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_GPIO_Init+0x21a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a19      	ldr	r2, [pc, #100]	@ (8004acc <HAL_GPIO_Init+0x25c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00d      	beq.n	8004a86 <HAL_GPIO_Init+0x216>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <HAL_GPIO_Init+0x260>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <HAL_GPIO_Init+0x212>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <HAL_GPIO_Init+0x264>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_GPIO_Init+0x20e>
 8004a7a:	2309      	movs	r3, #9
 8004a7c:	e02d      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a7e:	230a      	movs	r3, #10
 8004a80:	e02b      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a82:	2308      	movs	r3, #8
 8004a84:	e029      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a86:	2307      	movs	r3, #7
 8004a88:	e027      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a8a:	2306      	movs	r3, #6
 8004a8c:	e025      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a8e:	2305      	movs	r3, #5
 8004a90:	e023      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a92:	2304      	movs	r3, #4
 8004a94:	e021      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a96:	2303      	movs	r3, #3
 8004a98:	e01f      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e01d      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e01b      	b.n	8004ada <HAL_GPIO_Init+0x26a>
 8004aa2:	bf00      	nop
 8004aa4:	58000080 	.word	0x58000080
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	58000400 	.word	0x58000400
 8004ab0:	58020000 	.word	0x58020000
 8004ab4:	58020400 	.word	0x58020400
 8004ab8:	58020800 	.word	0x58020800
 8004abc:	58020c00 	.word	0x58020c00
 8004ac0:	58021000 	.word	0x58021000
 8004ac4:	58021400 	.word	0x58021400
 8004ac8:	58021800 	.word	0x58021800
 8004acc:	58021c00 	.word	0x58021c00
 8004ad0:	58022000 	.word	0x58022000
 8004ad4:	58022400 	.word	0x58022400
 8004ad8:	2300      	movs	r3, #0
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	f002 0203 	and.w	r2, r2, #3
 8004ae0:	0092      	lsls	r2, r2, #2
 8004ae2:	4093      	lsls	r3, r2
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aea:	4938      	ldr	r1, [pc, #224]	@ (8004bcc <HAL_GPIO_Init+0x35c>)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	43db      	mvns	r3, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4013      	ands	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	43db      	mvns	r3, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f ae63 	bne.w	8004884 <HAL_GPIO_Init+0x14>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	3724      	adds	r7, #36	@ 0x24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	58000400 	.word	0x58000400

08004bd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bde:	4b75      	ldr	r3, [pc, #468]	@ (8004db4 <HAL_GPIO_DeInit+0x1e4>)
 8004be0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8004be2:	e0d9      	b.n	8004d98 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004be4:	2201      	movs	r2, #1
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80cc 	beq.w	8004d92 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004bfa:	4a6f      	ldr	r2, [pc, #444]	@ (8004db8 <HAL_GPIO_DeInit+0x1e8>)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	089b      	lsrs	r3, r3, #2
 8004c00:	3302      	adds	r3, #2
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	220f      	movs	r2, #15
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a67      	ldr	r2, [pc, #412]	@ (8004dbc <HAL_GPIO_DeInit+0x1ec>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d037      	beq.n	8004c94 <HAL_GPIO_DeInit+0xc4>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a66      	ldr	r2, [pc, #408]	@ (8004dc0 <HAL_GPIO_DeInit+0x1f0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <HAL_GPIO_DeInit+0xc0>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_GPIO_DeInit+0x1f4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d02b      	beq.n	8004c8c <HAL_GPIO_DeInit+0xbc>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a64      	ldr	r2, [pc, #400]	@ (8004dc8 <HAL_GPIO_DeInit+0x1f8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d025      	beq.n	8004c88 <HAL_GPIO_DeInit+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a63      	ldr	r2, [pc, #396]	@ (8004dcc <HAL_GPIO_DeInit+0x1fc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01f      	beq.n	8004c84 <HAL_GPIO_DeInit+0xb4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a62      	ldr	r2, [pc, #392]	@ (8004dd0 <HAL_GPIO_DeInit+0x200>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d019      	beq.n	8004c80 <HAL_GPIO_DeInit+0xb0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a61      	ldr	r2, [pc, #388]	@ (8004dd4 <HAL_GPIO_DeInit+0x204>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_GPIO_DeInit+0xac>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a60      	ldr	r2, [pc, #384]	@ (8004dd8 <HAL_GPIO_DeInit+0x208>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00d      	beq.n	8004c78 <HAL_GPIO_DeInit+0xa8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8004ddc <HAL_GPIO_DeInit+0x20c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d007      	beq.n	8004c74 <HAL_GPIO_DeInit+0xa4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a5e      	ldr	r2, [pc, #376]	@ (8004de0 <HAL_GPIO_DeInit+0x210>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_GPIO_DeInit+0xa0>
 8004c6c:	2309      	movs	r3, #9
 8004c6e:	e012      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c70:	230a      	movs	r3, #10
 8004c72:	e010      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	e00e      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c78:	2307      	movs	r3, #7
 8004c7a:	e00c      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c7c:	2306      	movs	r3, #6
 8004c7e:	e00a      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c80:	2305      	movs	r3, #5
 8004c82:	e008      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c84:	2304      	movs	r3, #4
 8004c86:	e006      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e004      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e002      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_GPIO_DeInit+0xc6>
 8004c94:	2300      	movs	r3, #0
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	f002 0203 	and.w	r2, r2, #3
 8004c9c:	0092      	lsls	r2, r2, #2
 8004c9e:	4093      	lsls	r3, r2
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d136      	bne.n	8004d14 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	401a      	ands	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	220f      	movs	r2, #15
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004cf6:	4a30      	ldr	r2, [pc, #192]	@ (8004db8 <HAL_GPIO_DeInit+0x1e8>)
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	43da      	mvns	r2, r3
 8004d06:	482c      	ldr	r0, [pc, #176]	@ (8004db8 <HAL_GPIO_DeInit+0x1e8>)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	3302      	adds	r3, #2
 8004d10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	2103      	movs	r1, #3
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	08da      	lsrs	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3208      	adds	r2, #8
 8004d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	220f      	movs	r2, #15
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43db      	mvns	r3, r3
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	08d2      	lsrs	r2, r2, #3
 8004d48:	4019      	ands	r1, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3208      	adds	r2, #8
 8004d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2103      	movs	r1, #3
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	401a      	ands	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	401a      	ands	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	2103      	movs	r1, #3
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	401a      	ands	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	609a      	str	r2, [r3, #8]
    }

    position++;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	3301      	adds	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f47f af1f 	bne.w	8004be4 <HAL_GPIO_DeInit+0x14>
  }
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	58000080 	.word	0x58000080
 8004db8:	58000400 	.word	0x58000400
 8004dbc:	58020000 	.word	0x58020000
 8004dc0:	58020400 	.word	0x58020400
 8004dc4:	58020800 	.word	0x58020800
 8004dc8:	58020c00 	.word	0x58020c00
 8004dcc:	58021000 	.word	0x58021000
 8004dd0:	58021400 	.word	0x58021400
 8004dd4:	58021800 	.word	0x58021800
 8004dd8:	58021c00 	.word	0x58021c00
 8004ddc:	58022000 	.word	0x58022000
 8004de0:	58022400 	.word	0x58022400

08004de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	807b      	strh	r3, [r7, #2]
 8004df0:	4613      	mov	r3, r2
 8004df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004df4:	787b      	ldrb	r3, [r7, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e00:	e003      	b.n	8004e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e02:	887b      	ldrh	r3, [r7, #2]
 8004e04:	041a      	lsls	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	619a      	str	r2, [r3, #24]
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b085      	sub	sp, #20
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e28:	887a      	ldrh	r2, [r7, #2]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	041a      	lsls	r2, r3, #16
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	43d9      	mvns	r1, r3
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	400b      	ands	r3, r1
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	619a      	str	r2, [r3, #24]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4603      	mov	r3, r0
 8004e52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e58:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 f804 	bl	8004e7e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	4603      	mov	r3, r0
 8004e86:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e08b      	b.n	8004fbe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fed8 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	@ 0x24
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ee4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ef4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d107      	bne.n	8004f0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	e006      	b.n	8004f1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d108      	bne.n	8004f36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	e007      	b.n	8004f46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_I2C_Init+0x134>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69d9      	ldr	r1, [r3, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	02008000 	.word	0x02008000

08004fcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e021      	b.n	8005022 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2224      	movs	r2, #36	@ 0x24
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0201 	bic.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb fea4 	bl	8000d44 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4603      	mov	r3, r0
 800503c:	817b      	strh	r3, [r7, #10]
 800503e:	460b      	mov	r3, r1
 8005040:	813b      	strh	r3, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b20      	cmp	r3, #32
 8005050:	f040 80f9 	bne.w	8005246 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_I2C_Mem_Write+0x34>
 800505a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005066:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0ed      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005072:	2b01      	cmp	r3, #1
 8005074:	d101      	bne.n	800507a <HAL_I2C_Mem_Write+0x4e>
 8005076:	2302      	movs	r3, #2
 8005078:	e0e6      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005082:	f7fe ff27 	bl	8003ed4 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	2319      	movs	r3, #25
 800508e:	2201      	movs	r2, #1
 8005090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fadd 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0d1      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	@ 0x21
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2240      	movs	r2, #64	@ 0x40
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a3a      	ldr	r2, [r7, #32]
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050cc:	88f8      	ldrh	r0, [r7, #6]
 80050ce:	893a      	ldrh	r2, [r7, #8]
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4603      	mov	r3, r0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f9ed 	bl	80054bc <I2C_RequestMemoryWrite>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0a9      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2bff      	cmp	r3, #255	@ 0xff
 80050fc:	d90e      	bls.n	800511c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	22ff      	movs	r2, #255	@ 0xff
 8005102:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005108:	b2da      	uxtb	r2, r3
 800510a:	8979      	ldrh	r1, [r7, #10]
 800510c:	2300      	movs	r3, #0
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fc61 	bl	80059dc <I2C_TransferConfig>
 800511a:	e00f      	b.n	800513c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512a:	b2da      	uxtb	r2, r3
 800512c:	8979      	ldrh	r1, [r7, #10]
 800512e:	2300      	movs	r3, #0
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fc50 	bl	80059dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fae0 	bl	8005706 <I2C_WaitOnTXISFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e07b      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d034      	beq.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d130      	bne.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	2200      	movs	r2, #0
 800519a:	2180      	movs	r1, #128	@ 0x80
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fa59 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04d      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2bff      	cmp	r3, #255	@ 0xff
 80051b4:	d90e      	bls.n	80051d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	22ff      	movs	r2, #255	@ 0xff
 80051ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	8979      	ldrh	r1, [r7, #10]
 80051c4:	2300      	movs	r3, #0
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 fc05 	bl	80059dc <I2C_TransferConfig>
 80051d2:	e00f      	b.n	80051f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	2300      	movs	r3, #0
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fbf4 	bl	80059dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d19e      	bne.n	800513c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 fac6 	bl	8005794 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e01a      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2220      	movs	r2, #32
 8005218:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <HAL_I2C_Mem_Write+0x224>)
 8005226:	400b      	ands	r3, r1
 8005228:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	fe00e800 	.word	0xfe00e800

08005254 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4603      	mov	r3, r0
 8005264:	817b      	strh	r3, [r7, #10]
 8005266:	460b      	mov	r3, r1
 8005268:	813b      	strh	r3, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 80fd 	bne.w	8005476 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_I2C_Mem_Read+0x34>
 8005282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800528e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e0f1      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x4e>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0ea      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052aa:	f7fe fe13 	bl	8003ed4 <HAL_GetTick>
 80052ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2319      	movs	r3, #25
 80052b6:	2201      	movs	r2, #1
 80052b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f9c9 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0d5      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2222      	movs	r2, #34	@ 0x22
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2240      	movs	r2, #64	@ 0x40
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052f4:	88f8      	ldrh	r0, [r7, #6]
 80052f6:	893a      	ldrh	r2, [r7, #8]
 80052f8:	8979      	ldrh	r1, [r7, #10]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4603      	mov	r3, r0
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f92d 	bl	8005564 <I2C_RequestMemoryRead>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0ad      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	2bff      	cmp	r3, #255	@ 0xff
 8005324:	d90e      	bls.n	8005344 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	22ff      	movs	r2, #255	@ 0xff
 800532a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	8979      	ldrh	r1, [r7, #10]
 8005334:	4b52      	ldr	r3, [pc, #328]	@ (8005480 <HAL_I2C_Mem_Read+0x22c>)
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 fb4d 	bl	80059dc <I2C_TransferConfig>
 8005342:	e00f      	b.n	8005364 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005352:	b2da      	uxtb	r2, r3
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	4b4a      	ldr	r3, [pc, #296]	@ (8005480 <HAL_I2C_Mem_Read+0x22c>)
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fb3c 	bl	80059dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	2200      	movs	r2, #0
 800536c:	2104      	movs	r1, #4
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f970 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e07c      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d034      	beq.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d130      	bne.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f941 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e04d      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2bff      	cmp	r3, #255	@ 0xff
 80053e4:	d90e      	bls.n	8005404 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	22ff      	movs	r2, #255	@ 0xff
 80053ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	8979      	ldrh	r1, [r7, #10]
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 faed 	bl	80059dc <I2C_TransferConfig>
 8005402:	e00f      	b.n	8005424 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005412:	b2da      	uxtb	r2, r3
 8005414:	8979      	ldrh	r1, [r7, #10]
 8005416:	2300      	movs	r3, #0
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fadc 	bl	80059dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d19a      	bne.n	8005364 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f9ae 	bl	8005794 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e01a      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2220      	movs	r2, #32
 8005448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_I2C_Mem_Read+0x230>)
 8005456:	400b      	ands	r3, r1
 8005458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e000      	b.n	8005478 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
  }
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	80002400 	.word	0x80002400
 8005484:	fe00e800 	.word	0xfe00e800

08005488 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005496:	b2db      	uxtb	r3, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	4608      	mov	r0, r1
 80054c6:	4611      	mov	r1, r2
 80054c8:	461a      	mov	r2, r3
 80054ca:	4603      	mov	r3, r0
 80054cc:	817b      	strh	r3, [r7, #10]
 80054ce:	460b      	mov	r3, r1
 80054d0:	813b      	strh	r3, [r7, #8]
 80054d2:	4613      	mov	r3, r2
 80054d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	8979      	ldrh	r1, [r7, #10]
 80054dc:	4b20      	ldr	r3, [pc, #128]	@ (8005560 <I2C_RequestMemoryWrite+0xa4>)
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fa79 	bl	80059dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	69b9      	ldr	r1, [r7, #24]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f909 	bl	8005706 <I2C_WaitOnTXISFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e02c      	b.n	8005558 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054fe:	88fb      	ldrh	r3, [r7, #6]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d105      	bne.n	8005510 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	629a      	str	r2, [r3, #40]	@ 0x28
 800550e:	e015      	b.n	800553c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	b29b      	uxth	r3, r3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	69b9      	ldr	r1, [r7, #24]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f8ef 	bl	8005706 <I2C_WaitOnTXISFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e012      	b.n	8005558 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005532:	893b      	ldrh	r3, [r7, #8]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2200      	movs	r2, #0
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f884 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	80002000 	.word	0x80002000

08005564 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	b2da      	uxtb	r2, r3
 8005582:	8979      	ldrh	r1, [r7, #10]
 8005584:	4b20      	ldr	r3, [pc, #128]	@ (8005608 <I2C_RequestMemoryRead+0xa4>)
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2300      	movs	r3, #0
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fa26 	bl	80059dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f8b6 	bl	8005706 <I2C_WaitOnTXISFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e02c      	b.n	80055fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d105      	bne.n	80055b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055aa:	893b      	ldrh	r3, [r7, #8]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80055b4:	e015      	b.n	80055e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80055b6:	893b      	ldrh	r3, [r7, #8]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c4:	69fa      	ldr	r2, [r7, #28]
 80055c6:	69b9      	ldr	r1, [r7, #24]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f89c 	bl	8005706 <I2C_WaitOnTXISFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e012      	b.n	80055fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80055d8:	893b      	ldrh	r3, [r7, #8]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2140      	movs	r1, #64	@ 0x40
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f831 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	80002000 	.word	0x80002000

0800560c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d103      	bne.n	800562a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2200      	movs	r2, #0
 8005628:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d007      	beq.n	8005648 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	619a      	str	r2, [r3, #24]
  }
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005664:	e03b      	b.n	80056de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f8d6 	bl	800581c <I2C_IsErrorOccurred>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d02d      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7fe fc27 	bl	8003ed4 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d122      	bne.n	80056de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4013      	ands	r3, r2
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	bf0c      	ite	eq
 80056a8:	2301      	moveq	r3, #1
 80056aa:	2300      	movne	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d113      	bne.n	80056de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f043 0220 	orr.w	r2, r3, #32
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e00f      	b.n	80056fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d0b4      	beq.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005712:	e033      	b.n	800577c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f87f 	bl	800581c <I2C_IsErrorOccurred>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e031      	b.n	800578c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572e:	d025      	beq.n	800577c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005730:	f7fe fbd0 	bl	8003ed4 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11a      	bne.n	800577c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b02      	cmp	r3, #2
 8005752:	d013      	beq.n	800577c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005758:	f043 0220 	orr.w	r2, r3, #32
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d1c4      	bne.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a0:	e02f      	b.n	8005802 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f838 	bl	800581c <I2C_IsErrorOccurred>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e02d      	b.n	8005812 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fe fb8d 	bl	8003ed4 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11a      	bne.n	8005802 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b20      	cmp	r3, #32
 80057d8:	d013      	beq.n	8005802 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f043 0220 	orr.w	r2, r3, #32
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e007      	b.n	8005812 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b20      	cmp	r3, #32
 800580e:	d1c8      	bne.n	80057a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d068      	beq.n	800591a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005850:	e049      	b.n	80058e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d045      	beq.n	80058e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fe fb3b 	bl	8003ed4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_IsErrorOccurred+0x54>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d13a      	bne.n	80058e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005882:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005892:	d121      	bne.n	80058d8 <I2C_IsErrorOccurred+0xbc>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589a:	d01d      	beq.n	80058d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d01a      	beq.n	80058d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058b2:	f7fe fb0f 	bl	8003ed4 <HAL_GetTick>
 80058b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058b8:	e00e      	b.n	80058d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058ba:	f7fe fb0b 	bl	8003ed4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b19      	cmp	r3, #25
 80058c6:	d907      	bls.n	80058d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f043 0320 	orr.w	r3, r3, #32
 80058ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80058d6:	e006      	b.n	80058e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d1e9      	bne.n	80058ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d003      	beq.n	80058fc <I2C_IsErrorOccurred+0xe0>
 80058f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0aa      	beq.n	8005852 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2220      	movs	r2, #32
 800590a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800593c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800595e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f043 0302 	orr.w	r3, r3, #2
 8005976:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01c      	beq.n	80059ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fe3b 	bl	800560c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <I2C_IsErrorOccurred+0x1bc>)
 80059a2:	400b      	ands	r3, r1
 80059a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80059ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	@ 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	fe00e800 	.word	0xfe00e800

080059dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	817b      	strh	r3, [r7, #10]
 80059ea:	4613      	mov	r3, r2
 80059ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059f4:	7a7b      	ldrb	r3, [r7, #9]
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	0d5b      	lsrs	r3, r3, #21
 8005a16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <I2C_TransferConfig+0x60>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	ea02 0103 	and.w	r1, r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	03ff63ff 	.word	0x03ff63ff

08005a40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d138      	bne.n	8005ac8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e032      	b.n	8005aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	@ 0x24
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d139      	bne.n	8005b60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e033      	b.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	@ 0x24
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e0bf      	b.n	8005d02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d106      	bne.n	8005b9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fb f8fa 	bl	8000d90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005bb2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6899      	ldr	r1, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4b4a      	ldr	r3, [pc, #296]	@ (8005d0c <HAL_LTDC_Init+0x19c>)
 8005be4:	400b      	ands	r3, r1
 8005be6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	041b      	lsls	r3, r3, #16
 8005bee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6899      	ldr	r1, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68d9      	ldr	r1, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <HAL_LTDC_Init+0x19c>)
 8005c12:	400b      	ands	r3, r1
 8005c14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	041b      	lsls	r3, r3, #16
 8005c1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68d9      	ldr	r1, [r3, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1a      	ldr	r2, [r3, #32]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6919      	ldr	r1, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b33      	ldr	r3, [pc, #204]	@ (8005d0c <HAL_LTDC_Init+0x19c>)
 8005c40:	400b      	ands	r3, r1
 8005c42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6919      	ldr	r1, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6959      	ldr	r1, [r3, #20]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b27      	ldr	r3, [pc, #156]	@ (8005d0c <HAL_LTDC_Init+0x19c>)
 8005c6e:	400b      	ands	r3, r1
 8005c70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	041b      	lsls	r3, r3, #16
 8005c78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6959      	ldr	r1, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ca0:	041b      	lsls	r3, r3, #16
 8005ca2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0206 	orr.w	r2, r2, #6
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	f000f800 	.word	0xf000f800

08005d10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d023      	beq.n	8005d7a <HAL_LTDC_IRQHandler+0x6a>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01e      	beq.n	8005d7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0204 	bic.w	r2, r2, #4
 8005d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2204      	movs	r2, #4
 8005d52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2204      	movs	r2, #4
 8005d68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f86f 	bl	8005e58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d023      	beq.n	8005dcc <HAL_LTDC_IRQHandler+0xbc>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01e      	beq.n	8005dcc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0202 	bic.w	r2, r2, #2
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2202      	movs	r2, #2
 8005da4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005dac:	f043 0202 	orr.w	r2, r3, #2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f846 	bl	8005e58 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01b      	beq.n	8005e0e <HAL_LTDC_IRQHandler+0xfe>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d016      	beq.n	8005e0e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2201      	movs	r2, #1
 8005df6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f00d fa45 	bl	8013298 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01b      	beq.n	8005e50 <HAL_LTDC_IRQHandler+0x140>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0208 	bic.w	r2, r2, #8
 8005e30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2208      	movs	r2, #8
 8005e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f80e 	bl	8005e6c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_LTDC_ConfigLayer+0x1a>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e02c      	b.n	8005ef4 <HAL_LTDC_ConfigLayer+0x74>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2134      	movs	r1, #52	@ 0x34
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	461d      	mov	r5, r3
 8005ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ecc:	682b      	ldr	r3, [r5, #0]
 8005ece:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 f849 	bl	8005f6c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bdb0      	pop	{r4, r5, r7, pc}

08005efc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_LTDC_ProgramLineEvent+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e023      	b.n	8005f5c <HAL_LTDC_ProgramLineEvent+0x60>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005f34:	4a0c      	ldr	r2, [pc, #48]	@ (8005f68 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	50001000 	.word	0x50001000

08005f6c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b089      	sub	sp, #36	@ 0x24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f88:	4413      	add	r3, r2
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	01db      	lsls	r3, r3, #7
 8005f98:	4413      	add	r3, r2
 8005f9a:	3384      	adds	r3, #132	@ 0x84
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	01d2      	lsls	r2, r2, #7
 8005fa8:	440a      	add	r2, r1
 8005faa:	3284      	adds	r2, #132	@ 0x84
 8005fac:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005fb0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	0c1b      	lsrs	r3, r3, #16
 8005fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fc2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fc4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	01db      	lsls	r3, r3, #7
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3384      	adds	r3, #132	@ 0x84
 8005fd4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fda:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fea:	4413      	add	r3, r2
 8005fec:	041b      	lsls	r3, r3, #16
 8005fee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	01db      	lsls	r3, r3, #7
 8005ffa:	4413      	add	r3, r2
 8005ffc:	3384      	adds	r3, #132	@ 0x84
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	4611      	mov	r1, r2
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	01d2      	lsls	r2, r2, #7
 800600a:	440a      	add	r2, r1
 800600c:	3284      	adds	r2, #132	@ 0x84
 800600e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006012:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006022:	4413      	add	r3, r2
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	440b      	add	r3, r1
 8006032:	3384      	adds	r3, #132	@ 0x84
 8006034:	4619      	mov	r1, r3
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4313      	orrs	r3, r2
 800603a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4413      	add	r3, r2
 8006048:	3384      	adds	r3, #132	@ 0x84
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	4611      	mov	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	01d2      	lsls	r2, r2, #7
 8006056:	440a      	add	r2, r1
 8006058:	3284      	adds	r2, #132	@ 0x84
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	01db      	lsls	r3, r3, #7
 800606a:	4413      	add	r3, r2
 800606c:	3384      	adds	r3, #132	@ 0x84
 800606e:	461a      	mov	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	061b      	lsls	r3, r3, #24
 8006090:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	4413      	add	r3, r2
 800609e:	3384      	adds	r3, #132	@ 0x84
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	01db      	lsls	r3, r3, #7
 80060ac:	4413      	add	r3, r2
 80060ae:	3384      	adds	r3, #132	@ 0x84
 80060b0:	461a      	mov	r2, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060bc:	461a      	mov	r2, r3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4619      	mov	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	01db      	lsls	r3, r3, #7
 80060d0:	440b      	add	r3, r1
 80060d2:	3384      	adds	r3, #132	@ 0x84
 80060d4:	4619      	mov	r1, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	01db      	lsls	r3, r3, #7
 80060e6:	4413      	add	r3, r2
 80060e8:	3384      	adds	r3, #132	@ 0x84
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	4611      	mov	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	01d2      	lsls	r2, r2, #7
 80060f6:	440a      	add	r2, r1
 80060f8:	3284      	adds	r2, #132	@ 0x84
 80060fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	01db      	lsls	r3, r3, #7
 800610a:	4413      	add	r3, r2
 800610c:	3384      	adds	r3, #132	@ 0x84
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	01db      	lsls	r3, r3, #7
 8006120:	4413      	add	r3, r2
 8006122:	3384      	adds	r3, #132	@ 0x84
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	01db      	lsls	r3, r3, #7
 8006130:	440b      	add	r3, r1
 8006132:	3384      	adds	r3, #132	@ 0x84
 8006134:	4619      	mov	r1, r3
 8006136:	4b58      	ldr	r3, [pc, #352]	@ (8006298 <LTDC_SetConfig+0x32c>)
 8006138:	4013      	ands	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	6809      	ldr	r1, [r1, #0]
 8006148:	4608      	mov	r0, r1
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	01c9      	lsls	r1, r1, #7
 800614e:	4401      	add	r1, r0
 8006150:	3184      	adds	r1, #132	@ 0x84
 8006152:	4313      	orrs	r3, r2
 8006154:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	01db      	lsls	r3, r3, #7
 8006160:	4413      	add	r3, r2
 8006162:	3384      	adds	r3, #132	@ 0x84
 8006164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	4413      	add	r3, r2
 8006172:	3384      	adds	r3, #132	@ 0x84
 8006174:	461a      	mov	r2, r3
 8006176:	2300      	movs	r3, #0
 8006178:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	01db      	lsls	r3, r3, #7
 8006184:	4413      	add	r3, r2
 8006186:	3384      	adds	r3, #132	@ 0x84
 8006188:	461a      	mov	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006198:	2304      	movs	r3, #4
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e01b      	b.n	80061d6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d102      	bne.n	80061ac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80061a6:	2303      	movs	r3, #3
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	e014      	b.n	80061d6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d00b      	beq.n	80061cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d007      	beq.n	80061cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d003      	beq.n	80061cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061c8:	2b07      	cmp	r3, #7
 80061ca:	d102      	bne.n	80061d2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80061cc:	2302      	movs	r3, #2
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e001      	b.n	80061d6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	01db      	lsls	r3, r3, #7
 80061e0:	4413      	add	r3, r2
 80061e2:	3384      	adds	r3, #132	@ 0x84
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	4611      	mov	r1, r2
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	01d2      	lsls	r2, r2, #7
 80061f0:	440a      	add	r2, r1
 80061f2:	3284      	adds	r2, #132	@ 0x84
 80061f4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80061f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	6809      	ldr	r1, [r1, #0]
 800621c:	4608      	mov	r0, r1
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	01c9      	lsls	r1, r1, #7
 8006222:	4401      	add	r1, r0
 8006224:	3184      	adds	r1, #132	@ 0x84
 8006226:	4313      	orrs	r3, r2
 8006228:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	01db      	lsls	r3, r3, #7
 8006234:	4413      	add	r3, r2
 8006236:	3384      	adds	r3, #132	@ 0x84
 8006238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	440b      	add	r3, r1
 8006246:	3384      	adds	r3, #132	@ 0x84
 8006248:	4619      	mov	r1, r3
 800624a:	4b14      	ldr	r3, [pc, #80]	@ (800629c <LTDC_SetConfig+0x330>)
 800624c:	4013      	ands	r3, r2
 800624e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	01db      	lsls	r3, r3, #7
 800625a:	4413      	add	r3, r2
 800625c:	3384      	adds	r3, #132	@ 0x84
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006264:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	01db      	lsls	r3, r3, #7
 8006270:	4413      	add	r3, r2
 8006272:	3384      	adds	r3, #132	@ 0x84
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	4611      	mov	r1, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	01d2      	lsls	r2, r2, #7
 8006280:	440a      	add	r2, r1
 8006282:	3284      	adds	r2, #132	@ 0x84
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6013      	str	r3, [r2, #0]
}
 800628a:	bf00      	nop
 800628c:	3724      	adds	r7, #36	@ 0x24
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	fffff8f8 	.word	0xfffff8f8
 800629c:	fffff800 	.word	0xfffff800

080062a0 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 80062a8:	f7fd fe14 	bl	8003ed4 <HAL_GetTick>
 80062ac:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e04a      	b.n	800634e <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d008      	beq.n	80062d6 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2280      	movs	r2, #128	@ 0x80
 80062c8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e03b      	b.n	800634e <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80062e4:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80062f6:	e016      	b.n	8006326 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80062f8:	f7fd fdec 	bl	8003ed4 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b05      	cmp	r3, #5
 8006304:	d90f      	bls.n	8006326 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800630a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2203      	movs	r2, #3
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e013      	b.n	800634e <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e1      	bne.n	80062f8 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	221f      	movs	r2, #31
 800633a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e017      	b.n	8006398 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d004      	beq.n	800637e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2280      	movs	r2, #128	@ 0x80
 8006378:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e00c      	b.n	8006398 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2204      	movs	r2, #4
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 0201 	bic.w	r2, r2, #1
 8006394:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af02      	add	r7, sp, #8
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80063b0:	f7fd fd90 	bl	8003ed4 <HAL_GetTick>
 80063b4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	e0a5      	b.n	800650e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f040 809e 	bne.w	800650e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa fdaa 	bl	8000f2c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80063d8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fd44 	bl	8006e6a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006518 <HAL_OSPI_Init+0x174>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	68d1      	ldr	r1, [r2, #12]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6912      	ldr	r2, [r2, #16]
 80063f4:	3a01      	subs	r2, #1
 80063f6:	0412      	lsls	r2, r2, #16
 80063f8:	4311      	orrs	r1, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6952      	ldr	r2, [r2, #20]
 80063fe:	3a01      	subs	r2, #1
 8006400:	0212      	lsls	r2, r2, #8
 8006402:	4311      	orrs	r1, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006408:	4311      	orrs	r1, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	69d2      	ldr	r2, [r2, #28]
 800640e:	4311      	orrs	r1, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	430b      	orrs	r3, r1
 8006416:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006448:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	3b01      	subs	r3, #1
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2200      	movs	r2, #0
 800646e:	2120      	movs	r1, #32
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fd45 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d146      	bne.n	800650e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	1e5a      	subs	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80064b6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d107      	bne.n	80064f6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0202 	orr.w	r2, r2, #2
 80064f4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064fe:	d103      	bne.n	8006508 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	651a      	str	r2, [r3, #80]	@ 0x50
 8006506:	e002      	b.n	800650e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	f8e0f8f4 	.word	0xf8e0f8f4

0800651c <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
 8006532:	e015      	b.n	8006560 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689a      	ldr	r2, [r3, #8]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0202 	bic.w	r2, r2, #2
 8006552:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7fa fd39 	bl	8000fcc <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3350      	adds	r3, #80	@ 0x50
 800657a:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006590:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0304 	and.w	r3, r3, #4
 8006598:	2b00      	cmp	r3, #0
 800659a:	d03a      	beq.n	8006612 <HAL_OSPI_IRQHandler+0xa6>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d035      	beq.n	8006612 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b18      	cmp	r3, #24
 80065aa:	d10f      	bne.n	80065cc <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c4:	1e5a      	subs	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	649a      	str	r2, [r3, #72]	@ 0x48
 80065ca:	e012      	b.n	80065f2 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b28      	cmp	r3, #40	@ 0x28
 80065d0:	d10f      	bne.n	80065f2 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ec:	1e5a      	subs	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d107      	bne.n	800660a <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006608:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb7c 	bl	8006d08 <HAL_OSPI_FifoThresholdCallback>
 8006610:	e0e7      	b.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d067      	beq.n	80066ec <HAL_OSPI_IRQHandler+0x180>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d062      	beq.n	80066ec <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b28      	cmp	r3, #40	@ 0x28
 800662a:	d131      	bne.n	8006690 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006630:	2b00      	cmp	r3, #0
 8006632:	d015      	beq.n	8006660 <HAL_OSPI_IRQHandler+0xf4>
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800665e:	e0bd      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 80b9 	bne.w	80067dc <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2202      	movs	r2, #2
 8006670:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8006680:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb51 	bl	8006d30 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800668e:	e0a5      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2202      	movs	r2, #2
 8006696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 80066a6:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b18      	cmp	r3, #24
 80066b2:	d103      	bne.n	80066bc <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fb45 	bl	8006d44 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066ba:	e08f      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d103      	bne.n	80066ca <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fb2a 	bl	8006d1c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066c8:	e088      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d0:	f040 8084 	bne.w	80067dc <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fb09 	bl	8006cf4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066e2:	e07b      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fafb 	bl	8006ce0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80066ea:	e077      	b.n	80067dc <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01e      	beq.n	8006734 <HAL_OSPI_IRQHandler+0x1c8>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2208      	movs	r2, #8
 8006706:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8006724:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fb13 	bl	8006d58 <HAL_OSPI_StatusMatchCallback>
 8006732:	e056      	b.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d03c      	beq.n	80067b8 <HAL_OSPI_IRQHandler+0x24c>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d037      	beq.n	80067b8 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800675e:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0204 	bic.w	r2, r2, #4
 8006782:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006788:	4a18      	ldr	r2, [pc, #96]	@ (80067ec <HAL_OSPI_IRQHandler+0x280>)
 800678a:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fde0 	bl	8006356 <HAL_MDMA_Abort_IT>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d021      	beq.n	80067e0 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa9c 	bl	8006ce0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067a8:	e01a      	b.n	80067e0 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 fa95 	bl	8006ce0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067b6:	e013      	b.n	80067e0 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2210      	movs	r2, #16
 80067d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fac9 	bl	8006d6c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80067da:	e002      	b.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80067e0:	bf00      	nop
}
 80067e2:	bf00      	nop
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	08006e89 	.word	0x08006e89

080067f0 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	@ 0x28
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80067fc:	f7fd fb6a 	bl	8003ed4 <HAL_GetTick>
 8006800:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680c:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d104      	bne.n	800681e <HAL_OSPI_Command+0x2e>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800681c:	d115      	bne.n	800684a <HAL_OSPI_Command+0x5a>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b14      	cmp	r3, #20
 8006822:	d107      	bne.n	8006834 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d00e      	beq.n	800684a <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b03      	cmp	r3, #3
 8006832:	d00a      	beq.n	800684a <HAL_OSPI_Command+0x5a>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b24      	cmp	r3, #36	@ 0x24
 8006838:	d15b      	bne.n	80068f2 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d003      	beq.n	800684a <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8006846:	2b03      	cmp	r3, #3
 8006848:	d153      	bne.n	80068f2 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2200      	movs	r2, #0
 8006852:	2120      	movs	r1, #32
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fb53 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800685e:	7ffb      	ldrb	r3, [r7, #31]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d14c      	bne.n	80068fe <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fb7f 	bl	8006f70 <OSPI_ConfigCmd>
 8006872:	4603      	mov	r3, r0
 8006874:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d140      	bne.n	80068fe <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10e      	bne.n	80068a2 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	2201      	movs	r2, #1
 800688c:	2102      	movs	r1, #2
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fb36 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2202      	movs	r2, #2
 800689e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80068a0:	e02d      	b.n	80068fe <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2204      	movs	r2, #4
 80068ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80068b0:	e025      	b.n	80068fe <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d10b      	bne.n	80068d2 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	2b24      	cmp	r3, #36	@ 0x24
 80068c0:	d103      	bne.n	80068ca <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2204      	movs	r2, #4
 80068c6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80068c8:	e019      	b.n	80068fe <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2214      	movs	r2, #20
 80068ce:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80068d0:	e015      	b.n	80068fe <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d111      	bne.n	80068fe <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068de:	2b14      	cmp	r3, #20
 80068e0:	d103      	bne.n	80068ea <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2204      	movs	r2, #4
 80068e6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80068e8:	e009      	b.n	80068fe <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2224      	movs	r2, #36	@ 0x24
 80068ee:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80068f0:	e005      	b.n	80068fe <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2210      	movs	r2, #16
 80068fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80068fc:	e000      	b.n	8006900 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 80068fe:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006900:	7ffb      	ldrb	r3, [r7, #31]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08a      	sub	sp, #40	@ 0x28
 800690e:	af02      	add	r7, sp, #8
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006916:	f7fd fadd 	bl	8003ed4 <HAL_GetTick>
 800691a:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3350      	adds	r3, #80	@ 0x50
 8006922:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d105      	bne.n	8006936 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2208      	movs	r2, #8
 8006932:	655a      	str	r2, [r3, #84]	@ 0x54
 8006934:	e057      	b.n	80069e6 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693a:	2b04      	cmp	r3, #4
 800693c:	d14e      	bne.n	80069dc <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006966:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2201      	movs	r2, #1
 8006970:	2104      	movs	r1, #4
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fac4 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800697c:	7ffb      	ldrb	r3, [r7, #31]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d113      	bne.n	80069aa <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699a:	1e5a      	subs	r2, r3, #1
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1df      	bne.n	8006968 <HAL_OSPI_Transmit+0x5e>
 80069a8:	e000      	b.n	80069ac <HAL_OSPI_Transmit+0xa2>
          break;
 80069aa:	bf00      	nop

      if (status == HAL_OK)
 80069ac:	7ffb      	ldrb	r3, [r7, #31]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d119      	bne.n	80069e6 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2201      	movs	r2, #1
 80069ba:	2102      	movs	r1, #2
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fa9f 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80069c6:	7ffb      	ldrb	r3, [r7, #31]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10c      	bne.n	80069e6 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2202      	movs	r2, #2
 80069d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2202      	movs	r2, #2
 80069d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80069da:	e004      	b.n	80069e6 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2210      	movs	r2, #16
 80069e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 80069e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08c      	sub	sp, #48	@ 0x30
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80069fc:	f7fd fa6a 	bl	8003ed4 <HAL_GetTick>
 8006a00:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3350      	adds	r3, #80	@ 0x50
 8006a08:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a10:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d106      	bne.n	8006a30 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a2e:	e07c      	b.n	8006b2a <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d172      	bne.n	8006b1e <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a6e:	d104      	bne.n	8006a7a <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	649a      	str	r2, [r3, #72]	@ 0x48
 8006a78:	e011      	b.n	8006a9e <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006a82:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	649a      	str	r2, [r3, #72]	@ 0x48
 8006a92:	e004      	b.n	8006a9e <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	2106      	movs	r1, #6
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fa29 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d114      	bne.n	8006ae6 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ad6:	1e5a      	subs	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1dc      	bne.n	8006a9e <HAL_OSPI_Receive+0xae>
 8006ae4:	e000      	b.n	8006ae8 <HAL_OSPI_Receive+0xf8>
          break;
 8006ae6:	bf00      	nop

      if (status == HAL_OK)
 8006ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11c      	bne.n	8006b2a <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2201      	movs	r2, #1
 8006af8:	2102      	movs	r1, #2
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fa00 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8006b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10d      	bne.n	8006b2a <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2202      	movs	r2, #2
 8006b14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b1c:	e005      	b.n	8006b2a <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2210      	movs	r2, #16
 8006b28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8006b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3728      	adds	r7, #40	@ 0x28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_OSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b08a      	sub	sp, #40	@ 0x28
 8006b3a:	af02      	add	r7, sp, #8
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b42:	f7fd f9c7 	bl	8003ed4 <HAL_GetTick>
 8006b46:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4e:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8006b58:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d164      	bne.n	8006c2c <HAL_OSPI_AutoPolling+0xf6>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b6a:	d15f      	bne.n	8006c2c <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2200      	movs	r2, #0
 8006b74:	2120      	movs	r1, #32
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 f9c2 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d158      	bne.n	8006c38 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	6852      	ldr	r2, [r2, #4]
 8006b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	6912      	ldr	r2, [r2, #16]
 8006ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6899      	ldr	r1, [r3, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006bc8:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bd2:	d104      	bne.n	8006bde <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	649a      	str	r2, [r3, #72]	@ 0x48
 8006bdc:	e011      	b.n	8006c02 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006be6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	649a      	str	r2, [r3, #72]	@ 0x48
 8006bf6:	e004      	b.n	8006c02 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	2108      	movs	r1, #8
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f977 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8006c16:	7ffb      	ldrb	r3, [r7, #31]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2202      	movs	r2, #2
 8006c28:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006c2a:	e005      	b.n	8006c38 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2210      	movs	r2, #16
 8006c34:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c36:	e000      	b.n	8006c3a <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8006c38:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c4e:	f7fd f941 	bl	8003ed4 <HAL_GetTick>
 8006c52:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d134      	bne.n	8006cc6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2120      	movs	r1, #32
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f949 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d12b      	bne.n	8006cd0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2288      	movs	r2, #136	@ 0x88
 8006c7c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d111      	bne.n	8006caa <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	6852      	ldr	r2, [r2, #4]
 8006c8e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006ca8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <HAL_OSPI_MemoryMapped+0x98>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e004      	b.n	8006cd0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	cffffff7 	.word	0xcffffff7

08006ce0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006d8c:	f7fd f8a2 	bl	8003ed4 <HAL_GetTick>
 8006d90:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d96:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <HAL_OSPI_Abort+0x2c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d052      	beq.n	8006e52 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d014      	beq.n	8006de4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0204 	bic.w	r2, r2, #4
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff fa66 	bl	80062a0 <HAL_MDMA_Abort>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2204      	movs	r2, #4
 8006de2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d02b      	beq.n	8006e4a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0202 	orr.w	r2, r2, #2
 8006e00:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f876 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d11f      	bne.n	8006e5e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2202      	movs	r2, #2
 8006e24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2120      	movs	r1, #32
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f864 	bl	8006f00 <OSPI_WaitFlagStateUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10d      	bne.n	8006e5e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e48:	e009      	b.n	8006e5e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e50:	e005      	b.n	8006e5e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2210      	movs	r2, #16
 8006e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e5c:	e000      	b.n	8006e60 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e5e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea4:	d122      	bne.n	8006eec <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d014      	beq.n	8006ede <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006eca:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f042 0202 	orr.w	r2, r2, #2
 8006eda:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8006edc:	e00c      	b.n	8006ef8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ff05 	bl	8006cf4 <HAL_OSPI_AbortCpltCallback>
}
 8006eea:	e005      	b.n	8006ef8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fef4 	bl	8006ce0 <HAL_OSPI_ErrorCallback>
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006f10:	e01a      	b.n	8006f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d016      	beq.n	8006f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fc ffdb 	bl	8003ed4 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10b      	bne.n	8006f48 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f36:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3c:	f043 0201 	orr.w	r2, r3, #1
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e00e      	b.n	8006f66 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf14      	ite	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d1d6      	bne.n	8006f12 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b089      	sub	sp, #36	@ 0x24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d114      	bne.n	8006fde <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006fbc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006fc6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006fd0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e02c      	b.n	8007038 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d114      	bne.n	8007010 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006fee:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006ff8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007002:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	e013      	b.n	8007038 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007018:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8007022:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800702c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007040:	431a      	orrs	r2, r3
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	2b00      	cmp	r3, #0
 800704c:	d012      	beq.n	8007074 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007066:	4319      	orrs	r1, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	430b      	orrs	r3, r1
 800706e:	431a      	orrs	r2, r3
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f023 021f 	bic.w	r2, r3, #31
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007080:	431a      	orrs	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d009      	beq.n	80070a2 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d105      	bne.n	80070a2 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3a01      	subs	r2, #1
 80070a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8095 	beq.w	80071d6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d053      	beq.n	800715c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01e      	beq.n	80070fa <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4b64      	ldr	r3, [pc, #400]	@ (8007254 <OSPI_ConfigCmd+0x2e4>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	68d1      	ldr	r1, [r2, #12]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	6952      	ldr	r2, [r2, #20]
 80070cc:	4311      	orrs	r1, r2
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	6912      	ldr	r2, [r2, #16]
 80070d2:	4311      	orrs	r1, r2
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	69d2      	ldr	r2, [r2, #28]
 80070d8:	4311      	orrs	r1, r2
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070de:	4311      	orrs	r1, r2
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	6a12      	ldr	r2, [r2, #32]
 80070e4:	4311      	orrs	r1, r2
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80070ea:	4311      	orrs	r1, r2
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80070f0:	430a      	orrs	r2, r1
 80070f2:	431a      	orrs	r2, r3
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	e026      	b.n	8007148 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b56      	ldr	r3, [pc, #344]	@ (8007258 <OSPI_ConfigCmd+0x2e8>)
 8007100:	4013      	ands	r3, r2
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	68d1      	ldr	r1, [r2, #12]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	6952      	ldr	r2, [r2, #20]
 800710a:	4311      	orrs	r1, r2
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	6912      	ldr	r2, [r2, #16]
 8007110:	4311      	orrs	r1, r2
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	69d2      	ldr	r2, [r2, #28]
 8007116:	4311      	orrs	r1, r2
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800711c:	4311      	orrs	r1, r2
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	6a12      	ldr	r2, [r2, #32]
 8007122:	430a      	orrs	r2, r1
 8007124:	431a      	orrs	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007132:	d109      	bne.n	8007148 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8007138:	2b08      	cmp	r3, #8
 800713a:	d105      	bne.n	8007148 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	6992      	ldr	r2, [r2, #24]
 8007158:	649a      	str	r2, [r3, #72]	@ 0x48
 800715a:	e074      	b.n	8007246 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007160:	2b00      	cmp	r3, #0
 8007162:	d015      	beq.n	8007190 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b3c      	ldr	r3, [pc, #240]	@ (800725c <OSPI_ConfigCmd+0x2ec>)
 800716a:	4013      	ands	r3, r2
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	68d1      	ldr	r1, [r2, #12]
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	6952      	ldr	r2, [r2, #20]
 8007174:	4311      	orrs	r1, r2
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	6912      	ldr	r2, [r2, #16]
 800717a:	4311      	orrs	r1, r2
 800717c:	683a      	ldr	r2, [r7, #0]
 800717e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007180:	4311      	orrs	r1, r2
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007186:	430a      	orrs	r2, r1
 8007188:	431a      	orrs	r2, r3
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	e01d      	b.n	80071cc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68d9      	ldr	r1, [r3, #12]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	4319      	orrs	r1, r3
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	430b      	orrs	r3, r1
 80071a8:	431a      	orrs	r2, r3
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b6:	d109      	bne.n	80071cc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d105      	bne.n	80071cc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e037      	b.n	8007246 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d02e      	beq.n	800723c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d015      	beq.n	8007212 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007260 <OSPI_ConfigCmd+0x2f0>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	683a      	ldr	r2, [r7, #0]
 80071f0:	69d1      	ldr	r1, [r2, #28]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071f6:	4311      	orrs	r1, r2
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	6a12      	ldr	r2, [r2, #32]
 80071fc:	4311      	orrs	r1, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007202:	4311      	orrs	r1, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007208:	430a      	orrs	r2, r1
 800720a:	431a      	orrs	r2, r3
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e00e      	b.n	8007230 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	69d9      	ldr	r1, [r3, #28]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	4319      	orrs	r1, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	430b      	orrs	r3, r1
 800722a:	431a      	orrs	r2, r3
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	6992      	ldr	r2, [r2, #24]
 8007238:	649a      	str	r2, [r3, #72]	@ 0x48
 800723a:	e004      	b.n	8007246 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2208      	movs	r2, #8
 8007244:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8007246:	7ffb      	ldrb	r3, [r7, #31]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3724      	adds	r7, #36	@ 0x24
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	f0ffc0c0 	.word	0xf0ffc0c0
 8007258:	ffffc0c0 	.word	0xffffc0c0
 800725c:	f0ffffc0 	.word	0xf0ffffc0
 8007260:	f0ffc0ff 	.word	0xf0ffc0ff

08007264 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800726c:	4b29      	ldr	r3, [pc, #164]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	2b06      	cmp	r3, #6
 8007276:	d00a      	beq.n	800728e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007278:	4b26      	ldr	r3, [pc, #152]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d001      	beq.n	800728a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e040      	b.n	800730c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	e03e      	b.n	800730c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800728e:	4b21      	ldr	r3, [pc, #132]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007296:	491f      	ldr	r1, [pc, #124]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4313      	orrs	r3, r2
 800729c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800729e:	f7fc fe19 	bl	8003ed4 <HAL_GetTick>
 80072a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072a4:	e009      	b.n	80072ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072a6:	f7fc fe15 	bl	8003ed4 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072b4:	d901      	bls.n	80072ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e028      	b.n	800730c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80072ba:	4b16      	ldr	r3, [pc, #88]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c6:	d1ee      	bne.n	80072a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b1e      	cmp	r3, #30
 80072cc:	d008      	beq.n	80072e0 <HAL_PWREx_ConfigSupply+0x7c>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072d2:	d005      	beq.n	80072e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b1d      	cmp	r3, #29
 80072d8:	d002      	beq.n	80072e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80072de:	d114      	bne.n	800730a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80072e0:	f7fc fdf8 	bl	8003ed4 <HAL_GetTick>
 80072e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80072e6:	e009      	b.n	80072fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80072e8:	f7fc fdf4 	bl	8003ed4 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072f6:	d901      	bls.n	80072fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80072fc:	4b05      	ldr	r3, [pc, #20]	@ (8007314 <HAL_PWREx_ConfigSupply+0xb0>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007308:	d1ee      	bne.n	80072e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	58024800 	.word	0x58024800

08007318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08c      	sub	sp, #48	@ 0x30
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f000 bc1f 	b.w	8007b6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80b3 	beq.w	80074a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800733a:	4b95      	ldr	r3, [pc, #596]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007344:	4b92      	ldr	r3, [pc, #584]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007348:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2b10      	cmp	r3, #16
 800734e:	d007      	beq.n	8007360 <HAL_RCC_OscConfig+0x48>
 8007350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007352:	2b18      	cmp	r3, #24
 8007354:	d112      	bne.n	800737c <HAL_RCC_OscConfig+0x64>
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d10d      	bne.n	800737c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007360:	4b8b      	ldr	r3, [pc, #556]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8098 	beq.w	800749e <HAL_RCC_OscConfig+0x186>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	f040 8093 	bne.w	800749e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e3f6      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007384:	d106      	bne.n	8007394 <HAL_RCC_OscConfig+0x7c>
 8007386:	4b82      	ldr	r3, [pc, #520]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a81      	ldr	r2, [pc, #516]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800738c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	e058      	b.n	8007446 <HAL_RCC_OscConfig+0x12e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d112      	bne.n	80073c2 <HAL_RCC_OscConfig+0xaa>
 800739c:	4b7c      	ldr	r3, [pc, #496]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7b      	ldr	r2, [pc, #492]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	4b79      	ldr	r3, [pc, #484]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a78      	ldr	r2, [pc, #480]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b76      	ldr	r3, [pc, #472]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a75      	ldr	r2, [pc, #468]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	e041      	b.n	8007446 <HAL_RCC_OscConfig+0x12e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073ca:	d112      	bne.n	80073f2 <HAL_RCC_OscConfig+0xda>
 80073cc:	4b70      	ldr	r3, [pc, #448]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a6f      	ldr	r2, [pc, #444]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4b6d      	ldr	r3, [pc, #436]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a6c      	ldr	r2, [pc, #432]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	4b6a      	ldr	r3, [pc, #424]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a69      	ldr	r2, [pc, #420]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e029      	b.n	8007446 <HAL_RCC_OscConfig+0x12e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80073fa:	d112      	bne.n	8007422 <HAL_RCC_OscConfig+0x10a>
 80073fc:	4b64      	ldr	r3, [pc, #400]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a63      	ldr	r2, [pc, #396]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	4b61      	ldr	r3, [pc, #388]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a60      	ldr	r2, [pc, #384]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800740e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	4b5e      	ldr	r3, [pc, #376]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a5d      	ldr	r2, [pc, #372]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800741a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	e011      	b.n	8007446 <HAL_RCC_OscConfig+0x12e>
 8007422:	4b5b      	ldr	r3, [pc, #364]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a5a      	ldr	r2, [pc, #360]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	4b58      	ldr	r3, [pc, #352]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a57      	ldr	r2, [pc, #348]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4b55      	ldr	r3, [pc, #340]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a54      	ldr	r2, [pc, #336]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007440:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007444:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d013      	beq.n	8007476 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744e:	f7fc fd41 	bl	8003ed4 <HAL_GetTick>
 8007452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007454:	e008      	b.n	8007468 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007456:	f7fc fd3d 	bl	8003ed4 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b64      	cmp	r3, #100	@ 0x64
 8007462:	d901      	bls.n	8007468 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e380      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007468:	4b49      	ldr	r3, [pc, #292]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0f0      	beq.n	8007456 <HAL_RCC_OscConfig+0x13e>
 8007474:	e014      	b.n	80074a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007476:	f7fc fd2d 	bl	8003ed4 <HAL_GetTick>
 800747a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800747c:	e008      	b.n	8007490 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747e:	f7fc fd29 	bl	8003ed4 <HAL_GetTick>
 8007482:	4602      	mov	r2, r0
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	2b64      	cmp	r3, #100	@ 0x64
 800748a:	d901      	bls.n	8007490 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e36c      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007490:	4b3f      	ldr	r3, [pc, #252]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f0      	bne.n	800747e <HAL_RCC_OscConfig+0x166>
 800749c:	e000      	b.n	80074a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800749e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 808c 	beq.w	80075c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074ae:	4b38      	ldr	r3, [pc, #224]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074b8:	4b35      	ldr	r3, [pc, #212]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <HAL_RCC_OscConfig+0x1bc>
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b18      	cmp	r3, #24
 80074c8:	d137      	bne.n	800753a <HAL_RCC_OscConfig+0x222>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0303 	and.w	r3, r3, #3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d132      	bne.n	800753a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074d4:	4b2e      	ldr	r3, [pc, #184]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCC_OscConfig+0x1d4>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e33e      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074ec:	4b28      	ldr	r3, [pc, #160]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f023 0219 	bic.w	r2, r3, #25
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	4925      	ldr	r1, [pc, #148]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fe:	f7fc fce9 	bl	8003ed4 <HAL_GetTick>
 8007502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007506:	f7fc fce5 	bl	8003ed4 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e328      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007518:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0f0      	beq.n	8007506 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007524:	4b1a      	ldr	r3, [pc, #104]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	4917      	ldr	r1, [pc, #92]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007538:	e045      	b.n	80075c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d028      	beq.n	8007594 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007542:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 0219 	bic.w	r2, r3, #25
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	4910      	ldr	r1, [pc, #64]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007550:	4313      	orrs	r3, r2
 8007552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007554:	f7fc fcbe 	bl	8003ed4 <HAL_GetTick>
 8007558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800755c:	f7fc fcba 	bl	8003ed4 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e2fd      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757a:	4b05      	ldr	r3, [pc, #20]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	4901      	ldr	r1, [pc, #4]	@ (8007590 <HAL_RCC_OscConfig+0x278>)
 800758a:	4313      	orrs	r3, r2
 800758c:	604b      	str	r3, [r1, #4]
 800758e:	e01a      	b.n	80075c6 <HAL_RCC_OscConfig+0x2ae>
 8007590:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007594:	4b97      	ldr	r3, [pc, #604]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a96      	ldr	r2, [pc, #600]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800759a:	f023 0301 	bic.w	r3, r3, #1
 800759e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a0:	f7fc fc98 	bl	8003ed4 <HAL_GetTick>
 80075a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a8:	f7fc fc94 	bl	8003ed4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e2d7      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80075ba:	4b8e      	ldr	r3, [pc, #568]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1f0      	bne.n	80075a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d06a      	beq.n	80076a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075d2:	4b88      	ldr	r3, [pc, #544]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075dc:	4b85      	ldr	r3, [pc, #532]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80075de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d007      	beq.n	80075f8 <HAL_RCC_OscConfig+0x2e0>
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b18      	cmp	r3, #24
 80075ec:	d11b      	bne.n	8007626 <HAL_RCC_OscConfig+0x30e>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d116      	bne.n	8007626 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075f8:	4b7e      	ldr	r3, [pc, #504]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_OscConfig+0x2f8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	2b80      	cmp	r3, #128	@ 0x80
 800760a:	d001      	beq.n	8007610 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e2ac      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007610:	4b78      	ldr	r3, [pc, #480]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	061b      	lsls	r3, r3, #24
 800761e:	4975      	ldr	r1, [pc, #468]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007624:	e040      	b.n	80076a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d023      	beq.n	8007676 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800762e:	4b71      	ldr	r3, [pc, #452]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a70      	ldr	r2, [pc, #448]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fc fc4b 	bl	8003ed4 <HAL_GetTick>
 800763e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007642:	f7fc fc47 	bl	8003ed4 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e28a      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007654:	4b67      	ldr	r3, [pc, #412]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007660:	4b64      	ldr	r3, [pc, #400]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	4961      	ldr	r1, [pc, #388]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007670:	4313      	orrs	r3, r2
 8007672:	60cb      	str	r3, [r1, #12]
 8007674:	e018      	b.n	80076a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007676:	4b5f      	ldr	r3, [pc, #380]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5e      	ldr	r2, [pc, #376]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800767c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fc fc27 	bl	8003ed4 <HAL_GetTick>
 8007686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800768a:	f7fc fc23 	bl	8003ed4 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e266      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800769c:	4b55      	ldr	r3, [pc, #340]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d036      	beq.n	8007722 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d019      	beq.n	80076f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076bc:	4b4d      	ldr	r3, [pc, #308]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80076be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c0:	4a4c      	ldr	r2, [pc, #304]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c8:	f7fc fc04 	bl	8003ed4 <HAL_GetTick>
 80076cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d0:	f7fc fc00 	bl	8003ed4 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e243      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076e2:	4b44      	ldr	r3, [pc, #272]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80076e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f0      	beq.n	80076d0 <HAL_RCC_OscConfig+0x3b8>
 80076ee:	e018      	b.n	8007722 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f0:	4b40      	ldr	r3, [pc, #256]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80076f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f4:	4a3f      	ldr	r2, [pc, #252]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fc:	f7fc fbea 	bl	8003ed4 <HAL_GetTick>
 8007700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007704:	f7fc fbe6 	bl	8003ed4 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e229      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007716:	4b37      	ldr	r3, [pc, #220]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d036      	beq.n	800779c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d019      	beq.n	800776a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007736:	4b2f      	ldr	r3, [pc, #188]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800773c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007742:	f7fc fbc7 	bl	8003ed4 <HAL_GetTick>
 8007746:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800774a:	f7fc fbc3 	bl	8003ed4 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e206      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800775c:	4b25      	ldr	r3, [pc, #148]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x432>
 8007768:	e018      	b.n	800779c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800776a:	4b22      	ldr	r3, [pc, #136]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a21      	ldr	r2, [pc, #132]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007776:	f7fc fbad 	bl	8003ed4 <HAL_GetTick>
 800777a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800777e:	f7fc fba9 	bl	8003ed4 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e1ec      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007790:	4b18      	ldr	r3, [pc, #96]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f0      	bne.n	800777e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 80af 	beq.w	8007908 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077aa:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <HAL_RCC_OscConfig+0x4e0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a12      	ldr	r2, [pc, #72]	@ (80077f8 <HAL_RCC_OscConfig+0x4e0>)
 80077b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b6:	f7fc fb8d 	bl	8003ed4 <HAL_GetTick>
 80077ba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077bc:	e008      	b.n	80077d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077be:	f7fc fb89 	bl	8003ed4 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b64      	cmp	r3, #100	@ 0x64
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e1cc      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d0:	4b09      	ldr	r3, [pc, #36]	@ (80077f8 <HAL_RCC_OscConfig+0x4e0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f0      	beq.n	80077be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d10b      	bne.n	80077fc <HAL_RCC_OscConfig+0x4e4>
 80077e4:	4b03      	ldr	r3, [pc, #12]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e8:	4a02      	ldr	r2, [pc, #8]	@ (80077f4 <HAL_RCC_OscConfig+0x4dc>)
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f0:	e05b      	b.n	80078aa <HAL_RCC_OscConfig+0x592>
 80077f2:	bf00      	nop
 80077f4:	58024400 	.word	0x58024400
 80077f8:	58024800 	.word	0x58024800
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d112      	bne.n	800782a <HAL_RCC_OscConfig+0x512>
 8007804:	4b9d      	ldr	r3, [pc, #628]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007808:	4a9c      	ldr	r2, [pc, #624]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007810:	4b9a      	ldr	r3, [pc, #616]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007814:	4a99      	ldr	r2, [pc, #612]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800781a:	6713      	str	r3, [r2, #112]	@ 0x70
 800781c:	4b97      	ldr	r3, [pc, #604]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800781e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007820:	4a96      	ldr	r2, [pc, #600]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007822:	f023 0304 	bic.w	r3, r3, #4
 8007826:	6713      	str	r3, [r2, #112]	@ 0x70
 8007828:	e03f      	b.n	80078aa <HAL_RCC_OscConfig+0x592>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d112      	bne.n	8007858 <HAL_RCC_OscConfig+0x540>
 8007832:	4b92      	ldr	r3, [pc, #584]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	4a91      	ldr	r2, [pc, #580]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	6713      	str	r3, [r2, #112]	@ 0x70
 800783e:	4b8f      	ldr	r3, [pc, #572]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007842:	4a8e      	ldr	r2, [pc, #568]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007848:	6713      	str	r3, [r2, #112]	@ 0x70
 800784a:	4b8c      	ldr	r3, [pc, #560]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784e:	4a8b      	ldr	r2, [pc, #556]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6713      	str	r3, [r2, #112]	@ 0x70
 8007856:	e028      	b.n	80078aa <HAL_RCC_OscConfig+0x592>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	2b85      	cmp	r3, #133	@ 0x85
 800785e:	d112      	bne.n	8007886 <HAL_RCC_OscConfig+0x56e>
 8007860:	4b86      	ldr	r3, [pc, #536]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007864:	4a85      	ldr	r2, [pc, #532]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007866:	f043 0304 	orr.w	r3, r3, #4
 800786a:	6713      	str	r3, [r2, #112]	@ 0x70
 800786c:	4b83      	ldr	r3, [pc, #524]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007870:	4a82      	ldr	r2, [pc, #520]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007876:	6713      	str	r3, [r2, #112]	@ 0x70
 8007878:	4b80      	ldr	r3, [pc, #512]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800787c:	4a7f      	ldr	r2, [pc, #508]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	@ 0x70
 8007884:	e011      	b.n	80078aa <HAL_RCC_OscConfig+0x592>
 8007886:	4b7d      	ldr	r3, [pc, #500]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788a:	4a7c      	ldr	r2, [pc, #496]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800788c:	f023 0301 	bic.w	r3, r3, #1
 8007890:	6713      	str	r3, [r2, #112]	@ 0x70
 8007892:	4b7a      	ldr	r3, [pc, #488]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007896:	4a79      	ldr	r2, [pc, #484]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	6713      	str	r3, [r2, #112]	@ 0x70
 800789e:	4b77      	ldr	r3, [pc, #476]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80078a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078a2:	4a76      	ldr	r2, [pc, #472]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80078a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d015      	beq.n	80078de <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b2:	f7fc fb0f 	bl	8003ed4 <HAL_GetTick>
 80078b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078b8:	e00a      	b.n	80078d0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ba:	f7fc fb0b 	bl	8003ed4 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e14c      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078d0:	4b6a      	ldr	r3, [pc, #424]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80078d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0ee      	beq.n	80078ba <HAL_RCC_OscConfig+0x5a2>
 80078dc:	e014      	b.n	8007908 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078de:	f7fc faf9 	bl	8003ed4 <HAL_GetTick>
 80078e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078e4:	e00a      	b.n	80078fc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078e6:	f7fc faf5 	bl	8003ed4 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e136      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078fc:	4b5f      	ldr	r3, [pc, #380]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ee      	bne.n	80078e6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 812b 	beq.w	8007b68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007912:	4b5a      	ldr	r3, [pc, #360]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800791a:	2b18      	cmp	r3, #24
 800791c:	f000 80bb 	beq.w	8007a96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	2b02      	cmp	r3, #2
 8007926:	f040 8095 	bne.w	8007a54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800792a:	4b54      	ldr	r3, [pc, #336]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a53      	ldr	r2, [pc, #332]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007936:	f7fc facd 	bl	8003ed4 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800793e:	f7fc fac9 	bl	8003ed4 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e10c      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007950:	4b4a      	ldr	r3, [pc, #296]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1f0      	bne.n	800793e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800795c:	4b47      	ldr	r3, [pc, #284]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 800795e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007960:	4b47      	ldr	r3, [pc, #284]	@ (8007a80 <HAL_RCC_OscConfig+0x768>)
 8007962:	4013      	ands	r3, r2
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800796c:	0112      	lsls	r2, r2, #4
 800796e:	430a      	orrs	r2, r1
 8007970:	4942      	ldr	r1, [pc, #264]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007972:	4313      	orrs	r3, r2
 8007974:	628b      	str	r3, [r1, #40]	@ 0x28
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	3b01      	subs	r3, #1
 800797c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007984:	3b01      	subs	r3, #1
 8007986:	025b      	lsls	r3, r3, #9
 8007988:	b29b      	uxth	r3, r3
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007990:	3b01      	subs	r3, #1
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799e:	3b01      	subs	r3, #1
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079a6:	4935      	ldr	r1, [pc, #212]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80079ac:	4b33      	ldr	r3, [pc, #204]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	4a32      	ldr	r2, [pc, #200]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80079b8:	4b30      	ldr	r3, [pc, #192]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079bc:	4b31      	ldr	r3, [pc, #196]	@ (8007a84 <HAL_RCC_OscConfig+0x76c>)
 80079be:	4013      	ands	r3, r2
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80079c4:	00d2      	lsls	r2, r2, #3
 80079c6:	492d      	ldr	r1, [pc, #180]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80079cc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	f023 020c 	bic.w	r2, r3, #12
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d8:	4928      	ldr	r1, [pc, #160]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80079de:	4b27      	ldr	r3, [pc, #156]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	f023 0202 	bic.w	r2, r3, #2
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ea:	4924      	ldr	r1, [pc, #144]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079f0:	4b22      	ldr	r3, [pc, #136]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f4:	4a21      	ldr	r2, [pc, #132]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a00:	4a1e      	ldr	r2, [pc, #120]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007a08:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007a14:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	4a18      	ldr	r2, [pc, #96]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a20:	4b16      	ldr	r3, [pc, #88]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a15      	ldr	r2, [pc, #84]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fc fa52 	bl	8003ed4 <HAL_GetTick>
 8007a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a34:	f7fc fa4e 	bl	8003ed4 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e091      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a46:	4b0d      	ldr	r3, [pc, #52]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0f0      	beq.n	8007a34 <HAL_RCC_OscConfig+0x71c>
 8007a52:	e089      	b.n	8007b68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a54:	4b09      	ldr	r3, [pc, #36]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a08      	ldr	r2, [pc, #32]	@ (8007a7c <HAL_RCC_OscConfig+0x764>)
 8007a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a60:	f7fc fa38 	bl	8003ed4 <HAL_GetTick>
 8007a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a66:	e00f      	b.n	8007a88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a68:	f7fc fa34 	bl	8003ed4 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d908      	bls.n	8007a88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e077      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
 8007a7a:	bf00      	nop
 8007a7c:	58024400 	.word	0x58024400
 8007a80:	fffffc0c 	.word	0xfffffc0c
 8007a84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a88:	4b3a      	ldr	r3, [pc, #232]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e9      	bne.n	8007a68 <HAL_RCC_OscConfig+0x750>
 8007a94:	e068      	b.n	8007b68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a96:	4b37      	ldr	r3, [pc, #220]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a9c:	4b35      	ldr	r3, [pc, #212]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d031      	beq.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f003 0203 	and.w	r2, r3, #3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d12a      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	091b      	lsrs	r3, r3, #4
 8007abc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d122      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d11a      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	0a5b      	lsrs	r3, r3, #9
 8007adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d111      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	0c1b      	lsrs	r3, r3, #16
 8007aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d108      	bne.n	8007b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d001      	beq.n	8007b12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e02b      	b.n	8007b6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007b12:	4b18      	ldr	r3, [pc, #96]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b16:	08db      	lsrs	r3, r3, #3
 8007b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d01f      	beq.n	8007b68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007b28:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a11      	ldr	r2, [pc, #68]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b2e:	f023 0301 	bic.w	r3, r3, #1
 8007b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b34:	f7fc f9ce 	bl	8003ed4 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007b3a:	bf00      	nop
 8007b3c:	f7fc f9ca 	bl	8003ed4 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d0f9      	beq.n	8007b3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b48:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <HAL_RCC_OscConfig+0x860>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b54:	00d2      	lsls	r2, r2, #3
 8007b56:	4907      	ldr	r1, [pc, #28]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007b5c:	4b05      	ldr	r3, [pc, #20]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b60:	4a04      	ldr	r2, [pc, #16]	@ (8007b74 <HAL_RCC_OscConfig+0x85c>)
 8007b62:	f043 0301 	orr.w	r3, r3, #1
 8007b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3730      	adds	r7, #48	@ 0x30
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	58024400 	.word	0x58024400
 8007b78:	ffff0007 	.word	0xffff0007

08007b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e19c      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b90:	4b8a      	ldr	r3, [pc, #552]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 030f 	and.w	r3, r3, #15
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d910      	bls.n	8007bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9e:	4b87      	ldr	r3, [pc, #540]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f023 020f 	bic.w	r2, r3, #15
 8007ba6:	4985      	ldr	r1, [pc, #532]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bae:	4b83      	ldr	r3, [pc, #524]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d001      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e184      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	4b7b      	ldr	r3, [pc, #492]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d908      	bls.n	8007bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007bdc:	4b78      	ldr	r3, [pc, #480]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	4975      	ldr	r1, [pc, #468]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d010      	beq.n	8007c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	695a      	ldr	r2, [r3, #20]
 8007bfe:	4b70      	ldr	r3, [pc, #448]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d908      	bls.n	8007c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	496a      	ldr	r1, [pc, #424]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d010      	beq.n	8007c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	4b64      	ldr	r3, [pc, #400]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d908      	bls.n	8007c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c38:	4b61      	ldr	r3, [pc, #388]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	495e      	ldr	r1, [pc, #376]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d010      	beq.n	8007c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	4b59      	ldr	r3, [pc, #356]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d908      	bls.n	8007c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c66:	4b56      	ldr	r3, [pc, #344]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	4953      	ldr	r1, [pc, #332]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d010      	beq.n	8007ca6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	4b4d      	ldr	r3, [pc, #308]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d908      	bls.n	8007ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c94:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f023 020f 	bic.w	r2, r3, #15
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	4947      	ldr	r1, [pc, #284]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d055      	beq.n	8007d5e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007cb2:	4b43      	ldr	r3, [pc, #268]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	4940      	ldr	r1, [pc, #256]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d107      	bne.n	8007cdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d121      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e0f6      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	d107      	bne.n	8007cf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ce4:	4b36      	ldr	r3, [pc, #216]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d115      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e0ea      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cfc:	4b30      	ldr	r3, [pc, #192]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0de      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e0d6      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d1c:	4b28      	ldr	r3, [pc, #160]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f023 0207 	bic.w	r2, r3, #7
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4925      	ldr	r1, [pc, #148]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d2e:	f7fc f8d1 	bl	8003ed4 <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d34:	e00a      	b.n	8007d4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d36:	f7fc f8cd 	bl	8003ed4 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e0be      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d1eb      	bne.n	8007d36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d010      	beq.n	8007d8c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	4b14      	ldr	r3, [pc, #80]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d208      	bcs.n	8007d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d7a:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d7c:	699b      	ldr	r3, [r3, #24]
 8007d7e:	f023 020f 	bic.w	r2, r3, #15
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	490e      	ldr	r1, [pc, #56]	@ (8007dc0 <HAL_RCC_ClockConfig+0x244>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 030f 	and.w	r3, r3, #15
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d214      	bcs.n	8007dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d9a:	4b08      	ldr	r3, [pc, #32]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 020f 	bic.w	r2, r3, #15
 8007da2:	4906      	ldr	r1, [pc, #24]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007daa:	4b04      	ldr	r3, [pc, #16]	@ (8007dbc <HAL_RCC_ClockConfig+0x240>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d005      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e086      	b.n	8007eca <HAL_RCC_ClockConfig+0x34e>
 8007dbc:	52002000 	.word	0x52002000
 8007dc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d010      	beq.n	8007df2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d208      	bcs.n	8007df2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007de0:	4b3c      	ldr	r3, [pc, #240]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	4939      	ldr	r1, [pc, #228]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695a      	ldr	r2, [r3, #20]
 8007e02:	4b34      	ldr	r3, [pc, #208]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d208      	bcs.n	8007e20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	492e      	ldr	r1, [pc, #184]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d010      	beq.n	8007e4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d208      	bcs.n	8007e4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	4922      	ldr	r1, [pc, #136]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d208      	bcs.n	8007e7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	4917      	ldr	r1, [pc, #92]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007e7c:	f000 f834 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007e80:	4602      	mov	r2, r0
 8007e82:	4b14      	ldr	r3, [pc, #80]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	0a1b      	lsrs	r3, r3, #8
 8007e88:	f003 030f 	and.w	r3, r3, #15
 8007e8c:	4912      	ldr	r1, [pc, #72]	@ (8007ed8 <HAL_RCC_ClockConfig+0x35c>)
 8007e8e:	5ccb      	ldrb	r3, [r1, r3]
 8007e90:	f003 031f 	and.w	r3, r3, #31
 8007e94:	fa22 f303 	lsr.w	r3, r2, r3
 8007e98:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <HAL_RCC_ClockConfig+0x358>)
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed8 <HAL_RCC_ClockConfig+0x35c>)
 8007ea4:	5cd3      	ldrb	r3, [r2, r3]
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007edc <HAL_RCC_ClockConfig+0x360>)
 8007eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee0 <HAL_RCC_ClockConfig+0x364>)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007eba:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee4 <HAL_RCC_ClockConfig+0x368>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7f9 f8a8 	bl	8001014 <HAL_InitTick>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	08026e58 	.word	0x08026e58
 8007edc:	24000008 	.word	0x24000008
 8007ee0:	24000004 	.word	0x24000004
 8007ee4:	2400003c 	.word	0x2400003c

08007ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b089      	sub	sp, #36	@ 0x24
 8007eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eee:	4bb3      	ldr	r3, [pc, #716]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ef6:	2b18      	cmp	r3, #24
 8007ef8:	f200 8155 	bhi.w	80081a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8007efc:	a201      	add	r2, pc, #4	@ (adr r2, 8007f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f02:	bf00      	nop
 8007f04:	08007f69 	.word	0x08007f69
 8007f08:	080081a7 	.word	0x080081a7
 8007f0c:	080081a7 	.word	0x080081a7
 8007f10:	080081a7 	.word	0x080081a7
 8007f14:	080081a7 	.word	0x080081a7
 8007f18:	080081a7 	.word	0x080081a7
 8007f1c:	080081a7 	.word	0x080081a7
 8007f20:	080081a7 	.word	0x080081a7
 8007f24:	08007f8f 	.word	0x08007f8f
 8007f28:	080081a7 	.word	0x080081a7
 8007f2c:	080081a7 	.word	0x080081a7
 8007f30:	080081a7 	.word	0x080081a7
 8007f34:	080081a7 	.word	0x080081a7
 8007f38:	080081a7 	.word	0x080081a7
 8007f3c:	080081a7 	.word	0x080081a7
 8007f40:	080081a7 	.word	0x080081a7
 8007f44:	08007f95 	.word	0x08007f95
 8007f48:	080081a7 	.word	0x080081a7
 8007f4c:	080081a7 	.word	0x080081a7
 8007f50:	080081a7 	.word	0x080081a7
 8007f54:	080081a7 	.word	0x080081a7
 8007f58:	080081a7 	.word	0x080081a7
 8007f5c:	080081a7 	.word	0x080081a7
 8007f60:	080081a7 	.word	0x080081a7
 8007f64:	08007f9b 	.word	0x08007f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f68:	4b94      	ldr	r3, [pc, #592]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0320 	and.w	r3, r3, #32
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d009      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f74:	4b91      	ldr	r3, [pc, #580]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	08db      	lsrs	r3, r3, #3
 8007f7a:	f003 0303 	and.w	r3, r3, #3
 8007f7e:	4a90      	ldr	r2, [pc, #576]	@ (80081c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f86:	e111      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f88:	4b8d      	ldr	r3, [pc, #564]	@ (80081c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f8a:	61bb      	str	r3, [r7, #24]
      break;
 8007f8c:	e10e      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f90:	61bb      	str	r3, [r7, #24]
      break;
 8007f92:	e10b      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f94:	4b8c      	ldr	r3, [pc, #560]	@ (80081c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f96:	61bb      	str	r3, [r7, #24]
      break;
 8007f98:	e108      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f9a:	4b88      	ldr	r3, [pc, #544]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007fa4:	4b85      	ldr	r3, [pc, #532]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa8:	091b      	lsrs	r3, r3, #4
 8007faa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007fb0:	4b82      	ldr	r3, [pc, #520]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007fba:	4b80      	ldr	r3, [pc, #512]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fbe:	08db      	lsrs	r3, r3, #3
 8007fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 80e1 	beq.w	80081a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	f000 8083 	beq.w	80080ec <HAL_RCC_GetSysClockFreq+0x204>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	f200 80a1 	bhi.w	8008130 <HAL_RCC_GetSysClockFreq+0x248>
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x114>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d056      	beq.n	80080a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ffa:	e099      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0320 	and.w	r3, r3, #32
 8008004:	2b00      	cmp	r3, #0
 8008006:	d02d      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008008:	4b6c      	ldr	r3, [pc, #432]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	08db      	lsrs	r3, r3, #3
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	4a6b      	ldr	r2, [pc, #428]	@ (80081c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008014:	fa22 f303 	lsr.w	r3, r2, r3
 8008018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	ee07 3a90 	vmov	s15, r3
 8008020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	ee07 3a90 	vmov	s15, r3
 800802a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b62      	ldr	r3, [pc, #392]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a02 	vldr	s12, [r7, #8]
 8008046:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80081cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008062:	e087      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80081d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008076:	4b51      	ldr	r3, [pc, #324]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	ed97 6a02 	vldr	s12, [r7, #8]
 800808a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80081cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080a6:	e065      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80081d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b40      	ldr	r3, [pc, #256]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80081cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080ea:	e043      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80081d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b2f      	ldr	r3, [pc, #188]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008112:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80081cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800812e:	e021      	b.n	8008174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80081d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800813e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008142:	4b1e      	ldr	r3, [pc, #120]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814a:	ee07 3a90 	vmov	s15, r3
 800814e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008152:	ed97 6a02 	vldr	s12, [r7, #8]
 8008156:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80081cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800815a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800815e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008174:	4b11      	ldr	r3, [pc, #68]	@ (80081bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008178:	0a5b      	lsrs	r3, r3, #9
 800817a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800817e:	3301      	adds	r3, #1
 8008180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	ee07 3a90 	vmov	s15, r3
 8008188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800818c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008198:	ee17 3a90 	vmov	r3, s15
 800819c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800819e:	e005      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]
      break;
 80081a4:	e002      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80081a6:	4b07      	ldr	r3, [pc, #28]	@ (80081c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081a8:	61bb      	str	r3, [r7, #24]
      break;
 80081aa:	bf00      	nop
  }

  return sysclockfreq;
 80081ac:	69bb      	ldr	r3, [r7, #24]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3724      	adds	r7, #36	@ 0x24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	003d0900 	.word	0x003d0900
 80081c8:	016e3600 	.word	0x016e3600
 80081cc:	46000000 	.word	0x46000000
 80081d0:	4c742400 	.word	0x4c742400
 80081d4:	4a742400 	.word	0x4a742400
 80081d8:	4bb71b00 	.word	0x4bb71b00

080081dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80081e2:	f7ff fe81 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 80081e6:	4602      	mov	r2, r0
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <HAL_RCC_GetHCLKFreq+0x50>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	490f      	ldr	r1, [pc, #60]	@ (8008230 <HAL_RCC_GetHCLKFreq+0x54>)
 80081f4:	5ccb      	ldrb	r3, [r1, r3]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	fa22 f303 	lsr.w	r3, r2, r3
 80081fe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008200:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <HAL_RCC_GetHCLKFreq+0x50>)
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	4a09      	ldr	r2, [pc, #36]	@ (8008230 <HAL_RCC_GetHCLKFreq+0x54>)
 800820a:	5cd3      	ldrb	r3, [r2, r3]
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	fa22 f303 	lsr.w	r3, r2, r3
 8008216:	4a07      	ldr	r2, [pc, #28]	@ (8008234 <HAL_RCC_GetHCLKFreq+0x58>)
 8008218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800821a:	4a07      	ldr	r2, [pc, #28]	@ (8008238 <HAL_RCC_GetHCLKFreq+0x5c>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008220:	4b04      	ldr	r3, [pc, #16]	@ (8008234 <HAL_RCC_GetHCLKFreq+0x58>)
 8008222:	681b      	ldr	r3, [r3, #0]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	58024400 	.word	0x58024400
 8008230:	08026e58 	.word	0x08026e58
 8008234:	24000008 	.word	0x24000008
 8008238:	24000004 	.word	0x24000004

0800823c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008240:	f7ff ffcc 	bl	80081dc <HAL_RCC_GetHCLKFreq>
 8008244:	4602      	mov	r2, r0
 8008246:	4b06      	ldr	r3, [pc, #24]	@ (8008260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	091b      	lsrs	r3, r3, #4
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	4904      	ldr	r1, [pc, #16]	@ (8008264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008252:	5ccb      	ldrb	r3, [r1, r3]
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800825c:	4618      	mov	r0, r3
 800825e:	bd80      	pop	{r7, pc}
 8008260:	58024400 	.word	0x58024400
 8008264:	08026e58 	.word	0x08026e58

08008268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800826c:	f7ff ffb6 	bl	80081dc <HAL_RCC_GetHCLKFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b06      	ldr	r3, [pc, #24]	@ (800828c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	4904      	ldr	r1, [pc, #16]	@ (8008290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008288:	4618      	mov	r0, r3
 800828a:	bd80      	pop	{r7, pc}
 800828c:	58024400 	.word	0x58024400
 8008290:	08026e58 	.word	0x08026e58

08008294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	223f      	movs	r2, #63	@ 0x3f
 80082a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0207 	and.w	r2, r3, #7
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80082b0:	4b17      	ldr	r3, [pc, #92]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 80082bc:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 020f 	and.w	r2, r3, #15
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 80082c8:	4b11      	ldr	r3, [pc, #68]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80082d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80082e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80082ec:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <HAL_RCC_GetClockConfig+0x7c>)
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082f8:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <HAL_RCC_GetClockConfig+0x80>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	58024400 	.word	0x58024400
 8008314:	52002000 	.word	0x52002000

08008318 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800831c:	b0c8      	sub	sp, #288	@ 0x120
 800831e:	af00      	add	r7, sp, #0
 8008320:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008324:	2300      	movs	r3, #0
 8008326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800832a:	2300      	movs	r3, #0
 800832c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800833c:	2500      	movs	r5, #0
 800833e:	ea54 0305 	orrs.w	r3, r4, r5
 8008342:	d049      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008344:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800834a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800834e:	d02f      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008350:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008354:	d828      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008356:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800835a:	d01a      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800835c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008360:	d822      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800836a:	d007      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800836c:	e01c      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800836e:	4ba7      	ldr	r3, [pc, #668]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	4aa6      	ldr	r2, [pc, #664]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800837a:	e01a      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	3308      	adds	r3, #8
 8008382:	2102      	movs	r1, #2
 8008384:	4618      	mov	r0, r3
 8008386:	f001 f985 	bl	8009694 <RCCEx_PLL2_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008390:	e00f      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008392:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008396:	3328      	adds	r3, #40	@ 0x28
 8008398:	2102      	movs	r1, #2
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fa2c 	bl	80097f8 <RCCEx_PLL3_Config>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083a6:	e004      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083ae:	e000      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80083b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083ba:	4b94      	ldr	r3, [pc, #592]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80083c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083c8:	4a90      	ldr	r2, [pc, #576]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083ca:	430b      	orrs	r3, r1
 80083cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80083ce:	e003      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80083e4:	f04f 0900 	mov.w	r9, #0
 80083e8:	ea58 0309 	orrs.w	r3, r8, r9
 80083ec:	d047      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80083ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d82a      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80083f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80083fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fe:	bf00      	nop
 8008400:	08008415 	.word	0x08008415
 8008404:	08008423 	.word	0x08008423
 8008408:	08008439 	.word	0x08008439
 800840c:	08008457 	.word	0x08008457
 8008410:	08008457 	.word	0x08008457
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008414:	4b7d      	ldr	r3, [pc, #500]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008418:	4a7c      	ldr	r2, [pc, #496]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800841a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800841e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008420:	e01a      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008426:	3308      	adds	r3, #8
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f001 f932 	bl	8009694 <RCCEx_PLL2_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008436:	e00f      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800843c:	3328      	adds	r3, #40	@ 0x28
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f001 f9d9 	bl	80097f8 <RCCEx_PLL3_Config>
 8008446:	4603      	mov	r3, r0
 8008448:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800844c:	e004      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008454:	e000      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008458:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008460:	4b6a      	ldr	r3, [pc, #424]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008464:	f023 0107 	bic.w	r1, r3, #7
 8008468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800846c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846e:	4a67      	ldr	r2, [pc, #412]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008470:	430b      	orrs	r3, r1
 8008472:	6513      	str	r3, [r2, #80]	@ 0x50
 8008474:	e003      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008476:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800847a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800847e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800848a:	f04f 0b00 	mov.w	fp, #0
 800848e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008492:	d054      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800849a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800849e:	d036      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80084a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80084a4:	d82f      	bhi.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084aa:	d032      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80084ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084b0:	d829      	bhi.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80084b4:	d02f      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80084b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80084b8:	d825      	bhi.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084ba:	2b80      	cmp	r3, #128	@ 0x80
 80084bc:	d018      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80084be:	2b80      	cmp	r3, #128	@ 0x80
 80084c0:	d821      	bhi.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80084c6:	2b40      	cmp	r3, #64	@ 0x40
 80084c8:	d007      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80084ca:	e01c      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084cc:	4b4f      	ldr	r3, [pc, #316]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	4a4e      	ldr	r2, [pc, #312]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80084d8:	e01e      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084de:	3308      	adds	r3, #8
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 f8d6 	bl	8009694 <RCCEx_PLL2_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80084ee:	e013      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084f4:	3328      	adds	r3, #40	@ 0x28
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 f97d 	bl	80097f8 <RCCEx_PLL3_Config>
 80084fe:	4603      	mov	r3, r0
 8008500:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008504:	e008      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800850c:	e004      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800850e:	bf00      	nop
 8008510:	e002      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008512:	bf00      	nop
 8008514:	e000      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008518:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008520:	4b3a      	ldr	r3, [pc, #232]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008524:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800852c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800852e:	4a37      	ldr	r2, [pc, #220]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008530:	430b      	orrs	r3, r1
 8008532:	6513      	str	r3, [r2, #80]	@ 0x50
 8008534:	e003      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008536:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800853a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800853e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008546:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800854a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800854e:	2300      	movs	r3, #0
 8008550:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008554:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008558:	460b      	mov	r3, r1
 800855a:	4313      	orrs	r3, r2
 800855c:	d05c      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800855e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008564:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008568:	d03b      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800856a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800856e:	d834      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008574:	d037      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8008576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800857a:	d82e      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800857c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008580:	d033      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008582:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008586:	d828      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800858c:	d01a      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800858e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008592:	d822      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d007      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x296>
 800859e:	e01c      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085a0:	4b1a      	ldr	r3, [pc, #104]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	4a19      	ldr	r2, [pc, #100]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80085ac:	e01e      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b2:	3308      	adds	r3, #8
 80085b4:	2100      	movs	r1, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 f86c 	bl	8009694 <RCCEx_PLL2_Config>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80085c2:	e013      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	3328      	adds	r3, #40	@ 0x28
 80085ca:	2100      	movs	r1, #0
 80085cc:	4618      	mov	r0, r3
 80085ce:	f001 f913 	bl	80097f8 <RCCEx_PLL3_Config>
 80085d2:	4603      	mov	r3, r0
 80085d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80085d8:	e008      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085e0:	e004      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80085e2:	bf00      	nop
 80085e4:	e002      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80085e6:	bf00      	nop
 80085e8:	e000      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80085ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80085f4:	4b05      	ldr	r3, [pc, #20]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80085fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008602:	4a02      	ldr	r2, [pc, #8]	@ (800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008604:	430b      	orrs	r3, r1
 8008606:	6513      	str	r3, [r2, #80]	@ 0x50
 8008608:	e006      	b.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800860a:	bf00      	nop
 800860c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008614:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008618:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008628:	2300      	movs	r3, #0
 800862a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800862e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008632:	460b      	mov	r3, r1
 8008634:	4313      	orrs	r3, r2
 8008636:	d03a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008638:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800863c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800863e:	2b30      	cmp	r3, #48	@ 0x30
 8008640:	d01f      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008642:	2b30      	cmp	r3, #48	@ 0x30
 8008644:	d819      	bhi.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008646:	2b20      	cmp	r3, #32
 8008648:	d00c      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800864a:	2b20      	cmp	r3, #32
 800864c:	d815      	bhi.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d019      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008652:	2b10      	cmp	r3, #16
 8008654:	d111      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008656:	4bae      	ldr	r3, [pc, #696]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	4aad      	ldr	r2, [pc, #692]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800865c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008662:	e011      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008668:	3308      	adds	r3, #8
 800866a:	2102      	movs	r1, #2
 800866c:	4618      	mov	r0, r3
 800866e:	f001 f811 	bl	8009694 <RCCEx_PLL2_Config>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008678:	e006      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008690:	4b9f      	ldr	r3, [pc, #636]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008694:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800869c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869e:	4a9c      	ldr	r2, [pc, #624]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80086ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80086ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80086c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d051      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80086ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086d8:	d035      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80086da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80086de:	d82e      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80086e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086e4:	d031      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80086e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086ea:	d828      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80086ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086f0:	d01a      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80086f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086f6:	d822      	bhi.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x426>
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80086fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008700:	d007      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008702:	e01c      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008704:	4b82      	ldr	r3, [pc, #520]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008708:	4a81      	ldr	r2, [pc, #516]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800870a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800870e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008710:	e01c      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008716:	3308      	adds	r3, #8
 8008718:	2100      	movs	r1, #0
 800871a:	4618      	mov	r0, r3
 800871c:	f000 ffba 	bl	8009694 <RCCEx_PLL2_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008726:	e011      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800872c:	3328      	adds	r3, #40	@ 0x28
 800872e:	2100      	movs	r1, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f001 f861 	bl	80097f8 <RCCEx_PLL3_Config>
 8008736:	4603      	mov	r3, r0
 8008738:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800873c:	e006      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008744:	e002      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008746:	bf00      	nop
 8008748:	e000      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800874a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008754:	4b6e      	ldr	r3, [pc, #440]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008758:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800875c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008762:	4a6b      	ldr	r2, [pc, #428]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008764:	430b      	orrs	r3, r1
 8008766:	6513      	str	r3, [r2, #80]	@ 0x50
 8008768:	e003      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800876e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800877e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008788:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800878c:	460b      	mov	r3, r1
 800878e:	4313      	orrs	r3, r2
 8008790:	d053      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008792:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800879c:	d033      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800879e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087a2:	d82c      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80087a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087a8:	d02f      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80087aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087ae:	d826      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80087b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087b4:	d02b      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80087b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80087ba:	d820      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80087bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c0:	d012      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80087c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c6:	d81a      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d022      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80087cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087d0:	d115      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087d6:	3308      	adds	r3, #8
 80087d8:	2101      	movs	r1, #1
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 ff5a 	bl	8009694 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80087e6:	e015      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ec:	3328      	adds	r3, #40	@ 0x28
 80087ee:	2101      	movs	r1, #1
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 f801 	bl	80097f8 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80087fc:	e00a      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008804:	e006      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008806:	bf00      	nop
 8008808:	e004      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800880a:	bf00      	nop
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800880e:	bf00      	nop
 8008810:	e000      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008814:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800881c:	4b3c      	ldr	r3, [pc, #240]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800881e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008820:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800882a:	4a39      	ldr	r2, [pc, #228]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800882c:	430b      	orrs	r3, r1
 800882e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008830:	e003      	b.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008832:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008836:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800883a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008846:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800884a:	2300      	movs	r3, #0
 800884c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008850:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008854:	460b      	mov	r3, r1
 8008856:	4313      	orrs	r3, r2
 8008858:	d060      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800885a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800885e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008862:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008866:	d039      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008868:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800886c:	d832      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800886e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008872:	d035      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008878:	d82c      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800887a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800887e:	d031      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008884:	d826      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800888a:	d02d      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800888c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008890:	d820      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008896:	d012      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800889c:	d81a      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d024      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80088a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a6:	d115      	bne.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ac:	3308      	adds	r3, #8
 80088ae:	2101      	movs	r1, #1
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 feef 	bl	8009694 <RCCEx_PLL2_Config>
 80088b6:	4603      	mov	r3, r0
 80088b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088bc:	e017      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c2:	3328      	adds	r3, #40	@ 0x28
 80088c4:	2101      	movs	r1, #1
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 ff96 	bl	80097f8 <RCCEx_PLL3_Config>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088d2:	e00c      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088da:	e008      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80088dc:	bf00      	nop
 80088de:	e006      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80088e0:	bf00      	nop
 80088e2:	e004      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80088e4:	bf00      	nop
 80088e6:	e002      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80088e8:	bf00      	nop
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80088ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10e      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80088f6:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80088fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008902:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008906:	4a02      	ldr	r2, [pc, #8]	@ (8008910 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008908:	430b      	orrs	r3, r1
 800890a:	6593      	str	r3, [r2, #88]	@ 0x58
 800890c:	e006      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800890e:	bf00      	nop
 8008910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008914:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008918:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800891c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800892c:	2300      	movs	r3, #0
 800892e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008936:	460b      	mov	r3, r1
 8008938:	4313      	orrs	r3, r2
 800893a:	d037      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800893c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008946:	d00e      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894c:	d816      	bhi.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d018      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008956:	d111      	bne.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008958:	4bc4      	ldr	r3, [pc, #784]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895c:	4ac3      	ldr	r2, [pc, #780]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800895e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008964:	e00f      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800896a:	3308      	adds	r3, #8
 800896c:	2101      	movs	r1, #1
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fe90 	bl	8009694 <RCCEx_PLL2_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800897a:	e004      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008982:	e000      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008986:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800898e:	4bb7      	ldr	r3, [pc, #732]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008992:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008996:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800899c:	4ab3      	ldr	r2, [pc, #716]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800899e:	430b      	orrs	r3, r1
 80089a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80089a2:	e003      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80089ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80089b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089bc:	2300      	movs	r3, #0
 80089be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80089c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4313      	orrs	r3, r2
 80089ca:	d039      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80089cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d81c      	bhi.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80089d6:	a201      	add	r2, pc, #4	@ (adr r2, 80089dc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	080089ed 	.word	0x080089ed
 80089e4:	080089fb 	.word	0x080089fb
 80089e8:	08008a19 	.word	0x08008a19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ec:	4b9f      	ldr	r3, [pc, #636]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	4a9e      	ldr	r2, [pc, #632]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80089f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80089f8:	e00f      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089fe:	3308      	adds	r3, #8
 8008a00:	2102      	movs	r1, #2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fe46 	bl	8009694 <RCCEx_PLL2_Config>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008a0e:	e004      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a16:	e000      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008a22:	4b92      	ldr	r3, [pc, #584]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a26:	f023 0103 	bic.w	r1, r3, #3
 8008a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a30:	4a8e      	ldr	r2, [pc, #568]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008a32:	430b      	orrs	r3, r1
 8008a34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a36:	e003      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a50:	2300      	movs	r3, #0
 8008a52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f000 8099 	beq.w	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a62:	4b83      	ldr	r3, [pc, #524]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a82      	ldr	r2, [pc, #520]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a6e:	f7fb fa31 	bl	8003ed4 <HAL_GetTick>
 8008a72:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a76:	e00b      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a78:	f7fb fa2c 	bl	8003ed4 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b64      	cmp	r3, #100	@ 0x64
 8008a86:	d903      	bls.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a8e:	e005      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a90:	4b77      	ldr	r3, [pc, #476]	@ (8008c70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0ed      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d173      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008aa4:	4b71      	ldr	r3, [pc, #452]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008aa6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008ab0:	4053      	eors	r3, r2
 8008ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d015      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008aba:	4b6c      	ldr	r3, [pc, #432]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ac2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ac6:	4b69      	ldr	r3, [pc, #420]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aca:	4a68      	ldr	r2, [pc, #416]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ad2:	4b66      	ldr	r3, [pc, #408]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ad6:	4a65      	ldr	r2, [pc, #404]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008adc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ade:	4a63      	ldr	r2, [pc, #396]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af2:	d118      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af4:	f7fb f9ee 	bl	8003ed4 <HAL_GetTick>
 8008af8:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008afc:	e00d      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008afe:	f7fb f9e9 	bl	8003ed4 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008b08:	1ad2      	subs	r2, r2, r3
 8008b0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d903      	bls.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008b18:	e005      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008b1a:	4b54      	ldr	r3, [pc, #336]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d0eb      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008b26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d129      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b3e:	d10e      	bne.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008b40:	4b4a      	ldr	r3, [pc, #296]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b50:	091a      	lsrs	r2, r3, #4
 8008b52:	4b48      	ldr	r3, [pc, #288]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	4a45      	ldr	r2, [pc, #276]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6113      	str	r3, [r2, #16]
 8008b5c:	e005      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008b5e:	4b43      	ldr	r3, [pc, #268]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	4a42      	ldr	r2, [pc, #264]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008b68:	6113      	str	r3, [r2, #16]
 8008b6a:	4b40      	ldr	r3, [pc, #256]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8008c6c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008b7c:	430b      	orrs	r3, r1
 8008b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008b80:	e008      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008b8a:	e003      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f002 0301 	and.w	r3, r2, #1
 8008ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008baa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	f000 8090 	beq.w	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bbe:	2b28      	cmp	r3, #40	@ 0x28
 8008bc0:	d870      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008cad 	.word	0x08008cad
 8008bcc:	08008ca5 	.word	0x08008ca5
 8008bd0:	08008ca5 	.word	0x08008ca5
 8008bd4:	08008ca5 	.word	0x08008ca5
 8008bd8:	08008ca5 	.word	0x08008ca5
 8008bdc:	08008ca5 	.word	0x08008ca5
 8008be0:	08008ca5 	.word	0x08008ca5
 8008be4:	08008ca5 	.word	0x08008ca5
 8008be8:	08008c79 	.word	0x08008c79
 8008bec:	08008ca5 	.word	0x08008ca5
 8008bf0:	08008ca5 	.word	0x08008ca5
 8008bf4:	08008ca5 	.word	0x08008ca5
 8008bf8:	08008ca5 	.word	0x08008ca5
 8008bfc:	08008ca5 	.word	0x08008ca5
 8008c00:	08008ca5 	.word	0x08008ca5
 8008c04:	08008ca5 	.word	0x08008ca5
 8008c08:	08008c8f 	.word	0x08008c8f
 8008c0c:	08008ca5 	.word	0x08008ca5
 8008c10:	08008ca5 	.word	0x08008ca5
 8008c14:	08008ca5 	.word	0x08008ca5
 8008c18:	08008ca5 	.word	0x08008ca5
 8008c1c:	08008ca5 	.word	0x08008ca5
 8008c20:	08008ca5 	.word	0x08008ca5
 8008c24:	08008ca5 	.word	0x08008ca5
 8008c28:	08008cad 	.word	0x08008cad
 8008c2c:	08008ca5 	.word	0x08008ca5
 8008c30:	08008ca5 	.word	0x08008ca5
 8008c34:	08008ca5 	.word	0x08008ca5
 8008c38:	08008ca5 	.word	0x08008ca5
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008ca5 	.word	0x08008ca5
 8008c44:	08008ca5 	.word	0x08008ca5
 8008c48:	08008cad 	.word	0x08008cad
 8008c4c:	08008ca5 	.word	0x08008ca5
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	08008ca5 	.word	0x08008ca5
 8008c5c:	08008ca5 	.word	0x08008ca5
 8008c60:	08008ca5 	.word	0x08008ca5
 8008c64:	08008ca5 	.word	0x08008ca5
 8008c68:	08008cad 	.word	0x08008cad
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	58024800 	.word	0x58024800
 8008c74:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	2101      	movs	r1, #1
 8008c80:	4618      	mov	r0, r3
 8008c82:	f000 fd07 	bl	8009694 <RCCEx_PLL2_Config>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008c8c:	e00f      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c92:	3328      	adds	r3, #40	@ 0x28
 8008c94:	2101      	movs	r1, #1
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fdae 	bl	80097f8 <RCCEx_PLL3_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008ca2:	e004      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008caa:	e000      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10b      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008cb6:	4bc0      	ldr	r3, [pc, #768]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc6:	4abc      	ldr	r2, [pc, #752]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ccc:	e003      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cd2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f002 0302 	and.w	r3, r2, #2
 8008ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008cec:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d043      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d824      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008d21 	.word	0x08008d21
 8008d10:	08008d37 	.word	0x08008d37
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d55 	.word	0x08008d55
 8008d1c:	08008d55 	.word	0x08008d55
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d24:	3308      	adds	r3, #8
 8008d26:	2101      	movs	r1, #1
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fcb3 	bl	8009694 <RCCEx_PLL2_Config>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d34:	e00f      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3a:	3328      	adds	r3, #40	@ 0x28
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fd5a 	bl	80097f8 <RCCEx_PLL3_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d4a:	e004      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d52:	e000      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008d54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d5e:	4b96      	ldr	r3, [pc, #600]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d62:	f023 0107 	bic.w	r1, r3, #7
 8008d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6e:	4a92      	ldr	r2, [pc, #584]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008d70:	430b      	orrs	r3, r1
 8008d72:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d74:	e003      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d7a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	f002 0304 	and.w	r3, r2, #4
 8008d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d94:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	d043      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d824      	bhi.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008daa:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dfd 	.word	0x08008dfd
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008ddf 	.word	0x08008ddf
 8008dbc:	08008dfd 	.word	0x08008dfd
 8008dc0:	08008dfd 	.word	0x08008dfd
 8008dc4:	08008dfd 	.word	0x08008dfd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dcc:	3308      	adds	r3, #8
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 fc5f 	bl	8009694 <RCCEx_PLL2_Config>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ddc:	e00f      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de2:	3328      	adds	r3, #40	@ 0x28
 8008de4:	2101      	movs	r1, #1
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 fd06 	bl	80097f8 <RCCEx_PLL3_Config>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008df2:	e004      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dfa:	e000      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10b      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e06:	4b6c      	ldr	r3, [pc, #432]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e0a:	f023 0107 	bic.w	r1, r3, #7
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e16:	4a68      	ldr	r2, [pc, #416]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e1c:	e003      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	f002 0320 	and.w	r3, r2, #32
 8008e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e36:	2300      	movs	r3, #0
 8008e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d055      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e52:	d033      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e58:	d82c      	bhi.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e5e:	d02f      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e64:	d826      	bhi.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008e66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e6a:	d02b      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008e6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e70:	d820      	bhi.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e76:	d012      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e7c:	d81a      	bhi.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d022      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e86:	d115      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 fbff 	bl	8009694 <RCCEx_PLL2_Config>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008e9c:	e015      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea2:	3328      	adds	r3, #40	@ 0x28
 8008ea4:	2102      	movs	r1, #2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 fca6 	bl	80097f8 <RCCEx_PLL3_Config>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008eb2:	e00a      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008eba:	e006      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ebc:	bf00      	nop
 8008ebe:	e004      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ec0:	bf00      	nop
 8008ec2:	e002      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ec4:	bf00      	nop
 8008ec6:	e000      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10b      	bne.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ed2:	4b39      	ldr	r3, [pc, #228]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ee2:	4a35      	ldr	r2, [pc, #212]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ee8:	e003      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008eee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008efe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f02:	2300      	movs	r3, #0
 8008f04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	d058      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f1e:	d033      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008f20:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008f24:	d82c      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2a:	d02f      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f30:	d826      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f36:	d02b      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008f38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f3c:	d820      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f42:	d012      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f48:	d81a      	bhi.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d022      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f52:	d115      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f58:	3308      	adds	r3, #8
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fb99 	bl	8009694 <RCCEx_PLL2_Config>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f68:	e015      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6e:	3328      	adds	r3, #40	@ 0x28
 8008f70:	2102      	movs	r1, #2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fc40 	bl	80097f8 <RCCEx_PLL3_Config>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f7e:	e00a      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f86:	e006      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008f88:	bf00      	nop
 8008f8a:	e004      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008f8c:	bf00      	nop
 8008f8e:	e002      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008f90:	bf00      	nop
 8008f92:	e000      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10e      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f9e:	4b06      	ldr	r3, [pc, #24]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008fae:	4a02      	ldr	r2, [pc, #8]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fb4:	e006      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fda:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	d055      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008fec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ff0:	d033      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008ff2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ff6:	d82c      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ffc:	d02f      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009002:	d826      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009004:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009008:	d02b      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800900a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800900e:	d820      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8009010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009014:	d012      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8009016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800901a:	d81a      	bhi.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800901c:	2b00      	cmp	r3, #0
 800901e:	d022      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009024:	d115      	bne.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009026:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902a:	3308      	adds	r3, #8
 800902c:	2100      	movs	r1, #0
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fb30 	bl	8009694 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800903a:	e015      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800903c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009040:	3328      	adds	r3, #40	@ 0x28
 8009042:	2102      	movs	r1, #2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fbd7 	bl	80097f8 <RCCEx_PLL3_Config>
 800904a:	4603      	mov	r3, r0
 800904c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009050:	e00a      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009058:	e006      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800905a:	bf00      	nop
 800905c:	e004      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800905e:	bf00      	nop
 8009060:	e002      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009062:	bf00      	nop
 8009064:	e000      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8009066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10b      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009070:	4ba1      	ldr	r3, [pc, #644]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009074:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009080:	4a9d      	ldr	r2, [pc, #628]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009082:	430b      	orrs	r3, r1
 8009084:	6593      	str	r3, [r2, #88]	@ 0x58
 8009086:	e003      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009088:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800908c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f002 0308 	and.w	r3, r2, #8
 800909c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d01e      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80090b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090bc:	d10c      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c2:	3328      	adds	r3, #40	@ 0x28
 80090c4:	2102      	movs	r1, #2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fb96 	bl	80097f8 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80090d8:	4b87      	ldr	r3, [pc, #540]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80090e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090e8:	4a83      	ldr	r2, [pc, #524]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80090ea:	430b      	orrs	r3, r1
 80090ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f002 0310 	and.w	r3, r2, #16
 80090fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090fe:	2300      	movs	r3, #0
 8009100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009104:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009108:	460b      	mov	r3, r1
 800910a:	4313      	orrs	r3, r2
 800910c:	d01e      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800910e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800911a:	d10c      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800911c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009120:	3328      	adds	r3, #40	@ 0x28
 8009122:	2102      	movs	r1, #2
 8009124:	4618      	mov	r0, r3
 8009126:	f000 fb67 	bl	80097f8 <RCCEx_PLL3_Config>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009136:	4b70      	ldr	r3, [pc, #448]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800913e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009146:	4a6c      	ldr	r2, [pc, #432]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009148:	430b      	orrs	r3, r1
 800914a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800914c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009154:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800915c:	2300      	movs	r3, #0
 800915e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009162:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d03e      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800916c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009178:	d022      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800917a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800917e:	d81b      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009188:	d00b      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800918a:	e015      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800918c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009190:	3308      	adds	r3, #8
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fa7d 	bl	8009694 <RCCEx_PLL2_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091a0:	e00f      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091a6:	3328      	adds	r3, #40	@ 0x28
 80091a8:	2102      	movs	r1, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fb24 	bl	80097f8 <RCCEx_PLL3_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80091b6:	e004      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80091be:	e000      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80091c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10b      	bne.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091ca:	4b4b      	ldr	r3, [pc, #300]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80091d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091da:	4a47      	ldr	r2, [pc, #284]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80091dc:	430b      	orrs	r3, r1
 80091de:	6593      	str	r3, [r2, #88]	@ 0x58
 80091e0:	e003      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80091f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091f8:	2300      	movs	r3, #0
 80091fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80091fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009200:	460b      	mov	r3, r1
 8009202:	4313      	orrs	r3, r2
 8009204:	d03b      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009212:	d01f      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8009214:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009218:	d818      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800921a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800921e:	d003      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8009220:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009224:	d007      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8009226:	e011      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009228:	4b33      	ldr	r3, [pc, #204]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4a32      	ldr	r2, [pc, #200]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800922e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009234:	e00f      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800923a:	3328      	adds	r3, #40	@ 0x28
 800923c:	2101      	movs	r1, #1
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fada 	bl	80097f8 <RCCEx_PLL3_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800924a:	e004      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009252:	e000      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8009254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009256:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10b      	bne.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800925e:	4b26      	ldr	r3, [pc, #152]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009262:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800926a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800926e:	4a22      	ldr	r2, [pc, #136]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8009270:	430b      	orrs	r3, r1
 8009272:	6553      	str	r3, [r2, #84]	@ 0x54
 8009274:	e003      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800927a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800927e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800928a:	673b      	str	r3, [r7, #112]	@ 0x70
 800928c:	2300      	movs	r3, #0
 800928e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009290:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009294:	460b      	mov	r3, r1
 8009296:	4313      	orrs	r3, r2
 8009298:	d034      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800929a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80092a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092a8:	d007      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80092aa:	e011      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ac:	4b12      	ldr	r3, [pc, #72]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b0:	4a11      	ldr	r2, [pc, #68]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092b8:	e00e      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092be:	3308      	adds	r3, #8
 80092c0:	2102      	movs	r1, #2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f9e6 	bl	8009694 <RCCEx_PLL2_Config>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80092ce:	e003      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80092d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10d      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80092e0:	4b05      	ldr	r3, [pc, #20]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ee:	4a02      	ldr	r2, [pc, #8]	@ (80092f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80092f0:	430b      	orrs	r3, r1
 80092f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80092f4:	e006      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80092f6:	bf00      	nop
 80092f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009300:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009310:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009312:	2300      	movs	r3, #0
 8009314:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009316:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800931a:	460b      	mov	r3, r1
 800931c:	4313      	orrs	r3, r2
 800931e:	d00c      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009320:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009324:	3328      	adds	r3, #40	@ 0x28
 8009326:	2102      	movs	r1, #2
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fa65 	bl	80097f8 <RCCEx_PLL3_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800933a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009346:	663b      	str	r3, [r7, #96]	@ 0x60
 8009348:	2300      	movs	r3, #0
 800934a:	667b      	str	r3, [r7, #100]	@ 0x64
 800934c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d038      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800935a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009362:	d018      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8009364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009368:	d811      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800936a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800936e:	d014      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8009370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009374:	d80b      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800937a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800937e:	d106      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009380:	4bc3      	ldr	r3, [pc, #780]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009384:	4ac2      	ldr	r2, [pc, #776]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800938a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800938c:	e008      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009394:	e004      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8009396:	bf00      	nop
 8009398:	e002      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800939a:	bf00      	nop
 800939c:	e000      	b.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800939e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10b      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093a8:	4bb9      	ldr	r3, [pc, #740]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b8:	4ab5      	ldr	r2, [pc, #724]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093ba:	430b      	orrs	r3, r1
 80093bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80093be:	e003      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80093c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80093d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093d6:	2300      	movs	r3, #0
 80093d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80093de:	460b      	mov	r3, r1
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d009      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093e4:	4baa      	ldr	r3, [pc, #680]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093f2:	4aa7      	ldr	r2, [pc, #668]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80093f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009404:	653b      	str	r3, [r7, #80]	@ 0x50
 8009406:	2300      	movs	r3, #0
 8009408:	657b      	str	r3, [r7, #84]	@ 0x54
 800940a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800940e:	460b      	mov	r3, r1
 8009410:	4313      	orrs	r3, r2
 8009412:	d009      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009414:	4b9e      	ldr	r3, [pc, #632]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009418:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800941c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009422:	4a9b      	ldr	r2, [pc, #620]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009424:	430b      	orrs	r3, r1
 8009426:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009436:	2300      	movs	r3, #0
 8009438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800943a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800943e:	460b      	mov	r3, r1
 8009440:	4313      	orrs	r3, r2
 8009442:	d009      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009444:	4b92      	ldr	r3, [pc, #584]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009448:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009452:	4a8f      	ldr	r2, [pc, #572]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009454:	430b      	orrs	r3, r1
 8009456:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009464:	643b      	str	r3, [r7, #64]	@ 0x40
 8009466:	2300      	movs	r3, #0
 8009468:	647b      	str	r3, [r7, #68]	@ 0x44
 800946a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d00e      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009474:	4b86      	ldr	r3, [pc, #536]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	4a85      	ldr	r2, [pc, #532]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800947a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800947e:	6113      	str	r3, [r2, #16]
 8009480:	4b83      	ldr	r3, [pc, #524]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009482:	6919      	ldr	r1, [r3, #16]
 8009484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009488:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800948c:	4a80      	ldr	r2, [pc, #512]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800948e:	430b      	orrs	r3, r1
 8009490:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80094a8:	460b      	mov	r3, r1
 80094aa:	4313      	orrs	r3, r2
 80094ac:	d009      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80094ae:	4b78      	ldr	r3, [pc, #480]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80094b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094bc:	4a74      	ldr	r2, [pc, #464]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094be:	430b      	orrs	r3, r1
 80094c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80094c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80094ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d0:	2300      	movs	r3, #0
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80094d8:	460b      	mov	r3, r1
 80094da:	4313      	orrs	r3, r2
 80094dc:	d00a      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094de:	4b6c      	ldr	r3, [pc, #432]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80094e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80094ee:	4a68      	ldr	r2, [pc, #416]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	2100      	movs	r1, #0
 80094fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009506:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800950a:	460b      	mov	r3, r1
 800950c:	4313      	orrs	r3, r2
 800950e:	d011      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009514:	3308      	adds	r3, #8
 8009516:	2100      	movs	r1, #0
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f8bb 	bl	8009694 <RCCEx_PLL2_Config>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009524:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009530:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	2100      	movs	r1, #0
 800953e:	6239      	str	r1, [r7, #32]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
 8009546:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800954a:	460b      	mov	r3, r1
 800954c:	4313      	orrs	r3, r2
 800954e:	d011      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009554:	3308      	adds	r3, #8
 8009556:	2101      	movs	r1, #1
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f89b 	bl	8009694 <RCCEx_PLL2_Config>
 800955e:	4603      	mov	r3, r0
 8009560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009564:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	2100      	movs	r1, #0
 800957e:	61b9      	str	r1, [r7, #24]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	61fb      	str	r3, [r7, #28]
 8009586:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d011      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009594:	3308      	adds	r3, #8
 8009596:	2102      	movs	r1, #2
 8009598:	4618      	mov	r0, r3
 800959a:	f000 f87b 	bl	8009694 <RCCEx_PLL2_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80095a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80095b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	2100      	movs	r1, #0
 80095be:	6139      	str	r1, [r7, #16]
 80095c0:	f003 0308 	and.w	r3, r3, #8
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80095ca:	460b      	mov	r3, r1
 80095cc:	4313      	orrs	r3, r2
 80095ce:	d011      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d4:	3328      	adds	r3, #40	@ 0x28
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f90d 	bl	80097f8 <RCCEx_PLL3_Config>
 80095de:	4603      	mov	r3, r0
 80095e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80095e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80095f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80095f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	2100      	movs	r1, #0
 80095fe:	60b9      	str	r1, [r7, #8]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800960a:	460b      	mov	r3, r1
 800960c:	4313      	orrs	r3, r2
 800960e:	d011      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009614:	3328      	adds	r3, #40	@ 0x28
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f8ed 	bl	80097f8 <RCCEx_PLL3_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009624:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009630:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	2100      	movs	r1, #0
 800963e:	6039      	str	r1, [r7, #0]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	e9d7 1200 	ldrd	r1, r2, [r7]
 800964a:	460b      	mov	r3, r1
 800964c:	4313      	orrs	r3, r2
 800964e:	d011      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009654:	3328      	adds	r3, #40	@ 0x28
 8009656:	2102      	movs	r1, #2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f8cd 	bl	80097f8 <RCCEx_PLL3_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009664:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009670:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009674:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e000      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
}
 8009682:	4618      	mov	r0, r3
 8009684:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009688:	46bd      	mov	sp, r7
 800968a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400

08009694 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096a2:	4b53      	ldr	r3, [pc, #332]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d101      	bne.n	80096b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e099      	b.n	80097e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096b2:	4b4f      	ldr	r3, [pc, #316]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a4e      	ldr	r2, [pc, #312]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096be:	f7fa fc09 	bl	8003ed4 <HAL_GetTick>
 80096c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096c4:	e008      	b.n	80096d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096c6:	f7fa fc05 	bl	8003ed4 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d901      	bls.n	80096d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e086      	b.n	80097e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096d8:	4b45      	ldr	r3, [pc, #276]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1f0      	bne.n	80096c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80096e4:	4b42      	ldr	r3, [pc, #264]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	031b      	lsls	r3, r3, #12
 80096f2:	493f      	ldr	r1, [pc, #252]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	3b01      	subs	r3, #1
 8009708:	025b      	lsls	r3, r3, #9
 800970a:	b29b      	uxth	r3, r3
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	3b01      	subs	r3, #1
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800971a:	431a      	orrs	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	3b01      	subs	r3, #1
 8009722:	061b      	lsls	r3, r3, #24
 8009724:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009728:	4931      	ldr	r1, [pc, #196]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800972a:	4313      	orrs	r3, r2
 800972c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800972e:	4b30      	ldr	r3, [pc, #192]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	492d      	ldr	r1, [pc, #180]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800973c:	4313      	orrs	r3, r2
 800973e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009740:	4b2b      	ldr	r3, [pc, #172]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009744:	f023 0220 	bic.w	r2, r3, #32
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	4928      	ldr	r1, [pc, #160]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800974e:	4313      	orrs	r3, r2
 8009750:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009752:	4b27      	ldr	r3, [pc, #156]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009756:	4a26      	ldr	r2, [pc, #152]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009758:	f023 0310 	bic.w	r3, r3, #16
 800975c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800975e:	4b24      	ldr	r3, [pc, #144]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009762:	4b24      	ldr	r3, [pc, #144]	@ (80097f4 <RCCEx_PLL2_Config+0x160>)
 8009764:	4013      	ands	r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	69d2      	ldr	r2, [r2, #28]
 800976a:	00d2      	lsls	r2, r2, #3
 800976c:	4920      	ldr	r1, [pc, #128]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800976e:	4313      	orrs	r3, r2
 8009770:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009772:	4b1f      	ldr	r3, [pc, #124]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	4a1e      	ldr	r2, [pc, #120]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009778:	f043 0310 	orr.w	r3, r3, #16
 800977c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009784:	4b1a      	ldr	r3, [pc, #104]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	4a19      	ldr	r2, [pc, #100]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800978a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800978e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009790:	e00f      	b.n	80097b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d106      	bne.n	80097a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009798:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800979a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979c:	4a14      	ldr	r2, [pc, #80]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 800979e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097a4:	e005      	b.n	80097b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80097a6:	4b12      	ldr	r3, [pc, #72]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097aa:	4a11      	ldr	r2, [pc, #68]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80097ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097b2:	4b0f      	ldr	r3, [pc, #60]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a0e      	ldr	r2, [pc, #56]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80097b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80097bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097be:	f7fa fb89 	bl	8003ed4 <HAL_GetTick>
 80097c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097c4:	e008      	b.n	80097d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097c6:	f7fa fb85 	bl	8003ed4 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e006      	b.n	80097e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <RCCEx_PLL2_Config+0x15c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	58024400 	.word	0x58024400
 80097f4:	ffff0007 	.word	0xffff0007

080097f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009806:	4b53      	ldr	r3, [pc, #332]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	f003 0303 	and.w	r3, r3, #3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d101      	bne.n	8009816 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e099      	b.n	800994a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009816:	4b4f      	ldr	r3, [pc, #316]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a4e      	ldr	r2, [pc, #312]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800981c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009822:	f7fa fb57 	bl	8003ed4 <HAL_GetTick>
 8009826:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009828:	e008      	b.n	800983c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800982a:	f7fa fb53 	bl	8003ed4 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	2b02      	cmp	r3, #2
 8009836:	d901      	bls.n	800983c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e086      	b.n	800994a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800983c:	4b45      	ldr	r3, [pc, #276]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1f0      	bne.n	800982a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009848:	4b42      	ldr	r3, [pc, #264]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800984a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800984c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	051b      	lsls	r3, r3, #20
 8009856:	493f      	ldr	r1, [pc, #252]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009858:	4313      	orrs	r3, r2
 800985a:	628b      	str	r3, [r1, #40]	@ 0x28
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	3b01      	subs	r3, #1
 8009862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	3b01      	subs	r3, #1
 800986c:	025b      	lsls	r3, r3, #9
 800986e:	b29b      	uxth	r3, r3
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	3b01      	subs	r3, #1
 8009878:	041b      	lsls	r3, r3, #16
 800987a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	3b01      	subs	r3, #1
 8009886:	061b      	lsls	r3, r3, #24
 8009888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800988c:	4931      	ldr	r1, [pc, #196]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800988e:	4313      	orrs	r3, r2
 8009890:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009892:	4b30      	ldr	r3, [pc, #192]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009896:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	492d      	ldr	r1, [pc, #180]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80098a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	4928      	ldr	r1, [pc, #160]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098b6:	4b27      	ldr	r3, [pc, #156]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098c2:	4b24      	ldr	r3, [pc, #144]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098c6:	4b24      	ldr	r3, [pc, #144]	@ (8009958 <RCCEx_PLL3_Config+0x160>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	69d2      	ldr	r2, [r2, #28]
 80098ce:	00d2      	lsls	r2, r2, #3
 80098d0:	4920      	ldr	r1, [pc, #128]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80098d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098da:	4a1e      	ldr	r2, [pc, #120]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d106      	bne.n	80098f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ec:	4a19      	ldr	r2, [pc, #100]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80098f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098f4:	e00f      	b.n	8009916 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d106      	bne.n	800990a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80098fc:	4b15      	ldr	r3, [pc, #84]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009900:	4a14      	ldr	r2, [pc, #80]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009902:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009908:	e005      	b.n	8009916 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800990a:	4b12      	ldr	r3, [pc, #72]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990e:	4a11      	ldr	r2, [pc, #68]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009910:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009914:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009916:	4b0f      	ldr	r3, [pc, #60]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a0e      	ldr	r2, [pc, #56]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800991c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009922:	f7fa fad7 	bl	8003ed4 <HAL_GetTick>
 8009926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009928:	e008      	b.n	800993c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800992a:	f7fa fad3 	bl	8003ed4 <HAL_GetTick>
 800992e:	4602      	mov	r2, r0
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	2b02      	cmp	r3, #2
 8009936:	d901      	bls.n	800993c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e006      	b.n	800994a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800993c:	4b05      	ldr	r3, [pc, #20]	@ (8009954 <RCCEx_PLL3_Config+0x15c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0f0      	beq.n	800992a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	58024400 	.word	0x58024400
 8009958:	ffff0007 	.word	0xffff0007

0800995c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e049      	b.n	8009a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d106      	bne.n	8009988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f841 	bl	8009a0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f000 f9e8 	bl	8009d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d001      	beq.n	8009a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e054      	b.n	8009ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a26      	ldr	r2, [pc, #152]	@ (8009af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d022      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a62:	d01d      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a22      	ldr	r2, [pc, #136]	@ (8009af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d018      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a21      	ldr	r2, [pc, #132]	@ (8009af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d013      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009afc <HAL_TIM_Base_Start_IT+0xdc>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d00e      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a1e      	ldr	r2, [pc, #120]	@ (8009b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d009      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a1c      	ldr	r2, [pc, #112]	@ (8009b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d004      	beq.n	8009aa0 <HAL_TIM_Base_Start_IT+0x80>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d115      	bne.n	8009acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689a      	ldr	r2, [r3, #8]
 8009aa6:	4b19      	ldr	r3, [pc, #100]	@ (8009b0c <HAL_TIM_Base_Start_IT+0xec>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b06      	cmp	r3, #6
 8009ab0:	d015      	beq.n	8009ade <HAL_TIM_Base_Start_IT+0xbe>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab8:	d011      	beq.n	8009ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f042 0201 	orr.w	r2, r2, #1
 8009ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aca:	e008      	b.n	8009ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f042 0201 	orr.w	r2, r2, #1
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	e000      	b.n	8009ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40010000 	.word	0x40010000
 8009af4:	40000400 	.word	0x40000400
 8009af8:	40000800 	.word	0x40000800
 8009afc:	40000c00 	.word	0x40000c00
 8009b00:	40010400 	.word	0x40010400
 8009b04:	40001800 	.word	0x40001800
 8009b08:	40014000 	.word	0x40014000
 8009b0c:	00010007 	.word	0x00010007

08009b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d020      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f06f 0202 	mvn.w	r2, #2
 8009b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d003      	beq.n	8009b62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f8e9 	bl	8009d32 <HAL_TIM_IC_CaptureCallback>
 8009b60:	e005      	b.n	8009b6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f8db 	bl	8009d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f8ec 	bl	8009d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d020      	beq.n	8009bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01b      	beq.n	8009bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0204 	mvn.w	r2, #4
 8009b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f8c3 	bl	8009d32 <HAL_TIM_IC_CaptureCallback>
 8009bac:	e005      	b.n	8009bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8b5 	bl	8009d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f8c6 	bl	8009d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d020      	beq.n	8009c0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d01b      	beq.n	8009c0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f06f 0208 	mvn.w	r2, #8
 8009bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2204      	movs	r2, #4
 8009be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f89d 	bl	8009d32 <HAL_TIM_IC_CaptureCallback>
 8009bf8:	e005      	b.n	8009c06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f88f 	bl	8009d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f8a0 	bl	8009d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f003 0310 	and.w	r3, r3, #16
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d020      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f003 0310 	and.w	r3, r3, #16
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01b      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0210 	mvn.w	r2, #16
 8009c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2208      	movs	r2, #8
 8009c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f877 	bl	8009d32 <HAL_TIM_IC_CaptureCallback>
 8009c44:	e005      	b.n	8009c52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f869 	bl	8009d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f87a 	bl	8009d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00c      	beq.n	8009c7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d007      	beq.n	8009c7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f06f 0201 	mvn.w	r2, #1
 8009c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7f6 ff7a 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d104      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f913 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f90b 	bl	8009ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f834 	bl	8009d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f003 0320 	and.w	r3, r3, #32
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00c      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d007      	beq.n	8009d16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f06f 0220 	mvn.w	r2, #32
 8009d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f8d3 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d16:	bf00      	nop
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
	...

08009d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a46      	ldr	r2, [pc, #280]	@ (8009e9c <TIM_Base_SetConfig+0x12c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d013      	beq.n	8009db0 <TIM_Base_SetConfig+0x40>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d8e:	d00f      	beq.n	8009db0 <TIM_Base_SetConfig+0x40>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4a43      	ldr	r2, [pc, #268]	@ (8009ea0 <TIM_Base_SetConfig+0x130>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d00b      	beq.n	8009db0 <TIM_Base_SetConfig+0x40>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a42      	ldr	r2, [pc, #264]	@ (8009ea4 <TIM_Base_SetConfig+0x134>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d007      	beq.n	8009db0 <TIM_Base_SetConfig+0x40>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a41      	ldr	r2, [pc, #260]	@ (8009ea8 <TIM_Base_SetConfig+0x138>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d003      	beq.n	8009db0 <TIM_Base_SetConfig+0x40>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a40      	ldr	r2, [pc, #256]	@ (8009eac <TIM_Base_SetConfig+0x13c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d108      	bne.n	8009dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a35      	ldr	r2, [pc, #212]	@ (8009e9c <TIM_Base_SetConfig+0x12c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01f      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd0:	d01b      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a32      	ldr	r2, [pc, #200]	@ (8009ea0 <TIM_Base_SetConfig+0x130>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d017      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a31      	ldr	r2, [pc, #196]	@ (8009ea4 <TIM_Base_SetConfig+0x134>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d013      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a30      	ldr	r2, [pc, #192]	@ (8009ea8 <TIM_Base_SetConfig+0x138>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d00f      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a2f      	ldr	r2, [pc, #188]	@ (8009eac <TIM_Base_SetConfig+0x13c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00b      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a2e      	ldr	r2, [pc, #184]	@ (8009eb0 <TIM_Base_SetConfig+0x140>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d007      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8009eb4 <TIM_Base_SetConfig+0x144>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_Base_SetConfig+0x9a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a2c      	ldr	r2, [pc, #176]	@ (8009eb8 <TIM_Base_SetConfig+0x148>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d108      	bne.n	8009e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	689a      	ldr	r2, [r3, #8]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a16      	ldr	r2, [pc, #88]	@ (8009e9c <TIM_Base_SetConfig+0x12c>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00f      	beq.n	8009e68 <TIM_Base_SetConfig+0xf8>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a18      	ldr	r2, [pc, #96]	@ (8009eac <TIM_Base_SetConfig+0x13c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00b      	beq.n	8009e68 <TIM_Base_SetConfig+0xf8>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4a17      	ldr	r2, [pc, #92]	@ (8009eb0 <TIM_Base_SetConfig+0x140>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d007      	beq.n	8009e68 <TIM_Base_SetConfig+0xf8>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a16      	ldr	r2, [pc, #88]	@ (8009eb4 <TIM_Base_SetConfig+0x144>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d003      	beq.n	8009e68 <TIM_Base_SetConfig+0xf8>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a15      	ldr	r2, [pc, #84]	@ (8009eb8 <TIM_Base_SetConfig+0x148>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d103      	bne.n	8009e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d105      	bne.n	8009e8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f023 0201 	bic.w	r2, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	611a      	str	r2, [r3, #16]
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	40010000 	.word	0x40010000
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40000800 	.word	0x40000800
 8009ea8:	40000c00 	.word	0x40000c00
 8009eac:	40010400 	.word	0x40010400
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <__NVIC_SetPriority>:
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009f04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	db0a      	blt.n	8009f22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	490c      	ldr	r1, [pc, #48]	@ (8009f44 <__NVIC_SetPriority+0x4c>)
 8009f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009f16:	0112      	lsls	r2, r2, #4
 8009f18:	b2d2      	uxtb	r2, r2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009f20:	e00a      	b.n	8009f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	4908      	ldr	r1, [pc, #32]	@ (8009f48 <__NVIC_SetPriority+0x50>)
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	f003 030f 	and.w	r3, r3, #15
 8009f2e:	3b04      	subs	r3, #4
 8009f30:	0112      	lsls	r2, r2, #4
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	440b      	add	r3, r1
 8009f36:	761a      	strb	r2, [r3, #24]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	e000e100 	.word	0xe000e100
 8009f48:	e000ed00 	.word	0xe000ed00

08009f4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f50:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <SysTick_Handler+0x1c>)
 8009f52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f54:	f002 fb1a 	bl	800c58c <xTaskGetSchedulerState>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d001      	beq.n	8009f62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f5e:	f003 fa13 	bl	800d388 <xPortSysTickHandler>
  }
}
 8009f62:	bf00      	nop
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	e000e010 	.word	0xe000e010

08009f6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f70:	2100      	movs	r1, #0
 8009f72:	f06f 0004 	mvn.w	r0, #4
 8009f76:	f7ff ffbf 	bl	8009ef8 <__NVIC_SetPriority>
#endif
}
 8009f7a:	bf00      	nop
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f86:	f3ef 8305 	mrs	r3, IPSR
 8009f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f92:	f06f 0305 	mvn.w	r3, #5
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	e00c      	b.n	8009fb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc4 <osKernelInitialize+0x44>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009fa2:	4b08      	ldr	r3, [pc, #32]	@ (8009fc4 <osKernelInitialize+0x44>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	607b      	str	r3, [r7, #4]
 8009fac:	e002      	b.n	8009fb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fae:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fb4:	687b      	ldr	r3, [r7, #4]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	24000e7c 	.word	0x24000e7c

08009fc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fce:	f3ef 8305 	mrs	r3, IPSR
 8009fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8009fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009fda:	f06f 0305 	mvn.w	r3, #5
 8009fde:	607b      	str	r3, [r7, #4]
 8009fe0:	e010      	b.n	800a004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	@ (800a010 <osKernelStart+0x48>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d109      	bne.n	8009ffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fea:	f7ff ffbf 	bl	8009f6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fee:	4b08      	ldr	r3, [pc, #32]	@ (800a010 <osKernelStart+0x48>)
 8009ff0:	2202      	movs	r2, #2
 8009ff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ff4:	f001 fe16 	bl	800bc24 <vTaskStartScheduler>
      stat = osOK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	607b      	str	r3, [r7, #4]
 8009ffc:	e002      	b.n	800a004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ffe:	f04f 33ff 	mov.w	r3, #4294967295
 800a002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a004:	687b      	ldr	r3, [r7, #4]
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	24000e7c 	.word	0x24000e7c

0800a014 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a014:	b580      	push	{r7, lr}
 800a016:	b08e      	sub	sp, #56	@ 0x38
 800a018:	af04      	add	r7, sp, #16
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a024:	f3ef 8305 	mrs	r3, IPSR
 800a028:	617b      	str	r3, [r7, #20]
  return(result);
 800a02a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d17e      	bne.n	800a12e <osThreadNew+0x11a>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d07b      	beq.n	800a12e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a036:	2380      	movs	r3, #128	@ 0x80
 800a038:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a03a:	2318      	movs	r3, #24
 800a03c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a042:	f04f 33ff 	mov.w	r3, #4294967295
 800a046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d045      	beq.n	800a0da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <osThreadNew+0x48>
        name = attr->name;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d008      	beq.n	800a082 <osThreadNew+0x6e>
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	2b38      	cmp	r3, #56	@ 0x38
 800a074:	d805      	bhi.n	800a082 <osThreadNew+0x6e>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <osThreadNew+0x72>
        return (NULL);
 800a082:	2300      	movs	r3, #0
 800a084:	e054      	b.n	800a130 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	089b      	lsrs	r3, r3, #2
 800a094:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <osThreadNew+0xa8>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	2bab      	cmp	r3, #171	@ 0xab
 800a0a4:	d90a      	bls.n	800a0bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d006      	beq.n	800a0bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <osThreadNew+0xa8>
        mem = 1;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	61bb      	str	r3, [r7, #24]
 800a0ba:	e010      	b.n	800a0de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10c      	bne.n	800a0de <osThreadNew+0xca>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d108      	bne.n	800a0de <osThreadNew+0xca>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <osThreadNew+0xca>
          mem = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	61bb      	str	r3, [r7, #24]
 800a0d8:	e001      	b.n	800a0de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d110      	bne.n	800a106 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0ec:	9202      	str	r2, [sp, #8]
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6a3a      	ldr	r2, [r7, #32]
 800a0f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f001 fb9c 	bl	800b838 <xTaskCreateStatic>
 800a100:	4603      	mov	r3, r0
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	e013      	b.n	800a12e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d110      	bne.n	800a12e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	b29a      	uxth	r2, r3
 800a110:	f107 0310 	add.w	r3, r7, #16
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	9300      	str	r3, [sp, #0]
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f001 fbea 	bl	800b8f8 <xTaskCreate>
 800a124:	4603      	mov	r3, r0
 800a126:	2b01      	cmp	r3, #1
 800a128:	d001      	beq.n	800a12e <osThreadNew+0x11a>
            hTask = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a12e:	693b      	ldr	r3, [r7, #16]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3728      	adds	r7, #40	@ 0x28
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a140:	f3ef 8305 	mrs	r3, IPSR
 800a144:	60bb      	str	r3, [r7, #8]
  return(result);
 800a146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <osDelay+0x1c>
    stat = osErrorISR;
 800a14c:	f06f 0305 	mvn.w	r3, #5
 800a150:	60fb      	str	r3, [r7, #12]
 800a152:	e007      	b.n	800a164 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f001 fd2a 	bl	800bbb8 <vTaskDelay>
    }
  }

  return (stat);
 800a164:	68fb      	ldr	r3, [r7, #12]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a16e:	b580      	push	{r7, lr}
 800a170:	b08a      	sub	sp, #40	@ 0x28
 800a172:	af02      	add	r7, sp, #8
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a17e:	f3ef 8305 	mrs	r3, IPSR
 800a182:	613b      	str	r3, [r7, #16]
  return(result);
 800a184:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a186:	2b00      	cmp	r3, #0
 800a188:	d175      	bne.n	800a276 <osSemaphoreNew+0x108>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d072      	beq.n	800a276 <osSemaphoreNew+0x108>
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d86e      	bhi.n	800a276 <osSemaphoreNew+0x108>
    mem = -1;
 800a198:	f04f 33ff 	mov.w	r3, #4294967295
 800a19c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d015      	beq.n	800a1d0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <osSemaphoreNew+0x4c>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b4f      	cmp	r3, #79	@ 0x4f
 800a1b2:	d902      	bls.n	800a1ba <osSemaphoreNew+0x4c>
        mem = 1;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	e00c      	b.n	800a1d4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d108      	bne.n	800a1d4 <osSemaphoreNew+0x66>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d104      	bne.n	800a1d4 <osSemaphoreNew+0x66>
          mem = 0;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
 800a1ce:	e001      	b.n	800a1d4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d04c      	beq.n	800a276 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d128      	bne.n	800a234 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d10a      	bne.n	800a1fe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	2203      	movs	r2, #3
 800a1ee:	9200      	str	r2, [sp, #0]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	f000 fb5d 	bl	800a8b4 <xQueueGenericCreateStatic>
 800a1fa:	61f8      	str	r0, [r7, #28]
 800a1fc:	e005      	b.n	800a20a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a1fe:	2203      	movs	r2, #3
 800a200:	2100      	movs	r1, #0
 800a202:	2001      	movs	r0, #1
 800a204:	f000 fbd3 	bl	800a9ae <xQueueGenericCreate>
 800a208:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d022      	beq.n	800a256 <osSemaphoreNew+0xe8>
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d01f      	beq.n	800a256 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a216:	2300      	movs	r3, #0
 800a218:	2200      	movs	r2, #0
 800a21a:	2100      	movs	r1, #0
 800a21c:	69f8      	ldr	r0, [r7, #28]
 800a21e:	f000 fc93 	bl	800ab48 <xQueueGenericSend>
 800a222:	4603      	mov	r3, r0
 800a224:	2b01      	cmp	r3, #1
 800a226:	d016      	beq.n	800a256 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a228:	69f8      	ldr	r0, [r7, #28]
 800a22a:	f001 f931 	bl	800b490 <vQueueDelete>
            hSemaphore = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	61fb      	str	r3, [r7, #28]
 800a232:	e010      	b.n	800a256 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d108      	bne.n	800a24c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	461a      	mov	r2, r3
 800a240:	68b9      	ldr	r1, [r7, #8]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 fc11 	bl	800aa6a <xQueueCreateCountingSemaphoreStatic>
 800a248:	61f8      	str	r0, [r7, #28]
 800a24a:	e004      	b.n	800a256 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 fc44 	bl	800aadc <xQueueCreateCountingSemaphore>
 800a254:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00c      	beq.n	800a276 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osSemaphoreNew+0xfc>
          name = attr->name;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e001      	b.n	800a26e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a26a:	2300      	movs	r3, #0
 800a26c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a26e:	6979      	ldr	r1, [r7, #20]
 800a270:	69f8      	ldr	r0, [r7, #28]
 800a272:	f001 fa59 	bl	800b728 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a276:	69fb      	ldr	r3, [r7, #28]
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3720      	adds	r7, #32
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a28e:	2300      	movs	r3, #0
 800a290:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a298:	f06f 0303 	mvn.w	r3, #3
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	e039      	b.n	800a314 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a0:	f3ef 8305 	mrs	r3, IPSR
 800a2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d022      	beq.n	800a2f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a2b2:	f06f 0303 	mvn.w	r3, #3
 800a2b6:	617b      	str	r3, [r7, #20]
 800a2b8:	e02c      	b.n	800a314 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f001 f860 	bl	800b38c <xQueueReceiveFromISR>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d003      	beq.n	800a2da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a2d2:	f06f 0302 	mvn.w	r3, #2
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	e01c      	b.n	800a314 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d019      	beq.n	800a314 <osSemaphoreAcquire+0x94>
 800a2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800a320 <osSemaphoreAcquire+0xa0>)
 800a2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	e010      	b.n	800a314 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6938      	ldr	r0, [r7, #16]
 800a2f6:	f000 ff39 	bl	800b16c <xQueueSemaphoreTake>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d009      	beq.n	800a314 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a306:	f06f 0301 	mvn.w	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e002      	b.n	800a314 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a30e:	f06f 0302 	mvn.w	r3, #2
 800a312:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a314:	697b      	ldr	r3, [r7, #20]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a33a:	f06f 0303 	mvn.w	r3, #3
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e02c      	b.n	800a39c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a342:	f3ef 8305 	mrs	r3, IPSR
 800a346:	60fb      	str	r3, [r7, #12]
  return(result);
 800a348:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d01a      	beq.n	800a384 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a34e:	2300      	movs	r3, #0
 800a350:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a352:	f107 0308 	add.w	r3, r7, #8
 800a356:	4619      	mov	r1, r3
 800a358:	6938      	ldr	r0, [r7, #16]
 800a35a:	f000 fd95 	bl	800ae88 <xQueueGiveFromISR>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b01      	cmp	r3, #1
 800a362:	d003      	beq.n	800a36c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a364:	f06f 0302 	mvn.w	r3, #2
 800a368:	617b      	str	r3, [r7, #20]
 800a36a:	e017      	b.n	800a39c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d014      	beq.n	800a39c <osSemaphoreRelease+0x78>
 800a372:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <osSemaphoreRelease+0x84>)
 800a374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a378:	601a      	str	r2, [r3, #0]
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	e00b      	b.n	800a39c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a384:	2300      	movs	r3, #0
 800a386:	2200      	movs	r2, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f000 fbdc 	bl	800ab48 <xQueueGenericSend>
 800a390:	4603      	mov	r3, r0
 800a392:	2b01      	cmp	r3, #1
 800a394:	d002      	beq.n	800a39c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a396:	f06f 0302 	mvn.w	r3, #2
 800a39a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a39c:	697b      	ldr	r3, [r7, #20]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	@ 0x28
 800a3b0:	af02      	add	r7, sp, #8
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3bc:	f3ef 8305 	mrs	r3, IPSR
 800a3c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a3c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d15f      	bne.n	800a488 <osMessageQueueNew+0xdc>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d05c      	beq.n	800a488 <osMessageQueueNew+0xdc>
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d059      	beq.n	800a488 <osMessageQueueNew+0xdc>
    mem = -1;
 800a3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d029      	beq.n	800a434 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d012      	beq.n	800a40e <osMessageQueueNew+0x62>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	2b4f      	cmp	r3, #79	@ 0x4f
 800a3ee:	d90e      	bls.n	800a40e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	695a      	ldr	r2, [r3, #20]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	fb01 f303 	mul.w	r3, r1, r3
 800a404:	429a      	cmp	r2, r3
 800a406:	d302      	bcc.n	800a40e <osMessageQueueNew+0x62>
        mem = 1;
 800a408:	2301      	movs	r3, #1
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e014      	b.n	800a438 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <osMessageQueueNew+0x8c>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10c      	bne.n	800a438 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a422:	2b00      	cmp	r3, #0
 800a424:	d108      	bne.n	800a438 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d104      	bne.n	800a438 <osMessageQueueNew+0x8c>
          mem = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	61bb      	str	r3, [r7, #24]
 800a432:	e001      	b.n	800a438 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d10b      	bne.n	800a456 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	2100      	movs	r1, #0
 800a448:	9100      	str	r1, [sp, #0]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fa31 	bl	800a8b4 <xQueueGenericCreateStatic>
 800a452:	61f8      	str	r0, [r7, #28]
 800a454:	e008      	b.n	800a468 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a45c:	2200      	movs	r2, #0
 800a45e:	68b9      	ldr	r1, [r7, #8]
 800a460:	68f8      	ldr	r0, [r7, #12]
 800a462:	f000 faa4 	bl	800a9ae <xQueueGenericCreate>
 800a466:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	e001      	b.n	800a480 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a480:	6979      	ldr	r1, [r7, #20]
 800a482:	69f8      	ldr	r0, [r7, #28]
 800a484:	f001 f950 	bl	800b728 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a488:	69fb      	ldr	r3, [r7, #28]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b088      	sub	sp, #32
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	603b      	str	r3, [r7, #0]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4ac:	f3ef 8305 	mrs	r3, IPSR
 800a4b0:	617b      	str	r3, [r7, #20]
  return(result);
 800a4b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d028      	beq.n	800a50a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <osMessageQueuePut+0x36>
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <osMessageQueuePut+0x36>
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a4ca:	f06f 0303 	mvn.w	r3, #3
 800a4ce:	61fb      	str	r3, [r7, #28]
 800a4d0:	e038      	b.n	800a544 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a4d6:	f107 0210 	add.w	r2, r7, #16
 800a4da:	2300      	movs	r3, #0
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	69b8      	ldr	r0, [r7, #24]
 800a4e0:	f000 fc34 	bl	800ad4c <xQueueGenericSendFromISR>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d003      	beq.n	800a4f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a4ea:	f06f 0302 	mvn.w	r3, #2
 800a4ee:	61fb      	str	r3, [r7, #28]
 800a4f0:	e028      	b.n	800a544 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d025      	beq.n	800a544 <osMessageQueuePut+0xb0>
 800a4f8:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <osMessageQueuePut+0xbc>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	e01c      	b.n	800a544 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <osMessageQueuePut+0x82>
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d103      	bne.n	800a51e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a516:	f06f 0303 	mvn.w	r3, #3
 800a51a:	61fb      	str	r3, [r7, #28]
 800a51c:	e012      	b.n	800a544 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a51e:	2300      	movs	r3, #0
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	68b9      	ldr	r1, [r7, #8]
 800a524:	69b8      	ldr	r0, [r7, #24]
 800a526:	f000 fb0f 	bl	800ab48 <xQueueGenericSend>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d009      	beq.n	800a544 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a536:	f06f 0301 	mvn.w	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	e002      	b.n	800a544 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a53e:	f06f 0302 	mvn.w	r3, #2
 800a542:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a544:	69fb      	ldr	r3, [r7, #28]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3720      	adds	r7, #32
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a566:	2300      	movs	r3, #0
 800a568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a56a:	f3ef 8305 	mrs	r3, IPSR
 800a56e:	617b      	str	r3, [r7, #20]
  return(result);
 800a570:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a572:	2b00      	cmp	r3, #0
 800a574:	d028      	beq.n	800a5c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <osMessageQueueGet+0x34>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <osMessageQueueGet+0x34>
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a588:	f06f 0303 	mvn.w	r3, #3
 800a58c:	61fb      	str	r3, [r7, #28]
 800a58e:	e037      	b.n	800a600 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a590:	2300      	movs	r3, #0
 800a592:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a594:	f107 0310 	add.w	r3, r7, #16
 800a598:	461a      	mov	r2, r3
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	69b8      	ldr	r0, [r7, #24]
 800a59e:	f000 fef5 	bl	800b38c <xQueueReceiveFromISR>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d003      	beq.n	800a5b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a5a8:	f06f 0302 	mvn.w	r3, #2
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	e027      	b.n	800a600 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d024      	beq.n	800a600 <osMessageQueueGet+0xac>
 800a5b6:	4b15      	ldr	r3, [pc, #84]	@ (800a60c <osMessageQueueGet+0xb8>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	e01b      	b.n	800a600 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <osMessageQueueGet+0x80>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d103      	bne.n	800a5dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a5d4:	f06f 0303 	mvn.w	r3, #3
 800a5d8:	61fb      	str	r3, [r7, #28]
 800a5da:	e011      	b.n	800a600 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	68b9      	ldr	r1, [r7, #8]
 800a5e0:	69b8      	ldr	r0, [r7, #24]
 800a5e2:	f000 fce1 	bl	800afa8 <xQueueReceive>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d009      	beq.n	800a600 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a5f2:	f06f 0301 	mvn.w	r3, #1
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e002      	b.n	800a600 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a5fa:	f06f 0302 	mvn.w	r3, #2
 800a5fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a600:	69fb      	ldr	r3, [r7, #28]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3720      	adds	r7, #32
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4a07      	ldr	r2, [pc, #28]	@ (800a63c <vApplicationGetIdleTaskMemory+0x2c>)
 800a620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	4a06      	ldr	r2, [pc, #24]	@ (800a640 <vApplicationGetIdleTaskMemory+0x30>)
 800a626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2280      	movs	r2, #128	@ 0x80
 800a62c:	601a      	str	r2, [r3, #0]
}
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	24000e80 	.word	0x24000e80
 800a640:	24000f2c 	.word	0x24000f2c

0800a644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a07      	ldr	r2, [pc, #28]	@ (800a670 <vApplicationGetTimerTaskMemory+0x2c>)
 800a654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	4a06      	ldr	r2, [pc, #24]	@ (800a674 <vApplicationGetTimerTaskMemory+0x30>)
 800a65a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a662:	601a      	str	r2, [r3, #0]
}
 800a664:	bf00      	nop
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	2400112c 	.word	0x2400112c
 800a674:	240011d8 	.word	0x240011d8

0800a678 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f103 0208 	add.w	r2, r3, #8
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f103 0208 	add.w	r2, r3, #8
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f103 0208 	add.w	r2, r3, #8
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a730:	d103      	bne.n	800a73a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	e00c      	b.n	800a754 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3308      	adds	r3, #8
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	e002      	b.n	800a748 <vListInsert+0x2e>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	d2f6      	bcs.n	800a742 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	601a      	str	r2, [r3, #0]
}
 800a780:	bf00      	nop
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6892      	ldr	r2, [r2, #8]
 800a7a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	6852      	ldr	r2, [r2, #4]
 800a7ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d103      	bne.n	800a7c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	1e5a      	subs	r2, r3, #1
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10b      	bne.n	800a80c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	e7fd      	b.n	800a808 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a80c:	f002 fd2c 	bl	800d268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a818:	68f9      	ldr	r1, [r7, #12]
 800a81a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a81c:	fb01 f303 	mul.w	r3, r1, r3
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	3b01      	subs	r3, #1
 800a83e:	68f9      	ldr	r1, [r7, #12]
 800a840:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a842:	fb01 f303 	mul.w	r3, r1, r3
 800a846:	441a      	add	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	22ff      	movs	r2, #255	@ 0xff
 800a850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	22ff      	movs	r2, #255	@ 0xff
 800a858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d114      	bne.n	800a88c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d01a      	beq.n	800a8a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3310      	adds	r3, #16
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fcc4 	bl	800c1fc <xTaskRemoveFromEventList>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d012      	beq.n	800a8a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a87a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <xQueueGenericReset+0xd0>)
 800a87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	e009      	b.n	800a8a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3310      	adds	r3, #16
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fef1 	bl	800a678 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3324      	adds	r3, #36	@ 0x24
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7ff feec 	bl	800a678 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8a0:	f002 fd14 	bl	800d2cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8a4:	2301      	movs	r3, #1
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08e      	sub	sp, #56	@ 0x38
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10b      	bne.n	800a8e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <xQueueGenericCreateStatic+0x56>
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <xQueueGenericCreateStatic+0x5a>
 800a90a:	2301      	movs	r3, #1
 800a90c:	e000      	b.n	800a910 <xQueueGenericCreateStatic+0x5c>
 800a90e:	2300      	movs	r3, #0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10b      	bne.n	800a92c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	623b      	str	r3, [r7, #32]
}
 800a926:	bf00      	nop
 800a928:	bf00      	nop
 800a92a:	e7fd      	b.n	800a928 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <xQueueGenericCreateStatic+0x84>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <xQueueGenericCreateStatic+0x88>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <xQueueGenericCreateStatic+0x8a>
 800a93c:	2300      	movs	r3, #0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10b      	bne.n	800a95a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	61fb      	str	r3, [r7, #28]
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop
 800a958:	e7fd      	b.n	800a956 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a95a:	2350      	movs	r3, #80	@ 0x50
 800a95c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b50      	cmp	r3, #80	@ 0x50
 800a962:	d00b      	beq.n	800a97c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61bb      	str	r3, [r7, #24]
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a97c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00d      	beq.n	800a9a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a990:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	4613      	mov	r3, r2
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	68b9      	ldr	r1, [r7, #8]
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f000 f840 	bl	800aa24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3730      	adds	r7, #48	@ 0x30
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b08a      	sub	sp, #40	@ 0x28
 800a9b2:	af02      	add	r7, sp, #8
 800a9b4:	60f8      	str	r0, [r7, #12]
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10b      	bne.n	800a9da <xQueueGenericCreate+0x2c>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	613b      	str	r3, [r7, #16]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
 800a9e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	3350      	adds	r3, #80	@ 0x50
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f002 fd5f 	bl	800d4ac <pvPortMalloc>
 800a9ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d011      	beq.n	800aa1a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	3350      	adds	r3, #80	@ 0x50
 800a9fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa08:	79fa      	ldrb	r2, [r7, #7]
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	4613      	mov	r3, r2
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f000 f805 	bl	800aa24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa1a:	69bb      	ldr	r3, [r7, #24]
	}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3720      	adds	r7, #32
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	e002      	b.n	800aa46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa52:	2101      	movs	r1, #1
 800aa54:	69b8      	ldr	r0, [r7, #24]
 800aa56:	f7ff fec3 	bl	800a7e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	78fa      	ldrb	r2, [r7, #3]
 800aa5e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa62:	bf00      	nop
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b08a      	sub	sp, #40	@ 0x28
 800aa6e:	af02      	add	r7, sp, #8
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10b      	bne.n	800aa94 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800aa7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	61bb      	str	r3, [r7, #24]
}
 800aa8e:	bf00      	nop
 800aa90:	bf00      	nop
 800aa92:	e7fd      	b.n	800aa90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d90b      	bls.n	800aab4 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	617b      	str	r3, [r7, #20]
}
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	e7fd      	b.n	800aab0 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aab4:	2302      	movs	r3, #2
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	2100      	movs	r1, #0
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f7ff fef8 	bl	800a8b4 <xQueueGenericCreateStatic>
 800aac4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aad2:	69fb      	ldr	r3, [r7, #28]
	}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3720      	adds	r7, #32
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10b      	bne.n	800ab04 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	613b      	str	r3, [r7, #16]
}
 800aafe:	bf00      	nop
 800ab00:	bf00      	nop
 800ab02:	e7fd      	b.n	800ab00 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d90b      	bls.n	800ab24 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60fb      	str	r3, [r7, #12]
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	e7fd      	b.n	800ab20 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ab24:	2202      	movs	r2, #2
 800ab26:	2100      	movs	r1, #0
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7ff ff40 	bl	800a9ae <xQueueGenericCreate>
 800ab2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ab3c:	697b      	ldr	r3, [r7, #20]
	}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08e      	sub	sp, #56	@ 0x38
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
 800ab54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab56:	2300      	movs	r3, #0
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10b      	bne.n	800ab7c <xQueueGenericSend+0x34>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	e7fd      	b.n	800ab78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d103      	bne.n	800ab8a <xQueueGenericSend+0x42>
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <xQueueGenericSend+0x46>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e000      	b.n	800ab90 <xQueueGenericSend+0x48>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <xQueueGenericSend+0x64>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d103      	bne.n	800abba <xQueueGenericSend+0x72>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d101      	bne.n	800abbe <xQueueGenericSend+0x76>
 800abba:	2301      	movs	r3, #1
 800abbc:	e000      	b.n	800abc0 <xQueueGenericSend+0x78>
 800abbe:	2300      	movs	r3, #0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10b      	bne.n	800abdc <xQueueGenericSend+0x94>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	623b      	str	r3, [r7, #32]
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	e7fd      	b.n	800abd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abdc:	f001 fcd6 	bl	800c58c <xTaskGetSchedulerState>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <xQueueGenericSend+0xa4>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <xQueueGenericSend+0xa8>
 800abec:	2301      	movs	r3, #1
 800abee:	e000      	b.n	800abf2 <xQueueGenericSend+0xaa>
 800abf0:	2300      	movs	r3, #0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10b      	bne.n	800ac0e <xQueueGenericSend+0xc6>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	61fb      	str	r3, [r7, #28]
}
 800ac08:	bf00      	nop
 800ac0a:	bf00      	nop
 800ac0c:	e7fd      	b.n	800ac0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac0e:	f002 fb2b 	bl	800d268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d302      	bcc.n	800ac24 <xQueueGenericSend+0xdc>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d129      	bne.n	800ac78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac2a:	f000 fc6d 	bl	800b508 <prvCopyDataToQueue>
 800ac2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d010      	beq.n	800ac5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	3324      	adds	r3, #36	@ 0x24
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f001 fadd 	bl	800c1fc <xTaskRemoveFromEventList>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d013      	beq.n	800ac70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac48:	4b3f      	ldr	r3, [pc, #252]	@ (800ad48 <xQueueGenericSend+0x200>)
 800ac4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	e00a      	b.n	800ac70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d007      	beq.n	800ac70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac60:	4b39      	ldr	r3, [pc, #228]	@ (800ad48 <xQueueGenericSend+0x200>)
 800ac62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac66:	601a      	str	r2, [r3, #0]
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac70:	f002 fb2c 	bl	800d2cc <vPortExitCritical>
				return pdPASS;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e063      	b.n	800ad40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d103      	bne.n	800ac86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac7e:	f002 fb25 	bl	800d2cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	e05c      	b.n	800ad40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac8c:	f107 0314 	add.w	r3, r7, #20
 800ac90:	4618      	mov	r0, r3
 800ac92:	f001 fb17 	bl	800c2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac9a:	f002 fb17 	bl	800d2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac9e:	f001 f837 	bl	800bd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aca2:	f002 fae1 	bl	800d268 <vPortEnterCritical>
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acac:	b25b      	sxtb	r3, r3
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb2:	d103      	bne.n	800acbc <xQueueGenericSend+0x174>
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acc2:	b25b      	sxtb	r3, r3
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d103      	bne.n	800acd2 <xQueueGenericSend+0x18a>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acd2:	f002 fafb 	bl	800d2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acd6:	1d3a      	adds	r2, r7, #4
 800acd8:	f107 0314 	add.w	r3, r7, #20
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f001 fb06 	bl	800c2f0 <xTaskCheckForTimeOut>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d124      	bne.n	800ad34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acec:	f000 fd04 	bl	800b6f8 <prvIsQueueFull>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d018      	beq.n	800ad28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	3310      	adds	r3, #16
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f001 fa2a 	bl	800c158 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad06:	f000 fc8f 	bl	800b628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad0a:	f001 f80f 	bl	800bd2c <xTaskResumeAll>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f47f af7c 	bne.w	800ac0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ad16:	4b0c      	ldr	r3, [pc, #48]	@ (800ad48 <xQueueGenericSend+0x200>)
 800ad18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	e772      	b.n	800ac0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad2a:	f000 fc7d 	bl	800b628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad2e:	f000 fffd 	bl	800bd2c <xTaskResumeAll>
 800ad32:	e76c      	b.n	800ac0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad36:	f000 fc77 	bl	800b628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad3a:	f000 fff7 	bl	800bd2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3738      	adds	r7, #56	@ 0x38
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b090      	sub	sp, #64	@ 0x40
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	e7fd      	b.n	800ad78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d103      	bne.n	800ad8a <xQueueGenericSendFromISR+0x3e>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <xQueueGenericSendFromISR+0x42>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e000      	b.n	800ad90 <xQueueGenericSendFromISR+0x44>
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10b      	bne.n	800adac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ada6:	bf00      	nop
 800ada8:	bf00      	nop
 800adaa:	e7fd      	b.n	800ada8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d103      	bne.n	800adba <xQueueGenericSendFromISR+0x6e>
 800adb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <xQueueGenericSendFromISR+0x72>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueGenericSendFromISR+0x74>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10b      	bne.n	800addc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	623b      	str	r3, [r7, #32]
}
 800add6:	bf00      	nop
 800add8:	bf00      	nop
 800adda:	e7fd      	b.n	800add8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800addc:	f002 fb24 	bl	800d428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ade0:	f3ef 8211 	mrs	r2, BASEPRI
 800ade4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	61fa      	str	r2, [r7, #28]
 800adf6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adf8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d302      	bcc.n	800ae0e <xQueueGenericSendFromISR+0xc2>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	2b02      	cmp	r3, #2
 800ae0c:	d12f      	bne.n	800ae6e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae24:	f000 fb70 	bl	800b508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae28:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ae2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae30:	d112      	bne.n	800ae58 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	3324      	adds	r3, #36	@ 0x24
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f001 f9dc 	bl	800c1fc <xTaskRemoveFromEventList>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00e      	beq.n	800ae68 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	e007      	b.n	800ae68 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	b25a      	sxtb	r2, r3
 800ae62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ae6c:	e001      	b.n	800ae72 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae74:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3740      	adds	r7, #64	@ 0x40
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	@ 0x38
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10b      	bne.n	800aeb4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	623b      	str	r3, [r7, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	bf00      	nop
 800aeb2:	e7fd      	b.n	800aeb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00b      	beq.n	800aed4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	61fb      	str	r3, [r7, #28]
}
 800aece:	bf00      	nop
 800aed0:	bf00      	nop
 800aed2:	e7fd      	b.n	800aed0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <xQueueGiveFromISR+0x5c>
 800aedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <xQueueGiveFromISR+0x60>
 800aee4:	2301      	movs	r3, #1
 800aee6:	e000      	b.n	800aeea <xQueueGiveFromISR+0x62>
 800aee8:	2300      	movs	r3, #0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10b      	bne.n	800af06 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	61bb      	str	r3, [r7, #24]
}
 800af00:	bf00      	nop
 800af02:	bf00      	nop
 800af04:	e7fd      	b.n	800af02 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af06:	f002 fa8f 	bl	800d428 <vPortValidateInterruptPriority>
	__asm volatile
 800af0a:	f3ef 8211 	mrs	r2, BASEPRI
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	617a      	str	r2, [r7, #20]
 800af20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800af22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af32:	429a      	cmp	r2, r3
 800af34:	d22b      	bcs.n	800af8e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d112      	bne.n	800af78 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af56:	2b00      	cmp	r3, #0
 800af58:	d016      	beq.n	800af88 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5c:	3324      	adds	r3, #36	@ 0x24
 800af5e:	4618      	mov	r0, r3
 800af60:	f001 f94c 	bl	800c1fc <xTaskRemoveFromEventList>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00e      	beq.n	800af88 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	2201      	movs	r2, #1
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	e007      	b.n	800af88 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af7c:	3301      	adds	r3, #1
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	b25a      	sxtb	r2, r3
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af88:	2301      	movs	r3, #1
 800af8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af8c:	e001      	b.n	800af92 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34
 800af92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f383 8811 	msr	BASEPRI, r3
}
 800af9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3738      	adds	r7, #56	@ 0x38
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08c      	sub	sp, #48	@ 0x30
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afb4:	2300      	movs	r3, #0
 800afb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10b      	bne.n	800afda <xQueueReceive+0x32>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	623b      	str	r3, [r7, #32]
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	e7fd      	b.n	800afd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d103      	bne.n	800afe8 <xQueueReceive+0x40>
 800afe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <xQueueReceive+0x44>
 800afe8:	2301      	movs	r3, #1
 800afea:	e000      	b.n	800afee <xQueueReceive+0x46>
 800afec:	2300      	movs	r3, #0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d10b      	bne.n	800b00a <xQueueReceive+0x62>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	61fb      	str	r3, [r7, #28]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b00a:	f001 fabf 	bl	800c58c <xTaskGetSchedulerState>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <xQueueReceive+0x72>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <xQueueReceive+0x76>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <xQueueReceive+0x78>
 800b01e:	2300      	movs	r3, #0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10b      	bne.n	800b03c <xQueueReceive+0x94>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	61bb      	str	r3, [r7, #24]
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	e7fd      	b.n	800b038 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b03c:	f002 f914 	bl	800d268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b044:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d01f      	beq.n	800b08c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b050:	f000 fac4 	bl	800b5dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	1e5a      	subs	r2, r3, #1
 800b058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	691b      	ldr	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00f      	beq.n	800b084 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	3310      	adds	r3, #16
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 f8c7 	bl	800c1fc <xTaskRemoveFromEventList>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d007      	beq.n	800b084 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b074:	4b3c      	ldr	r3, [pc, #240]	@ (800b168 <xQueueReceive+0x1c0>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b084:	f002 f922 	bl	800d2cc <vPortExitCritical>
				return pdPASS;
 800b088:	2301      	movs	r3, #1
 800b08a:	e069      	b.n	800b160 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b092:	f002 f91b 	bl	800d2cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b096:	2300      	movs	r3, #0
 800b098:	e062      	b.n	800b160 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0a0:	f107 0310 	add.w	r3, r7, #16
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 f90d 	bl	800c2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0ae:	f002 f90d 	bl	800d2cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0b2:	f000 fe2d 	bl	800bd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0b6:	f002 f8d7 	bl	800d268 <vPortEnterCritical>
 800b0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0c0:	b25b      	sxtb	r3, r3
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d103      	bne.n	800b0d0 <xQueueReceive+0x128>
 800b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0d6:	b25b      	sxtb	r3, r3
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d103      	bne.n	800b0e6 <xQueueReceive+0x13e>
 800b0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0e6:	f002 f8f1 	bl	800d2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0ea:	1d3a      	adds	r2, r7, #4
 800b0ec:	f107 0310 	add.w	r3, r7, #16
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f001 f8fc 	bl	800c2f0 <xTaskCheckForTimeOut>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d123      	bne.n	800b146 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b100:	f000 fae4 	bl	800b6cc <prvIsQueueEmpty>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d017      	beq.n	800b13a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b10c:	3324      	adds	r3, #36	@ 0x24
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	4611      	mov	r1, r2
 800b112:	4618      	mov	r0, r3
 800b114:	f001 f820 	bl	800c158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b11a:	f000 fa85 	bl	800b628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b11e:	f000 fe05 	bl	800bd2c <xTaskResumeAll>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d189      	bne.n	800b03c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b128:	4b0f      	ldr	r3, [pc, #60]	@ (800b168 <xQueueReceive+0x1c0>)
 800b12a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	e780      	b.n	800b03c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b13a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b13c:	f000 fa74 	bl	800b628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b140:	f000 fdf4 	bl	800bd2c <xTaskResumeAll>
 800b144:	e77a      	b.n	800b03c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b146:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b148:	f000 fa6e 	bl	800b628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b14c:	f000 fdee 	bl	800bd2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b152:	f000 fabb 	bl	800b6cc <prvIsQueueEmpty>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f43f af6f 	beq.w	800b03c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b15e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b160:	4618      	mov	r0, r3
 800b162:	3730      	adds	r7, #48	@ 0x30
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08e      	sub	sp, #56	@ 0x38
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b17e:	2300      	movs	r3, #0
 800b180:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10b      	bne.n	800b1a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	623b      	str	r3, [r7, #32]
}
 800b19a:	bf00      	nop
 800b19c:	bf00      	nop
 800b19e:	e7fd      	b.n	800b19c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00b      	beq.n	800b1c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ac:	f383 8811 	msr	BASEPRI, r3
 800b1b0:	f3bf 8f6f 	isb	sy
 800b1b4:	f3bf 8f4f 	dsb	sy
 800b1b8:	61fb      	str	r3, [r7, #28]
}
 800b1ba:	bf00      	nop
 800b1bc:	bf00      	nop
 800b1be:	e7fd      	b.n	800b1bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1c0:	f001 f9e4 	bl	800c58c <xTaskGetSchedulerState>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <xQueueSemaphoreTake+0x64>
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <xQueueSemaphoreTake+0x68>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e000      	b.n	800b1d6 <xQueueSemaphoreTake+0x6a>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10b      	bne.n	800b1f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	61bb      	str	r3, [r7, #24]
}
 800b1ec:	bf00      	nop
 800b1ee:	bf00      	nop
 800b1f0:	e7fd      	b.n	800b1ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1f2:	f002 f839 	bl	800d268 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d024      	beq.n	800b24c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	1e5a      	subs	r2, r3, #1
 800b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b208:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d104      	bne.n	800b21c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b212:	f001 fb35 	bl	800c880 <pvTaskIncrementMutexHeldCount>
 800b216:	4602      	mov	r2, r0
 800b218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00f      	beq.n	800b244 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b226:	3310      	adds	r3, #16
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 ffe7 	bl	800c1fc <xTaskRemoveFromEventList>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d007      	beq.n	800b244 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b234:	4b54      	ldr	r3, [pc, #336]	@ (800b388 <xQueueSemaphoreTake+0x21c>)
 800b236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b244:	f002 f842 	bl	800d2cc <vPortExitCritical>
				return pdPASS;
 800b248:	2301      	movs	r3, #1
 800b24a:	e098      	b.n	800b37e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d112      	bne.n	800b278 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	617b      	str	r3, [r7, #20]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b270:	f002 f82c 	bl	800d2cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b274:	2300      	movs	r3, #0
 800b276:	e082      	b.n	800b37e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b27e:	f107 030c 	add.w	r3, r7, #12
 800b282:	4618      	mov	r0, r3
 800b284:	f001 f81e 	bl	800c2c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b288:	2301      	movs	r3, #1
 800b28a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b28c:	f002 f81e 	bl	800d2cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b290:	f000 fd3e 	bl	800bd10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b294:	f001 ffe8 	bl	800d268 <vPortEnterCritical>
 800b298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b29e:	b25b      	sxtb	r3, r3
 800b2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a4:	d103      	bne.n	800b2ae <xQueueSemaphoreTake+0x142>
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2b4:	b25b      	sxtb	r3, r3
 800b2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ba:	d103      	bne.n	800b2c4 <xQueueSemaphoreTake+0x158>
 800b2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2c4:	f002 f802 	bl	800d2cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2c8:	463a      	mov	r2, r7
 800b2ca:	f107 030c 	add.w	r3, r7, #12
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 f80d 	bl	800c2f0 <xTaskCheckForTimeOut>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d132      	bne.n	800b342 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b2de:	f000 f9f5 	bl	800b6cc <prvIsQueueEmpty>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d026      	beq.n	800b336 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d109      	bne.n	800b304 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800b2f0:	f001 ffba 	bl	800d268 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 f965 	bl	800c5c8 <xTaskPriorityInherit>
 800b2fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800b300:	f001 ffe4 	bl	800d2cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b306:	3324      	adds	r3, #36	@ 0x24
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f000 ff23 	bl	800c158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b314:	f000 f988 	bl	800b628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b318:	f000 fd08 	bl	800bd2c <xTaskResumeAll>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f47f af67 	bne.w	800b1f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800b324:	4b18      	ldr	r3, [pc, #96]	@ (800b388 <xQueueSemaphoreTake+0x21c>)
 800b326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b32a:	601a      	str	r2, [r3, #0]
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	e75d      	b.n	800b1f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b338:	f000 f976 	bl	800b628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b33c:	f000 fcf6 	bl	800bd2c <xTaskResumeAll>
 800b340:	e757      	b.n	800b1f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b342:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b344:	f000 f970 	bl	800b628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b348:	f000 fcf0 	bl	800bd2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b34c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b34e:	f000 f9bd 	bl	800b6cc <prvIsQueueEmpty>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	f43f af4c 	beq.w	800b1f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00d      	beq.n	800b37c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800b360:	f001 ff82 	bl	800d268 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b366:	f000 f8b7 	bl	800b4d8 <prvGetDisinheritPriorityAfterTimeout>
 800b36a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b372:	4618      	mov	r0, r3
 800b374:	f001 fa00 	bl	800c778 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b378:	f001 ffa8 	bl	800d2cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b37c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3738      	adds	r7, #56	@ 0x38
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08e      	sub	sp, #56	@ 0x38
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	623b      	str	r3, [r7, #32]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d103      	bne.n	800b3c8 <xQueueReceiveFromISR+0x3c>
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <xQueueReceiveFromISR+0x40>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <xQueueReceiveFromISR+0x42>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10b      	bne.n	800b3ea <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	61fb      	str	r3, [r7, #28]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3ea:	f002 f81d 	bl	800d428 <vPortValidateInterruptPriority>
	__asm volatile
 800b3ee:	f3ef 8211 	mrs	r2, BASEPRI
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	61ba      	str	r2, [r7, #24]
 800b404:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b406:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b408:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	2b00      	cmp	r3, #0
 800b414:	d02f      	beq.n	800b476 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b41c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b424:	f000 f8da 	bl	800b5dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42a:	1e5a      	subs	r2, r3, #1
 800b42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b430:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b438:	d112      	bne.n	800b460 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d016      	beq.n	800b470 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	3310      	adds	r3, #16
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fed8 	bl	800c1fc <xTaskRemoveFromEventList>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00e      	beq.n	800b470 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00b      	beq.n	800b470 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	e007      	b.n	800b470 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b464:	3301      	adds	r3, #1
 800b466:	b2db      	uxtb	r3, r3
 800b468:	b25a      	sxtb	r2, r3
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b470:	2301      	movs	r3, #1
 800b472:	637b      	str	r3, [r7, #52]	@ 0x34
 800b474:	e001      	b.n	800b47a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b476:	2300      	movs	r3, #0
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
 800b47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f383 8811 	msr	BASEPRI, r3
}
 800b484:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3738      	adds	r7, #56	@ 0x38
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10b      	bne.n	800b4ba <vQueueDelete+0x2a>
	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	60bb      	str	r3, [r7, #8]
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	e7fd      	b.n	800b4b6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f95e 	bl	800b77c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f002 f8bc 	bl	800d648 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b4d0:	bf00      	nop
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d006      	beq.n	800b4f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	e001      	b.n	800b4fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
	}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b514:	2300      	movs	r3, #0
 800b516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10d      	bne.n	800b542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d14d      	bne.n	800b5ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	4618      	mov	r0, r3
 800b534:	f001 f8b0 	bl	800c698 <xTaskPriorityDisinherit>
 800b538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	609a      	str	r2, [r3, #8]
 800b540:	e043      	b.n	800b5ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d119      	bne.n	800b57c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6858      	ldr	r0, [r3, #4]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b550:	461a      	mov	r2, r3
 800b552:	68b9      	ldr	r1, [r7, #8]
 800b554:	f01a f82d 	bl	80255b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b560:	441a      	add	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	685a      	ldr	r2, [r3, #4]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d32b      	bcc.n	800b5ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	e026      	b.n	800b5ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	68d8      	ldr	r0, [r3, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b584:	461a      	mov	r2, r3
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	f01a f813 	bl	80255b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	68da      	ldr	r2, [r3, #12]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b594:	425b      	negs	r3, r3
 800b596:	441a      	add	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d207      	bcs.n	800b5b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	689a      	ldr	r2, [r3, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b0:	425b      	negs	r3, r3
 800b5b2:	441a      	add	r2, r3
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d105      	bne.n	800b5ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b5d2:	697b      	ldr	r3, [r7, #20]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3718      	adds	r7, #24
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d018      	beq.n	800b620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f6:	441a      	add	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68da      	ldr	r2, [r3, #12]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	429a      	cmp	r2, r3
 800b606:	d303      	bcc.n	800b610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68d9      	ldr	r1, [r3, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b618:	461a      	mov	r2, r3
 800b61a:	6838      	ldr	r0, [r7, #0]
 800b61c:	f019 ffc9 	bl	80255b2 <memcpy>
	}
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b630:	f001 fe1a 	bl	800d268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b63a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b63c:	e011      	b.n	800b662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b642:	2b00      	cmp	r3, #0
 800b644:	d012      	beq.n	800b66c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	3324      	adds	r3, #36	@ 0x24
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 fdd6 	bl	800c1fc <xTaskRemoveFromEventList>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d001      	beq.n	800b65a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b656:	f000 feaf 	bl	800c3b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b666:	2b00      	cmp	r3, #0
 800b668:	dce9      	bgt.n	800b63e <prvUnlockQueue+0x16>
 800b66a:	e000      	b.n	800b66e <prvUnlockQueue+0x46>
					break;
 800b66c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	22ff      	movs	r2, #255	@ 0xff
 800b672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b676:	f001 fe29 	bl	800d2cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b67a:	f001 fdf5 	bl	800d268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b686:	e011      	b.n	800b6ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	691b      	ldr	r3, [r3, #16]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d012      	beq.n	800b6b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3310      	adds	r3, #16
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fdb1 	bl	800c1fc <xTaskRemoveFromEventList>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6a0:	f000 fe8a 	bl	800c3b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dce9      	bgt.n	800b688 <prvUnlockQueue+0x60>
 800b6b4:	e000      	b.n	800b6b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	22ff      	movs	r2, #255	@ 0xff
 800b6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b6c0:	f001 fe04 	bl	800d2cc <vPortExitCritical>
}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6d4:	f001 fdc8 	bl	800d268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	e001      	b.n	800b6ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6ea:	f001 fdef 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b700:	f001 fdb2 	bl	800d268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d102      	bne.n	800b716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b710:	2301      	movs	r3, #1
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	e001      	b.n	800b71a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b71a:	f001 fdd7 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800b71e:	68fb      	ldr	r3, [r7, #12]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e014      	b.n	800b762 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b738:	4a0f      	ldr	r2, [pc, #60]	@ (800b778 <vQueueAddToRegistry+0x50>)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10b      	bne.n	800b75c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b744:	490c      	ldr	r1, [pc, #48]	@ (800b778 <vQueueAddToRegistry+0x50>)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b74e:	4a0a      	ldr	r2, [pc, #40]	@ (800b778 <vQueueAddToRegistry+0x50>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	4413      	add	r3, r2
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b75a:	e006      	b.n	800b76a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b07      	cmp	r3, #7
 800b766:	d9e7      	bls.n	800b738 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	240015d8 	.word	0x240015d8

0800b77c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b784:	2300      	movs	r3, #0
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	e016      	b.n	800b7b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b78a:	4a10      	ldr	r2, [pc, #64]	@ (800b7cc <vQueueUnregisterQueue+0x50>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	4413      	add	r3, r2
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d10b      	bne.n	800b7b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b79a:	4a0c      	ldr	r2, [pc, #48]	@ (800b7cc <vQueueUnregisterQueue+0x50>)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2100      	movs	r1, #0
 800b7a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b7a4:	4a09      	ldr	r2, [pc, #36]	@ (800b7cc <vQueueUnregisterQueue+0x50>)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	605a      	str	r2, [r3, #4]
				break;
 800b7b0:	e006      	b.n	800b7c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b07      	cmp	r3, #7
 800b7bc:	d9e5      	bls.n	800b78a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	240015d8 	.word	0x240015d8

0800b7d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7e0:	f001 fd42 	bl	800d268 <vPortEnterCritical>
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7ea:	b25b      	sxtb	r3, r3
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d103      	bne.n	800b7fa <vQueueWaitForMessageRestricted+0x2a>
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b800:	b25b      	sxtb	r3, r3
 800b802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b806:	d103      	bne.n	800b810 <vQueueWaitForMessageRestricted+0x40>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b810:	f001 fd5c 	bl	800d2cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	3324      	adds	r3, #36	@ 0x24
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	68b9      	ldr	r1, [r7, #8]
 800b824:	4618      	mov	r0, r3
 800b826:	f000 fcbd 	bl	800c1a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b82a:	6978      	ldr	r0, [r7, #20]
 800b82c:	f7ff fefc 	bl	800b628 <prvUnlockQueue>
	}
 800b830:	bf00      	nop
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08e      	sub	sp, #56	@ 0x38
 800b83c:	af04      	add	r7, sp, #16
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10b      	bne.n	800b864 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	623b      	str	r3, [r7, #32]
}
 800b85e:	bf00      	nop
 800b860:	bf00      	nop
 800b862:	e7fd      	b.n	800b860 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	61fb      	str	r3, [r7, #28]
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	e7fd      	b.n	800b87e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b882:	23ac      	movs	r3, #172	@ 0xac
 800b884:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2bac      	cmp	r3, #172	@ 0xac
 800b88a:	d00b      	beq.n	800b8a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	61bb      	str	r3, [r7, #24]
}
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
 800b8a2:	e7fd      	b.n	800b8a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b8a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01e      	beq.n	800b8ea <xTaskCreateStatic+0xb2>
 800b8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d01b      	beq.n	800b8ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	2202      	movs	r2, #2
 800b8c0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9303      	str	r3, [sp, #12]
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	9302      	str	r3, [sp, #8]
 800b8cc:	f107 0314 	add.w	r3, r7, #20
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f851 	bl	800b984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b8e4:	f000 f8f8 	bl	800bad8 <prvAddNewTaskToReadyList>
 800b8e8:	e001      	b.n	800b8ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8ee:	697b      	ldr	r3, [r7, #20]
	}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3728      	adds	r7, #40	@ 0x28
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b08c      	sub	sp, #48	@ 0x30
 800b8fc:	af04      	add	r7, sp, #16
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	4613      	mov	r3, r2
 800b906:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f001 fdcd 	bl	800d4ac <pvPortMalloc>
 800b912:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00e      	beq.n	800b938 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b91a:	20ac      	movs	r0, #172	@ 0xac
 800b91c:	f001 fdc6 	bl	800d4ac <pvPortMalloc>
 800b920:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b92e:	e005      	b.n	800b93c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b930:	6978      	ldr	r0, [r7, #20]
 800b932:	f001 fe89 	bl	800d648 <vPortFree>
 800b936:	e001      	b.n	800b93c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b938:	2300      	movs	r3, #0
 800b93a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d017      	beq.n	800b972 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b94a:	88fa      	ldrh	r2, [r7, #6]
 800b94c:	2300      	movs	r3, #0
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f000 f80f 	bl	800b984 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b966:	69f8      	ldr	r0, [r7, #28]
 800b968:	f000 f8b6 	bl	800bad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b96c:	2301      	movs	r3, #1
 800b96e:	61bb      	str	r3, [r7, #24]
 800b970:	e002      	b.n	800b978 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295
 800b976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b978:	69bb      	ldr	r3, [r7, #24]
	}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b088      	sub	sp, #32
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	461a      	mov	r2, r3
 800b99c:	21a5      	movs	r1, #165	@ 0xa5
 800b99e:	f019 fce2 	bl	8025366 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b9ac:	440b      	add	r3, r1
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	f003 0307 	and.w	r3, r3, #7
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00b      	beq.n	800b9de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	617b      	str	r3, [r7, #20]
}
 800b9d8:	bf00      	nop
 800b9da:	bf00      	nop
 800b9dc:	e7fd      	b.n	800b9da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01f      	beq.n	800ba24 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	e012      	b.n	800ba10 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	7819      	ldrb	r1, [r3, #0]
 800b9f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3334      	adds	r3, #52	@ 0x34
 800b9fa:	460a      	mov	r2, r1
 800b9fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d006      	beq.n	800ba18 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	61fb      	str	r3, [r7, #28]
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	2b0f      	cmp	r3, #15
 800ba14:	d9e9      	bls.n	800b9ea <prvInitialiseNewTask+0x66>
 800ba16:	e000      	b.n	800ba1a <prvInitialiseNewTask+0x96>
			{
				break;
 800ba18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ba22:	e003      	b.n	800ba2c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba2e:	2b37      	cmp	r3, #55	@ 0x37
 800ba30:	d901      	bls.n	800ba36 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba32:	2337      	movs	r3, #55	@ 0x37
 800ba34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba40:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba44:	2200      	movs	r2, #0
 800ba46:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4a:	3304      	adds	r3, #4
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fe33 	bl	800a6b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba54:	3318      	adds	r3, #24
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fe2e 	bl	800a6b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ba72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba74:	2200      	movs	r2, #0
 800ba76:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba8a:	3358      	adds	r3, #88	@ 0x58
 800ba8c:	224c      	movs	r2, #76	@ 0x4c
 800ba8e:	2100      	movs	r1, #0
 800ba90:	4618      	mov	r0, r3
 800ba92:	f019 fc68 	bl	8025366 <memset>
 800ba96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba98:	4a0c      	ldr	r2, [pc, #48]	@ (800bacc <prvInitialiseNewTask+0x148>)
 800ba9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9e:	4a0c      	ldr	r2, [pc, #48]	@ (800bad0 <prvInitialiseNewTask+0x14c>)
 800baa0:	661a      	str	r2, [r3, #96]	@ 0x60
 800baa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa4:	4a0b      	ldr	r2, [pc, #44]	@ (800bad4 <prvInitialiseNewTask+0x150>)
 800baa6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	68f9      	ldr	r1, [r7, #12]
 800baac:	69b8      	ldr	r0, [r7, #24]
 800baae:	f001 faa9 	bl	800d004 <pxPortInitialiseStack>
 800bab2:	4602      	mov	r2, r0
 800bab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800babe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bac2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bac4:	bf00      	nop
 800bac6:	3720      	adds	r7, #32
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	2401c46c 	.word	0x2401c46c
 800bad0:	2401c4d4 	.word	0x2401c4d4
 800bad4:	2401c53c 	.word	0x2401c53c

0800bad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bae0:	f001 fbc2 	bl	800d268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bae4:	4b2d      	ldr	r3, [pc, #180]	@ (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a2c      	ldr	r2, [pc, #176]	@ (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800baec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800baee:	4b2c      	ldr	r3, [pc, #176]	@ (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baf6:	4a2a      	ldr	r2, [pc, #168]	@ (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bafc:	4b27      	ldr	r3, [pc, #156]	@ (800bb9c <prvAddNewTaskToReadyList+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d110      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb04:	f000 fc7e 	bl	800c404 <prvInitialiseTaskLists>
 800bb08:	e00d      	b.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb0a:	4b26      	ldr	r3, [pc, #152]	@ (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d109      	bne.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb12:	4b23      	ldr	r3, [pc, #140]	@ (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d802      	bhi.n	800bb26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb20:	4a1f      	ldr	r2, [pc, #124]	@ (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb26:	4b20      	ldr	r3, [pc, #128]	@ (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	4a1e      	ldr	r2, [pc, #120]	@ (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb30:	4b1d      	ldr	r3, [pc, #116]	@ (800bba8 <prvAddNewTaskToReadyList+0xd0>)
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	@ (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d903      	bls.n	800bb4c <prvAddNewTaskToReadyList+0x74>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	4a18      	ldr	r2, [pc, #96]	@ (800bbac <prvAddNewTaskToReadyList+0xd4>)
 800bb4a:	6013      	str	r3, [r2, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4a15      	ldr	r2, [pc, #84]	@ (800bbb0 <prvAddNewTaskToReadyList+0xd8>)
 800bb5a:	441a      	add	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3304      	adds	r3, #4
 800bb60:	4619      	mov	r1, r3
 800bb62:	4610      	mov	r0, r2
 800bb64:	f7fe fdb5 	bl	800a6d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb68:	f001 fbb0 	bl	800d2cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bba4 <prvAddNewTaskToReadyList+0xcc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb74:	4b0a      	ldr	r3, [pc, #40]	@ (800bba0 <prvAddNewTaskToReadyList+0xc8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d207      	bcs.n	800bb92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb82:	4b0c      	ldr	r3, [pc, #48]	@ (800bbb4 <prvAddNewTaskToReadyList+0xdc>)
 800bb84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	24001aec 	.word	0x24001aec
 800bba0:	24001618 	.word	0x24001618
 800bba4:	24001af8 	.word	0x24001af8
 800bba8:	24001b08 	.word	0x24001b08
 800bbac:	24001af4 	.word	0x24001af4
 800bbb0:	2400161c 	.word	0x2400161c
 800bbb4:	e000ed04 	.word	0xe000ed04

0800bbb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d018      	beq.n	800bbfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bbca:	4b14      	ldr	r3, [pc, #80]	@ (800bc1c <vTaskDelay+0x64>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00b      	beq.n	800bbea <vTaskDelay+0x32>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop
 800bbe8:	e7fd      	b.n	800bbe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bbea:	f000 f891 	bl	800bd10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bbee:	2100      	movs	r1, #0
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fe59 	bl	800c8a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbf6:	f000 f899 	bl	800bd2c <xTaskResumeAll>
 800bbfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d107      	bne.n	800bc12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bc02:	4b07      	ldr	r3, [pc, #28]	@ (800bc20 <vTaskDelay+0x68>)
 800bc04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc08:	601a      	str	r2, [r3, #0]
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc12:	bf00      	nop
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	24001b14 	.word	0x24001b14
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	@ 0x28
 800bc28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc32:	463a      	mov	r2, r7
 800bc34:	1d39      	adds	r1, r7, #4
 800bc36:	f107 0308 	add.w	r3, r7, #8
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fe fce8 	bl	800a610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68ba      	ldr	r2, [r7, #8]
 800bc46:	9202      	str	r2, [sp, #8]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	460a      	mov	r2, r1
 800bc52:	4927      	ldr	r1, [pc, #156]	@ (800bcf0 <vTaskStartScheduler+0xcc>)
 800bc54:	4827      	ldr	r0, [pc, #156]	@ (800bcf4 <vTaskStartScheduler+0xd0>)
 800bc56:	f7ff fdef 	bl	800b838 <xTaskCreateStatic>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4a26      	ldr	r2, [pc, #152]	@ (800bcf8 <vTaskStartScheduler+0xd4>)
 800bc5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc60:	4b25      	ldr	r3, [pc, #148]	@ (800bcf8 <vTaskStartScheduler+0xd4>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d002      	beq.n	800bc6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	e001      	b.n	800bc72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d102      	bne.n	800bc7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc78:	f000 fe6a 	bl	800c950 <xTimerCreateTimerTask>
 800bc7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d121      	bne.n	800bcc8 <vTaskStartScheduler+0xa4>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	613b      	str	r3, [r7, #16]
}
 800bc96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc98:	4b18      	ldr	r3, [pc, #96]	@ (800bcfc <vTaskStartScheduler+0xd8>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3358      	adds	r3, #88	@ 0x58
 800bc9e:	4a18      	ldr	r2, [pc, #96]	@ (800bd00 <vTaskStartScheduler+0xdc>)
 800bca0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bca2:	4b18      	ldr	r3, [pc, #96]	@ (800bd04 <vTaskStartScheduler+0xe0>)
 800bca4:	f04f 32ff 	mov.w	r2, #4294967295
 800bca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcaa:	4b17      	ldr	r3, [pc, #92]	@ (800bd08 <vTaskStartScheduler+0xe4>)
 800bcac:	2201      	movs	r2, #1
 800bcae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bcb0:	4b16      	ldr	r3, [pc, #88]	@ (800bd0c <vTaskStartScheduler+0xe8>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 800bcb6:	4b11      	ldr	r3, [pc, #68]	@ (800bcfc <vTaskStartScheduler+0xd8>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2100      	movs	r1, #0
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 f9b9 	bl	800c034 <xTaskCallApplicationTaskHook>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bcc2:	f001 fa2d 	bl	800d120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bcc6:	e00f      	b.n	800bce8 <vTaskStartScheduler+0xc4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d10b      	bne.n	800bce8 <vTaskStartScheduler+0xc4>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <vTaskStartScheduler+0xc0>
}
 800bce8:	bf00      	nop
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	08026074 	.word	0x08026074
 800bcf4:	0800c3d1 	.word	0x0800c3d1
 800bcf8:	24001b10 	.word	0x24001b10
 800bcfc:	24001618 	.word	0x24001618
 800bd00:	240000bc 	.word	0x240000bc
 800bd04:	24001b0c 	.word	0x24001b0c
 800bd08:	24001af8 	.word	0x24001af8
 800bd0c:	24001af0 	.word	0x24001af0

0800bd10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd14:	4b04      	ldr	r3, [pc, #16]	@ (800bd28 <vTaskSuspendAll+0x18>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	4a03      	ldr	r2, [pc, #12]	@ (800bd28 <vTaskSuspendAll+0x18>)
 800bd1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd1e:	bf00      	nop
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	24001b14 	.word	0x24001b14

0800bd2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd3a:	4b42      	ldr	r3, [pc, #264]	@ (800be44 <xTaskResumeAll+0x118>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <xTaskResumeAll+0x2e>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	603b      	str	r3, [r7, #0]
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	e7fd      	b.n	800bd56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd5a:	f001 fa85 	bl	800d268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd5e:	4b39      	ldr	r3, [pc, #228]	@ (800be44 <xTaskResumeAll+0x118>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	4a37      	ldr	r2, [pc, #220]	@ (800be44 <xTaskResumeAll+0x118>)
 800bd66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd68:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <xTaskResumeAll+0x118>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d162      	bne.n	800be36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd70:	4b35      	ldr	r3, [pc, #212]	@ (800be48 <xTaskResumeAll+0x11c>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d05e      	beq.n	800be36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd78:	e02f      	b.n	800bdda <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7a:	4b34      	ldr	r3, [pc, #208]	@ (800be4c <xTaskResumeAll+0x120>)
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3318      	adds	r3, #24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fe fd00 	bl	800a78c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	4618      	mov	r0, r3
 800bd92:	f7fe fcfb 	bl	800a78c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9a:	4b2d      	ldr	r3, [pc, #180]	@ (800be50 <xTaskResumeAll+0x124>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d903      	bls.n	800bdaa <xTaskResumeAll+0x7e>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	4a2a      	ldr	r2, [pc, #168]	@ (800be50 <xTaskResumeAll+0x124>)
 800bda8:	6013      	str	r3, [r2, #0]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdae:	4613      	mov	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4a27      	ldr	r2, [pc, #156]	@ (800be54 <xTaskResumeAll+0x128>)
 800bdb8:	441a      	add	r2, r3
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	f7fe fc86 	bl	800a6d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdca:	4b23      	ldr	r3, [pc, #140]	@ (800be58 <xTaskResumeAll+0x12c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d302      	bcc.n	800bdda <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bdd4:	4b21      	ldr	r3, [pc, #132]	@ (800be5c <xTaskResumeAll+0x130>)
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdda:	4b1c      	ldr	r3, [pc, #112]	@ (800be4c <xTaskResumeAll+0x120>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1cb      	bne.n	800bd7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d001      	beq.n	800bdec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bde8:	f000 fbb0 	bl	800c54c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bdec:	4b1c      	ldr	r3, [pc, #112]	@ (800be60 <xTaskResumeAll+0x134>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d010      	beq.n	800be1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bdf8:	f000 f846 	bl	800be88 <xTaskIncrementTick>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800be02:	4b16      	ldr	r3, [pc, #88]	@ (800be5c <xTaskResumeAll+0x130>)
 800be04:	2201      	movs	r2, #1
 800be06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1f1      	bne.n	800bdf8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800be14:	4b12      	ldr	r3, [pc, #72]	@ (800be60 <xTaskResumeAll+0x134>)
 800be16:	2200      	movs	r2, #0
 800be18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be1a:	4b10      	ldr	r3, [pc, #64]	@ (800be5c <xTaskResumeAll+0x130>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d009      	beq.n	800be36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be22:	2301      	movs	r3, #1
 800be24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be26:	4b0f      	ldr	r3, [pc, #60]	@ (800be64 <xTaskResumeAll+0x138>)
 800be28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be36:	f001 fa49 	bl	800d2cc <vPortExitCritical>

	return xAlreadyYielded;
 800be3a:	68bb      	ldr	r3, [r7, #8]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	24001b14 	.word	0x24001b14
 800be48:	24001aec 	.word	0x24001aec
 800be4c:	24001aac 	.word	0x24001aac
 800be50:	24001af4 	.word	0x24001af4
 800be54:	2400161c 	.word	0x2400161c
 800be58:	24001618 	.word	0x24001618
 800be5c:	24001b00 	.word	0x24001b00
 800be60:	24001afc 	.word	0x24001afc
 800be64:	e000ed04 	.word	0xe000ed04

0800be68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be6e:	4b05      	ldr	r3, [pc, #20]	@ (800be84 <xTaskGetTickCount+0x1c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be74:	687b      	ldr	r3, [r7, #4]
}
 800be76:	4618      	mov	r0, r3
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	24001af0 	.word	0x24001af0

0800be88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be92:	4b4f      	ldr	r3, [pc, #316]	@ (800bfd0 <xTaskIncrementTick+0x148>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f040 8090 	bne.w	800bfbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be9c:	4b4d      	ldr	r3, [pc, #308]	@ (800bfd4 <xTaskIncrementTick+0x14c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bea4:	4a4b      	ldr	r2, [pc, #300]	@ (800bfd4 <xTaskIncrementTick+0x14c>)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d121      	bne.n	800bef4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800beb0:	4b49      	ldr	r3, [pc, #292]	@ (800bfd8 <xTaskIncrementTick+0x150>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	603b      	str	r3, [r7, #0]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <xTaskIncrementTick+0x46>
 800bed2:	4b41      	ldr	r3, [pc, #260]	@ (800bfd8 <xTaskIncrementTick+0x150>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	4b40      	ldr	r3, [pc, #256]	@ (800bfdc <xTaskIncrementTick+0x154>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a3e      	ldr	r2, [pc, #248]	@ (800bfd8 <xTaskIncrementTick+0x150>)
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	4a3e      	ldr	r2, [pc, #248]	@ (800bfdc <xTaskIncrementTick+0x154>)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6013      	str	r3, [r2, #0]
 800bee6:	4b3e      	ldr	r3, [pc, #248]	@ (800bfe0 <xTaskIncrementTick+0x158>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	4a3c      	ldr	r2, [pc, #240]	@ (800bfe0 <xTaskIncrementTick+0x158>)
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	f000 fb2c 	bl	800c54c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bef4:	4b3b      	ldr	r3, [pc, #236]	@ (800bfe4 <xTaskIncrementTick+0x15c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	429a      	cmp	r2, r3
 800befc:	d349      	bcc.n	800bf92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befe:	4b36      	ldr	r3, [pc, #216]	@ (800bfd8 <xTaskIncrementTick+0x150>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf08:	4b36      	ldr	r3, [pc, #216]	@ (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0e:	601a      	str	r2, [r3, #0]
					break;
 800bf10:	e03f      	b.n	800bf92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf12:	4b31      	ldr	r3, [pc, #196]	@ (800bfd8 <xTaskIncrementTick+0x150>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d203      	bcs.n	800bf32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf2a:	4a2e      	ldr	r2, [pc, #184]	@ (800bfe4 <xTaskIncrementTick+0x15c>)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf30:	e02f      	b.n	800bf92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fc28 	bl	800a78c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d004      	beq.n	800bf4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	3318      	adds	r3, #24
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fe fc1f 	bl	800a78c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf52:	4b25      	ldr	r3, [pc, #148]	@ (800bfe8 <xTaskIncrementTick+0x160>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d903      	bls.n	800bf62 <xTaskIncrementTick+0xda>
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5e:	4a22      	ldr	r2, [pc, #136]	@ (800bfe8 <xTaskIncrementTick+0x160>)
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4a1f      	ldr	r2, [pc, #124]	@ (800bfec <xTaskIncrementTick+0x164>)
 800bf70:	441a      	add	r2, r3
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	3304      	adds	r3, #4
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe fbaa 	bl	800a6d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf82:	4b1b      	ldr	r3, [pc, #108]	@ (800bff0 <xTaskIncrementTick+0x168>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d3b8      	bcc.n	800befe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf90:	e7b5      	b.n	800befe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf92:	4b17      	ldr	r3, [pc, #92]	@ (800bff0 <xTaskIncrementTick+0x168>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf98:	4914      	ldr	r1, [pc, #80]	@ (800bfec <xTaskIncrementTick+0x164>)
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d901      	bls.n	800bfae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfae:	4b11      	ldr	r3, [pc, #68]	@ (800bff4 <xTaskIncrementTick+0x16c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	617b      	str	r3, [r7, #20]
 800bfba:	e004      	b.n	800bfc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfbc:	4b0e      	ldr	r3, [pc, #56]	@ (800bff8 <xTaskIncrementTick+0x170>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	4a0d      	ldr	r2, [pc, #52]	@ (800bff8 <xTaskIncrementTick+0x170>)
 800bfc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfc6:	697b      	ldr	r3, [r7, #20]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	24001b14 	.word	0x24001b14
 800bfd4:	24001af0 	.word	0x24001af0
 800bfd8:	24001aa4 	.word	0x24001aa4
 800bfdc:	24001aa8 	.word	0x24001aa8
 800bfe0:	24001b04 	.word	0x24001b04
 800bfe4:	24001b0c 	.word	0x24001b0c
 800bfe8:	24001af4 	.word	0x24001af4
 800bfec:	2400161c 	.word	0x2400161c
 800bff0:	24001618 	.word	0x24001618
 800bff4:	24001b00 	.word	0x24001b00
 800bff8:	24001afc 	.word	0x24001afc

0800bffc <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c00c:	4b08      	ldr	r3, [pc, #32]	@ (800c030 <vTaskSetApplicationTaskTag+0x34>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e001      	b.n	800c018 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800c018:	f001 f926 	bl	800d268 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		taskEXIT_CRITICAL();
 800c022:	f001 f953 	bl	800d2cc <vPortExitCritical>
	}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	24001618 	.word	0x24001618

0800c034 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d103      	bne.n	800c04c <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = pxCurrentTCB;
 800c044:	4b0b      	ldr	r3, [pc, #44]	@ (800c074 <xTaskCallApplicationTaskHook+0x40>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	60fb      	str	r3, [r7, #12]
 800c04a:	e001      	b.n	800c050 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = xTask;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c05c:	6838      	ldr	r0, [r7, #0]
 800c05e:	4798      	blx	r3
 800c060:	60b8      	str	r0, [r7, #8]
 800c062:	e001      	b.n	800c068 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 800c064:	2300      	movs	r3, #0
 800c066:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 800c068:	68bb      	ldr	r3, [r7, #8]
	}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	24001618 	.word	0x24001618

0800c078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c07e:	4b30      	ldr	r3, [pc, #192]	@ (800c140 <vTaskSwitchContext+0xc8>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c086:	4b2f      	ldr	r3, [pc, #188]	@ (800c144 <vTaskSwitchContext+0xcc>)
 800c088:	2201      	movs	r2, #1
 800c08a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c08c:	e053      	b.n	800c136 <vTaskSwitchContext+0xbe>
		xYieldPending = pdFALSE;
 800c08e:	4b2d      	ldr	r3, [pc, #180]	@ (800c144 <vTaskSwitchContext+0xcc>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c094:	4b2c      	ldr	r3, [pc, #176]	@ (800c148 <vTaskSwitchContext+0xd0>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2101      	movs	r1, #1
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff ffca 	bl	800c034 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c14c <vTaskSwitchContext+0xd4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e011      	b.n	800c0cc <vTaskSwitchContext+0x54>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10b      	bne.n	800c0c6 <vTaskSwitchContext+0x4e>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	607b      	str	r3, [r7, #4]
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <vTaskSwitchContext+0x4a>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	4920      	ldr	r1, [pc, #128]	@ (800c150 <vTaskSwitchContext+0xd8>)
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d0e3      	beq.n	800c0a8 <vTaskSwitchContext+0x30>
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4a19      	ldr	r2, [pc, #100]	@ (800c150 <vTaskSwitchContext+0xd8>)
 800c0ec:	4413      	add	r3, r2
 800c0ee:	60bb      	str	r3, [r7, #8]
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	605a      	str	r2, [r3, #4]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3308      	adds	r3, #8
 800c102:	429a      	cmp	r2, r3
 800c104:	d104      	bne.n	800c110 <vTaskSwitchContext+0x98>
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	605a      	str	r2, [r3, #4]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	4a0c      	ldr	r2, [pc, #48]	@ (800c148 <vTaskSwitchContext+0xd0>)
 800c118:	6013      	str	r3, [r2, #0]
 800c11a:	4a0c      	ldr	r2, [pc, #48]	@ (800c14c <vTaskSwitchContext+0xd4>)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800c120:	4b09      	ldr	r3, [pc, #36]	@ (800c148 <vTaskSwitchContext+0xd0>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2100      	movs	r1, #0
 800c126:	4618      	mov	r0, r3
 800c128:	f7ff ff84 	bl	800c034 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c12c:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <vTaskSwitchContext+0xd0>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	3358      	adds	r3, #88	@ 0x58
 800c132:	4a08      	ldr	r2, [pc, #32]	@ (800c154 <vTaskSwitchContext+0xdc>)
 800c134:	6013      	str	r3, [r2, #0]
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	24001b14 	.word	0x24001b14
 800c144:	24001b00 	.word	0x24001b00
 800c148:	24001618 	.word	0x24001618
 800c14c:	24001af4 	.word	0x24001af4
 800c150:	2400161c 	.word	0x2400161c
 800c154:	240000bc 	.word	0x240000bc

0800c158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10b      	bne.n	800c180 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	60fb      	str	r3, [r7, #12]
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	e7fd      	b.n	800c17c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <vTaskPlaceOnEventList+0x48>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3318      	adds	r3, #24
 800c186:	4619      	mov	r1, r3
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7fe fac6 	bl	800a71a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c18e:	2101      	movs	r1, #1
 800c190:	6838      	ldr	r0, [r7, #0]
 800c192:	f000 fb89 	bl	800c8a8 <prvAddCurrentTaskToDelayedList>
}
 800c196:	bf00      	nop
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	24001618 	.word	0x24001618

0800c1a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10b      	bne.n	800c1ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ba:	f383 8811 	msr	BASEPRI, r3
 800c1be:	f3bf 8f6f 	isb	sy
 800c1c2:	f3bf 8f4f 	dsb	sy
 800c1c6:	617b      	str	r3, [r7, #20]
}
 800c1c8:	bf00      	nop
 800c1ca:	bf00      	nop
 800c1cc:	e7fd      	b.n	800c1ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3318      	adds	r3, #24
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7fe fa7b 	bl	800a6d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	68b8      	ldr	r0, [r7, #8]
 800c1ec:	f000 fb5c 	bl	800c8a8 <prvAddCurrentTaskToDelayedList>
	}
 800c1f0:	bf00      	nop
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	24001618 	.word	0x24001618

0800c1fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10b      	bne.n	800c22a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	60fb      	str	r3, [r7, #12]
}
 800c224:	bf00      	nop
 800c226:	bf00      	nop
 800c228:	e7fd      	b.n	800c226 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	3318      	adds	r3, #24
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe faac 	bl	800a78c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c234:	4b1d      	ldr	r3, [pc, #116]	@ (800c2ac <xTaskRemoveFromEventList+0xb0>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11d      	bne.n	800c278 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	3304      	adds	r3, #4
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe faa3 	bl	800a78c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24a:	4b19      	ldr	r3, [pc, #100]	@ (800c2b0 <xTaskRemoveFromEventList+0xb4>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d903      	bls.n	800c25a <xTaskRemoveFromEventList+0x5e>
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c256:	4a16      	ldr	r2, [pc, #88]	@ (800c2b0 <xTaskRemoveFromEventList+0xb4>)
 800c258:	6013      	str	r3, [r2, #0]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c25e:	4613      	mov	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4413      	add	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4a13      	ldr	r2, [pc, #76]	@ (800c2b4 <xTaskRemoveFromEventList+0xb8>)
 800c268:	441a      	add	r2, r3
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	3304      	adds	r3, #4
 800c26e:	4619      	mov	r1, r3
 800c270:	4610      	mov	r0, r2
 800c272:	f7fe fa2e 	bl	800a6d2 <vListInsertEnd>
 800c276:	e005      	b.n	800c284 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3318      	adds	r3, #24
 800c27c:	4619      	mov	r1, r3
 800c27e:	480e      	ldr	r0, [pc, #56]	@ (800c2b8 <xTaskRemoveFromEventList+0xbc>)
 800c280:	f7fe fa27 	bl	800a6d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c288:	4b0c      	ldr	r3, [pc, #48]	@ (800c2bc <xTaskRemoveFromEventList+0xc0>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28e:	429a      	cmp	r2, r3
 800c290:	d905      	bls.n	800c29e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c292:	2301      	movs	r3, #1
 800c294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c296:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c0 <xTaskRemoveFromEventList+0xc4>)
 800c298:	2201      	movs	r2, #1
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	e001      	b.n	800c2a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c2a2:	697b      	ldr	r3, [r7, #20]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	24001b14 	.word	0x24001b14
 800c2b0:	24001af4 	.word	0x24001af4
 800c2b4:	2400161c 	.word	0x2400161c
 800c2b8:	24001aac 	.word	0x24001aac
 800c2bc:	24001618 	.word	0x24001618
 800c2c0:	24001b00 	.word	0x24001b00

0800c2c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2cc:	4b06      	ldr	r3, [pc, #24]	@ (800c2e8 <vTaskInternalSetTimeOutState+0x24>)
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2d4:	4b05      	ldr	r3, [pc, #20]	@ (800c2ec <vTaskInternalSetTimeOutState+0x28>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	605a      	str	r2, [r3, #4]
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	24001b04 	.word	0x24001b04
 800c2ec:	24001af0 	.word	0x24001af0

0800c2f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	613b      	str	r3, [r7, #16]
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10b      	bne.n	800c336 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c336:	f000 ff97 	bl	800d268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c33a:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b0 <xTaskCheckForTimeOut+0xc0>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d102      	bne.n	800c35a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c354:	2300      	movs	r3, #0
 800c356:	61fb      	str	r3, [r7, #28]
 800c358:	e023      	b.n	800c3a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b15      	ldr	r3, [pc, #84]	@ (800c3b4 <xTaskCheckForTimeOut+0xc4>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	429a      	cmp	r2, r3
 800c364:	d007      	beq.n	800c376 <xTaskCheckForTimeOut+0x86>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d302      	bcc.n	800c376 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c370:	2301      	movs	r3, #1
 800c372:	61fb      	str	r3, [r7, #28]
 800c374:	e015      	b.n	800c3a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d20b      	bcs.n	800c398 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	1ad2      	subs	r2, r2, r3
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff ff99 	bl	800c2c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c392:	2300      	movs	r3, #0
 800c394:	61fb      	str	r3, [r7, #28]
 800c396:	e004      	b.n	800c3a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c3a2:	f000 ff93 	bl	800d2cc <vPortExitCritical>

	return xReturn;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3720      	adds	r7, #32
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	24001af0 	.word	0x24001af0
 800c3b4:	24001b04 	.word	0x24001b04

0800c3b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c3bc:	4b03      	ldr	r3, [pc, #12]	@ (800c3cc <vTaskMissedYield+0x14>)
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	24001b00 	.word	0x24001b00

0800c3d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3d8:	f000 f854 	bl	800c484 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3dc:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <prvIdleTask+0x2c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d907      	bls.n	800c3f4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c3e4:	4b06      	ldr	r3, [pc, #24]	@ (800c400 <prvIdleTask+0x30>)
 800c3e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ea:	601a      	str	r2, [r3, #0]
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c3f4:	f7f3 ffcc 	bl	8000390 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c3f8:	e7ee      	b.n	800c3d8 <prvIdleTask+0x8>
 800c3fa:	bf00      	nop
 800c3fc:	2400161c 	.word	0x2400161c
 800c400:	e000ed04 	.word	0xe000ed04

0800c404 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c40a:	2300      	movs	r3, #0
 800c40c:	607b      	str	r3, [r7, #4]
 800c40e:	e00c      	b.n	800c42a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4a12      	ldr	r2, [pc, #72]	@ (800c464 <prvInitialiseTaskLists+0x60>)
 800c41c:	4413      	add	r3, r2
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe f92a 	bl	800a678 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	3301      	adds	r3, #1
 800c428:	607b      	str	r3, [r7, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b37      	cmp	r3, #55	@ 0x37
 800c42e:	d9ef      	bls.n	800c410 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c430:	480d      	ldr	r0, [pc, #52]	@ (800c468 <prvInitialiseTaskLists+0x64>)
 800c432:	f7fe f921 	bl	800a678 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c436:	480d      	ldr	r0, [pc, #52]	@ (800c46c <prvInitialiseTaskLists+0x68>)
 800c438:	f7fe f91e 	bl	800a678 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c43c:	480c      	ldr	r0, [pc, #48]	@ (800c470 <prvInitialiseTaskLists+0x6c>)
 800c43e:	f7fe f91b 	bl	800a678 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c442:	480c      	ldr	r0, [pc, #48]	@ (800c474 <prvInitialiseTaskLists+0x70>)
 800c444:	f7fe f918 	bl	800a678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c448:	480b      	ldr	r0, [pc, #44]	@ (800c478 <prvInitialiseTaskLists+0x74>)
 800c44a:	f7fe f915 	bl	800a678 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c44e:	4b0b      	ldr	r3, [pc, #44]	@ (800c47c <prvInitialiseTaskLists+0x78>)
 800c450:	4a05      	ldr	r2, [pc, #20]	@ (800c468 <prvInitialiseTaskLists+0x64>)
 800c452:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c454:	4b0a      	ldr	r3, [pc, #40]	@ (800c480 <prvInitialiseTaskLists+0x7c>)
 800c456:	4a05      	ldr	r2, [pc, #20]	@ (800c46c <prvInitialiseTaskLists+0x68>)
 800c458:	601a      	str	r2, [r3, #0]
}
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	2400161c 	.word	0x2400161c
 800c468:	24001a7c 	.word	0x24001a7c
 800c46c:	24001a90 	.word	0x24001a90
 800c470:	24001aac 	.word	0x24001aac
 800c474:	24001ac0 	.word	0x24001ac0
 800c478:	24001ad8 	.word	0x24001ad8
 800c47c:	24001aa4 	.word	0x24001aa4
 800c480:	24001aa8 	.word	0x24001aa8

0800c484 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c48a:	e019      	b.n	800c4c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c48c:	f000 feec 	bl	800d268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c490:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <prvCheckTasksWaitingTermination+0x50>)
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3304      	adds	r3, #4
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe f975 	bl	800a78c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d8 <prvCheckTasksWaitingTermination+0x54>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a0b      	ldr	r2, [pc, #44]	@ (800c4d8 <prvCheckTasksWaitingTermination+0x54>)
 800c4aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	4a0a      	ldr	r2, [pc, #40]	@ (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c4b6:	f000 ff09 	bl	800d2cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f810 	bl	800c4e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c4c0:	4b06      	ldr	r3, [pc, #24]	@ (800c4dc <prvCheckTasksWaitingTermination+0x58>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e1      	bne.n	800c48c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	24001ac0 	.word	0x24001ac0
 800c4d8:	24001aec 	.word	0x24001aec
 800c4dc:	24001ad4 	.word	0x24001ad4

0800c4e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	3358      	adds	r3, #88	@ 0x58
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f018 ff83 	bl	80253f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d108      	bne.n	800c50e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c500:	4618      	mov	r0, r3
 800c502:	f001 f8a1 	bl	800d648 <vPortFree>
				vPortFree( pxTCB );
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f001 f89e 	bl	800d648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c50c:	e019      	b.n	800c542 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c514:	2b01      	cmp	r3, #1
 800c516:	d103      	bne.n	800c520 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f001 f895 	bl	800d648 <vPortFree>
	}
 800c51e:	e010      	b.n	800c542 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c526:	2b02      	cmp	r3, #2
 800c528:	d00b      	beq.n	800c542 <prvDeleteTCB+0x62>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	60fb      	str	r3, [r7, #12]
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	e7fd      	b.n	800c53e <prvDeleteTCB+0x5e>
	}
 800c542:	bf00      	nop
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c552:	4b0c      	ldr	r3, [pc, #48]	@ (800c584 <prvResetNextTaskUnblockTime+0x38>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d104      	bne.n	800c566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c55c:	4b0a      	ldr	r3, [pc, #40]	@ (800c588 <prvResetNextTaskUnblockTime+0x3c>)
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c564:	e008      	b.n	800c578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c566:	4b07      	ldr	r3, [pc, #28]	@ (800c584 <prvResetNextTaskUnblockTime+0x38>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	4a04      	ldr	r2, [pc, #16]	@ (800c588 <prvResetNextTaskUnblockTime+0x3c>)
 800c576:	6013      	str	r3, [r2, #0]
}
 800c578:	bf00      	nop
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	24001aa4 	.word	0x24001aa4
 800c588:	24001b0c 	.word	0x24001b0c

0800c58c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c592:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c0 <xTaskGetSchedulerState+0x34>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c59a:	2301      	movs	r3, #1
 800c59c:	607b      	str	r3, [r7, #4]
 800c59e:	e008      	b.n	800c5b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5a0:	4b08      	ldr	r3, [pc, #32]	@ (800c5c4 <xTaskGetSchedulerState+0x38>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	607b      	str	r3, [r7, #4]
 800c5ac:	e001      	b.n	800c5b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c5b2:	687b      	ldr	r3, [r7, #4]
	}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	24001af8 	.word	0x24001af8
 800c5c4:	24001b14 	.word	0x24001b14

0800c5c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d051      	beq.n	800c682 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5e2:	4b2a      	ldr	r3, [pc, #168]	@ (800c68c <xTaskPriorityInherit+0xc4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d241      	bcs.n	800c670 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	db06      	blt.n	800c602 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f4:	4b25      	ldr	r3, [pc, #148]	@ (800c68c <xTaskPriorityInherit+0xc4>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	6959      	ldr	r1, [r3, #20]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4a1f      	ldr	r2, [pc, #124]	@ (800c690 <xTaskPriorityInherit+0xc8>)
 800c614:	4413      	add	r3, r2
 800c616:	4299      	cmp	r1, r3
 800c618:	d122      	bne.n	800c660 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	3304      	adds	r3, #4
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe f8b4 	bl	800a78c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c624:	4b19      	ldr	r3, [pc, #100]	@ (800c68c <xTaskPriorityInherit+0xc4>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c632:	4b18      	ldr	r3, [pc, #96]	@ (800c694 <xTaskPriorityInherit+0xcc>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d903      	bls.n	800c642 <xTaskPriorityInherit+0x7a>
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63e:	4a15      	ldr	r2, [pc, #84]	@ (800c694 <xTaskPriorityInherit+0xcc>)
 800c640:	6013      	str	r3, [r2, #0]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c646:	4613      	mov	r3, r2
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	4413      	add	r3, r2
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4a10      	ldr	r2, [pc, #64]	@ (800c690 <xTaskPriorityInherit+0xc8>)
 800c650:	441a      	add	r2, r3
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	3304      	adds	r3, #4
 800c656:	4619      	mov	r1, r3
 800c658:	4610      	mov	r0, r2
 800c65a:	f7fe f83a 	bl	800a6d2 <vListInsertEnd>
 800c65e:	e004      	b.n	800c66a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c660:	4b0a      	ldr	r3, [pc, #40]	@ (800c68c <xTaskPriorityInherit+0xc4>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c66a:	2301      	movs	r3, #1
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	e008      	b.n	800c682 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c674:	4b05      	ldr	r3, [pc, #20]	@ (800c68c <xTaskPriorityInherit+0xc4>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d201      	bcs.n	800c682 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c67e:	2301      	movs	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c682:	68fb      	ldr	r3, [r7, #12]
	}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	24001618 	.word	0x24001618
 800c690:	2400161c 	.word	0x2400161c
 800c694:	24001af4 	.word	0x24001af4

0800c698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b086      	sub	sp, #24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d058      	beq.n	800c760 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800c76c <xTaskPriorityDisinherit+0xd4>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d00b      	beq.n	800c6d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	60fb      	str	r3, [r7, #12]
}
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	e7fd      	b.n	800c6cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	60bb      	str	r3, [r7, #8]
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6f4:	1e5a      	subs	r2, r3, #1
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c702:	429a      	cmp	r2, r3
 800c704:	d02c      	beq.n	800c760 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d128      	bne.n	800c760 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	3304      	adds	r3, #4
 800c712:	4618      	mov	r0, r3
 800c714:	f7fe f83a 	bl	800a78c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c724:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c730:	4b0f      	ldr	r3, [pc, #60]	@ (800c770 <xTaskPriorityDisinherit+0xd8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	d903      	bls.n	800c740 <xTaskPriorityDisinherit+0xa8>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c73c:	4a0c      	ldr	r2, [pc, #48]	@ (800c770 <xTaskPriorityDisinherit+0xd8>)
 800c73e:	6013      	str	r3, [r2, #0]
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4a09      	ldr	r2, [pc, #36]	@ (800c774 <xTaskPriorityDisinherit+0xdc>)
 800c74e:	441a      	add	r2, r3
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	3304      	adds	r3, #4
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7fd ffbb 	bl	800a6d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c75c:	2301      	movs	r3, #1
 800c75e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c760:	697b      	ldr	r3, [r7, #20]
	}
 800c762:	4618      	mov	r0, r3
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	24001618 	.word	0x24001618
 800c770:	24001af4 	.word	0x24001af4
 800c774:	2400161c 	.word	0x2400161c

0800c778 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c786:	2301      	movs	r3, #1
 800c788:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d06c      	beq.n	800c86a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	60fb      	str	r3, [r7, #12]
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	e7fd      	b.n	800c7ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d902      	bls.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	61fb      	str	r3, [r7, #28]
 800c7be:	e002      	b.n	800c7c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ca:	69fa      	ldr	r2, [r7, #28]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d04c      	beq.n	800c86a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d147      	bne.n	800c86a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c7da:	4b26      	ldr	r3, [pc, #152]	@ (800c874 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d10b      	bne.n	800c7fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	60bb      	str	r3, [r7, #8]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c800:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	db04      	blt.n	800c81a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	6959      	ldr	r1, [r3, #20]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	4613      	mov	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4413      	add	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4a13      	ldr	r2, [pc, #76]	@ (800c878 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c82a:	4413      	add	r3, r2
 800c82c:	4299      	cmp	r1, r3
 800c82e:	d11c      	bne.n	800c86a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c830:	69bb      	ldr	r3, [r7, #24]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd ffa9 	bl	800a78c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c83e:	4b0f      	ldr	r3, [pc, #60]	@ (800c87c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	429a      	cmp	r2, r3
 800c844:	d903      	bls.n	800c84e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84a:	4a0c      	ldr	r2, [pc, #48]	@ (800c87c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a07      	ldr	r2, [pc, #28]	@ (800c878 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c85c:	441a      	add	r2, r3
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fd ff34 	bl	800a6d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c86a:	bf00      	nop
 800c86c:	3720      	adds	r7, #32
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	24001618 	.word	0x24001618
 800c878:	2400161c 	.word	0x2400161c
 800c87c:	24001af4 	.word	0x24001af4

0800c880 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c880:	b480      	push	{r7}
 800c882:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c884:	4b07      	ldr	r3, [pc, #28]	@ (800c8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d004      	beq.n	800c896 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c88c:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c892:	3201      	adds	r2, #1
 800c894:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800c896:	4b03      	ldr	r3, [pc, #12]	@ (800c8a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c898:	681b      	ldr	r3, [r3, #0]
	}
 800c89a:	4618      	mov	r0, r3
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	24001618 	.word	0x24001618

0800c8a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c8b2:	4b21      	ldr	r3, [pc, #132]	@ (800c938 <prvAddCurrentTaskToDelayedList+0x90>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8b8:	4b20      	ldr	r3, [pc, #128]	@ (800c93c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fd ff64 	bl	800a78c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ca:	d10a      	bne.n	800c8e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c93c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4819      	ldr	r0, [pc, #100]	@ (800c940 <prvAddCurrentTaskToDelayedList+0x98>)
 800c8dc:	f7fd fef9 	bl	800a6d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8e0:	e026      	b.n	800c930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8ea:	4b14      	ldr	r3, [pc, #80]	@ (800c93c <prvAddCurrentTaskToDelayedList+0x94>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d209      	bcs.n	800c90e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8fa:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c93c <prvAddCurrentTaskToDelayedList+0x94>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	3304      	adds	r3, #4
 800c904:	4619      	mov	r1, r3
 800c906:	4610      	mov	r0, r2
 800c908:	f7fd ff07 	bl	800a71a <vListInsert>
}
 800c90c:	e010      	b.n	800c930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c90e:	4b0e      	ldr	r3, [pc, #56]	@ (800c948 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b0a      	ldr	r3, [pc, #40]	@ (800c93c <prvAddCurrentTaskToDelayedList+0x94>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3304      	adds	r3, #4
 800c918:	4619      	mov	r1, r3
 800c91a:	4610      	mov	r0, r2
 800c91c:	f7fd fefd 	bl	800a71a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c920:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	429a      	cmp	r2, r3
 800c928:	d202      	bcs.n	800c930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c92a:	4a08      	ldr	r2, [pc, #32]	@ (800c94c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6013      	str	r3, [r2, #0]
}
 800c930:	bf00      	nop
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	24001af0 	.word	0x24001af0
 800c93c:	24001618 	.word	0x24001618
 800c940:	24001ad8 	.word	0x24001ad8
 800c944:	24001aa8 	.word	0x24001aa8
 800c948:	24001aa4 	.word	0x24001aa4
 800c94c:	24001b0c 	.word	0x24001b0c

0800c950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	@ 0x28
 800c954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c95a:	f000 fb13 	bl	800cf84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c95e:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d4 <xTimerCreateTimerTask+0x84>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d021      	beq.n	800c9aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c96e:	1d3a      	adds	r2, r7, #4
 800c970:	f107 0108 	add.w	r1, r7, #8
 800c974:	f107 030c 	add.w	r3, r7, #12
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fd fe63 	bl	800a644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	9202      	str	r2, [sp, #8]
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	2302      	movs	r3, #2
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	2300      	movs	r3, #0
 800c98e:	460a      	mov	r2, r1
 800c990:	4911      	ldr	r1, [pc, #68]	@ (800c9d8 <xTimerCreateTimerTask+0x88>)
 800c992:	4812      	ldr	r0, [pc, #72]	@ (800c9dc <xTimerCreateTimerTask+0x8c>)
 800c994:	f7fe ff50 	bl	800b838 <xTaskCreateStatic>
 800c998:	4603      	mov	r3, r0
 800c99a:	4a11      	ldr	r2, [pc, #68]	@ (800c9e0 <xTimerCreateTimerTask+0x90>)
 800c99c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <xTimerCreateTimerTask+0x90>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10b      	bne.n	800c9c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	613b      	str	r3, [r7, #16]
}
 800c9c2:	bf00      	nop
 800c9c4:	bf00      	nop
 800c9c6:	e7fd      	b.n	800c9c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c9c8:	697b      	ldr	r3, [r7, #20]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	24001b48 	.word	0x24001b48
 800c9d8:	0802607c 	.word	0x0802607c
 800c9dc:	0800cb1d 	.word	0x0800cb1d
 800c9e0:	24001b4c 	.word	0x24001b4c

0800c9e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b08a      	sub	sp, #40	@ 0x28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
 800c9f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10b      	bne.n	800ca14 <xTimerGenericCommand+0x30>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	623b      	str	r3, [r7, #32]
}
 800ca0e:	bf00      	nop
 800ca10:	bf00      	nop
 800ca12:	e7fd      	b.n	800ca10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca14:	4b19      	ldr	r3, [pc, #100]	@ (800ca7c <xTimerGenericCommand+0x98>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d02a      	beq.n	800ca72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b05      	cmp	r3, #5
 800ca2c:	dc18      	bgt.n	800ca60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca2e:	f7ff fdad 	bl	800c58c <xTaskGetSchedulerState>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d109      	bne.n	800ca4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca38:	4b10      	ldr	r3, [pc, #64]	@ (800ca7c <xTimerGenericCommand+0x98>)
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	f107 0110 	add.w	r1, r7, #16
 800ca40:	2300      	movs	r3, #0
 800ca42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca44:	f7fe f880 	bl	800ab48 <xQueueGenericSend>
 800ca48:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca4a:	e012      	b.n	800ca72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ca4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca7c <xTimerGenericCommand+0x98>)
 800ca4e:	6818      	ldr	r0, [r3, #0]
 800ca50:	f107 0110 	add.w	r1, r7, #16
 800ca54:	2300      	movs	r3, #0
 800ca56:	2200      	movs	r2, #0
 800ca58:	f7fe f876 	bl	800ab48 <xQueueGenericSend>
 800ca5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ca5e:	e008      	b.n	800ca72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ca60:	4b06      	ldr	r3, [pc, #24]	@ (800ca7c <xTimerGenericCommand+0x98>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	f107 0110 	add.w	r1, r7, #16
 800ca68:	2300      	movs	r3, #0
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	f7fe f96e 	bl	800ad4c <xQueueGenericSendFromISR>
 800ca70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3728      	adds	r7, #40	@ 0x28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	24001b48 	.word	0x24001b48

0800ca80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca8a:	4b23      	ldr	r3, [pc, #140]	@ (800cb18 <prvProcessExpiredTimer+0x98>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	68db      	ldr	r3, [r3, #12]
 800ca92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	3304      	adds	r3, #4
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7fd fe77 	bl	800a78c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caa4:	f003 0304 	and.w	r3, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d023      	beq.n	800caf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	699a      	ldr	r2, [r3, #24]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	18d1      	adds	r1, r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	683a      	ldr	r2, [r7, #0]
 800cab8:	6978      	ldr	r0, [r7, #20]
 800caba:	f000 f8d5 	bl	800cc68 <prvInsertTimerInActiveList>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d020      	beq.n	800cb06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cac4:	2300      	movs	r3, #0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	2300      	movs	r3, #0
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	2100      	movs	r1, #0
 800cace:	6978      	ldr	r0, [r7, #20]
 800cad0:	f7ff ff88 	bl	800c9e4 <xTimerGenericCommand>
 800cad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d114      	bne.n	800cb06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	60fb      	str	r3, [r7, #12]
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	e7fd      	b.n	800caf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cafa:	f023 0301 	bic.w	r3, r3, #1
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	6978      	ldr	r0, [r7, #20]
 800cb0c:	4798      	blx	r3
}
 800cb0e:	bf00      	nop
 800cb10:	3718      	adds	r7, #24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	24001b40 	.word	0x24001b40

0800cb1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb24:	f107 0308 	add.w	r3, r7, #8
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f000 f859 	bl	800cbe0 <prvGetNextExpireTime>
 800cb2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	4619      	mov	r1, r3
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f805 	bl	800cb44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb3a:	f000 f8d7 	bl	800ccec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb3e:	bf00      	nop
 800cb40:	e7f0      	b.n	800cb24 <prvTimerTask+0x8>
	...

0800cb44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cb4e:	f7ff f8df 	bl	800bd10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f866 	bl	800cc28 <prvSampleTimeNow>
 800cb5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d130      	bne.n	800cbc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10a      	bne.n	800cb80 <prvProcessTimerOrBlockTask+0x3c>
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d806      	bhi.n	800cb80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cb72:	f7ff f8db 	bl	800bd2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff ff81 	bl	800ca80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb7e:	e024      	b.n	800cbca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d008      	beq.n	800cb98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb86:	4b13      	ldr	r3, [pc, #76]	@ (800cbd4 <prvProcessTimerOrBlockTask+0x90>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d101      	bne.n	800cb94 <prvProcessTimerOrBlockTask+0x50>
 800cb90:	2301      	movs	r3, #1
 800cb92:	e000      	b.n	800cb96 <prvProcessTimerOrBlockTask+0x52>
 800cb94:	2300      	movs	r3, #0
 800cb96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb98:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd8 <prvProcessTimerOrBlockTask+0x94>)
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	1ad3      	subs	r3, r2, r3
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	4619      	mov	r1, r3
 800cba6:	f7fe fe13 	bl	800b7d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cbaa:	f7ff f8bf 	bl	800bd2c <xTaskResumeAll>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cbb4:	4b09      	ldr	r3, [pc, #36]	@ (800cbdc <prvProcessTimerOrBlockTask+0x98>)
 800cbb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	f3bf 8f6f 	isb	sy
}
 800cbc4:	e001      	b.n	800cbca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cbc6:	f7ff f8b1 	bl	800bd2c <xTaskResumeAll>
}
 800cbca:	bf00      	nop
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	24001b44 	.word	0x24001b44
 800cbd8:	24001b48 	.word	0x24001b48
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	@ (800cc24 <prvGetNextExpireTime+0x44>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <prvGetNextExpireTime+0x16>
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	e000      	b.n	800cbf8 <prvGetNextExpireTime+0x18>
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d105      	bne.n	800cc10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc04:	4b07      	ldr	r3, [pc, #28]	@ (800cc24 <prvGetNextExpireTime+0x44>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	e001      	b.n	800cc14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc10:	2300      	movs	r3, #0
 800cc12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc14:	68fb      	ldr	r3, [r7, #12]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	24001b40 	.word	0x24001b40

0800cc28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc30:	f7ff f91a 	bl	800be68 <xTaskGetTickCount>
 800cc34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc36:	4b0b      	ldr	r3, [pc, #44]	@ (800cc64 <prvSampleTimeNow+0x3c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d205      	bcs.n	800cc4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cc40:	f000 f93a 	bl	800ceb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cc52:	4a04      	ldr	r2, [pc, #16]	@ (800cc64 <prvSampleTimeNow+0x3c>)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cc58:	68fb      	ldr	r3, [r7, #12]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	24001b50 	.word	0x24001b50

0800cc68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc76:	2300      	movs	r3, #0
 800cc78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d812      	bhi.n	800ccb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	1ad2      	subs	r2, r2, r3
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d302      	bcc.n	800cca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	617b      	str	r3, [r7, #20]
 800cca0:	e01b      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cca2:	4b10      	ldr	r3, [pc, #64]	@ (800cce4 <prvInsertTimerInActiveList+0x7c>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	3304      	adds	r3, #4
 800ccaa:	4619      	mov	r1, r3
 800ccac:	4610      	mov	r0, r2
 800ccae:	f7fd fd34 	bl	800a71a <vListInsert>
 800ccb2:	e012      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d206      	bcs.n	800ccca <prvInsertTimerInActiveList+0x62>
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d302      	bcc.n	800ccca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	617b      	str	r3, [r7, #20]
 800ccc8:	e007      	b.n	800ccda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccca:	4b07      	ldr	r3, [pc, #28]	@ (800cce8 <prvInsertTimerInActiveList+0x80>)
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7fd fd20 	bl	800a71a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ccda:	697b      	ldr	r3, [r7, #20]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	24001b44 	.word	0x24001b44
 800cce8:	24001b40 	.word	0x24001b40

0800ccec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08e      	sub	sp, #56	@ 0x38
 800ccf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ccf2:	e0ce      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	da19      	bge.n	800cd2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ccfa:	1d3b      	adds	r3, r7, #4
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10b      	bne.n	800cd1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	61fb      	str	r3, [r7, #28]
}
 800cd18:	bf00      	nop
 800cd1a:	bf00      	nop
 800cd1c:	e7fd      	b.n	800cd1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd24:	6850      	ldr	r0, [r2, #4]
 800cd26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd28:	6892      	ldr	r2, [r2, #8]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f2c0 80ae 	blt.w	800ce92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d004      	beq.n	800cd4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	3304      	adds	r3, #4
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fd fd20 	bl	800a78c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff ff6a 	bl	800cc28 <prvSampleTimeNow>
 800cd54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b09      	cmp	r3, #9
 800cd5a:	f200 8097 	bhi.w	800ce8c <prvProcessReceivedCommands+0x1a0>
 800cd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd64 <prvProcessReceivedCommands+0x78>)
 800cd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd64:	0800cd8d 	.word	0x0800cd8d
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cd8d 	.word	0x0800cd8d
 800cd70:	0800ce03 	.word	0x0800ce03
 800cd74:	0800ce17 	.word	0x0800ce17
 800cd78:	0800ce63 	.word	0x0800ce63
 800cd7c:	0800cd8d 	.word	0x0800cd8d
 800cd80:	0800cd8d 	.word	0x0800cd8d
 800cd84:	0800ce03 	.word	0x0800ce03
 800cd88:	0800ce17 	.word	0x0800ce17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cd92:	f043 0301 	orr.w	r3, r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	18d1      	adds	r1, r2, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdac:	f7ff ff5c 	bl	800cc68 <prvInsertTimerInActiveList>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d06c      	beq.n	800ce90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d061      	beq.n	800ce90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cdcc:	68ba      	ldr	r2, [r7, #8]
 800cdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	441a      	add	r2, r3
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	2300      	movs	r3, #0
 800cdda:	2100      	movs	r1, #0
 800cddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cdde:	f7ff fe01 	bl	800c9e4 <xTimerGenericCommand>
 800cde2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cde4:	6a3b      	ldr	r3, [r7, #32]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d152      	bne.n	800ce90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	61bb      	str	r3, [r7, #24]
}
 800cdfc:	bf00      	nop
 800cdfe:	bf00      	nop
 800ce00:	e7fd      	b.n	800cdfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce14:	e03d      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce1c:	f043 0301 	orr.w	r3, r3, #1
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10b      	bne.n	800ce4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	617b      	str	r3, [r7, #20]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	699a      	ldr	r2, [r3, #24]
 800ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce54:	18d1      	adds	r1, r2, r3
 800ce56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5c:	f7ff ff04 	bl	800cc68 <prvInsertTimerInActiveList>
					break;
 800ce60:	e017      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d103      	bne.n	800ce78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ce70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce72:	f000 fbe9 	bl	800d648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ce76:	e00c      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce7e:	f023 0301 	bic.w	r3, r3, #1
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ce8a:	e002      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ce8c:	bf00      	nop
 800ce8e:	e000      	b.n	800ce92 <prvProcessReceivedCommands+0x1a6>
					break;
 800ce90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce92:	4b08      	ldr	r3, [pc, #32]	@ (800ceb4 <prvProcessReceivedCommands+0x1c8>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	1d39      	adds	r1, r7, #4
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe f884 	bl	800afa8 <xQueueReceive>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f47f af26 	bne.w	800ccf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	3730      	adds	r7, #48	@ 0x30
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	24001b48 	.word	0x24001b48

0800ceb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b088      	sub	sp, #32
 800cebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cebe:	e049      	b.n	800cf54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cec0:	4b2e      	ldr	r3, [pc, #184]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceca:	4b2c      	ldr	r3, [pc, #176]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	3304      	adds	r3, #4
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7fd fc57 	bl	800a78c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6a1b      	ldr	r3, [r3, #32]
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceec:	f003 0304 	and.w	r3, r3, #4
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d02f      	beq.n	800cf54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	4413      	add	r3, r2
 800cefc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d90e      	bls.n	800cf24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf12:	4b1a      	ldr	r3, [pc, #104]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	3304      	adds	r3, #4
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	4610      	mov	r0, r2
 800cf1e:	f7fd fbfc 	bl	800a71a <vListInsert>
 800cf22:	e017      	b.n	800cf54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf24:	2300      	movs	r3, #0
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	2100      	movs	r1, #0
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f7ff fd58 	bl	800c9e4 <xTimerGenericCommand>
 800cf34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10b      	bne.n	800cf54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	603b      	str	r3, [r7, #0]
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	e7fd      	b.n	800cf50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf54:	4b09      	ldr	r3, [pc, #36]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d1b0      	bne.n	800cec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cf5e:	4b07      	ldr	r3, [pc, #28]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cf64:	4b06      	ldr	r3, [pc, #24]	@ (800cf80 <prvSwitchTimerLists+0xc8>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a04      	ldr	r2, [pc, #16]	@ (800cf7c <prvSwitchTimerLists+0xc4>)
 800cf6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf6c:	4a04      	ldr	r2, [pc, #16]	@ (800cf80 <prvSwitchTimerLists+0xc8>)
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	6013      	str	r3, [r2, #0]
}
 800cf72:	bf00      	nop
 800cf74:	3718      	adds	r7, #24
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	24001b40 	.word	0x24001b40
 800cf80:	24001b44 	.word	0x24001b44

0800cf84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cf8a:	f000 f96d 	bl	800d268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cf8e:	4b15      	ldr	r3, [pc, #84]	@ (800cfe4 <prvCheckForValidListAndQueue+0x60>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d120      	bne.n	800cfd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cf96:	4814      	ldr	r0, [pc, #80]	@ (800cfe8 <prvCheckForValidListAndQueue+0x64>)
 800cf98:	f7fd fb6e 	bl	800a678 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cf9c:	4813      	ldr	r0, [pc, #76]	@ (800cfec <prvCheckForValidListAndQueue+0x68>)
 800cf9e:	f7fd fb6b 	bl	800a678 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cfa2:	4b13      	ldr	r3, [pc, #76]	@ (800cff0 <prvCheckForValidListAndQueue+0x6c>)
 800cfa4:	4a10      	ldr	r2, [pc, #64]	@ (800cfe8 <prvCheckForValidListAndQueue+0x64>)
 800cfa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cfa8:	4b12      	ldr	r3, [pc, #72]	@ (800cff4 <prvCheckForValidListAndQueue+0x70>)
 800cfaa:	4a10      	ldr	r2, [pc, #64]	@ (800cfec <prvCheckForValidListAndQueue+0x68>)
 800cfac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	4b11      	ldr	r3, [pc, #68]	@ (800cff8 <prvCheckForValidListAndQueue+0x74>)
 800cfb4:	4a11      	ldr	r2, [pc, #68]	@ (800cffc <prvCheckForValidListAndQueue+0x78>)
 800cfb6:	2110      	movs	r1, #16
 800cfb8:	200a      	movs	r0, #10
 800cfba:	f7fd fc7b 	bl	800a8b4 <xQueueGenericCreateStatic>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4a08      	ldr	r2, [pc, #32]	@ (800cfe4 <prvCheckForValidListAndQueue+0x60>)
 800cfc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cfc4:	4b07      	ldr	r3, [pc, #28]	@ (800cfe4 <prvCheckForValidListAndQueue+0x60>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cfcc:	4b05      	ldr	r3, [pc, #20]	@ (800cfe4 <prvCheckForValidListAndQueue+0x60>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	490b      	ldr	r1, [pc, #44]	@ (800d000 <prvCheckForValidListAndQueue+0x7c>)
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fba8 	bl	800b728 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfd8:	f000 f978 	bl	800d2cc <vPortExitCritical>
}
 800cfdc:	bf00      	nop
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	24001b48 	.word	0x24001b48
 800cfe8:	24001b18 	.word	0x24001b18
 800cfec:	24001b2c 	.word	0x24001b2c
 800cff0:	24001b40 	.word	0x24001b40
 800cff4:	24001b44 	.word	0x24001b44
 800cff8:	24001bf4 	.word	0x24001bf4
 800cffc:	24001b54 	.word	0x24001b54
 800d000:	08026084 	.word	0x08026084

0800d004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d004:	b480      	push	{r7}
 800d006:	b085      	sub	sp, #20
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3b04      	subs	r3, #4
 800d014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d01c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3b04      	subs	r3, #4
 800d022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	f023 0201 	bic.w	r2, r3, #1
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	3b04      	subs	r3, #4
 800d032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d034:	4a0c      	ldr	r2, [pc, #48]	@ (800d068 <pxPortInitialiseStack+0x64>)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3b14      	subs	r3, #20
 800d03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3b04      	subs	r3, #4
 800d04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f06f 0202 	mvn.w	r2, #2
 800d052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3b20      	subs	r3, #32
 800d058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d05a:	68fb      	ldr	r3, [r7, #12]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	0800d06d 	.word	0x0800d06d

0800d06c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d076:	4b13      	ldr	r3, [pc, #76]	@ (800d0c4 <prvTaskExitError+0x58>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07e:	d00b      	beq.n	800d098 <prvTaskExitError+0x2c>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	60fb      	str	r3, [r7, #12]
}
 800d092:	bf00      	nop
 800d094:	bf00      	nop
 800d096:	e7fd      	b.n	800d094 <prvTaskExitError+0x28>
	__asm volatile
 800d098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09c:	f383 8811 	msr	BASEPRI, r3
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	f3bf 8f4f 	dsb	sy
 800d0a8:	60bb      	str	r3, [r7, #8]
}
 800d0aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0ac:	bf00      	nop
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d0fc      	beq.n	800d0ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	24000044 	.word	0x24000044
	...

0800d0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <pxCurrentTCBConst2>)
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	6808      	ldr	r0, [r1, #0]
 800d0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0da:	f380 8809 	msr	PSP, r0
 800d0de:	f3bf 8f6f 	isb	sy
 800d0e2:	f04f 0000 	mov.w	r0, #0
 800d0e6:	f380 8811 	msr	BASEPRI, r0
 800d0ea:	4770      	bx	lr
 800d0ec:	f3af 8000 	nop.w

0800d0f0 <pxCurrentTCBConst2>:
 800d0f0:	24001618 	.word	0x24001618
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop

0800d0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d0f8:	4808      	ldr	r0, [pc, #32]	@ (800d11c <prvPortStartFirstTask+0x24>)
 800d0fa:	6800      	ldr	r0, [r0, #0]
 800d0fc:	6800      	ldr	r0, [r0, #0]
 800d0fe:	f380 8808 	msr	MSP, r0
 800d102:	f04f 0000 	mov.w	r0, #0
 800d106:	f380 8814 	msr	CONTROL, r0
 800d10a:	b662      	cpsie	i
 800d10c:	b661      	cpsie	f
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	df00      	svc	0
 800d118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d11a:	bf00      	nop
 800d11c:	e000ed08 	.word	0xe000ed08

0800d120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d126:	4b47      	ldr	r3, [pc, #284]	@ (800d244 <xPortStartScheduler+0x124>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a47      	ldr	r2, [pc, #284]	@ (800d248 <xPortStartScheduler+0x128>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d10b      	bne.n	800d148 <xPortStartScheduler+0x28>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	613b      	str	r3, [r7, #16]
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	e7fd      	b.n	800d144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d148:	4b3e      	ldr	r3, [pc, #248]	@ (800d244 <xPortStartScheduler+0x124>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4a3f      	ldr	r2, [pc, #252]	@ (800d24c <xPortStartScheduler+0x12c>)
 800d14e:	4293      	cmp	r3, r2
 800d150:	d10b      	bne.n	800d16a <xPortStartScheduler+0x4a>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	60fb      	str	r3, [r7, #12]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d16a:	4b39      	ldr	r3, [pc, #228]	@ (800d250 <xPortStartScheduler+0x130>)
 800d16c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	b2db      	uxtb	r3, r3
 800d174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	22ff      	movs	r2, #255	@ 0xff
 800d17a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	b2db      	uxtb	r3, r3
 800d188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	4b31      	ldr	r3, [pc, #196]	@ (800d254 <xPortStartScheduler+0x134>)
 800d190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d192:	4b31      	ldr	r3, [pc, #196]	@ (800d258 <xPortStartScheduler+0x138>)
 800d194:	2207      	movs	r2, #7
 800d196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d198:	e009      	b.n	800d1ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d19a:	4b2f      	ldr	r3, [pc, #188]	@ (800d258 <xPortStartScheduler+0x138>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	4a2d      	ldr	r2, [pc, #180]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1a4:	78fb      	ldrb	r3, [r7, #3]
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	005b      	lsls	r3, r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1ae:	78fb      	ldrb	r3, [r7, #3]
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1b6:	2b80      	cmp	r3, #128	@ 0x80
 800d1b8:	d0ef      	beq.n	800d19a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d1ba:	4b27      	ldr	r3, [pc, #156]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f1c3 0307 	rsb	r3, r3, #7
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d00b      	beq.n	800d1de <xPortStartScheduler+0xbe>
	__asm volatile
 800d1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ca:	f383 8811 	msr	BASEPRI, r3
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	f3bf 8f4f 	dsb	sy
 800d1d6:	60bb      	str	r3, [r7, #8]
}
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	e7fd      	b.n	800d1da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d1de:	4b1e      	ldr	r3, [pc, #120]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	021b      	lsls	r3, r3, #8
 800d1e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d1e8:	4b1b      	ldr	r3, [pc, #108]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1f0:	4a19      	ldr	r2, [pc, #100]	@ (800d258 <xPortStartScheduler+0x138>)
 800d1f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d1fc:	4b17      	ldr	r3, [pc, #92]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a16      	ldr	r2, [pc, #88]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d208:	4b14      	ldr	r3, [pc, #80]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a13      	ldr	r2, [pc, #76]	@ (800d25c <xPortStartScheduler+0x13c>)
 800d20e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d214:	f000 f8da 	bl	800d3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d218:	4b11      	ldr	r3, [pc, #68]	@ (800d260 <xPortStartScheduler+0x140>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d21e:	f000 f8f9 	bl	800d414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d222:	4b10      	ldr	r3, [pc, #64]	@ (800d264 <xPortStartScheduler+0x144>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a0f      	ldr	r2, [pc, #60]	@ (800d264 <xPortStartScheduler+0x144>)
 800d228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d22c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d22e:	f7ff ff63 	bl	800d0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d232:	f7fe ff21 	bl	800c078 <vTaskSwitchContext>
	prvTaskExitError();
 800d236:	f7ff ff19 	bl	800d06c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	e000ed00 	.word	0xe000ed00
 800d248:	410fc271 	.word	0x410fc271
 800d24c:	410fc270 	.word	0x410fc270
 800d250:	e000e400 	.word	0xe000e400
 800d254:	24001c44 	.word	0x24001c44
 800d258:	24001c48 	.word	0x24001c48
 800d25c:	e000ed20 	.word	0xe000ed20
 800d260:	24000044 	.word	0x24000044
 800d264:	e000ef34 	.word	0xe000ef34

0800d268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d282:	4b10      	ldr	r3, [pc, #64]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3301      	adds	r3, #1
 800d288:	4a0e      	ldr	r2, [pc, #56]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d28a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d28c:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c4 <vPortEnterCritical+0x5c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d110      	bne.n	800d2b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d294:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c8 <vPortEnterCritical+0x60>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	603b      	str	r3, [r7, #0]
}
 800d2b0:	bf00      	nop
 800d2b2:	bf00      	nop
 800d2b4:	e7fd      	b.n	800d2b2 <vPortEnterCritical+0x4a>
	}
}
 800d2b6:	bf00      	nop
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	24000044 	.word	0x24000044
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d2d2:	4b12      	ldr	r3, [pc, #72]	@ (800d31c <vPortExitCritical+0x50>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10b      	bne.n	800d2f2 <vPortExitCritical+0x26>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	607b      	str	r3, [r7, #4]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <vPortExitCritical+0x50>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	4a08      	ldr	r2, [pc, #32]	@ (800d31c <vPortExitCritical+0x50>)
 800d2fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d2fc:	4b07      	ldr	r3, [pc, #28]	@ (800d31c <vPortExitCritical+0x50>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d105      	bne.n	800d310 <vPortExitCritical+0x44>
 800d304:	2300      	movs	r3, #0
 800d306:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	f383 8811 	msr	BASEPRI, r3
}
 800d30e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr
 800d31c:	24000044 	.word	0x24000044

0800d320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d320:	f3ef 8009 	mrs	r0, PSP
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	4b15      	ldr	r3, [pc, #84]	@ (800d380 <pxCurrentTCBConst>)
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f01e 0f10 	tst.w	lr, #16
 800d330:	bf08      	it	eq
 800d332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33a:	6010      	str	r0, [r2, #0]
 800d33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d344:	f380 8811 	msr	BASEPRI, r0
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f7fe fe92 	bl	800c078 <vTaskSwitchContext>
 800d354:	f04f 0000 	mov.w	r0, #0
 800d358:	f380 8811 	msr	BASEPRI, r0
 800d35c:	bc09      	pop	{r0, r3}
 800d35e:	6819      	ldr	r1, [r3, #0]
 800d360:	6808      	ldr	r0, [r1, #0]
 800d362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d366:	f01e 0f10 	tst.w	lr, #16
 800d36a:	bf08      	it	eq
 800d36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d370:	f380 8809 	msr	PSP, r0
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	f3af 8000 	nop.w

0800d380 <pxCurrentTCBConst>:
 800d380:	24001618 	.word	0x24001618
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d384:	bf00      	nop
 800d386:	bf00      	nop

0800d388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	607b      	str	r3, [r7, #4]
}
 800d3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3a2:	f7fe fd71 	bl	800be88 <xTaskIncrementTick>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d003      	beq.n	800d3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3ac:	4b06      	ldr	r3, [pc, #24]	@ (800d3c8 <xPortSysTickHandler+0x40>)
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f383 8811 	msr	BASEPRI, r3
}
 800d3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d3d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <vPortSetupTimerInterrupt+0x34>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d404 <vPortSetupTimerInterrupt+0x38>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d408 <vPortSetupTimerInterrupt+0x3c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a0a      	ldr	r2, [pc, #40]	@ (800d40c <vPortSetupTimerInterrupt+0x40>)
 800d3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d3e6:	099b      	lsrs	r3, r3, #6
 800d3e8:	4a09      	ldr	r2, [pc, #36]	@ (800d410 <vPortSetupTimerInterrupt+0x44>)
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d3ee:	4b04      	ldr	r3, [pc, #16]	@ (800d400 <vPortSetupTimerInterrupt+0x34>)
 800d3f0:	2207      	movs	r2, #7
 800d3f2:	601a      	str	r2, [r3, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	e000e010 	.word	0xe000e010
 800d404:	e000e018 	.word	0xe000e018
 800d408:	24000004 	.word	0x24000004
 800d40c:	10624dd3 	.word	0x10624dd3
 800d410:	e000e014 	.word	0xe000e014

0800d414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d424 <vPortEnableVFP+0x10>
 800d418:	6801      	ldr	r1, [r0, #0]
 800d41a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d41e:	6001      	str	r1, [r0, #0]
 800d420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d422:	bf00      	nop
 800d424:	e000ed88 	.word	0xe000ed88

0800d428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d42e:	f3ef 8305 	mrs	r3, IPSR
 800d432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b0f      	cmp	r3, #15
 800d438:	d915      	bls.n	800d466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d43a:	4a18      	ldr	r2, [pc, #96]	@ (800d49c <vPortValidateInterruptPriority+0x74>)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	4413      	add	r3, r2
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d444:	4b16      	ldr	r3, [pc, #88]	@ (800d4a0 <vPortValidateInterruptPriority+0x78>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	7afa      	ldrb	r2, [r7, #11]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d20b      	bcs.n	800d466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	607b      	str	r3, [r7, #4]
}
 800d460:	bf00      	nop
 800d462:	bf00      	nop
 800d464:	e7fd      	b.n	800d462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d466:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <vPortValidateInterruptPriority+0x7c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d46e:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a8 <vPortValidateInterruptPriority+0x80>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d90b      	bls.n	800d48e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	603b      	str	r3, [r7, #0]
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	e7fd      	b.n	800d48a <vPortValidateInterruptPriority+0x62>
	}
 800d48e:	bf00      	nop
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	e000e3f0 	.word	0xe000e3f0
 800d4a0:	24001c44 	.word	0x24001c44
 800d4a4:	e000ed0c 	.word	0xe000ed0c
 800d4a8:	24001c48 	.word	0x24001c48

0800d4ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b08a      	sub	sp, #40	@ 0x28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d4b8:	f7fe fc2a 	bl	800bd10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d4bc:	4b5c      	ldr	r3, [pc, #368]	@ (800d630 <pvPortMalloc+0x184>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d4c4:	f000 f924 	bl	800d710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d4c8:	4b5a      	ldr	r3, [pc, #360]	@ (800d634 <pvPortMalloc+0x188>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f040 8095 	bne.w	800d600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01e      	beq.n	800d51a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d4dc:	2208      	movs	r2, #8
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d015      	beq.n	800d51a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f023 0307 	bic.w	r3, r3, #7
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f003 0307 	and.w	r3, r3, #7
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d00b      	beq.n	800d51a <pvPortMalloc+0x6e>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	617b      	str	r3, [r7, #20]
}
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d06f      	beq.n	800d600 <pvPortMalloc+0x154>
 800d520:	4b45      	ldr	r3, [pc, #276]	@ (800d638 <pvPortMalloc+0x18c>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	429a      	cmp	r2, r3
 800d528:	d86a      	bhi.n	800d600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d52a:	4b44      	ldr	r3, [pc, #272]	@ (800d63c <pvPortMalloc+0x190>)
 800d52c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d52e:	4b43      	ldr	r3, [pc, #268]	@ (800d63c <pvPortMalloc+0x190>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d534:	e004      	b.n	800d540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d903      	bls.n	800d552 <pvPortMalloc+0xa6>
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f1      	bne.n	800d536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d552:	4b37      	ldr	r3, [pc, #220]	@ (800d630 <pvPortMalloc+0x184>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d558:	429a      	cmp	r2, r3
 800d55a:	d051      	beq.n	800d600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2208      	movs	r2, #8
 800d562:	4413      	add	r3, r2
 800d564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	685a      	ldr	r2, [r3, #4]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	1ad2      	subs	r2, r2, r3
 800d576:	2308      	movs	r3, #8
 800d578:	005b      	lsls	r3, r3, #1
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d920      	bls.n	800d5c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d57e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4413      	add	r3, r2
 800d584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	f003 0307 	and.w	r3, r3, #7
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00b      	beq.n	800d5a8 <pvPortMalloc+0xfc>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	613b      	str	r3, [r7, #16]
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	e7fd      	b.n	800d5a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5ba:	69b8      	ldr	r0, [r7, #24]
 800d5bc:	f000 f90c 	bl	800d7d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5c0:	4b1d      	ldr	r3, [pc, #116]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	1ad3      	subs	r3, r2, r3
 800d5ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800d640 <pvPortMalloc+0x194>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d203      	bcs.n	800d5e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d5da:	4b17      	ldr	r3, [pc, #92]	@ (800d638 <pvPortMalloc+0x18c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a18      	ldr	r2, [pc, #96]	@ (800d640 <pvPortMalloc+0x194>)
 800d5e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	4b13      	ldr	r3, [pc, #76]	@ (800d634 <pvPortMalloc+0x188>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d5f6:	4b13      	ldr	r3, [pc, #76]	@ (800d644 <pvPortMalloc+0x198>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	4a11      	ldr	r2, [pc, #68]	@ (800d644 <pvPortMalloc+0x198>)
 800d5fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d600:	f7fe fb94 	bl	800bd2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	f003 0307 	and.w	r3, r3, #7
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <pvPortMalloc+0x17a>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	bf00      	nop
 800d624:	e7fd      	b.n	800d622 <pvPortMalloc+0x176>
	return pvReturn;
 800d626:	69fb      	ldr	r3, [r7, #28]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3728      	adds	r7, #40	@ 0x28
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	2401a2f4 	.word	0x2401a2f4
 800d634:	2401a308 	.word	0x2401a308
 800d638:	2401a2f8 	.word	0x2401a2f8
 800d63c:	2401a2ec 	.word	0x2401a2ec
 800d640:	2401a2fc 	.word	0x2401a2fc
 800d644:	2401a300 	.word	0x2401a300

0800d648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d04f      	beq.n	800d6fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d65a:	2308      	movs	r3, #8
 800d65c:	425b      	negs	r3, r3
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	4413      	add	r3, r2
 800d662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	4b25      	ldr	r3, [pc, #148]	@ (800d704 <vPortFree+0xbc>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4013      	ands	r3, r2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d10b      	bne.n	800d68e <vPortFree+0x46>
	__asm volatile
 800d676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	60fb      	str	r3, [r7, #12]
}
 800d688:	bf00      	nop
 800d68a:	bf00      	nop
 800d68c:	e7fd      	b.n	800d68a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00b      	beq.n	800d6ae <vPortFree+0x66>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	60bb      	str	r3, [r7, #8]
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	685a      	ldr	r2, [r3, #4]
 800d6b2:	4b14      	ldr	r3, [pc, #80]	@ (800d704 <vPortFree+0xbc>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4013      	ands	r3, r2
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d01e      	beq.n	800d6fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11a      	bne.n	800d6fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800d704 <vPortFree+0xbc>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	43db      	mvns	r3, r3
 800d6ce:	401a      	ands	r2, r3
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6d4:	f7fe fb1c 	bl	800bd10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d708 <vPortFree+0xc0>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	4a09      	ldr	r2, [pc, #36]	@ (800d708 <vPortFree+0xc0>)
 800d6e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6e6:	6938      	ldr	r0, [r7, #16]
 800d6e8:	f000 f876 	bl	800d7d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6ec:	4b07      	ldr	r3, [pc, #28]	@ (800d70c <vPortFree+0xc4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	4a06      	ldr	r2, [pc, #24]	@ (800d70c <vPortFree+0xc4>)
 800d6f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6f6:	f7fe fb19 	bl	800bd2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6fa:	bf00      	nop
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	2401a308 	.word	0x2401a308
 800d708:	2401a2f8 	.word	0x2401a2f8
 800d70c:	2401a304 	.word	0x2401a304

0800d710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d716:	4b29      	ldr	r3, [pc, #164]	@ (800d7bc <prvHeapInit+0xac>)
 800d718:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d71a:	4b29      	ldr	r3, [pc, #164]	@ (800d7c0 <prvHeapInit+0xb0>)
 800d71c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f003 0307 	and.w	r3, r3, #7
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00c      	beq.n	800d742 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3307      	adds	r3, #7
 800d72c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f023 0307 	bic.w	r3, r3, #7
 800d734:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	4a20      	ldr	r2, [pc, #128]	@ (800d7c0 <prvHeapInit+0xb0>)
 800d73e:	4413      	add	r3, r2
 800d740:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d746:	4a1f      	ldr	r2, [pc, #124]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d74c:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c4 <prvHeapInit+0xb4>)
 800d74e:	2200      	movs	r2, #0
 800d750:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	4413      	add	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d75a:	2208      	movs	r2, #8
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	1a9b      	subs	r3, r3, r2
 800d760:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f023 0307 	bic.w	r3, r3, #7
 800d768:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4a16      	ldr	r2, [pc, #88]	@ (800d7c8 <prvHeapInit+0xb8>)
 800d76e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d770:	4b15      	ldr	r3, [pc, #84]	@ (800d7c8 <prvHeapInit+0xb8>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d778:	4b13      	ldr	r3, [pc, #76]	@ (800d7c8 <prvHeapInit+0xb8>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2200      	movs	r2, #0
 800d77e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	1ad2      	subs	r2, r2, r3
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d78e:	4b0e      	ldr	r3, [pc, #56]	@ (800d7c8 <prvHeapInit+0xb8>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	4a0c      	ldr	r2, [pc, #48]	@ (800d7cc <prvHeapInit+0xbc>)
 800d79c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	4a0b      	ldr	r2, [pc, #44]	@ (800d7d0 <prvHeapInit+0xc0>)
 800d7a4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7a6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d4 <prvHeapInit+0xc4>)
 800d7a8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d7ac:	601a      	str	r2, [r3, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	000186a0 	.word	0x000186a0
 800d7c0:	24001c4c 	.word	0x24001c4c
 800d7c4:	2401a2ec 	.word	0x2401a2ec
 800d7c8:	2401a2f4 	.word	0x2401a2f4
 800d7cc:	2401a2fc 	.word	0x2401a2fc
 800d7d0:	2401a2f8 	.word	0x2401a2f8
 800d7d4:	2401a308 	.word	0x2401a308

0800d7d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7e0:	4b28      	ldr	r3, [pc, #160]	@ (800d884 <prvInsertBlockIntoFreeList+0xac>)
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e002      	b.n	800d7ec <prvInsertBlockIntoFreeList+0x14>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d8f7      	bhi.n	800d7e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	4413      	add	r3, r2
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	429a      	cmp	r2, r3
 800d806:	d108      	bne.n	800d81a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	441a      	add	r2, r3
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	68ba      	ldr	r2, [r7, #8]
 800d824:	441a      	add	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d118      	bne.n	800d860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	4b15      	ldr	r3, [pc, #84]	@ (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d00d      	beq.n	800d856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	441a      	add	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681a      	ldr	r2, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	e008      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <prvInsertBlockIntoFreeList+0xb0>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e003      	b.n	800d868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d002      	beq.n	800d876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3714      	adds	r7, #20
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	2401a2ec 	.word	0x2401a2ec
 800d888:	2401a2f4 	.word	0x2401a2f4

0800d88c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
}
 800d890:	bf00      	nop
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800d89e:	f005 f891 	bl	80129c4 <touchgfx_components_init>
    touchgfx_init();
 800d8a2:	f005 f865 	bl	8012970 <touchgfx_init>
}
 800d8a6:	bf00      	nop
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800d8b2:	f005 f88f 	bl	80129d4 <touchgfx_taskEntry>
}
 800d8b6:	bf00      	nop
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
    {
 800d8c8:	4a04      	ldr	r2, [pc, #16]	@ (800d8dc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	601a      	str	r2, [r3, #0]
    }
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	08026f08 	.word	0x08026f08

0800d8e0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
    }
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff ffe9 	bl	800d8c0 <_ZN8touchgfx12FontProviderD1Ev>
 800d8ee:	2104      	movs	r1, #4
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f017 fb02 	bl	8024efa <_ZdlPvj>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	460b      	mov	r3, r1
 800d90a:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d90c:	887b      	ldrh	r3, [r7, #2]
 800d90e:	2b03      	cmp	r3, #3
 800d910:	d81e      	bhi.n	800d950 <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800d912:	a201      	add	r2, pc, #4	@ (adr r2, 800d918 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d929 	.word	0x0800d929
 800d91c:	0800d933 	.word	0x0800d933
 800d920:	0800d93d 	.word	0x0800d93d
 800d924:	0800d947 	.word	0x0800d947
    {
    case Typography::DEFAULT:
        // verdana_80_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d928:	f003 f9e2 	bl	8010cf0 <_ZN17TypedTextDatabase8getFontsEv>
 800d92c:	4603      	mov	r3, r0
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	e00f      	b.n	800d952 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d932:	f003 f9dd 	bl	8010cf0 <_ZN17TypedTextDatabase8getFontsEv>
 800d936:	4603      	mov	r3, r0
 800d938:	685b      	ldr	r3, [r3, #4]
 800d93a:	e00a      	b.n	800d952 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d93c:	f003 f9d8 	bl	8010cf0 <_ZN17TypedTextDatabase8getFontsEv>
 800d940:	4603      	mov	r3, r0
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	e005      	b.n	800d952 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::CONTAINER:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800d946:	f003 f9d3 	bl	8010cf0 <_ZN17TypedTextDatabase8getFontsEv>
 800d94a:	4603      	mov	r3, r0
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	e000      	b.n	800d952 <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800d950:	2300      	movs	r3, #0
    }
}
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop

0800d95c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;     // verdana_10_4bpp
    static const touchgfx::FontId CONTAINER = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	4a05      	ldr	r2, [pc, #20]	@ (800d97c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff ffa7 	bl	800d8c0 <_ZN8touchgfx12FontProviderD1Ev>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	08026ef4 	.word	0x08026ef4

0800d980 <_ZN23ApplicationFontProviderD0Ev>:
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff ffe7 	bl	800d95c <_ZN23ApplicationFontProviderD1Ev>
 800d98e:	2104      	movs	r1, #4
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f017 fab2 	bl	8024efa <_ZdlPvj>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
    {
 800d9a8:	4a04      	ldr	r2, [pc, #16]	@ (800d9bc <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	601a      	str	r2, [r3, #0]
    }
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	080274a0 	.word	0x080274a0

0800d9c0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
    }
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff ffe9 	bl	800d9a0 <_ZN8touchgfx4FontD1Ev>
 800d9ce:	2114      	movs	r1, #20
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f017 fa92 	bl	8024efa <_ZdlPvj>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d9e0:	b590      	push	{r4, r7, lr}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d9ec:	887b      	ldrh	r3, [r7, #2]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e010      	b.n	800da18 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	3308      	adds	r3, #8
 800da04:	681c      	ldr	r4, [r3, #0]
 800da06:	f107 030f 	add.w	r3, r7, #15
 800da0a:	f107 0210 	add.w	r2, r7, #16
 800da0e:	8879      	ldrh	r1, [r7, #2]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	47a0      	blx	r4
 800da14:	6178      	str	r0, [r7, #20]
        return glyph;
 800da16:	697b      	ldr	r3, [r7, #20]
    }
 800da18:	4618      	mov	r0, r3
 800da1a:	371c      	adds	r7, #28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd90      	pop	{r4, r7, pc}

0800da20 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	89db      	ldrh	r3, [r3, #14]
    }
 800da2c:	4618      	mov	r0, r3
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8a1b      	ldrh	r3, [r3, #16]
    }
 800da44:	4618      	mov	r0, r3
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	88db      	ldrh	r3, [r3, #6]
    }
 800da5c:	4618      	mov	r0, r3
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	889b      	ldrh	r3, [r3, #4]
    }
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	7a9b      	ldrb	r3, [r3, #10]
 800da8c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800da90:	b2db      	uxtb	r3, r3
    }
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800da9e:	b480      	push	{r7}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	7a9b      	ldrb	r3, [r3, #10]
 800daaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800daae:	b2db      	uxtb	r3, r3
    }
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
    {
        return false;
 800dac4:	2300      	movs	r3, #0
    }
 800dac6:	4618      	mov	r0, r3
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dada:	f04f 0300 	mov.w	r3, #0
 800dade:	ee07 3a90 	vmov	s15, r3
    }
 800dae2:	eeb0 0a67 	vmov.f32	s0, s15
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	4a05      	ldr	r2, [pc, #20]	@ (800db10 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	601a      	str	r2, [r3, #0]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff ff4d 	bl	800d9a0 <_ZN8touchgfx4FontD1Ev>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	4618      	mov	r0, r3
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	08028570 	.word	0x08028570

0800db14 <_ZN8touchgfx9ConstFontD0Ev>:
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff ffe7 	bl	800daf0 <_ZN8touchgfx9ConstFontD1Ev>
 800db22:	211c      	movs	r1, #28
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f017 f9e8 	bl	8024efa <_ZdlPvj>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	4a05      	ldr	r2, [pc, #20]	@ (800db54 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff ffd3 	bl	800daf0 <_ZN8touchgfx9ConstFontD1Ev>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	08026f2c 	.word	0x08026f2c

0800db58 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff ffe7 	bl	800db34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800db66:	212c      	movs	r1, #44	@ 0x2c
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f017 f9c6 	bl	8024efa <_ZdlPvj>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	4618      	mov	r0, r3
 800db72:	3708      	adds	r7, #8
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
    {
 800db80:	4a04      	ldr	r2, [pc, #16]	@ (800db94 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	601a      	str	r2, [r3, #0]
    }
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	08026f1c 	.word	0x08026f1c

0800db98 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    }
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ffe9 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
 800dba6:	2108      	movs	r1, #8
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f017 f9a6 	bl	8024efa <_ZdlPvj>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800dbdc:	4618      	mov	r0, r3
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08e      	sub	sp, #56	@ 0x38
 800dbec:	af0a      	add	r7, sp, #40	@ 0x28
 800dbee:	60f8      	str	r0, [r7, #12]
 800dbf0:	60b9      	str	r1, [r7, #8]
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	80fb      	strh	r3, [r7, #6]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	88b9      	ldrh	r1, [r7, #4]
 800dc02:	88fa      	ldrh	r2, [r7, #6]
 800dc04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc08:	9308      	str	r3, [sp, #32]
 800dc0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dc0c:	9307      	str	r3, [sp, #28]
 800dc0e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800dc12:	9306      	str	r3, [sp, #24]
 800dc14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dc18:	9305      	str	r3, [sp, #20]
 800dc1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dc1e:	9304      	str	r3, [sp, #16]
 800dc20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc24:	9303      	str	r3, [sp, #12]
 800dc26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc2a:	9302      	str	r3, [sp, #8]
 800dc2c:	7f3b      	ldrb	r3, [r7, #28]
 800dc2e:	9301      	str	r3, [sp, #4]
 800dc30:	8b3b      	ldrh	r3, [r7, #24]
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	460b      	mov	r3, r1
 800dc36:	68b9      	ldr	r1, [r7, #8]
 800dc38:	f00b fda8 	bl	801978c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800dc3c:	4a09      	ldr	r2, [pc, #36]	@ (800dc64 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc46:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc4c:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc52:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc58:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	08026f2c 	.word	0x08026f2c

0800dc68 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b085      	sub	sp, #20
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	889b      	ldrh	r3, [r3, #4]
 800dc7c:	0adb      	lsrs	r3, r3, #11
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	68fa      	ldr	r2, [r7, #12]
 800dc84:	4413      	add	r3, r2
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4413      	add	r3, r2
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b089      	sub	sp, #36	@ 0x24
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	60f8      	str	r0, [r7, #12]
 800dca2:	460b      	mov	r3, r1
 800dca4:	607a      	str	r2, [r7, #4]
 800dca6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d003      	beq.n	800dcb6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7b1b      	ldrb	r3, [r3, #12]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d101      	bne.n	800dcba <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e031      	b.n	800dd1e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6a1a      	ldr	r2, [r3, #32]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	7b5b      	ldrb	r3, [r3, #13]
 800dcc6:	021b      	lsls	r3, r3, #8
 800dcc8:	b21b      	sxth	r3, r3
 800dcca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dcce:	b219      	sxth	r1, r3
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	7adb      	ldrb	r3, [r3, #11]
 800dcd4:	b21b      	sxth	r3, r3
 800dcd6:	430b      	orrs	r3, r1
 800dcd8:	b21b      	sxth	r3, r3
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7b1b      	ldrb	r3, [r3, #12]
 800dce6:	837b      	strh	r3, [r7, #26]
 800dce8:	e013      	b.n	800dd12 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	881b      	ldrh	r3, [r3, #0]
 800dcee:	897a      	ldrh	r2, [r7, #10]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d103      	bne.n	800dcfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dcfa:	e010      	b.n	800dd1e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	881b      	ldrh	r3, [r3, #0]
 800dd00:	897a      	ldrh	r2, [r7, #10]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d309      	bcc.n	800dd1a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dd06:	8b7b      	ldrh	r3, [r7, #26]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	837b      	strh	r3, [r7, #26]
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	3304      	adds	r3, #4
 800dd10:	61fb      	str	r3, [r7, #28]
 800dd12:	8b7b      	ldrh	r3, [r7, #26]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1e8      	bne.n	800dcea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800dd18:	e000      	b.n	800dd1c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800dd1a:	bf00      	nop
        }
    }
    return 0;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3724      	adds	r7, #36	@ 0x24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
	...

0800dd2c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	4801      	ldr	r0, [pc, #4]	@ (800dd38 <__tcf_0+0xc>)
 800dd32:	f7ff feff 	bl	800db34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	2401a30c 	.word	0x2401a30c

0800dd3c <_Z23getFont_verdana_10_4bppv>:
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08e      	sub	sp, #56	@ 0x38
 800dd40:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dd42:	4b21      	ldr	r3, [pc, #132]	@ (800ddc8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f3bf 8f5b 	dmb	ish
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bf0c      	ite	eq
 800dd52:	2301      	moveq	r3, #1
 800dd54:	2300      	movne	r3, #0
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d030      	beq.n	800ddbe <_Z23getFont_verdana_10_4bppv+0x82>
 800dd5c:	481a      	ldr	r0, [pc, #104]	@ (800ddc8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd5e:	f017 f8ce 	bl	8024efe <__cxa_guard_acquire>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bf14      	ite	ne
 800dd68:	2301      	movne	r3, #1
 800dd6a:	2300      	moveq	r3, #0
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d025      	beq.n	800ddbe <_Z23getFont_verdana_10_4bppv+0x82>
 800dd72:	2300      	movs	r3, #0
 800dd74:	930c      	str	r3, [sp, #48]	@ 0x30
 800dd76:	2300      	movs	r3, #0
 800dd78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd7e:	233f      	movs	r3, #63	@ 0x3f
 800dd80:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd82:	4b12      	ldr	r3, [pc, #72]	@ (800ddcc <_Z23getFont_verdana_10_4bppv+0x90>)
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	4b12      	ldr	r3, [pc, #72]	@ (800ddd0 <_Z23getFont_verdana_10_4bppv+0x94>)
 800dd88:	9307      	str	r3, [sp, #28]
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	9306      	str	r3, [sp, #24]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	2301      	movs	r3, #1
 800dd94:	9304      	str	r3, [sp, #16]
 800dd96:	2304      	movs	r3, #4
 800dd98:	9303      	str	r3, [sp, #12]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	9302      	str	r3, [sp, #8]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	9301      	str	r3, [sp, #4]
 800dda2:	230a      	movs	r3, #10
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	230a      	movs	r3, #10
 800dda8:	2201      	movs	r2, #1
 800ddaa:	490a      	ldr	r1, [pc, #40]	@ (800ddd4 <_Z23getFont_verdana_10_4bppv+0x98>)
 800ddac:	480a      	ldr	r0, [pc, #40]	@ (800ddd8 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800ddae:	f7ff ff1b 	bl	800dbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ddb2:	480a      	ldr	r0, [pc, #40]	@ (800dddc <_Z23getFont_verdana_10_4bppv+0xa0>)
 800ddb4:	f017 f8ee 	bl	8024f94 <atexit>
 800ddb8:	4803      	ldr	r0, [pc, #12]	@ (800ddc8 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800ddba:	f017 f8ac 	bl	8024f16 <__cxa_guard_release>
    return verdana_10_4bpp;
 800ddbe:	4b06      	ldr	r3, [pc, #24]	@ (800ddd8 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	2401a338 	.word	0x2401a338
 800ddcc:	080288e4 	.word	0x080288e4
 800ddd0:	080288f4 	.word	0x080288f4
 800ddd4:	90003c54 	.word	0x90003c54
 800ddd8:	2401a30c 	.word	0x2401a30c
 800dddc:	0800dd2d 	.word	0x0800dd2d

0800dde0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 20, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	4801      	ldr	r0, [pc, #4]	@ (800ddec <__tcf_0+0xc>)
 800dde6:	f7ff fea5 	bl	800db34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	2401a33c 	.word	0x2401a33c

0800ddf0 <_Z23getFont_verdana_20_4bppv>:
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08e      	sub	sp, #56	@ 0x38
 800ddf4:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 20, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800ddf6:	4b21      	ldr	r3, [pc, #132]	@ (800de7c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f3bf 8f5b 	dmb	ish
 800ddfe:	f003 0301 	and.w	r3, r3, #1
 800de02:	2b00      	cmp	r3, #0
 800de04:	bf0c      	ite	eq
 800de06:	2301      	moveq	r3, #1
 800de08:	2300      	movne	r3, #0
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d030      	beq.n	800de72 <_Z23getFont_verdana_20_4bppv+0x82>
 800de10:	481a      	ldr	r0, [pc, #104]	@ (800de7c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800de12:	f017 f874 	bl	8024efe <__cxa_guard_acquire>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	bf14      	ite	ne
 800de1c:	2301      	movne	r3, #1
 800de1e:	2300      	moveq	r3, #0
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	d025      	beq.n	800de72 <_Z23getFont_verdana_20_4bppv+0x82>
 800de26:	2300      	movs	r3, #0
 800de28:	930c      	str	r3, [sp, #48]	@ 0x30
 800de2a:	2300      	movs	r3, #0
 800de2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de2e:	2300      	movs	r3, #0
 800de30:	930a      	str	r3, [sp, #40]	@ 0x28
 800de32:	233f      	movs	r3, #63	@ 0x3f
 800de34:	9309      	str	r3, [sp, #36]	@ 0x24
 800de36:	4b12      	ldr	r3, [pc, #72]	@ (800de80 <_Z23getFont_verdana_20_4bppv+0x90>)
 800de38:	9308      	str	r3, [sp, #32]
 800de3a:	4b12      	ldr	r3, [pc, #72]	@ (800de84 <_Z23getFont_verdana_20_4bppv+0x94>)
 800de3c:	9307      	str	r3, [sp, #28]
 800de3e:	2300      	movs	r3, #0
 800de40:	9306      	str	r3, [sp, #24]
 800de42:	2300      	movs	r3, #0
 800de44:	9305      	str	r3, [sp, #20]
 800de46:	2301      	movs	r3, #1
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	2304      	movs	r3, #4
 800de4c:	9303      	str	r3, [sp, #12]
 800de4e:	2300      	movs	r3, #0
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	2300      	movs	r3, #0
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	2314      	movs	r3, #20
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	2314      	movs	r3, #20
 800de5c:	2214      	movs	r2, #20
 800de5e:	490a      	ldr	r1, [pc, #40]	@ (800de88 <_Z23getFont_verdana_20_4bppv+0x98>)
 800de60:	480a      	ldr	r0, [pc, #40]	@ (800de8c <_Z23getFont_verdana_20_4bppv+0x9c>)
 800de62:	f7ff fec1 	bl	800dbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de66:	480a      	ldr	r0, [pc, #40]	@ (800de90 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800de68:	f017 f894 	bl	8024f94 <atexit>
 800de6c:	4803      	ldr	r0, [pc, #12]	@ (800de7c <_Z23getFont_verdana_20_4bppv+0x8c>)
 800de6e:	f017 f852 	bl	8024f16 <__cxa_guard_release>
    return verdana_20_4bpp;
 800de72:	4b06      	ldr	r3, [pc, #24]	@ (800de8c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800de74:	4618      	mov	r0, r3
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	2401a368 	.word	0x2401a368
 800de80:	080288e8 	.word	0x080288e8
 800de84:	080288f8 	.word	0x080288f8
 800de88:	90003c64 	.word	0x90003c64
 800de8c:	2401a33c 	.word	0x2401a33c
 800de90:	0800dde1 	.word	0x0800dde1

0800de94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0
 800de98:	4801      	ldr	r0, [pc, #4]	@ (800dea0 <__tcf_0+0xc>)
 800de9a:	f7ff fe4b 	bl	800db34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	2401a36c 	.word	0x2401a36c

0800dea4 <_Z23getFont_verdana_40_4bppv>:
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b08e      	sub	sp, #56	@ 0x38
 800dea8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800deaa:	4b21      	ldr	r3, [pc, #132]	@ (800df30 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f3bf 8f5b 	dmb	ish
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	bf0c      	ite	eq
 800deba:	2301      	moveq	r3, #1
 800debc:	2300      	movne	r3, #0
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d030      	beq.n	800df26 <_Z23getFont_verdana_40_4bppv+0x82>
 800dec4:	481a      	ldr	r0, [pc, #104]	@ (800df30 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800dec6:	f017 f81a 	bl	8024efe <__cxa_guard_acquire>
 800deca:	4603      	mov	r3, r0
 800decc:	2b00      	cmp	r3, #0
 800dece:	bf14      	ite	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	2300      	moveq	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d025      	beq.n	800df26 <_Z23getFont_verdana_40_4bppv+0x82>
 800deda:	2300      	movs	r3, #0
 800dedc:	930c      	str	r3, [sp, #48]	@ 0x30
 800dede:	2300      	movs	r3, #0
 800dee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dee2:	2300      	movs	r3, #0
 800dee4:	930a      	str	r3, [sp, #40]	@ 0x28
 800dee6:	233f      	movs	r3, #63	@ 0x3f
 800dee8:	9309      	str	r3, [sp, #36]	@ 0x24
 800deea:	4b12      	ldr	r3, [pc, #72]	@ (800df34 <_Z23getFont_verdana_40_4bppv+0x90>)
 800deec:	9308      	str	r3, [sp, #32]
 800deee:	4b12      	ldr	r3, [pc, #72]	@ (800df38 <_Z23getFont_verdana_40_4bppv+0x94>)
 800def0:	9307      	str	r3, [sp, #28]
 800def2:	2300      	movs	r3, #0
 800def4:	9306      	str	r3, [sp, #24]
 800def6:	2300      	movs	r3, #0
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	2301      	movs	r3, #1
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	2304      	movs	r3, #4
 800df00:	9303      	str	r3, [sp, #12]
 800df02:	2300      	movs	r3, #0
 800df04:	9302      	str	r3, [sp, #8]
 800df06:	2300      	movs	r3, #0
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	2328      	movs	r3, #40	@ 0x28
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	2328      	movs	r3, #40	@ 0x28
 800df10:	2201      	movs	r2, #1
 800df12:	490a      	ldr	r1, [pc, #40]	@ (800df3c <_Z23getFont_verdana_40_4bppv+0x98>)
 800df14:	480a      	ldr	r0, [pc, #40]	@ (800df40 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800df16:	f7ff fe67 	bl	800dbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800df1a:	480a      	ldr	r0, [pc, #40]	@ (800df44 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800df1c:	f017 f83a 	bl	8024f94 <atexit>
 800df20:	4803      	ldr	r0, [pc, #12]	@ (800df30 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800df22:	f016 fff8 	bl	8024f16 <__cxa_guard_release>
    return verdana_40_4bpp;
 800df26:	4b06      	ldr	r3, [pc, #24]	@ (800df40 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800df28:	4618      	mov	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	2401a398 	.word	0x2401a398
 800df34:	080288ec 	.word	0x080288ec
 800df38:	080288fc 	.word	0x080288fc
 800df3c:	90003d7c 	.word	0x90003d7c
 800df40:	2401a36c 	.word	0x2401a36c
 800df44:	0800de95 	.word	0x0800de95

0800df48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_80_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_80_4bpp();

touchgfx::GeneratedFont& getFont_verdana_80_4bpp()
{
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 13, 81, 80, 0, 0, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0, 0);
 800df48:	b580      	push	{r7, lr}
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	4801      	ldr	r0, [pc, #4]	@ (800df54 <__tcf_0+0xc>)
 800df4e:	f7ff fdf1 	bl	800db34 <_ZN8touchgfx13GeneratedFontD1Ev>
 800df52:	bd80      	pop	{r7, pc}
 800df54:	2401a39c 	.word	0x2401a39c

0800df58 <_Z23getFont_verdana_80_4bppv>:
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08e      	sub	sp, #56	@ 0x38
 800df5c:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_80_4bpp(glyphs_verdana_80_4bpp, 13, 81, 80, 0, 0, 4, 1, 0, 0, unicodes_verdana_80_4bpp, kerning_verdana_80_4bpp, 63, 0, 0, 0);
 800df5e:	4b21      	ldr	r3, [pc, #132]	@ (800dfe4 <_Z23getFont_verdana_80_4bppv+0x8c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f3bf 8f5b 	dmb	ish
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bf0c      	ite	eq
 800df6e:	2301      	moveq	r3, #1
 800df70:	2300      	movne	r3, #0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	d030      	beq.n	800dfda <_Z23getFont_verdana_80_4bppv+0x82>
 800df78:	481a      	ldr	r0, [pc, #104]	@ (800dfe4 <_Z23getFont_verdana_80_4bppv+0x8c>)
 800df7a:	f016 ffc0 	bl	8024efe <__cxa_guard_acquire>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d025      	beq.n	800dfda <_Z23getFont_verdana_80_4bppv+0x82>
 800df8e:	2300      	movs	r3, #0
 800df90:	930c      	str	r3, [sp, #48]	@ 0x30
 800df92:	2300      	movs	r3, #0
 800df94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df96:	2300      	movs	r3, #0
 800df98:	930a      	str	r3, [sp, #40]	@ 0x28
 800df9a:	233f      	movs	r3, #63	@ 0x3f
 800df9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df9e:	4b12      	ldr	r3, [pc, #72]	@ (800dfe8 <_Z23getFont_verdana_80_4bppv+0x90>)
 800dfa0:	9308      	str	r3, [sp, #32]
 800dfa2:	4b12      	ldr	r3, [pc, #72]	@ (800dfec <_Z23getFont_verdana_80_4bppv+0x94>)
 800dfa4:	9307      	str	r3, [sp, #28]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	9306      	str	r3, [sp, #24]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	9305      	str	r3, [sp, #20]
 800dfae:	2301      	movs	r3, #1
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	2304      	movs	r3, #4
 800dfb4:	9303      	str	r3, [sp, #12]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	9302      	str	r3, [sp, #8]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	2350      	movs	r3, #80	@ 0x50
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	2351      	movs	r3, #81	@ 0x51
 800dfc4:	220d      	movs	r2, #13
 800dfc6:	490a      	ldr	r1, [pc, #40]	@ (800dff0 <_Z23getFont_verdana_80_4bppv+0x98>)
 800dfc8:	480a      	ldr	r0, [pc, #40]	@ (800dff4 <_Z23getFont_verdana_80_4bppv+0x9c>)
 800dfca:	f7ff fe0d 	bl	800dbe8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dfce:	480a      	ldr	r0, [pc, #40]	@ (800dff8 <_Z23getFont_verdana_80_4bppv+0xa0>)
 800dfd0:	f016 ffe0 	bl	8024f94 <atexit>
 800dfd4:	4803      	ldr	r0, [pc, #12]	@ (800dfe4 <_Z23getFont_verdana_80_4bppv+0x8c>)
 800dfd6:	f016 ff9e 	bl	8024f16 <__cxa_guard_release>
    return verdana_80_4bpp;
 800dfda:	4b06      	ldr	r3, [pc, #24]	@ (800dff4 <_Z23getFont_verdana_80_4bppv+0x9c>)
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	2401a3c8 	.word	0x2401a3c8
 800dfe8:	080288f0 	.word	0x080288f0
 800dfec:	08028900 	.word	0x08028900
 800dff0:	90003d8c 	.word	0x90003d8c
 800dff4:	2401a39c 	.word	0x2401a39c
 800dff8:	0800df49 	.word	0x0800df49

0800dffc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e014:	b480      	push	{r7}
 800e016:	b083      	sub	sp, #12
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e034:	bf00      	nop
 800e036:	370c      	adds	r7, #12
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e04a:	bf00      	nop
 800e04c:	370c      	adds	r7, #12
 800e04e:	46bd      	mov	sp, r7
 800e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e054:	4770      	bx	lr

0800e056 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e056:	b480      	push	{r7}
 800e058:	b083      	sub	sp, #12
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
 800e05e:	460b      	mov	r3, r1
 800e060:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800e062:	bf00      	nop
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e06e:	b480      	push	{r7}
 800e070:	b083      	sub	sp, #12
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
    {
    }
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e082:	b480      	push	{r7}
 800e084:	b083      	sub	sp, #12
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
    {
    }
 800e08a:	bf00      	nop
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
	...

0800e098 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e098:	b480      	push	{r7}
 800e09a:	b083      	sub	sp, #12
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
    {
 800e0a0:	4a04      	ldr	r2, [pc, #16]	@ (800e0b4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	601a      	str	r2, [r3, #0]
    }
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	080270b4 	.word	0x080270b4

0800e0b8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
    }
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7ff ffe9 	bl	800e098 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e0c6:	2104      	movs	r1, #4
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f016 ff16 	bl	8024efa <_ZdlPvj>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
    {
    }
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	683a      	ldr	r2, [r7, #0]
 800e112:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800e116:	6810      	ldr	r0, [r2, #0]
 800e118:	6851      	ldr	r1, [r2, #4]
 800e11a:	c303      	stmia	r3!, {r0, r1}
    }
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3304      	adds	r3, #4
 800e134:	4618      	mov	r0, r3
 800e136:	f00a f9f7 	bl	8018528 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
	...

0800e144 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
    {
 800e14c:	4a04      	ldr	r2, [pc, #16]	@ (800e160 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
    }
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	4618      	mov	r0, r3
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	0802709c 	.word	0x0802709c

0800e164 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
    }
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff ffe9 	bl	800e144 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e172:	2104      	movs	r1, #4
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f016 fec0 	bl	8024efa <_ZdlPvj>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e184:	b480      	push	{r7}
 800e186:	af00      	add	r7, sp, #0
    {
        return instance;
 800e188:	4b03      	ldr	r3, [pc, #12]	@ (800e198 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e18a:	681b      	ldr	r3, [r3, #0]
    }
 800e18c:	4618      	mov	r0, r3
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
 800e196:	bf00      	nop
 800e198:	2401bb38 	.word	0x2401bb38

0800e19c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e1d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d008      	beq.n	800e1be <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e1ac:	4b08      	ldr	r3, [pc, #32]	@ (800e1d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e1b6:	4b06      	ldr	r3, [pc, #24]	@ (800e1d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1bc:	e002      	b.n	800e1c4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e1be:	4b04      	ldr	r3, [pc, #16]	@ (800e1d0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
    }
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1cc:	4770      	bx	lr
 800e1ce:	bf00      	nop
 800e1d0:	2401bb38 	.word	0x2401bb38

0800e1d4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e1dc:	4a07      	ldr	r2, [pc, #28]	@ (800e1fc <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	605a      	str	r2, [r3, #4]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	721a      	strb	r2, [r3, #8]
    {
    }
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr
 800e1fc:	08027078 	.word	0x08027078

0800e200 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
    {
 800e208:	4a04      	ldr	r2, [pc, #16]	@ (800e21c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	601a      	str	r2, [r3, #0]
    }
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4618      	mov	r0, r3
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	08027078 	.word	0x08027078

0800e220 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
    }
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff ffe9 	bl	800e200 <_ZN8touchgfx10TransitionD1Ev>
 800e22e:	210c      	movs	r1, #12
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f016 fe62 	bl	8024efa <_ZdlPvj>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e240:	b480      	push	{r7}
 800e242:	b083      	sub	sp, #12
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
    {
    }
 800e248:	bf00      	nop
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
    {
    }
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
    {
    }
 800e270:	bf00      	nop
 800e272:	370c      	adds	r7, #12
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e284:	f00a f912 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 800e288:	4603      	mov	r3, r0
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	323c      	adds	r2, #60	@ 0x3c
 800e28e:	6812      	ldr	r2, [r2, #0]
 800e290:	4618      	mov	r0, r3
 800e292:	4790      	blx	r2
    }
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	605a      	str	r2, [r3, #4]
    }
 800e2ac:	bf00      	nop
 800e2ae:	370c      	adds	r7, #12
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr

0800e2b8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	4a05      	ldr	r2, [pc, #20]	@ (800e2d8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	601a      	str	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7ff fee5 	bl	800e098 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3708      	adds	r7, #8
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	080284b4 	.word	0x080284b4

0800e2dc <_ZN8touchgfx11ApplicationD0Ev>:
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff ffe7 	bl	800e2b8 <_ZN8touchgfx11ApplicationD1Ev>
 800e2ea:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f016 fe03 	bl	8024efa <_ZdlPvj>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
	...

0800e300 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f00a f9de 	bl	80186cc <_ZN8touchgfx11ApplicationC1Ev>
 800e310:	4a09      	ldr	r2, [pc, #36]	@ (800e338 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a04      	ldr	r2, [pc, #16]	@ (800e33c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e32a:	6013      	str	r3, [r2, #0]
    }
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4618      	mov	r0, r3
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	08027024 	.word	0x08027024
 800e33c:	2401bb84 	.word	0x2401bb84

0800e340 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f804 	bl	800e356 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e356:	b580      	push	{r7, lr}
 800e358:	b082      	sub	sp, #8
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e364:	2b00      	cmp	r3, #0
 800e366:	d00f      	beq.n	800e388 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	330c      	adds	r3, #12
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4610      	mov	r0, r2
 800e37c:	4798      	blx	r3
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e384:	2301      	movs	r3, #1
 800e386:	e000      	b.n	800e38a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e388:	2300      	movs	r3, #0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00e      	beq.n	800e3ac <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	3308      	adds	r3, #8
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800e3ac:	bf00      	nop
 800e3ae:	3708      	adds	r7, #8
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	683a      	ldr	r2, [r7, #0]
 800e3c2:	601a      	str	r2, [r3, #0]
    }
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b082      	sub	sp, #8
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	4a05      	ldr	r2, [pc, #20]	@ (800e3f0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	601a      	str	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7ff ff69 	bl	800e2b8 <_ZN8touchgfx11ApplicationD1Ev>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}
 800e3f0:	08027024 	.word	0x08027024

0800e3f4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff ffe7 	bl	800e3d0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e402:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f016 fd77 	bl	8024efa <_ZdlPvj>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	4a08      	ldr	r2, [pc, #32]	@ (800e444 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 facd 	bl	800e9cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff ffcb 	bl	800e3d0 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	08026fb8 	.word	0x08026fb8

0800e448 <_ZN23FrontendApplicationBaseD0Ev>:
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff ffe1 	bl	800e418 <_ZN23FrontendApplicationBaseD1Ev>
 800e456:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f016 fd4d 	bl	8024efa <_ZdlPvj>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4618      	mov	r0, r3
 800e464:	3708      	adds	r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b082      	sub	sp, #8
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 f882 	bl	800e57c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800e478:	bf00      	nop
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e480:	b480      	push	{r7}
 800e482:	b083      	sub	sp, #12
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	721a      	strb	r2, [r3, #8]
    }
 800e48e:	bf00      	nop
 800e490:	370c      	adds	r7, #12
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e49a:	b480      	push	{r7}
 800e49c:	b083      	sub	sp, #12
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	605a      	str	r2, [r3, #4]
    }
 800e4aa:	bf00      	nop
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
	...

0800e4b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff ff1a 	bl	800e300 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e4cc:	4a16      	ldr	r2, [pc, #88]	@ (800e528 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 f8a5 	bl	800e628 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e4ee:	f7ff fe49 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	3208      	adds	r2, #8
 800e4f8:	6812      	ldr	r2, [r2, #0]
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e500:	2000      	movs	r0, #0
 800e502:	f002 fb7d 	bl	8010c00 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e506:	f7ff fe49 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 800e50a:	4603      	mov	r3, r0
 800e50c:	4618      	mov	r0, r3
 800e50e:	f011 fbf4 	bl	801fcfa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800e512:	f7ff fe43 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 800e516:	4603      	mov	r3, r0
 800e518:	4618      	mov	r0, r3
 800e51a:	f011 fc65 	bl	801fde8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	4618      	mov	r0, r3
 800e522:	3710      	adds	r7, #16
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	08026fb8 	.word	0x08026fb8

0800e52c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4618      	mov	r0, r3
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	4611      	mov	r1, r2
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff ffe9 	bl	800e52c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	605a      	str	r2, [r3, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	3308      	adds	r3, #8
 800e568:	3208      	adds	r2, #8
 800e56a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e56e:	e883 0003 	stmia.w	r3, {r0, r1}
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4618      	mov	r0, r3
 800e576:	3708      	adds	r7, #8
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b089      	sub	sp, #36	@ 0x24
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenNoTransitionImpl);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800e58a:	4b10      	ldr	r3, [pc, #64]	@ (800e5cc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800e58c:	61bb      	str	r3, [r7, #24]
 800e58e:	2300      	movs	r3, #0
 800e590:	61fb      	str	r3, [r7, #28]
 800e592:	f107 0008 	add.w	r0, r7, #8
 800e596:	f107 0318 	add.w	r3, r7, #24
 800e59a:	cb0c      	ldmia	r3, {r2, r3}
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	f000 f85f 	bl	800e660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e5a2:	f107 0308 	add.w	r3, r7, #8
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f7ff ffcb 	bl	800e544 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e5ae:	f107 0308 	add.w	r3, r7, #8
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 fa0a 	bl	800e9cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800e5c4:	bf00      	nop
 800e5c6:	3724      	adds	r7, #36	@ 0x24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd90      	pop	{r4, r7, pc}
 800e5cc:	0800e5d1 	.word	0x0800e5d1

0800e5d0 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af02      	add	r7, sp, #8
 800e5d6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	4b04      	ldr	r3, [pc, #16]	@ (800e600 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800e5f0:	4804      	ldr	r0, [pc, #16]	@ (800e604 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800e5f2:	f000 f867 	bl	800e6c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	2401bb78 	.word	0x2401bb78
 800e604:	2401bb74 	.word	0x2401bb74

0800e608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e608:	b480      	push	{r7}
 800e60a:	b083      	sub	sp, #12
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	4a04      	ldr	r2, [pc, #16]	@ (800e624 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	601a      	str	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4618      	mov	r0, r3
 800e61a:	370c      	adds	r7, #12
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	0802709c 	.word	0x0802709c

0800e628 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff ffe8 	bl	800e608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e638:	4a08      	ldr	r2, [pc, #32]	@ (800e65c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	605a      	str	r2, [r3, #4]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	609a      	str	r2, [r3, #8]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2200      	movs	r2, #0
 800e64e:	60da      	str	r2, [r3, #12]
    {
    }
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	0802700c 	.word	0x0802700c

0800e660 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	4639      	mov	r1, r7
 800e66c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	4618      	mov	r0, r3
 800e674:	f7ff ffc8 	bl	800e608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e678:	4a08      	ldr	r2, [pc, #32]	@ (800e69c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	601a      	str	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	605a      	str	r2, [r3, #4]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	3308      	adds	r3, #8
 800e688:	463a      	mov	r2, r7
 800e68a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e68e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	4618      	mov	r0, r3
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	0802700c 	.word	0x0802700c

0800e6a0 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fd92 	bl	800e1d4 <_ZN8touchgfx10TransitionC1Ev>
 800e6b0:	4a03      	ldr	r2, [pc, #12]	@ (800e6c0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	08026f94 	.word	0x08026f94

0800e6c4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e6c4:	b590      	push	{r4, r7, lr}
 800e6c6:	b08f      	sub	sp, #60	@ 0x3c
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	607a      	str	r2, [r7, #4]
 800e6d0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	689a      	ldr	r2, [r3, #8]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	3320      	adds	r3, #32
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	4798      	blx	r3
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	f240 62fb 	movw	r2, #1787	@ 0x6fb
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d805      	bhi.n	800e6fa <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e6ee:	4b7d      	ldr	r3, [pc, #500]	@ (800e8e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e6f0:	4a7d      	ldr	r2, [pc, #500]	@ (800e8e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e6f2:	21a3      	movs	r1, #163	@ 0xa3
 800e6f4:	487d      	ldr	r0, [pc, #500]	@ (800e8ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e6f6:	f016 fc2f 	bl	8024f58 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	685b      	ldr	r3, [r3, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3320      	adds	r3, #32
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4610      	mov	r0, r2
 800e70a:	4798      	blx	r3
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b0f      	cmp	r3, #15
 800e710:	d805      	bhi.n	800e71e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800e712:	4b77      	ldr	r3, [pc, #476]	@ (800e8f0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e714:	4a74      	ldr	r2, [pc, #464]	@ (800e8e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e716:	21a4      	movs	r1, #164	@ 0xa4
 800e718:	4874      	ldr	r0, [pc, #464]	@ (800e8ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e71a:	f016 fc1d 	bl	8024f58 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68da      	ldr	r2, [r3, #12]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	3320      	adds	r3, #32
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4610      	mov	r0, r2
 800e72e:	4798      	blx	r3
 800e730:	4603      	mov	r3, r0
 800e732:	2b0b      	cmp	r3, #11
 800e734:	d805      	bhi.n	800e742 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800e736:	4b6f      	ldr	r3, [pc, #444]	@ (800e8f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e738:	4a6b      	ldr	r2, [pc, #428]	@ (800e8e8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e73a:	21a5      	movs	r1, #165	@ 0xa5
 800e73c:	486b      	ldr	r0, [pc, #428]	@ (800e8ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e73e:	f016 fc0b 	bl	8024f58 <__assert_func>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	627b      	str	r3, [r7, #36]	@ 0x24
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e74e:	f009 fead 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 800e752:	4603      	mov	r3, r0
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff fce7 	bl	800e128 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d008      	beq.n	800e774 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	330c      	adds	r3, #12
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4610      	mov	r0, r2
 800e772:	4798      	blx	r3
    if (*currentTrans)
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d007      	beq.n	800e78c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4610      	mov	r0, r2
 800e78a:	4798      	blx	r3
    if (*currentScreen)
 800e78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d008      	beq.n	800e7a6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	3314      	adds	r3, #20
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	4798      	blx	r3
    if (*currentPresenter)
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d008      	beq.n	800e7c0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	4610      	mov	r0, r2
 800e7be:	4798      	blx	r3
    if (*currentScreen)
 800e7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d007      	beq.n	800e7d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800e7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	4798      	blx	r3
    if (*currentPresenter)
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d008      	beq.n	800e7f2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	4798      	blx	r3
}
 800e7f2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 f87c 	bl	800e8f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e800:	4603      	mov	r3, r0
 800e802:	4619      	mov	r1, r3
 800e804:	200c      	movs	r0, #12
 800e806:	f7ff fbf9 	bl	800dffc <_ZnwjPv>
 800e80a:	4604      	mov	r4, r0
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7ff ff47 	bl	800e6a0 <_ZN8touchgfx12NoTransitionC1Ev>
 800e812:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	2100      	movs	r1, #0
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 f87f 	bl	800e91e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800e820:	4603      	mov	r3, r0
 800e822:	4619      	mov	r1, r3
 800e824:	f240 60fc 	movw	r0, #1788	@ 0x6fc
 800e828:	f7ff fbe8 	bl	800dffc <_ZnwjPv>
 800e82c:	4604      	mov	r4, r0
 800e82e:	4620      	mov	r0, r4
 800e830:	f002 fcc8 	bl	80111c4 <_ZN8MainViewC1Ev>
 800e834:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	2100      	movs	r1, #0
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 f881 	bl	800e944 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800e842:	4603      	mov	r3, r0
 800e844:	4619      	mov	r1, r3
 800e846:	2010      	movs	r0, #16
 800e848:	f7ff fbd8 	bl	800dffc <_ZnwjPv>
 800e84c:	4604      	mov	r4, r0
 800e84e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e850:	4620      	mov	r0, r4
 800e852:	f002 fbbf 	bl	8010fd4 <_ZN13MainPresenterC1ER8MainView>
 800e856:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e85c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e862:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e868:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e872:	3304      	adds	r3, #4
 800e874:	e000      	b.n	800e878 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e876:	2300      	movs	r3, #0
 800e878:	4619      	mov	r1, r3
 800e87a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e87c:	f7ff fd9a 	bl	800e3b4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e882:	3304      	adds	r3, #4
 800e884:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e886:	4618      	mov	r0, r3
 800e888:	f7ff fe07 	bl	800e49a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e890:	4618      	mov	r0, r3
 800e892:	f000 f86a 	bl	800e96a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800e896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e898:	61fb      	str	r3, [r7, #28]
 800e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89c:	61bb      	str	r3, [r7, #24]
 800e89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8a0:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	330c      	adds	r3, #12
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	69f8      	ldr	r0, [r7, #28]
 800e8ac:	4798      	blx	r3
    newPresenter->activate();
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	69b8      	ldr	r0, [r7, #24]
 800e8b6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e8b8:	6979      	ldr	r1, [r7, #20]
 800e8ba:	69f8      	ldr	r0, [r7, #28]
 800e8bc:	f00b fbd2 	bl	801a064 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3310      	adds	r3, #16
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6978      	ldr	r0, [r7, #20]
 800e8ca:	4798      	blx	r3
    newTransition->invalidate();
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3314      	adds	r3, #20
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6978      	ldr	r0, [r7, #20]
 800e8d6:	4798      	blx	r3
}
 800e8d8:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	373c      	adds	r7, #60	@ 0x3c
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd90      	pop	{r4, r7, pc}
 800e8e4:	0802608c 	.word	0x0802608c
 800e8e8:	0802611c 	.word	0x0802611c
 800e8ec:	080261e8 	.word	0x080261e8
 800e8f0:	0802622c 	.word	0x0802622c
 800e8f4:	080262d0 	.word	0x080262d0

0800e8f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3324      	adds	r3, #36	@ 0x24
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	887a      	ldrh	r2, [r7, #2]
 800e90e:	4611      	mov	r1, r2
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	4798      	blx	r3
 800e914:	4603      	mov	r3, r0
    }
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800e91e:	b580      	push	{r7, lr}
 800e920:	b082      	sub	sp, #8
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	460b      	mov	r3, r1
 800e928:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	3324      	adds	r3, #36	@ 0x24
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	887a      	ldrh	r2, [r7, #2]
 800e934:	4611      	mov	r1, r2
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	4798      	blx	r3
 800e93a:	4603      	mov	r3, r0
    }
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3324      	adds	r3, #36	@ 0x24
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	887a      	ldrh	r2, [r7, #2]
 800e95a:	4611      	mov	r1, r2
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	4798      	blx	r3
 800e960:	4603      	mov	r3, r0
    }
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e96a:	b480      	push	{r7}
 800e96c:	b083      	sub	sp, #12
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	683a      	ldr	r2, [r7, #0]
 800e978:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800e97a:	bf00      	nop
 800e97c:	370c      	adds	r7, #12
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
	...

0800e988 <_ZN8touchgfx12NoTransitionD1Ev>:
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
 800e990:	4a05      	ldr	r2, [pc, #20]	@ (800e9a8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	601a      	str	r2, [r3, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4618      	mov	r0, r3
 800e99a:	f7ff fc31 	bl	800e200 <_ZN8touchgfx10TransitionD1Ev>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3708      	adds	r7, #8
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	08026f94 	.word	0x08026f94

0800e9ac <_ZN8touchgfx12NoTransitionD0Ev>:
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b082      	sub	sp, #8
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff ffe7 	bl	800e988 <_ZN8touchgfx12NoTransitionD1Ev>
 800e9ba:	210c      	movs	r1, #12
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f016 fa9c 	bl	8024efa <_ZdlPvj>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3708      	adds	r7, #8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	4a05      	ldr	r2, [pc, #20]	@ (800e9ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff fbb1 	bl	800e144 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	0802700c 	.word	0x0802700c

0800e9f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff ffe7 	bl	800e9cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e9fe:	2110      	movs	r1, #16
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f016 fa7a 	bl	8024efa <_ZdlPvj>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	68d2      	ldr	r2, [r2, #12]
 800ea20:	1052      	asrs	r2, r2, #1
 800ea22:	1899      	adds	r1, r3, r2
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d102      	bne.n	800ea36 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	e00a      	b.n	800ea4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	68d2      	ldr	r2, [r2, #12]
 800ea3e:	1052      	asrs	r2, r2, #1
 800ea40:	4413      	add	r3, r2
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	6892      	ldr	r2, [r2, #8]
 800ea48:	4413      	add	r3, r2
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	4798      	blx	r3
    }
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d010      	beq.n	800ea8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d107      	bne.n	800ea80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	e000      	b.n	800ea82 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ea80:	2300      	movs	r3, #0
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d001      	beq.n	800ea8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ea86:	2301      	movs	r3, #1
 800ea88:	e000      	b.n	800ea8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ea8a:	2300      	movs	r3, #0
    }
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	6039      	str	r1, [r7, #0]
        : color(col)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	601a      	str	r2, [r3, #0]
    {
    }
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800eab6:	b480      	push	{r7}
 800eab8:	b083      	sub	sp, #12
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	801a      	strh	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	805a      	strh	r2, [r3, #2]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2200      	movs	r2, #0
 800eace:	809a      	strh	r2, [r3, #4]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	80da      	strh	r2, [r3, #6]
    {
    }
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	4608      	mov	r0, r1
 800eaee:	4611      	mov	r1, r2
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	817b      	strh	r3, [r7, #10]
 800eaf6:	460b      	mov	r3, r1
 800eaf8:	813b      	strh	r3, [r7, #8]
 800eafa:	4613      	mov	r3, r2
 800eafc:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	897a      	ldrh	r2, [r7, #10]
 800eb02:	801a      	strh	r2, [r3, #0]
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	893a      	ldrh	r2, [r7, #8]
 800eb08:	805a      	strh	r2, [r3, #2]
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	88fa      	ldrh	r2, [r7, #6]
 800eb0e:	809a      	strh	r2, [r3, #4]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	8b3a      	ldrh	r2, [r7, #24]
 800eb14:	80da      	strh	r2, [r3, #6]
    {
    }
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr

0800eb24 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	887a      	ldrh	r2, [r7, #2]
 800eb34:	801a      	strh	r2, [r3, #0]
    {
    }
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800eb4c:	4a14      	ldr	r2, [pc, #80]	@ (800eba0 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	601a      	str	r2, [r3, #0]
        : rect(),
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff ffad 	bl	800eab6 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	330c      	adds	r3, #12
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7ff ffa8 	bl	800eab6 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2201      	movs	r2, #1
 800eb90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4618      	mov	r0, r3
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	08028508 	.word	0x08028508

0800eba4 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
    {
 800ebac:	4a04      	ldr	r2, [pc, #16]	@ (800ebc0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	601a      	str	r2, [r3, #0]
    }
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	08028508 	.word	0x08028508

0800ebc4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
    }
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7ff ffe9 	bl	800eba4 <_ZN8touchgfx8DrawableD1Ev>
 800ebd2:	2128      	movs	r1, #40	@ 0x28
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f016 f990 	bl	8024efa <_ZdlPvj>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d005      	beq.n	800ec02 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	3314      	adds	r3, #20
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	4798      	blx	r3
        }
    }
 800ec02:	bf00      	nop
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ec12:	2300      	movs	r3, #0
    }
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	60f8      	str	r0, [r7, #12]
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4603      	mov	r3, r0
 800ec30:	817b      	strh	r3, [r7, #10]
 800ec32:	460b      	mov	r3, r1
 800ec34:	813b      	strh	r3, [r7, #8]
 800ec36:	4613      	mov	r3, r2
 800ec38:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800ec3a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ec3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ec42:	4619      	mov	r1, r3
 800ec44:	68f8      	ldr	r0, [r7, #12]
 800ec46:	f000 f82a 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800ec4a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ec4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec52:	4619      	mov	r1, r3
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f87e 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800ec62:	b480      	push	{r7}
 800ec64:	b083      	sub	sp, #12
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	887a      	ldrh	r2, [r7, #2]
 800ec72:	809a      	strh	r2, [r3, #4]
    }
 800ec74:	bf00      	nop
 800ec76:	370c      	adds	r7, #12
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	887a      	ldrh	r2, [r7, #2]
 800ec90:	80da      	strh	r2, [r3, #6]
    }
 800ec92:	bf00      	nop
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b082      	sub	sp, #8
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
 800eca6:	460b      	mov	r3, r1
 800eca8:	807b      	strh	r3, [r7, #2]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3330      	adds	r3, #48	@ 0x30
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ecba:	4611      	mov	r1, r2
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	4798      	blx	r3
        setY(y);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	3334      	adds	r3, #52	@ 0x34
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eccc:	4611      	mov	r1, r2
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	4798      	blx	r3
    }
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800ecda:	b480      	push	{r7}
 800ecdc:	b083      	sub	sp, #12
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	460b      	mov	r3, r1
 800ece4:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	887a      	ldrh	r2, [r7, #2]
 800ecea:	811a      	strh	r2, [r3, #8]
    }
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	460b      	mov	r3, r1
 800ed02:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	887a      	ldrh	r2, [r7, #2]
 800ed08:	815a      	strh	r2, [r3, #10]
    }
 800ed0a:	bf00      	nop
 800ed0c:	370c      	adds	r7, #12
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed14:	4770      	bx	lr

0800ed16 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800ed16:	b480      	push	{r7}
 800ed18:	b083      	sub	sp, #12
 800ed1a:	af00      	add	r7, sp, #0
 800ed1c:	6078      	str	r0, [r7, #4]
    {
    }
 800ed1e:	bf00      	nop
 800ed20:	370c      	adds	r7, #12
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr

0800ed2a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ed2a:	b480      	push	{r7}
 800ed2c:	b083      	sub	sp, #12
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	6078      	str	r0, [r7, #4]
 800ed32:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ed4a:	bf00      	nop
 800ed4c:	370c      	adds	r7, #12
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr

0800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	807b      	strh	r3, [r7, #2]
 800ed62:	4613      	mov	r3, r2
 800ed64:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	3338      	adds	r3, #56	@ 0x38
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ed72:	4611      	mov	r1, r2
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	4798      	blx	r3
        setHeight(height);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	333c      	adds	r3, #60	@ 0x3c
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ed84:	4611      	mov	r1, r2
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	4798      	blx	r3
    }
 800ed8a:	bf00      	nop
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ed92:	b480      	push	{r7}
 800ed94:	b083      	sub	sp, #12
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
 800ed9a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
    {
    }
 800edb0:	bf00      	nop
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800edca:	4618      	mov	r0, r3
 800edcc:	370c      	adds	r7, #12
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800edd6:	b480      	push	{r7}
 800edd8:	b083      	sub	sp, #12
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	807b      	strh	r3, [r7, #2]
 800edfc:	4613      	mov	r3, r2
 800edfe:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3354      	adds	r3, #84	@ 0x54
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	8879      	ldrh	r1, [r7, #2]
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ee10:	b292      	uxth	r2, r2
 800ee12:	1a8a      	subs	r2, r1, r2
 800ee14:	b292      	uxth	r2, r2
 800ee16:	b210      	sxth	r0, r2
 800ee18:	8839      	ldrh	r1, [r7, #0]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800ee20:	b292      	uxth	r2, r2
 800ee22:	1a8a      	subs	r2, r1, r2
 800ee24:	b292      	uxth	r2, r2
 800ee26:	b212      	sxth	r2, r2
 800ee28:	4601      	mov	r1, r0
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	4798      	blx	r3
    }
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ee36:	b480      	push	{r7}
 800ee38:	b083      	sub	sp, #12
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee44:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee4c:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee54:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800ee56:	bf00      	nop
 800ee58:	370c      	adds	r7, #12
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr

0800ee62 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b084      	sub	sp, #16
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	60f8      	str	r0, [r7, #12]
 800ee6a:	60b9      	str	r1, [r7, #8]
 800ee6c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f7ff ffe1 	bl	800ee36 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	601a      	str	r2, [r3, #0]
    }
 800ee82:	bf00      	nop
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b084      	sub	sp, #16
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	607b      	str	r3, [r7, #4]
 800ee94:	460b      	mov	r3, r1
 800ee96:	817b      	strh	r3, [r7, #10]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7ff ff8c 	bl	800edbc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d008      	beq.n	800eebc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff ff92 	bl	800edd6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800eebc:	2300      	movs	r3, #0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	601a      	str	r2, [r3, #0]
        }
    }
 800eec8:	bf00      	nop
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff fe32 	bl	800eb44 <_ZN8touchgfx8DrawableC1Ev>
 800eee0:	4a05      	ldr	r2, [pc, #20]	@ (800eef8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	08027d2c 	.word	0x08027d2c

0800eefc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800ef08:	4618      	mov	r0, r3
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800ef20:	4a06      	ldr	r2, [pc, #24]	@ (800ef3c <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	887a      	ldrh	r2, [r7, #2]
 800ef2a:	809a      	strh	r2, [r3, #4]
    }
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4618      	mov	r0, r3
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	08026f1c 	.word	0x08026f1c

0800ef40 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff fdfa 	bl	800eb44 <_ZN8touchgfx8DrawableC1Ev>
 800ef50:	4a03      	ldr	r2, [pc, #12]	@ (800ef60 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	08027200 	.word	0x08027200

0800ef64 <_ZN8touchgfx6WidgetD1Ev>:
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	4a05      	ldr	r2, [pc, #20]	@ (800ef84 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff fe15 	bl	800eba4 <_ZN8touchgfx8DrawableD1Ev>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	08027200 	.word	0x08027200

0800ef88 <_ZN8touchgfx6WidgetD0Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7ff ffe7 	bl	800ef64 <_ZN8touchgfx6WidgetD1Ev>
 800ef96:	2128      	movs	r1, #40	@ 0x28
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f015 ffae 	bl	8024efa <_ZdlPvj>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4618      	mov	r0, r3
 800efb4:	2326      	movs	r3, #38	@ 0x26
 800efb6:	461a      	mov	r2, r3
 800efb8:	2100      	movs	r1, #0
 800efba:	f016 f9d4 	bl	8025366 <memset>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7ff ffbd 	bl	800ef40 <_ZN8touchgfx6WidgetC1Ev>
 800efc6:	4a16      	ldr	r2, [pc, #88]	@ (800f020 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	601a      	str	r2, [r3, #0]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	3328      	adds	r3, #40	@ 0x28
 800efd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff ff9d 	bl	800ef14 <_ZN8touchgfx9TypedTextC1Et>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3330      	adds	r3, #48	@ 0x30
 800efde:	2100      	movs	r1, #0
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fd59 	bl	800ea98 <_ZN8touchgfx9colortypeC1Em>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	869a      	strh	r2, [r3, #52]	@ 0x34
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	22ff      	movs	r2, #255	@ 0xff
 800eff0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	333c      	adds	r3, #60	@ 0x3c
 800f010:	4618      	mov	r0, r3
 800f012:	f000 f8f0 	bl	800f1f6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	08028170 	.word	0x08028170

0800f024 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800f024:	b590      	push	{r4, r7, lr}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6178      	str	r0, [r7, #20]
 800f02c:	460b      	mov	r3, r1
 800f02e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7ff fe4e 	bl	800ecda <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3384      	adds	r3, #132	@ 0x84
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	697c      	ldr	r4, [r7, #20]
 800f048:	463a      	mov	r2, r7
 800f04a:	6979      	ldr	r1, [r7, #20]
 800f04c:	4610      	mov	r0, r2
 800f04e:	4798      	blx	r3
 800f050:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f054:	463a      	mov	r2, r7
 800f056:	ca07      	ldmia	r2, {r0, r1, r2}
 800f058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f05c:	bf00      	nop
 800f05e:	371c      	adds	r7, #28
 800f060:	46bd      	mov	sp, r7
 800f062:	bd90      	pop	{r4, r7, pc}

0800f064 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6178      	str	r0, [r7, #20]
 800f06c:	460b      	mov	r3, r1
 800f06e:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f076:	4611      	mov	r1, r2
 800f078:	4618      	mov	r0, r3
 800f07a:	f7ff fe3d 	bl	800ecf8 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	3384      	adds	r3, #132	@ 0x84
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	697c      	ldr	r4, [r7, #20]
 800f088:	463a      	mov	r2, r7
 800f08a:	6979      	ldr	r1, [r7, #20]
 800f08c:	4610      	mov	r0, r2
 800f08e:	4798      	blx	r3
 800f090:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f094:	463a      	mov	r2, r7
 800f096:	ca07      	ldmia	r2, {r0, r1, r2}
 800f098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f09c:	bf00      	nop
 800f09e:	371c      	adds	r7, #28
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd90      	pop	{r4, r7, pc}

0800f0a4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff fd01 	bl	800eab6 <_ZN8touchgfx4RectC1Ev>
    }
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	78fa      	ldrb	r2, [r7, #3]
 800f0cc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800f0e8:	687e      	ldr	r6, [r7, #4]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	3334      	adds	r3, #52	@ 0x34
 800f0f0:	681c      	ldr	r4, [r3, #0]
 800f0f2:	887d      	ldrh	r5, [r7, #2]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 f867 	bl	800f1c8 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f0fe:	4b1c      	ldr	r3, [pc, #112]	@ (800f170 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800f106:	4b1b      	ldr	r3, [pc, #108]	@ (800f174 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f108:	4a1b      	ldr	r2, [pc, #108]	@ (800f178 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f10a:	216c      	movs	r1, #108	@ 0x6c
 800f10c:	481b      	ldr	r0, [pc, #108]	@ (800f17c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f10e:	f015 ff23 	bl	8024f58 <__assert_func>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	889a      	ldrh	r2, [r3, #4]
 800f11a:	4b19      	ldr	r3, [pc, #100]	@ (800f180 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	429a      	cmp	r2, r3
 800f120:	bf34      	ite	cc
 800f122:	2301      	movcc	r3, #1
 800f124:	2300      	movcs	r3, #0
 800f126:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d105      	bne.n	800f138 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800f12c:	4b15      	ldr	r3, [pc, #84]	@ (800f184 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800f12e:	4a12      	ldr	r2, [pc, #72]	@ (800f178 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f130:	216d      	movs	r1, #109	@ 0x6d
 800f132:	4812      	ldr	r0, [pc, #72]	@ (800f17c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f134:	f015 ff10 	bl	8024f58 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f138:	4b13      	ldr	r3, [pc, #76]	@ (800f188 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f13e:	6819      	ldr	r1, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	889b      	ldrh	r3, [r3, #4]
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	440b      	add	r3, r1
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	4413      	add	r3, r2
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	3230      	adds	r2, #48	@ 0x30
 800f154:	6812      	ldr	r2, [r2, #0]
 800f156:	4618      	mov	r0, r3
 800f158:	4790      	blx	r2
 800f15a:	4603      	mov	r3, r0
 800f15c:	1aeb      	subs	r3, r5, r3
 800f15e:	b29b      	uxth	r3, r3
 800f160:	b21b      	sxth	r3, r3
 800f162:	4619      	mov	r1, r3
 800f164:	4630      	mov	r0, r6
 800f166:	47a0      	blx	r4
    }
 800f168:	bf00      	nop
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f170:	2401bb88 	.word	0x2401bb88
 800f174:	08026374 	.word	0x08026374
 800f178:	080263b8 	.word	0x080263b8
 800f17c:	080263f4 	.word	0x080263f4
 800f180:	2401bb8c 	.word	0x2401bb8c
 800f184:	08026438 	.word	0x08026438
 800f188:	2401bb90 	.word	0x2401bb90

0800f18c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	460b      	mov	r3, r1
 800f196:	807b      	strh	r3, [r7, #2]
 800f198:	4613      	mov	r3, r2
 800f19a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3330      	adds	r3, #48	@ 0x30
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f1aa:	4610      	mov	r0, r2
 800f1ac:	4798      	blx	r3
        setBaselineY(baselineY);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3364      	adds	r3, #100	@ 0x64
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	4798      	blx	r3
    }
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3328      	adds	r3, #40	@ 0x28
    }
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	370c      	adds	r7, #12
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f1e8:	2300      	movs	r3, #0
    }
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af02      	add	r7, sp, #8
 800f1fc:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f04f 33ff 	mov.w	r3, #4294967295
 800f204:	9300      	str	r3, [sp, #0]
 800f206:	f04f 33ff 	mov.w	r3, #4294967295
 800f20a:	2200      	movs	r2, #0
 800f20c:	2100      	movs	r1, #0
 800f20e:	f7ff fc69 	bl	800eae4 <_ZN8touchgfx4RectC1Essss>
              text(0)
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2200      	movs	r2, #0
 800f216:	609a      	str	r2, [r3, #8]
        {
        }
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
	...

0800f224 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	4a08      	ldr	r2, [pc, #32]	@ (800f250 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	3328      	adds	r3, #40	@ 0x28
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe fc9e 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7ff fe90 	bl	800ef64 <_ZN8touchgfx6WidgetD1Ev>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	08028170 	.word	0x08028170

0800f254 <_ZN8touchgfx8TextAreaD0Ev>:
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7ff ffe1 	bl	800f224 <_ZN8touchgfx8TextAreaD1Ev>
 800f262:	2148      	movs	r1, #72	@ 0x48
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f015 fe48 	bl	8024efa <_ZdlPvj>
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4618      	mov	r0, r3
 800f26e:	3708      	adds	r7, #8
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
        : TextArea()
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4618      	mov	r0, r3
 800f280:	f7ff fe92 	bl	800efa8 <_ZN8touchgfx8TextAreaC1Ev>
 800f284:	4a03      	ldr	r2, [pc, #12]	@ (800f294 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	601a      	str	r2, [r3, #0]
    {
    }
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	08028360 	.word	0x08028360

0800f298 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7ff fc9e 	bl	800ebe4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800f2a8:	bf00      	nop
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff ff9b 	bl	800f1f6 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	4a05      	ldr	r2, [pc, #20]	@ (800f2e8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff ffa3 	bl	800f224 <_ZN8touchgfx8TextAreaD1Ev>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	08028360 	.word	0x08028360

0800f2ec <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ffe7 	bl	800f2c8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f2fa:	2148      	movs	r1, #72	@ 0x48
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f015 fdfc 	bl	8024efa <_ZdlPvj>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff ffac 	bl	800f274 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800f31c:	4a05      	ldr	r2, [pc, #20]	@ (800f334 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	08027170 	.word	0x08027170

0800f338 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800f360:	4618      	mov	r0, r3
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800f376:	6839      	ldr	r1, [r7, #0]
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f7ff ffdd 	bl	800f338 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800f37e:	bf00      	nop
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
	...

0800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	2326      	movs	r3, #38	@ 0x26
 800f398:	461a      	mov	r2, r3
 800f39a:	2100      	movs	r1, #0
 800f39c:	f015 ffe3 	bl	8025366 <memset>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7ff fdcc 	bl	800ef40 <_ZN8touchgfx6WidgetC1Ev>
 800f3a8:	4a09      	ldr	r2, [pc, #36]	@ (800f3d0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	601a      	str	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	8812      	ldrh	r2, [r2, #0]
 800f3b4:	84da      	strh	r2, [r3, #38]	@ 0x26
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	22ff      	movs	r2, #255	@ 0xff
 800f3ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bmp);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f007 fb2d 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	080283f0 	.word	0x080283f0

0800f3d4 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	4a05      	ldr	r2, [pc, #20]	@ (800f3f4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7ff fbdd 	bl	800eba4 <_ZN8touchgfx8DrawableD1Ev>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	08027d2c 	.word	0x08027d2c

0800f3f8 <_ZN8touchgfx9ContainerD0Ev>:
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ffe7 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 800f406:	212c      	movs	r1, #44	@ 0x2c
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f015 fd76 	bl	8024efa <_ZdlPvj>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <_ZN15MenuElementBaseC1Ev>:
#include <gui_generated/containers/MenuElementBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

MenuElementBase::MenuElementBase()
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b097      	sub	sp, #92	@ 0x5c
 800f41c:	af02      	add	r7, sp, #8
 800f41e:	6178      	str	r0, [r7, #20]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	4618      	mov	r0, r3
 800f424:	f7ff fd54 	bl	800eed0 <_ZN8touchgfx9ContainerC1Ev>
 800f428:	4a76      	ldr	r2, [pc, #472]	@ (800f604 <_ZN15MenuElementBaseC1Ev+0x1ec>)
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	332c      	adds	r3, #44	@ 0x2c
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff ff6a 	bl	800f30c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 800f43e:	f107 0320 	add.w	r3, r7, #32
 800f442:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f446:	4618      	mov	r0, r3
 800f448:	f7ff fb6c 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800f44c:	f107 0320 	add.w	r3, r7, #32
 800f450:	4619      	mov	r1, r3
 800f452:	4620      	mov	r0, r4
 800f454:	f7ff ff98 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    setWidth(480);
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fc3b 	bl	800ecda <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(70);
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2146      	movs	r1, #70	@ 0x46
 800f468:	4618      	mov	r0, r3
 800f46a:	f7ff fc45 	bl	800ecf8 <_ZN8touchgfx8Drawable9setHeightEs>
    text.setPosition(166, 17, 288, 36);
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 800f474:	2324      	movs	r3, #36	@ 0x24
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800f47c:	2211      	movs	r2, #17
 800f47e:	21a6      	movs	r1, #166	@ 0xa6
 800f480:	f7ff fbce 	bl	800ec20 <_ZN8touchgfx8Drawable11setPositionEssss>
    text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 800f48a:	23ff      	movs	r3, #255	@ 0xff
 800f48c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800f490:	23ff      	movs	r3, #255	@ 0xff
 800f492:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800f496:	23ff      	movs	r3, #255	@ 0xff
 800f498:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f49c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f4a0:	041a      	lsls	r2, r3, #16
 800f4a2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f4a6:	021b      	lsls	r3, r3, #8
 800f4a8:	431a      	orrs	r2, r3
 800f4aa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800f4b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff faec 	bl	800ea98 <_ZN8touchgfx9colortypeC1Em>
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c2:	643c      	str	r4, [r7, #64]	@ 0x40
 800f4c4:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800f4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c8:	69fa      	ldr	r2, [r7, #28]
 800f4ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800f4cc:	bf00      	nop
    text.setLinespacing(0);
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	332c      	adds	r3, #44	@ 0x2c
 800f4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        linespace = space;
 800f4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4dc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800f4e0:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800f4e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	3384      	adds	r3, #132	@ 0x84
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 800f4ec:	463a      	mov	r2, r7
 800f4ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	4798      	blx	r3
 800f4f4:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f4f8:	463a      	mov	r2, r7
 800f4fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f500:	bf00      	nop
    Unicode::snprintf(textBuffer, TEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_841N).getText());
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800f508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f50c:	2100      	movs	r1, #0
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff fd00 	bl	800ef14 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f514:	4b3c      	ldr	r3, [pc, #240]	@ (800f608 <_ZN15MenuElementBaseC1Ev+0x1f0>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d105      	bne.n	800f528 <_ZN15MenuElementBaseC1Ev+0x110>
 800f51c:	4b3b      	ldr	r3, [pc, #236]	@ (800f60c <_ZN15MenuElementBaseC1Ev+0x1f4>)
 800f51e:	4a3c      	ldr	r2, [pc, #240]	@ (800f610 <_ZN15MenuElementBaseC1Ev+0x1f8>)
 800f520:	2160      	movs	r1, #96	@ 0x60
 800f522:	483c      	ldr	r0, [pc, #240]	@ (800f614 <_ZN15MenuElementBaseC1Ev+0x1fc>)
 800f524:	f015 fd18 	bl	8024f58 <__assert_func>
 800f528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return typedTextId < numberOfTypedTexts;
 800f52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f530:	889a      	ldrh	r2, [r3, #4]
 800f532:	4b39      	ldr	r3, [pc, #228]	@ (800f618 <_ZN15MenuElementBaseC1Ev+0x200>)
 800f534:	881b      	ldrh	r3, [r3, #0]
 800f536:	429a      	cmp	r2, r3
 800f538:	bf34      	ite	cc
 800f53a:	2301      	movcc	r3, #1
 800f53c:	2300      	movcs	r3, #0
 800f53e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <_ZN15MenuElementBaseC1Ev+0x138>
 800f544:	4b35      	ldr	r3, [pc, #212]	@ (800f61c <_ZN15MenuElementBaseC1Ev+0x204>)
 800f546:	4a32      	ldr	r2, [pc, #200]	@ (800f610 <_ZN15MenuElementBaseC1Ev+0x1f8>)
 800f548:	2161      	movs	r1, #97	@ 0x61
 800f54a:	4832      	ldr	r0, [pc, #200]	@ (800f614 <_ZN15MenuElementBaseC1Ev+0x1fc>)
 800f54c:	f015 fd04 	bl	8024f58 <__assert_func>
        return texts->getText(typedTextId);
 800f550:	4b33      	ldr	r3, [pc, #204]	@ (800f620 <_ZN15MenuElementBaseC1Ev+0x208>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800f556:	4611      	mov	r1, r2
 800f558:	4618      	mov	r0, r3
 800f55a:	f001 fba7 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 800f55e:	4603      	mov	r3, r0
 800f560:	bf00      	nop
 800f562:	4a30      	ldr	r2, [pc, #192]	@ (800f624 <_ZN15MenuElementBaseC1Ev+0x20c>)
 800f564:	210a      	movs	r1, #10
 800f566:	4620      	mov	r0, r4
 800f568:	f00c f8d2 	bl	801b710 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f56c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f570:	4618      	mov	r0, r3
 800f572:	f7fe fb01 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
    text.setWildcard(textBuffer);
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	33a4      	adds	r3, #164	@ 0xa4
 800f580:	4619      	mov	r1, r3
 800f582:	4610      	mov	r0, r2
 800f584:	f7ff fef2 	bl	800f36c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EWZF));
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 800f58e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f592:	2101      	movs	r1, #1
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff fcbd 	bl	800ef14 <_ZN8touchgfx9TypedTextC1Et>
 800f59a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f59e:	4619      	mov	r1, r3
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f006 fef3 	bl	801638c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f5a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fe fae4 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
    add(text);
 800f5b0:	697a      	ldr	r2, [r7, #20]
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	332c      	adds	r3, #44	@ 0x2c
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	f004 fd11 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    icon.setXY(119, 17);
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	3378      	adds	r3, #120	@ 0x78
 800f5c2:	2211      	movs	r2, #17
 800f5c4:	2177      	movs	r1, #119	@ 0x77
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7ff fb69 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    icon.setBitmap(touchgfx::Bitmap(BITMAP_ICON00_ID));
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 800f5d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f5d6:	2108      	movs	r1, #8
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff faa3 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800f5de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f007 fa1b 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(icon);
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	3378      	adds	r3, #120	@ 0x78
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4610      	mov	r0, r2
 800f5f4:	f004 fcf4 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3754      	adds	r7, #84	@ 0x54
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd90      	pop	{r4, r7, pc}
 800f602:	bf00      	nop
 800f604:	080270dc 	.word	0x080270dc
 800f608:	2401bb88 	.word	0x2401bb88
 800f60c:	08026374 	.word	0x08026374
 800f610:	08026478 	.word	0x08026478
 800f614:	080263f4 	.word	0x080263f4
 800f618:	2401bb8c 	.word	0x2401bb8c
 800f61c:	08026438 	.word	0x08026438
 800f620:	2401bb94 	.word	0x2401bb94
 800f624:	080264c4 	.word	0x080264c4

0800f628 <_ZN15MenuElementBaseD1Ev>:

MenuElementBase::~MenuElementBase()
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	4a0a      	ldr	r2, [pc, #40]	@ (800f65c <_ZN15MenuElementBaseD1Ev+0x34>)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
{

}
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3378      	adds	r3, #120	@ 0x78
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f84c 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	332c      	adds	r3, #44	@ 0x2c
 800f644:	4618      	mov	r0, r3
 800f646:	f000 f825 	bl	800f694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7ff fec1 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	080270dc 	.word	0x080270dc

0800f660 <_ZN15MenuElementBaseD0Ev>:
MenuElementBase::~MenuElementBase()
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
}
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7ff ffdd 	bl	800f628 <_ZN15MenuElementBaseD1Ev>
 800f66e:	21b8      	movs	r1, #184	@ 0xb8
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f015 fc42 	bl	8024efa <_ZdlPvj>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4618      	mov	r0, r3
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <_ZN15MenuElementBase10initializeEv>:

void MenuElementBase::initialize()
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]

}
 800f688:	bf00      	nop
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	4a05      	ldr	r2, [pc, #20]	@ (800f6b4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	601a      	str	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7ff fe0f 	bl	800f2c8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	08027170 	.word	0x08027170

0800f6b8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f7ff ffe7 	bl	800f694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f6c6:	214c      	movs	r1, #76	@ 0x4c
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f015 fc16 	bl	8024efa <_ZdlPvj>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	4a05      	ldr	r2, [pc, #20]	@ (800f6f8 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fc3b 	bl	800ef64 <_ZN8touchgfx6WidgetD1Ev>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	080283f0 	.word	0x080283f0

0800f6fc <_ZN8touchgfx5ImageD0Ev>:
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff ffe7 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 800f70a:	212c      	movs	r1, #44	@ 0x2c
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f015 fbf4 	bl	8024efa <_ZdlPvj>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	460b      	mov	r3, r1
 800f726:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	78fa      	ldrb	r2, [r7, #3]
 800f72c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 800f730:	bf00      	nop
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
    {
 800f744:	4a06      	ldr	r2, [pc, #24]	@ (800f760 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
    }
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	3304      	adds	r3, #4
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff fe40 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08028614 	.word	0x08028614

0800f764 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
    }
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7ff ffe5 	bl	800f73c <_ZN8touchgfx6ScreenD1Ev>
 800f772:	213c      	movs	r1, #60	@ 0x3c
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f015 fbc0 	bl	8024efa <_ZdlPvj>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
    {
    }
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
    {
    }
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
    {
    }
 800f7b4:	bf00      	nop
 800f7b6:	370c      	adds	r7, #12
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f7c0:	b480      	push	{r7}
 800f7c2:	b083      	sub	sp, #12
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
    {
    }
 800f7c8:	bf00      	nop
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	6839      	ldr	r1, [r7, #0]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f004 fbef 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f802:	bf00      	nop
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	2326      	movs	r3, #38	@ 0x26
 800f81a:	461a      	mov	r2, r3
 800f81c:	2100      	movs	r1, #0
 800f81e:	f015 fda2 	bl	8025366 <memset>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	f7ff fb8b 	bl	800ef40 <_ZN8touchgfx6WidgetC1Ev>
 800f82a:	4a09      	ldr	r2, [pc, #36]	@ (800f850 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	22ff      	movs	r2, #255	@ 0xff
 800f834:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	3328      	adds	r3, #40	@ 0x28
 800f83c:	2100      	movs	r1, #0
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff f92a 	bl	800ea98 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4618      	mov	r0, r3
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	08028200 	.word	0x08028200

0800f854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800f864:	bf00      	nop
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4618      	mov	r0, r3
 800f87c:	2326      	movs	r3, #38	@ 0x26
 800f87e:	461a      	mov	r2, r3
 800f880:	2100      	movs	r1, #0
 800f882:	f015 fd70 	bl	8025366 <memset>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4618      	mov	r0, r3
 800f88a:	f7ff fb59 	bl	800ef40 <_ZN8touchgfx6WidgetC1Ev>
 800f88e:	4a0a      	ldr	r2, [pc, #40]	@ (800f8b8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	601a      	str	r2, [r3, #0]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	629a      	str	r2, [r3, #40]	@ 0x28
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2101      	movs	r1, #1
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff ff38 	bl	800f71c <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	08028100 	.word	0x08028100

0800f8bc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800f8cc:	bf00      	nop
 800f8ce:	370c      	adds	r7, #12
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	4a05      	ldr	r2, [pc, #20]	@ (800f8f8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7ff fb3b 	bl	800ef64 <_ZN8touchgfx6WidgetD1Ev>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	08028100 	.word	0x08028100

0800f8fc <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff ffe7 	bl	800f8d8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f90a:	2130      	movs	r1, #48	@ 0x30
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f015 faf4 	bl	8024efa <_ZdlPvj>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff ffa2 	bl	800f870 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f92c:	4a0c      	ldr	r2, [pc, #48]	@ (800f960 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	601a      	str	r2, [r3, #0]
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	332e      	adds	r3, #46	@ 0x2e
 800f936:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7ff f8f2 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	3330      	adds	r3, #48	@ 0x30
 800f944:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f948:	4618      	mov	r0, r3
 800f94a:	f7ff f8eb 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	22ff      	movs	r2, #255	@ 0xff
 800f952:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4618      	mov	r0, r3
 800f95a:	3708      	adds	r7, #8
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd80      	pop	{r7, pc}
 800f960:	080282ec 	.word	0x080282ec

0800f964 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>:
 */
class DrawableListItemsInterface
{
public:
    /** Finalizes an instance of the DrawableListItemsInterface class. */
    virtual ~DrawableListItemsInterface()
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
    {
 800f96c:	4a04      	ldr	r2, [pc, #16]	@ (800f980 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev+0x1c>)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	601a      	str	r2, [r3, #0]
    }
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	370c      	adds	r7, #12
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr
 800f980:	08027344 	.word	0x08027344

0800f984 <_ZN8touchgfx26DrawableListItemsInterfaceD0Ev>:
    virtual ~DrawableListItemsInterface()
 800f984:	b580      	push	{r7, lr}
 800f986:	b082      	sub	sp, #8
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
    }
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff ffe9 	bl	800f964 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 800f992:	2104      	movs	r1, #4
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f015 fab0 	bl	8024efa <_ZdlPvj>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4618      	mov	r0, r3
 800f99e:	3708      	adds	r7, #8
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <_ZN8touchgfx10ScrollBase22setOvershootPercentageEh>:
     *
     * @param   percentage  The overshoot percentage.
     *
     * @see getOvershootPercentage
     */
    void setOvershootPercentage(uint8_t percentage)
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	70fb      	strb	r3, [r7, #3]
    {
        overshootPercentage = percentage;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	78fa      	ldrb	r2, [r7, #3]
 800f9b4:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
    }
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <_ZN8touchgfx10ScrollBase10initializeEv>:
     * @param  itemIndex Zero-based index of the changed item.
     */
    virtual void itemChanged(int itemIndex);

    /** Removed all drawables and initializes the content of these items. */
    virtual void initialize()
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
    {
        list.refreshDrawables();
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	332c      	adds	r3, #44	@ 0x2c
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f003 fe75 	bl	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
    }
 800f9d6:	bf00      	nop
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <_ZN12MainViewBase22scrollWheel1UpdateItemER11MenuElements>:
public:
    MainViewBase();
    virtual ~MainViewBase();
    virtual void setupScreen();

    virtual void scrollWheel1UpdateItem(MenuElement& item, int16_t itemIndex)
 800f9de:	b480      	push	{r7}
 800f9e0:	b085      	sub	sp, #20
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	60f8      	str	r0, [r7, #12]
 800f9e6:	60b9      	str	r1, [r7, #8]
 800f9e8:	4613      	mov	r3, r2
 800f9ea:	80fb      	strh	r3, [r7, #6]
    {
        // Override and implement this function in Main
    }
 800f9ec:	bf00      	nop
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN12MainViewBase7action1Ev>:

    /*
     * Custom Actions
     */
    virtual void action1()
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800fa00:	bf00      	nop
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr

0800fa0c <_ZN12MainViewBase7action2Ev>:
    
    virtual void action2()
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <_ZN12MainViewBase15UpButtonHandlerEv>:
    

    /*
     * Virtual Action Handlers
     */
    virtual void UpButtonHandler()
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <_ZN12MainViewBase17DownButtonHandlerEv>:
    virtual void DownButtonHandler()
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	4a05      	ldr	r2, [pc, #20]	@ (800fa68 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	601a      	str	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fe6f 	bl	800f73c <_ZN8touchgfx6ScreenD1Ev>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	08027310 	.word	0x08027310

0800fa6c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f7ff ffe7 	bl	800fa48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800fa7a:	2140      	movs	r1, #64	@ 0x40
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f015 fa3c 	bl	8024efa <_ZdlPvj>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4618      	mov	r0, r3
 800fa86:	3708      	adds	r7, #8
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>:
class ScrollBase : public Container
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	4a08      	ldr	r2, [pc, #32]	@ (800fab8 <_ZN8touchgfx10ScrollBaseD1Ev+0x2c>)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	332c      	adds	r3, #44	@ 0x2c
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f000 fe62 	bl	8010768 <_ZN8touchgfx12DrawableListD1Ev>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff fc94 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	08027b70 	.word	0x08027b70

0800fabc <_ZN8touchgfx10ScrollBaseD0Ev>:
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff ffe1 	bl	800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>
 800faca:	21bc      	movs	r1, #188	@ 0xbc
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f015 fa14 	bl	8024efa <_ZdlPvj>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZN8touchgfx15ScrollWheelBaseD1Ev>:
 * item - the font can be larger or bold and images can change color - this can help to
 * give a kind of 3D effect using very few resources.
 *
 * @see ScrollWheel, ScrollWheelWithSelectionStyle
 */
class ScrollWheelBase : public ScrollBase
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	4a05      	ldr	r2, [pc, #20]	@ (800fafc <_ZN8touchgfx15ScrollWheelBaseD1Ev+0x20>)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	f7ff ffcd 	bl	800fa8c <_ZN8touchgfx10ScrollBaseD1Ev>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	4618      	mov	r0, r3
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	08027a90 	.word	0x08027a90

0800fb00 <_ZN8touchgfx15ScrollWheelBaseD0Ev>:
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff ffe7 	bl	800fadc <_ZN8touchgfx15ScrollWheelBaseD1Ev>
 800fb0e:	21c0      	movs	r1, #192	@ 0xc0
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f015 f9f2 	bl	8024efa <_ZdlPvj>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <_ZN8touchgfx11ScrollWheelC1Ev>:
 * it possible to handle a huge number of items using only a limited number of drawables
 * by reusing drawables that are no longer in view.
 *
 * @see ScrollWheelBase, DrawableList, ScrollWheelWithSelectionStyle
 */
class ScrollWheel : public ScrollWheelBase
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f003 ff4c 	bl	80139c8 <_ZN8touchgfx15ScrollWheelBaseC1Ev>
 800fb30:	4a03      	ldr	r2, [pc, #12]	@ (800fb40 <_ZN8touchgfx11ScrollWheelC1Ev+0x20>)
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08027c48 	.word	0x08027c48

0800fb44 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>:
class DrawableListItemsInterface
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	4a04      	ldr	r2, [pc, #16]	@ (800fb60 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev+0x1c>)
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4618      	mov	r0, r3
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	08027344 	.word	0x08027344

0800fb64 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEC1Ev>:
 *              complex container.
 * @tparam SIZE Size of the array. This is the number of drawables to allocate and should be
 *              all visible drawables on the screen at any given time.
 */
template <class TYPE, int SIZE>
class DrawableListItems : public DrawableListItemsInterface
 800fb64:	b5b0      	push	{r4, r5, r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7ff ffe8 	bl	800fb44 <_ZN8touchgfx26DrawableListItemsInterfaceC1Ev>
 800fb74:	4a09      	ldr	r2, [pc, #36]	@ (800fb9c <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEC1Ev+0x38>)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	3304      	adds	r3, #4
 800fb7e:	2403      	movs	r4, #3
 800fb80:	461d      	mov	r5, r3
 800fb82:	e004      	b.n	800fb8e <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEC1Ev+0x2a>
 800fb84:	4628      	mov	r0, r5
 800fb86:	f001 f95b 	bl	8010e40 <_ZN11MenuElementC1Ev>
 800fb8a:	3c01      	subs	r4, #1
 800fb8c:	35b8      	adds	r5, #184	@ 0xb8
 800fb8e:	2c00      	cmp	r4, #0
 800fb90:	daf8      	bge.n	800fb84 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEC1Ev+0x20>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4618      	mov	r0, r3
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb9c:	080272f8 	.word	0x080272f8

0800fba0 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 800fba0:	b590      	push	{r4, r7, lr}
 800fba2:	b0a7      	sub	sp, #156	@ 0x9c
 800fba4:	af02      	add	r7, sp, #8
 800fba6:	6178      	str	r0, [r7, #20]
    updateItemCallback(this, &MainViewBase::updateItemCallbackHandler),
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f000 fc3a 	bl	8010424 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 800fbb0:	4ade      	ldr	r2, [pc, #888]	@ (800ff2c <_ZN12MainViewBaseC1Ev+0x38c>)
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	3340      	adds	r3, #64	@ 0x40
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7ff fe26 	bl	800f80c <_ZN8touchgfx3BoxC1Ev>
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	336c      	adds	r3, #108	@ 0x6c
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f004 fda7 	bl	8014718 <_ZN8touchgfx14SwipeContainerC1Ev>
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff f97d 	bl	800eed0 <_ZN8touchgfx9ContainerC1Ev>
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	f503 74c8 	add.w	r4, r3, #400	@ 0x190
 800fbdc:	f107 0320 	add.w	r3, r7, #32
 800fbe0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fe ff9d 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fbea:	f107 0320 	add.w	r3, r7, #32
 800fbee:	4619      	mov	r1, r3
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f7ff fbc9 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7ff fe8d 	bl	800f91c <_ZN8touchgfx6ButtonC1Ev>
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7ff fe87 	bl	800f91c <_ZN8touchgfx6ButtonC1Ev>
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	f503 7409 	add.w	r4, r3, #548	@ 0x224
 800fc14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc18:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fe ff81 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fc22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fc26:	4619      	mov	r1, r3
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f7ff fbad 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff fb69 	bl	800f30c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff f945 	bl	800eed0 <_ZN8touchgfx9ContainerC1Ev>
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f503 7432 	add.w	r4, r3, #712	@ 0x2c8
 800fc4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fe ff65 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fc5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fc5e:	4619      	mov	r1, r3
 800fc60:	4620      	mov	r0, r4
 800fc62:	f7ff fb91 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff ff57 	bl	800fb20 <_ZN8touchgfx11ScrollWheelC1Ev>
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f503 736d 	add.w	r3, r3, #948	@ 0x3b4
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff ff73 	bl	800fb64 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEC1Ev>
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	f503 64d3 	add.w	r4, r3, #1688	@ 0x698
 800fc84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fc88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fe ff49 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fc92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fc96:	4619      	mov	r1, r3
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f7ff fb75 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
    updateItemCallback(this, &MainViewBase::updateItemCallbackHandler),
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	f503 60db 	add.w	r0, r3, #1752	@ 0x6d8
 800fca4:	4ba2      	ldr	r3, [pc, #648]	@ (800ff30 <_ZN12MainViewBaseC1Ev+0x390>)
 800fca6:	633b      	str	r3, [r7, #48]	@ 0x30
 800fca8:	2300      	movs	r3, #0
 800fcaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fcb0:	cb0c      	ldmia	r3, {r2, r3}
 800fcb2:	6979      	ldr	r1, [r7, #20]
 800fcb4:	f000 fbdc 	bl	8010470 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	f503 60dd 	add.w	r0, r3, #1768	@ 0x6e8
 800fcbe:	4b9d      	ldr	r3, [pc, #628]	@ (800ff34 <_ZN12MainViewBaseC1Ev+0x394>)
 800fcc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fcc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fcca:	cb0c      	ldmia	r3, {r2, r3}
 800fccc:	6979      	ldr	r1, [r7, #20]
 800fcce:	f000 fbff 	bl	80104d0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 800fcd2:	697b      	ldr	r3, [r7, #20]
 800fcd4:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800fcd8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800fce2:	2200      	movs	r2, #0
 800fce4:	2100      	movs	r1, #0
 800fce6:	f7fe ff9b 	bl	800ec20 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800fd02:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800fd06:	041a      	lsls	r2, r3, #16
 800fd08:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800fd0c:	021b      	lsls	r3, r3, #8
 800fd0e:	431a      	orrs	r2, r3
 800fd10:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800fd14:	4313      	orrs	r3, r2
 800fd16:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800fd1a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe feb9 	bl	800ea98 <_ZN8touchgfx9colortypeC1Em>
 800fd26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fd28:	4619      	mov	r1, r3
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff fd92 	bl	800f854 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800fd30:	697a      	ldr	r2, [r7, #20]
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	3340      	adds	r3, #64	@ 0x40
 800fd36:	4619      	mov	r1, r3
 800fd38:	4610      	mov	r0, r2
 800fd3a:	f7ff fd57 	bl	800f7ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    swipeContainer1.setXY(0, 0);
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	336c      	adds	r3, #108	@ 0x6c
 800fd42:	2200      	movs	r2, #0
 800fd44:	2100      	movs	r1, #0
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fe ffa9 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    swipeContainer1.setSwipeCutoff(50);
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	336c      	adds	r3, #108	@ 0x6c
 800fd50:	2132      	movs	r1, #50	@ 0x32
 800fd52:	4618      	mov	r0, r3
 800fd54:	f004 fbc5 	bl	80144e2 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    swipeContainer1.setEndSwipeElasticWidth(50);
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	336c      	adds	r3, #108	@ 0x6c
 800fd5c:	2132      	movs	r1, #50	@ 0x32
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f004 fc2a 	bl	80145b8 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>

    swipeContainer1Page1.setWidth(480);
 800fd64:	697b      	ldr	r3, [r7, #20]
 800fd66:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd6a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe ffb3 	bl	800ecda <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page1.setHeight(272);
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd7a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fe ffba 	bl	800ecf8 <_ZN8touchgfx8Drawable9setHeightEs>
    BackGround.setXY(0, 0);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	2100      	movs	r1, #0
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe ff85 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    BackGround.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	f503 74c8 	add.w	r4, r3, #400	@ 0x190
 800fd9a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fd9e:	2102      	movs	r1, #2
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7fe febf 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fda6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fdaa:	4619      	mov	r1, r3
 800fdac:	4620      	mov	r0, r4
 800fdae:	f006 fe37 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page1.add(BackGround);
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	f004 f90d 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    ButtonDown.setXY(175, 216);
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800fdcc:	22d8      	movs	r2, #216	@ 0xd8
 800fdce:	21af      	movs	r1, #175	@ 0xaf
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe ff64 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    ButtonDown.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_DOWN_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_DOWN_PRESSED_ID));
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f503 74de 	add.w	r4, r3, #444	@ 0x1bc
 800fddc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800fde0:	2104      	movs	r1, #4
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fe fe9e 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fde8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800fdec:	2103      	movs	r1, #3
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe fe98 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fdf4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800fdf8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f006 fcee 	bl	80167e0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    ButtonDown.setAction(buttonCallback);
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	f503 72de 	add.w	r2, r3, #444	@ 0x1bc
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 800fe10:	4619      	mov	r1, r3
 800fe12:	4610      	mov	r0, r2
 800fe14:	f7ff fd52 	bl	800f8bc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    swipeContainer1Page1.add(ButtonDown);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800fe24:	4619      	mov	r1, r3
 800fe26:	4610      	mov	r0, r2
 800fe28:	f004 f8da 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    ButtonUp.setXY(175, 0);
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800fe32:	2200      	movs	r2, #0
 800fe34:	21af      	movs	r1, #175	@ 0xaf
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fe ff31 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    ButtonUp.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_UP_RELEASED_ID), touchgfx::Bitmap(BITMAP_BUTTON_UP_PRESSED_ID));
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	f503 74f8 	add.w	r4, r3, #496	@ 0x1f0
 800fe42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800fe46:	2106      	movs	r1, #6
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fe6b 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fe4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800fe52:	2105      	movs	r1, #5
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fe fe65 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800fe5a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fe5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800fe62:	4619      	mov	r1, r3
 800fe64:	4620      	mov	r0, r4
 800fe66:	f006 fcbb 	bl	80167e0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    ButtonUp.setAction(buttonCallback);
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 800fe76:	4619      	mov	r1, r3
 800fe78:	4610      	mov	r0, r2
 800fe7a:	f7ff fd1f 	bl	800f8bc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    swipeContainer1Page1.add(ButtonUp);
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 800fe84:	697b      	ldr	r3, [r7, #20]
 800fe86:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	4610      	mov	r0, r2
 800fe8e:	f004 f8a7 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    TextBackGround.setXY(164, 59);
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800fe98:	223b      	movs	r2, #59	@ 0x3b
 800fe9a:	21a4      	movs	r1, #164	@ 0xa4
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fe fefe 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    TextBackGround.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	f503 7409 	add.w	r4, r3, #548	@ 0x224
 800fea8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800feac:	2107      	movs	r1, #7
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe fe38 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 800feb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800feb8:	4619      	mov	r1, r3
 800feba:	4620      	mov	r0, r4
 800febc:	f006 fdb0 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page1.add(TextBackGround);
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800fecc:	4619      	mov	r1, r3
 800fece:	4610      	mov	r0, r2
 800fed0:	f004 f886 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    TextCounter.setPosition(164, 91, 152, 90);
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f503 7014 	add.w	r0, r3, #592	@ 0x250
 800feda:	235a      	movs	r3, #90	@ 0x5a
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	2398      	movs	r3, #152	@ 0x98
 800fee0:	225b      	movs	r2, #91	@ 0x5b
 800fee2:	21a4      	movs	r1, #164	@ 0xa4
 800fee4:	f7fe fe9c 	bl	800ec20 <_ZN8touchgfx8Drawable11setPositionEssss>
    TextCounter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f503 7414 	add.w	r4, r3, #592	@ 0x250
 800feee:	23ff      	movs	r3, #255	@ 0xff
 800fef0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800fef4:	23ff      	movs	r3, #255	@ 0xff
 800fef6:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800fefa:	23ff      	movs	r3, #255	@ 0xff
 800fefc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800ff00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ff04:	041a      	lsls	r2, r3, #16
 800ff06:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800ff0a:	021b      	lsls	r3, r3, #8
 800ff0c:	431a      	orrs	r2, r3
 800ff0e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800ff12:	4313      	orrs	r3, r2
 800ff14:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800ff18:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ff1c:	4611      	mov	r1, r2
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fe fdba 	bl	800ea98 <_ZN8touchgfx9colortypeC1Em>
 800ff24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff26:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 800ff2a:	e005      	b.n	800ff38 <_ZN12MainViewBaseC1Ev+0x398>
 800ff2c:	08027268 	.word	0x08027268
 800ff30:	080103d1 	.word	0x080103d1
 800ff34:	0801038f 	.word	0x0801038f
 800ff38:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800ff3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ff3e:	69fa      	ldr	r2, [r7, #28]
 800ff40:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800ff42:	bf00      	nop
    TextCounter.setLinespacing(0);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ff4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
        linespace = space;
 800ff54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff58:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 800ff5c:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 800ff5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3384      	adds	r3, #132	@ 0x84
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f8d7 4088 	ldr.w	r4, [r7, #136]	@ 0x88
 800ff6c:	463a      	mov	r2, r7
 800ff6e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ff72:	4610      	mov	r0, r2
 800ff74:	4798      	blx	r3
 800ff76:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800ff7a:	463a      	mov	r2, r7
 800ff7c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ff82:	bf00      	nop
    Unicode::snprintf(TextCounterBuffer, TEXTCOUNTER_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_C1CY).getText());
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	f203 64c4 	addw	r4, r3, #1732	@ 0x6c4
 800ff8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ff8e:	2102      	movs	r1, #2
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe ffbf 	bl	800ef14 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ff96:	4b9e      	ldr	r3, [pc, #632]	@ (8010210 <_ZN12MainViewBaseC1Ev+0x670>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d105      	bne.n	800ffaa <_ZN12MainViewBaseC1Ev+0x40a>
 800ff9e:	4b9d      	ldr	r3, [pc, #628]	@ (8010214 <_ZN12MainViewBaseC1Ev+0x674>)
 800ffa0:	4a9d      	ldr	r2, [pc, #628]	@ (8010218 <_ZN12MainViewBaseC1Ev+0x678>)
 800ffa2:	2160      	movs	r1, #96	@ 0x60
 800ffa4:	489d      	ldr	r0, [pc, #628]	@ (801021c <_ZN12MainViewBaseC1Ev+0x67c>)
 800ffa6:	f014 ffd7 	bl	8024f58 <__assert_func>
 800ffaa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ffae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        return typedTextId < numberOfTypedTexts;
 800ffb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ffb6:	889a      	ldrh	r2, [r3, #4]
 800ffb8:	4b99      	ldr	r3, [pc, #612]	@ (8010220 <_ZN12MainViewBaseC1Ev+0x680>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	bf34      	ite	cc
 800ffc0:	2301      	movcc	r3, #1
 800ffc2:	2300      	movcs	r3, #0
 800ffc4:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d105      	bne.n	800ffd6 <_ZN12MainViewBaseC1Ev+0x436>
 800ffca:	4b96      	ldr	r3, [pc, #600]	@ (8010224 <_ZN12MainViewBaseC1Ev+0x684>)
 800ffcc:	4a92      	ldr	r2, [pc, #584]	@ (8010218 <_ZN12MainViewBaseC1Ev+0x678>)
 800ffce:	2161      	movs	r1, #97	@ 0x61
 800ffd0:	4892      	ldr	r0, [pc, #584]	@ (801021c <_ZN12MainViewBaseC1Ev+0x67c>)
 800ffd2:	f014 ffc1 	bl	8024f58 <__assert_func>
        return texts->getText(typedTextId);
 800ffd6:	4b94      	ldr	r3, [pc, #592]	@ (8010228 <_ZN12MainViewBaseC1Ev+0x688>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f000 fe63 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	bf00      	nop
 800ffea:	4a90      	ldr	r2, [pc, #576]	@ (801022c <_ZN12MainViewBaseC1Ev+0x68c>)
 800ffec:	210a      	movs	r1, #10
 800ffee:	4620      	mov	r0, r4
 800fff0:	f00b fb8e 	bl	801b710 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fff4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7fd fdbd 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
    TextCounter.setWildcard(TextCounterBuffer);
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f503 7214 	add.w	r2, r3, #592	@ 0x250
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	f203 63c4 	addw	r3, r3, #1732	@ 0x6c4
 801000a:	4619      	mov	r1, r3
 801000c:	4610      	mov	r0, r2
 801000e:	f7ff f9ad 	bl	800f36c <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    TextCounter.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KDAG));
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f503 7414 	add.w	r4, r3, #592	@ 0x250
 8010018:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801001c:	2103      	movs	r1, #3
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe ff78 	bl	800ef14 <_ZN8touchgfx9TypedTextC1Et>
 8010024:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010028:	4619      	mov	r1, r3
 801002a:	4620      	mov	r0, r4
 801002c:	f006 f9ae 	bl	801638c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010030:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd fd9f 	bl	800db78 <_ZN8touchgfx9TypedTextD1Ev>
    swipeContainer1Page1.add(TextCounter);
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8010046:	4619      	mov	r1, r3
 8010048:	4610      	mov	r0, r2
 801004a:	f003 ffc9 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page1);
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801005a:	4619      	mov	r1, r3
 801005c:	4610      	mov	r0, r2
 801005e:	f004 fc5a 	bl	8014916 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1Page2.setWidth(480);
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010068:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe fe34 	bl	800ecda <_ZN8touchgfx8Drawable8setWidthEs>
    swipeContainer1Page2.setHeight(272);
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010078:	f44f 7188 	mov.w	r1, #272	@ 0x110
 801007c:	4618      	mov	r0, r3
 801007e:	f7fe fe3b 	bl	800ecf8 <_ZN8touchgfx8Drawable9setHeightEs>
    BackGround2.setXY(0, 0);
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8010088:	2200      	movs	r2, #0
 801008a:	2100      	movs	r1, #0
 801008c:	4618      	mov	r0, r3
 801008e:	f7fe fe06 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    BackGround2.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f503 7432 	add.w	r4, r3, #712	@ 0x2c8
 8010098:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801009c:	2102      	movs	r1, #2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fd40 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 80100a4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100a8:	4619      	mov	r1, r3
 80100aa:	4620      	mov	r0, r4
 80100ac:	f006 fcb8 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page2.add(BackGround2);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80100bc:	4619      	mov	r1, r3
 80100be:	4610      	mov	r0, r2
 80100c0:	f003 ff8e 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    scrollWheel1.setPosition(0, 41, 480, 191);
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80100ca:	23bf      	movs	r3, #191	@ 0xbf
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80100d2:	2229      	movs	r2, #41	@ 0x29
 80100d4:	2100      	movs	r1, #0
 80100d6:	f7fe fda3 	bl	800ec20 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollWheel1.setHorizontal(false);
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80100e0:	2100      	movs	r1, #0
 80100e2:	4618      	mov	r0, r3
 80100e4:	f003 fee5 	bl	8013eb2 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
    scrollWheel1.setCircular(true);
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80100ee:	2101      	movs	r1, #1
 80100f0:	4618      	mov	r0, r3
 80100f2:	f003 ff39 	bl	8013f68 <_ZN8touchgfx10ScrollBase11setCircularEb>
    scrollWheel1.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80100fc:	494c      	ldr	r1, [pc, #304]	@ (8010230 <_ZN12MainViewBaseC1Ev+0x690>)
 80100fe:	4618      	mov	r0, r3
 8010100:	f003 fe17 	bl	8013d32 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>
    scrollWheel1.setSwipeAcceleration(10);
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 801010a:	210a      	movs	r1, #10
 801010c:	4618      	mov	r0, r3
 801010e:	f003 fe13 	bl	8013d38 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>
    scrollWheel1.setDragAcceleration(10);
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010118:	210a      	movs	r1, #10
 801011a:	4618      	mov	r0, r3
 801011c:	f003 fe0f 	bl	8013d3e <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>
    scrollWheel1.setNumberOfItems(6);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010126:	2106      	movs	r1, #6
 8010128:	4618      	mov	r0, r3
 801012a:	f003 fd83 	bl	8013c34 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>
    scrollWheel1.setSelectedItemOffset(60);
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010134:	213c      	movs	r1, #60	@ 0x3c
 8010136:	4618      	mov	r0, r3
 8010138:	f003 fb60 	bl	80137fc <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>
    scrollWheel1.setOvershootPercentage(0);
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010142:	2100      	movs	r1, #0
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff fc2d 	bl	800f9a4 <_ZN8touchgfx10ScrollBase22setOvershootPercentageEh>
    scrollWheel1.setDrawableSize(70, 0);
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010150:	2200      	movs	r2, #0
 8010152:	2146      	movs	r1, #70	@ 0x46
 8010154:	4618      	mov	r0, r3
 8010156:	f003 fced 	bl	8013b34 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>
    scrollWheel1.setDrawables(scrollWheel1ListItems, updateItemCallback);
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	f503 716d 	add.w	r1, r3, #948	@ 0x3b4
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f503 63db 	add.w	r3, r3, #1752	@ 0x6d8
 801016c:	461a      	mov	r2, r3
 801016e:	f003 ff12 	bl	8013f96 <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>
    scrollWheel1.animateToItem(0, 0);
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010178:	2200      	movs	r2, #0
 801017a:	2100      	movs	r1, #0
 801017c:	4618      	mov	r0, r3
 801017e:	f003 fcc9 	bl	8013b14 <_ZN8touchgfx10ScrollBase13animateToItemEss>
    swipeContainer1Page2.add(scrollWheel1);
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 801018e:	4619      	mov	r1, r3
 8010190:	4610      	mov	r0, r2
 8010192:	f003 ff25 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    overlay.setXY(0, 0);
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 801019c:	2200      	movs	r2, #0
 801019e:	2100      	movs	r1, #0
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fe fd7c 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
    overlay.setBitmap(touchgfx::Bitmap(BITMAP_OVERLAY_ID));
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	f503 64d3 	add.w	r4, r3, #1688	@ 0x698
 80101ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80101b0:	210e      	movs	r1, #14
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fe fcb6 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 80101b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80101bc:	4619      	mov	r1, r3
 80101be:	4620      	mov	r0, r4
 80101c0:	f006 fc2e 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    swipeContainer1Page2.add(overlay);
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	f503 7227 	add.w	r2, r3, #668	@ 0x29c
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 80101d0:	4619      	mov	r1, r3
 80101d2:	4610      	mov	r0, r2
 80101d4:	f003 ff04 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    swipeContainer1.add(swipeContainer1Page2);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f004 fb95 	bl	8014916 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    swipeContainer1.setSelectedPage(1);
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	336c      	adds	r3, #108	@ 0x6c
 80101f0:	2101      	movs	r1, #1
 80101f2:	4618      	mov	r0, r3
 80101f4:	f004 fb80 	bl	80148f8 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
    add(swipeContainer1);
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	336c      	adds	r3, #108	@ 0x6c
 80101fe:	4619      	mov	r1, r3
 8010200:	4610      	mov	r0, r2
 8010202:	f7ff faf3 	bl	800f7ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	4618      	mov	r0, r3
 801020a:	3794      	adds	r7, #148	@ 0x94
 801020c:	46bd      	mov	sp, r7
 801020e:	bd90      	pop	{r4, r7, pc}
 8010210:	2401bb88 	.word	0x2401bb88
 8010214:	080264c8 	.word	0x080264c8
 8010218:	080265cc 	.word	0x080265cc
 801021c:	08026548 	.word	0x08026548
 8010220:	2401bb8c 	.word	0x2401bb8c
 8010224:	0802658c 	.word	0x0802658c
 8010228:	2401bb94 	.word	0x2401bb94
 801022c:	08026618 	.word	0x08026618
 8010230:	0801a071 	.word	0x0801a071

08010234 <_ZN12MainViewBaseD1Ev>:

MainViewBase::~MainViewBase()
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	4a31      	ldr	r2, [pc, #196]	@ (8010304 <_ZN12MainViewBaseD1Ev+0xd0>)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	601a      	str	r2, [r3, #0]
{

}
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8010248:	4618      	mov	r0, r3
 801024a:	f000 f9cf 	bl	80105ec <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f503 63db 	add.w	r3, r3, #1752	@ 0x6d8
 8010254:	4618      	mov	r0, r3
 8010256:	f000 f9eb 	bl	8010630 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff fa39 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f503 736d 	add.w	r3, r3, #948	@ 0x3b4
 801026c:	4618      	mov	r0, r3
 801026e:	f000 fa01 	bl	8010674 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010278:	4618      	mov	r0, r3
 801027a:	f000 fa97 	bl	80107ac <_ZN8touchgfx11ScrollWheelD1Ev>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff fa27 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010290:	4618      	mov	r0, r3
 8010292:	f7ff f89f 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff f9f9 	bl	800f694 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fa15 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 fa35 	bl	8010724 <_ZN8touchgfx6ButtonD1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 fa2f 	bl	8010724 <_ZN8touchgfx6ButtonD1Ev>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff fa03 	bl	800f6d8 <_ZN8touchgfx5ImageD1Ev>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff f87b 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	336c      	adds	r3, #108	@ 0x6c
 80102e2:	4618      	mov	r0, r3
 80102e4:	f004 f908 	bl	80144f8 <_ZN8touchgfx14SwipeContainerD1Ev>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	3340      	adds	r3, #64	@ 0x40
 80102ec:	4618      	mov	r0, r3
 80102ee:	f000 f9f7 	bl	80106e0 <_ZN8touchgfx3BoxD1Ev>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff fba7 	bl	800fa48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4618      	mov	r0, r3
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	08027268 	.word	0x08027268

08010308 <_ZN12MainViewBaseD0Ev>:
MainViewBase::~MainViewBase()
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
}
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff ff8f 	bl	8010234 <_ZN12MainViewBaseD1Ev>
 8010316:	f44f 61df 	mov.w	r1, #1784	@ 0x6f8
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f014 fded 	bl	8024efa <_ZdlPvj>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	4618      	mov	r0, r3
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b084      	sub	sp, #16
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
    scrollWheel1.initialize();
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8010338:	4618      	mov	r0, r3
 801033a:	f7ff fb43 	bl	800f9c4 <_ZN8touchgfx10ScrollBase10initializeEv>
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
 801033e:	2300      	movs	r3, #0
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	e00f      	b.n	8010364 <_ZN12MainViewBase11setupScreenEv+0x3a>
    {
        scrollWheel1ListItems[i].initialize();
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f503 736d 	add.w	r3, r3, #948	@ 0x3b4
 801034a:	68f9      	ldr	r1, [r7, #12]
 801034c:	4618      	mov	r0, r3
 801034e:	f000 f8eb 	bl	8010528 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi>
 8010352:	4603      	mov	r3, r0
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	3288      	adds	r2, #136	@ 0x88
 8010358:	6812      	ldr	r2, [r2, #0]
 801035a:	4618      	mov	r0, r3
 801035c:	4790      	blx	r2
    for (int i = 0; i < scrollWheel1ListItems.getNumberOfDrawables(); i++)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	3301      	adds	r3, #1
 8010362:	60fb      	str	r3, [r7, #12]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f503 736d 	add.w	r3, r3, #948	@ 0x3b4
 801036a:	4618      	mov	r0, r3
 801036c:	f000 f8d0 	bl	8010510 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE20getNumberOfDrawablesEv>
 8010370:	4603      	mov	r3, r0
 8010372:	461a      	mov	r2, r3
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	4293      	cmp	r3, r2
 8010378:	bfb4      	ite	lt
 801037a:	2301      	movlt	r3, #1
 801037c:	2300      	movge	r3, #0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d1df      	bne.n	8010344 <_ZN12MainViewBase11setupScreenEv+0x1a>
    }
}
 8010384:	bf00      	nop
 8010386:	bf00      	nop
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b082      	sub	sp, #8
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	6039      	str	r1, [r7, #0]
    if (&src == &ButtonUp)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801039e:	683a      	ldr	r2, [r7, #0]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d105      	bne.n	80103b0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Up_Interaction
        //When ButtonUp clicked call virtual function
        //Call UpButtonHandler
        UpButtonHandler();
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	3338      	adds	r3, #56	@ 0x38
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	4798      	blx	r3
    }
    if (&src == &ButtonDown)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d105      	bne.n	80103c8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3a>
    {
        //Down_Interaction
        //When ButtonDown clicked call virtual function
        //Call DownButtonHandler
        DownButtonHandler();
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	333c      	adds	r3, #60	@ 0x3c
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	4798      	blx	r3
    }
}
 80103c8:	bf00      	nop
 80103ca:	3708      	adds	r7, #8
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <_ZN12MainViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss>:

void MainViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b086      	sub	sp, #24
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	60f8      	str	r0, [r7, #12]
 80103d8:	60b9      	str	r1, [r7, #8]
 80103da:	4611      	mov	r1, r2
 80103dc:	461a      	mov	r2, r3
 80103de:	460b      	mov	r3, r1
 80103e0:	80fb      	strh	r3, [r7, #6]
 80103e2:	4613      	mov	r3, r2
 80103e4:	80bb      	strh	r3, [r7, #4]
    if (items == &scrollWheel1ListItems)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f503 736d 	add.w	r3, r3, #948	@ 0x3b4
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d114      	bne.n	801041c <_ZN12MainViewBase25updateItemCallbackHandlerEPN8touchgfx26DrawableListItemsInterfaceEss+0x4c>
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	3308      	adds	r3, #8
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80103fe:	4611      	mov	r1, r2
 8010400:	68b8      	ldr	r0, [r7, #8]
 8010402:	4798      	blx	r3
 8010404:	6178      	str	r0, [r7, #20]
        MenuElement* cc = (MenuElement*)d;
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	613b      	str	r3, [r7, #16]
        scrollWheel1UpdateItem(*cc, itemIndex);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	332c      	adds	r3, #44	@ 0x2c
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010416:	6939      	ldr	r1, [r7, #16]
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	4798      	blx	r3
    }
}
 801041c:	bf00      	nop
 801041e:	3718      	adds	r7, #24
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4618      	mov	r0, r3
 8010430:	f009 fc6c 	bl	8019d0c <_ZN8touchgfx6ScreenC1Ev>
 8010434:	4a05      	ldr	r2, [pc, #20]	@ (801044c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	601a      	str	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4618      	mov	r0, r3
 8010444:	3708      	adds	r7, #8
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	08027310 	.word	0x08027310

08010450 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>:
class GenericCallback
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	4a04      	ldr	r2, [pc, #16]	@ (801046c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev+0x1c>)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	080272e0 	.word	0x080272e0

08010470 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_3)(T1, T2, T3))
 8010470:	b580      	push	{r7, lr}
 8010472:	b084      	sub	sp, #16
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	4639      	mov	r1, r7
 801047c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_3)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	4618      	mov	r0, r3
 8010484:	f7ff ffe4 	bl	8010450 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssEC1Ev>
 8010488:	4a08      	ldr	r2, [pc, #32]	@ (80104ac <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssEC1EPS1_MS1_FvS3_ssE+0x3c>)
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	605a      	str	r2, [r3, #4]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	3308      	adds	r3, #8
 8010498:	463a      	mov	r2, r7
 801049a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801049e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	4618      	mov	r0, r3
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	080272c8 	.word	0x080272c8

080104b0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	4a04      	ldr	r2, [pc, #16]	@ (80104cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4618      	mov	r0, r3
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr
 80104cc:	0802735c 	.word	0x0802735c

080104d0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b084      	sub	sp, #16
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4639      	mov	r1, r7
 80104dc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff ffe4 	bl	80104b0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80104e8:	4a08      	ldr	r2, [pc, #32]	@ (801050c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	605a      	str	r2, [r3, #4]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	3308      	adds	r3, #8
 80104f8:	463a      	mov	r2, r7
 80104fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104fe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	4618      	mov	r0, r3
 8010506:	3710      	adds	r7, #16
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	080272b0 	.word	0x080272b0

08010510 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE20getNumberOfDrawablesEv>:
    {
        assert(index >= 0 && index < SIZE);
        return element[index];
    }

    virtual int16_t getNumberOfDrawables()
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
    {
        return SIZE;
 8010518:	2304      	movs	r3, #4
    }
 801051a:	4618      	mov	r0, r3
 801051c:	370c      	adds	r7, #12
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
	...

08010528 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi>:
    TYPE& operator[](int index)
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
        assert(index >= 0 && index < SIZE);
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	db02      	blt.n	801053e <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi+0x16>
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	2b03      	cmp	r3, #3
 801053c:	dd05      	ble.n	801054a <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi+0x22>
 801053e:	4b08      	ldr	r3, [pc, #32]	@ (8010560 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi+0x38>)
 8010540:	4a08      	ldr	r2, [pc, #32]	@ (8010564 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi+0x3c>)
 8010542:	2161      	movs	r1, #97	@ 0x61
 8010544:	4808      	ldr	r0, [pc, #32]	@ (8010568 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EEixEi+0x40>)
 8010546:	f014 fd07 	bl	8024f58 <__assert_func>
        return element[index];
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	22b8      	movs	r2, #184	@ 0xb8
 801054e:	fb02 f303 	mul.w	r3, r2, r3
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	4413      	add	r3, r2
 8010556:	3304      	adds	r3, #4
    }
 8010558:	4618      	mov	r0, r3
 801055a:	3708      	adds	r7, #8
 801055c:	46bd      	mov	sp, r7
 801055e:	bd80      	pop	{r7, pc}
 8010560:	0802661c 	.word	0x0802661c
 8010564:	08026638 	.word	0x08026638
 8010568:	080266a0 	.word	0x080266a0

0801056c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>:
    virtual ~GenericCallback()
 801056c:	b480      	push	{r7}
 801056e:	b083      	sub	sp, #12
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
    }
 8010574:	4a04      	ldr	r2, [pc, #16]	@ (8010588 <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev+0x1c>)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	601a      	str	r2, [r3, #0]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	080272e0 	.word	0x080272e0

0801058c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED0Ev>:
    virtual ~GenericCallback()
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
    }
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff ffe9 	bl	801056c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 801059a:	2104      	movs	r1, #4
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f014 fcac 	bl	8024efa <_ZdlPvj>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80105ac:	b480      	push	{r7}
 80105ae:	b083      	sub	sp, #12
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
    }
 80105b4:	4a04      	ldr	r2, [pc, #16]	@ (80105c8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr
 80105c8:	0802735c 	.word	0x0802735c

080105cc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
    }
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7ff ffe9 	bl	80105ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80105da:	2104      	movs	r1, #4
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f014 fc8c 	bl	8024efa <_ZdlPvj>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4618      	mov	r0, r3
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	4a05      	ldr	r2, [pc, #20]	@ (801060c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	601a      	str	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff ffd5 	bl	80105ac <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	3708      	adds	r7, #8
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	080272b0 	.word	0x080272b0

08010610 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7ff ffe7 	bl	80105ec <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801061e:	2110      	movs	r1, #16
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f014 fc6a 	bl	8024efa <_ZdlPvj>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	4618      	mov	r0, r3
 801062a:	3708      	adds	r7, #8
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>:
struct Callback : public GenericCallback<T1, T2, T3>
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	4a05      	ldr	r2, [pc, #20]	@ (8010650 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssED1Ev+0x20>)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	601a      	str	r2, [r3, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff ff93 	bl	801056c <_ZN8touchgfx15GenericCallbackIPNS_26DrawableListItemsInterfaceEssED1Ev>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4618      	mov	r0, r3
 801064a:	3708      	adds	r7, #8
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}
 8010650:	080272c8 	.word	0x080272c8

08010654 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssED0Ev>:
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7ff ffe7 	bl	8010630 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssED1Ev>
 8010662:	2110      	movs	r1, #16
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f014 fc48 	bl	8024efa <_ZdlPvj>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	4618      	mov	r0, r3
 801066e:	3708      	adds	r7, #8
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev>:
class DrawableListItems : public DrawableListItemsInterface
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	4a0e      	ldr	r2, [pc, #56]	@ (80106b8 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev+0x44>)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	3304      	adds	r3, #4
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00d      	beq.n	80106a6 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev+0x32>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	3304      	adds	r3, #4
 801068e:	f503 7438 	add.w	r4, r3, #736	@ 0x2e0
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	3304      	adds	r3, #4
 8010696:	429c      	cmp	r4, r3
 8010698:	d005      	beq.n	80106a6 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev+0x32>
 801069a:	3cb8      	subs	r4, #184	@ 0xb8
 801069c:	6823      	ldr	r3, [r4, #0]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4620      	mov	r0, r4
 80106a2:	4798      	blx	r3
 80106a4:	e7f5      	b.n	8010692 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev+0x1e>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff f95b 	bl	800f964 <_ZN8touchgfx26DrawableListItemsInterfaceD1Ev>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd90      	pop	{r4, r7, pc}
 80106b8:	080272f8 	.word	0x080272f8

080106bc <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED0Ev>:
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff ffd5 	bl	8010674 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EED1Ev>
 80106ca:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f014 fc13 	bl	8024efa <_ZdlPvj>
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	4618      	mov	r0, r3
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
	...

080106e0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	4a05      	ldr	r2, [pc, #20]	@ (8010700 <_ZN8touchgfx3BoxD1Ev+0x20>)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	601a      	str	r2, [r3, #0]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe fc37 	bl	800ef64 <_ZN8touchgfx6WidgetD1Ev>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	08028200 	.word	0x08028200

08010704 <_ZN8touchgfx3BoxD0Ev>:
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7ff ffe7 	bl	80106e0 <_ZN8touchgfx3BoxD1Ev>
 8010712:	212c      	movs	r1, #44	@ 0x2c
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f014 fbf0 	bl	8024efa <_ZdlPvj>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	4618      	mov	r0, r3
 801071e:	3708      	adds	r7, #8
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8010724:	b580      	push	{r7, lr}
 8010726:	b082      	sub	sp, #8
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	4a05      	ldr	r2, [pc, #20]	@ (8010744 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	601a      	str	r2, [r3, #0]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	4618      	mov	r0, r3
 8010736:	f7ff f8cf 	bl	800f8d8 <_ZN8touchgfx14AbstractButtonD1Ev>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	3708      	adds	r7, #8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	080282ec 	.word	0x080282ec

08010748 <_ZN8touchgfx6ButtonD0Ev>:
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff ffe7 	bl	8010724 <_ZN8touchgfx6ButtonD1Ev>
 8010756:	2134      	movs	r1, #52	@ 0x34
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f014 fbce 	bl	8024efa <_ZdlPvj>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	3708      	adds	r7, #8
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <_ZN8touchgfx12DrawableListD1Ev>:
 * when each of these become visible.
 *
 * This means that all drawables must have an identical structure in some way, for
 * example an Image or a Container with a button and a text.
 */
class DrawableList : public Container
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	4a05      	ldr	r2, [pc, #20]	@ (8010788 <_ZN8touchgfx12DrawableListD1Ev+0x20>)
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe fe2b 	bl	800f3d4 <_ZN8touchgfx9ContainerD1Ev>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	4618      	mov	r0, r3
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	080279e0 	.word	0x080279e0

0801078c <_ZN8touchgfx12DrawableListD0Ev>:
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff ffe7 	bl	8010768 <_ZN8touchgfx12DrawableListD1Ev>
 801079a:	214c      	movs	r1, #76	@ 0x4c
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f014 fbac 	bl	8024efa <_ZdlPvj>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZN8touchgfx11ScrollWheelD1Ev>:
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	4a05      	ldr	r2, [pc, #20]	@ (80107cc <_ZN8touchgfx11ScrollWheelD1Ev+0x20>)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7ff f98d 	bl	800fadc <_ZN8touchgfx15ScrollWheelBaseD1Ev>
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	08027c48 	.word	0x08027c48

080107d0 <_ZN8touchgfx11ScrollWheelD0Ev>:
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff ffe7 	bl	80107ac <_ZN8touchgfx11ScrollWheelD1Ev>
 80107de:	21c0      	movs	r1, #192	@ 0xc0
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f014 fb8a 	bl	8024efa <_ZdlPvj>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	4618      	mov	r0, r3
 80107ea:	3708      	adds	r7, #8
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	68d2      	ldr	r2, [r2, #12]
 8010802:	1052      	asrs	r2, r2, #1
 8010804:	1898      	adds	r0, r3, r2
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	f003 0301 	and.w	r3, r3, #1
 801080e:	2b00      	cmp	r3, #0
 8010810:	d102      	bne.n	8010818 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	e00a      	b.n	801082e <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	68d2      	ldr	r2, [r2, #12]
 8010820:	1052      	asrs	r2, r2, #1
 8010822:	4413      	add	r3, r2
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	6892      	ldr	r2, [r2, #8]
 801082a:	4413      	add	r3, r2
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	4798      	blx	r3
    }
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801083a:	b480      	push	{r7}
 801083c:	b083      	sub	sp, #12
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	685b      	ldr	r3, [r3, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d010      	beq.n	801086c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	689b      	ldr	r3, [r3, #8]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d107      	bne.n	8010862 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	d101      	bne.n	8010862 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801085e:	2301      	movs	r3, #1
 8010860:	e000      	b.n	8010864 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8010862:	2300      	movs	r3, #0
 8010864:	2b01      	cmp	r3, #1
 8010866:	d001      	beq.n	801086c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8010868:	2301      	movs	r3, #1
 801086a:	e000      	b.n	801086e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801086c:	2300      	movs	r3, #0
    }
 801086e:	4618      	mov	r0, r3
 8010870:	370c      	adds	r7, #12
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr

0801087a <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss>:
    virtual void execute(T1 t1, T2 t2, T3 t3)
 801087a:	b590      	push	{r4, r7, lr}
 801087c:	b085      	sub	sp, #20
 801087e:	af00      	add	r7, sp, #0
 8010880:	60f8      	str	r0, [r7, #12]
 8010882:	60b9      	str	r1, [r7, #8]
 8010884:	4611      	mov	r1, r2
 8010886:	461a      	mov	r2, r3
 8010888:	460b      	mov	r3, r1
 801088a:	80fb      	strh	r3, [r7, #6]
 801088c:	4613      	mov	r3, r2
 801088e:	80bb      	strh	r3, [r7, #4]
        (pobject->*pmemfun)(t1, t2, t3);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	68d2      	ldr	r2, [r2, #12]
 8010898:	1052      	asrs	r2, r2, #1
 801089a:	1898      	adds	r0, r3, r2
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68db      	ldr	r3, [r3, #12]
 80108a0:	f003 0301 	and.w	r3, r3, #1
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d102      	bne.n	80108ae <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x34>
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	689c      	ldr	r4, [r3, #8]
 80108ac:	e00a      	b.n	80108c4 <_ZN8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7executeES3_ss+0x4a>
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	685b      	ldr	r3, [r3, #4]
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	68d2      	ldr	r2, [r2, #12]
 80108b6:	1052      	asrs	r2, r2, #1
 80108b8:	4413      	add	r3, r2
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	6892      	ldr	r2, [r2, #8]
 80108c0:	4413      	add	r3, r2
 80108c2:	681c      	ldr	r4, [r3, #0]
 80108c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80108c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80108cc:	68b9      	ldr	r1, [r7, #8]
 80108ce:	47a0      	blx	r4
    }
 80108d0:	bf00      	nop
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd90      	pop	{r4, r7, pc}

080108d8 <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv>:
    virtual bool isValid() const
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d010      	beq.n	801090a <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d107      	bne.n	8010900 <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	f003 0301 	and.w	r3, r3, #1
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d101      	bne.n	8010900 <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x28>
 80108fc:	2301      	movs	r3, #1
 80108fe:	e000      	b.n	8010902 <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x2a>
 8010900:	2300      	movs	r3, #0
 8010902:	2b01      	cmp	r3, #1
 8010904:	d001      	beq.n	801090a <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x32>
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <_ZNK8touchgfx8CallbackI12MainViewBasePNS_26DrawableListItemsInterfaceEssE7isValidEv+0x34>
 801090a:	2300      	movs	r3, #0
    }
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs>:
    virtual Drawable* getDrawable(int16_t index)
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	460b      	mov	r3, r1
 8010922:	807b      	strh	r3, [r7, #2]
        assert(index >= 0 && index < SIZE);
 8010924:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010928:	2b00      	cmp	r3, #0
 801092a:	db03      	blt.n	8010934 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs+0x1c>
 801092c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010930:	2b03      	cmp	r3, #3
 8010932:	dd05      	ble.n	8010940 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs+0x28>
 8010934:	4b08      	ldr	r3, [pc, #32]	@ (8010958 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs+0x40>)
 8010936:	4a09      	ldr	r2, [pc, #36]	@ (801095c <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs+0x44>)
 8010938:	2154      	movs	r1, #84	@ 0x54
 801093a:	4809      	ldr	r0, [pc, #36]	@ (8010960 <_ZN8touchgfx17DrawableListItemsI11MenuElementLi4EE11getDrawableEs+0x48>)
 801093c:	f014 fb0c 	bl	8024f58 <__assert_func>
        return &element[index];
 8010940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010944:	22b8      	movs	r2, #184	@ 0xb8
 8010946:	fb02 f303 	mul.w	r3, r2, r3
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	4413      	add	r3, r2
 801094e:	3304      	adds	r3, #4
    }
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	0802661c 	.word	0x0802661c
 801095c:	080266fc 	.word	0x080266fc
 8010960:	080266a0 	.word	0x080266a0

08010964 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010964:	b480      	push	{r7}
 8010966:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010968:	4b02      	ldr	r3, [pc, #8]	@ (8010974 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801096a:	4618      	mov	r0, r3
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr
 8010974:	0802736c 	.word	0x0802736c

08010978 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010978:	b480      	push	{r7}
 801097a:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801097c:	230f      	movs	r3, #15
}
 801097e:	4618      	mov	r0, r3
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010988:	b480      	push	{r7}
 801098a:	b085      	sub	sp, #20
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	460b      	mov	r3, r1
 8010992:	607a      	str	r2, [r7, #4]
 8010994:	817b      	strh	r3, [r7, #10]
        return 0;
 8010996:	2300      	movs	r3, #0
    }
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
        return 0;
 80109ac:	2300      	movs	r3, #0
    }
 80109ae:	4618      	mov	r0, r3
 80109b0:	370c      	adds	r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80109ba:	b480      	push	{r7}
 80109bc:	b083      	sub	sp, #12
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
        return 0;
 80109c2:	2300      	movs	r3, #0
    }
 80109c4:	4618      	mov	r0, r3
 80109c6:	370c      	adds	r7, #12
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	4613      	mov	r3, r2
 80109dc:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 80109de:	4a07      	ldr	r2, [pc, #28]	@ (80109fc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6013      	str	r3, [r2, #0]
        fonts = f;
 80109e4:	4a06      	ldr	r2, [pc, #24]	@ (8010a00 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 80109ea:	4a06      	ldr	r2, [pc, #24]	@ (8010a04 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 80109ec:	88fb      	ldrh	r3, [r7, #6]
 80109ee:	8013      	strh	r3, [r2, #0]
    }
 80109f0:	bf00      	nop
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr
 80109fc:	2401bb88 	.word	0x2401bb88
 8010a00:	2401bb90 	.word	0x2401bb90
 8010a04:	2401bb8c 	.word	0x2401bb8c

08010a08 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010a08:	b40e      	push	{r1, r2, r3}
 8010a0a:	b580      	push	{r7, lr}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010a12:	f107 0320 	add.w	r3, r7, #32
 8010a16:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	69fa      	ldr	r2, [r7, #28]
 8010a1c:	2100      	movs	r1, #0
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f008 fcdc 	bl	80193dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010a24:	4603      	mov	r3, r0
 8010a26:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010a28:	89fb      	ldrh	r3, [r7, #14]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3714      	adds	r7, #20
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a34:	b003      	add	sp, #12
 8010a36:	4770      	bx	lr

08010a38 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010a38:	b40c      	push	{r2, r3}
 8010a3a:	b580      	push	{r7, lr}
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
 8010a42:	460b      	mov	r3, r1
 8010a44:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010a46:	f107 031c 	add.w	r3, r7, #28
 8010a4a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010a4c:	78f9      	ldrb	r1, [r7, #3]
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	69ba      	ldr	r2, [r7, #24]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f008 fcc2 	bl	80193dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a68:	b002      	add	sp, #8
 8010a6a:	4770      	bx	lr

08010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08a      	sub	sp, #40	@ 0x28
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	460b      	mov	r3, r1
 8010a76:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d016      	beq.n	8010aae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	3322      	adds	r3, #34	@ 0x22
 8010a84:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a88:	8adb      	ldrh	r3, [r3, #22]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d105      	bne.n	8010a9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010a8e:	4b43      	ldr	r3, [pc, #268]	@ (8010b9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010a90:	4a43      	ldr	r2, [pc, #268]	@ (8010ba0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010a92:	21c5      	movs	r1, #197	@ 0xc5
 8010a94:	4843      	ldr	r0, [pc, #268]	@ (8010ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010a96:	f014 fa5f 	bl	8024f58 <__assert_func>
            return buffer[pos];
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9c:	8a9b      	ldrh	r3, [r3, #20]
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e000      	b.n	8010ab0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d06a      	beq.n	8010b8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f00a f877 	bl	801aba8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	3322      	adds	r3, #34	@ 0x22
 8010abe:	623b      	str	r3, [r7, #32]
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010ac4:	6a3b      	ldr	r3, [r7, #32]
 8010ac6:	8adb      	ldrh	r3, [r3, #22]
 8010ac8:	8bfa      	ldrh	r2, [r7, #30]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d305      	bcc.n	8010ada <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010ace:	4b36      	ldr	r3, [pc, #216]	@ (8010ba8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010ad0:	4a36      	ldr	r2, [pc, #216]	@ (8010bac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010ad2:	21cb      	movs	r1, #203	@ 0xcb
 8010ad4:	4833      	ldr	r0, [pc, #204]	@ (8010ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010ad6:	f014 fa3f 	bl	8024f58 <__assert_func>
            const uint16_t index = pos + offset;
 8010ada:	6a3b      	ldr	r3, [r7, #32]
 8010adc:	8a9a      	ldrh	r2, [r3, #20]
 8010ade:	8bfb      	ldrh	r3, [r7, #30]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010ae4:	8bbb      	ldrh	r3, [r7, #28]
 8010ae6:	2b09      	cmp	r3, #9
 8010ae8:	d801      	bhi.n	8010aee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010aea:	8bbb      	ldrh	r3, [r7, #28]
 8010aec:	e001      	b.n	8010af2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010aee:	8bbb      	ldrh	r3, [r7, #28]
 8010af0:	3b0a      	subs	r3, #10
 8010af2:	6a3a      	ldr	r2, [r7, #32]
 8010af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010af8:	f640 123f 	movw	r2, #2367	@ 0x93f
 8010afc:	4293      	cmp	r3, r2
 8010afe:	bf0c      	ite	eq
 8010b00:	2301      	moveq	r3, #1
 8010b02:	2300      	movne	r3, #0
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d03f      	beq.n	8010b8a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3322      	adds	r3, #34	@ 0x22
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	3222      	adds	r2, #34	@ 0x22
 8010b12:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010b14:	68ba      	ldr	r2, [r7, #8]
 8010b16:	8ad2      	ldrh	r2, [r2, #22]
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	d105      	bne.n	8010b28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8010b9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010b1e:	4a20      	ldr	r2, [pc, #128]	@ (8010ba0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010b20:	21c5      	movs	r1, #197	@ 0xc5
 8010b22:	4820      	ldr	r0, [pc, #128]	@ (8010ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010b24:	f014 fa18 	bl	8024f58 <__assert_func>
            return buffer[pos];
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	8a92      	ldrh	r2, [r2, #20]
 8010b2c:	4611      	mov	r1, r2
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010b34:	613b      	str	r3, [r7, #16]
 8010b36:	4613      	mov	r3, r2
 8010b38:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	8adb      	ldrh	r3, [r3, #22]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d806      	bhi.n	8010b50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010b42:	4b1b      	ldr	r3, [pc, #108]	@ (8010bb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010b44:	4a1b      	ldr	r2, [pc, #108]	@ (8010bb4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010b46:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8010b4a:	4816      	ldr	r0, [pc, #88]	@ (8010ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010b4c:	f014 fa04 	bl	8024f58 <__assert_func>
            const uint16_t index = pos + 1;
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	8a9b      	ldrh	r3, [r3, #20]
 8010b54:	3301      	adds	r3, #1
 8010b56:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010b58:	89bb      	ldrh	r3, [r7, #12]
 8010b5a:	2b09      	cmp	r3, #9
 8010b5c:	d801      	bhi.n	8010b62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010b5e:	89bb      	ldrh	r3, [r7, #12]
 8010b60:	e000      	b.n	8010b64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010b62:	2300      	movs	r3, #0
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	89f9      	ldrh	r1, [r7, #14]
 8010b68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010b6c:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	3322      	adds	r3, #34	@ 0x22
 8010b72:	61bb      	str	r3, [r7, #24]
 8010b74:	f640 133f 	movw	r3, #2367	@ 0x93f
 8010b78:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	8a9b      	ldrh	r3, [r3, #20]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	69bb      	ldr	r3, [r7, #24]
 8010b82:	8afa      	ldrh	r2, [r7, #22]
 8010b84:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010b88:	bf00      	nop
        }
    }
    return getNextChar();
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f009 ff0e 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010b90:	4603      	mov	r3, r0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3728      	adds	r7, #40	@ 0x28
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	0802678c 	.word	0x0802678c
 8010ba0:	08026798 	.word	0x08026798
 8010ba4:	08026844 	.word	0x08026844
 8010ba8:	0802688c 	.word	0x0802688c
 8010bac:	0802689c 	.word	0x0802689c
 8010bb0:	08026970 	.word	0x08026970
 8010bb4:	0802697c 	.word	0x0802697c

08010bb8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f009 febc 	bl	801a93e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8010bc6:	bf00      	nop
 8010bc8:	3708      	adds	r7, #8
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b088      	sub	sp, #32
 8010bd2:	af02      	add	r7, sp, #8
 8010bd4:	60f8      	str	r0, [r7, #12]
 8010bd6:	1d38      	adds	r0, r7, #4
 8010bd8:	e880 0006 	stmia.w	r0, {r1, r2}
 8010bdc:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8010bde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010be2:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8010be4:	1d39      	adds	r1, r7, #4
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	683a      	ldr	r2, [r7, #0]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f007 f802 	bl	8017bfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8010bf8:	bf00      	nop
 8010bfa:	3718      	adds	r7, #24
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8010c00:	b590      	push	{r4, r7, lr}
 8010c02:	b085      	sub	sp, #20
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8010c0e:	88fb      	ldrh	r3, [r7, #6]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d127      	bne.n	8010c64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8010c14:	88fb      	ldrh	r3, [r7, #6]
 8010c16:	4a1e      	ldr	r2, [pc, #120]	@ (8010c90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d016      	beq.n	8010c4e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8010c20:	88fb      	ldrh	r3, [r7, #6]
 8010c22:	4a1b      	ldr	r2, [pc, #108]	@ (8010c90 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8010c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c28:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	4413      	add	r3, r2
 8010c32:	4a18      	ldr	r2, [pc, #96]	@ (8010c94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010c34:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	4a16      	ldr	r2, [pc, #88]	@ (8010c98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010c40:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	689b      	ldr	r3, [r3, #8]
 8010c46:	68ba      	ldr	r2, [r7, #8]
 8010c48:	4413      	add	r3, r2
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	e00a      	b.n	8010c64 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8010c4e:	4b11      	ldr	r3, [pc, #68]	@ (8010c94 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8010c50:	4a12      	ldr	r2, [pc, #72]	@ (8010c9c <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8010c52:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8010c54:	4a12      	ldr	r2, [pc, #72]	@ (8010ca0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8010c56:	4b10      	ldr	r3, [pc, #64]	@ (8010c98 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8010c58:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8010c5a:	88fb      	ldrh	r3, [r7, #6]
 8010c5c:	4a11      	ldr	r2, [pc, #68]	@ (8010ca4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8010c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c62:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d00d      	beq.n	8010c86 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8010c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8010ca8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8010c70:	f000 f83e 	bl	8010cf0 <_ZN17TypedTextDatabase8getFontsEv>
 8010c74:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8010c76:	f000 f833 	bl	8010ce0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	461a      	mov	r2, r3
 8010c7e:	4621      	mov	r1, r4
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7ff fea5 	bl	80109d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8010c86:	bf00      	nop
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd90      	pop	{r4, r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	2401a3cc 	.word	0x2401a3cc
 8010c94:	2401a3d4 	.word	0x2401a3d4
 8010c98:	2401a3d8 	.word	0x2401a3d8
 8010c9c:	90003e54 	.word	0x90003e54
 8010ca0:	90003e44 	.word	0x90003e44
 8010ca4:	90003e80 	.word	0x90003e80
 8010ca8:	2401a3d0 	.word	0x2401a3d0

08010cac <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8010cb8:	4b07      	ldr	r3, [pc, #28]	@ (8010cd8 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	4b07      	ldr	r3, [pc, #28]	@ (8010cdc <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8010cbe:	6819      	ldr	r1, [r3, #0]
 8010cc0:	887b      	ldrh	r3, [r7, #2]
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	440b      	add	r3, r1
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	005b      	lsls	r3, r3, #1
 8010cca:	4413      	add	r3, r2
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	370c      	adds	r7, #12
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr
 8010cd8:	2401a3d4 	.word	0x2401a3d4
 8010cdc:	2401a3d8 	.word	0x2401a3d8

08010ce0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8010ce4:	2304      	movs	r3, #4
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr

08010cf0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8010cf4:	4b02      	ldr	r3, [pc, #8]	@ (8010d00 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr
 8010d00:	2401a3dc 	.word	0x2401a3dc

08010d04 <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	6039      	str	r1, [r7, #0]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d118      	bne.n	8010d46 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d113      	bne.n	8010d46 <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_verdana_80_4bpp()),
 8010d1e:	f7fd f91b 	bl	800df58 <_Z23getFont_verdana_80_4bppv>
 8010d22:	4603      	mov	r3, r0
};
 8010d24:	4a0a      	ldr	r2, [pc, #40]	@ (8010d50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010d26:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8010d28:	f7fd f8bc 	bl	800dea4 <_Z23getFont_verdana_40_4bppv>
 8010d2c:	4603      	mov	r3, r0
};
 8010d2e:	4a08      	ldr	r2, [pc, #32]	@ (8010d50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010d30:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp()),
 8010d32:	f7fd f803 	bl	800dd3c <_Z23getFont_verdana_10_4bppv>
 8010d36:	4603      	mov	r3, r0
};
 8010d38:	4a05      	ldr	r2, [pc, #20]	@ (8010d50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010d3a:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_20_4bpp())
 8010d3c:	f7fd f858 	bl	800ddf0 <_Z23getFont_verdana_20_4bppv>
 8010d40:	4603      	mov	r3, r0
};
 8010d42:	4a03      	ldr	r2, [pc, #12]	@ (8010d50 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010d44:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 8010d46:	bf00      	nop
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	2401a3dc 	.word	0x2401a3dc

08010d54 <_GLOBAL__sub_I_touchgfx_fonts>:
 8010d54:	b580      	push	{r7, lr}
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	f7ff ffd1 	bl	8010d04 <_Z41__static_initialization_and_destruction_0ii>
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	4a05      	ldr	r2, [pc, #20]	@ (8010d84 <_ZN19FrontendApplicationD1Ev+0x20>)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	601a      	str	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fd fb4f 	bl	800e418 <_ZN23FrontendApplicationBaseD1Ev>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	08027504 	.word	0x08027504

08010d88 <_ZN19FrontendApplicationD0Ev>:
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff ffe7 	bl	8010d64 <_ZN19FrontendApplicationD1Ev>
 8010d96:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f014 f8ad 	bl	8024efa <_ZdlPvj>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4618      	mov	r0, r3
 8010da4:	3708      	adds	r7, #8
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}

08010daa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b082      	sub	sp, #8
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fa7f 	bl	80112bc <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f007 fc0f 	bl	80185e4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8010dc6:	bf00      	nop
 8010dc8:	3708      	adds	r7, #8
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
	...

08010dd0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	68b9      	ldr	r1, [r7, #8]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fd fb68 	bl	800e4b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8010de8:	4a03      	ldr	r2, [pc, #12]	@ (8010df8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]
{

}
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	08027504 	.word	0x08027504

08010dfc <_ZN11MenuElementD1Ev>:

class MenuElement : public MenuElementBase
{
public:
    MenuElement();
    virtual ~MenuElement() {}
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	4a05      	ldr	r2, [pc, #20]	@ (8010e1c <_ZN11MenuElementD1Ev+0x20>)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	601a      	str	r2, [r3, #0]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe fc0b 	bl	800f628 <_ZN15MenuElementBaseD1Ev>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	08027558 	.word	0x08027558

08010e20 <_ZN11MenuElementD0Ev>:
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff ffe7 	bl	8010dfc <_ZN11MenuElementD1Ev>
 8010e2e:	21b8      	movs	r1, #184	@ 0xb8
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f014 f862 	bl	8024efa <_ZdlPvj>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <_ZN11MenuElementC1Ev>:
#include <gui/containers/MenuElement.hpp>

MenuElement::MenuElement()
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fe fae4 	bl	800f418 <_ZN15MenuElementBaseC1Ev>
 8010e50:	4a03      	ldr	r2, [pc, #12]	@ (8010e60 <_ZN11MenuElementC1Ev+0x20>)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	601a      	str	r2, [r3, #0]
{

}
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	08027558 	.word	0x08027558

08010e64 <_ZN11MenuElement10initializeEv>:

void MenuElement::initialize()
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
    MenuElementBase::initialize();
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fe fc06 	bl	800f680 <_ZN15MenuElementBase10initializeEv>
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
    {
    }
 8010e84:	bf00      	nop
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr

08010e90 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
    {
    }
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
    {
 8010eac:	4a04      	ldr	r2, [pc, #16]	@ (8010ec0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
    }
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr
 8010ec0:	08027624 	.word	0x08027624

08010ec4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
    }
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff ffe9 	bl	8010ea4 <_ZN8touchgfx9PresenterD1Ev>
 8010ed2:	2104      	movs	r1, #4
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f014 f810 	bl	8024efa <_ZdlPvj>
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
    {
 8010eec:	4a04      	ldr	r2, [pc, #16]	@ (8010f00 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	601a      	str	r2, [r3, #0]
    }
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	370c      	adds	r7, #12
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efe:	4770      	bx	lr
 8010f00:	08027624 	.word	0x08027624

08010f04 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	4a06      	ldr	r2, [pc, #24]	@ (8010f28 <_ZN13ModelListenerC1Ev+0x24>)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	605a      	str	r2, [r3, #4]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	370c      	adds	r7, #12
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	08027614 	.word	0x08027614

08010f2c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	4a04      	ldr	r2, [pc, #16]	@ (8010f48 <_ZN13ModelListenerD1Ev+0x1c>)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	08027614 	.word	0x08027614

08010f4c <_ZN13ModelListenerD0Ev>:
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7ff ffe9 	bl	8010f2c <_ZN13ModelListenerD1Ev>
 8010f5a:	2108      	movs	r1, #8
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f013 ffcc 	bl	8024efa <_ZdlPvj>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4618      	mov	r0, r3
 8010f66:	3708      	adds	r7, #8
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}

08010f6c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	4a09      	ldr	r2, [pc, #36]	@ (8010f9c <_ZN13MainPresenterD1Ev+0x30>)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	4a09      	ldr	r2, [pc, #36]	@ (8010fa0 <_ZN13MainPresenterD1Ev+0x34>)
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	605a      	str	r2, [r3, #4]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	3304      	adds	r3, #4
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ff ffd1 	bl	8010f2c <_ZN13ModelListenerD1Ev>
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7ff ff89 	bl	8010ea4 <_ZN8touchgfx9PresenterD1Ev>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	4618      	mov	r0, r3
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	080275ec 	.word	0x080275ec
 8010fa0:	08027604 	.word	0x08027604

08010fa4 <_ZThn4_N13MainPresenterD1Ev>:
 8010fa4:	f1a0 0004 	sub.w	r0, r0, #4
 8010fa8:	e7e0      	b.n	8010f6c <_ZN13MainPresenterD1Ev>
 8010faa:	bf00      	nop

08010fac <_ZN13MainPresenterD0Ev>:
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7ff ffd9 	bl	8010f6c <_ZN13MainPresenterD1Ev>
 8010fba:	2110      	movs	r1, #16
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f013 ff9c 	bl	8024efa <_ZdlPvj>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <_ZThn4_N13MainPresenterD0Ev>:
 8010fcc:	f1a0 0004 	sub.w	r0, r0, #4
 8010fd0:	e7ec      	b.n	8010fac <_ZN13MainPresenterD0Ev>
	...

08010fd4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
    : view(v)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7ff ff7f 	bl	8010ee4 <_ZN8touchgfx9PresenterC1Ev>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff ff8a 	bl	8010f04 <_ZN13ModelListenerC1Ev>
 8010ff0:	4a06      	ldr	r2, [pc, #24]	@ (801100c <_ZN13MainPresenterC1ER8MainView+0x38>)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	601a      	str	r2, [r3, #0]
 8010ff6:	4a06      	ldr	r2, [pc, #24]	@ (8011010 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	605a      	str	r2, [r3, #4]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	60da      	str	r2, [r3, #12]
{

}
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	080275ec 	.word	0x080275ec
 8011010:	08027604 	.word	0x08027604

08011014 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]

}
 801101c:	bf00      	nop
 801101e:	370c      	adds	r7, #12
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8011028:	b480      	push	{r7}
 801102a:	b083      	sub	sp, #12
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]

}
 8011030:	bf00      	nop
 8011032:	370c      	adds	r7, #12
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr

0801103c <_ZN11MenuElement9setNumberEi>:

    virtual void initialize();

    void setNumber(int no)
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b089      	sub	sp, #36	@ 0x24
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
    {
        Unicode::itoa(no, textBuffer, TEXT_SIZE, 10);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f103 01a4 	add.w	r1, r3, #164	@ 0xa4
 801104c:	230a      	movs	r3, #10
 801104e:	220a      	movs	r2, #10
 8011050:	6838      	ldr	r0, [r7, #0]
 8011052:	f00a f84d 	bl	801b0f0 <_ZN8touchgfx7Unicode4itoaElPtti>
        switch (no % 6)
 8011056:	6839      	ldr	r1, [r7, #0]
 8011058:	4b3f      	ldr	r3, [pc, #252]	@ (8011158 <_ZN11MenuElement9setNumberEi+0x11c>)
 801105a:	fb83 3201 	smull	r3, r2, r3, r1
 801105e:	17cb      	asrs	r3, r1, #31
 8011060:	1ad2      	subs	r2, r2, r3
 8011062:	4613      	mov	r3, r2
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	1aca      	subs	r2, r1, r3
 801106c:	2a05      	cmp	r2, #5
 801106e:	d86f      	bhi.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
 8011070:	a301      	add	r3, pc, #4	@ (adr r3, 8011078 <_ZN11MenuElement9setNumberEi+0x3c>)
 8011072:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8011076:	bf00      	nop
 8011078:	08011091 	.word	0x08011091
 801107c:	080110b1 	.word	0x080110b1
 8011080:	080110d1 	.word	0x080110d1
 8011084:	080110f1 	.word	0x080110f1
 8011088:	08011111 	.word	0x08011111
 801108c:	08011131 	.word	0x08011131
        {
        case 0:
            icon.setBitmap(Bitmap(BITMAP_ICON00_ID));
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8011096:	f107 0308 	add.w	r3, r7, #8
 801109a:	2108      	movs	r1, #8
 801109c:	4618      	mov	r0, r3
 801109e:	f7fd fd41 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 80110a2:	f107 0308 	add.w	r3, r7, #8
 80110a6:	4619      	mov	r1, r3
 80110a8:	4620      	mov	r0, r4
 80110aa:	f005 fcb9 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 80110ae:	e04f      	b.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
        case 1:
            icon.setBitmap(Bitmap(BITMAP_ICON01_ID));
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 80110b6:	f107 030c 	add.w	r3, r7, #12
 80110ba:	2109      	movs	r1, #9
 80110bc:	4618      	mov	r0, r3
 80110be:	f7fd fd31 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 80110c2:	f107 030c 	add.w	r3, r7, #12
 80110c6:	4619      	mov	r1, r3
 80110c8:	4620      	mov	r0, r4
 80110ca:	f005 fca9 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 80110ce:	e03f      	b.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
        case 2:
            icon.setBitmap(Bitmap(BITMAP_ICON02_ID));
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 80110d6:	f107 0310 	add.w	r3, r7, #16
 80110da:	210a      	movs	r1, #10
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fd fd21 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 80110e2:	f107 0310 	add.w	r3, r7, #16
 80110e6:	4619      	mov	r1, r3
 80110e8:	4620      	mov	r0, r4
 80110ea:	f005 fc99 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 80110ee:	e02f      	b.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
        case 3:
            icon.setBitmap(Bitmap(BITMAP_ICON03_ID));
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 80110f6:	f107 0314 	add.w	r3, r7, #20
 80110fa:	210b      	movs	r1, #11
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fd fd11 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 8011102:	f107 0314 	add.w	r3, r7, #20
 8011106:	4619      	mov	r1, r3
 8011108:	4620      	mov	r0, r4
 801110a:	f005 fc89 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 801110e:	e01f      	b.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
        case 4:
            icon.setBitmap(Bitmap(BITMAP_ICON04_ID));
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8011116:	f107 0318 	add.w	r3, r7, #24
 801111a:	210c      	movs	r1, #12
 801111c:	4618      	mov	r0, r3
 801111e:	f7fd fd01 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 8011122:	f107 0318 	add.w	r3, r7, #24
 8011126:	4619      	mov	r1, r3
 8011128:	4620      	mov	r0, r4
 801112a:	f005 fc79 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 801112e:	e00f      	b.n	8011150 <_ZN11MenuElement9setNumberEi+0x114>
        case 5:
            icon.setBitmap(Bitmap(BITMAP_ICON05_ID));
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 8011136:	f107 031c 	add.w	r3, r7, #28
 801113a:	210d      	movs	r1, #13
 801113c:	4618      	mov	r0, r3
 801113e:	f7fd fcf1 	bl	800eb24 <_ZN8touchgfx6BitmapC1Et>
 8011142:	f107 031c 	add.w	r3, r7, #28
 8011146:	4619      	mov	r1, r3
 8011148:	4620      	mov	r0, r4
 801114a:	f005 fc69 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
            break;
 801114e:	bf00      	nop
        }
    }
 8011150:	bf00      	nop
 8011152:	3724      	adds	r7, #36	@ 0x24
 8011154:	46bd      	mov	sp, r7
 8011156:	bd90      	pop	{r4, r7, pc}
 8011158:	2aaaaaab 	.word	0x2aaaaaab

0801115c <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	4a05      	ldr	r2, [pc, #20]	@ (801117c <_ZN8MainViewD1Ev+0x20>)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	4618      	mov	r0, r3
 801116e:	f7ff f861 	bl	8010234 <_ZN12MainViewBaseD1Ev>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	0802763c 	.word	0x0802763c

08011180 <_ZN8MainViewD0Ev>:
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff ffe7 	bl	801115c <_ZN8MainViewD1Ev>
 801118e:	f240 61fc 	movw	r1, #1788	@ 0x6fc
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f013 feb1 	bl	8024efa <_ZdlPvj>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <_ZN8MainView22scrollWheel1UpdateItemER11MenuElements>:
    virtual void tearDownScreen();

    virtual void UpButtonHandler();
    virtual void DownButtonHandler();

    virtual void scrollWheel1UpdateItem(MenuElement& item, int16_t itemIndex)
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b084      	sub	sp, #16
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	4613      	mov	r3, r2
 80111ae:	80fb      	strh	r3, [r7, #6]
    {
        item.setNumber(itemIndex);
 80111b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111b4:	4619      	mov	r1, r3
 80111b6:	68b8      	ldr	r0, [r7, #8]
 80111b8:	f7ff ff40 	bl	801103c <_ZN11MenuElement9setNumberEi>
    }
 80111bc:	bf00      	nop
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>
#include <touchgfx/Utils.hpp>

MainView::MainView()
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fe fce6 	bl	800fba0 <_ZN12MainViewBaseC1Ev>
 80111d4:	4a03      	ldr	r2, [pc, #12]	@ (80111e4 <_ZN8MainViewC1Ev+0x20>)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	601a      	str	r2, [r3, #0]
{

}
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	0802763c 	.word	0x0802763c

080111e8 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7ff f899 	bl	801032a <_ZN12MainViewBase11setupScreenEv>
}
 80111f8:	bf00      	nop
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	4618      	mov	r0, r3
 801120c:	f7fe face 	bl	800f7ac <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011210:	bf00      	nop
 8011212:	3708      	adds	r7, #8
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <_ZN8MainView15UpButtonHandlerEv>:

void MainView::UpButtonHandler()
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
    touchgfx_printf("Up Button Clicked\n");

    counter++;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8011226:	1c5a      	adds	r2, r3, #1
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8c3 26f8 	str.w	r2, [r3, #1784]	@ 0x6f8
    Unicode::snprintf(TextCounterBuffer, TEXTCOUNTER_SIZE, "%d", counter);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f203 60c4 	addw	r0, r3, #1732	@ 0x6c4
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 801123a:	4a07      	ldr	r2, [pc, #28]	@ (8011258 <_ZN8MainView15UpButtonHandlerEv+0x40>)
 801123c:	210a      	movs	r1, #10
 801123e:	f00a fa67 	bl	801b710 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //Invalidate text area, which will result in it being redrawn in text tick
    TextCounter.invalidate();
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8011248:	4618      	mov	r0, r3
 801124a:	f008 f9f2 	bl	8019632 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801124e:	bf00      	nop
 8011250:	3708      	adds	r7, #8
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	08026a30 	.word	0x08026a30

0801125c <_ZN8MainView17DownButtonHandlerEv>:

void MainView::DownButtonHandler()
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b082      	sub	sp, #8
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
    touchgfx_printf("Down Button Clicked\n");

    counter--;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 801126a:	1e5a      	subs	r2, r3, #1
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8c3 26f8 	str.w	r2, [r3, #1784]	@ 0x6f8
    Unicode::snprintf(TextCounterBuffer, TEXTCOUNTER_SIZE, "%d", counter);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f203 60c4 	addw	r0, r3, #1732	@ 0x6c4
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 801127e:	4a07      	ldr	r2, [pc, #28]	@ (801129c <_ZN8MainView17DownButtonHandlerEv+0x40>)
 8011280:	210a      	movs	r1, #10
 8011282:	f00a fa45 	bl	801b710 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    //Invalidate text area, which will result in it being redrawn in text tick
    TextCounter.invalidate();
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 801128c:	4618      	mov	r0, r3
 801128e:	f008 f9d0 	bl	8019632 <_ZNK8touchgfx8Drawable10invalidateEv>
 8011292:	bf00      	nop
 8011294:	3708      	adds	r7, #8
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	08026a30 	.word	0x08026a30

080112a0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2200      	movs	r2, #0
 80112ac:	601a      	str	r2, [r3, #0]
{

}
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	4618      	mov	r0, r3
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <_ZN5Model4tickEv>:

void Model::tick()
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]

}
 80112c4:	bf00      	nop
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ce:	4770      	bx	lr

080112d0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
    {
 80112d8:	4a04      	ldr	r2, [pc, #16]	@ (80112ec <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
    }
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr
 80112ec:	0802769c 	.word	0x0802769c

080112f0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
    }
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f7ff ffe9 	bl	80112d0 <_ZN8touchgfx15TouchControllerD1Ev>
 80112fe:	2104      	movs	r1, #4
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f013 fdfa 	bl	8024efa <_ZdlPvj>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <_ZN20STM32TouchController4initEv>:
#include <stm32h7b3i_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
 8011318:	2308      	movs	r3, #8
 801131a:	613b      	str	r3, [r7, #16]
    hTS.Accuracy = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	617b      	str	r3, [r7, #20]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8011320:	4b07      	ldr	r3, [pc, #28]	@ (8011340 <_ZN20STM32TouchController4initEv+0x30>)
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	60bb      	str	r3, [r7, #8]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 8011326:	4b07      	ldr	r3, [pc, #28]	@ (8011344 <_ZN20STM32TouchController4initEv+0x34>)
 8011328:	881b      	ldrh	r3, [r3, #0]
 801132a:	60fb      	str	r3, [r7, #12]
    BSP_TS_Init(0, &hTS);
 801132c:	f107 0308 	add.w	r3, r7, #8
 8011330:	4619      	mov	r1, r3
 8011332:	2000      	movs	r0, #0
 8011334:	f7f2 fb60 	bl	80039f8 <BSP_TS_Init>
}
 8011338:	bf00      	nop
 801133a:	3718      	adds	r7, #24
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	2401bb32 	.word	0x2401bb32
 8011344:	2401bb34 	.word	0x2401bb34

08011348 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b088      	sub	sp, #32
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
    TS_State_t TS_State = { 0 };
 8011354:	f107 0310 	add.w	r3, r7, #16
 8011358:	2200      	movs	r2, #0
 801135a:	601a      	str	r2, [r3, #0]
 801135c:	605a      	str	r2, [r3, #4]
 801135e:	609a      	str	r2, [r3, #8]

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8011360:	f107 0310 	add.w	r3, r7, #16
 8011364:	4619      	mov	r1, r3
 8011366:	2000      	movs	r0, #0
 8011368:	f7f2 fbec 	bl	8003b44 <BSP_TS_GetState>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	bf14      	ite	ne
 8011372:	2301      	movne	r3, #1
 8011374:	2300      	moveq	r3, #0
 8011376:	b2db      	uxtb	r3, r3
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00b      	beq.n	8011394 <_ZN20STM32TouchController11sampleTouchERlS0_+0x4c>
	__asm volatile
 801137c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011380:	f383 8811 	msr	BASEPRI, r3
 8011384:	f3bf 8f6f 	isb	sy
 8011388:	f3bf 8f4f 	dsb	sy
 801138c:	61fb      	str	r3, [r7, #28]
}
 801138e:	bf00      	nop
    {
        configASSERT(0);
 8011390:	bf00      	nop
 8011392:	e7fd      	b.n	8011390 <_ZN20STM32TouchController11sampleTouchERlS0_+0x48>
    }

    if (TS_State.TouchDetected)
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d009      	beq.n	80113ae <_ZN20STM32TouchController11sampleTouchERlS0_+0x66>
    {
        x = TS_State.TouchX;
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	461a      	mov	r2, r3
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	601a      	str	r2, [r3, #0]
        y = TS_State.TouchY;
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	461a      	mov	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	601a      	str	r2, [r3, #0]

        return true;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e000      	b.n	80113b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x68>
    }

    return false;
 80113ae:	2300      	movs	r3, #0
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3720      	adds	r7, #32
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	4a05      	ldr	r2, [pc, #20]	@ (80113d8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff ff81 	bl	80112d0 <_ZN8touchgfx15TouchControllerD1Ev>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4618      	mov	r0, r3
 80113d2:	3708      	adds	r7, #8
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	08027684 	.word	0x08027684

080113dc <_ZN20STM32TouchControllerD0Ev>:
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7ff ffe7 	bl	80113b8 <_ZN20STM32TouchControllerD1Ev>
 80113ea:	2104      	movs	r1, #4
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f013 fd84 	bl	8024efa <_ZdlPvj>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80113fc:	b480      	push	{r7}
 80113fe:	af00      	add	r7, sp, #0

}
 8011400:	bf00      	nop
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
	...

0801140c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	4603      	mov	r3, r0
 8011414:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011416:	79fb      	ldrb	r3, [r7, #7]
 8011418:	2b03      	cmp	r3, #3
 801141a:	d827      	bhi.n	801146c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
 801141c:	a201      	add	r2, pc, #4	@ (adr r2, 8011424 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 801141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011422:	bf00      	nop
 8011424:	08011435 	.word	0x08011435
 8011428:	08011443 	.word	0x08011443
 801142c:	08011451 	.word	0x08011451
 8011430:	0801145f 	.word	0x0801145f
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 8011434:	2201      	movs	r2, #1
 8011436:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801143a:	480e      	ldr	r0, [pc, #56]	@ (8011474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 801143c:	f7f3 fcd2 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 8011440:	e014      	b.n	801146c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 8011442:	2201      	movs	r2, #1
 8011444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011448:	480a      	ldr	r0, [pc, #40]	@ (8011474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 801144a:	f7f3 fccb 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 801144e:	e00d      	b.n	801146c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 8011450:	2201      	movs	r2, #1
 8011452:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011456:	4808      	ldr	r0, [pc, #32]	@ (8011478 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 8011458:	f7f3 fcc4 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 801145c:	e006      	b.n	801146c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 801145e:	2201      	movs	r2, #1
 8011460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011464:	4803      	ldr	r0, [pc, #12]	@ (8011474 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 8011466:	f7f3 fcbd 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 801146a:	bf00      	nop
    }
}
 801146c:	bf00      	nop
 801146e:	3708      	adds	r7, #8
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}
 8011474:	58021c00 	.word	0x58021c00
 8011478:	58022000 	.word	0x58022000

0801147c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011486:	79fb      	ldrb	r3, [r7, #7]
 8011488:	2b03      	cmp	r3, #3
 801148a:	d827      	bhi.n	80114dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
 801148c:	a201      	add	r2, pc, #4	@ (adr r2, 8011494 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011492:	bf00      	nop
 8011494:	080114a5 	.word	0x080114a5
 8011498:	080114b3 	.word	0x080114b3
 801149c:	080114c1 	.word	0x080114c1
 80114a0:	080114cf 	.word	0x080114cf
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80114a4:	2200      	movs	r2, #0
 80114a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80114aa:	480e      	ldr	r0, [pc, #56]	@ (80114e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 80114ac:	f7f3 fc9a 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 80114b0:	e014      	b.n	80114dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 80114b2:	2200      	movs	r2, #0
 80114b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80114b8:	480a      	ldr	r0, [pc, #40]	@ (80114e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 80114ba:	f7f3 fc93 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 80114be:	e00d      	b.n	80114dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80114c0:	2200      	movs	r2, #0
 80114c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80114c6:	4808      	ldr	r0, [pc, #32]	@ (80114e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 80114c8:	f7f3 fc8c 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 80114cc:	e006      	b.n	80114dc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80114ce:	2200      	movs	r2, #0
 80114d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80114d4:	4803      	ldr	r0, [pc, #12]	@ (80114e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 80114d6:	f7f3 fc85 	bl	8004de4 <HAL_GPIO_WritePin>
#endif
        break;
 80114da:	bf00      	nop
    }
}
 80114dc:	bf00      	nop
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	58021c00 	.word	0x58021c00
 80114e8:	58022000 	.word	0x58022000

080114ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80114f6:	79fb      	ldrb	r3, [r7, #7]
 80114f8:	2b03      	cmp	r3, #3
 80114fa:	d823      	bhi.n	8011544 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 80114fc:	a201      	add	r2, pc, #4	@ (adr r2, 8011504 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80114fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011502:	bf00      	nop
 8011504:	08011515 	.word	0x08011515
 8011508:	08011521 	.word	0x08011521
 801150c:	0801152d 	.word	0x0801152d
 8011510:	08011539 	.word	0x08011539
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8011514:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8011518:	480c      	ldr	r0, [pc, #48]	@ (801154c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 801151a:	f7f3 fc7c 	bl	8004e16 <HAL_GPIO_TogglePin>
#endif
        break;
 801151e:	e011      	b.n	8011544 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8011520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011524:	4809      	ldr	r0, [pc, #36]	@ (801154c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 8011526:	f7f3 fc76 	bl	8004e16 <HAL_GPIO_TogglePin>
#endif
        break;
 801152a:	e00b      	b.n	8011544 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 801152c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011530:	4807      	ldr	r0, [pc, #28]	@ (8011550 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 8011532:	f7f3 fc70 	bl	8004e16 <HAL_GPIO_TogglePin>
#endif
        break;
 8011536:	e005      	b.n	8011544 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8011538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801153c:	4803      	ldr	r0, [pc, #12]	@ (801154c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 801153e:	f7f3 fc6a 	bl	8004e16 <HAL_GPIO_TogglePin>
#endif
        break;
 8011542:	bf00      	nop
    }
}
 8011544:	bf00      	nop
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	58021c00 	.word	0x58021c00
 8011550:	58022000 	.word	0x58022000

08011554 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
    {
 801155c:	4a04      	ldr	r2, [pc, #16]	@ (8011570 <_ZN8touchgfx3HALD1Ev+0x1c>)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	601a      	str	r2, [r3, #0]
    }
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	08027fb4 	.word	0x08027fb4

08011574 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8011574:	b580      	push	{r7, lr}
 8011576:	b082      	sub	sp, #8
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
    }
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f7ff ffe9 	bl	8011554 <_ZN8touchgfx3HALD1Ev>
 8011582:	217c      	movs	r1, #124	@ 0x7c
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f013 fcb8 	bl	8024efa <_ZdlPvj>
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	78fa      	ldrb	r2, [r7, #3]
 80115a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2201      	movs	r2, #1
 80115ac:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 80115b0:	bf00      	nop
 80115b2:	370c      	adds	r7, #12
 80115b4:	46bd      	mov	sp, r7
 80115b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ba:	4770      	bx	lr

080115bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	807b      	strh	r3, [r7, #2]
 80115c8:	4613      	mov	r3, r2
 80115ca:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80115cc:	4b0c      	ldr	r3, [pc, #48]	@ (8011600 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80115ce:	881b      	ldrh	r3, [r3, #0]
 80115d0:	887a      	ldrh	r2, [r7, #2]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d304      	bcc.n	80115e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80115d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011604 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80115d8:	881b      	ldrh	r3, [r3, #0]
 80115da:	883a      	ldrh	r2, [r7, #0]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d205      	bcs.n	80115ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80115e0:	4b09      	ldr	r3, [pc, #36]	@ (8011608 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80115e2:	4a0a      	ldr	r2, [pc, #40]	@ (801160c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80115e4:	219e      	movs	r1, #158	@ 0x9e
 80115e6:	480a      	ldr	r0, [pc, #40]	@ (8011610 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80115e8:	f013 fcb6 	bl	8024f58 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80115ec:	4a09      	ldr	r2, [pc, #36]	@ (8011614 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80115ee:	887b      	ldrh	r3, [r7, #2]
 80115f0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80115f2:	4a09      	ldr	r2, [pc, #36]	@ (8011618 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80115f4:	883b      	ldrh	r3, [r7, #0]
 80115f6:	8013      	strh	r3, [r2, #0]
    }
 80115f8:	bf00      	nop
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	2401bb2c 	.word	0x2401bb2c
 8011604:	2401bb2e 	.word	0x2401bb2e
 8011608:	08026a34 	.word	0x08026a34
 801160c:	08026a98 	.word	0x08026a98
 8011610:	08026adc 	.word	0x08026adc
 8011614:	2401bb32 	.word	0x2401bb32
 8011618:	2401bb34 	.word	0x2401bb34

0801161c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 801162a:	2b00      	cmp	r3, #0
 801162c:	d009      	beq.n	8011642 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4610      	mov	r0, r2
 801163c:	4798      	blx	r3
 801163e:	4603      	mov	r3, r0
 8011640:	e000      	b.n	8011644 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8011642:	2300      	movs	r3, #0
    }
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8011654:	6878      	ldr	r0, [r7, #4]
 8011656:	f004 f993 	bl	8015980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	33ac      	adds	r3, #172	@ 0xac
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	4798      	blx	r3
    }
 8011666:	bf00      	nop
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}

0801166e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801166e:	b480      	push	{r7}
 8011670:	b083      	sub	sp, #12
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8011678:	2300      	movs	r3, #0
    }
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
	...

08011688 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
 8011694:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d106      	bne.n	80116aa <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801169c:	4b0f      	ldr	r3, [pc, #60]	@ (80116dc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801169e:	4a10      	ldr	r2, [pc, #64]	@ (80116e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 80116a0:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80116a4:	480f      	ldr	r0, [pc, #60]	@ (80116e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80116a6:	f013 fc57 	bl	8024f58 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68ba      	ldr	r2, [r7, #8]
 80116ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	bf14      	ite	ne
 80116bc:	2301      	movne	r3, #1
 80116be:	2300      	moveq	r3, #0
 80116c0:	b2da      	uxtb	r2, r3
 80116c2:	4b09      	ldr	r3, [pc, #36]	@ (80116e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80116c4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	338c      	adds	r3, #140	@ 0x8c
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	6839      	ldr	r1, [r7, #0]
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	4798      	blx	r3
    }
 80116d4:	bf00      	nop
 80116d6:	3710      	adds	r7, #16
 80116d8:	46bd      	mov	sp, r7
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	08026b20 	.word	0x08026b20
 80116e0:	08026b58 	.word	0x08026b58
 80116e4:	08026adc 	.word	0x08026adc
 80116e8:	2401bb36 	.word	0x2401bb36

080116ec <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80116ec:	b480      	push	{r7}
 80116ee:	b083      	sub	sp, #12
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	bf14      	ite	ne
 8011702:	2301      	movne	r3, #1
 8011704:	2300      	moveq	r3, #0
 8011706:	b2da      	uxtb	r2, r3
 8011708:	4b03      	ldr	r3, [pc, #12]	@ (8011718 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801170a:	701a      	strb	r2, [r3, #0]
    }
 801170c:	bf00      	nop
 801170e:	370c      	adds	r7, #12
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr
 8011718:	2401bb37 	.word	0x2401bb37

0801171c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011724:	2300      	movs	r3, #0
    }
 8011726:	4618      	mov	r0, r3
 8011728:	370c      	adds	r7, #12
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr

08011732 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8011732:	b580      	push	{r7, lr}
 8011734:	b082      	sub	sp, #8
 8011736:	af00      	add	r7, sp, #0
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	460b      	mov	r3, r1
 801173c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011742:	2b00      	cmp	r3, #0
 8011744:	d004      	beq.n	8011750 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801174a:	887a      	ldrh	r2, [r7, #2]
 801174c:	4610      	mov	r0, r2
 801174e:	4798      	blx	r3
        }
    }
 8011750:	bf00      	nop
 8011752:	3708      	adds	r7, #8
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	3318      	adds	r3, #24
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4610      	mov	r0, r2
 8011770:	4798      	blx	r3
 8011772:	4603      	mov	r3, r0
    }
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011790:	429a      	cmp	r2, r3
 8011792:	d011      	beq.n	80117b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011794:	4b14      	ldr	r3, [pc, #80]	@ (80117e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d11e      	bne.n	80117da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 801179c:	4b13      	ldr	r3, [pc, #76]	@ (80117ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801179e:	881b      	ldrh	r3, [r3, #0]
 80117a0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117a2:	4b13      	ldr	r3, [pc, #76]	@ (80117f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117a4:	881a      	ldrh	r2, [r3, #0]
 80117a6:	4b11      	ldr	r3, [pc, #68]	@ (80117ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117a8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80117aa:	4a11      	ldr	r2, [pc, #68]	@ (80117f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117ac:	89bb      	ldrh	r3, [r7, #12]
 80117ae:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80117b0:	4b0d      	ldr	r3, [pc, #52]	@ (80117e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117b2:	2201      	movs	r2, #1
 80117b4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80117b6:	e010      	b.n	80117da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80117b8:	4b0b      	ldr	r3, [pc, #44]	@ (80117e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00c      	beq.n	80117da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80117c0:	4b0a      	ldr	r3, [pc, #40]	@ (80117ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117c2:	881b      	ldrh	r3, [r3, #0]
 80117c4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80117c6:	4b0a      	ldr	r3, [pc, #40]	@ (80117f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117c8:	881a      	ldrh	r2, [r3, #0]
 80117ca:	4b08      	ldr	r3, [pc, #32]	@ (80117ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80117cc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80117ce:	4a08      	ldr	r2, [pc, #32]	@ (80117f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80117d0:	89fb      	ldrh	r3, [r7, #14]
 80117d2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80117d4:	4b04      	ldr	r3, [pc, #16]	@ (80117e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
    }
 80117da:	bf00      	nop
 80117dc:	3714      	adds	r7, #20
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr
 80117e6:	bf00      	nop
 80117e8:	2401bb30 	.word	0x2401bb30
 80117ec:	2401bb2e 	.word	0x2401bb2e
 80117f0:	2401bb2c 	.word	0x2401bb2c

080117f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4618      	mov	r0, r3
 8011800:	f003 fb1c 	bl	8014e3c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011804:	bf00      	nop
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	4a05      	ldr	r2, [pc, #20]	@ (801182c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fe99 	bl	8011554 <_ZN8touchgfx3HALD1Ev>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4618      	mov	r0, r3
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}
 801182c:	080278d4 	.word	0x080278d4

08011830 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f7ff ffe7 	bl	801180c <_ZN20TouchGFXGeneratedHALD1Ev>
 801183e:	217c      	movs	r1, #124	@ 0x7c
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f013 fb5a 	bl	8024efa <_ZdlPvj>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4618      	mov	r0, r3
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4618      	mov	r0, r3
 801185c:	f7ff ffca 	bl	80117f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8011860:	bf00      	nop
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}

08011868 <_ZN11TouchGFXHAL10initializeEv>:


using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	4618      	mov	r0, r3
 8011874:	f001 fb64 	bl	8012f40 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <_ZN11TouchGFXHAL9taskEntryEv>:
void TouchGFXHAL::taskEntry()
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	3380      	adds	r3, #128	@ 0x80
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	4798      	blx	r3
    enableInterrupts();
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	3378      	adds	r3, #120	@ 0x78
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80118a0:	f000 f972 	bl	8011b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3370      	adds	r3, #112	@ 0x70
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4610      	mov	r0, r2
 80118b0:	4798      	blx	r3

    // Turning on display after first frame is rendered
    HAL_GPIO_WritePin(GPIOK, GPIO_PIN_7, GPIO_PIN_RESET);
 80118b2:	2200      	movs	r2, #0
 80118b4:	2180      	movs	r1, #128	@ 0x80
 80118b6:	480c      	ldr	r0, [pc, #48]	@ (80118e8 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
 80118b8:	f7f3 fa94 	bl	8004de4 <HAL_GPIO_WritePin>
    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80118bc:	2201      	movs	r2, #1
 80118be:	2104      	movs	r1, #4
 80118c0:	480a      	ldr	r0, [pc, #40]	@ (80118ec <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 80118c2:	f7f3 fa8f 	bl	8004de4 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80118c6:	2201      	movs	r2, #1
 80118c8:	2102      	movs	r1, #2
 80118ca:	4808      	ldr	r0, [pc, #32]	@ (80118ec <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
 80118cc:	f7f3 fa8a 	bl	8004de4 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80118d0:	f000 f95a 	bl	8011b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	3370      	adds	r3, #112	@ 0x70
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	4610      	mov	r0, r2
 80118e0:	4798      	blx	r3
        OSWrappers::waitForVSync();
 80118e2:	bf00      	nop
 80118e4:	e7f4      	b.n	80118d0 <_ZN11TouchGFXHAL9taskEntryEv+0x50>
 80118e6:	bf00      	nop
 80118e8:	58022800 	.word	0x58022800
 80118ec:	58020000 	.word	0x58020000

080118f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f001 fbc2 	bl	8013084 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011900:	4603      	mov	r3, r0
}
 8011902:	4618      	mov	r0, r3
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801190a:	b580      	push	{r7, lr}
 801190c:	b082      	sub	sp, #8
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
 8011912:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6839      	ldr	r1, [r7, #0]
 8011918:	4618      	mov	r0, r3
 801191a:	f001 fbc1 	bl	80130a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 801191e:	bf00      	nop
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
	...

08011928 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b086      	sub	sp, #24
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
 8011930:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6839      	ldr	r1, [r7, #0]
 8011936:	4618      	mov	r0, r3
 8011938:	f001 fbc8 	bl	80130cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801193c:	4b1f      	ldr	r3, [pc, #124]	@ (80119bc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 801193e:	2200      	movs	r2, #0
 8011940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011944:	f3bf 8f4f 	dsb	sy
}
 8011948:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 801194a:	4b1c      	ldr	r3, [pc, #112]	@ (80119bc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 801194c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011950:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	0b5b      	lsrs	r3, r3, #13
 8011956:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801195a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	08db      	lsrs	r3, r3, #3
 8011960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011964:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	015a      	lsls	r2, r3, #5
 801196a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801196e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011970:	68fa      	ldr	r2, [r7, #12]
 8011972:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011974:	4911      	ldr	r1, [pc, #68]	@ (80119bc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x94>)
 8011976:	4313      	orrs	r3, r2
 8011978:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	1e5a      	subs	r2, r3, #1
 8011980:	60fa      	str	r2, [r7, #12]
 8011982:	2b00      	cmp	r3, #0
 8011984:	bf14      	ite	ne
 8011986:	2301      	movne	r3, #1
 8011988:	2300      	moveq	r3, #0
 801198a:	b2db      	uxtb	r3, r3
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1ea      	bne.n	8011966 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x3e>
    } while(sets-- != 0U);
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	1e5a      	subs	r2, r3, #1
 8011994:	613a      	str	r2, [r7, #16]
 8011996:	2b00      	cmp	r3, #0
 8011998:	bf14      	ite	ne
 801199a:	2301      	movne	r3, #1
 801199c:	2300      	moveq	r3, #0
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1db      	bne.n	801195c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80119a4:	f3bf 8f4f 	dsb	sy
}
 80119a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80119aa:	f3bf 8f6f 	isb	sy
}
 80119ae:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80119b0:	bf00      	nop
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 80119b2:	bf00      	nop
 80119b4:	3718      	adds	r7, #24
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	e000ed00 	.word	0xe000ed00

080119c0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f001 fae6 	bl	8012f9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80119d0:	bf00      	nop
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f001 faea 	bl	8012fbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80119e8:	bf00      	nop
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f001 faec 	bl	8012fd8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011a00:	bf00      	nop
 8011a02:	3708      	adds	r7, #8
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f001 faee 	bl	8012ff4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011a18:	bf00      	nop
 8011a1a:	3708      	adds	r7, #8
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <IdleTaskHook>:

/* USER CODE BEGIN extern C functions */
extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b082      	sub	sp, #8
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
        if ((int)p) //idle task sched out
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d007      	beq.n	8011a3e <IdleTaskHook+0x1e>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8011a2e:	f7fc fba9 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2101      	movs	r1, #1
 8011a36:	4618      	mov	r0, r3
 8011a38:	f003 ffbc 	bl	80159b4 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8011a3c:	e006      	b.n	8011a4c <IdleTaskHook+0x2c>
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8011a3e:	f7fc fba1 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2100      	movs	r1, #0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f003 ffb4 	bl	80159b4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
 8011a4c:	2301      	movs	r3, #1
    }
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	4a05      	ldr	r2, [pc, #20]	@ (8011a78 <_ZN11TouchGFXHALD1Ev+0x20>)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff fecf 	bl	801180c <_ZN20TouchGFXGeneratedHALD1Ev>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	4618      	mov	r0, r3
 8011a72:	3708      	adds	r7, #8
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	080276b4 	.word	0x080276b4

08011a7c <_ZN11TouchGFXHALD0Ev>:
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff ffe7 	bl	8011a58 <_ZN11TouchGFXHALD1Ev>
 8011a8a:	217c      	movs	r1, #124	@ 0x7c
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f013 fa34 	bl	8024efa <_ZdlPvj>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	2101      	movs	r1, #1
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	f7f8 fb62 	bl	800a16e <osSemaphoreNew>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	4a0f      	ldr	r2, [pc, #60]	@ (8011aec <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011aae:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8011ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8011aec <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d105      	bne.n	8011ac4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8011ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8011af0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8011aba:	4a0e      	ldr	r2, [pc, #56]	@ (8011af4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011abc:	2128      	movs	r1, #40	@ 0x28
 8011abe:	480e      	ldr	r0, [pc, #56]	@ (8011af8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011ac0:	f013 fa4a 	bl	8024f58 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	2104      	movs	r1, #4
 8011ac8:	2001      	movs	r0, #1
 8011aca:	f7f8 fc6f 	bl	800a3ac <osMessageQueueNew>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8011afc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011ad2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8011ad4:	4b09      	ldr	r3, [pc, #36]	@ (8011afc <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d105      	bne.n	8011ae8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8011adc:	4b08      	ldr	r3, [pc, #32]	@ (8011b00 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8011ade:	4a05      	ldr	r2, [pc, #20]	@ (8011af4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8011ae0:	212c      	movs	r1, #44	@ 0x2c
 8011ae2:	4805      	ldr	r0, [pc, #20]	@ (8011af8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8011ae4:	f013 fa38 	bl	8024f58 <__assert_func>
}
 8011ae8:	bf00      	nop
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	2401a3ec 	.word	0x2401a3ec
 8011af0:	08026ba8 	.word	0x08026ba8
 8011af4:	08026bf4 	.word	0x08026bf4
 8011af8:	08026c24 	.word	0x08026c24
 8011afc:	2401a3f0 	.word	0x2401a3f0
 8011b00:	08026c50 	.word	0x08026c50

08011b04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8011b08:	4b04      	ldr	r3, [pc, #16]	@ (8011b1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7f8 fbb5 	bl	800a280 <osSemaphoreAcquire>
}
 8011b16:	bf00      	nop
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	2401a3ec 	.word	0x2401a3ec

08011b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011b24:	4b03      	ldr	r3, [pc, #12]	@ (8011b34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7f8 fbfb 	bl	800a324 <osSemaphoreRelease>
}
 8011b2e:	bf00      	nop
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	2401a3ec 	.word	0x2401a3ec

08011b38 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8011b3c:	4b03      	ldr	r3, [pc, #12]	@ (8011b4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	2100      	movs	r1, #0
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7f8 fb9c 	bl	800a280 <osSemaphoreAcquire>
}
 8011b48:	bf00      	nop
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	2401a3ec 	.word	0x2401a3ec

08011b50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8011b54:	4b03      	ldr	r3, [pc, #12]	@ (8011b64 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7f8 fbe3 	bl	800a324 <osSemaphoreRelease>
}
 8011b5e:	bf00      	nop
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	2401a3ec 	.word	0x2401a3ec

08011b68 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8011b6c:	4b04      	ldr	r3, [pc, #16]	@ (8011b80 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8011b6e:	6818      	ldr	r0, [r3, #0]
 8011b70:	2300      	movs	r3, #0
 8011b72:	2200      	movs	r2, #0
 8011b74:	4903      	ldr	r1, [pc, #12]	@ (8011b84 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8011b76:	f7f8 fc8d 	bl	800a494 <osMessageQueuePut>
}
 8011b7a:	bf00      	nop
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	2401a3f0 	.word	0x2401a3f0
 8011b84:	24000048 	.word	0x24000048

08011b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8011b8e:	4b09      	ldr	r3, [pc, #36]	@ (8011bb4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011b90:	6818      	ldr	r0, [r3, #0]
 8011b92:	1d39      	adds	r1, r7, #4
 8011b94:	2300      	movs	r3, #0
 8011b96:	2200      	movs	r2, #0
 8011b98:	f7f8 fcdc 	bl	800a554 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8011b9c:	4b05      	ldr	r3, [pc, #20]	@ (8011bb4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8011b9e:	6818      	ldr	r0, [r3, #0]
 8011ba0:	1d39      	adds	r1, r7, #4
 8011ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f7f8 fcd4 	bl	800a554 <osMessageQueueGet>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	2401a3f0 	.word	0x2401a3f0

08011bb8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b082      	sub	sp, #8
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8011bc2:	88fb      	ldrh	r3, [r7, #6]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7f8 fab7 	bl	800a138 <osDelay>
}
 8011bca:	bf00      	nop
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
	...

08011bd4 <__NVIC_EnableIRQ>:
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	4603      	mov	r3, r0
 8011bdc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	db0b      	blt.n	8011bfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011be6:	88fb      	ldrh	r3, [r7, #6]
 8011be8:	f003 021f 	and.w	r2, r3, #31
 8011bec:	4907      	ldr	r1, [pc, #28]	@ (8011c0c <__NVIC_EnableIRQ+0x38>)
 8011bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011bf2:	095b      	lsrs	r3, r3, #5
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8011bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011bfe:	bf00      	nop
 8011c00:	370c      	adds	r7, #12
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	e000e100 	.word	0xe000e100

08011c10 <__NVIC_DisableIRQ>:
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	4603      	mov	r3, r0
 8011c18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	db12      	blt.n	8011c48 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011c22:	88fb      	ldrh	r3, [r7, #6]
 8011c24:	f003 021f 	and.w	r2, r3, #31
 8011c28:	490a      	ldr	r1, [pc, #40]	@ (8011c54 <__NVIC_DisableIRQ+0x44>)
 8011c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011c2e:	095b      	lsrs	r3, r3, #5
 8011c30:	2001      	movs	r0, #1
 8011c32:	fa00 f202 	lsl.w	r2, r0, r2
 8011c36:	3320      	adds	r3, #32
 8011c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8011c3c:	f3bf 8f4f 	dsb	sy
}
 8011c40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011c42:	f3bf 8f6f 	isb	sy
}
 8011c46:	bf00      	nop
}
 8011c48:	bf00      	nop
 8011c4a:	370c      	adds	r7, #12
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	e000e100 	.word	0xe000e100

08011c58 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
        : color(0)
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	2200      	movs	r2, #0
 8011c64:	601a      	str	r2, [r3, #0]
    }
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	370c      	adds	r7, #12
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8011c74:	b480      	push	{r7}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
        return color;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
    }
 8011c80:	4618      	mov	r0, r3
 8011c82:	370c      	adds	r7, #12
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
    {
 8011c94:	4a04      	ldr	r2, [pc, #16]	@ (8011ca8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	601a      	str	r2, [r3, #0]
    }
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr
 8011ca8:	080277dc 	.word	0x080277dc

08011cac <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
    }
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7ff ffe9 	bl	8011c8c <_ZN8touchgfx9DMA_QueueD1Ev>
 8011cba:	2104      	movs	r1, #4
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f013 f91c 	bl	8024efa <_ZdlPvj>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3708      	adds	r7, #8
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	3344      	adds	r3, #68	@ 0x44
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	4798      	blx	r3
    }
 8011ce0:	bf00      	nop
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8011ce8:	b480      	push	{r7}
 8011cea:	b083      	sub	sp, #12
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
    {
 8011cf0:	4a04      	ldr	r2, [pc, #16]	@ (8011d04 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	601a      	str	r2, [r3, #0]
    }
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	0802808c 	.word	0x0802808c

08011d08 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
    }
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffe9 	bl	8011ce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011d16:	210c      	movs	r1, #12
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f013 f8ee 	bl	8024efa <_ZdlPvj>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8011d32:	4a09      	ldr	r2, [pc, #36]	@ (8011d58 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	605a      	str	r2, [r3, #4]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	721a      	strb	r2, [r3, #8]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	725a      	strb	r2, [r3, #9]
    {
    }
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr
 8011d58:	0802808c 	.word	0x0802808c

08011d5c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8011d64:	2301      	movs	r3, #1
    }
 8011d66:	4618      	mov	r0, r3
 8011d68:	370c      	adds	r7, #12
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr

08011d72 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8011d72:	b580      	push	{r7, lr}
 8011d74:	b082      	sub	sp, #8
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	3328      	adds	r3, #40	@ 0x28
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4610      	mov	r0, r2
 8011d86:	4798      	blx	r3
    }
 8011d88:	bf00      	nop
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}

08011d90 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	3314      	adds	r3, #20
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4610      	mov	r0, r2
 8011da8:	4798      	blx	r3
    }
 8011daa:	bf00      	nop
 8011dac:	3708      	adds	r7, #8
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b082      	sub	sp, #8
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8011dba:	f7fc f9e3 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff ffe5 	bl	8011d90 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8011dc6:	bf00      	nop
 8011dc8:	3708      	adds	r7, #8
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}

08011dce <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8011dce:	b580      	push	{r7, lr}
 8011dd0:	b082      	sub	sp, #8
 8011dd2:	af00      	add	r7, sp, #0
 8011dd4:	6078      	str	r0, [r7, #4]
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	330c      	adds	r3, #12
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff ff3c 	bl	8011c58 <_ZN8touchgfx9colortypeC1Ev>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	4618      	mov	r0, r3
 8011de4:	3708      	adds	r7, #8
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
	...

08011dec <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8011dec:	b5b0      	push	{r4, r5, r7, lr}
 8011dee:	b082      	sub	sp, #8
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	330c      	adds	r3, #12
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	f7ff ff93 	bl	8011d28 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8011e02:	4a0e      	ldr	r2, [pc, #56]	@ (8011e3c <_ZN8STM32DMAC1Ev+0x50>)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f103 000c 	add.w	r0, r3, #12
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	3320      	adds	r3, #32
 8011e12:	2260      	movs	r2, #96	@ 0x60
 8011e14:	4619      	mov	r1, r3
 8011e16:	f003 ff05 	bl	8015c24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	3320      	adds	r3, #32
 8011e1e:	245f      	movs	r4, #95	@ 0x5f
 8011e20:	461d      	mov	r5, r3
 8011e22:	e004      	b.n	8011e2e <_ZN8STM32DMAC1Ev+0x42>
 8011e24:	4628      	mov	r0, r5
 8011e26:	f7ff ffd2 	bl	8011dce <_ZN8touchgfx6BlitOpC1Ev>
 8011e2a:	3c01      	subs	r4, #1
 8011e2c:	3524      	adds	r5, #36	@ 0x24
 8011e2e:	2c00      	cmp	r4, #0
 8011e30:	daf8      	bge.n	8011e24 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	4618      	mov	r0, r3
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8011e3c:	0802778c 	.word	0x0802778c

08011e40 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	4a09      	ldr	r2, [pc, #36]	@ (8011e70 <_ZN8STM32DMAD1Ev+0x30>)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8011e4e:	205a      	movs	r0, #90	@ 0x5a
 8011e50:	f7ff fede 	bl	8011c10 <__NVIC_DisableIRQ>
}
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	330c      	adds	r3, #12
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f000 faab 	bl	80123b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ff ff41 	bl	8011ce8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}
 8011e70:	0802778c 	.word	0x0802778c

08011e74 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
}
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff ffdf 	bl	8011e40 <_ZN8STM32DMAD1Ev>
 8011e82:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f013 f837 	bl	8024efa <_ZdlPvj>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8011ea0:	4b12      	ldr	r3, [pc, #72]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ea2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8011ea6:	4a11      	ldr	r2, [pc, #68]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ea8:	f043 0310 	orr.w	r3, r3, #16
 8011eac:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8011eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011eb2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8011eb6:	f003 0310 	and.w	r3, r3, #16
 8011eba:	60fb      	str	r3, [r7, #12]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8011ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ec4:	f043 0310 	orr.w	r3, r3, #16
 8011ec8:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8011eca:	4b08      	ldr	r3, [pc, #32]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ecc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ece:	4a07      	ldr	r2, [pc, #28]	@ (8011eec <_ZN8STM32DMA10initializeEv+0x54>)
 8011ed0:	f023 0310 	bic.w	r3, r3, #16
 8011ed4:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8011ed6:	4b06      	ldr	r3, [pc, #24]	@ (8011ef0 <_ZN8STM32DMA10initializeEv+0x58>)
 8011ed8:	4a06      	ldr	r2, [pc, #24]	@ (8011ef4 <_ZN8STM32DMA10initializeEv+0x5c>)
 8011eda:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8011edc:	205a      	movs	r0, #90	@ 0x5a
 8011ede:	f7ff fe79 	bl	8011bd4 <__NVIC_EnableIRQ>
}
 8011ee2:	bf00      	nop
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}
 8011eea:	bf00      	nop
 8011eec:	58024400 	.word	0x58024400
 8011ef0:	24000150 	.word	0x24000150
 8011ef4:	08011db3 	.word	0x08011db3

08011ef8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
 8011f00:	460b      	mov	r3, r1
 8011f02:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011f04:	2300      	movs	r3, #0
 8011f06:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011f08:	78fb      	ldrb	r3, [r7, #3]
 8011f0a:	2b0b      	cmp	r3, #11
 8011f0c:	d826      	bhi.n	8011f5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8011f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8011f14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f14:	08011f51 	.word	0x08011f51
 8011f18:	08011f4b 	.word	0x08011f4b
 8011f1c:	08011f45 	.word	0x08011f45
 8011f20:	08011f5d 	.word	0x08011f5d
 8011f24:	08011f5d 	.word	0x08011f5d
 8011f28:	08011f5d 	.word	0x08011f5d
 8011f2c:	08011f5d 	.word	0x08011f5d
 8011f30:	08011f57 	.word	0x08011f57
 8011f34:	08011f57 	.word	0x08011f57
 8011f38:	08011f57 	.word	0x08011f57
 8011f3c:	08011f57 	.word	0x08011f57
 8011f40:	08011f57 	.word	0x08011f57
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8011f44:	2300      	movs	r3, #0
 8011f46:	60fb      	str	r3, [r7, #12]
        break;
 8011f48:	e00e      	b.n	8011f68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	60fb      	str	r3, [r7, #12]
        break;
 8011f4e:	e00b      	b.n	8011f68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8011f50:	2302      	movs	r3, #2
 8011f52:	60fb      	str	r3, [r7, #12]
        break;
 8011f54:	e008      	b.n	8011f68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8011f56:	2305      	movs	r3, #5
 8011f58:	60fb      	str	r3, [r7, #12]
        break;
 8011f5a:	e005      	b.n	8011f68 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011f5c:	4b05      	ldr	r3, [pc, #20]	@ (8011f74 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8011f5e:	4a06      	ldr	r2, [pc, #24]	@ (8011f78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8011f60:	2165      	movs	r1, #101	@ 0x65
 8011f62:	4806      	ldr	r0, [pc, #24]	@ (8011f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8011f64:	f012 fff8 	bl	8024f58 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011f68:	68fb      	ldr	r3, [r7, #12]
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3710      	adds	r7, #16
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	08026c94 	.word	0x08026c94
 8011f78:	08026cb0 	.word	0x08026cb0
 8011f7c:	08026cfc 	.word	0x08026cfc

08011f80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	2b0a      	cmp	r3, #10
 8011f94:	d821      	bhi.n	8011fda <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8011f96:	a201      	add	r2, pc, #4	@ (adr r2, 8011f9c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8011f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f9c:	08011fd5 	.word	0x08011fd5
 8011fa0:	08011fcf 	.word	0x08011fcf
 8011fa4:	08011fc9 	.word	0x08011fc9
 8011fa8:	08011fdb 	.word	0x08011fdb
 8011fac:	08011fdb 	.word	0x08011fdb
 8011fb0:	08011fdb 	.word	0x08011fdb
 8011fb4:	08011fdb 	.word	0x08011fdb
 8011fb8:	08011fcf 	.word	0x08011fcf
 8011fbc:	08011fcf 	.word	0x08011fcf
 8011fc0:	08011fcf 	.word	0x08011fcf
 8011fc4:	08011fcf 	.word	0x08011fcf
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	60fb      	str	r3, [r7, #12]
        break;
 8011fcc:	e00b      	b.n	8011fe6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8011fce:	2301      	movs	r3, #1
 8011fd0:	60fb      	str	r3, [r7, #12]
        break;
 8011fd2:	e008      	b.n	8011fe6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8011fd4:	2302      	movs	r3, #2
 8011fd6:	60fb      	str	r3, [r7, #12]
        break;
 8011fd8:	e005      	b.n	8011fe6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8011fda:	4b05      	ldr	r3, [pc, #20]	@ (8011ff0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8011fdc:	4a05      	ldr	r2, [pc, #20]	@ (8011ff4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8011fde:	2186      	movs	r1, #134	@ 0x86
 8011fe0:	4805      	ldr	r0, [pc, #20]	@ (8011ff8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8011fe2:	f012 ffb9 	bl	8024f58 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	08026c94 	.word	0x08026c94
 8011ff4:	08026d28 	.word	0x08026d28
 8011ff8:	08026cfc 	.word	0x08026cfc

08011ffc <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b083      	sub	sp, #12
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8012004:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8012008:	4618      	mov	r0, r3
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr

08012014 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8012014:	b590      	push	{r4, r7, lr}
 8012016:	b089      	sub	sp, #36	@ 0x24
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	7f5b      	ldrb	r3, [r3, #29]
 8012022:	4619      	mov	r1, r3
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f7ff ff67 	bl	8011ef8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801202a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	7f9b      	ldrb	r3, [r3, #30]
 8012030:	4619      	mov	r1, r3
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff ff60 	bl	8011ef8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012038:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	7f9b      	ldrb	r3, [r3, #30]
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff ff9d 	bl	8011f80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8012046:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	8b5b      	ldrh	r3, [r3, #26]
 801204c:	461a      	mov	r2, r3
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	8a9b      	ldrh	r3, [r3, #20]
 8012052:	1ad2      	subs	r2, r2, r3
 8012054:	4b94      	ldr	r3, [pc, #592]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012056:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	8b5b      	ldrh	r3, [r3, #26]
 801205c:	461a      	mov	r2, r3
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	8a9b      	ldrh	r3, [r3, #20]
 8012062:	1ad2      	subs	r2, r2, r3
 8012064:	4b90      	ldr	r3, [pc, #576]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012066:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	8b1b      	ldrh	r3, [r3, #24]
 801206c:	461a      	mov	r2, r3
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	8a9b      	ldrh	r3, [r3, #20]
 8012072:	1ad2      	subs	r2, r2, r3
 8012074:	4b8c      	ldr	r3, [pc, #560]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012076:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8012078:	4a8b      	ldr	r2, [pc, #556]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	8adb      	ldrh	r3, [r3, #22]
 8012082:	461a      	mov	r2, r3
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	8a9b      	ldrh	r3, [r3, #20]
 8012088:	041b      	lsls	r3, r3, #16
 801208a:	431a      	orrs	r2, r3
 801208c:	4b86      	ldr	r3, [pc, #536]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801208e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	691a      	ldr	r2, [r3, #16]
 8012094:	4b84      	ldr	r3, [pc, #528]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012096:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	685a      	ldr	r2, [r3, #4]
 801209c:	4b82      	ldr	r3, [pc, #520]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801209e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80120a0:	683b      	ldr	r3, [r7, #0]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120a8:	d036      	beq.n	8012118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80120aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120ae:	f200 80de 	bhi.w	801226e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80120b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120b6:	d015      	beq.n	80120e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80120b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80120bc:	f200 80d7 	bhi.w	801226e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80120c0:	2b80      	cmp	r3, #128	@ 0x80
 80120c2:	d043      	beq.n	801214c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>
 80120c4:	2b80      	cmp	r3, #128	@ 0x80
 80120c6:	f200 80d2 	bhi.w	801226e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80120ca:	2b40      	cmp	r3, #64	@ 0x40
 80120cc:	f000 80bb 	beq.w	8012246 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80120d0:	2b40      	cmp	r3, #64	@ 0x40
 80120d2:	f200 80cc 	bhi.w	801226e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
 80120d6:	2b04      	cmp	r3, #4
 80120d8:	f000 80a1 	beq.w	801221e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20a>
 80120dc:	2b20      	cmp	r3, #32
 80120de:	f000 80b2 	beq.w	8012246 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
 80120e2:	e0c4      	b.n	801226e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25a>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	7f1b      	ldrb	r3, [r3, #28]
 80120e8:	061a      	lsls	r2, r3, #24
 80120ea:	496f      	ldr	r1, [pc, #444]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80120ec:	4b6f      	ldr	r3, [pc, #444]	@ (80122ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80120ee:	4313      	orrs	r3, r2
 80120f0:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	330c      	adds	r3, #12
 80120f6:	4c6c      	ldr	r4, [pc, #432]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7ff fdbb 	bl	8011c74 <_ZNK8touchgfx9colortypecvmEv>
 80120fe:	4603      	mov	r3, r0
 8012100:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012102:	4a69      	ldr	r2, [pc, #420]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	691a      	ldr	r2, [r3, #16]
 801210c:	4b66      	ldr	r3, [pc, #408]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801210e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012110:	4b65      	ldr	r3, [pc, #404]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012112:	4a67      	ldr	r2, [pc, #412]	@ (80122b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012114:	601a      	str	r2, [r3, #0]
        break;
 8012116:	e0c2      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	7f1b      	ldrb	r3, [r3, #28]
 801211c:	061a      	lsls	r2, r3, #24
 801211e:	4962      	ldr	r1, [pc, #392]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012120:	4b64      	ldr	r3, [pc, #400]	@ (80122b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8012122:	4313      	orrs	r3, r2
 8012124:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	330c      	adds	r3, #12
 801212a:	4c5f      	ldr	r4, [pc, #380]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff fda1 	bl	8011c74 <_ZNK8touchgfx9colortypecvmEv>
 8012132:	4603      	mov	r3, r0
 8012134:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012136:	4a5c      	ldr	r2, [pc, #368]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	691a      	ldr	r2, [r3, #16]
 8012140:	4b59      	ldr	r3, [pc, #356]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012142:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012144:	4b58      	ldr	r3, [pc, #352]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012146:	4a5a      	ldr	r2, [pc, #360]	@ (80122b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012148:	601a      	str	r2, [r3, #0]
        break;
 801214a:	e0a8      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	689b      	ldr	r3, [r3, #8]
 8012150:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 8012152:	2301      	movs	r3, #1
 8012154:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	7f1b      	ldrb	r3, [r3, #28]
 801215a:	061a      	lsls	r2, r3, #24
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	4313      	orrs	r3, r2
 8012160:	4a51      	ldr	r2, [pc, #324]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012166:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012168:	4a4f      	ldr	r2, [pc, #316]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	691a      	ldr	r2, [r3, #16]
 8012172:	4b4d      	ldr	r3, [pc, #308]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012174:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	1d1a      	adds	r2, r3, #4
 801217a:	4b4b      	ldr	r3, [pc, #300]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801217c:	62da      	str	r2, [r3, #44]	@ 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	b2db      	uxtb	r3, r3
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x17a>
 8012188:	2b01      	cmp	r3, #1
 801218a:	d00d      	beq.n	80121a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x194>
 801218c:	e020      	b.n	80121d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 801218e:	4b46      	ldr	r3, [pc, #280]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012190:	69da      	ldr	r2, [r3, #28]
 8012192:	4b49      	ldr	r3, [pc, #292]	@ (80122b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8012194:	4013      	ands	r3, r2
 8012196:	68fa      	ldr	r2, [r7, #12]
 8012198:	8852      	ldrh	r2, [r2, #2]
 801219a:	3a01      	subs	r2, #1
 801219c:	0212      	lsls	r2, r2, #8
 801219e:	4611      	mov	r1, r2
 80121a0:	4a41      	ldr	r2, [pc, #260]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121a2:	430b      	orrs	r3, r1
 80121a4:	61d3      	str	r3, [r2, #28]
                break;
 80121a6:	e01a      	b.n	80121de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	7f1b      	ldrb	r3, [r3, #28]
 80121ac:	2bff      	cmp	r3, #255	@ 0xff
 80121ae:	d101      	bne.n	80121b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
                {
                    blend = false;
 80121b0:	2300      	movs	r3, #0
 80121b2:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80121b4:	4b3c      	ldr	r3, [pc, #240]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121b6:	69da      	ldr	r2, [r3, #28]
 80121b8:	4b3f      	ldr	r3, [pc, #252]	@ (80122b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80121ba:	4013      	ands	r3, r2
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	8852      	ldrh	r2, [r2, #2]
 80121c0:	3a01      	subs	r2, #1
 80121c2:	0212      	lsls	r2, r2, #8
 80121c4:	4313      	orrs	r3, r2
 80121c6:	4a38      	ldr	r2, [pc, #224]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121c8:	f043 0310 	orr.w	r3, r3, #16
 80121cc:	61d3      	str	r3, [r2, #28]
                break;
 80121ce:	e006      	b.n	80121de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80121d0:	4b3a      	ldr	r3, [pc, #232]	@ (80122bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80121d2:	4a3b      	ldr	r2, [pc, #236]	@ (80122c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80121d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80121d8:	483a      	ldr	r0, [pc, #232]	@ (80122c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 80121da:	f012 febd 	bl	8024f58 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80121de:	4b32      	ldr	r3, [pc, #200]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121e0:	69db      	ldr	r3, [r3, #28]
 80121e2:	4a31      	ldr	r2, [pc, #196]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121e4:	f043 0320 	orr.w	r3, r3, #32
 80121e8:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80121ea:	bf00      	nop
 80121ec:	4b2e      	ldr	r3, [pc, #184]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80121ee:	69db      	ldr	r3, [r3, #28]
 80121f0:	f003 0320 	and.w	r3, r3, #32
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	bf14      	ite	ne
 80121f8:	2301      	movne	r3, #1
 80121fa:	2300      	moveq	r3, #0
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d1f4      	bne.n	80121ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8012202:	4b29      	ldr	r3, [pc, #164]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012204:	2210      	movs	r2, #16
 8012206:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 8012208:	7ffb      	ldrb	r3, [r7, #31]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d003      	beq.n	8012216 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x202>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801220e:	4b26      	ldr	r3, [pc, #152]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012210:	4a27      	ldr	r2, [pc, #156]	@ (80122b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012212:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8012214:	e043      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8012216:	4b24      	ldr	r3, [pc, #144]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012218:	4a2b      	ldr	r2, [pc, #172]	@ (80122c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 801221a:	601a      	str	r2, [r3, #0]
        break;
 801221c:	e03f      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	7f1b      	ldrb	r3, [r3, #28]
 8012222:	061a      	lsls	r2, r3, #24
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	4313      	orrs	r3, r2
 8012228:	4a1f      	ldr	r2, [pc, #124]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801222a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801222e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012230:	4a1d      	ldr	r2, [pc, #116]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	691a      	ldr	r2, [r3, #16]
 801223a:	4b1b      	ldr	r3, [pc, #108]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801223c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801223e:	4b1a      	ldr	r3, [pc, #104]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012240:	4a1b      	ldr	r2, [pc, #108]	@ (80122b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8012242:	601a      	str	r2, [r3, #0]
        break;
 8012244:	e02b      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	7f1b      	ldrb	r3, [r3, #28]
 801224a:	061a      	lsls	r2, r3, #24
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	4313      	orrs	r3, r2
 8012250:	4a15      	ldr	r2, [pc, #84]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012256:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8012258:	4a13      	ldr	r2, [pc, #76]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	691a      	ldr	r2, [r3, #16]
 8012262:	4b11      	ldr	r3, [pc, #68]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012264:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8012266:	4b10      	ldr	r3, [pc, #64]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012268:	4a11      	ldr	r2, [pc, #68]	@ (80122b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801226a:	601a      	str	r2, [r3, #0]
        break;
 801226c:	e017      	b.n	801229e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	7f1b      	ldrb	r3, [r3, #28]
 8012272:	061a      	lsls	r2, r3, #24
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	4313      	orrs	r3, r2
 8012278:	4a0b      	ldr	r2, [pc, #44]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801227a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801227e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	7f5a      	ldrb	r2, [r3, #29]
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	7f9b      	ldrb	r3, [r3, #30]
 8012288:	429a      	cmp	r2, r3
 801228a:	d003      	beq.n	8012294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x280>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801228c:	4b06      	ldr	r3, [pc, #24]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 801228e:	4a0e      	ldr	r2, [pc, #56]	@ (80122c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 8012290:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 8012292:	e003      	b.n	801229c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8012294:	4b04      	ldr	r3, [pc, #16]	@ (80122a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8012296:	f240 2201 	movw	r2, #513	@ 0x201
 801229a:	601a      	str	r2, [r3, #0]
        break;
 801229c:	bf00      	nop
    }
}
 801229e:	bf00      	nop
 80122a0:	3724      	adds	r7, #36	@ 0x24
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd90      	pop	{r4, r7, pc}
 80122a6:	bf00      	nop
 80122a8:	52001000 	.word	0x52001000
 80122ac:	0002000a 	.word	0x0002000a
 80122b0:	00020201 	.word	0x00020201
 80122b4:	00020009 	.word	0x00020009
 80122b8:	ffff00ef 	.word	0xffff00ef
 80122bc:	08026d74 	.word	0x08026d74
 80122c0:	08026d90 	.word	0x08026d90
 80122c4:	08026cfc 	.word	0x08026cfc
 80122c8:	00010201 	.word	0x00010201

080122cc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80122cc:	b590      	push	{r4, r7, lr}
 80122ce:	b085      	sub	sp, #20
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	7f9b      	ldrb	r3, [r3, #30]
 80122da:	4619      	mov	r1, r3
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff fe4f 	bl	8011f80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80122e2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80122e4:	4a2f      	ldr	r2, [pc, #188]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	8adb      	ldrh	r3, [r3, #22]
 80122ee:	461a      	mov	r2, r3
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	8a9b      	ldrh	r3, [r3, #20]
 80122f4:	041b      	lsls	r3, r3, #16
 80122f6:	431a      	orrs	r2, r3
 80122f8:	4b2a      	ldr	r3, [pc, #168]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 80122fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	691a      	ldr	r2, [r3, #16]
 8012300:	4b28      	ldr	r3, [pc, #160]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012302:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	8b5b      	ldrh	r3, [r3, #26]
 8012308:	461a      	mov	r2, r3
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	8a9b      	ldrh	r3, [r3, #20]
 801230e:	1ad2      	subs	r2, r2, r3
 8012310:	4b24      	ldr	r3, [pc, #144]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012312:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	2b08      	cmp	r3, #8
 801231a:	d12d      	bne.n	8012378 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	8b5b      	ldrh	r3, [r3, #26]
 8012320:	461a      	mov	r2, r3
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	8a9b      	ldrh	r3, [r3, #20]
 8012326:	1ad2      	subs	r2, r2, r3
 8012328:	4b1e      	ldr	r3, [pc, #120]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801232a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	8b5b      	ldrh	r3, [r3, #26]
 8012330:	461a      	mov	r2, r3
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	8a9b      	ldrh	r3, [r3, #20]
 8012336:	1ad2      	subs	r2, r2, r3
 8012338:	4b1a      	ldr	r3, [pc, #104]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801233a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801233c:	4a19      	ldr	r2, [pc, #100]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	7f1b      	ldrb	r3, [r3, #28]
 8012346:	061a      	lsls	r2, r3, #24
 8012348:	4916      	ldr	r1, [pc, #88]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801234a:	4b17      	ldr	r3, [pc, #92]	@ (80123a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 801234c:	4313      	orrs	r3, r2
 801234e:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	330c      	adds	r3, #12
 8012354:	4c13      	ldr	r4, [pc, #76]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012356:	4618      	mov	r0, r3
 8012358:	f7ff fc8c 	bl	8011c74 <_ZNK8touchgfx9colortypecvmEv>
 801235c:	4603      	mov	r3, r0
 801235e:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	691a      	ldr	r2, [r3, #16]
 8012364:	4b0f      	ldr	r3, [pc, #60]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012366:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	691a      	ldr	r2, [r3, #16]
 801236c:	4b0d      	ldr	r3, [pc, #52]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801236e:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8012370:	4b0c      	ldr	r3, [pc, #48]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012372:	4a0e      	ldr	r2, [pc, #56]	@ (80123ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 8012374:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8012376:	e010      	b.n	801239a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xce>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8012378:	4a0a      	ldr	r2, [pc, #40]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 801237e:	4b09      	ldr	r3, [pc, #36]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012380:	2200      	movs	r2, #0
 8012382:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	330c      	adds	r3, #12
 8012388:	4c06      	ldr	r4, [pc, #24]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff fc72 	bl	8011c74 <_ZNK8touchgfx9colortypecvmEv>
 8012390:	4603      	mov	r3, r0
 8012392:	63a3      	str	r3, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8012394:	4b03      	ldr	r3, [pc, #12]	@ (80123a4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 8012396:	4a06      	ldr	r2, [pc, #24]	@ (80123b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 8012398:	601a      	str	r2, [r3, #0]
}
 801239a:	bf00      	nop
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd90      	pop	{r4, r7, pc}
 80123a2:	bf00      	nop
 80123a4:	52001000 	.word	0x52001000
 80123a8:	00010009 	.word	0x00010009
 80123ac:	00020201 	.word	0x00020201
 80123b0:	00030201 	.word	0x00030201

080123b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	4a05      	ldr	r2, [pc, #20]	@ (80123d4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7ff fc61 	bl	8011c8c <_ZN8touchgfx9DMA_QueueD1Ev>
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}
 80123d4:	080280dc 	.word	0x080280dc

080123d8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff ffe7 	bl	80123b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80123e6:	2114      	movs	r1, #20
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f012 fd86 	bl	8024efa <_ZdlPvj>
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	4618      	mov	r0, r3
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8012400:	4a04      	ldr	r2, [pc, #16]	@ (8012414 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6013      	str	r3, [r2, #0]
    }
 8012406:	bf00      	nop
 8012408:	370c      	adds	r7, #12
 801240a:	46bd      	mov	sp, r7
 801240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop
 8012414:	2401bb94 	.word	0x2401bb94

08012418 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8012418:	b480      	push	{r7}
 801241a:	b085      	sub	sp, #20
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8012426:	4a0b      	ldr	r2, [pc, #44]	@ (8012454 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	68ba      	ldr	r2, [r7, #8]
 8012430:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	687a      	ldr	r2, [r7, #4]
 8012436:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	69ba      	ldr	r2, [r7, #24]
 8012442:	611a      	str	r2, [r3, #16]
    {
    }
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	4618      	mov	r0, r3
 8012448:	3714      	adds	r7, #20
 801244a:	46bd      	mov	sp, r7
 801244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	080278c4 	.word	0x080278c4

08012458 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
    {
 8012460:	4a04      	ldr	r2, [pc, #16]	@ (8012474 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	601a      	str	r2, [r3, #0]
    }
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	4618      	mov	r0, r3
 801246a:	370c      	adds	r7, #12
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr
 8012474:	080278c4 	.word	0x080278c4

08012478 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8012478:	b580      	push	{r7, lr}
 801247a:	b082      	sub	sp, #8
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
    }
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7ff ffe9 	bl	8012458 <_ZN8touchgfx7MVPHeapD1Ev>
 8012486:	2114      	movs	r1, #20
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f012 fd36 	bl	8024efa <_ZdlPvj>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4618      	mov	r0, r3
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8012498:	b480      	push	{r7}
 801249a:	b083      	sub	sp, #12
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    {
 80124a0:	4a04      	ldr	r2, [pc, #16]	@ (80124b4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	601a      	str	r2, [r3, #0]
    }
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4618      	mov	r0, r3
 80124aa:	370c      	adds	r7, #12
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr
 80124b4:	0802845c 	.word	0x0802845c

080124b8 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
    }
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff ffe9 	bl	8012498 <_ZN8touchgfx3LCDD1Ev>
 80124c6:	210c      	movs	r1, #12
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f012 fd16 	bl	8024efa <_ZdlPvj>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80124d8:	b480      	push	{r7}
 80124da:	b083      	sub	sp, #12
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
            : startX(0),
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	801a      	strh	r2, [r3, #0]
              startY(0),
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2200      	movs	r2, #0
 80124ea:	805a      	strh	r2, [r3, #2]
              downX(0),
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	809a      	strh	r2, [r3, #4]
              downY(0),
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2200      	movs	r2, #0
 8012502:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2200      	movs	r2, #0
 8012508:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2200      	movs	r2, #0
 801250e:	739a      	strb	r2, [r3, #14]
        {
        }
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	4618      	mov	r0, r3
 8012514:	370c      	adds	r7, #12
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr

0801251e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 801251e:	b580      	push	{r7, lr}
 8012520:	b082      	sub	sp, #8
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4618      	mov	r0, r3
 801252a:	f7ff ffd5 	bl	80124d8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2200      	movs	r2, #0
 8012532:	611a      	str	r2, [r3, #16]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	829a      	strh	r2, [r3, #20]
    {
    }
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4618      	mov	r0, r3
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8012544:	b580      	push	{r7, lr}
 8012546:	b084      	sub	sp, #16
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8012552:	4a55      	ldr	r2, [pc, #340]	@ (80126a8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	68ba      	ldr	r2, [r7, #8]
 801255c:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	683a      	ldr	r2, [r7, #0]
 8012568:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2200      	movs	r2, #0
 801256e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	2200      	movs	r2, #0
 8012574:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2200      	movs	r2, #0
 801257a:	619a      	str	r2, [r3, #24]
          gestures(),
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	331c      	adds	r3, #28
 8012580:	4618      	mov	r0, r3
 8012582:	f7ff ffcc 	bl	801251e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	2200      	movs	r2, #0
 801258a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2200      	movs	r2, #0
 8012592:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2200      	movs	r2, #0
 8012598:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2200      	movs	r2, #0
 80125a4:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2200      	movs	r2, #0
 80125aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2200      	movs	r2, #0
 80125ba:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2200      	movs	r2, #0
 80125ca:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	3350      	adds	r3, #80	@ 0x50
 80125d0:	4618      	mov	r0, r3
 80125d2:	f7fc fa70 	bl	800eab6 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2200      	movs	r2, #0
 80125da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	2200      	movs	r2, #0
 80125e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2200      	movs	r2, #0
 80125e8:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	2200      	movs	r2, #0
 80125ee:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2201      	movs	r2, #1
 80125f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2200      	movs	r2, #0
 80125fc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2201      	movs	r2, #1
 801260c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2200      	movs	r2, #0
 8012614:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2200      	movs	r2, #0
 801261c:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2200      	movs	r2, #0
 8012624:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2200      	movs	r2, #0
 801262c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2200      	movs	r2, #0
 801263c:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2200      	movs	r2, #0
 8012642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2200      	movs	r2, #0
 801264a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2201      	movs	r2, #1
 8012652:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2201      	movs	r2, #1
 801265a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 801265e:	4a13      	ldr	r2, [pc, #76]	@ (80126ac <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8012664:	4a12      	ldr	r2, [pc, #72]	@ (80126b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8012666:	8b3b      	ldrh	r3, [r7, #24]
 8012668:	8013      	strh	r3, [r2, #0]
 801266a:	4b11      	ldr	r3, [pc, #68]	@ (80126b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801266c:	881a      	ldrh	r2, [r3, #0]
 801266e:	4b11      	ldr	r3, [pc, #68]	@ (80126b4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8012670:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8012672:	4a11      	ldr	r2, [pc, #68]	@ (80126b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8012674:	8bbb      	ldrh	r3, [r7, #28]
 8012676:	8013      	strh	r3, [r2, #0]
 8012678:	4b0f      	ldr	r3, [pc, #60]	@ (80126b8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801267a:	881a      	ldrh	r2, [r3, #0]
 801267c:	4b0f      	ldr	r3, [pc, #60]	@ (80126bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 801267e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8012680:	4b0f      	ldr	r3, [pc, #60]	@ (80126c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8012682:	2200      	movs	r2, #0
 8012684:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8012686:	8b3a      	ldrh	r2, [r7, #24]
 8012688:	8bbb      	ldrh	r3, [r7, #28]
 801268a:	429a      	cmp	r2, r3
 801268c:	bf34      	ite	cc
 801268e:	2301      	movcc	r3, #1
 8012690:	2300      	movcs	r3, #0
 8012692:	b2db      	uxtb	r3, r3
 8012694:	461a      	mov	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	08027fb4 	.word	0x08027fb4
 80126ac:	2401bb38 	.word	0x2401bb38
 80126b0:	2401bb2c 	.word	0x2401bb2c
 80126b4:	2401bb32 	.word	0x2401bb32
 80126b8:	2401bb2e 	.word	0x2401bb2e
 80126bc:	2401bb34 	.word	0x2401bb34
 80126c0:	2401bb30 	.word	0x2401bb30

080126c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fb ff53 	bl	800e57c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 80126d6:	bf00      	nop
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
 80126ec:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80126ee:	68f8      	ldr	r0, [r7, #12]
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	68b9      	ldr	r1, [r7, #8]
 80126fa:	f7ff fe8d 	bl	8012418 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80126fe:	4a04      	ldr	r2, [pc, #16]	@ (8012710 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	601a      	str	r2, [r3, #0]
    {

    }
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	4618      	mov	r0, r3
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	080278b0 	.word	0x080278b0

08012714 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8012714:	b580      	push	{r7, lr}
 8012716:	af00      	add	r7, sp, #0
 8012718:	4801      	ldr	r0, [pc, #4]	@ (8012720 <__tcf_0+0xc>)
 801271a:	f000 f965 	bl	80129e8 <_ZN12FrontendHeapD1Ev>
 801271e:	bd80      	pop	{r7, pc}
 8012720:	2401a3f4 	.word	0x2401a3f4

08012724 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8012728:	4b11      	ldr	r3, [pc, #68]	@ (8012770 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	f3bf 8f5b 	dmb	ish
 8012730:	f003 0301 	and.w	r3, r3, #1
 8012734:	2b00      	cmp	r3, #0
 8012736:	bf0c      	ite	eq
 8012738:	2301      	moveq	r3, #1
 801273a:	2300      	movne	r3, #0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	2b00      	cmp	r3, #0
 8012740:	d013      	beq.n	801276a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012742:	480b      	ldr	r0, [pc, #44]	@ (8012770 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012744:	f012 fbdb 	bl	8024efe <__cxa_guard_acquire>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	bf14      	ite	ne
 801274e:	2301      	movne	r3, #1
 8012750:	2300      	moveq	r3, #0
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2b00      	cmp	r3, #0
 8012756:	d008      	beq.n	801276a <_ZN12FrontendHeap11getInstanceEv+0x46>
 8012758:	4806      	ldr	r0, [pc, #24]	@ (8012774 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801275a:	f000 f867 	bl	801282c <_ZN12FrontendHeapC1Ev>
 801275e:	4806      	ldr	r0, [pc, #24]	@ (8012778 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8012760:	f012 fc18 	bl	8024f94 <atexit>
 8012764:	4802      	ldr	r0, [pc, #8]	@ (8012770 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8012766:	f012 fbd6 	bl	8024f16 <__cxa_guard_release>
        return instance;
 801276a:	4b02      	ldr	r3, [pc, #8]	@ (8012774 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 801276c:	4618      	mov	r0, r3
 801276e:	bd80      	pop	{r7, pc}
 8012770:	2401ac98 	.word	0x2401ac98
 8012774:	2401a3f4 	.word	0x2401a3f4
 8012778:	08012715 	.word	0x08012715

0801277c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	4a05      	ldr	r2, [pc, #20]	@ (801279c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	601a      	str	r2, [r3, #0]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	4618      	mov	r0, r3
 801278e:	f7ff fe63 	bl	8012458 <_ZN8touchgfx7MVPHeapD1Ev>
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	080278b0 	.word	0x080278b0

080127a0 <_ZN16FrontendHeapBaseD0Ev>:
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f7ff ffe7 	bl	801277c <_ZN16FrontendHeapBaseD1Ev>
 80127ae:	2114      	movs	r1, #20
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f012 fba2 	bl	8024efa <_ZdlPvj>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4618      	mov	r0, r3
 80127ba:	3708      	adds	r7, #8
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	4618      	mov	r0, r3
 80127cc:	f000 fdd4 	bl	8013378 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80127d0:	4a03      	ldr	r2, [pc, #12]	@ (80127e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	601a      	str	r2, [r3, #0]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	4618      	mov	r0, r3
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	0802787c 	.word	0x0802787c

080127e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	4618      	mov	r0, r3
 80127f0:	f000 fdc2 	bl	8013378 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80127f4:	4a03      	ldr	r2, [pc, #12]	@ (8012804 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	4618      	mov	r0, r3
 80127fe:	3708      	adds	r7, #8
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	08027848 	.word	0x08027848

08012808 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4618      	mov	r0, r3
 8012814:	f000 fdb0 	bl	8013378 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8012818:	4a03      	ldr	r2, [pc, #12]	@ (8012828 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	601a      	str	r2, [r3, #0]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	08027814 	.word	0x08027814

0801282c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 801282c:	b590      	push	{r4, r7, lr}
 801282e:	b085      	sub	sp, #20
 8012830:	af02      	add	r7, sp, #8
 8012832:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f103 0114 	add.w	r1, r3, #20
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f503 64e6 	add.w	r4, r3, #1840	@ 0x730
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
                     app(model, *this)
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	4623      	mov	r3, r4
 8012852:	f7ff ff45 	bl	80126e0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8012856:	4a18      	ldr	r2, [pc, #96]	@ (80128b8 <_ZN12FrontendHeapC1Ev+0x8c>)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	601a      	str	r2, [r3, #0]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3314      	adds	r3, #20
 8012860:	4618      	mov	r0, r3
 8012862:	f7ff ffad 	bl	80127c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	332c      	adds	r3, #44	@ 0x2c
 801286a:	4618      	mov	r0, r3
 801286c:	f7ff ffba 	bl	80127e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff ffc6 	bl	8012808 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f203 7344 	addw	r3, r3, #1860	@ 0x744
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe fd0c 	bl	80112a0 <_ZN5ModelC1Ev>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f503 60e9 	add.w	r0, r3, #1864	@ 0x748
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	f203 7344 	addw	r3, r3, #1860	@ 0x744
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	4619      	mov	r1, r3
 8012898:	f7fe fa9a 	bl	8010dd0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 80128a4:	4619      	mov	r1, r3
 80128a6:	4610      	mov	r0, r2
 80128a8:	f7ff ff0c 	bl	80126c4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4618      	mov	r0, r3
 80128b0:	370c      	adds	r7, #12
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd90      	pop	{r4, r7, pc}
 80128b6:	bf00      	nop
 80128b8:	08027800 	.word	0x08027800

080128bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af02      	add	r7, sp, #8
 80128c2:	60f8      	str	r0, [r7, #12]
 80128c4:	60b9      	str	r1, [r7, #8]
 80128c6:	607a      	str	r2, [r7, #4]
 80128c8:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80128ca:	68f8      	ldr	r0, [r7, #12]
 80128cc:	8bbb      	ldrh	r3, [r7, #28]
 80128ce:	9301      	str	r3, [sp, #4]
 80128d0:	8b3b      	ldrh	r3, [r7, #24]
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	68b9      	ldr	r1, [r7, #8]
 80128da:	f7ff fe33 	bl	8012544 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80128de:	4a04      	ldr	r2, [pc, #16]	@ (80128f0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	601a      	str	r2, [r3, #0]
    }
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	4618      	mov	r0, r3
 80128e8:	3710      	adds	r7, #16
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	080278d4 	.word	0x080278d4

080128f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b086      	sub	sp, #24
 80128f8:	af02      	add	r7, sp, #8
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
 8012900:	603b      	str	r3, [r7, #0]
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	8bbb      	ldrh	r3, [r7, #28]
 8012906:	9301      	str	r3, [sp, #4]
 8012908:	8b3b      	ldrh	r3, [r7, #24]
 801290a:	9300      	str	r3, [sp, #0]
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	687a      	ldr	r2, [r7, #4]
 8012910:	68b9      	ldr	r1, [r7, #8]
 8012912:	f7ff ffd3 	bl	80128bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012916:	4a04      	ldr	r2, [pc, #16]	@ (8012928 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	601a      	str	r2, [r3, #0]
    }
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	4618      	mov	r0, r3
 8012920:	3710      	adds	r7, #16
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	080276b4 	.word	0x080276b4

0801292c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 801292c:	b480      	push	{r7}
 801292e:	b083      	sub	sp, #12
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	4a04      	ldr	r2, [pc, #16]	@ (8012948 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	601a      	str	r2, [r3, #0]
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	4618      	mov	r0, r3
 801293e:	370c      	adds	r7, #12
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr
 8012948:	0802769c 	.word	0x0802769c

0801294c <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	4618      	mov	r0, r3
 8012958:	f7ff ffe8 	bl	801292c <_ZN8touchgfx15TouchControllerC1Ev>
 801295c:	4a03      	ldr	r2, [pc, #12]	@ (801296c <_ZN20STM32TouchControllerC1Ev+0x20>)
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	601a      	str	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	4618      	mov	r0, r3
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	08027684 	.word	0x08027684

08012970 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8012970:	b590      	push	{r4, r7, lr}
 8012972:	b085      	sub	sp, #20
 8012974:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8012976:	f7fd fff5 	bl	8010964 <_ZN14BitmapDatabase11getInstanceEv>
 801297a:	4604      	mov	r4, r0
 801297c:	f7fd fffc 	bl	8010978 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8012980:	4603      	mov	r3, r0
 8012982:	4619      	mov	r1, r3
 8012984:	2300      	movs	r3, #0
 8012986:	9300      	str	r3, [sp, #0]
 8012988:	2300      	movs	r3, #0
 801298a:	2200      	movs	r2, #0
 801298c:	4620      	mov	r0, r4
 801298e:	f009 f821 	bl	801b9d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8012992:	4809      	ldr	r0, [pc, #36]	@ (80129b8 <touchgfx_init+0x48>)
 8012994:	f7ff fd30 	bl	80123f8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8012998:	2000      	movs	r0, #0
 801299a:	f7fe f931 	bl	8010c00 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801299e:	4807      	ldr	r0, [pc, #28]	@ (80129bc <touchgfx_init+0x4c>)
 80129a0:	f008 fec4 	bl	801b72c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80129a4:	f7ff febe 	bl	8012724 <_ZN12FrontendHeap11getInstanceEv>
 80129a8:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80129aa:	4805      	ldr	r0, [pc, #20]	@ (80129c0 <touchgfx_init+0x50>)
 80129ac:	f7fe ff5c 	bl	8011868 <_ZN11TouchGFXHAL10initializeEv>
}
 80129b0:	bf00      	nop
 80129b2:	370c      	adds	r7, #12
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd90      	pop	{r4, r7, pc}
 80129b8:	2401baa8 	.word	0x2401baa8
 80129bc:	2400004c 	.word	0x2400004c
 80129c0:	2401baac 	.word	0x2401baac

080129c4 <touchgfx_components_init>:

void touchgfx_components_init()
{
 80129c4:	b480      	push	{r7}
 80129c6:	af00      	add	r7, sp, #0
}
 80129c8:	bf00      	nop
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
	...

080129d4 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80129d8:	4802      	ldr	r0, [pc, #8]	@ (80129e4 <touchgfx_taskEntry+0x10>)
 80129da:	f7fe ff51 	bl	8011880 <_ZN11TouchGFXHAL9taskEntryEv>
}
 80129de:	bf00      	nop
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	2401baac 	.word	0x2401baac

080129e8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	4a10      	ldr	r2, [pc, #64]	@ (8012a34 <_ZN12FrontendHeapD1Ev+0x4c>)
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	601a      	str	r2, [r3, #0]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fe f9b1 	bl	8010d64 <_ZN19FrontendApplicationD1Ev>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f000 f827 	bl	8012a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	332c      	adds	r3, #44	@ 0x2c
 8012a12:	4618      	mov	r0, r3
 8012a14:	f000 f844 	bl	8012aa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3314      	adds	r3, #20
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f000 f863 	bl	8012ae8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7ff fea9 	bl	801277c <_ZN16FrontendHeapBaseD1Ev>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}
 8012a34:	08027800 	.word	0x08027800

08012a38 <_ZN12FrontendHeapD0Ev>:
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b082      	sub	sp, #8
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	6078      	str	r0, [r7, #4]
 8012a40:	6878      	ldr	r0, [r7, #4]
 8012a42:	f7ff ffd1 	bl	80129e8 <_ZN12FrontendHeapD1Ev>
 8012a46:	f640 01a4 	movw	r1, #2212	@ 0x8a4
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f012 fa55 	bl	8024efa <_ZdlPvj>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	4618      	mov	r0, r3
 8012a54:	3708      	adds	r7, #8
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
	...

08012a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	4a05      	ldr	r2, [pc, #20]	@ (8012a7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 fc82 	bl	8013376 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	08027814 	.word	0x08027814

08012a80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7ff ffe7 	bl	8012a5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012a8e:	2114      	movs	r1, #20
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f012 fa32 	bl	8024efa <_ZdlPvj>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	4a05      	ldr	r2, [pc, #20]	@ (8012ac0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 fc60 	bl	8013376 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	08027848 	.word	0x08027848

08012ac4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b082      	sub	sp, #8
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7ff ffe7 	bl	8012aa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012ad2:	f240 7104 	movw	r1, #1796	@ 0x704
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f012 fa0f 	bl	8024efa <_ZdlPvj>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	3708      	adds	r7, #8
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	bd80      	pop	{r7, pc}
	...

08012ae8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	4a05      	ldr	r2, [pc, #20]	@ (8012b08 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	601a      	str	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 fc3c 	bl	8013376 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	3708      	adds	r7, #8
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}
 8012b08:	0802787c 	.word	0x0802787c

08012b0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7ff ffe7 	bl	8012ae8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8012b1a:	2118      	movs	r1, #24
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f012 f9ec 	bl	8024efa <_ZdlPvj>
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4618      	mov	r0, r3
 8012b26:	3708      	adds	r7, #8
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}

08012b2c <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	4a05      	ldr	r2, [pc, #20]	@ (8012b4c <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	601a      	str	r2, [r3, #0]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7ff fcab 	bl	8012498 <_ZN8touchgfx3LCDD1Ev>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	08028820 	.word	0x08028820

08012b50 <_ZN8touchgfx8LCD24bppD0Ev>:
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7ff ffe7 	bl	8012b2c <_ZN8touchgfx8LCD24bppD1Ev>
 8012b5e:	2168      	movs	r1, #104	@ 0x68
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f012 f9ca 	bl	8024efa <_ZdlPvj>
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <_Z41__static_initialization_and_destruction_0ii>:
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b084      	sub	sp, #16
 8012b74:	af02      	add	r7, sp, #8
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d119      	bne.n	8012bb4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b86:	4293      	cmp	r3, r2
 8012b88:	d114      	bne.n	8012bb4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8012b8a:	4818      	ldr	r0, [pc, #96]	@ (8012bec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012b8c:	f7ff fede 	bl	801294c <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8012b90:	4817      	ldr	r0, [pc, #92]	@ (8012bf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012b92:	f7ff f92b 	bl	8011dec <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8012b96:	4817      	ldr	r0, [pc, #92]	@ (8012bf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012b98:	f00b ffc8 	bl	801eb2c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8012b9c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8012ba0:	9301      	str	r3, [sp, #4]
 8012ba2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8012ba6:	9300      	str	r3, [sp, #0]
 8012ba8:	4b10      	ldr	r3, [pc, #64]	@ (8012bec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012baa:	4a12      	ldr	r2, [pc, #72]	@ (8012bf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012bac:	4910      	ldr	r1, [pc, #64]	@ (8012bf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bae:	4812      	ldr	r0, [pc, #72]	@ (8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012bb0:	f7ff fea0 	bl	80128f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d113      	bne.n	8012be2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d10e      	bne.n	8012be2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8012bc4:	480c      	ldr	r0, [pc, #48]	@ (8012bf8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8012bc6:	f7fe ff47 	bl	8011a58 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8012bca:	480c      	ldr	r0, [pc, #48]	@ (8012bfc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8012bcc:	f7fa fec6 	bl	800d95c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 8012bd0:	4808      	ldr	r0, [pc, #32]	@ (8012bf4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8012bd2:	f7ff ffab 	bl	8012b2c <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 8012bd6:	4806      	ldr	r0, [pc, #24]	@ (8012bf0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8012bd8:	f7ff f932 	bl	8011e40 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8012bdc:	4803      	ldr	r0, [pc, #12]	@ (8012bec <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8012bde:	f7fe fbeb 	bl	80113b8 <_ZN20STM32TouchControllerD1Ev>
}
 8012be2:	bf00      	nop
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	2401ac9c 	.word	0x2401ac9c
 8012bf0:	2401aca0 	.word	0x2401aca0
 8012bf4:	2401ba40 	.word	0x2401ba40
 8012bf8:	2401baac 	.word	0x2401baac
 8012bfc:	2400004c 	.word	0x2400004c

08012c00 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8012c00:	b480      	push	{r7}
 8012c02:	b083      	sub	sp, #12
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8012c08:	2301      	movs	r3, #1
    }
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	370c      	adds	r7, #12
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8012c16:	b480      	push	{r7}
 8012c18:	b083      	sub	sp, #12
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8012c1e:	230c      	movs	r3, #12
    }
 8012c20:	4618      	mov	r0, r3
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012c38:	887a      	ldrh	r2, [r7, #2]
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	3308      	adds	r3, #8
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	4413      	add	r3, r2
    }
 8012c48:	4618      	mov	r0, r3
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr

08012c54 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	460b      	mov	r3, r1
 8012c5e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8012c60:	887a      	ldrh	r2, [r7, #2]
 8012c62:	4613      	mov	r3, r2
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	4413      	add	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	3308      	adds	r3, #8
 8012c6c:	687a      	ldr	r2, [r7, #4]
 8012c6e:	4413      	add	r3, r2
    }
 8012c70:	4618      	mov	r0, r3
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012c84:	2301      	movs	r3, #1
    }
 8012c86:	4618      	mov	r0, r3
 8012c88:	370c      	adds	r7, #12
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c90:	4770      	bx	lr

08012c92 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012c92:	b480      	push	{r7}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012c9a:	f240 63fc 	movw	r3, #1788	@ 0x6fc
    }
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012caa:	b480      	push	{r7}
 8012cac:	b083      	sub	sp, #12
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012cb6:	887b      	ldrh	r3, [r7, #2]
 8012cb8:	f240 62fc 	movw	r2, #1788	@ 0x6fc
 8012cbc:	fb02 f303 	mul.w	r3, r2, r3
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	687a      	ldr	r2, [r7, #4]
 8012cc4:	4413      	add	r3, r2
    }
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr

08012cd2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012cd2:	b480      	push	{r7}
 8012cd4:	b083      	sub	sp, #12
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	460b      	mov	r3, r1
 8012cdc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012cde:	887b      	ldrh	r3, [r7, #2]
 8012ce0:	f240 62fc 	movw	r2, #1788	@ 0x6fc
 8012ce4:	fb02 f303 	mul.w	r3, r2, r3
 8012ce8:	3308      	adds	r3, #8
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	4413      	add	r3, r2
    }
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8012cfa:	b480      	push	{r7}
 8012cfc:	b083      	sub	sp, #12
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8012d02:	2301      	movs	r3, #1
    }
 8012d04:	4618      	mov	r0, r3
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr

08012d10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8012d18:	2310      	movs	r3, #16
    }
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	370c      	adds	r7, #12
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d24:	4770      	bx	lr

08012d26 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8012d26:	b480      	push	{r7}
 8012d28:	b083      	sub	sp, #12
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
 8012d2e:	460b      	mov	r3, r1
 8012d30:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	011b      	lsls	r3, r3, #4
 8012d36:	3308      	adds	r3, #8
 8012d38:	687a      	ldr	r2, [r7, #4]
 8012d3a:	4413      	add	r3, r2
    }
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	370c      	adds	r7, #12
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13MainPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8012d54:	887b      	ldrh	r3, [r7, #2]
 8012d56:	011b      	lsls	r3, r3, #4
 8012d58:	3308      	adds	r3, #8
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	4413      	add	r3, r2
    }
 8012d5e:	4618      	mov	r0, r3
 8012d60:	370c      	adds	r7, #12
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr

08012d6a <_GLOBAL__sub_I_touchgfx_init>:
 8012d6a:	b580      	push	{r7, lr}
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012d72:	2001      	movs	r0, #1
 8012d74:	f7ff fefc 	bl	8012b70 <_Z41__static_initialization_and_destruction_0ii>
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <_GLOBAL__sub_D_touchgfx_init>:
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012d82:	2000      	movs	r0, #0
 8012d84:	f7ff fef4 	bl	8012b70 <_Z41__static_initialization_and_destruction_0ii>
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8012d8a:	b580      	push	{r7, lr}
 8012d8c:	b082      	sub	sp, #8
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	3320      	adds	r3, #32
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	4798      	blx	r3
    }
 8012d9e:	bf00      	nop
 8012da0:	3708      	adds	r7, #8
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8012da6:	b480      	push	{r7}
 8012da8:	b083      	sub	sp, #12
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012db4:	3301      	adds	r3, #1
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8012dbe:	bf00      	nop
 8012dc0:	370c      	adds	r7, #12
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr
	...

08012dcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8012dd8:	78fb      	ldrb	r3, [r7, #3]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d002      	beq.n	8012de4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8012dde:	78fb      	ldrb	r3, [r7, #3]
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	d105      	bne.n	8012df0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	78fa      	ldrb	r2, [r7, #3]
 8012de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 8012dec:	2301      	movs	r3, #1
 8012dee:	e027      	b.n	8012e40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	2b01      	cmp	r3, #1
 8012df4:	d123      	bne.n	8012e3e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d014      	beq.n	8012e28 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	339c      	adds	r3, #156	@ 0x9c
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	4798      	blx	r3
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d008      	beq.n	8012e28 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012e16:	4b0c      	ldr	r3, [pc, #48]	@ (8012e48 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	f083 0301 	eor.w	r3, r3, #1
 8012e1e:	b2db      	uxtb	r3, r3
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d001      	beq.n	8012e28 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8012e24:	2301      	movs	r3, #1
 8012e26:	e000      	b.n	8012e2a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d005      	beq.n	8012e3a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	78fa      	ldrb	r2, [r7, #3]
 8012e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 8012e36:	2301      	movs	r3, #1
 8012e38:	e002      	b.n	8012e40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	e000      	b.n	8012e40 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8012e3e:	2300      	movs	r3, #0
    }
 8012e40:	4618      	mov	r0, r3
 8012e42:	3708      	adds	r7, #8
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	2401bb36 	.word	0x2401bb36

08012e4c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	683a      	ldr	r2, [r7, #0]
 8012e5a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
 8012e5c:	bf00      	nop
 8012e5e:	370c      	adds	r7, #12
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <__NVIC_EnableIRQ>:
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	4603      	mov	r3, r0
 8012e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	db0b      	blt.n	8012e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e7a:	88fb      	ldrh	r3, [r7, #6]
 8012e7c:	f003 021f 	and.w	r2, r3, #31
 8012e80:	4907      	ldr	r1, [pc, #28]	@ (8012ea0 <__NVIC_EnableIRQ+0x38>)
 8012e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012e86:	095b      	lsrs	r3, r3, #5
 8012e88:	2001      	movs	r0, #1
 8012e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8012e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8012e92:	bf00      	nop
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	e000e100 	.word	0xe000e100

08012ea4 <__NVIC_DisableIRQ>:
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	db12      	blt.n	8012edc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012eb6:	88fb      	ldrh	r3, [r7, #6]
 8012eb8:	f003 021f 	and.w	r2, r3, #31
 8012ebc:	490a      	ldr	r1, [pc, #40]	@ (8012ee8 <__NVIC_DisableIRQ+0x44>)
 8012ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ec2:	095b      	lsrs	r3, r3, #5
 8012ec4:	2001      	movs	r0, #1
 8012ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8012eca:	3320      	adds	r3, #32
 8012ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012ed0:	f3bf 8f4f 	dsb	sy
}
 8012ed4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012ed6:	f3bf 8f6f 	isb	sy
}
 8012eda:	bf00      	nop
}
 8012edc:	bf00      	nop
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr
 8012ee8:	e000e100 	.word	0xe000e100

08012eec <__NVIC_SetPriority>:
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	6039      	str	r1, [r7, #0]
 8012ef6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	db0a      	blt.n	8012f16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	b2da      	uxtb	r2, r3
 8012f04:	490c      	ldr	r1, [pc, #48]	@ (8012f38 <__NVIC_SetPriority+0x4c>)
 8012f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f0a:	0112      	lsls	r2, r2, #4
 8012f0c:	b2d2      	uxtb	r2, r2
 8012f0e:	440b      	add	r3, r1
 8012f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012f14:	e00a      	b.n	8012f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	4908      	ldr	r1, [pc, #32]	@ (8012f3c <__NVIC_SetPriority+0x50>)
 8012f1c:	88fb      	ldrh	r3, [r7, #6]
 8012f1e:	f003 030f 	and.w	r3, r3, #15
 8012f22:	3b04      	subs	r3, #4
 8012f24:	0112      	lsls	r2, r2, #4
 8012f26:	b2d2      	uxtb	r2, r2
 8012f28:	440b      	add	r3, r1
 8012f2a:	761a      	strb	r2, [r3, #24]
}
 8012f2c:	bf00      	nop
 8012f2e:	370c      	adds	r7, #12
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	e000e100 	.word	0xe000e100
 8012f3c:	e000ed00 	.word	0xe000ed00

08012f40 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8012f40:	b5b0      	push	{r4, r5, r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f001 ffcb 	bl	8014ee6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8012f50:	687d      	ldr	r5, [r7, #4]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	3364      	adds	r3, #100	@ 0x64
 8012f58:	681c      	ldr	r4, [r3, #0]
 8012f5a:	f005 faa7 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	4619      	mov	r1, r3
 8012f62:	4628      	mov	r0, r5
 8012f64:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	490a      	ldr	r1, [pc, #40]	@ (8012f94 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x54>)
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff ff6e 	bl	8012e4c <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2101      	movs	r1, #1
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7ff ff29 	bl	8012dcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	3388      	adds	r3, #136	@ 0x88
 8012f82:	681c      	ldr	r4, [r3, #0]
 8012f84:	2300      	movs	r3, #0
 8012f86:	2200      	movs	r2, #0
 8012f88:	4903      	ldr	r1, [pc, #12]	@ (8012f98 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 8012f8a:	47a0      	blx	r4
}
 8012f8c:	bf00      	nop
 8012f8e:	3708      	adds	r7, #8
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bdb0      	pop	{r4, r5, r7, pc}
 8012f94:	08011bb9 	.word	0x08011bb9
 8012f98:	24040000 	.word	0x24040000

08012f9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8012fa4:	2109      	movs	r1, #9
 8012fa6:	205a      	movs	r0, #90	@ 0x5a
 8012fa8:	f7ff ffa0 	bl	8012eec <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8012fac:	2109      	movs	r1, #9
 8012fae:	2058      	movs	r0, #88	@ 0x58
 8012fb0:	f7ff ff9c 	bl	8012eec <__NVIC_SetPriority>
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b082      	sub	sp, #8
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8012fc4:	205a      	movs	r0, #90	@ 0x5a
 8012fc6:	f7ff ff4f 	bl	8012e68 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8012fca:	2058      	movs	r0, #88	@ 0x58
 8012fcc:	f7ff ff4c 	bl	8012e68 <__NVIC_EnableIRQ>
}
 8012fd0:	bf00      	nop
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012fe0:	205a      	movs	r0, #90	@ 0x5a
 8012fe2:	f7ff ff5f 	bl	8012ea4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8012fe6:	2058      	movs	r0, #88	@ 0x58
 8012fe8:	f7ff ff5c 	bl	8012ea4 <__NVIC_DisableIRQ>
}
 8012fec:	bf00      	nop
 8012fee:	3708      	adds	r7, #8
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8012ffc:	4b11      	ldr	r3, [pc, #68]	@ (8013044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8012ffe:	68db      	ldr	r3, [r3, #12]
 8013000:	b29b      	uxth	r3, r3
 8013002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013006:	b29b      	uxth	r3, r3
 8013008:	3b01      	subs	r3, #1
 801300a:	b29a      	uxth	r2, r3
 801300c:	4b0e      	ldr	r3, [pc, #56]	@ (8013048 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801300e:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8013010:	4b0c      	ldr	r3, [pc, #48]	@ (8013044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013012:	691b      	ldr	r3, [r3, #16]
 8013014:	b29b      	uxth	r3, r3
 8013016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801301a:	b29b      	uxth	r3, r3
 801301c:	3b01      	subs	r3, #1
 801301e:	b29a      	uxth	r2, r3
 8013020:	4b0a      	ldr	r3, [pc, #40]	@ (801304c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8013022:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8013024:	4b08      	ldr	r3, [pc, #32]	@ (8013048 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8013026:	881a      	ldrh	r2, [r3, #0]
 8013028:	4b06      	ldr	r3, [pc, #24]	@ (8013044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801302a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 801302c:	4b05      	ldr	r3, [pc, #20]	@ (8013044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801302e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013030:	4a04      	ldr	r2, [pc, #16]	@ (8013044 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8013032:	f043 0301 	orr.w	r3, r3, #1
 8013036:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8013038:	bf00      	nop
 801303a:	370c      	adds	r7, #12
 801303c:	46bd      	mov	sp, r7
 801303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013042:	4770      	bx	lr
 8013044:	50001000 	.word	0x50001000
 8013048:	2401bb28 	.word	0x2401bb28
 801304c:	2401bb2a 	.word	0x2401bb2a

08013050 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b082      	sub	sp, #8
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	4618      	mov	r0, r3
 801305c:	f001 ff2a 	bl	8014eb4 <_ZN8touchgfx3HAL10beginFrameEv>
 8013060:	4603      	mov	r3, r0
}
 8013062:	4618      	mov	r0, r3
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b082      	sub	sp, #8
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	4618      	mov	r0, r3
 8013076:	f001 ff29 	bl	8014ecc <_ZN8touchgfx3HAL8endFrameEv>
}
 801307a:	bf00      	nop
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
	...

08013084 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 801308c:	4b03      	ldr	r3, [pc, #12]	@ (801309c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8013090:	4618      	mov	r0, r3
 8013092:	370c      	adds	r7, #12
 8013094:	46bd      	mov	sp, r7
 8013096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309a:	4770      	bx	lr
 801309c:	50001084 	.word	0x50001084

080130a0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80130a0:	b480      	push	{r7}
 80130a2:	b083      	sub	sp, #12
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80130aa:	4a06      	ldr	r2, [pc, #24]	@ (80130c4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80130b0:	4b05      	ldr	r3, [pc, #20]	@ (80130c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80130b2:	2201      	movs	r2, #1
 80130b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80130b6:	bf00      	nop
 80130b8:	370c      	adds	r7, #12
 80130ba:	46bd      	mov	sp, r7
 80130bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop
 80130c4:	50001084 	.word	0x50001084
 80130c8:	50001000 	.word	0x50001000

080130cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6839      	ldr	r1, [r7, #0]
 80130da:	4618      	mov	r0, r3
 80130dc:	f001 feb4 	bl	8014e48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80130e0:	bf00      	nop
 80130e2:	3708      	adds	r7, #8
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}

080130e8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b084      	sub	sp, #16
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	607a      	str	r2, [r7, #4]
 80130f4:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80130f6:	68f8      	ldr	r0, [r7, #12]
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	68b9      	ldr	r1, [r7, #8]
 80130fe:	f002 f814 	bl	801512a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8013102:	4603      	mov	r3, r0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}

0801310c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 801310c:	b480      	push	{r7}
 801310e:	b085      	sub	sp, #20
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8013114:	4b0d      	ldr	r3, [pc, #52]	@ (801314c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8013116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013118:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 801311a:	4b0c      	ldr	r3, [pc, #48]	@ (801314c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	b29b      	uxth	r3, r3
 8013120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013124:	b29b      	uxth	r3, r3
 8013126:	3301      	adds	r3, #1
 8013128:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 801312a:	89fa      	ldrh	r2, [r7, #14]
 801312c:	89bb      	ldrh	r3, [r7, #12]
 801312e:	429a      	cmp	r2, r3
 8013130:	d304      	bcc.n	801313c <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 8013132:	89fa      	ldrh	r2, [r7, #14]
 8013134:	89bb      	ldrh	r3, [r7, #12]
 8013136:	1ad3      	subs	r3, r2, r3
 8013138:	b29b      	uxth	r3, r3
 801313a:	e000      	b.n	801313e <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 801313c:	2300      	movs	r3, #0
}
 801313e:	4618      	mov	r0, r3
 8013140:	3714      	adds	r7, #20
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	50001000 	.word	0x50001000

08013150 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8013150:	b480      	push	{r7}
 8013152:	b087      	sub	sp, #28
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8013158:	4b25      	ldr	r3, [pc, #148]	@ (80131f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 801315a:	695b      	ldr	r3, [r3, #20]
 801315c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013160:	2b00      	cmp	r3, #0
 8013162:	bf14      	ite	ne
 8013164:	2301      	movne	r3, #1
 8013166:	2300      	moveq	r3, #0
 8013168:	b2db      	uxtb	r3, r3
 801316a:	2b00      	cmp	r3, #0
 801316c:	d03a      	beq.n	80131e4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801316e:	4b20      	ldr	r3, [pc, #128]	@ (80131f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8013170:	2200      	movs	r2, #0
 8013172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013176:	f3bf 8f4f 	dsb	sy
}
 801317a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 801317c:	4b1c      	ldr	r3, [pc, #112]	@ (80131f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 801317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013182:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	0b5b      	lsrs	r3, r3, #13
 8013188:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801318c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	08db      	lsrs	r3, r3, #3
 8013192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013196:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	015a      	lsls	r2, r3, #5
 801319c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80131a0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80131a2:	68fa      	ldr	r2, [r7, #12]
 80131a4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80131a6:	4912      	ldr	r1, [pc, #72]	@ (80131f0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 80131a8:	4313      	orrs	r3, r2
 80131aa:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	1e5a      	subs	r2, r3, #1
 80131b2:	60fa      	str	r2, [r7, #12]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	bf14      	ite	ne
 80131b8:	2301      	movne	r3, #1
 80131ba:	2300      	moveq	r3, #0
 80131bc:	b2db      	uxtb	r3, r3
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1ea      	bne.n	8013198 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	1e5a      	subs	r2, r3, #1
 80131c6:	613a      	str	r2, [r7, #16]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	bf14      	ite	ne
 80131cc:	2301      	movne	r3, #1
 80131ce:	2300      	moveq	r3, #0
 80131d0:	b2db      	uxtb	r3, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d1db      	bne.n	801318e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 80131d6:	f3bf 8f4f 	dsb	sy
}
 80131da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80131dc:	f3bf 8f6f 	isb	sy
}
 80131e0:	bf00      	nop
}
 80131e2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80131e4:	bf00      	nop
 80131e6:	371c      	adds	r7, #28
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr
 80131f0:	e000ed00 	.word	0xe000ed00

080131f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80131f4:	b480      	push	{r7}
 80131f6:	b087      	sub	sp, #28
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80131fc:	4b25      	ldr	r3, [pc, #148]	@ (8013294 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 80131fe:	695b      	ldr	r3, [r3, #20]
 8013200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013204:	2b00      	cmp	r3, #0
 8013206:	bf14      	ite	ne
 8013208:	2301      	movne	r3, #1
 801320a:	2300      	moveq	r3, #0
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d03a      	beq.n	8013288 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8013212:	4b20      	ldr	r3, [pc, #128]	@ (8013294 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8013214:	2200      	movs	r2, #0
 8013216:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801321a:	f3bf 8f4f 	dsb	sy
}
 801321e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8013220:	4b1c      	ldr	r3, [pc, #112]	@ (8013294 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8013222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013226:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	0b5b      	lsrs	r3, r3, #13
 801322c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013230:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	08db      	lsrs	r3, r3, #3
 8013236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801323a:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	015a      	lsls	r2, r3, #5
 8013240:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8013244:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801324a:	4912      	ldr	r1, [pc, #72]	@ (8013294 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 801324c:	4313      	orrs	r3, r2
 801324e:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	1e5a      	subs	r2, r3, #1
 8013256:	60fa      	str	r2, [r7, #12]
 8013258:	2b00      	cmp	r3, #0
 801325a:	bf14      	ite	ne
 801325c:	2301      	movne	r3, #1
 801325e:	2300      	moveq	r3, #0
 8013260:	b2db      	uxtb	r3, r3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d1ea      	bne.n	801323c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	1e5a      	subs	r2, r3, #1
 801326a:	613a      	str	r2, [r7, #16]
 801326c:	2b00      	cmp	r3, #0
 801326e:	bf14      	ite	ne
 8013270:	2301      	movne	r3, #1
 8013272:	2300      	moveq	r3, #0
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2b00      	cmp	r3, #0
 8013278:	d1db      	bne.n	8013232 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 801327a:	f3bf 8f4f 	dsb	sy
}
 801327e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013280:	f3bf 8f6f 	isb	sy
}
 8013284:	bf00      	nop
}
 8013286:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8013288:	bf00      	nop
 801328a:	371c      	adds	r7, #28
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr
 8013294:	e000ed00 	.word	0xe000ed00

08013298 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80132a0:	f7fa ff70 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	bf0c      	ite	eq
 80132aa:	2301      	moveq	r3, #1
 80132ac:	2300      	movne	r3, #0
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d132      	bne.n	801331a <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80132b4:	4b1b      	ldr	r3, [pc, #108]	@ (8013324 <HAL_LTDC_LineEventCallback+0x8c>)
 80132b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80132b8:	4a1b      	ldr	r2, [pc, #108]	@ (8013328 <HAL_LTDC_LineEventCallback+0x90>)
 80132ba:	8812      	ldrh	r2, [r2, #0]
 80132bc:	4293      	cmp	r3, r2
 80132be:	bf0c      	ite	eq
 80132c0:	2301      	moveq	r3, #1
 80132c2:	2300      	movne	r3, #0
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d017      	beq.n	80132fa <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80132ca:	4b18      	ldr	r3, [pc, #96]	@ (801332c <HAL_LTDC_LineEventCallback+0x94>)
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	4619      	mov	r1, r3
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7f2 fe13 	bl	8005efc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80132d6:	f7fa ff55 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 80132da:	4603      	mov	r3, r0
 80132dc:	4618      	mov	r0, r3
 80132de:	f7ff fd62 	bl	8012da6 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80132e2:	f7fe fc41 	bl	8011b68 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80132e6:	f7fa ff4d 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 80132ea:	4603      	mov	r3, r0
 80132ec:	4618      	mov	r0, r3
 80132ee:	f002 fb47 	bl	8015980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80132f2:	2000      	movs	r0, #0
 80132f4:	f7fe f88a 	bl	801140c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80132f8:	e010      	b.n	801331c <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80132fa:	4b0b      	ldr	r3, [pc, #44]	@ (8013328 <HAL_LTDC_LineEventCallback+0x90>)
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	4619      	mov	r1, r3
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7f2 fdfb 	bl	8005efc <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8013306:	f7fa ff3d 	bl	800e184 <_ZN8touchgfx3HAL11getInstanceEv>
 801330a:	4603      	mov	r3, r0
 801330c:	4618      	mov	r0, r3
 801330e:	f7ff fd3c 	bl	8012d8a <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8013312:	2000      	movs	r0, #0
 8013314:	f7fe f8b2 	bl	801147c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8013318:	e000      	b.n	801331c <HAL_LTDC_LineEventCallback+0x84>
            return;
 801331a:	bf00      	nop
        }
    }
 801331c:	3708      	adds	r7, #8
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	50001000 	.word	0x50001000
 8013328:	2401bb28 	.word	0x2401bb28
 801332c:	2401bb2a 	.word	0x2401bb2a

08013330 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8013330:	8880      	ldrh	r0, [r0, #4]
 8013332:	4770      	bx	lr

08013334 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	6803      	ldr	r3, [r0, #0]
 8013338:	460c      	mov	r4, r1
 801333a:	2100      	movs	r1, #0
 801333c:	4605      	mov	r5, r0
 801333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013340:	4798      	blx	r3
 8013342:	4606      	mov	r6, r0
 8013344:	682b      	ldr	r3, [r5, #0]
 8013346:	4628      	mov	r0, r5
 8013348:	1ba4      	subs	r4, r4, r6
 801334a:	6a1b      	ldr	r3, [r3, #32]
 801334c:	b2a4      	uxth	r4, r4
 801334e:	4798      	blx	r3
 8013350:	fbb4 f0f0 	udiv	r0, r4, r0
 8013354:	bd70      	pop	{r4, r5, r6, pc}

08013356 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8013356:	2300      	movs	r3, #0
 8013358:	8083      	strh	r3, [r0, #4]
 801335a:	4770      	bx	lr

0801335c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801335c:	b510      	push	{r4, lr}
 801335e:	6803      	ldr	r3, [r0, #0]
 8013360:	4604      	mov	r4, r0
 8013362:	8881      	ldrh	r1, [r0, #4]
 8013364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013366:	4798      	blx	r3
 8013368:	88a3      	ldrh	r3, [r4, #4]
 801336a:	3301      	adds	r3, #1
 801336c:	80a3      	strh	r3, [r4, #4]
 801336e:	bd10      	pop	{r4, pc}

08013370 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8013370:	6803      	ldr	r3, [r0, #0]
 8013372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013374:	4718      	bx	r3

08013376 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8013376:	4770      	bx	lr

08013378 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8013378:	4a02      	ldr	r2, [pc, #8]	@ (8013384 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801337a:	6002      	str	r2, [r0, #0]
 801337c:	2200      	movs	r2, #0
 801337e:	8082      	strh	r2, [r0, #4]
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	080279ac 	.word	0x080279ac

08013388 <_ZNK8touchgfx12DrawableList13getHorizontalEv>:
 8013388:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 801338c:	4770      	bx	lr

0801338e <_ZNK8touchgfx12DrawableList11getCircularEv>:
 801338e:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8013392:	4770      	bx	lr

08013394 <_ZNK8touchgfx12DrawableList11getItemSizeEv>:
 8013394:	f9b0 0034 	ldrsh.w	r0, [r0, #52]	@ 0x34
 8013398:	4770      	bx	lr

0801339a <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>:
 801339a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801339c:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 801339e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 80133a2:	b200      	sxth	r0, r0
 80133a4:	4770      	bx	lr

080133a6 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>:
 80133a6:	f9b0 0036 	ldrsh.w	r0, [r0, #54]	@ 0x36
 80133aa:	4770      	bx	lr

080133ac <_ZN8touchgfx12DrawableListC1Ev>:
 80133ac:	2101      	movs	r1, #1
 80133ae:	2200      	movs	r2, #0
 80133b0:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80133b4:	4910      	ldr	r1, [pc, #64]	@ (80133f8 <_ZN8touchgfx12DrawableListC1Ev+0x4c>)
 80133b6:	8082      	strh	r2, [r0, #4]
 80133b8:	80c2      	strh	r2, [r0, #6]
 80133ba:	8102      	strh	r2, [r0, #8]
 80133bc:	8142      	strh	r2, [r0, #10]
 80133be:	8182      	strh	r2, [r0, #12]
 80133c0:	81c2      	strh	r2, [r0, #14]
 80133c2:	8202      	strh	r2, [r0, #16]
 80133c4:	8242      	strh	r2, [r0, #18]
 80133c6:	61c2      	str	r2, [r0, #28]
 80133c8:	8402      	strh	r2, [r0, #32]
 80133ca:	8442      	strh	r2, [r0, #34]	@ 0x22
 80133cc:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80133d0:	6282      	str	r2, [r0, #40]	@ 0x28
 80133d2:	6001      	str	r1, [r0, #0]
 80133d4:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 80133d8:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
 80133dc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
 80133e0:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80133e4:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80133e8:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 80133ec:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80133f0:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop
 80133f8:	080279e0 	.word	0x080279e0

080133fc <_ZN8touchgfx12DrawableList15setDrawableSizeEss>:
 80133fc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8013400:	86c2      	strh	r2, [r0, #54]	@ 0x36
 8013402:	8681      	strh	r1, [r0, #52]	@ 0x34
 8013404:	4770      	bx	lr

08013406 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>:
 8013406:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 801340a:	4770      	bx	lr

0801340c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>:
 801340c:	b538      	push	{r3, r4, r5, lr}
 801340e:	4605      	mov	r5, r0
 8013410:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8013412:	b308      	cbz	r0, 8013458 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>
 8013414:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	@ 0x34
 8013418:	2a00      	cmp	r2, #0
 801341a:	dd21      	ble.n	8013460 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x54>
 801341c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013420:	b1db      	cbz	r3, 801345a <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4e>
 8013422:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8013426:	1e63      	subs	r3, r4, #1
 8013428:	1e54      	subs	r4, r2, #1
 801342a:	441c      	add	r4, r3
 801342c:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8013430:	fb94 f4f2 	sdiv	r4, r4, r2
 8013434:	3401      	adds	r4, #1
 8013436:	b224      	sxth	r4, r4
 8013438:	b923      	cbnz	r3, 8013444 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x38>
 801343a:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	@ 0x38
 801343e:	429c      	cmp	r4, r3
 8013440:	bfa8      	it	ge
 8013442:	461c      	movge	r4, r3
 8013444:	6803      	ldr	r3, [r0, #0]
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	4798      	blx	r3
 801344a:	f9b5 3042 	ldrsh.w	r3, [r5, #66]	@ 0x42
 801344e:	1ac0      	subs	r0, r0, r3
 8013450:	42a0      	cmp	r0, r4
 8013452:	bfa8      	it	ge
 8013454:	4620      	movge	r0, r4
 8013456:	b200      	sxth	r0, r0
 8013458:	bd38      	pop	{r3, r4, r5, pc}
 801345a:	f9b5 400a 	ldrsh.w	r4, [r5, #10]
 801345e:	e7e2      	b.n	8013426 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x1a>
 8013460:	2000      	movs	r0, #0
 8013462:	e7f9      	b.n	8013458 <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv+0x4c>

08013464 <_ZN8touchgfx12DrawableList9setOffsetEl>:
 8013464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013468:	4604      	mov	r4, r0
 801346a:	460d      	mov	r5, r1
 801346c:	6321      	str	r1, [r4, #48]	@ 0x30
 801346e:	f9b0 303a 	ldrsh.w	r3, [r0, #58]	@ 0x3a
 8013472:	2b00      	cmp	r3, #0
 8013474:	f000 80e9 	beq.w	801364a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 8013478:	f9b0 3038 	ldrsh.w	r3, [r0, #56]	@ 0x38
 801347c:	2b00      	cmp	r3, #0
 801347e:	f000 80e4 	beq.w	801364a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 8013482:	f9b0 3034 	ldrsh.w	r3, [r0, #52]	@ 0x34
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 80df 	beq.w	801364a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 801348c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801348e:	2800      	cmp	r0, #0
 8013490:	f000 80db 	beq.w	801364a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 8013494:	6803      	ldr	r3, [r0, #0]
 8013496:	68db      	ldr	r3, [r3, #12]
 8013498:	4798      	blx	r3
 801349a:	2800      	cmp	r0, #0
 801349c:	f000 80d5 	beq.w	801364a <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e6>
 80134a0:	2d00      	cmp	r5, #0
 80134a2:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80134a6:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 80134aa:	bfd8      	it	le
 80134ac:	2300      	movle	r3, #0
 80134ae:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	@ 0x3a
 80134b2:	bfc1      	itttt	gt
 80134b4:	fb95 f2f1 	sdivgt	r2, r5, r1
 80134b8:	3201      	addgt	r2, #1
 80134ba:	4253      	neggt	r3, r2
 80134bc:	fb01 5512 	mlsgt	r5, r1, r2, r5
 80134c0:	f1c1 0200 	rsb	r2, r1, #0
 80134c4:	bfc8      	it	gt
 80134c6:	b21b      	sxthgt	r3, r3
 80134c8:	42aa      	cmp	r2, r5
 80134ca:	bfa1      	itttt	ge
 80134cc:	fb95 f2f1 	sdivge	r2, r5, r1
 80134d0:	1a9b      	subge	r3, r3, r2
 80134d2:	fb01 5512 	mlsge	r5, r1, r2, r5
 80134d6:	b21b      	sxthge	r3, r3
 80134d8:	b14f      	cbz	r7, 80134ee <_ZN8touchgfx12DrawableList9setOffsetEl+0x8a>
 80134da:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	@ 0x38
 80134de:	fb93 f1f2 	sdiv	r1, r3, r2
 80134e2:	fb02 3311 	mls	r3, r2, r1, r3
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	db70      	blt.n	80135cc <_ZN8touchgfx12DrawableList9setOffsetEl+0x168>
 80134ea:	b21b      	sxth	r3, r3
 80134ec:	e004      	b.n	80134f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x94>
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	da64      	bge.n	80135bc <_ZN8touchgfx12DrawableList9setOffsetEl+0x158>
 80134f2:	fb01 5513 	mls	r5, r1, r3, r5
 80134f6:	463b      	mov	r3, r7
 80134f8:	f894 6040 	ldrb.w	r6, [r4, #64]	@ 0x40
 80134fc:	b1be      	cbz	r6, 801352e <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 80134fe:	f9b4 e03c 	ldrsh.w	lr, [r4, #60]	@ 0x3c
 8013502:	459e      	cmp	lr, r3
 8013504:	d068      	beq.n	80135d8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x174>
 8013506:	2601      	movs	r6, #1
 8013508:	4286      	cmp	r6, r0
 801350a:	da67      	bge.n	80135dc <_ZN8touchgfx12DrawableList9setOffsetEl+0x178>
 801350c:	eb0e 0106 	add.w	r1, lr, r6
 8013510:	199a      	adds	r2, r3, r6
 8013512:	b14f      	cbz	r7, 8013528 <_ZN8touchgfx12DrawableList9setOffsetEl+0xc4>
 8013514:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	@ 0x38
 8013518:	fb91 f8fc 	sdiv	r8, r1, ip
 801351c:	fb0c 1118 	mls	r1, ip, r8, r1
 8013520:	fb92 f8fc 	sdiv	r8, r2, ip
 8013524:	fb0c 2218 	mls	r2, ip, r8, r2
 8013528:	428b      	cmp	r3, r1
 801352a:	d151      	bne.n	80135d0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x16c>
 801352c:	4276      	negs	r6, r6
 801352e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	@ 0x3e
 8013532:	2700      	movs	r7, #0
 8013534:	b2ad      	uxth	r5, r5
 8013536:	f04f 0b01 	mov.w	fp, #1
 801353a:	1b92      	subs	r2, r2, r6
 801353c:	46ba      	mov	sl, r7
 801353e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
 8013540:	4402      	add	r2, r0
 8013542:	fb92 f1f0 	sdiv	r1, r2, r0
 8013546:	fb00 2011 	mls	r0, r0, r1, r2
 801354a:	87e0      	strh	r0, [r4, #62]	@ 0x3e
 801354c:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 8013550:	42ba      	cmp	r2, r7
 8013552:	dd77      	ble.n	8013644 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1e0>
 8013554:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8013558:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801355a:	443b      	add	r3, r7
 801355c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 8013560:	fb93 f8f2 	sdiv	r8, r3, r2
 8013564:	fb02 3818 	mls	r8, r2, r8, r3
 8013568:	6803      	ldr	r3, [r0, #0]
 801356a:	fa1f f888 	uxth.w	r8, r8
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	4441      	add	r1, r8
 8013572:	b209      	sxth	r1, r1
 8013574:	4798      	blx	r3
 8013576:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801357a:	4681      	mov	r9, r0
 801357c:	fa1f fe87 	uxth.w	lr, r7
 8013580:	f8b4 c034 	ldrh.w	ip, [r4, #52]	@ 0x34
 8013584:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013586:	6802      	ldr	r2, [r0, #0]
 8013588:	b351      	cbz	r1, 80135e0 <_ZN8touchgfx12DrawableList9setOffsetEl+0x17c>
 801358a:	18e9      	adds	r1, r5, r3
 801358c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 801358e:	2200      	movs	r2, #0
 8013590:	fb1c 110e 	smlabb	r1, ip, lr, r1
 8013594:	b209      	sxth	r1, r1
 8013596:	4798      	blx	r3
 8013598:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	@ 0x3c
 801359c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80135a0:	443b      	add	r3, r7
 80135a2:	b322      	cbz	r2, 80135ee <_ZN8touchgfx12DrawableList9setOffsetEl+0x18a>
 80135a4:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	@ 0x38
 80135a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80135ac:	fb02 3311 	mls	r3, r2, r1, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	da22      	bge.n	80135fa <_ZN8touchgfx12DrawableList9setOffsetEl+0x196>
 80135b4:	f889 a025 	strb.w	sl, [r9, #37]	@ 0x25
 80135b8:	3701      	adds	r7, #1
 80135ba:	e7c7      	b.n	801354c <_ZN8touchgfx12DrawableList9setOffsetEl+0xe8>
 80135bc:	18c6      	adds	r6, r0, r3
 80135be:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	@ 0x38
 80135c2:	4296      	cmp	r6, r2
 80135c4:	dd98      	ble.n	80134f8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x94>
 80135c6:	1b92      	subs	r2, r2, r6
 80135c8:	fb01 5502 	mla	r5, r1, r2, r5
 80135cc:	4413      	add	r3, r2
 80135ce:	e78c      	b.n	80134ea <_ZN8touchgfx12DrawableList9setOffsetEl+0x86>
 80135d0:	4596      	cmp	lr, r2
 80135d2:	d0ac      	beq.n	801352e <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 80135d4:	3601      	adds	r6, #1
 80135d6:	e797      	b.n	8013508 <_ZN8touchgfx12DrawableList9setOffsetEl+0xa4>
 80135d8:	2600      	movs	r6, #0
 80135da:	e7a8      	b.n	801352e <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 80135dc:	4606      	mov	r6, r0
 80135de:	e7a6      	b.n	801352e <_ZN8touchgfx12DrawableList9setOffsetEl+0xca>
 80135e0:	442b      	add	r3, r5
 80135e2:	fb1c 3c0e 	smlabb	ip, ip, lr, r3
 80135e6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80135e8:	fa0f f28c 	sxth.w	r2, ip
 80135ec:	e7d3      	b.n	8013596 <_ZN8touchgfx12DrawableList9setOffsetEl+0x132>
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	dbe0      	blt.n	80135b4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x150>
 80135f2:	f9b4 2038 	ldrsh.w	r2, [r4, #56]	@ 0x38
 80135f6:	4293      	cmp	r3, r2
 80135f8:	dadc      	bge.n	80135b4 <_ZN8touchgfx12DrawableList9setOffsetEl+0x150>
 80135fa:	f889 b025 	strb.w	fp, [r9, #37]	@ 0x25
 80135fe:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
 8013602:	b132      	cbz	r2, 8013612 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ae>
 8013604:	42be      	cmp	r6, r7
 8013606:	dc04      	bgt.n	8013612 <_ZN8touchgfx12DrawableList9setOffsetEl+0x1ae>
 8013608:	f9b4 203a 	ldrsh.w	r2, [r4, #58]	@ 0x3a
 801360c:	4432      	add	r2, r6
 801360e:	4297      	cmp	r7, r2
 8013610:	dbd2      	blt.n	80135b8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x154>
 8013612:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8013614:	9301      	str	r3, [sp, #4]
 8013616:	6802      	ldr	r2, [r0, #0]
 8013618:	68d2      	ldr	r2, [r2, #12]
 801361a:	4790      	blx	r2
 801361c:	2800      	cmp	r0, #0
 801361e:	d0cb      	beq.n	80135b8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x154>
 8013620:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8013622:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 8013626:	6801      	ldr	r1, [r0, #0]
 8013628:	9b01      	ldr	r3, [sp, #4]
 801362a:	4442      	add	r2, r8
 801362c:	f8d1 8008 	ldr.w	r8, [r1, #8]
 8013630:	b21b      	sxth	r3, r3
 8013632:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013634:	b212      	sxth	r2, r2
 8013636:	47c0      	blx	r8
 8013638:	f8d9 3000 	ldr.w	r3, [r9]
 801363c:	4648      	mov	r0, r9
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	4798      	blx	r3
 8013642:	e7b9      	b.n	80135b8 <_ZN8touchgfx12DrawableList9setOffsetEl+0x154>
 8013644:	2301      	movs	r3, #1
 8013646:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801364a:	b003      	add	sp, #12
 801364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013650 <_ZNK8touchgfx12DrawableList9getOffsetEv>:
 8013650:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013652:	4770      	bx	lr

08013654 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>:
 8013654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013656:	1c54      	adds	r4, r2, #1
 8013658:	db2f      	blt.n	80136ba <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 801365a:	f9b0 403a 	ldrsh.w	r4, [r0, #58]	@ 0x3a
 801365e:	4294      	cmp	r4, r2
 8013660:	dd2b      	ble.n	80136ba <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013662:	b354      	cbz	r4, 80136ba <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013664:	f9b0 6038 	ldrsh.w	r6, [r0, #56]	@ 0x38
 8013668:	b33e      	cbz	r6, 80136ba <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 801366a:	1c53      	adds	r3, r2, #1
 801366c:	d008      	beq.n	8013680 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2c>
 801366e:	f9b0 303e 	ldrsh.w	r3, [r0, #62]	@ 0x3e
 8013672:	1ad2      	subs	r2, r2, r3
 8013674:	4422      	add	r2, r4
 8013676:	fb92 f3f4 	sdiv	r3, r2, r4
 801367a:	fb04 2213 	mls	r2, r4, r3, r2
 801367e:	b212      	sxth	r2, r2
 8013680:	3201      	adds	r2, #1
 8013682:	b212      	sxth	r2, r2
 8013684:	4294      	cmp	r4, r2
 8013686:	dd18      	ble.n	80136ba <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x66>
 8013688:	b295      	uxth	r5, r2
 801368a:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 801368c:	f890 702d 	ldrb.w	r7, [r0, #45]	@ 0x2d
 8013690:	442b      	add	r3, r5
 8013692:	b21b      	sxth	r3, r3
 8013694:	b127      	cbz	r7, 80136a0 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x4c>
 8013696:	fb93 f7f6 	sdiv	r7, r3, r6
 801369a:	fb06 3317 	mls	r3, r6, r7, r3
 801369e:	b21b      	sxth	r3, r3
 80136a0:	428b      	cmp	r3, r1
 80136a2:	d108      	bne.n	80136b6 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x62>
 80136a4:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	@ 0x3e
 80136a8:	4402      	add	r2, r0
 80136aa:	fb92 f0f4 	sdiv	r0, r2, r4
 80136ae:	fb04 2010 	mls	r0, r4, r0, r2
 80136b2:	b200      	sxth	r0, r0
 80136b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b6:	1c6a      	adds	r2, r5, #1
 80136b8:	e7e3      	b.n	8013682 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x2e>
 80136ba:	f04f 30ff 	mov.w	r0, #4294967295
 80136be:	e7f9      	b.n	80136b4 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss+0x60>

080136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>:
 80136c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80136c6:	4604      	mov	r4, r0
 80136c8:	b913      	cbnz	r3, 80136d0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x10>
 80136ca:	8743      	strh	r3, [r0, #58]	@ 0x3a
 80136cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136d0:	f7ff fe9c 	bl	801340c <_ZNK8touchgfx12DrawableList28getRequiredNumberOfDrawablesEv>
 80136d4:	8760      	strh	r0, [r4, #58]	@ 0x3a
 80136d6:	4620      	mov	r0, r4
 80136d8:	f000 fc8f 	bl	8013ffa <_ZN8touchgfx9Container9removeAllEv>
 80136dc:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80136e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80136e2:	8ea6      	ldrh	r6, [r4, #52]	@ 0x34
 80136e4:	2a00      	cmp	r2, #0
 80136e6:	d032      	beq.n	801374e <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x8e>
 80136e8:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 80136ec:	fa0f f886 	sxth.w	r8, r6
 80136f0:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80136f4:	2700      	movs	r7, #0
 80136f6:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	@ 0x3a
 80136fa:	42bb      	cmp	r3, r7
 80136fc:	dd2d      	ble.n	801375a <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x9a>
 80136fe:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8013700:	f8b4 1042 	ldrh.w	r1, [r4, #66]	@ 0x42
 8013704:	6803      	ldr	r3, [r0, #0]
 8013706:	4439      	add	r1, r7
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	b209      	sxth	r1, r1
 801370c:	4798      	blx	r3
 801370e:	6803      	ldr	r3, [r0, #0]
 8013710:	4605      	mov	r5, r0
 8013712:	2100      	movs	r1, #0
 8013714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013716:	4798      	blx	r3
 8013718:	682b      	ldr	r3, [r5, #0]
 801371a:	2100      	movs	r1, #0
 801371c:	4628      	mov	r0, r5
 801371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013720:	4798      	blx	r3
 8013722:	682b      	ldr	r3, [r5, #0]
 8013724:	4641      	mov	r1, r8
 8013726:	4628      	mov	r0, r5
 8013728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801372a:	4798      	blx	r3
 801372c:	682b      	ldr	r3, [r5, #0]
 801372e:	4628      	mov	r0, r5
 8013730:	4631      	mov	r1, r6
 8013732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013734:	4798      	blx	r3
 8013736:	6968      	ldr	r0, [r5, #20]
 8013738:	b118      	cbz	r0, 8013742 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x82>
 801373a:	6803      	ldr	r3, [r0, #0]
 801373c:	4629      	mov	r1, r5
 801373e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013740:	4798      	blx	r3
 8013742:	4629      	mov	r1, r5
 8013744:	4620      	mov	r0, r4
 8013746:	f000 fc4b 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801374a:	3701      	adds	r7, #1
 801374c:	e7d3      	b.n	80136f6 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x36>
 801374e:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 8013752:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8013756:	b236      	sxth	r6, r6
 8013758:	e7cc      	b.n	80136f4 <_ZN8touchgfx12DrawableList16refreshDrawablesEv+0x34>
 801375a:	2300      	movs	r3, #0
 801375c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801375e:	4620      	mov	r0, r4
 8013760:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8013764:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801376a:	f7ff be7b 	b.w	8013464 <_ZN8touchgfx12DrawableList9setOffsetEl>

0801376e <_ZN8touchgfx12DrawableList8setWidthEs>:
 801376e:	8101      	strh	r1, [r0, #8]
 8013770:	f7ff bfa6 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

08013774 <_ZN8touchgfx12DrawableList9setHeightEs>:
 8013774:	8141      	strh	r1, [r0, #10]
 8013776:	f7ff bfa3 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

0801377a <_ZN8touchgfx12DrawableList13setHorizontalEb>:
 801377a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801377e:	b121      	cbz	r1, 801378a <_ZN8touchgfx12DrawableList13setHorizontalEb+0x10>
 8013780:	b92b      	cbnz	r3, 801378e <_ZN8touchgfx12DrawableList13setHorizontalEb+0x14>
 8013782:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8013786:	f7ff bf9b 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 801378a:	2b00      	cmp	r3, #0
 801378c:	d1f9      	bne.n	8013782 <_ZN8touchgfx12DrawableList13setHorizontalEb+0x8>
 801378e:	4770      	bx	lr

08013790 <_ZN8touchgfx12DrawableList11setCircularEb>:
 8013790:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8013794:	b121      	cbz	r1, 80137a0 <_ZN8touchgfx12DrawableList11setCircularEb+0x10>
 8013796:	b92b      	cbnz	r3, 80137a4 <_ZN8touchgfx12DrawableList11setCircularEb+0x14>
 8013798:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
 801379c:	f7ff bf90 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d1f9      	bne.n	8013798 <_ZN8touchgfx12DrawableList11setCircularEb+0x8>
 80137a4:	4770      	bx	lr

080137a6 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>:
 80137a6:	b410      	push	{r4}
 80137a8:	6441      	str	r1, [r0, #68]	@ 0x44
 80137aa:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 80137ae:	6483      	str	r3, [r0, #72]	@ 0x48
 80137b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137b4:	f7ff bf84 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

080137b8 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>:
 80137b8:	8701      	strh	r1, [r0, #56]	@ 0x38
 80137ba:	f7ff bf81 	b.w	80136c0 <_ZN8touchgfx12DrawableList16refreshDrawablesEv>

080137be <_ZN8touchgfx12DrawableList11itemChangedEs>:
 80137be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137c0:	4604      	mov	r4, r0
 80137c2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80137c4:	460e      	mov	r6, r1
 80137c6:	b1c0      	cbz	r0, 80137fa <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 80137c8:	6803      	ldr	r3, [r0, #0]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	4798      	blx	r3
 80137ce:	b1a0      	cbz	r0, 80137fa <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 80137d0:	f04f 35ff 	mov.w	r5, #4294967295
 80137d4:	462a      	mov	r2, r5
 80137d6:	4631      	mov	r1, r6
 80137d8:	4620      	mov	r0, r4
 80137da:	f7ff ff3b 	bl	8013654 <_ZNK8touchgfx12DrawableList16getDrawableIndexEss>
 80137de:	1c43      	adds	r3, r0, #1
 80137e0:	4605      	mov	r5, r0
 80137e2:	d00a      	beq.n	80137fa <_ZN8touchgfx12DrawableList11itemChangedEs+0x3c>
 80137e4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80137e6:	f8b4 2042 	ldrh.w	r2, [r4, #66]	@ 0x42
 80137ea:	6803      	ldr	r3, [r0, #0]
 80137ec:	442a      	add	r2, r5
 80137ee:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80137f0:	689f      	ldr	r7, [r3, #8]
 80137f2:	4633      	mov	r3, r6
 80137f4:	b212      	sxth	r2, r2
 80137f6:	47b8      	blx	r7
 80137f8:	e7ec      	b.n	80137d4 <_ZN8touchgfx12DrawableList11itemChangedEs+0x16>
 80137fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080137fc <_ZN8touchgfx15ScrollWheelBase21setSelectedItemOffsetEs>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	6803      	ldr	r3, [r0, #0]
 8013800:	4604      	mov	r4, r0
 8013802:	460d      	mov	r5, r1
 8013804:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013808:	4798      	blx	r3
 801380a:	6823      	ldr	r3, [r4, #0]
 801380c:	f8a4 507a 	strh.w	r5, [r4, #122]	@ 0x7a
 8013810:	4601      	mov	r1, r0
 8013812:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013816:	4620      	mov	r0, r4
 8013818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801381c:	4718      	bx	r3

0801381e <_ZNK8touchgfx15ScrollWheelBase21getSelectedItemOffsetEv>:
 801381e:	f9b0 007a 	ldrsh.w	r0, [r0, #122]	@ 0x7a
 8013822:	4770      	bx	lr

08013824 <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs>:
 8013824:	b570      	push	{r4, r5, r6, lr}
 8013826:	6803      	ldr	r3, [r0, #0]
 8013828:	4249      	negs	r1, r1
 801382a:	f9b0 407c 	ldrsh.w	r4, [r0, #124]	@ 0x7c
 801382e:	4605      	mov	r5, r0
 8013830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013834:	434c      	muls	r4, r1
 8013836:	4798      	blx	r3
 8013838:	b1c0      	cbz	r0, 801386c <_ZN8touchgfx15ScrollWheelBase18getPositionForItemEs+0x48>
 801383a:	682b      	ldr	r3, [r5, #0]
 801383c:	4628      	mov	r0, r5
 801383e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013842:	4798      	blx	r3
 8013844:	f8b5 607c 	ldrh.w	r6, [r5, #124]	@ 0x7c
 8013848:	682b      	ldr	r3, [r5, #0]
 801384a:	fb10 4606 	smlabb	r6, r0, r6, r4
 801384e:	4628      	mov	r0, r5
 8013850:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013854:	4798      	blx	r3
 8013856:	1a33      	subs	r3, r6, r0
 8013858:	1a20      	subs	r0, r4, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	bfb8      	it	lt
 801385e:	425b      	neglt	r3, r3
 8013860:	2800      	cmp	r0, #0
 8013862:	bfb8      	it	lt
 8013864:	4240      	neglt	r0, r0
 8013866:	4283      	cmp	r3, r0
 8013868:	bfb8      	it	lt
 801386a:	4634      	movlt	r4, r6
 801386c:	4620      	mov	r0, r4
 801386e:	bd70      	pop	{r4, r5, r6, pc}

08013870 <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls>:
 8013870:	b570      	push	{r4, r5, r6, lr}
 8013872:	6803      	ldr	r3, [r0, #0]
 8013874:	4605      	mov	r5, r0
 8013876:	460c      	mov	r4, r1
 8013878:	4616      	mov	r6, r2
 801387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801387e:	4798      	blx	r3
 8013880:	b980      	cbnz	r0, 80138a4 <_ZNK8touchgfx15ScrollWheelBase22keepOffsetInsideLimitsEls+0x34>
 8013882:	682b      	ldr	r3, [r5, #0]
 8013884:	42b4      	cmp	r4, r6
 8013886:	4628      	mov	r0, r5
 8013888:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801388c:	bfa8      	it	ge
 801388e:	4634      	movge	r4, r6
 8013890:	4798      	blx	r3
 8013892:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	@ 0x7c
 8013896:	f1c0 0101 	rsb	r1, r0, #1
 801389a:	4359      	muls	r1, r3
 801389c:	1b89      	subs	r1, r1, r6
 801389e:	428c      	cmp	r4, r1
 80138a0:	bfb8      	it	lt
 80138a2:	460c      	movlt	r4, r1
 80138a4:	4620      	mov	r0, r4
 80138a6:	bd70      	pop	{r4, r5, r6, pc}

080138a8 <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE>:
 80138a8:	2302      	movs	r3, #2
 80138aa:	b570      	push	{r4, r5, r6, lr}
 80138ac:	f880 309c 	strb.w	r3, [r0, #156]	@ 0x9c
 80138b0:	4604      	mov	r4, r0
 80138b2:	6803      	ldr	r3, [r0, #0]
 80138b4:	460d      	mov	r5, r1
 80138b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80138ba:	4798      	blx	r3
 80138bc:	6823      	ldr	r3, [r4, #0]
 80138be:	4606      	mov	r6, r0
 80138c0:	4620      	mov	r0, r4
 80138c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80138c6:	4798      	blx	r3
 80138c8:	b1c8      	cbz	r0, 80138fe <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x56>
 80138ca:	896b      	ldrh	r3, [r5, #10]
 80138cc:	88e9      	ldrh	r1, [r5, #6]
 80138ce:	1a5b      	subs	r3, r3, r1
 80138d0:	f8b4 1080 	ldrh.w	r1, [r4, #128]	@ 0x80
 80138d4:	6822      	ldr	r2, [r4, #0]
 80138d6:	4620      	mov	r0, r4
 80138d8:	b21b      	sxth	r3, r3
 80138da:	f8d2 50c4 	ldr.w	r5, [r2, #196]	@ 0xc4
 80138de:	434b      	muls	r3, r1
 80138e0:	210a      	movs	r1, #10
 80138e2:	f894 208a 	ldrb.w	r2, [r4, #138]	@ 0x8a
 80138e6:	fb93 f1f1 	sdiv	r1, r3, r1
 80138ea:	4431      	add	r1, r6
 80138ec:	47a8      	blx	r5
 80138ee:	6823      	ldr	r3, [r4, #0]
 80138f0:	4601      	mov	r1, r0
 80138f2:	4620      	mov	r0, r4
 80138f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80138f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138fc:	4718      	bx	r3
 80138fe:	89ab      	ldrh	r3, [r5, #12]
 8013900:	8929      	ldrh	r1, [r5, #8]
 8013902:	e7e4      	b.n	80138ce <_ZN8touchgfx15ScrollWheelBase15handleDragEventERKNS_9DragEventE+0x26>

08013904 <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE>:
 8013904:	b570      	push	{r4, r5, r6, lr}
 8013906:	6803      	ldr	r3, [r0, #0]
 8013908:	4604      	mov	r4, r0
 801390a:	790e      	ldrb	r6, [r1, #4]
 801390c:	460d      	mov	r5, r1
 801390e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013912:	4798      	blx	r3
 8013914:	f080 0001 	eor.w	r0, r0, #1
 8013918:	b2c0      	uxtb	r0, r0
 801391a:	42b0      	cmp	r0, r6
 801391c:	d126      	bne.n	801396c <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x68>
 801391e:	6823      	ldr	r3, [r4, #0]
 8013920:	4620      	mov	r0, r4
 8013922:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013926:	4798      	blx	r3
 8013928:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801392c:	f8b4 107e 	ldrh.w	r1, [r4, #126]	@ 0x7e
 8013930:	4359      	muls	r1, r3
 8013932:	230a      	movs	r3, #10
 8013934:	fb91 f1f3 	sdiv	r1, r1, r3
 8013938:	f8b4 3082 	ldrh.w	r3, [r4, #130]	@ 0x82
 801393c:	4401      	add	r1, r0
 801393e:	b163      	cbz	r3, 801395a <_ZN8touchgfx15ScrollWheelBase18handleGestureEventERKNS_12GestureEventE+0x56>
 8013940:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	@ 0x7c
 8013944:	f8d4 20b4 	ldr.w	r2, [r4, #180]	@ 0xb4
 8013948:	4343      	muls	r3, r0
 801394a:	18d0      	adds	r0, r2, r3
 801394c:	4281      	cmp	r1, r0
 801394e:	bfa8      	it	ge
 8013950:	4601      	movge	r1, r0
 8013952:	1ad0      	subs	r0, r2, r3
 8013954:	4281      	cmp	r1, r0
 8013956:	bfb8      	it	lt
 8013958:	4601      	movlt	r1, r0
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	4620      	mov	r0, r4
 801395e:	f04f 32ff 	mov.w	r2, #4294967295
 8013962:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801396a:	4718      	bx	r3
 801396c:	bd70      	pop	{r4, r5, r6, pc}

0801396e <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls>:
 801396e:	b570      	push	{r4, r5, r6, lr}
 8013970:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	@ 0x7c
 8013974:	4604      	mov	r4, r0
 8013976:	460d      	mov	r5, r1
 8013978:	4616      	mov	r6, r2
 801397a:	b31b      	cbz	r3, 80139c4 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x56>
 801397c:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 8013980:	b1c8      	cbz	r0, 80139b6 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 8013982:	6803      	ldr	r3, [r0, #0]
 8013984:	68db      	ldr	r3, [r3, #12]
 8013986:	4798      	blx	r3
 8013988:	b1a8      	cbz	r0, 80139b6 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 801398a:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	@ 0x7c
 801398e:	2b00      	cmp	r3, #0
 8013990:	dd11      	ble.n	80139b6 <_ZN8touchgfx15ScrollWheelBase17animateToPositionEls+0x48>
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	4629      	mov	r1, r5
 8013996:	4620      	mov	r0, r4
 8013998:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801399c:	4798      	blx	r3
 801399e:	4605      	mov	r5, r0
 80139a0:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	@ 0x7c
 80139a4:	4269      	negs	r1, r5
 80139a6:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80139aa:	fb91 f1f3 	sdiv	r1, r1, r3
 80139ae:	6803      	ldr	r3, [r0, #0]
 80139b0:	b209      	sxth	r1, r1
 80139b2:	689b      	ldr	r3, [r3, #8]
 80139b4:	4798      	blx	r3
 80139b6:	4632      	mov	r2, r6
 80139b8:	4629      	mov	r1, r5
 80139ba:	4620      	mov	r0, r4
 80139bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139c0:	f000 b8d5 	b.w	8013b6e <_ZN8touchgfx10ScrollBase17animateToPositionEls>
 80139c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080139c8 <_ZN8touchgfx15ScrollWheelBaseC1Ev>:
 80139c8:	b510      	push	{r4, lr}
 80139ca:	4604      	mov	r4, r0
 80139cc:	f000 fa7a 	bl	8013ec4 <_ZN8touchgfx10ScrollBaseC1Ev>
 80139d0:	4b06      	ldr	r3, [pc, #24]	@ (80139ec <_ZN8touchgfx15ScrollWheelBaseC1Ev+0x24>)
 80139d2:	2100      	movs	r1, #0
 80139d4:	4620      	mov	r0, r4
 80139d6:	6023      	str	r3, [r4, #0]
 80139d8:	f8c4 10bc 	str.w	r1, [r4, #188]	@ 0xbc
 80139dc:	f000 fa69 	bl	8013eb2 <_ZN8touchgfx10ScrollBase13setHorizontalEb>
 80139e0:	2301      	movs	r3, #1
 80139e2:	4620      	mov	r0, r4
 80139e4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80139e8:	bd10      	pop	{r4, pc}
 80139ea:	bf00      	nop
 80139ec:	08027a90 	.word	0x08027a90

080139f0 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>:
 80139f0:	b510      	push	{r4, lr}
 80139f2:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	@ 0x7c
 80139f6:	4604      	mov	r4, r0
 80139f8:	b1a3      	cbz	r3, 8013a24 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x34>
 80139fa:	f890 309c 	ldrb.w	r3, [r0, #156]	@ 0x9c
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d109      	bne.n	8013a16 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x26>
 8013a02:	f8d0 10ac 	ldr.w	r1, [r0, #172]	@ 0xac
 8013a06:	f000 f9ed 	bl	8013de4 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8013a0a:	f9b4 307c 	ldrsh.w	r3, [r4, #124]	@ 0x7c
 8013a0e:	4240      	negs	r0, r0
 8013a10:	fb90 f0f3 	sdiv	r0, r0, r3
 8013a14:	bd10      	pop	{r4, pc}
 8013a16:	6803      	ldr	r3, [r0, #0]
 8013a18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013a1c:	4798      	blx	r3
 8013a1e:	4601      	mov	r1, r0
 8013a20:	4620      	mov	r0, r4
 8013a22:	e7f0      	b.n	8013a06 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x16>
 8013a24:	4618      	mov	r0, r3
 8013a26:	e7f5      	b.n	8013a14 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv+0x24>

08013a28 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE>:
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	@ 0x7c
 8013a2e:	4604      	mov	r4, r0
 8013a30:	460d      	mov	r5, r1
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d06d      	beq.n	8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013a36:	6803      	ldr	r3, [r0, #0]
 8013a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013a3c:	4798      	blx	r3
 8013a3e:	792b      	ldrb	r3, [r5, #4]
 8013a40:	4606      	mov	r6, r0
 8013a42:	b9fb      	cbnz	r3, 8013a84 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x5c>
 8013a44:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013a48:	f8a4 30b0 	strh.w	r3, [r4, #176]	@ 0xb0
 8013a4c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8013a50:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
 8013a54:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8013a58:	f8a4 30b2 	strh.w	r3, [r4, #178]	@ 0xb2
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d058      	beq.n	8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013a60:	6803      	ldr	r3, [r0, #0]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	4798      	blx	r3
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d053      	beq.n	8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013a6a:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
 8013a6e:	682b      	ldr	r3, [r5, #0]
 8013a70:	4620      	mov	r0, r4
 8013a72:	689e      	ldr	r6, [r3, #8]
 8013a74:	f7ff ffbc 	bl	80139f0 <_ZNK8touchgfx15ScrollWheelBase15getSelectedItemEv>
 8013a78:	b201      	sxth	r1, r0
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	4633      	mov	r3, r6
 8013a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a82:	4718      	bx	r3
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d144      	bne.n	8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013a88:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8013a8c:	bbb3      	cbnz	r3, 8013afc <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xd4>
 8013a8e:	6823      	ldr	r3, [r4, #0]
 8013a90:	4620      	mov	r0, r4
 8013a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013a96:	4798      	blx	r3
 8013a98:	b1f0      	cbz	r0, 8013ad8 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xb0>
 8013a9a:	f9b4 30b0 	ldrsh.w	r3, [r4, #176]	@ 0xb0
 8013a9e:	f9b4 207a 	ldrsh.w	r2, [r4, #122]	@ 0x7a
 8013aa2:	6821      	ldr	r1, [r4, #0]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	@ 0x7c
 8013aaa:	f8d1 50cc 	ldr.w	r5, [r1, #204]	@ 0xcc
 8013aae:	dd16      	ble.n	8013ade <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xb6>
 8013ab0:	1ad3      	subs	r3, r2, r3
 8013ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ab6:	fb93 f3f0 	sdiv	r3, r3, r0
 8013aba:	fb03 0000 	mla	r0, r3, r0, r0
 8013abe:	1981      	adds	r1, r0, r6
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	47a8      	blx	r5
 8013ac4:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8013ac8:	b318      	cbz	r0, 8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013aca:	6803      	ldr	r3, [r0, #0]
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	4798      	blx	r3
 8013ad0:	b1f8      	cbz	r0, 8013b12 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xea>
 8013ad2:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8013ad6:	e7ca      	b.n	8013a6e <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x46>
 8013ad8:	f9b4 30b2 	ldrsh.w	r3, [r4, #178]	@ 0xb2
 8013adc:	e7df      	b.n	8013a9e <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x76>
 8013ade:	1881      	adds	r1, r0, r2
 8013ae0:	4299      	cmp	r1, r3
 8013ae2:	da07      	bge.n	8013af4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0xcc>
 8013ae4:	1a9b      	subs	r3, r3, r2
 8013ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8013aea:	fb93 f3f0 	sdiv	r3, r3, r0
 8013aee:	fb00 6113 	mls	r1, r0, r3, r6
 8013af2:	e7e5      	b.n	8013ac0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x98>
 8013af4:	f04f 32ff 	mov.w	r2, #4294967295
 8013af8:	4631      	mov	r1, r6
 8013afa:	e7e1      	b.n	8013ac0 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x98>
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d1e1      	bne.n	8013ac4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x9c>
 8013b00:	6823      	ldr	r3, [r4, #0]
 8013b02:	4601      	mov	r1, r0
 8013b04:	f04f 32ff 	mov.w	r2, #4294967295
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013b0e:	4798      	blx	r3
 8013b10:	e7d8      	b.n	8013ac4 <_ZN8touchgfx15ScrollWheelBase16handleClickEventERKNS_10ClickEventE+0x9c>
 8013b12:	bd70      	pop	{r4, r5, r6, pc}

08013b14 <_ZN8touchgfx10ScrollBase13animateToItemEss>:
 8013b14:	b570      	push	{r4, r5, r6, lr}
 8013b16:	6803      	ldr	r3, [r0, #0]
 8013b18:	4604      	mov	r4, r0
 8013b1a:	4615      	mov	r5, r2
 8013b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8013b20:	4798      	blx	r3
 8013b22:	6823      	ldr	r3, [r4, #0]
 8013b24:	462a      	mov	r2, r5
 8013b26:	4601      	mov	r1, r0
 8013b28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b32:	4718      	bx	r3

08013b34 <_ZN8touchgfx10ScrollBase15setDrawableSizeEss>:
 8013b34:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8013b38:	302c      	adds	r0, #44	@ 0x2c
 8013b3a:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
 8013b3e:	f7ff bc5d 	b.w	80133fc <_ZN8touchgfx12DrawableList15setDrawableSizeEss>

08013b42 <_ZNK8touchgfx10ScrollBase16getNumberOfItemsEv>:
 8013b42:	302c      	adds	r0, #44	@ 0x2c
 8013b44:	f7ff bc5f 	b.w	8013406 <_ZNK8touchgfx12DrawableList16getNumberOfItemsEv>

08013b48 <_ZN8touchgfx10ScrollBase11itemChangedEi>:
 8013b48:	b209      	sxth	r1, r1
 8013b4a:	302c      	adds	r0, #44	@ 0x2c
 8013b4c:	f7ff be37 	b.w	80137be <_ZN8touchgfx12DrawableList11itemChangedEs>

08013b50 <_ZN8touchgfx10ScrollBase9setOffsetEl>:
 8013b50:	f9b0 307a 	ldrsh.w	r3, [r0, #122]	@ 0x7a
 8013b54:	302c      	adds	r0, #44	@ 0x2c
 8013b56:	4419      	add	r1, r3
 8013b58:	f7ff bc84 	b.w	8013464 <_ZN8touchgfx12DrawableList9setOffsetEl>

08013b5c <_ZNK8touchgfx10ScrollBase9getOffsetEv>:
 8013b5c:	b510      	push	{r4, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	302c      	adds	r0, #44	@ 0x2c
 8013b62:	f7ff fd75 	bl	8013650 <_ZNK8touchgfx12DrawableList9getOffsetEv>
 8013b66:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	@ 0x7a
 8013b6a:	1ac0      	subs	r0, r0, r3
 8013b6c:	bd10      	pop	{r4, pc}

08013b6e <_ZN8touchgfx10ScrollBase17animateToPositionEls>:
 8013b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b70:	6803      	ldr	r3, [r0, #0]
 8013b72:	4604      	mov	r4, r0
 8013b74:	4615      	mov	r5, r2
 8013b76:	460f      	mov	r7, r1
 8013b78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013b7c:	4798      	blx	r3
 8013b7e:	6823      	ldr	r3, [r4, #0]
 8013b80:	4606      	mov	r6, r0
 8013b82:	4639      	mov	r1, r7
 8013b84:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8013b88:	4620      	mov	r0, r4
 8013b8a:	4798      	blx	r3
 8013b8c:	2d00      	cmp	r5, #0
 8013b8e:	eba0 0306 	sub.w	r3, r0, r6
 8013b92:	4601      	mov	r1, r0
 8013b94:	bfb8      	it	lt
 8013b96:	f9b4 5088 	ldrshlt.w	r5, [r4, #136]	@ 0x88
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	bfb8      	it	lt
 8013b9e:	425b      	neglt	r3, r3
 8013ba0:	42ab      	cmp	r3, r5
 8013ba2:	bfa8      	it	ge
 8013ba4:	462b      	movge	r3, r5
 8013ba6:	b21a      	sxth	r2, r3
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	dc08      	bgt.n	8013bbe <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x50>
 8013bac:	6823      	ldr	r3, [r4, #0]
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013bb4:	4798      	blx	r3
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8013bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e9c4 3228 	strd	r3, r2, [r4, #160]	@ 0xa0
 8013bc4:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	e9c4 602a 	strd	r6, r0, [r4, #168]	@ 0xa8
 8013bce:	d0f5      	beq.n	8013bbc <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x4e>
 8013bd0:	f004 fc6c 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	3004      	adds	r0, #4
 8013bd8:	f004 fd36 	bl	8018648 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8013bdc:	2301      	movs	r3, #1
 8013bde:	e7eb      	b.n	8013bb8 <_ZN8touchgfx10ScrollBase17animateToPositionEls+0x4a>

08013be0 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	@ 0x7c
 8013be6:	4605      	mov	r5, r0
 8013be8:	460c      	mov	r4, r1
 8013bea:	b18b      	cbz	r3, 8013c10 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>
 8013bec:	6803      	ldr	r3, [r0, #0]
 8013bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013bf2:	4798      	blx	r3
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	b168      	cbz	r0, 8013c14 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x34>
 8013bf8:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	@ 0x7c
 8013bfc:	2102      	movs	r1, #2
 8013bfe:	2c00      	cmp	r4, #0
 8013c00:	fb93 f1f1 	sdiv	r1, r3, r1
 8013c04:	bfb4      	ite	lt
 8013c06:	1a64      	sublt	r4, r4, r1
 8013c08:	1864      	addge	r4, r4, r1
 8013c0a:	fb94 f4f3 	sdiv	r4, r4, r3
 8013c0e:	435c      	muls	r4, r3
 8013c10:	4620      	mov	r0, r4
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	682b      	ldr	r3, [r5, #0]
 8013c16:	4621      	mov	r1, r4
 8013c18:	4628      	mov	r0, r5
 8013c1a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8013c1e:	4798      	blx	r3
 8013c20:	f9b5 407c 	ldrsh.w	r4, [r5, #124]	@ 0x7c
 8013c24:	2302      	movs	r3, #2
 8013c26:	fb94 f3f3 	sdiv	r3, r4, r3
 8013c2a:	1ac0      	subs	r0, r0, r3
 8013c2c:	fb90 f0f4 	sdiv	r0, r0, r4
 8013c30:	4344      	muls	r4, r0
 8013c32:	e7ed      	b.n	8013c10 <_ZNK8touchgfx10ScrollBase23getNearestAlignedOffsetEl+0x30>

08013c34 <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs>:
 8013c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c38:	6803      	ldr	r3, [r0, #0]
 8013c3a:	460d      	mov	r5, r1
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013c42:	4798      	blx	r3
 8013c44:	42a8      	cmp	r0, r5
 8013c46:	d020      	beq.n	8013c8a <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 8013c48:	4629      	mov	r1, r5
 8013c4a:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8013c4e:	f7ff fdb3 	bl	80137b8 <_ZN8touchgfx12DrawableList16setNumberOfItemsEs>
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	4620      	mov	r0, r4
 8013c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013c5a:	4798      	blx	r3
 8013c5c:	4605      	mov	r5, r0
 8013c5e:	b9a0      	cbnz	r0, 8013c8a <_ZN8touchgfx10ScrollBase16setNumberOfItemsEs+0x56>
 8013c60:	6823      	ldr	r3, [r4, #0]
 8013c62:	4620      	mov	r0, r4
 8013c64:	f8d3 60cc 	ldr.w	r6, [r3, #204]	@ 0xcc
 8013c68:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
 8013c6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013c70:	4798      	blx	r3
 8013c72:	462a      	mov	r2, r5
 8013c74:	4601      	mov	r1, r0
 8013c76:	4620      	mov	r0, r4
 8013c78:	47b8      	blx	r7
 8013c7a:	4633      	mov	r3, r6
 8013c7c:	4601      	mov	r1, r0
 8013c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8013c82:	4620      	mov	r0, r4
 8013c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c88:	4718      	bx	r3
 8013c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c8e <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE>:
 8013c8e:	b570      	push	{r4, r5, r6, lr}
 8013c90:	6803      	ldr	r3, [r0, #0]
 8013c92:	4605      	mov	r5, r0
 8013c94:	790e      	ldrb	r6, [r1, #4]
 8013c96:	460c      	mov	r4, r1
 8013c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013c9c:	4798      	blx	r3
 8013c9e:	f080 0001 	eor.w	r0, r0, #1
 8013ca2:	b2c0      	uxtb	r0, r0
 8013ca4:	42b0      	cmp	r0, r6
 8013ca6:	d143      	bne.n	8013d30 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0xa2>
 8013ca8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013cac:	4628      	mov	r0, r5
 8013cae:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8013cb8:	bfb4      	ite	lt
 8013cba:	f04f 36ff 	movlt.w	r6, #4294967295
 8013cbe:	2601      	movge	r6, #1
 8013cc0:	682b      	ldr	r3, [r5, #0]
 8013cc2:	b224      	sxth	r4, r4
 8013cc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013cc8:	2c04      	cmp	r4, #4
 8013cca:	bfc9      	itett	gt
 8013ccc:	3c04      	subgt	r4, #4
 8013cce:	2407      	movle	r4, #7
 8013cd0:	ebc4 04c4 	rsbgt	r4, r4, r4, lsl #3
 8013cd4:	b224      	sxthgt	r4, r4
 8013cd6:	4798      	blx	r3
 8013cd8:	f8b5 107e 	ldrh.w	r1, [r5, #126]	@ 0x7e
 8013cdc:	4366      	muls	r6, r4
 8013cde:	230a      	movs	r3, #10
 8013ce0:	4371      	muls	r1, r6
 8013ce2:	fb91 f1f3 	sdiv	r1, r1, r3
 8013ce6:	f8b5 3082 	ldrh.w	r3, [r5, #130]	@ 0x82
 8013cea:	4401      	add	r1, r0
 8013cec:	b163      	cbz	r3, 8013d08 <_ZN8touchgfx10ScrollBase18handleGestureEventERKNS_12GestureEventE+0x7a>
 8013cee:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	@ 0x7c
 8013cf2:	f8d5 20b4 	ldr.w	r2, [r5, #180]	@ 0xb4
 8013cf6:	4343      	muls	r3, r0
 8013cf8:	1898      	adds	r0, r3, r2
 8013cfa:	4281      	cmp	r1, r0
 8013cfc:	bfa8      	it	ge
 8013cfe:	4601      	movge	r1, r0
 8013d00:	1ad0      	subs	r0, r2, r3
 8013d02:	4281      	cmp	r1, r0
 8013d04:	bfb8      	it	lt
 8013d06:	4601      	movlt	r1, r0
 8013d08:	682b      	ldr	r3, [r5, #0]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8013d12:	4798      	blx	r3
 8013d14:	f8b5 2088 	ldrh.w	r2, [r5, #136]	@ 0x88
 8013d18:	682b      	ldr	r3, [r5, #0]
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	42a2      	cmp	r2, r4
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8013d24:	bfa8      	it	ge
 8013d26:	4622      	movge	r2, r4
 8013d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d2c:	b212      	sxth	r2, r2
 8013d2e:	4718      	bx	r3
 8013d30:	bd70      	pop	{r4, r5, r6, pc}

08013d32 <_ZN8touchgfx10ScrollBase17setEasingEquationEPFstsstE>:
 8013d32:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
 8013d36:	4770      	bx	lr

08013d38 <_ZN8touchgfx10ScrollBase20setSwipeAccelerationEt>:
 8013d38:	f8a0 107e 	strh.w	r1, [r0, #126]	@ 0x7e
 8013d3c:	4770      	bx	lr

08013d3e <_ZN8touchgfx10ScrollBase19setDragAccelerationEt>:
 8013d3e:	f8a0 1080 	strh.w	r1, [r0, #128]	@ 0x80
 8013d42:	4770      	bx	lr

08013d44 <_ZN8touchgfx10ScrollBase13stopAnimationEv>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	f890 309c 	ldrb.w	r3, [r0, #156]	@ 0x9c
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d10c      	bne.n	8013d6a <_ZN8touchgfx10ScrollBase13stopAnimationEv+0x26>
 8013d50:	f004 fbac 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8013d54:	4621      	mov	r1, r4
 8013d56:	3004      	adds	r0, #4
 8013d58:	f004 fbcd 	bl	80184f6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8013d62:	4620      	mov	r0, r4
 8013d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013d68:	4798      	blx	r3
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8013d70:	bd10      	pop	{r4, pc}

08013d72 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE>:
 8013d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d76:	4605      	mov	r5, r0
 8013d78:	460e      	mov	r6, r1
 8013d7a:	f7ff ffe3 	bl	8013d44 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8013d7e:	2302      	movs	r3, #2
 8013d80:	4628      	mov	r0, r5
 8013d82:	f885 309c 	strb.w	r3, [r5, #156]	@ 0x9c
 8013d86:	682b      	ldr	r3, [r5, #0]
 8013d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013d8c:	4798      	blx	r3
 8013d8e:	682b      	ldr	r3, [r5, #0]
 8013d90:	4607      	mov	r7, r0
 8013d92:	4628      	mov	r0, r5
 8013d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013d98:	4798      	blx	r3
 8013d9a:	b300      	cbz	r0, 8013dde <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x6c>
 8013d9c:	8973      	ldrh	r3, [r6, #10]
 8013d9e:	88f2      	ldrh	r2, [r6, #6]
 8013da0:	1a9b      	subs	r3, r3, r2
 8013da2:	f8b5 4080 	ldrh.w	r4, [r5, #128]	@ 0x80
 8013da6:	f895 108a 	ldrb.w	r1, [r5, #138]	@ 0x8a
 8013daa:	2264      	movs	r2, #100	@ 0x64
 8013dac:	b21b      	sxth	r3, r3
 8013dae:	f9b5 007c 	ldrsh.w	r0, [r5, #124]	@ 0x7c
 8013db2:	435c      	muls	r4, r3
 8013db4:	230a      	movs	r3, #10
 8013db6:	fb94 f4f3 	sdiv	r4, r4, r3
 8013dba:	682b      	ldr	r3, [r5, #0]
 8013dbc:	443c      	add	r4, r7
 8013dbe:	f8d3 60c4 	ldr.w	r6, [r3, #196]	@ 0xc4
 8013dc2:	f005 fe00 	bl	80199c6 <_ZN8touchgfx6muldivElll>
 8013dc6:	4621      	mov	r1, r4
 8013dc8:	b202      	sxth	r2, r0
 8013dca:	4628      	mov	r0, r5
 8013dcc:	47b0      	blx	r6
 8013dce:	682b      	ldr	r3, [r5, #0]
 8013dd0:	4601      	mov	r1, r0
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ddc:	4718      	bx	r3
 8013dde:	89b3      	ldrh	r3, [r6, #12]
 8013de0:	8932      	ldrh	r2, [r6, #8]
 8013de2:	e7dd      	b.n	8013da0 <_ZN8touchgfx10ScrollBase15handleDragEventERKNS_9DragEventE+0x2e>

08013de4 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>:
 8013de4:	b538      	push	{r3, r4, r5, lr}
 8013de6:	6803      	ldr	r3, [r0, #0]
 8013de8:	4605      	mov	r5, r0
 8013dea:	460c      	mov	r4, r1
 8013dec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8013df0:	4798      	blx	r3
 8013df2:	b150      	cbz	r0, 8013e0a <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 8013df4:	f9b5 307c 	ldrsh.w	r3, [r5, #124]	@ 0x7c
 8013df8:	b13b      	cbz	r3, 8013e0a <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi+0x26>
 8013dfa:	4358      	muls	r0, r3
 8013dfc:	fb94 f3f0 	sdiv	r3, r4, r0
 8013e00:	fb00 4413 	mls	r4, r0, r3, r4
 8013e04:	2c00      	cmp	r4, #0
 8013e06:	bfc8      	it	gt
 8013e08:	1a24      	subgt	r4, r4, r0
 8013e0a:	4620      	mov	r0, r4
 8013e0c:	bd38      	pop	{r3, r4, r5, pc}

08013e0e <_ZN8touchgfx10ScrollBase15handleTickEventEv>:
 8013e0e:	b570      	push	{r4, r5, r6, lr}
 8013e10:	f890 309c 	ldrb.w	r3, [r0, #156]	@ 0x9c
 8013e14:	4604      	mov	r4, r0
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d14a      	bne.n	8013eb0 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa2>
 8013e1a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	@ 0xa0
 8013e1e:	2100      	movs	r1, #0
 8013e20:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8013e24:	3001      	adds	r0, #1
 8013e26:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8013e2a:	e9d4 622a 	ldrd	r6, r2, [r4, #168]	@ 0xa8
 8013e2e:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
 8013e32:	b280      	uxth	r0, r0
 8013e34:	1b92      	subs	r2, r2, r6
 8013e36:	b212      	sxth	r2, r2
 8013e38:	47a8      	blx	r5
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	1981      	adds	r1, r0, r6
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013e44:	4798      	blx	r3
 8013e46:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	@ 0xa0
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	dd30      	ble.n	8013eb0 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa2>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8013e54:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8013e58:	f004 fb28 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8013e5c:	4621      	mov	r1, r4
 8013e5e:	3004      	adds	r0, #4
 8013e60:	f004 fb49 	bl	80184f6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8013e64:	6823      	ldr	r3, [r4, #0]
 8013e66:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 8013e6a:	4620      	mov	r0, r4
 8013e6c:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8013e70:	f7ff ffb8 	bl	8013de4 <_ZNK8touchgfx10ScrollBase19getNormalizedOffsetEi>
 8013e74:	4601      	mov	r1, r0
 8013e76:	4620      	mov	r0, r4
 8013e78:	47a8      	blx	r5
 8013e7a:	6823      	ldr	r3, [r4, #0]
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013e82:	4798      	blx	r3
 8013e84:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8013e88:	1ac0      	subs	r0, r0, r3
 8013e8a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8013e8e:	4403      	add	r3, r0
 8013e90:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8013e94:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8013e98:	b150      	cbz	r0, 8013eb0 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa2>
 8013e9a:	6803      	ldr	r3, [r0, #0]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	4798      	blx	r3
 8013ea0:	b130      	cbz	r0, 8013eb0 <_ZN8touchgfx10ScrollBase15handleTickEventEv+0xa2>
 8013ea2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8013ea6:	6803      	ldr	r3, [r0, #0]
 8013ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013eac:	689b      	ldr	r3, [r3, #8]
 8013eae:	4718      	bx	r3
 8013eb0:	bd70      	pop	{r4, r5, r6, pc}

08013eb2 <_ZN8touchgfx10ScrollBase13setHorizontalEb>:
 8013eb2:	f081 0301 	eor.w	r3, r1, #1
 8013eb6:	f880 10b9 	strb.w	r1, [r0, #185]	@ 0xb9
 8013eba:	302c      	adds	r0, #44	@ 0x2c
 8013ebc:	f880 308c 	strb.w	r3, [r0, #140]	@ 0x8c
 8013ec0:	f7ff bc5b 	b.w	801377a <_ZN8touchgfx12DrawableList13setHorizontalEb>

08013ec4 <_ZN8touchgfx10ScrollBaseC1Ev>:
 8013ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ec6:	2500      	movs	r5, #0
 8013ec8:	4606      	mov	r6, r0
 8013eca:	2701      	movs	r7, #1
 8013ecc:	4b24      	ldr	r3, [pc, #144]	@ (8013f60 <_ZN8touchgfx10ScrollBaseC1Ev+0x9c>)
 8013ece:	4604      	mov	r4, r0
 8013ed0:	8085      	strh	r5, [r0, #4]
 8013ed2:	80c5      	strh	r5, [r0, #6]
 8013ed4:	8105      	strh	r5, [r0, #8]
 8013ed6:	8145      	strh	r5, [r0, #10]
 8013ed8:	8185      	strh	r5, [r0, #12]
 8013eda:	81c5      	strh	r5, [r0, #14]
 8013edc:	8205      	strh	r5, [r0, #16]
 8013ede:	8245      	strh	r5, [r0, #18]
 8013ee0:	61c5      	str	r5, [r0, #28]
 8013ee2:	8405      	strh	r5, [r0, #32]
 8013ee4:	8445      	strh	r5, [r0, #34]	@ 0x22
 8013ee6:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8013eea:	f880 7025 	strb.w	r7, [r0, #37]	@ 0x25
 8013eee:	6285      	str	r5, [r0, #40]	@ 0x28
 8013ef0:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8013ef4:	f846 3b2c 	str.w	r3, [r6], #44
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f7ff fa57 	bl	80133ac <_ZN8touchgfx12DrawableListC1Ev>
 8013efe:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8013f02:	230a      	movs	r3, #10
 8013f04:	4631      	mov	r1, r6
 8013f06:	4620      	mov	r0, r4
 8013f08:	67a5      	str	r5, [r4, #120]	@ 0x78
 8013f0a:	f884 509c 	strb.w	r5, [r4, #156]	@ 0x9c
 8013f0e:	f884 50b8 	strb.w	r5, [r4, #184]	@ 0xb8
 8013f12:	f884 50b9 	strb.w	r5, [r4, #185]	@ 0xb9
 8013f16:	e9c4 231f 	strd	r2, r3, [r4, #124]	@ 0x7c
 8013f1a:	4b12      	ldr	r3, [pc, #72]	@ (8013f64 <_ZN8touchgfx10ScrollBaseC1Ev+0xa0>)
 8013f1c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8013f20:	231e      	movs	r3, #30
 8013f22:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
 8013f26:	234b      	movs	r3, #75	@ 0x4b
 8013f28:	e9c4 5523 	strd	r5, r5, [r4, #140]	@ 0x8c
 8013f2c:	f884 308a 	strb.w	r3, [r4, #138]	@ 0x8a
 8013f30:	e9c4 5525 	strd	r5, r5, [r4, #148]	@ 0x94
 8013f34:	e9c4 5528 	strd	r5, r5, [r4, #160]	@ 0xa0
 8013f38:	e9c4 552a 	strd	r5, r5, [r4, #168]	@ 0xa8
 8013f3c:	e9c4 552c 	strd	r5, r5, [r4, #176]	@ 0xb0
 8013f40:	f000 f84e 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8013f44:	4629      	mov	r1, r5
 8013f46:	4630      	mov	r0, r6
 8013f48:	6325      	str	r5, [r4, #48]	@ 0x30
 8013f4a:	f7ff fc16 	bl	801377a <_ZN8touchgfx12DrawableList13setHorizontalEb>
 8013f4e:	4630      	mov	r0, r6
 8013f50:	4629      	mov	r1, r5
 8013f52:	f7ff fc1d 	bl	8013790 <_ZN8touchgfx12DrawableList11setCircularEb>
 8013f56:	f884 7024 	strb.w	r7, [r4, #36]	@ 0x24
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f5e:	bf00      	nop
 8013f60:	08027b70 	.word	0x08027b70
 8013f64:	0801a071 	.word	0x0801a071

08013f68 <_ZN8touchgfx10ScrollBase11setCircularEb>:
 8013f68:	302c      	adds	r0, #44	@ 0x2c
 8013f6a:	f7ff bc11 	b.w	8013790 <_ZN8touchgfx12DrawableList11setCircularEb>

08013f6e <_ZN8touchgfx10ScrollBase8setWidthEs>:
 8013f6e:	8101      	strh	r1, [r0, #8]
 8013f70:	302c      	adds	r0, #44	@ 0x2c
 8013f72:	f7ff bbfc 	b.w	801376e <_ZN8touchgfx12DrawableList8setWidthEs>

08013f76 <_ZN8touchgfx10ScrollBase9setHeightEs>:
 8013f76:	8141      	strh	r1, [r0, #10]
 8013f78:	302c      	adds	r0, #44	@ 0x2c
 8013f7a:	f7ff bbfb 	b.w	8013774 <_ZN8touchgfx12DrawableList9setHeightEs>

08013f7e <_ZNK8touchgfx10ScrollBase13getHorizontalEv>:
 8013f7e:	302c      	adds	r0, #44	@ 0x2c
 8013f80:	f7ff ba02 	b.w	8013388 <_ZNK8touchgfx12DrawableList13getHorizontalEv>

08013f84 <_ZNK8touchgfx10ScrollBase11getCircularEv>:
 8013f84:	302c      	adds	r0, #44	@ 0x2c
 8013f86:	f7ff ba02 	b.w	801338e <_ZNK8touchgfx12DrawableList11getCircularEv>

08013f8a <_ZNK8touchgfx10ScrollBase15getDrawableSizeEv>:
 8013f8a:	302c      	adds	r0, #44	@ 0x2c
 8013f8c:	f7ff ba05 	b.w	801339a <_ZNK8touchgfx12DrawableList15getDrawableSizeEv>

08013f90 <_ZNK8touchgfx10ScrollBase17getDrawableMarginEv>:
 8013f90:	302c      	adds	r0, #44	@ 0x2c
 8013f92:	f7ff ba08 	b.w	80133a6 <_ZNK8touchgfx12DrawableList17getDrawableMarginEv>

08013f96 <_ZN8touchgfx11ScrollWheel12setDrawablesERNS_26DrawableListItemsInterfaceERNS_15GenericCallbackIPS1_ssEE>:
 8013f96:	b570      	push	{r4, r5, r6, lr}
 8013f98:	460d      	mov	r5, r1
 8013f9a:	4604      	mov	r4, r0
 8013f9c:	4616      	mov	r6, r2
 8013f9e:	f7ff fed1 	bl	8013d44 <_ZN8touchgfx10ScrollBase13stopAnimationEv>
 8013fa2:	682b      	ldr	r3, [r5, #0]
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	4798      	blx	r3
 8013faa:	4633      	mov	r3, r6
 8013fac:	f8a4 0078 	strh.w	r0, [r4, #120]	@ 0x78
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f7ff fbf5 	bl	80137a6 <_ZN8touchgfx12DrawableList12setDrawablesERNS_26DrawableListItemsInterfaceEsRNS_15GenericCallbackIPS1_ssEE>
 8013fbc:	6823      	ldr	r3, [r4, #0]
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	2100      	movs	r1, #0
 8013fc2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8013fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013fca:	4718      	bx	r3

08013fcc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8013fcc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013fce:	2000      	movs	r0, #0
 8013fd0:	b12b      	cbz	r3, 8013fde <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013fd2:	b920      	cbnz	r0, 8013fde <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8013fd4:	1a5a      	subs	r2, r3, r1
 8013fd6:	699b      	ldr	r3, [r3, #24]
 8013fd8:	4250      	negs	r0, r2
 8013fda:	4150      	adcs	r0, r2
 8013fdc:	e7f8      	b.n	8013fd0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8013fde:	4770      	bx	lr

08013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	6148      	str	r0, [r1, #20]
 8013fe4:	618b      	str	r3, [r1, #24]
 8013fe6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013fe8:	b913      	cbnz	r3, 8013ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8013fea:	6281      	str	r1, [r0, #40]	@ 0x28
 8013fec:	4770      	bx	lr
 8013fee:	4613      	mov	r3, r2
 8013ff0:	699a      	ldr	r2, [r3, #24]
 8013ff2:	2a00      	cmp	r2, #0
 8013ff4:	d1fb      	bne.n	8013fee <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8013ff6:	6199      	str	r1, [r3, #24]
 8013ff8:	4770      	bx	lr

08013ffa <_ZN8touchgfx9Container9removeAllEv>:
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013ffe:	b123      	cbz	r3, 801400a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8014000:	6999      	ldr	r1, [r3, #24]
 8014002:	6281      	str	r1, [r0, #40]	@ 0x28
 8014004:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8014008:	e7f8      	b.n	8013ffc <_ZN8touchgfx9Container9removeAllEv+0x2>
 801400a:	4770      	bx	lr

0801400c <_ZN8touchgfx9Container6unlinkEv>:
 801400c:	2300      	movs	r3, #0
 801400e:	6283      	str	r3, [r0, #40]	@ 0x28
 8014010:	4770      	bx	lr

08014012 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8014012:	2200      	movs	r2, #0
 8014014:	8002      	strh	r2, [r0, #0]
 8014016:	8042      	strh	r2, [r0, #2]
 8014018:	8082      	strh	r2, [r0, #4]
 801401a:	80c2      	strh	r2, [r0, #6]
 801401c:	4770      	bx	lr

0801401e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801401e:	b570      	push	{r4, r5, r6, lr}
 8014020:	460d      	mov	r5, r1
 8014022:	4616      	mov	r6, r2
 8014024:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014026:	b13c      	cbz	r4, 8014038 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8014028:	6823      	ldr	r3, [r4, #0]
 801402a:	4620      	mov	r0, r4
 801402c:	4632      	mov	r2, r6
 801402e:	4629      	mov	r1, r5
 8014030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014032:	4798      	blx	r3
 8014034:	69a4      	ldr	r4, [r4, #24]
 8014036:	e7f6      	b.n	8014026 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8014038:	bd70      	pop	{r4, r5, r6, pc}

0801403a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801403a:	b538      	push	{r3, r4, r5, lr}
 801403c:	460d      	mov	r5, r1
 801403e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014040:	b134      	cbz	r4, 8014050 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8014042:	682b      	ldr	r3, [r5, #0]
 8014044:	4621      	mov	r1, r4
 8014046:	4628      	mov	r0, r5
 8014048:	689b      	ldr	r3, [r3, #8]
 801404a:	4798      	blx	r3
 801404c:	69a4      	ldr	r4, [r4, #24]
 801404e:	e7f7      	b.n	8014040 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8014050:	bd38      	pop	{r3, r4, r5, pc}

08014052 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8014052:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014054:	b19b      	cbz	r3, 801407e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8014056:	428b      	cmp	r3, r1
 8014058:	d109      	bne.n	801406e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801405a:	699a      	ldr	r2, [r3, #24]
 801405c:	2100      	movs	r1, #0
 801405e:	6159      	str	r1, [r3, #20]
 8014060:	6282      	str	r2, [r0, #40]	@ 0x28
 8014062:	b902      	cbnz	r2, 8014066 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8014064:	4770      	bx	lr
 8014066:	6199      	str	r1, [r3, #24]
 8014068:	4770      	bx	lr
 801406a:	4613      	mov	r3, r2
 801406c:	b13a      	cbz	r2, 801407e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801406e:	699a      	ldr	r2, [r3, #24]
 8014070:	428a      	cmp	r2, r1
 8014072:	d1fa      	bne.n	801406a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8014074:	698a      	ldr	r2, [r1, #24]
 8014076:	619a      	str	r2, [r3, #24]
 8014078:	2300      	movs	r3, #0
 801407a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801407e:	4770      	bx	lr

08014080 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8014080:	b410      	push	{r4}
 8014082:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014084:	4604      	mov	r4, r0
 8014086:	b92b      	cbnz	r3, 8014094 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8014088:	6803      	ldr	r3, [r0, #0]
 801408a:	4611      	mov	r1, r2
 801408c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014092:	4718      	bx	r3
 8014094:	b941      	cbnz	r1, 80140a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8014096:	6193      	str	r3, [r2, #24]
 8014098:	6282      	str	r2, [r0, #40]	@ 0x28
 801409a:	6154      	str	r4, [r2, #20]
 801409c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a0:	4770      	bx	lr
 80140a2:	4603      	mov	r3, r0
 80140a4:	2800      	cmp	r0, #0
 80140a6:	d0f9      	beq.n	801409c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80140a8:	4299      	cmp	r1, r3
 80140aa:	6998      	ldr	r0, [r3, #24]
 80140ac:	d1f9      	bne.n	80140a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80140ae:	6190      	str	r0, [r2, #24]
 80140b0:	618a      	str	r2, [r1, #24]
 80140b2:	e7f2      	b.n	801409a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080140b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80140b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b8:	461f      	mov	r7, r3
 80140ba:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80140be:	460d      	mov	r5, r1
 80140c0:	4616      	mov	r6, r2
 80140c2:	b103      	cbz	r3, 80140c6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80140c4:	6038      	str	r0, [r7, #0]
 80140c6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80140c8:	b314      	cbz	r4, 8014110 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80140ca:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80140ce:	b1eb      	cbz	r3, 801410c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80140d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80140d4:	428d      	cmp	r5, r1
 80140d6:	db19      	blt.n	801410c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80140d8:	b289      	uxth	r1, r1
 80140da:	8923      	ldrh	r3, [r4, #8]
 80140dc:	440b      	add	r3, r1
 80140de:	b21b      	sxth	r3, r3
 80140e0:	429d      	cmp	r5, r3
 80140e2:	da13      	bge.n	801410c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80140e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80140e8:	4296      	cmp	r6, r2
 80140ea:	db0f      	blt.n	801410c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80140ec:	b292      	uxth	r2, r2
 80140ee:	8963      	ldrh	r3, [r4, #10]
 80140f0:	4413      	add	r3, r2
 80140f2:	b21b      	sxth	r3, r3
 80140f4:	429e      	cmp	r6, r3
 80140f6:	da09      	bge.n	801410c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80140f8:	6823      	ldr	r3, [r4, #0]
 80140fa:	1ab2      	subs	r2, r6, r2
 80140fc:	1a69      	subs	r1, r5, r1
 80140fe:	4620      	mov	r0, r4
 8014100:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8014104:	b212      	sxth	r2, r2
 8014106:	463b      	mov	r3, r7
 8014108:	b209      	sxth	r1, r1
 801410a:	47c0      	blx	r8
 801410c:	69a4      	ldr	r4, [r4, #24]
 801410e:	e7db      	b.n	80140c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8014110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014114 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8014114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014118:	4c6d      	ldr	r4, [pc, #436]	@ (80142d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801411a:	b0a1      	sub	sp, #132	@ 0x84
 801411c:	4606      	mov	r6, r0
 801411e:	6824      	ldr	r4, [r4, #0]
 8014120:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014122:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8014126:	2400      	movs	r4, #0
 8014128:	9303      	str	r3, [sp, #12]
 801412a:	802c      	strh	r4, [r5, #0]
 801412c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 801412e:	802c      	strh	r4, [r5, #0]
 8014130:	601c      	str	r4, [r3, #0]
 8014132:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8014136:	f7ff ffbd 	bl	80140b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801413a:	f1b9 0f03 	cmp.w	r9, #3
 801413e:	f340 80c1 	ble.w	80142c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8014142:	4631      	mov	r1, r6
 8014144:	a80c      	add	r0, sp, #48	@ 0x30
 8014146:	f005 fb0f 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801414a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801414e:	9306      	str	r3, [sp, #24]
 8014150:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8014154:	9307      	str	r3, [sp, #28]
 8014156:	9b03      	ldr	r3, [sp, #12]
 8014158:	f8d3 a000 	ldr.w	sl, [r3]
 801415c:	f1ba 0f00 	cmp.w	sl, #0
 8014160:	f000 80b3 	beq.w	80142ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8014164:	4651      	mov	r1, sl
 8014166:	a810      	add	r0, sp, #64	@ 0x40
 8014168:	f005 fafe 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801416c:	2002      	movs	r0, #2
 801416e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8014172:	9b01      	ldr	r3, [sp, #4]
 8014174:	9a06      	ldr	r2, [sp, #24]
 8014176:	fb91 f1f0 	sdiv	r1, r1, r0
 801417a:	189d      	adds	r5, r3, r2
 801417c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8014180:	9a07      	ldr	r2, [sp, #28]
 8014182:	4419      	add	r1, r3
 8014184:	9b02      	ldr	r3, [sp, #8]
 8014186:	4413      	add	r3, r2
 8014188:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801418c:	1a6d      	subs	r5, r5, r1
 801418e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8014192:	fb92 f2f0 	sdiv	r2, r2, r0
 8014196:	440a      	add	r2, r1
 8014198:	1a9b      	subs	r3, r3, r2
 801419a:	435b      	muls	r3, r3
 801419c:	fb05 3505 	mla	r5, r5, r5, r3
 80141a0:	4f4c      	ldr	r7, [pc, #304]	@ (80142d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80141a2:	ac10      	add	r4, sp, #64	@ 0x40
 80141a4:	f1b9 0f0c 	cmp.w	r9, #12
 80141a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80141aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80141ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80141b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80141b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80141b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80141bc:	f04f 0303 	mov.w	r3, #3
 80141c0:	bfd8      	it	le
 80141c2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80141c6:	f04f 0400 	mov.w	r4, #0
 80141ca:	f8cd 9000 	str.w	r9, [sp]
 80141ce:	bfcc      	ite	gt
 80141d0:	4698      	movgt	r8, r3
 80141d2:	fb92 f8f3 	sdivle	r8, r2, r3
 80141d6:	1c63      	adds	r3, r4, #1
 80141d8:	aa10      	add	r2, sp, #64	@ 0x40
 80141da:	f004 0401 	and.w	r4, r4, #1
 80141de:	f04f 0b00 	mov.w	fp, #0
 80141e2:	9308      	str	r3, [sp, #32]
 80141e4:	9b00      	ldr	r3, [sp, #0]
 80141e6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80141ea:	fb93 f3f8 	sdiv	r3, r3, r8
 80141ee:	3404      	adds	r4, #4
 80141f0:	b29b      	uxth	r3, r3
 80141f2:	9304      	str	r3, [sp, #16]
 80141f4:	9a04      	ldr	r2, [sp, #16]
 80141f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80141fa:	fb13 f302 	smulbb	r3, r3, r2
 80141fe:	9a01      	ldr	r2, [sp, #4]
 8014200:	b29b      	uxth	r3, r3
 8014202:	1899      	adds	r1, r3, r2
 8014204:	9305      	str	r3, [sp, #20]
 8014206:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801420a:	b209      	sxth	r1, r1
 801420c:	4299      	cmp	r1, r3
 801420e:	db4d      	blt.n	80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014210:	8932      	ldrh	r2, [r6, #8]
 8014212:	4413      	add	r3, r2
 8014214:	b21b      	sxth	r3, r3
 8014216:	4299      	cmp	r1, r3
 8014218:	da48      	bge.n	80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801421a:	9b04      	ldr	r3, [sp, #16]
 801421c:	6827      	ldr	r7, [r4, #0]
 801421e:	fb17 f703 	smulbb	r7, r7, r3
 8014222:	9b02      	ldr	r3, [sp, #8]
 8014224:	b2bf      	uxth	r7, r7
 8014226:	18fa      	adds	r2, r7, r3
 8014228:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801422c:	b212      	sxth	r2, r2
 801422e:	429a      	cmp	r2, r3
 8014230:	db3c      	blt.n	80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014232:	8970      	ldrh	r0, [r6, #10]
 8014234:	4403      	add	r3, r0
 8014236:	b21b      	sxth	r3, r3
 8014238:	429a      	cmp	r2, r3
 801423a:	da37      	bge.n	80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801423c:	2300      	movs	r3, #0
 801423e:	4630      	mov	r0, r6
 8014240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014242:	ab0b      	add	r3, sp, #44	@ 0x2c
 8014244:	f7ff ff36 	bl	80140b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8014248:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801424a:	b37a      	cbz	r2, 80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801424c:	4552      	cmp	r2, sl
 801424e:	d02d      	beq.n	80142ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8014250:	4611      	mov	r1, r2
 8014252:	a80e      	add	r0, sp, #56	@ 0x38
 8014254:	9209      	str	r2, [sp, #36]	@ 0x24
 8014256:	f005 fa87 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801425a:	f04f 0e02 	mov.w	lr, #2
 801425e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8014262:	9a06      	ldr	r2, [sp, #24]
 8014264:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8014268:	9b01      	ldr	r3, [sp, #4]
 801426a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801426e:	4413      	add	r3, r2
 8014270:	9a07      	ldr	r2, [sp, #28]
 8014272:	fb91 f1fe 	sdiv	r1, r1, lr
 8014276:	fb9c fcfe 	sdiv	ip, ip, lr
 801427a:	4401      	add	r1, r0
 801427c:	1a58      	subs	r0, r3, r1
 801427e:	9b02      	ldr	r3, [sp, #8]
 8014280:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8014284:	4413      	add	r3, r2
 8014286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014288:	448c      	add	ip, r1
 801428a:	eba3 030c 	sub.w	r3, r3, ip
 801428e:	435b      	muls	r3, r3
 8014290:	fb00 3300 	mla	r3, r0, r0, r3
 8014294:	42ab      	cmp	r3, r5
 8014296:	d208      	bcs.n	80142aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8014298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801429a:	461d      	mov	r5, r3
 801429c:	9803      	ldr	r0, [sp, #12]
 801429e:	6001      	str	r1, [r0, #0]
 80142a0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80142a2:	9805      	ldr	r0, [sp, #20]
 80142a4:	8008      	strh	r0, [r1, #0]
 80142a6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80142a8:	800f      	strh	r7, [r1, #0]
 80142aa:	4692      	mov	sl, r2
 80142ac:	f10b 0b01 	add.w	fp, fp, #1
 80142b0:	3408      	adds	r4, #8
 80142b2:	f1bb 0f04 	cmp.w	fp, #4
 80142b6:	d19d      	bne.n	80141f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80142b8:	9b00      	ldr	r3, [sp, #0]
 80142ba:	9c08      	ldr	r4, [sp, #32]
 80142bc:	444b      	add	r3, r9
 80142be:	4544      	cmp	r4, r8
 80142c0:	9300      	str	r3, [sp, #0]
 80142c2:	d188      	bne.n	80141d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80142c4:	b021      	add	sp, #132	@ 0x84
 80142c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ca:	f04f 35ff 	mov.w	r5, #4294967295
 80142ce:	e767      	b.n	80141a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80142d0:	2401bb38 	.word	0x2401bb38
 80142d4:	08026dd0 	.word	0x08026dd0

080142d8 <_ZN8touchgfx4RectaNERKS0_>:
 80142d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142dc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80142e0:	888c      	ldrh	r4, [r1, #4]
 80142e2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80142e6:	443c      	add	r4, r7
 80142e8:	b2a4      	uxth	r4, r4
 80142ea:	fa0f f884 	sxth.w	r8, r4
 80142ee:	45c1      	cmp	r9, r8
 80142f0:	da2f      	bge.n	8014352 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80142f2:	8882      	ldrh	r2, [r0, #4]
 80142f4:	444a      	add	r2, r9
 80142f6:	b292      	uxth	r2, r2
 80142f8:	fa0f fe82 	sxth.w	lr, r2
 80142fc:	4577      	cmp	r7, lr
 80142fe:	da28      	bge.n	8014352 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014300:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8014304:	88cb      	ldrh	r3, [r1, #6]
 8014306:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801430a:	442b      	add	r3, r5
 801430c:	b21b      	sxth	r3, r3
 801430e:	429e      	cmp	r6, r3
 8014310:	da1f      	bge.n	8014352 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014312:	88c3      	ldrh	r3, [r0, #6]
 8014314:	4433      	add	r3, r6
 8014316:	b29b      	uxth	r3, r3
 8014318:	fa0f fc83 	sxth.w	ip, r3
 801431c:	4565      	cmp	r5, ip
 801431e:	da18      	bge.n	8014352 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8014320:	454f      	cmp	r7, r9
 8014322:	bfb8      	it	lt
 8014324:	464f      	movlt	r7, r9
 8014326:	42b5      	cmp	r5, r6
 8014328:	bfb8      	it	lt
 801432a:	4635      	movlt	r5, r6
 801432c:	45f0      	cmp	r8, lr
 801432e:	bfd8      	it	le
 8014330:	4622      	movle	r2, r4
 8014332:	1bd2      	subs	r2, r2, r7
 8014334:	8082      	strh	r2, [r0, #4]
 8014336:	884a      	ldrh	r2, [r1, #2]
 8014338:	88c9      	ldrh	r1, [r1, #6]
 801433a:	8007      	strh	r7, [r0, #0]
 801433c:	440a      	add	r2, r1
 801433e:	8045      	strh	r5, [r0, #2]
 8014340:	b292      	uxth	r2, r2
 8014342:	b211      	sxth	r1, r2
 8014344:	458c      	cmp	ip, r1
 8014346:	bfa8      	it	ge
 8014348:	4613      	movge	r3, r2
 801434a:	1b5b      	subs	r3, r3, r5
 801434c:	80c3      	strh	r3, [r0, #6]
 801434e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014352:	2300      	movs	r3, #0
 8014354:	8003      	strh	r3, [r0, #0]
 8014356:	8043      	strh	r3, [r0, #2]
 8014358:	8083      	strh	r3, [r0, #4]
 801435a:	80c3      	strh	r3, [r0, #6]
 801435c:	e7f7      	b.n	801434e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801435e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801435e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	dd06      	ble.n	8014374 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8014366:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801436a:	2800      	cmp	r0, #0
 801436c:	bfcc      	ite	gt
 801436e:	2000      	movgt	r0, #0
 8014370:	2001      	movle	r0, #1
 8014372:	4770      	bx	lr
 8014374:	2001      	movs	r0, #1
 8014376:	4770      	bx	lr

08014378 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8014378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801437c:	2300      	movs	r3, #0
 801437e:	4604      	mov	r4, r0
 8014380:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014382:	8003      	strh	r3, [r0, #0]
 8014384:	8043      	strh	r3, [r0, #2]
 8014386:	8083      	strh	r3, [r0, #4]
 8014388:	80c3      	strh	r3, [r0, #6]
 801438a:	2d00      	cmp	r5, #0
 801438c:	d040      	beq.n	8014410 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801438e:	1d28      	adds	r0, r5, #4
 8014390:	f7ff ffe5 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014394:	b988      	cbnz	r0, 80143ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014396:	4620      	mov	r0, r4
 8014398:	f7ff ffe1 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 801439c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80143a0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80143a4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80143a8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80143ac:	b138      	cbz	r0, 80143be <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80143ae:	8022      	strh	r2, [r4, #0]
 80143b0:	8063      	strh	r3, [r4, #2]
 80143b2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80143b6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80143ba:	69ad      	ldr	r5, [r5, #24]
 80143bc:	e7e5      	b.n	801438a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80143be:	f9b4 0000 	ldrsh.w	r0, [r4]
 80143c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80143c6:	4290      	cmp	r0, r2
 80143c8:	4607      	mov	r7, r0
 80143ca:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80143ce:	460e      	mov	r6, r1
 80143d0:	bfa8      	it	ge
 80143d2:	4617      	movge	r7, r2
 80143d4:	4299      	cmp	r1, r3
 80143d6:	4472      	add	r2, lr
 80143d8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80143dc:	bfa8      	it	ge
 80143de:	461e      	movge	r6, r3
 80143e0:	4440      	add	r0, r8
 80143e2:	4471      	add	r1, lr
 80143e4:	4463      	add	r3, ip
 80143e6:	b200      	sxth	r0, r0
 80143e8:	8027      	strh	r7, [r4, #0]
 80143ea:	b212      	sxth	r2, r2
 80143ec:	8066      	strh	r6, [r4, #2]
 80143ee:	b209      	sxth	r1, r1
 80143f0:	b21b      	sxth	r3, r3
 80143f2:	4290      	cmp	r0, r2
 80143f4:	bfac      	ite	ge
 80143f6:	ebc7 0200 	rsbge	r2, r7, r0
 80143fa:	ebc7 0202 	rsblt	r2, r7, r2
 80143fe:	4299      	cmp	r1, r3
 8014400:	bfac      	ite	ge
 8014402:	ebc6 0301 	rsbge	r3, r6, r1
 8014406:	ebc6 0303 	rsblt	r3, r6, r3
 801440a:	80a2      	strh	r2, [r4, #4]
 801440c:	80e3      	strh	r3, [r4, #6]
 801440e:	e7d4      	b.n	80143ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8014410:	4620      	mov	r0, r4
 8014412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014416 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8014416:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801441a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801441e:	b383      	cbz	r3, 8014482 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014420:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014422:	b374      	cbz	r4, 8014482 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8014424:	f9b1 5000 	ldrsh.w	r5, [r1]
 8014428:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801442c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8014430:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8014434:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8014438:	b303      	cbz	r3, 801447c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801443a:	4668      	mov	r0, sp
 801443c:	1d21      	adds	r1, r4, #4
 801443e:	f8ad 5000 	strh.w	r5, [sp]
 8014442:	f8ad 6002 	strh.w	r6, [sp, #2]
 8014446:	f8ad 7004 	strh.w	r7, [sp, #4]
 801444a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801444e:	f7ff ff43 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8014452:	4668      	mov	r0, sp
 8014454:	f7ff ff83 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014458:	b980      	cbnz	r0, 801447c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801445a:	f8bd 3000 	ldrh.w	r3, [sp]
 801445e:	4669      	mov	r1, sp
 8014460:	88a2      	ldrh	r2, [r4, #4]
 8014462:	4620      	mov	r0, r4
 8014464:	1a9b      	subs	r3, r3, r2
 8014466:	88e2      	ldrh	r2, [r4, #6]
 8014468:	f8ad 3000 	strh.w	r3, [sp]
 801446c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014470:	1a9b      	subs	r3, r3, r2
 8014472:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	689b      	ldr	r3, [r3, #8]
 801447a:	4798      	blx	r3
 801447c:	69a4      	ldr	r4, [r4, #24]
 801447e:	2c00      	cmp	r4, #0
 8014480:	d1d8      	bne.n	8014434 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8014482:	b002      	add	sp, #8
 8014484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014488 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8014488:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801448a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801448e:	460d      	mov	r5, r1
 8014490:	4616      	mov	r6, r2
 8014492:	b323      	cbz	r3, 80144de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014494:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8014496:	b314      	cbz	r4, 80144de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8014498:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801449c:	b1eb      	cbz	r3, 80144da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801449e:	6828      	ldr	r0, [r5, #0]
 80144a0:	466b      	mov	r3, sp
 80144a2:	6869      	ldr	r1, [r5, #4]
 80144a4:	c303      	stmia	r3!, {r0, r1}
 80144a6:	4668      	mov	r0, sp
 80144a8:	1d21      	adds	r1, r4, #4
 80144aa:	f7ff ff15 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 80144ae:	4668      	mov	r0, sp
 80144b0:	f7ff ff55 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 80144b4:	b988      	cbnz	r0, 80144da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80144b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80144ba:	4669      	mov	r1, sp
 80144bc:	88a2      	ldrh	r2, [r4, #4]
 80144be:	4620      	mov	r0, r4
 80144c0:	1a9b      	subs	r3, r3, r2
 80144c2:	88e2      	ldrh	r2, [r4, #6]
 80144c4:	f8ad 3000 	strh.w	r3, [sp]
 80144c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80144cc:	1a9b      	subs	r3, r3, r2
 80144ce:	4632      	mov	r2, r6
 80144d0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80144d4:	6823      	ldr	r3, [r4, #0]
 80144d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80144d8:	4798      	blx	r3
 80144da:	69a4      	ldr	r4, [r4, #24]
 80144dc:	e7db      	b.n	8014496 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80144de:	b002      	add	sp, #8
 80144e0:	bd70      	pop	{r4, r5, r6, pc}

080144e2 <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:
 80144e2:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 80144e4:	4770      	bx	lr

080144e6 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:
 80144e6:	4770      	bx	lr

080144e8 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
 80144e8:	b510      	push	{r4, lr}
 80144ea:	4604      	mov	r4, r0
 80144ec:	218c      	movs	r1, #140	@ 0x8c
 80144ee:	f010 fd04 	bl	8024efa <_ZdlPvj>
 80144f2:	4620      	mov	r0, r4
 80144f4:	bd10      	pop	{r4, pc}
	...

080144f8 <_ZN8touchgfx14SwipeContainerD1Ev>:
 80144f8:	4b05      	ldr	r3, [pc, #20]	@ (8014510 <_ZN8touchgfx14SwipeContainerD1Ev+0x18>)
 80144fa:	b510      	push	{r4, lr}
 80144fc:	4604      	mov	r4, r0
 80144fe:	6003      	str	r3, [r0, #0]
 8014500:	f003 ffd4 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8014504:	3004      	adds	r0, #4
 8014506:	4621      	mov	r1, r4
 8014508:	f003 fff5 	bl	80184f6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 801450c:	4620      	mov	r0, r4
 801450e:	bd10      	pop	{r4, pc}
 8014510:	08027e4c 	.word	0x08027e4c

08014514 <_ZN8touchgfx14SwipeContainerD0Ev>:
 8014514:	b510      	push	{r4, lr}
 8014516:	4604      	mov	r4, r0
 8014518:	f7ff ffee 	bl	80144f8 <_ZN8touchgfx14SwipeContainerD1Ev>
 801451c:	21f8      	movs	r1, #248	@ 0xf8
 801451e:	4620      	mov	r0, r4
 8014520:	f010 fceb 	bl	8024efa <_ZdlPvj>
 8014524:	4620      	mov	r0, r4
 8014526:	bd10      	pop	{r4, pc}

08014528 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:
 8014528:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801452c:	2b06      	cmp	r3, #6
 801452e:	d118      	bne.n	8014562 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8014530:	790b      	ldrb	r3, [r1, #4]
 8014532:	2b01      	cmp	r3, #1
 8014534:	d115      	bne.n	8014562 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 8014536:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 801453a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801453e:	2b00      	cmp	r3, #0
 8014540:	8643      	strh	r3, [r0, #50]	@ 0x32
 8014542:	8682      	strh	r2, [r0, #52]	@ 0x34
 8014544:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 8014548:	da0e      	bge.n	8014568 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x40>
 801454a:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 801454e:	3a01      	subs	r2, #1
 8014550:	4291      	cmp	r1, r2
 8014552:	d007      	beq.n	8014564 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 8014554:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 8014556:	4252      	negs	r2, r2
 8014558:	4293      	cmp	r3, r2
 801455a:	dc03      	bgt.n	8014564 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3c>
 801455c:	2302      	movs	r3, #2
 801455e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014562:	4770      	bx	lr
 8014564:	2300      	movs	r3, #0
 8014566:	e7fa      	b.n	801455e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 8014568:	d0fb      	beq.n	8014562 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x3a>
 801456a:	b111      	cbz	r1, 8014572 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4a>
 801456c:	8dc2      	ldrh	r2, [r0, #46]	@ 0x2e
 801456e:	4293      	cmp	r3, r2
 8014570:	da01      	bge.n	8014576 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x4e>
 8014572:	2301      	movs	r3, #1
 8014574:	e7f3      	b.n	801455e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>
 8014576:	2303      	movs	r3, #3
 8014578:	e7f1      	b.n	801455e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x36>

0801457a <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:
 801457a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801457e:	2b06      	cmp	r3, #6
 8014580:	d114      	bne.n	80145ac <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014582:	790b      	ldrb	r3, [r1, #4]
 8014584:	b993      	cbnz	r3, 80145ac <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 8014586:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8014588:	f890 20f5 	ldrb.w	r2, [r0, #245]	@ 0xf5
 801458c:	8643      	strh	r3, [r0, #50]	@ 0x32
 801458e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014592:	8683      	strh	r3, [r0, #52]	@ 0x34
 8014594:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014598:	2b00      	cmp	r3, #0
 801459a:	da08      	bge.n	80145ae <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x34>
 801459c:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80145a0:	3b01      	subs	r3, #1
 80145a2:	429a      	cmp	r2, r3
 80145a4:	da02      	bge.n	80145ac <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80145a6:	2302      	movs	r3, #2
 80145a8:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80145ac:	4770      	bx	lr
 80145ae:	d0fd      	beq.n	80145ac <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80145b0:	2a00      	cmp	r2, #0
 80145b2:	d0fb      	beq.n	80145ac <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x32>
 80145b4:	2303      	movs	r3, #3
 80145b6:	e7f7      	b.n	80145a8 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x2e>

080145b8 <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:
 80145b8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80145ba:	4770      	bx	lr

080145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:
 80145bc:	b508      	push	{r3, lr}
 80145be:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80145c0:	303c      	adds	r0, #60	@ 0x3c
 80145c2:	f890 10b9 	ldrb.w	r1, [r0, #185]	@ 0xb9
 80145c6:	f930 3c34 	ldrsh.w	r3, [r0, #-52]
 80145ca:	fb03 2111 	mls	r1, r3, r1, r2
 80145ce:	2200      	movs	r2, #0
 80145d0:	b209      	sxth	r1, r1
 80145d2:	f7fa fc0d 	bl	800edf0 <_ZN8touchgfx8Drawable6moveToEss>
 80145d6:	bd08      	pop	{r3, pc}

080145d8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:
 80145d8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80145dc:	2b06      	cmp	r3, #6
 80145de:	d119      	bne.n	8014614 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x3c>
 80145e0:	88ca      	ldrh	r2, [r1, #6]
 80145e2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80145e4:	1a9b      	subs	r3, r3, r2
 80145e6:	894a      	ldrh	r2, [r1, #10]
 80145e8:	f890 10f5 	ldrb.w	r1, [r0, #245]	@ 0xf5
 80145ec:	4413      	add	r3, r2
 80145ee:	b21b      	sxth	r3, r3
 80145f0:	8603      	strh	r3, [r0, #48]	@ 0x30
 80145f2:	b921      	cbnz	r1, 80145fe <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80145f4:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 80145f6:	4293      	cmp	r3, r2
 80145f8:	dd01      	ble.n	80145fe <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x26>
 80145fa:	8602      	strh	r2, [r0, #48]	@ 0x30
 80145fc:	e008      	b.n	8014610 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 80145fe:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
 8014602:	3a01      	subs	r2, #1
 8014604:	4291      	cmp	r1, r2
 8014606:	d103      	bne.n	8014610 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x38>
 8014608:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
 801460a:	4252      	negs	r2, r2
 801460c:	4293      	cmp	r3, r2
 801460e:	dbf4      	blt.n	80145fa <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x22>
 8014610:	f7ff bfd4 	b.w	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014614:	4770      	bx	lr

08014616 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:
 8014616:	b538      	push	{r3, r4, r5, lr}
 8014618:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 801461c:	4604      	mov	r4, r0
 801461e:	2d0e      	cmp	r5, #14
 8014620:	d813      	bhi.n	801464a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x34>
 8014622:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 8014624:	230e      	movs	r3, #14
 8014626:	2100      	movs	r1, #0
 8014628:	4628      	mov	r0, r5
 801462a:	4252      	negs	r2, r2
 801462c:	b212      	sxth	r2, r2
 801462e:	f005 fd1f 	bl	801a070 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8014632:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014634:	4418      	add	r0, r3
 8014636:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014638:	4620      	mov	r0, r4
 801463a:	f7ff ffbf 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801463e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014642:	3301      	adds	r3, #1
 8014644:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014648:	bd38      	pop	{r3, r4, r5, pc}
 801464a:	2306      	movs	r3, #6
 801464c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014650:	2300      	movs	r3, #0
 8014652:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 8014656:	8603      	strh	r3, [r0, #48]	@ 0x30
 8014658:	e7ef      	b.n	801463a <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x24>

0801465a <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:
 801465a:	b538      	push	{r3, r4, r5, lr}
 801465c:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8014660:	4604      	mov	r4, r0
 8014662:	2d0e      	cmp	r5, #14
 8014664:	d812      	bhi.n	801468c <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x32>
 8014666:	230e      	movs	r3, #14
 8014668:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 801466c:	2100      	movs	r1, #0
 801466e:	4628      	mov	r0, r5
 8014670:	f005 fcfe 	bl	801a070 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 8014674:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014676:	1a18      	subs	r0, r3, r0
 8014678:	8620      	strh	r0, [r4, #48]	@ 0x30
 801467a:	4620      	mov	r0, r4
 801467c:	f7ff ff9e 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014680:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014684:	3301      	adds	r3, #1
 8014686:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801468a:	bd38      	pop	{r3, r4, r5, pc}
 801468c:	2306      	movs	r3, #6
 801468e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8014692:	2300      	movs	r3, #0
 8014694:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
 8014698:	8603      	strh	r3, [r0, #48]	@ 0x30
 801469a:	e7ef      	b.n	801467c <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x22>

0801469c <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:
 801469c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146a0:	4604      	mov	r4, r0
 80146a2:	2500      	movs	r5, #0
 80146a4:	f7fa fa4e 	bl	800eb44 <_ZN8touchgfx8DrawableC1Ev>
 80146a8:	af02      	add	r7, sp, #8
 80146aa:	4626      	mov	r6, r4
 80146ac:	4b18      	ldr	r3, [pc, #96]	@ (8014710 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x74>)
 80146ae:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80146b2:	62a5      	str	r5, [r4, #40]	@ 0x28
 80146b4:	f846 3b2c 	str.w	r3, [r6], #44
 80146b8:	4630      	mov	r0, r6
 80146ba:	f827 9d04 	strh.w	r9, [r7, #-4]!
 80146be:	4639      	mov	r1, r7
 80146c0:	f7fa fe62 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80146c4:	f104 085c 	add.w	r8, r4, #92	@ 0x5c
 80146c8:	4b12      	ldr	r3, [pc, #72]	@ (8014714 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0x78>)
 80146ca:	4639      	mov	r1, r7
 80146cc:	f8a4 5056 	strh.w	r5, [r4, #86]	@ 0x56
 80146d0:	4640      	mov	r0, r8
 80146d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80146d4:	f8a4 5058 	strh.w	r5, [r4, #88]	@ 0x58
 80146d8:	f8ad 9004 	strh.w	r9, [sp, #4]
 80146dc:	f7fa fe54 	bl	800f388 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80146e0:	462a      	mov	r2, r5
 80146e2:	4629      	mov	r1, r5
 80146e4:	4630      	mov	r0, r6
 80146e6:	f8a4 5088 	strh.w	r5, [r4, #136]	@ 0x88
 80146ea:	f7fa fad8 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 80146ee:	462a      	mov	r2, r5
 80146f0:	4629      	mov	r1, r5
 80146f2:	4640      	mov	r0, r8
 80146f4:	f7fa fad3 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 80146f8:	4631      	mov	r1, r6
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7ff fc70 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014700:	4620      	mov	r0, r4
 8014702:	4641      	mov	r1, r8
 8014704:	f7ff fc6c 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014708:	4620      	mov	r0, r4
 801470a:	b003      	add	sp, #12
 801470c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014710:	08027dbc 	.word	0x08027dbc
 8014714:	08028268 	.word	0x08028268

08014718 <_ZN8touchgfx14SwipeContainerC1Ev>:
 8014718:	b570      	push	{r4, r5, r6, lr}
 801471a:	4604      	mov	r4, r0
 801471c:	f7fa fa12 	bl	800eb44 <_ZN8touchgfx8DrawableC1Ev>
 8014720:	4b1b      	ldr	r3, [pc, #108]	@ (8014790 <_ZN8touchgfx14SwipeContainerC1Ev+0x78>)
 8014722:	2500      	movs	r5, #0
 8014724:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8014728:	6023      	str	r3, [r4, #0]
 801472a:	2306      	movs	r3, #6
 801472c:	62a5      	str	r5, [r4, #40]	@ 0x28
 801472e:	4630      	mov	r0, r6
 8014730:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014734:	2350      	movs	r3, #80	@ 0x50
 8014736:	f884 502d 	strb.w	r5, [r4, #45]	@ 0x2d
 801473a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 801473c:	231e      	movs	r3, #30
 801473e:	8625      	strh	r5, [r4, #48]	@ 0x30
 8014740:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8014742:	2314      	movs	r3, #20
 8014744:	8665      	strh	r5, [r4, #50]	@ 0x32
 8014746:	86a5      	strh	r5, [r4, #52]	@ 0x34
 8014748:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 801474c:	f7fa f9fa 	bl	800eb44 <_ZN8touchgfx8DrawableC1Ev>
 8014750:	4b10      	ldr	r3, [pc, #64]	@ (8014794 <_ZN8touchgfx14SwipeContainerC1Ev+0x7c>)
 8014752:	6665      	str	r5, [r4, #100]	@ 0x64
 8014754:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8014756:	2302      	movs	r3, #2
 8014758:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
 801475c:	f104 056c 	add.w	r5, r4, #108	@ 0x6c
 8014760:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8014764:	4628      	mov	r0, r5
 8014766:	f7ff ff99 	bl	801469c <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
 801476a:	f003 fe9f 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 801476e:	4621      	mov	r1, r4
 8014770:	3004      	adds	r0, #4
 8014772:	f003 ff69 	bl	8018648 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 8014776:	2301      	movs	r3, #1
 8014778:	4631      	mov	r1, r6
 801477a:	4620      	mov	r0, r4
 801477c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8014780:	f7ff fc2e 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014784:	4620      	mov	r0, r4
 8014786:	4629      	mov	r1, r5
 8014788:	f7ff fc2a 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801478c:	4620      	mov	r0, r4
 801478e:	bd70      	pop	{r4, r5, r6, pc}
 8014790:	08027e4c 	.word	0x08027e4c
 8014794:	08027f10 	.word	0x08027f10

08014798 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>:
 8014798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801479a:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801479e:	4604      	mov	r4, r0
 80147a0:	460d      	mov	r5, r1
 80147a2:	428b      	cmp	r3, r1
 80147a4:	d915      	bls.n	80147d2 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 80147a6:	f890 3089 	ldrb.w	r3, [r0, #137]	@ 0x89
 80147aa:	428b      	cmp	r3, r1
 80147ac:	d011      	beq.n	80147d2 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh+0x3a>
 80147ae:	f884 1089 	strb.w	r1, [r4, #137]	@ 0x89
 80147b2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80147b6:	a802      	add	r0, sp, #8
 80147b8:	f820 3d04 	strh.w	r3, [r0, #-4]!
 80147bc:	f007 f91e 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147c0:	fb15 f100 	smulbb	r1, r5, r0
 80147c4:	f9b4 2062 	ldrsh.w	r2, [r4, #98]	@ 0x62
 80147c8:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80147cc:	b209      	sxth	r1, r1
 80147ce:	f7fa fb0f 	bl	800edf0 <_ZN8touchgfx8Drawable6moveToEss>
 80147d2:	b003      	add	sp, #12
 80147d4:	bd30      	pop	{r4, r5, pc}

080147d6 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:
 80147d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147d8:	4604      	mov	r4, r0
 80147da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147de:	460d      	mov	r5, r1
 80147e0:	f884 1088 	strb.w	r1, [r4, #136]	@ 0x88
 80147e4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 80147e8:	4293      	cmp	r3, r2
 80147ea:	d01e      	beq.n	801482a <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x54>
 80147ec:	a802      	add	r0, sp, #8
 80147ee:	f820 3d04 	strh.w	r3, [r0, #-4]!
 80147f2:	f007 f903 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80147f6:	6823      	ldr	r3, [r4, #0]
 80147f8:	fb15 f000 	smulbb	r0, r5, r0
 80147fc:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80147fe:	4620      	mov	r0, r4
 8014800:	695b      	ldr	r3, [r3, #20]
 8014802:	4798      	blx	r3
 8014804:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8014808:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 801480c:	4620      	mov	r0, r4
 801480e:	f7fa faa2 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014812:	f894 1089 	ldrb.w	r1, [r4, #137]	@ 0x89
 8014816:	4620      	mov	r0, r4
 8014818:	42a9      	cmp	r1, r5
 801481a:	bf28      	it	cs
 801481c:	4629      	movcs	r1, r5
 801481e:	f7ff ffbb 	bl	8014798 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 8014822:	6823      	ldr	r3, [r4, #0]
 8014824:	4620      	mov	r0, r4
 8014826:	695b      	ldr	r3, [r3, #20]
 8014828:	4798      	blx	r3
 801482a:	b003      	add	sp, #12
 801482c:	bd30      	pop	{r4, r5, pc}

0801482e <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:
 801482e:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 8014832:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 8014836:	3101      	adds	r1, #1
 8014838:	fb91 f3f2 	sdiv	r3, r1, r2
 801483c:	fb02 1113 	mls	r1, r2, r3, r1
 8014840:	b2c9      	uxtb	r1, r1
 8014842:	f7ff bfa9 	b.w	8014798 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

08014846 <_ZN8touchgfx14SwipeContainer11animateLeftEv>:
 8014846:	b510      	push	{r4, lr}
 8014848:	4604      	mov	r4, r0
 801484a:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 801484e:	280a      	cmp	r0, #10
 8014850:	d813      	bhi.n	801487a <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x34>
 8014852:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014854:	2100      	movs	r1, #0
 8014856:	8922      	ldrh	r2, [r4, #8]
 8014858:	441a      	add	r2, r3
 801485a:	230a      	movs	r3, #10
 801485c:	b212      	sxth	r2, r2
 801485e:	f005 fc45 	bl	801a0ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014862:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014864:	1a18      	subs	r0, r3, r0
 8014866:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014868:	4620      	mov	r0, r4
 801486a:	f7ff fea7 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 801486e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014872:	3301      	adds	r3, #1
 8014874:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014878:	bd10      	pop	{r4, pc}
 801487a:	2306      	movs	r3, #6
 801487c:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014880:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014884:	2300      	movs	r3, #0
 8014886:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801488a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801488c:	f7ff ffcf 	bl	801482e <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 8014890:	e7ea      	b.n	8014868 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x22>

08014892 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:
 8014892:	f890 2088 	ldrb.w	r2, [r0, #136]	@ 0x88
 8014896:	f890 1089 	ldrb.w	r1, [r0, #137]	@ 0x89
 801489a:	4411      	add	r1, r2
 801489c:	3901      	subs	r1, #1
 801489e:	fb91 f3f2 	sdiv	r3, r1, r2
 80148a2:	fb02 1113 	mls	r1, r2, r3, r1
 80148a6:	b2c9      	uxtb	r1, r1
 80148a8:	f7ff bf76 	b.w	8014798 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>

080148ac <_ZN8touchgfx14SwipeContainer12animateRightEv>:
 80148ac:	b510      	push	{r4, lr}
 80148ae:	4604      	mov	r4, r0
 80148b0:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80148b4:	280a      	cmp	r0, #10
 80148b6:	d813      	bhi.n	80148e0 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x34>
 80148b8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80148ba:	2100      	movs	r1, #0
 80148bc:	8922      	ldrh	r2, [r4, #8]
 80148be:	1ad2      	subs	r2, r2, r3
 80148c0:	230a      	movs	r3, #10
 80148c2:	b212      	sxth	r2, r2
 80148c4:	f005 fc12 	bl	801a0ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80148c8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80148ca:	4418      	add	r0, r3
 80148cc:	8620      	strh	r0, [r4, #48]	@ 0x30
 80148ce:	4620      	mov	r0, r4
 80148d0:	f7ff fe74 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80148d4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80148d8:	3301      	adds	r3, #1
 80148da:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80148de:	bd10      	pop	{r4, pc}
 80148e0:	2306      	movs	r3, #6
 80148e2:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80148e6:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80148ea:	2300      	movs	r3, #0
 80148ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80148f0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80148f2:	f7ff ffce 	bl	8014892 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 80148f6:	e7ea      	b.n	80148ce <_ZN8touchgfx14SwipeContainer12animateRightEv+0x22>

080148f8 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 80148fe:	4604      	mov	r4, r0
 8014900:	428b      	cmp	r3, r1
 8014902:	d907      	bls.n	8014914 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh+0x1c>
 8014904:	306c      	adds	r0, #108	@ 0x6c
 8014906:	f7ff ff47 	bl	8014798 <_ZN8touchgfx14SwipeContainer13PageIndicator14setCurrentPageEh>
 801490a:	4620      	mov	r0, r4
 801490c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014910:	f7ff be54 	b.w	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014914:	bd10      	pop	{r4, pc}

08014916 <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:
 8014916:	b538      	push	{r3, r4, r5, lr}
 8014918:	4604      	mov	r4, r0
 801491a:	303c      	adds	r0, #60	@ 0x3c
 801491c:	460d      	mov	r5, r1
 801491e:	f000 f9cb 	bl	8014cb8 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
 8014922:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 8014926:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 801492a:	3101      	adds	r1, #1
 801492c:	b2c9      	uxtb	r1, r1
 801492e:	f7ff ff52 	bl	80147d6 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8014932:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 8014936:	4620      	mov	r0, r4
 8014938:	f7ff ffde 	bl	80148f8 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 801493c:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 8014940:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014944:	4620      	mov	r0, r4
 8014946:	f7fa fa06 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801494a:	bd38      	pop	{r3, r4, r5, pc}

0801494c <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:
 801494c:	b538      	push	{r3, r4, r5, lr}
 801494e:	f890 30f4 	ldrb.w	r3, [r0, #244]	@ 0xf4
 8014952:	4604      	mov	r4, r0
 8014954:	b1e3      	cbz	r3, 8014990 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 8014956:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8014958:	b1d3      	cbz	r3, 8014990 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x44>
 801495a:	428b      	cmp	r3, r1
 801495c:	d125      	bne.n	80149aa <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x5e>
 801495e:	4619      	mov	r1, r3
 8014960:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8014964:	f000 fa28 	bl	8014db8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
 8014968:	f894 10f4 	ldrb.w	r1, [r4, #244]	@ 0xf4
 801496c:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014970:	3901      	subs	r1, #1
 8014972:	b2c9      	uxtb	r1, r1
 8014974:	f7ff ff2f 	bl	80147d6 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
 8014978:	f894 50f4 	ldrb.w	r5, [r4, #244]	@ 0xf4
 801497c:	b94d      	cbnz	r5, 8014992 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x46>
 801497e:	6823      	ldr	r3, [r4, #0]
 8014980:	4620      	mov	r0, r4
 8014982:	695b      	ldr	r3, [r3, #20]
 8014984:	4798      	blx	r3
 8014986:	462a      	mov	r2, r5
 8014988:	4629      	mov	r1, r5
 801498a:	4620      	mov	r0, r4
 801498c:	f7fa f9e3 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014990:	bd38      	pop	{r3, r4, r5, pc}
 8014992:	f894 10f5 	ldrb.w	r1, [r4, #245]	@ 0xf5
 8014996:	3d01      	subs	r5, #1
 8014998:	4620      	mov	r0, r4
 801499a:	42a9      	cmp	r1, r5
 801499c:	bfa8      	it	ge
 801499e:	4629      	movge	r1, r5
 80149a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149a4:	b2c9      	uxtb	r1, r1
 80149a6:	f7ff bfa7 	b.w	80148f8 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>
 80149aa:	699b      	ldr	r3, [r3, #24]
 80149ac:	e7d4      	b.n	8014958 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0xc>

080149ae <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>:
 80149ae:	b510      	push	{r4, lr}
 80149b0:	4604      	mov	r4, r0
 80149b2:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 80149b6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80149ba:	4298      	cmp	r0, r3
 80149bc:	d812      	bhi.n	80149e4 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x36>
 80149be:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 80149c0:	8922      	ldrh	r2, [r4, #8]
 80149c2:	440a      	add	r2, r1
 80149c4:	2100      	movs	r1, #0
 80149c6:	b212      	sxth	r2, r2
 80149c8:	f005 fb90 	bl	801a0ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80149cc:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80149ce:	1a18      	subs	r0, r3, r0
 80149d0:	8620      	strh	r0, [r4, #48]	@ 0x30
 80149d2:	4620      	mov	r0, r4
 80149d4:	f7ff fdf2 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 80149d8:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80149dc:	3301      	adds	r3, #1
 80149de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80149e2:	bd10      	pop	{r4, pc}
 80149e4:	2306      	movs	r3, #6
 80149e6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80149ea:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80149ee:	2300      	movs	r3, #0
 80149f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80149f4:	8623      	strh	r3, [r4, #48]	@ 0x30
 80149f6:	f7ff ff1a 	bl	801482e <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
 80149fa:	e7ea      	b.n	80149d2 <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv+0x24>

080149fc <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>:
 80149fc:	b510      	push	{r4, lr}
 80149fe:	4604      	mov	r4, r0
 8014a00:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8014a04:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014a08:	4298      	cmp	r0, r3
 8014a0a:	d812      	bhi.n	8014a32 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x36>
 8014a0c:	8e61      	ldrh	r1, [r4, #50]	@ 0x32
 8014a0e:	8922      	ldrh	r2, [r4, #8]
 8014a10:	1a52      	subs	r2, r2, r1
 8014a12:	2100      	movs	r1, #0
 8014a14:	b212      	sxth	r2, r2
 8014a16:	f005 fb69 	bl	801a0ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8014a1a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014a1c:	4418      	add	r0, r3
 8014a1e:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014a20:	4620      	mov	r0, r4
 8014a22:	f7ff fdcb 	bl	80145bc <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 8014a26:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014a30:	bd10      	pop	{r4, pc}
 8014a32:	2306      	movs	r3, #6
 8014a34:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8014a38:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014a42:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014a44:	f7ff ff25 	bl	8014892 <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
 8014a48:	e7ea      	b.n	8014a20 <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv+0x24>

08014a4a <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:
 8014a4a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014a4e:	b90b      	cbnz	r3, 8014a54 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0xa>
 8014a50:	f7ff bde1 	b.w	8014616 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d101      	bne.n	8014a5c <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x12>
 8014a58:	f7ff bdff 	b.w	801465a <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
 8014a5c:	2b02      	cmp	r3, #2
 8014a5e:	d101      	bne.n	8014a64 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
 8014a60:	f7ff bef1 	b.w	8014846 <_ZN8touchgfx14SwipeContainer11animateLeftEv>
 8014a64:	2b03      	cmp	r3, #3
 8014a66:	d101      	bne.n	8014a6c <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x22>
 8014a68:	f7ff bf20 	b.w	80148ac <_ZN8touchgfx14SwipeContainer12animateRightEv>
 8014a6c:	2b04      	cmp	r3, #4
 8014a6e:	d101      	bne.n	8014a74 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2a>
 8014a70:	f7ff bf9d 	b.w	80149ae <_ZN8touchgfx14SwipeContainer21animateLeftWithButtonEv>
 8014a74:	2b05      	cmp	r3, #5
 8014a76:	d101      	bne.n	8014a7c <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x32>
 8014a78:	f7ff bfc0 	b.w	80149fc <_ZN8touchgfx14SwipeContainer22animateRightWithButtonEv>
 8014a7c:	4770      	bx	lr

08014a7e <_ZNK8touchgfx10ListLayout12getDirectionEv>:
 8014a7e:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8014a82:	4770      	bx	lr

08014a84 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:
 8014a84:	b538      	push	{r3, r4, r5, lr}
 8014a86:	7882      	ldrb	r2, [r0, #2]
 8014a88:	4604      	mov	r4, r0
 8014a8a:	460d      	mov	r5, r1
 8014a8c:	6843      	ldr	r3, [r0, #4]
 8014a8e:	b98a      	cbnz	r2, 8014ab4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x30>
 8014a90:	4299      	cmp	r1, r3
 8014a92:	d101      	bne.n	8014a98 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8014a94:	2301      	movs	r3, #1
 8014a96:	7083      	strb	r3, [r0, #2]
 8014a98:	6863      	ldr	r3, [r4, #4]
 8014a9a:	42ab      	cmp	r3, r5
 8014a9c:	d009      	beq.n	8014ab2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8014a9e:	7a23      	ldrb	r3, [r4, #8]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d11b      	bne.n	8014adc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x58>
 8014aa4:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014aa8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014aac:	429a      	cmp	r2, r3
 8014aae:	bfb8      	it	lt
 8014ab0:	8023      	strhlt	r3, [r4, #0]
 8014ab2:	bd38      	pop	{r3, r4, r5, pc}
 8014ab4:	7a02      	ldrb	r2, [r0, #8]
 8014ab6:	2a01      	cmp	r2, #1
 8014ab8:	d108      	bne.n	8014acc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x48>
 8014aba:	895b      	ldrh	r3, [r3, #10]
 8014abc:	88c9      	ldrh	r1, [r1, #6]
 8014abe:	1ac9      	subs	r1, r1, r3
 8014ac0:	682b      	ldr	r3, [r5, #0]
 8014ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ac4:	b209      	sxth	r1, r1
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	4798      	blx	r3
 8014aca:	e7e5      	b.n	8014a98 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8014acc:	2a02      	cmp	r2, #2
 8014ace:	d1e3      	bne.n	8014a98 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x14>
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	8889      	ldrh	r1, [r1, #4]
 8014ad4:	1ac9      	subs	r1, r1, r3
 8014ad6:	682b      	ldr	r3, [r5, #0]
 8014ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ada:	e7f3      	b.n	8014ac4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x40>
 8014adc:	2b02      	cmp	r3, #2
 8014ade:	d1e8      	bne.n	8014ab2 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2e>
 8014ae0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014ae4:	e7e0      	b.n	8014aa8 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x24>

08014ae6 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
 8014ae6:	4770      	bx	lr

08014ae8 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 8014ae8:	4770      	bx	lr

08014aea <_ZN8touchgfx10ListLayoutD1Ev>:
 8014aea:	4770      	bx	lr

08014aec <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
 8014aec:	b430      	push	{r4, r5}
 8014aee:	68c5      	ldr	r5, [r0, #12]
 8014af0:	4603      	mov	r3, r0
 8014af2:	6844      	ldr	r4, [r0, #4]
 8014af4:	106a      	asrs	r2, r5, #1
 8014af6:	07ed      	lsls	r5, r5, #31
 8014af8:	689b      	ldr	r3, [r3, #8]
 8014afa:	eb04 0002 	add.w	r0, r4, r2
 8014afe:	bf48      	it	mi
 8014b00:	58a2      	ldrmi	r2, [r4, r2]
 8014b02:	bc30      	pop	{r4, r5}
 8014b04:	bf48      	it	mi
 8014b06:	58d3      	ldrmi	r3, [r2, r3]
 8014b08:	4718      	bx	r3

08014b0a <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
 8014b0a:	6843      	ldr	r3, [r0, #4]
 8014b0c:	b12b      	cbz	r3, 8014b1a <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x10>
 8014b0e:	6883      	ldr	r3, [r0, #8]
 8014b10:	b92b      	cbnz	r3, 8014b1e <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x14>
 8014b12:	68c0      	ldr	r0, [r0, #12]
 8014b14:	f000 0001 	and.w	r0, r0, #1
 8014b18:	4770      	bx	lr
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	4770      	bx	lr
 8014b1e:	2001      	movs	r0, #1
 8014b20:	4770      	bx	lr

08014b22 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
 8014b22:	b430      	push	{r4, r5}
 8014b24:	68c5      	ldr	r5, [r0, #12]
 8014b26:	4603      	mov	r3, r0
 8014b28:	6844      	ldr	r4, [r0, #4]
 8014b2a:	106a      	asrs	r2, r5, #1
 8014b2c:	07ed      	lsls	r5, r5, #31
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	eb04 0002 	add.w	r0, r4, r2
 8014b34:	bf48      	it	mi
 8014b36:	58a2      	ldrmi	r2, [r4, r2]
 8014b38:	bc30      	pop	{r4, r5}
 8014b3a:	bf48      	it	mi
 8014b3c:	58d3      	ldrmi	r3, [r2, r3]
 8014b3e:	4718      	bx	r3

08014b40 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
 8014b40:	6843      	ldr	r3, [r0, #4]
 8014b42:	b12b      	cbz	r3, 8014b50 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x10>
 8014b44:	6883      	ldr	r3, [r0, #8]
 8014b46:	b92b      	cbnz	r3, 8014b54 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x14>
 8014b48:	68c0      	ldr	r0, [r0, #12]
 8014b4a:	f000 0001 	and.w	r0, r0, #1
 8014b4e:	4770      	bx	lr
 8014b50:	4618      	mov	r0, r3
 8014b52:	4770      	bx	lr
 8014b54:	2001      	movs	r0, #1
 8014b56:	4770      	bx	lr

08014b58 <_ZN8touchgfx10ListLayoutD0Ev>:
 8014b58:	b510      	push	{r4, lr}
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	2130      	movs	r1, #48	@ 0x30
 8014b5e:	f010 f9cc 	bl	8024efa <_ZdlPvj>
 8014b62:	4620      	mov	r0, r4
 8014b64:	bd10      	pop	{r4, pc}

08014b66 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 8014b66:	b510      	push	{r4, lr}
 8014b68:	4604      	mov	r4, r0
 8014b6a:	2110      	movs	r1, #16
 8014b6c:	f010 f9c5 	bl	8024efa <_ZdlPvj>
 8014b70:	4620      	mov	r0, r4
 8014b72:	bd10      	pop	{r4, pc}

08014b74 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 8014b74:	b510      	push	{r4, lr}
 8014b76:	4604      	mov	r4, r0
 8014b78:	2110      	movs	r1, #16
 8014b7a:	f010 f9be 	bl	8024efa <_ZdlPvj>
 8014b7e:	4620      	mov	r0, r4
 8014b80:	bd10      	pop	{r4, pc}

08014b82 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:
 8014b82:	4603      	mov	r3, r0
 8014b84:	4608      	mov	r0, r1
 8014b86:	789a      	ldrb	r2, [r3, #2]
 8014b88:	b992      	cbnz	r2, 8014bb0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2e>
 8014b8a:	685a      	ldr	r2, [r3, #4]
 8014b8c:	428a      	cmp	r2, r1
 8014b8e:	d102      	bne.n	8014b96 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x14>
 8014b90:	2201      	movs	r2, #1
 8014b92:	709a      	strb	r2, [r3, #2]
 8014b94:	4770      	bx	lr
 8014b96:	7a1a      	ldrb	r2, [r3, #8]
 8014b98:	2a01      	cmp	r2, #1
 8014b9a:	d104      	bne.n	8014ba6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x24>
 8014b9c:	88ca      	ldrh	r2, [r1, #6]
 8014b9e:	8949      	ldrh	r1, [r1, #10]
 8014ba0:	440a      	add	r2, r1
 8014ba2:	801a      	strh	r2, [r3, #0]
 8014ba4:	4770      	bx	lr
 8014ba6:	2a02      	cmp	r2, #2
 8014ba8:	d116      	bne.n	8014bd8 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014baa:	888a      	ldrh	r2, [r1, #4]
 8014bac:	8909      	ldrh	r1, [r1, #8]
 8014bae:	e7f7      	b.n	8014ba0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x1e>
 8014bb0:	7a1a      	ldrb	r2, [r3, #8]
 8014bb2:	2a01      	cmp	r2, #1
 8014bb4:	d107      	bne.n	8014bc6 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x44>
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	8959      	ldrh	r1, [r3, #10]
 8014bba:	88c3      	ldrh	r3, [r0, #6]
 8014bbc:	4419      	add	r1, r3
 8014bbe:	6803      	ldr	r3, [r0, #0]
 8014bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bc2:	b209      	sxth	r1, r1
 8014bc4:	4718      	bx	r3
 8014bc6:	2a02      	cmp	r2, #2
 8014bc8:	d106      	bne.n	8014bd8 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x56>
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	8919      	ldrh	r1, [r3, #8]
 8014bce:	8883      	ldrh	r3, [r0, #4]
 8014bd0:	4419      	add	r1, r3
 8014bd2:	6803      	ldr	r3, [r0, #0]
 8014bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bd6:	e7f4      	b.n	8014bc2 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x40>
 8014bd8:	4770      	bx	lr

08014bda <_ZN8touchgfx10ListLayout9removeAllEv>:
 8014bda:	2200      	movs	r2, #0
 8014bdc:	b510      	push	{r4, lr}
 8014bde:	4604      	mov	r4, r0
 8014be0:	85c2      	strh	r2, [r0, #46]	@ 0x2e
 8014be2:	4611      	mov	r1, r2
 8014be4:	f7fa f8b7 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014be8:	4620      	mov	r0, r4
 8014bea:	f7ff fa06 	bl	8013ffa <_ZN8touchgfx9Container9removeAllEv>
 8014bee:	6960      	ldr	r0, [r4, #20]
 8014bf0:	b120      	cbz	r0, 8014bfc <_ZN8touchgfx10ListLayout9removeAllEv+0x22>
 8014bf2:	6803      	ldr	r3, [r0, #0]
 8014bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014bfa:	4718      	bx	r3
 8014bfc:	bd10      	pop	{r4, pc}
	...

08014c00 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:
 8014c00:	b530      	push	{r4, r5, lr}
 8014c02:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014c06:	b085      	sub	sp, #20
 8014c08:	4604      	mov	r4, r0
 8014c0a:	428b      	cmp	r3, r1
 8014c0c:	d017      	beq.n	8014c3e <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014c0e:	2500      	movs	r5, #0
 8014c10:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c
 8014c14:	85c5      	strh	r5, [r0, #46]	@ 0x2e
 8014c16:	462a      	mov	r2, r5
 8014c18:	4629      	mov	r1, r5
 8014c1a:	f7fa f89c 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014c1e:	4b09      	ldr	r3, [pc, #36]	@ (8014c44 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x44>)
 8014c20:	4620      	mov	r0, r4
 8014c22:	4669      	mov	r1, sp
 8014c24:	e9cd 3400 	strd	r3, r4, [sp]
 8014c28:	4b07      	ldr	r3, [pc, #28]	@ (8014c48 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x48>)
 8014c2a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014c32:	4798      	blx	r3
 8014c34:	6960      	ldr	r0, [r4, #20]
 8014c36:	b110      	cbz	r0, 8014c3e <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x3e>
 8014c38:	6803      	ldr	r3, [r0, #0]
 8014c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c3c:	4798      	blx	r3
 8014c3e:	b005      	add	sp, #20
 8014c40:	bd30      	pop	{r4, r5, pc}
 8014c42:	bf00      	nop
 8014c44:	08027ee0 	.word	0x08027ee0
 8014c48:	08014cb1 	.word	0x08014cb1

08014c4c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014c52:	460d      	mov	r5, r1
 8014c54:	4604      	mov	r4, r0
 8014c56:	4611      	mov	r1, r2
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d002      	beq.n	8014c62 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x16>
 8014c5c:	2b02      	cmp	r3, #2
 8014c5e:	d015      	beq.n	8014c8c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x40>
 8014c60:	bd38      	pop	{r3, r4, r5, pc}
 8014c62:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8014c66:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	bfb8      	it	lt
 8014c6e:	8103      	strhlt	r3, [r0, #8]
 8014c70:	8943      	ldrh	r3, [r0, #10]
 8014c72:	896a      	ldrh	r2, [r5, #10]
 8014c74:	4413      	add	r3, r2
 8014c76:	460a      	mov	r2, r1
 8014c78:	2100      	movs	r1, #0
 8014c7a:	8143      	strh	r3, [r0, #10]
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	f7fa f80e 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 8014c82:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014c84:	896a      	ldrh	r2, [r5, #10]
 8014c86:	4413      	add	r3, r2
 8014c88:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014c8a:	e7e9      	b.n	8014c60 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x14>
 8014c8c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8014c90:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	bfb8      	it	lt
 8014c98:	8143      	strhlt	r3, [r0, #10]
 8014c9a:	8903      	ldrh	r3, [r0, #8]
 8014c9c:	892a      	ldrh	r2, [r5, #8]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	8103      	strh	r3, [r0, #8]
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	f7f9 fffa 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 8014caa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014cac:	892a      	ldrh	r2, [r5, #8]
 8014cae:	e7ea      	b.n	8014c86 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x3a>

08014cb0 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:
 8014cb0:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 8014cb4:	f7ff bfca 	b.w	8014c4c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>

08014cb8 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:
 8014cb8:	b570      	push	{r4, r5, r6, lr}
 8014cba:	4604      	mov	r4, r0
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	f7ff fff7 	bl	8014cb0 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	4629      	mov	r1, r5
 8014cc6:	f7ff f98b 	bl	8013fe0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014cca:	6960      	ldr	r0, [r4, #20]
 8014ccc:	b120      	cbz	r0, 8014cd8 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x20>
 8014cce:	6803      	ldr	r3, [r0, #0]
 8014cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cd6:	4718      	bx	r3
 8014cd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08014cdc <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:
 8014cdc:	b530      	push	{r4, r5, lr}
 8014cde:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8014ce0:	b089      	sub	sp, #36	@ 0x24
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	4615      	mov	r5, r2
 8014ce6:	b92b      	cbnz	r3, 8014cf4 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x18>
 8014ce8:	6803      	ldr	r3, [r0, #0]
 8014cea:	4611      	mov	r1, r2
 8014cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014cee:	4798      	blx	r3
 8014cf0:	b009      	add	sp, #36	@ 0x24
 8014cf2:	bd30      	pop	{r4, r5, pc}
 8014cf4:	f7ff f9c4 	bl	8014080 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
 8014cf8:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	a904      	add	r1, sp, #16
 8014d00:	f88d 200c 	strb.w	r2, [sp, #12]
 8014d04:	4620      	mov	r0, r4
 8014d06:	4a0e      	ldr	r2, [pc, #56]	@ (8014d40 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x64>)
 8014d08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014d0c:	9204      	str	r2, [sp, #16]
 8014d0e:	aa01      	add	r2, sp, #4
 8014d10:	f88d 3006 	strb.w	r3, [sp, #6]
 8014d14:	9205      	str	r2, [sp, #20]
 8014d16:	4a0b      	ldr	r2, [pc, #44]	@ (8014d44 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x68>)
 8014d18:	9502      	str	r5, [sp, #8]
 8014d1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014d1e:	6823      	ldr	r3, [r4, #0]
 8014d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014d22:	4798      	blx	r3
 8014d24:	4620      	mov	r0, r4
 8014d26:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014d2a:	4629      	mov	r1, r5
 8014d2c:	f7ff ff8e 	bl	8014c4c <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
 8014d30:	6960      	ldr	r0, [r4, #20]
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d0dc      	beq.n	8014cf0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014d36:	6803      	ldr	r3, [r0, #0]
 8014d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d3a:	4798      	blx	r3
 8014d3c:	e7d8      	b.n	8014cf0 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x14>
 8014d3e:	bf00      	nop
 8014d40:	08027ef8 	.word	0x08027ef8
 8014d44:	08014b83 	.word	0x08014b83

08014d48 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8014d4e:	4604      	mov	r4, r0
 8014d50:	460d      	mov	r5, r1
 8014d52:	2b01      	cmp	r3, #1
 8014d54:	d002      	beq.n	8014d5c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x14>
 8014d56:	2b02      	cmp	r3, #2
 8014d58:	d018      	beq.n	8014d8c <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x44>
 8014d5a:	bd38      	pop	{r3, r4, r5, pc}
 8014d5c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8014d60:	4293      	cmp	r3, r2
 8014d62:	8943      	ldrh	r3, [r0, #10]
 8014d64:	bfc8      	it	gt
 8014d66:	8102      	strhgt	r2, [r0, #8]
 8014d68:	894a      	ldrh	r2, [r1, #10]
 8014d6a:	1a9b      	subs	r3, r3, r2
 8014d6c:	8143      	strh	r3, [r0, #10]
 8014d6e:	4628      	mov	r0, r5
 8014d70:	680b      	ldr	r3, [r1, #0]
 8014d72:	2100      	movs	r1, #0
 8014d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d76:	4798      	blx	r3
 8014d78:	682b      	ldr	r3, [r5, #0]
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d80:	4798      	blx	r3
 8014d82:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014d84:	896a      	ldrh	r2, [r5, #10]
 8014d86:	1a9b      	subs	r3, r3, r2
 8014d88:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8014d8a:	e7e6      	b.n	8014d5a <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x12>
 8014d8c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8014d90:	4293      	cmp	r3, r2
 8014d92:	8903      	ldrh	r3, [r0, #8]
 8014d94:	bfc8      	it	gt
 8014d96:	8142      	strhgt	r2, [r0, #10]
 8014d98:	890a      	ldrh	r2, [r1, #8]
 8014d9a:	1a9b      	subs	r3, r3, r2
 8014d9c:	8103      	strh	r3, [r0, #8]
 8014d9e:	4628      	mov	r0, r5
 8014da0:	680b      	ldr	r3, [r1, #0]
 8014da2:	2100      	movs	r1, #0
 8014da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014da6:	4798      	blx	r3
 8014da8:	682b      	ldr	r3, [r5, #0]
 8014daa:	2100      	movs	r1, #0
 8014dac:	4628      	mov	r0, r5
 8014dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014db0:	4798      	blx	r3
 8014db2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8014db4:	892a      	ldrh	r2, [r5, #8]
 8014db6:	e7e6      	b.n	8014d86 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x3e>

08014db8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:
 8014db8:	b530      	push	{r4, r5, lr}
 8014dba:	b089      	sub	sp, #36	@ 0x24
 8014dbc:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	460d      	mov	r5, r1
 8014dc4:	f88d 200c 	strb.w	r2, [sp, #12]
 8014dc8:	4604      	mov	r4, r0
 8014dca:	4a12      	ldr	r2, [pc, #72]	@ (8014e14 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x5c>)
 8014dcc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014dd0:	9204      	str	r2, [sp, #16]
 8014dd2:	aa01      	add	r2, sp, #4
 8014dd4:	f88d 3006 	strb.w	r3, [sp, #6]
 8014dd8:	9205      	str	r2, [sp, #20]
 8014dda:	4a0f      	ldr	r2, [pc, #60]	@ (8014e18 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x60>)
 8014ddc:	9102      	str	r1, [sp, #8]
 8014dde:	a904      	add	r1, sp, #16
 8014de0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014de8:	4798      	blx	r3
 8014dea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014dee:	b14b      	cbz	r3, 8014e04 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x4c>
 8014df0:	4629      	mov	r1, r5
 8014df2:	4620      	mov	r0, r4
 8014df4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014df8:	f7ff ffa6 	bl	8014d48 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
 8014dfc:	4629      	mov	r1, r5
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f7ff f927 	bl	8014052 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 8014e04:	6960      	ldr	r0, [r4, #20]
 8014e06:	b110      	cbz	r0, 8014e0e <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x56>
 8014e08:	6803      	ldr	r3, [r0, #0]
 8014e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e0c:	4798      	blx	r3
 8014e0e:	b009      	add	sp, #36	@ 0x24
 8014e10:	bd30      	pop	{r4, r5, pc}
 8014e12:	bf00      	nop
 8014e14:	08027ef8 	.word	0x08027ef8
 8014e18:	08014a85 	.word	0x08014a85

08014e1c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8014e1c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014e20:	4770      	bx	lr

08014e22 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8014e22:	4770      	bx	lr

08014e24 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8014e24:	4770      	bx	lr

08014e26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8014e26:	6803      	ldr	r3, [r0, #0]
 8014e28:	b513      	push	{r0, r1, r4, lr}
 8014e2a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8014e2e:	2300      	movs	r3, #0
 8014e30:	e9cd 3300 	strd	r3, r3, [sp]
 8014e34:	466b      	mov	r3, sp
 8014e36:	47a0      	blx	r4
 8014e38:	b002      	add	sp, #8
 8014e3a:	bd10      	pop	{r4, pc}

08014e3c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014e42:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014e46:	4770      	bx	lr

08014e48 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8014e48:	2301      	movs	r3, #1
 8014e4a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8014e4e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8014e52:	4770      	bx	lr

08014e54 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8014e54:	6843      	ldr	r3, [r0, #4]
 8014e56:	2201      	movs	r2, #1
 8014e58:	725a      	strb	r2, [r3, #9]
 8014e5a:	6840      	ldr	r0, [r0, #4]
 8014e5c:	6803      	ldr	r3, [r0, #0]
 8014e5e:	691b      	ldr	r3, [r3, #16]
 8014e60:	4718      	bx	r3

08014e62 <_ZN8touchgfx3HAL8flushDMAEv>:
 8014e62:	6840      	ldr	r0, [r0, #4]
 8014e64:	6803      	ldr	r3, [r0, #0]
 8014e66:	689b      	ldr	r3, [r3, #8]
 8014e68:	4718      	bx	r3

08014e6a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8014e6a:	b530      	push	{r4, r5, lr}
 8014e6c:	b08b      	sub	sp, #44	@ 0x2c
 8014e6e:	6804      	ldr	r4, [r0, #0]
 8014e70:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8014e74:	9509      	str	r5, [sp, #36]	@ 0x24
 8014e76:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8014e7a:	9508      	str	r5, [sp, #32]
 8014e7c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8014e80:	9507      	str	r5, [sp, #28]
 8014e82:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8014e86:	9506      	str	r5, [sp, #24]
 8014e88:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8014e8c:	9505      	str	r5, [sp, #20]
 8014e8e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8014e92:	9504      	str	r5, [sp, #16]
 8014e94:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8014e98:	9503      	str	r5, [sp, #12]
 8014e9a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8014e9e:	9502      	str	r5, [sp, #8]
 8014ea0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8014ea4:	e9cd 3500 	strd	r3, r5, [sp]
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8014eac:	2200      	movs	r2, #0
 8014eae:	47a0      	blx	r4
 8014eb0:	b00b      	add	sp, #44	@ 0x2c
 8014eb2:	bd30      	pop	{r4, r5, pc}

08014eb4 <_ZN8touchgfx3HAL10beginFrameEv>:
 8014eb4:	4b04      	ldr	r3, [pc, #16]	@ (8014ec8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	b123      	cbz	r3, 8014ec4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8014eba:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8014ebe:	f080 0001 	eor.w	r0, r0, #1
 8014ec2:	4770      	bx	lr
 8014ec4:	2001      	movs	r0, #1
 8014ec6:	4770      	bx	lr
 8014ec8:	2401bb36 	.word	0x2401bb36

08014ecc <_ZN8touchgfx3HAL8endFrameEv>:
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	4604      	mov	r4, r0
 8014ed0:	6840      	ldr	r0, [r0, #4]
 8014ed2:	6803      	ldr	r3, [r0, #0]
 8014ed4:	689b      	ldr	r3, [r3, #8]
 8014ed6:	4798      	blx	r3
 8014ed8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8014edc:	b113      	cbz	r3, 8014ee4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8014ede:	2301      	movs	r3, #1
 8014ee0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8014ee4:	bd10      	pop	{r4, pc}

08014ee6 <_ZN8touchgfx3HAL10initializeEv>:
 8014ee6:	b510      	push	{r4, lr}
 8014ee8:	4604      	mov	r4, r0
 8014eea:	f7fc fdd7 	bl	8011a9c <_ZN8touchgfx10OSWrappers10initializeEv>
 8014eee:	f7fc fa85 	bl	80113fc <_ZN8touchgfx4GPIO4initEv>
 8014ef2:	6860      	ldr	r0, [r4, #4]
 8014ef4:	6803      	ldr	r3, [r0, #0]
 8014ef6:	68db      	ldr	r3, [r3, #12]
 8014ef8:	4798      	blx	r3
 8014efa:	68e0      	ldr	r0, [r4, #12]
 8014efc:	6803      	ldr	r3, [r0, #0]
 8014efe:	689b      	ldr	r3, [r3, #8]
 8014f00:	4798      	blx	r3
 8014f02:	6823      	ldr	r3, [r4, #0]
 8014f04:	4620      	mov	r0, r4
 8014f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0c:	4718      	bx	r3

08014f0e <_ZN8touchgfx3HAL9taskEntryEv>:
 8014f0e:	b508      	push	{r3, lr}
 8014f10:	6803      	ldr	r3, [r0, #0]
 8014f12:	4604      	mov	r4, r0
 8014f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014f18:	4798      	blx	r3
 8014f1a:	6823      	ldr	r3, [r4, #0]
 8014f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f1e:	4620      	mov	r0, r4
 8014f20:	4798      	blx	r3
 8014f22:	f7fc fe31 	bl	8011b88 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8014f26:	6823      	ldr	r3, [r4, #0]
 8014f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f2a:	e7f8      	b.n	8014f1e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08014f2c <_ZN8touchgfx3HAL4tickEv>:
 8014f2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014f2e:	6803      	ldr	r3, [r0, #0]
 8014f30:	4604      	mov	r4, r0
 8014f32:	4d5b      	ldr	r5, [pc, #364]	@ (80150a0 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8014f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8014f38:	4798      	blx	r3
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	f000 8095 	beq.w	801506a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8014f40:	2001      	movs	r0, #1
 8014f42:	2600      	movs	r6, #0
 8014f44:	f7fc fa62 	bl	801140c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8014f48:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8014f4c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8014f50:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014f54:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8014f58:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8014f5c:	b133      	cbz	r3, 8014f6c <_ZN8touchgfx3HAL4tickEv+0x40>
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	4620      	mov	r0, r4
 8014f62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8014f66:	4798      	blx	r3
 8014f68:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8014f6c:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8014f70:	2601      	movs	r6, #1
 8014f72:	6862      	ldr	r2, [r4, #4]
 8014f74:	f083 0301 	eor.w	r3, r3, #1
 8014f78:	702e      	strb	r6, [r5, #0]
 8014f7a:	7253      	strb	r3, [r2, #9]
 8014f7c:	f003 fa96 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8014f80:	6803      	ldr	r3, [r0, #0]
 8014f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014f84:	4798      	blx	r3
 8014f86:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014f8a:	b90b      	cbnz	r3, 8014f90 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014f8c:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8014f90:	f003 fa8c 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8014f94:	6803      	ldr	r3, [r0, #0]
 8014f96:	695b      	ldr	r3, [r3, #20]
 8014f98:	4798      	blx	r3
 8014f9a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8014f9c:	6803      	ldr	r3, [r0, #0]
 8014f9e:	691b      	ldr	r3, [r3, #16]
 8014fa0:	4798      	blx	r3
 8014fa2:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8014fa6:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8014faa:	3b01      	subs	r3, #1
 8014fac:	b2db      	uxtb	r3, r3
 8014fae:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8014fb2:	b10a      	cbz	r2, 8014fb8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d1eb      	bne.n	8014f90 <_ZN8touchgfx3HAL4tickEv+0x64>
 8014fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80150a4 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8014fba:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8014fbe:	7813      	ldrb	r3, [r2, #0]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	b25b      	sxtb	r3, r3
 8014fc4:	4299      	cmp	r1, r3
 8014fc6:	7013      	strb	r3, [r2, #0]
 8014fc8:	dc10      	bgt.n	8014fec <_ZN8touchgfx3HAL4tickEv+0xc0>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	68e0      	ldr	r0, [r4, #12]
 8014fce:	a902      	add	r1, sp, #8
 8014fd0:	7013      	strb	r3, [r2, #0]
 8014fd2:	aa03      	add	r2, sp, #12
 8014fd4:	6803      	ldr	r3, [r0, #0]
 8014fd6:	68db      	ldr	r3, [r3, #12]
 8014fd8:	4798      	blx	r3
 8014fda:	6823      	ldr	r3, [r4, #0]
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d050      	beq.n	8015082 <_ZN8touchgfx3HAL4tickEv+0x156>
 8014fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8014fe4:	4620      	mov	r0, r4
 8014fe6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014fea:	4798      	blx	r3
 8014fec:	2300      	movs	r3, #0
 8014fee:	6960      	ldr	r0, [r4, #20]
 8014ff0:	f88d 3007 	strb.w	r3, [sp, #7]
 8014ff4:	b158      	cbz	r0, 801500e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8014ff6:	6803      	ldr	r3, [r0, #0]
 8014ff8:	f10d 0107 	add.w	r1, sp, #7
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	4798      	blx	r3
 8015000:	b128      	cbz	r0, 801500e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015002:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015004:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015008:	6803      	ldr	r3, [r0, #0]
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	4798      	blx	r3
 801500e:	f104 001c 	add.w	r0, r4, #28
 8015012:	f00f febd 	bl	8024d90 <_ZN8touchgfx8Gestures4tickEv>
 8015016:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 801501a:	b30b      	cbz	r3, 8015060 <_ZN8touchgfx3HAL4tickEv+0x134>
 801501c:	6920      	ldr	r0, [r4, #16]
 801501e:	6803      	ldr	r3, [r0, #0]
 8015020:	691b      	ldr	r3, [r3, #16]
 8015022:	4798      	blx	r3
 8015024:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015026:	4606      	mov	r6, r0
 8015028:	b903      	cbnz	r3, 801502c <_ZN8touchgfx3HAL4tickEv+0x100>
 801502a:	6760      	str	r0, [r4, #116]	@ 0x74
 801502c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801502e:	4a1e      	ldr	r2, [pc, #120]	@ (80150a8 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8015030:	1af3      	subs	r3, r6, r3
 8015032:	4293      	cmp	r3, r2
 8015034:	d914      	bls.n	8015060 <_ZN8touchgfx3HAL4tickEv+0x134>
 8015036:	6920      	ldr	r0, [r4, #16]
 8015038:	6803      	ldr	r3, [r0, #0]
 801503a:	699b      	ldr	r3, [r3, #24]
 801503c:	4798      	blx	r3
 801503e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8015040:	2264      	movs	r2, #100	@ 0x64
 8015042:	1af3      	subs	r3, r6, r3
 8015044:	fbb3 f3f2 	udiv	r3, r3, r2
 8015048:	fbb0 f0f3 	udiv	r0, r0, r3
 801504c:	2800      	cmp	r0, #0
 801504e:	dc1d      	bgt.n	801508c <_ZN8touchgfx3HAL4tickEv+0x160>
 8015050:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8015054:	6920      	ldr	r0, [r4, #16]
 8015056:	2100      	movs	r1, #0
 8015058:	6803      	ldr	r3, [r0, #0]
 801505a:	69db      	ldr	r3, [r3, #28]
 801505c:	4798      	blx	r3
 801505e:	6766      	str	r6, [r4, #116]	@ 0x74
 8015060:	f003 fa24 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8015064:	6803      	ldr	r3, [r0, #0]
 8015066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015068:	4798      	blx	r3
 801506a:	6823      	ldr	r3, [r4, #0]
 801506c:	4620      	mov	r0, r4
 801506e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015072:	4798      	blx	r3
 8015074:	2001      	movs	r0, #1
 8015076:	f7fc fa01 	bl	801147c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801507a:	2300      	movs	r3, #0
 801507c:	702b      	strb	r3, [r5, #0]
 801507e:	b004      	add	sp, #16
 8015080:	bd70      	pop	{r4, r5, r6, pc}
 8015082:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015086:	4620      	mov	r0, r4
 8015088:	4798      	blx	r3
 801508a:	e7af      	b.n	8014fec <_ZN8touchgfx3HAL4tickEv+0xc0>
 801508c:	2863      	cmp	r0, #99	@ 0x63
 801508e:	bfcb      	itete	gt
 8015090:	2300      	movgt	r3, #0
 8015092:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8015096:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 801509a:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 801509e:	e7d9      	b.n	8015054 <_ZN8touchgfx3HAL4tickEv+0x128>
 80150a0:	2401bb3c 	.word	0x2401bb3c
 80150a4:	2401bb3d 	.word	0x2401bb3d
 80150a8:	05f5e100 	.word	0x05f5e100

080150ac <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80150ac:	b510      	push	{r4, lr}
 80150ae:	4604      	mov	r4, r0
 80150b0:	f7fc fd36 	bl	8011b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80150b4:	2200      	movs	r2, #0
 80150b6:	6863      	ldr	r3, [r4, #4]
 80150b8:	729a      	strb	r2, [r3, #10]
 80150ba:	bd10      	pop	{r4, pc}

080150bc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80150bc:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80150be:	301c      	adds	r0, #28
 80150c0:	f00f be64 	b.w	8024d8c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080150c4 <_ZN8touchgfx3HAL5touchEll>:
 80150c4:	b530      	push	{r4, r5, lr}
 80150c6:	b087      	sub	sp, #28
 80150c8:	4604      	mov	r4, r0
 80150ca:	a804      	add	r0, sp, #16
 80150cc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80150d0:	f002 ffde 	bl	8018090 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80150d4:	9b04      	ldr	r3, [sp, #16]
 80150d6:	a906      	add	r1, sp, #24
 80150d8:	a803      	add	r0, sp, #12
 80150da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80150de:	9b05      	ldr	r3, [sp, #20]
 80150e0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80150e4:	f003 f826 	bl	8018134 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80150e8:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80150ec:	f104 001c 	add.w	r0, r4, #28
 80150f0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80150f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80150f8:	b189      	cbz	r1, 801511e <_ZN8touchgfx3HAL5touchEll+0x5a>
 80150fa:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	4613      	mov	r3, r2
 8015102:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8015106:	462a      	mov	r2, r5
 8015108:	f00f fe50 	bl	8024dac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801510c:	b128      	cbz	r0, 801511a <_ZN8touchgfx3HAL5touchEll+0x56>
 801510e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015112:	6623      	str	r3, [r4, #96]	@ 0x60
 8015114:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015118:	6663      	str	r3, [r4, #100]	@ 0x64
 801511a:	b007      	add	sp, #28
 801511c:	bd30      	pop	{r4, r5, pc}
 801511e:	f00f fe85 	bl	8024e2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015122:	2301      	movs	r3, #1
 8015124:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015128:	e7f1      	b.n	801510e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801512a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801512a:	b510      	push	{r4, lr}
 801512c:	2b00      	cmp	r3, #0
 801512e:	d046      	beq.n	80151be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015130:	ea81 0002 	eor.w	r0, r1, r2
 8015134:	07c4      	lsls	r4, r0, #31
 8015136:	d508      	bpl.n	801514a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015138:	440b      	add	r3, r1
 801513a:	3a01      	subs	r2, #1
 801513c:	428b      	cmp	r3, r1
 801513e:	d93e      	bls.n	80151be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015140:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015144:	f801 0b01 	strb.w	r0, [r1], #1
 8015148:	e7f8      	b.n	801513c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801514a:	07d0      	lsls	r0, r2, #31
 801514c:	bf42      	ittt	mi
 801514e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015152:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015156:	f801 0b01 	strbmi.w	r0, [r1], #1
 801515a:	2b01      	cmp	r3, #1
 801515c:	d911      	bls.n	8015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801515e:	ea81 0402 	eor.w	r4, r1, r2
 8015162:	4610      	mov	r0, r2
 8015164:	07a4      	lsls	r4, r4, #30
 8015166:	d022      	beq.n	80151ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015168:	f023 0401 	bic.w	r4, r3, #1
 801516c:	440c      	add	r4, r1
 801516e:	428c      	cmp	r4, r1
 8015170:	4602      	mov	r2, r0
 8015172:	d904      	bls.n	801517e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015174:	8812      	ldrh	r2, [r2, #0]
 8015176:	3002      	adds	r0, #2
 8015178:	f821 2b02 	strh.w	r2, [r1], #2
 801517c:	e7f7      	b.n	801516e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801517e:	f003 0301 	and.w	r3, r3, #1
 8015182:	f023 0003 	bic.w	r0, r3, #3
 8015186:	4408      	add	r0, r1
 8015188:	4288      	cmp	r0, r1
 801518a:	4614      	mov	r4, r2
 801518c:	d904      	bls.n	8015198 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801518e:	6824      	ldr	r4, [r4, #0]
 8015190:	3204      	adds	r2, #4
 8015192:	f841 4b04 	str.w	r4, [r1], #4
 8015196:	e7f7      	b.n	8015188 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015198:	f003 0303 	and.w	r3, r3, #3
 801519c:	3a01      	subs	r2, #1
 801519e:	440b      	add	r3, r1
 80151a0:	428b      	cmp	r3, r1
 80151a2:	d90c      	bls.n	80151be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80151a4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80151a8:	f801 0b01 	strb.w	r0, [r1], #1
 80151ac:	e7f8      	b.n	80151a0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80151ae:	0790      	lsls	r0, r2, #30
 80151b0:	d0e7      	beq.n	8015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80151b2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80151b6:	3b02      	subs	r3, #2
 80151b8:	f821 0b02 	strh.w	r0, [r1], #2
 80151bc:	e7e1      	b.n	8015182 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80151be:	2001      	movs	r0, #1
 80151c0:	bd10      	pop	{r4, pc}

080151c2 <_ZN8touchgfx3HAL7noTouchEv>:
 80151c2:	b510      	push	{r4, lr}
 80151c4:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80151c8:	4604      	mov	r4, r0
 80151ca:	b153      	cbz	r3, 80151e2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80151cc:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80151d0:	2101      	movs	r1, #1
 80151d2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80151d6:	301c      	adds	r0, #28
 80151d8:	f00f fe28 	bl	8024e2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80151dc:	2300      	movs	r3, #0
 80151de:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80151e2:	bd10      	pop	{r4, pc}

080151e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80151e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151e8:	b085      	sub	sp, #20
 80151ea:	4604      	mov	r4, r0
 80151ec:	2000      	movs	r0, #0
 80151ee:	4699      	mov	r9, r3
 80151f0:	ad04      	add	r5, sp, #16
 80151f2:	460f      	mov	r7, r1
 80151f4:	4690      	mov	r8, r2
 80151f6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80151fa:	69a0      	ldr	r0, [r4, #24]
 80151fc:	6806      	ldr	r6, [r0, #0]
 80151fe:	9501      	str	r5, [sp, #4]
 8015200:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015204:	9500      	str	r5, [sp, #0]
 8015206:	6835      	ldr	r5, [r6, #0]
 8015208:	47a8      	blx	r5
 801520a:	4d10      	ldr	r5, [pc, #64]	@ (801524c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 801520c:	4606      	mov	r6, r0
 801520e:	f8a5 9000 	strh.w	r9, [r5]
 8015212:	f7f8 ffc3 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 8015216:	6803      	ldr	r3, [r0, #0]
 8015218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801521a:	4798      	blx	r3
 801521c:	b128      	cbz	r0, 801522a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801521e:	2801      	cmp	r0, #1
 8015220:	d00b      	beq.n	801523a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015222:	4630      	mov	r0, r6
 8015224:	b005      	add	sp, #20
 8015226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801522a:	882b      	ldrh	r3, [r5, #0]
 801522c:	fb08 7203 	mla	r2, r8, r3, r7
 8015230:	9b03      	ldr	r3, [sp, #12]
 8015232:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015236:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015238:	e7f3      	b.n	8015222 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801523a:	882a      	ldrh	r2, [r5, #0]
 801523c:	9b03      	ldr	r3, [sp, #12]
 801523e:	fb08 7202 	mla	r2, r8, r2, r7
 8015242:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015246:	1a9a      	subs	r2, r3, r2
 8015248:	63e2      	str	r2, [r4, #60]	@ 0x3c
 801524a:	e7ea      	b.n	8015222 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801524c:	2401bb32 	.word	0x2401bb32

08015250 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015252:	b08b      	sub	sp, #44	@ 0x2c
 8015254:	4617      	mov	r7, r2
 8015256:	4604      	mov	r4, r0
 8015258:	460e      	mov	r6, r1
 801525a:	461d      	mov	r5, r3
 801525c:	f7f8 ff9e 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 8015260:	6803      	ldr	r3, [r0, #0]
 8015262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015264:	4798      	blx	r3
 8015266:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801526a:	9007      	str	r0, [sp, #28]
 801526c:	4631      	mov	r1, r6
 801526e:	6822      	ldr	r2, [r4, #0]
 8015270:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015274:	4b0c      	ldr	r3, [pc, #48]	@ (80152a8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015276:	4620      	mov	r0, r4
 8015278:	881b      	ldrh	r3, [r3, #0]
 801527a:	9306      	str	r3, [sp, #24]
 801527c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015280:	9305      	str	r3, [sp, #20]
 8015282:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8015286:	9304      	str	r3, [sp, #16]
 8015288:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801528c:	9303      	str	r3, [sp, #12]
 801528e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015292:	9302      	str	r3, [sp, #8]
 8015294:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015298:	e9cd 5300 	strd	r5, r3, [sp]
 801529c:	463b      	mov	r3, r7
 801529e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80152a0:	2200      	movs	r2, #0
 80152a2:	47a8      	blx	r5
 80152a4:	b00b      	add	sp, #44	@ 0x2c
 80152a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a8:	2401bb32 	.word	0x2401bb32

080152ac <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80152ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152b0:	4698      	mov	r8, r3
 80152b2:	6803      	ldr	r3, [r0, #0]
 80152b4:	b08b      	sub	sp, #44	@ 0x2c
 80152b6:	4617      	mov	r7, r2
 80152b8:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80152ba:	460e      	mov	r6, r1
 80152bc:	4b13      	ldr	r3, [pc, #76]	@ (801530c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80152be:	4604      	mov	r4, r0
 80152c0:	f8b3 9000 	ldrh.w	r9, [r3]
 80152c4:	f7f8 ff6a 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 80152c8:	6803      	ldr	r3, [r0, #0]
 80152ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152cc:	4798      	blx	r3
 80152ce:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80152d2:	2200      	movs	r2, #0
 80152d4:	4631      	mov	r1, r6
 80152d6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80152da:	2302      	movs	r3, #2
 80152dc:	4620      	mov	r0, r4
 80152de:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80152e2:	2301      	movs	r3, #1
 80152e4:	9305      	str	r3, [sp, #20]
 80152e6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80152ea:	9304      	str	r3, [sp, #16]
 80152ec:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80152f0:	9303      	str	r3, [sp, #12]
 80152f2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80152f6:	9302      	str	r3, [sp, #8]
 80152f8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80152fc:	e9cd 8300 	strd	r8, r3, [sp]
 8015300:	463b      	mov	r3, r7
 8015302:	47a8      	blx	r5
 8015304:	b00b      	add	sp, #44	@ 0x2c
 8015306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801530a:	bf00      	nop
 801530c:	2401bb32 	.word	0x2401bb32

08015310 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015314:	4698      	mov	r8, r3
 8015316:	6803      	ldr	r3, [r0, #0]
 8015318:	b087      	sub	sp, #28
 801531a:	460e      	mov	r6, r1
 801531c:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 801531e:	4617      	mov	r7, r2
 8015320:	4b0f      	ldr	r3, [pc, #60]	@ (8015360 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015322:	4604      	mov	r4, r0
 8015324:	f8b3 9000 	ldrh.w	r9, [r3]
 8015328:	f7f8 ff38 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 801532c:	6803      	ldr	r3, [r0, #0]
 801532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015330:	4798      	blx	r3
 8015332:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8015336:	463a      	mov	r2, r7
 8015338:	4631      	mov	r1, r6
 801533a:	f8cd 900c 	str.w	r9, [sp, #12]
 801533e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015342:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8015346:	4620      	mov	r0, r4
 8015348:	9302      	str	r3, [sp, #8]
 801534a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801534e:	9301      	str	r3, [sp, #4]
 8015350:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	4643      	mov	r3, r8
 8015358:	47a8      	blx	r5
 801535a:	b007      	add	sp, #28
 801535c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015360:	2401bb32 	.word	0x2401bb32

08015364 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015368:	4604      	mov	r4, r0
 801536a:	b08f      	sub	sp, #60	@ 0x3c
 801536c:	4610      	mov	r0, r2
 801536e:	460d      	mov	r5, r1
 8015370:	4691      	mov	r9, r2
 8015372:	461e      	mov	r6, r3
 8015374:	f006 f9f2 	bl	801b75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015378:	2800      	cmp	r0, #0
 801537a:	f000 809d 	beq.w	80154b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801537e:	6823      	ldr	r3, [r4, #0]
 8015380:	4620      	mov	r0, r4
 8015382:	f8df b198 	ldr.w	fp, [pc, #408]	@ 801551c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015386:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 801538a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801538c:	4798      	blx	r3
 801538e:	6823      	ldr	r3, [r4, #0]
 8015390:	4620      	mov	r0, r4
 8015392:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015398:	4798      	blx	r3
 801539a:	f8bb 3000 	ldrh.w	r3, [fp]
 801539e:	4f5c      	ldr	r7, [pc, #368]	@ (8015510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80153a0:	9301      	str	r3, [sp, #4]
 80153a2:	f8ba 3000 	ldrh.w	r3, [sl]
 80153a6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80153aa:	4640      	mov	r0, r8
 80153ac:	9302      	str	r3, [sp, #8]
 80153ae:	883b      	ldrh	r3, [r7, #0]
 80153b0:	9303      	str	r3, [sp, #12]
 80153b2:	4b58      	ldr	r3, [pc, #352]	@ (8015514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80153b4:	881a      	ldrh	r2, [r3, #0]
 80153b6:	9305      	str	r3, [sp, #20]
 80153b8:	9204      	str	r2, [sp, #16]
 80153ba:	f006 fb1f 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80153be:	8038      	strh	r0, [r7, #0]
 80153c0:	4640      	mov	r0, r8
 80153c2:	f006 fb4f 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80153c6:	9b05      	ldr	r3, [sp, #20]
 80153c8:	b280      	uxth	r0, r0
 80153ca:	8018      	strh	r0, [r3, #0]
 80153cc:	4b52      	ldr	r3, [pc, #328]	@ (8015518 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d174      	bne.n	80154be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80153d4:	883b      	ldrh	r3, [r7, #0]
 80153d6:	f8aa 0000 	strh.w	r0, [sl]
 80153da:	f8ab 3000 	strh.w	r3, [fp]
 80153de:	4648      	mov	r0, r9
 80153e0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80153e4:	f006 f9ba 	bl	801b75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80153e8:	2200      	movs	r2, #0
 80153ea:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80153ee:	4611      	mov	r1, r2
 80153f0:	4628      	mov	r0, r5
 80153f2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80153f6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80153fa:	f7f9 fc50 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 80153fe:	2301      	movs	r3, #1
 8015400:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8015404:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8015408:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	dd5c      	ble.n	80154ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015410:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015414:	2b00      	cmp	r3, #0
 8015416:	dd58      	ble.n	80154ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015418:	462a      	mov	r2, r5
 801541a:	ab0a      	add	r3, sp, #40	@ 0x28
 801541c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015420:	6851      	ldr	r1, [r2, #4]
 8015422:	c303      	stmia	r3!, {r0, r1}
 8015424:	4631      	mov	r1, r6
 8015426:	a80a      	add	r0, sp, #40	@ 0x28
 8015428:	f7fe ff56 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 801542c:	4b38      	ldr	r3, [pc, #224]	@ (8015510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801542e:	2100      	movs	r1, #0
 8015430:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015434:	4b37      	ldr	r3, [pc, #220]	@ (8015514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015436:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801543a:	aa0a      	add	r2, sp, #40	@ 0x28
 801543c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015440:	910c      	str	r1, [sp, #48]	@ 0x30
 8015442:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015446:	ab08      	add	r3, sp, #32
 8015448:	e892 0003 	ldmia.w	r2, {r0, r1}
 801544c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015450:	4618      	mov	r0, r3
 8015452:	a90c      	add	r1, sp, #48	@ 0x30
 8015454:	f7fe ff40 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8015458:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801545a:	2b00      	cmp	r3, #0
 801545c:	d13c      	bne.n	80154d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801545e:	2000      	movs	r0, #0
 8015460:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8015464:	2600      	movs	r6, #0
 8015466:	696b      	ldr	r3, [r5, #20]
 8015468:	a908      	add	r1, sp, #32
 801546a:	682a      	ldr	r2, [r5, #0]
 801546c:	4628      	mov	r0, r5
 801546e:	9305      	str	r3, [sp, #20]
 8015470:	616e      	str	r6, [r5, #20]
 8015472:	6892      	ldr	r2, [r2, #8]
 8015474:	4790      	blx	r2
 8015476:	9b05      	ldr	r3, [sp, #20]
 8015478:	4652      	mov	r2, sl
 801547a:	4649      	mov	r1, r9
 801547c:	616b      	str	r3, [r5, #20]
 801547e:	4628      	mov	r0, r5
 8015480:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8015484:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8015488:	f7f9 fc09 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 801548c:	9a01      	ldr	r2, [sp, #4]
 801548e:	4b23      	ldr	r3, [pc, #140]	@ (801551c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015490:	4620      	mov	r0, r4
 8015492:	801a      	strh	r2, [r3, #0]
 8015494:	9a02      	ldr	r2, [sp, #8]
 8015496:	4b22      	ldr	r3, [pc, #136]	@ (8015520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015498:	801a      	strh	r2, [r3, #0]
 801549a:	9a03      	ldr	r2, [sp, #12]
 801549c:	4b1c      	ldr	r3, [pc, #112]	@ (8015510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801549e:	801a      	strh	r2, [r3, #0]
 80154a0:	4b1c      	ldr	r3, [pc, #112]	@ (8015514 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80154a2:	9a04      	ldr	r2, [sp, #16]
 80154a4:	801a      	strh	r2, [r3, #0]
 80154a6:	6823      	ldr	r3, [r4, #0]
 80154a8:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80154ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154ae:	4798      	blx	r3
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	4620      	mov	r0, r4
 80154b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154b6:	4798      	blx	r3
 80154b8:	b00f      	add	sp, #60	@ 0x3c
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	883b      	ldrh	r3, [r7, #0]
 80154c0:	f8ab 0000 	strh.w	r0, [fp]
 80154c4:	f8aa 3000 	strh.w	r3, [sl]
 80154c8:	e789      	b.n	80153de <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80154ca:	462a      	mov	r2, r5
 80154cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80154ce:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80154d2:	6851      	ldr	r1, [r2, #4]
 80154d4:	c303      	stmia	r3!, {r0, r1}
 80154d6:	e7a9      	b.n	801542c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80154d8:	a807      	add	r0, sp, #28
 80154da:	f006 fbcd 	bl	801bc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80154de:	4606      	mov	r6, r0
 80154e0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80154e2:	6803      	ldr	r3, [r0, #0]
 80154e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e6:	4798      	blx	r3
 80154e8:	4286      	cmp	r6, r0
 80154ea:	d1b8      	bne.n	801545e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80154ec:	f7f8 fe56 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 80154f0:	6803      	ldr	r3, [r0, #0]
 80154f2:	4606      	mov	r6, r0
 80154f4:	a807      	add	r0, sp, #28
 80154f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154f8:	9305      	str	r3, [sp, #20]
 80154fa:	f006 fbbd 	bl	801bc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80154fe:	9b05      	ldr	r3, [sp, #20]
 8015500:	4601      	mov	r1, r0
 8015502:	4630      	mov	r0, r6
 8015504:	4798      	blx	r3
 8015506:	f080 0001 	eor.w	r0, r0, #1
 801550a:	b2c0      	uxtb	r0, r0
 801550c:	e7a8      	b.n	8015460 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801550e:	bf00      	nop
 8015510:	2401bb2c 	.word	0x2401bb2c
 8015514:	2401bb2e 	.word	0x2401bb2e
 8015518:	2401bb30 	.word	0x2401bb30
 801551c:	2401bb32 	.word	0x2401bb32
 8015520:	2401bb34 	.word	0x2401bb34

08015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015524:	4b07      	ldr	r3, [pc, #28]	@ (8015544 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015526:	b510      	push	{r4, lr}
 8015528:	781b      	ldrb	r3, [r3, #0]
 801552a:	4604      	mov	r4, r0
 801552c:	b13b      	cbz	r3, 801553e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801552e:	6803      	ldr	r3, [r0, #0]
 8015530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015532:	4798      	blx	r3
 8015534:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015536:	4283      	cmp	r3, r0
 8015538:	d101      	bne.n	801553e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801553a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801553c:	bd10      	pop	{r4, pc}
 801553e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8015540:	e7fc      	b.n	801553c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015542:	bf00      	nop
 8015544:	2401bb36 	.word	0x2401bb36

08015548 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801554c:	461d      	mov	r5, r3
 801554e:	b08a      	sub	sp, #40	@ 0x28
 8015550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015554:	4690      	mov	r8, r2
 8015556:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 801555a:	2400      	movs	r4, #0
 801555c:	4607      	mov	r7, r0
 801555e:	fb06 8505 	mla	r5, r6, r5, r8
 8015562:	9404      	str	r4, [sp, #16]
 8015564:	f88d 4020 	strb.w	r4, [sp, #32]
 8015568:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801556c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015570:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015574:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015578:	f8ad 301a 	strh.w	r3, [sp, #26]
 801557c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015580:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015584:	f7ff ffce 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015588:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015592:	a901      	add	r1, sp, #4
 8015594:	9505      	str	r5, [sp, #20]
 8015596:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801559a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801559e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80155a2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80155a6:	6803      	ldr	r3, [r0, #0]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	4798      	blx	r3
 80155ac:	b00a      	add	sp, #40	@ 0x28
 80155ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155b2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80155b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155b6:	b08b      	sub	sp, #44	@ 0x2c
 80155b8:	2400      	movs	r4, #0
 80155ba:	4691      	mov	r9, r2
 80155bc:	461d      	mov	r5, r3
 80155be:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 80155c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80155c6:	4688      	mov	r8, r1
 80155c8:	4607      	mov	r7, r0
 80155ca:	9404      	str	r4, [sp, #16]
 80155cc:	fb06 9505 	mla	r5, r6, r5, r9
 80155d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80155d4:	f7ff ffa6 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80155d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80155dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80155e6:	a901      	add	r1, sp, #4
 80155e8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80155ec:	9505      	str	r5, [sp, #20]
 80155ee:	f8ad 301a 	strh.w	r3, [sp, #26]
 80155f2:	f8ad 401c 	strh.w	r4, [sp, #28]
 80155f6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80155fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80155fe:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015602:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015606:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801560a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 801560e:	6803      	ldr	r3, [r0, #0]
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	4798      	blx	r3
 8015614:	b00b      	add	sp, #44	@ 0x2c
 8015616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801561c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015620:	b08a      	sub	sp, #40	@ 0x28
 8015622:	4698      	mov	r8, r3
 8015624:	2300      	movs	r3, #0
 8015626:	4606      	mov	r6, r0
 8015628:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801562c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8015630:	2d0b      	cmp	r5, #11
 8015632:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015636:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 801563a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801563e:	9304      	str	r3, [sp, #16]
 8015640:	d137      	bne.n	80156b2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015642:	2380      	movs	r3, #128	@ 0x80
 8015644:	f88d 0020 	strb.w	r0, [sp, #32]
 8015648:	4630      	mov	r0, r6
 801564a:	9203      	str	r2, [sp, #12]
 801564c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015650:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015654:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015658:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801565c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015660:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015664:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015668:	f7ff ff5c 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801566c:	2c0b      	cmp	r4, #11
 801566e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8015672:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015676:	bf94      	ite	ls
 8015678:	4b19      	ldrls	r3, [pc, #100]	@ (80156e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801567a:	2100      	movhi	r1, #0
 801567c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8015680:	bf98      	it	ls
 8015682:	5d19      	ldrbls	r1, [r3, r4]
 8015684:	fb02 8307 	mla	r3, r2, r7, r8
 8015688:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801568c:	10c9      	asrs	r1, r1, #3
 801568e:	fb01 0003 	mla	r0, r1, r3, r0
 8015692:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8015696:	a901      	add	r1, sp, #4
 8015698:	9005      	str	r0, [sp, #20]
 801569a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801569e:	2300      	movs	r3, #0
 80156a0:	6870      	ldr	r0, [r6, #4]
 80156a2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80156a6:	6803      	ldr	r3, [r0, #0]
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	4798      	blx	r3
 80156ac:	b00a      	add	sp, #40	@ 0x28
 80156ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b2:	2d02      	cmp	r5, #2
 80156b4:	d109      	bne.n	80156ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80156b6:	28ff      	cmp	r0, #255	@ 0xff
 80156b8:	d105      	bne.n	80156c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80156ba:	f1bc 0f00 	cmp.w	ip, #0
 80156be:	bf14      	ite	ne
 80156c0:	2340      	movne	r3, #64	@ 0x40
 80156c2:	2320      	moveq	r3, #32
 80156c4:	e7be      	b.n	8015644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80156c6:	2340      	movs	r3, #64	@ 0x40
 80156c8:	e7bc      	b.n	8015644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80156ca:	28ff      	cmp	r0, #255	@ 0xff
 80156cc:	d105      	bne.n	80156da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80156ce:	f1bc 0f00 	cmp.w	ip, #0
 80156d2:	bf14      	ite	ne
 80156d4:	2304      	movne	r3, #4
 80156d6:	2301      	moveq	r3, #1
 80156d8:	e7b4      	b.n	8015644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80156da:	2304      	movs	r3, #4
 80156dc:	e7b2      	b.n	8015644 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80156de:	bf00      	nop
 80156e0:	08027fa0 	.word	0x08027fa0

080156e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80156e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e8:	b08b      	sub	sp, #44	@ 0x2c
 80156ea:	461d      	mov	r5, r3
 80156ec:	2400      	movs	r4, #0
 80156ee:	4688      	mov	r8, r1
 80156f0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80156f4:	4693      	mov	fp, r2
 80156f6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80156fa:	4607      	mov	r7, r0
 80156fc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8015700:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8015704:	9404      	str	r4, [sp, #16]
 8015706:	bf14      	ite	ne
 8015708:	2308      	movne	r3, #8
 801570a:	2302      	moveq	r3, #2
 801570c:	fb05 b50a 	mla	r5, r5, sl, fp
 8015710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015714:	f7ff ff06 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015718:	2e0b      	cmp	r6, #11
 801571a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801571e:	a901      	add	r1, sp, #4
 8015720:	bf98      	it	ls
 8015722:	4b13      	ldrls	r3, [pc, #76]	@ (8015770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8015724:	f8ad a01e 	strh.w	sl, [sp, #30]
 8015728:	bf98      	it	ls
 801572a:	5d9c      	ldrbls	r4, [r3, r6]
 801572c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015730:	10e4      	asrs	r4, r4, #3
 8015732:	f8cd 8010 	str.w	r8, [sp, #16]
 8015736:	f8ad 3018 	strh.w	r3, [sp, #24]
 801573a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801573e:	fb04 0405 	mla	r4, r4, r5, r0
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015748:	2300      	movs	r3, #0
 801574a:	9405      	str	r4, [sp, #20]
 801574c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015750:	f88d 9020 	strb.w	r9, [sp, #32]
 8015754:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8015758:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801575c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8015760:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8015764:	6803      	ldr	r3, [r0, #0]
 8015766:	685b      	ldr	r3, [r3, #4]
 8015768:	4798      	blx	r3
 801576a:	b00b      	add	sp, #44	@ 0x2c
 801576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015770:	08027fa0 	.word	0x08027fa0

08015774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8015774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015778:	461e      	mov	r6, r3
 801577a:	4b0a      	ldr	r3, [pc, #40]	@ (80157a4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801577c:	460f      	mov	r7, r1
 801577e:	4690      	mov	r8, r2
 8015780:	881d      	ldrh	r5, [r3, #0]
 8015782:	f7f8 fd0b 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 8015786:	6803      	ldr	r3, [r0, #0]
 8015788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801578a:	4798      	blx	r3
 801578c:	280b      	cmp	r0, #11
 801578e:	bf96      	itet	ls
 8015790:	4b05      	ldrls	r3, [pc, #20]	@ (80157a8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8015792:	2400      	movhi	r4, #0
 8015794:	5c1c      	ldrbls	r4, [r3, r0]
 8015796:	fb08 7005 	mla	r0, r8, r5, r7
 801579a:	10e4      	asrs	r4, r4, #3
 801579c:	fb04 6000 	mla	r0, r4, r0, r6
 80157a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157a4:	2401bb32 	.word	0x2401bb32
 80157a8:	08027fa0 	.word	0x08027fa0

080157ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80157ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ae:	b08b      	sub	sp, #44	@ 0x2c
 80157b0:	461f      	mov	r7, r3
 80157b2:	4604      	mov	r4, r0
 80157b4:	4616      	mov	r6, r2
 80157b6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80157ba:	2500      	movs	r5, #0
 80157bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80157c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80157c4:	9504      	str	r5, [sp, #16]
 80157c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80157ca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80157ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 80157d2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80157d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80157da:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80157de:	f88d 3020 	strb.w	r3, [sp, #32]
 80157e2:	f7ff fe9f 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80157e6:	463a      	mov	r2, r7
 80157e8:	4631      	mov	r1, r6
 80157ea:	4603      	mov	r3, r0
 80157ec:	4620      	mov	r0, r4
 80157ee:	f7ff ffc1 	bl	8015774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80157f2:	4b0e      	ldr	r3, [pc, #56]	@ (801582c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80157f4:	9005      	str	r0, [sp, #20]
 80157f6:	881b      	ldrh	r3, [r3, #0]
 80157f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80157fc:	f7f8 fcce 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 8015800:	6803      	ldr	r3, [r0, #0]
 8015802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015804:	4798      	blx	r3
 8015806:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015808:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 801580c:	a901      	add	r1, sp, #4
 801580e:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8015812:	9304      	str	r3, [sp, #16]
 8015814:	6860      	ldr	r0, [r4, #4]
 8015816:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801581a:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801581e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8015822:	6803      	ldr	r3, [r0, #0]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	4798      	blx	r3
 8015828:	b00b      	add	sp, #44	@ 0x2c
 801582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801582c:	2401bb32 	.word	0x2401bb32

08015830 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8015830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015832:	b08d      	sub	sp, #52	@ 0x34
 8015834:	2501      	movs	r5, #1
 8015836:	4604      	mov	r4, r0
 8015838:	466b      	mov	r3, sp
 801583a:	9503      	str	r5, [sp, #12]
 801583c:	e883 0006 	stmia.w	r3, {r1, r2}
 8015840:	2300      	movs	r3, #0
 8015842:	f8bd 6000 	ldrh.w	r6, [sp]
 8015846:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801584a:	9306      	str	r3, [sp, #24]
 801584c:	6803      	ldr	r3, [r0, #0]
 801584e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015850:	4798      	blx	r3
 8015852:	463a      	mov	r2, r7
 8015854:	4631      	mov	r1, r6
 8015856:	4603      	mov	r3, r0
 8015858:	4620      	mov	r0, r4
 801585a:	f7ff ff8b 	bl	8015774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801585e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8015860:	9004      	str	r0, [sp, #16]
 8015862:	9307      	str	r3, [sp, #28]
 8015864:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8015868:	f8ad 3020 	strh.w	r3, [sp, #32]
 801586c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015870:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8015874:	4b0e      	ldr	r3, [pc, #56]	@ (80158b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8015876:	881b      	ldrh	r3, [r3, #0]
 8015878:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801587c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015880:	f7f8 fc8c 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 8015884:	6803      	ldr	r3, [r0, #0]
 8015886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015888:	4798      	blx	r3
 801588a:	23ff      	movs	r3, #255	@ 0xff
 801588c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015890:	a903      	add	r1, sp, #12
 8015892:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8015896:	6860      	ldr	r0, [r4, #4]
 8015898:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801589c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80158a0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80158a4:	6803      	ldr	r3, [r0, #0]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	4798      	blx	r3
 80158aa:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80158ac:	b00d      	add	sp, #52	@ 0x34
 80158ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158b0:	2401bb32 	.word	0x2401bb32

080158b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80158b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158b8:	b08c      	sub	sp, #48	@ 0x30
 80158ba:	461e      	mov	r6, r3
 80158bc:	2300      	movs	r3, #0
 80158be:	4604      	mov	r4, r0
 80158c0:	466d      	mov	r5, sp
 80158c2:	9306      	str	r3, [sp, #24]
 80158c4:	6803      	ldr	r3, [r0, #0]
 80158c6:	e885 0006 	stmia.w	r5, {r1, r2}
 80158ca:	2501      	movs	r5, #1
 80158cc:	f8bd 7000 	ldrh.w	r7, [sp]
 80158d0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80158d4:	9503      	str	r5, [sp, #12]
 80158d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158d8:	4798      	blx	r3
 80158da:	4642      	mov	r2, r8
 80158dc:	4639      	mov	r1, r7
 80158de:	4603      	mov	r3, r0
 80158e0:	4620      	mov	r0, r4
 80158e2:	f7ff ff47 	bl	8015774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80158e6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80158ea:	9004      	str	r0, [sp, #16]
 80158ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80158f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80158f4:	9607      	str	r6, [sp, #28]
 80158f6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80158fa:	4b10      	ldr	r3, [pc, #64]	@ (801593c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8015902:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015904:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8015908:	f7f8 fc48 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 801590c:	6803      	ldr	r3, [r0, #0]
 801590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015910:	4798      	blx	r3
 8015912:	23ff      	movs	r3, #255	@ 0xff
 8015914:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8015918:	a903      	add	r1, sp, #12
 801591a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801591e:	6860      	ldr	r0, [r4, #4]
 8015920:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8015924:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8015928:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 801592c:	6803      	ldr	r3, [r0, #0]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	4798      	blx	r3
 8015932:	4630      	mov	r0, r6
 8015934:	b00c      	add	sp, #48	@ 0x30
 8015936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801593a:	bf00      	nop
 801593c:	2401bb32 	.word	0x2401bb32

08015940 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8015940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015942:	b085      	sub	sp, #20
 8015944:	4605      	mov	r5, r0
 8015946:	ac02      	add	r4, sp, #8
 8015948:	e884 0006 	stmia.w	r4, {r1, r2}
 801594c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8015950:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8015954:	f7ff fde6 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015958:	4631      	mov	r1, r6
 801595a:	4603      	mov	r3, r0
 801595c:	463a      	mov	r2, r7
 801595e:	4628      	mov	r0, r5
 8015960:	f7ff ff08 	bl	8015774 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8015964:	4a05      	ldr	r2, [pc, #20]	@ (801597c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8015966:	682b      	ldr	r3, [r5, #0]
 8015968:	8812      	ldrh	r2, [r2, #0]
 801596a:	9200      	str	r2, [sp, #0]
 801596c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801596e:	4603      	mov	r3, r0
 8015970:	4628      	mov	r0, r5
 8015972:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015976:	47b0      	blx	r6
 8015978:	b005      	add	sp, #20
 801597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801597c:	2401bb32 	.word	0x2401bb32

08015980 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8015980:	b570      	push	{r4, r5, r6, lr}
 8015982:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8015986:	4604      	mov	r4, r0
 8015988:	b19b      	cbz	r3, 80159b2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801598a:	2002      	movs	r0, #2
 801598c:	f7fb fdae 	bl	80114ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8015990:	2300      	movs	r3, #0
 8015992:	4620      	mov	r0, r4
 8015994:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015998:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801599c:	6823      	ldr	r3, [r4, #0]
 801599e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 80159a2:	f7ff fdbf 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80159a6:	4601      	mov	r1, r0
 80159a8:	4620      	mov	r0, r4
 80159aa:	462b      	mov	r3, r5
 80159ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159b0:	4718      	bx	r3
 80159b2:	bd70      	pop	{r4, r5, r6, pc}

080159b4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80159b4:	b570      	push	{r4, r5, r6, lr}
 80159b6:	4605      	mov	r5, r0
 80159b8:	460c      	mov	r4, r1
 80159ba:	2003      	movs	r0, #3
 80159bc:	b149      	cbz	r1, 80159d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80159be:	f7fb fd25 	bl	801140c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80159c2:	6928      	ldr	r0, [r5, #16]
 80159c4:	b168      	cbz	r0, 80159e2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80159c6:	6803      	ldr	r3, [r0, #0]
 80159c8:	2101      	movs	r1, #1
 80159ca:	695b      	ldr	r3, [r3, #20]
 80159cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159d0:	4718      	bx	r3
 80159d2:	f7fb fd53 	bl	801147c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80159d6:	6928      	ldr	r0, [r5, #16]
 80159d8:	b118      	cbz	r0, 80159e2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80159da:	6803      	ldr	r3, [r0, #0]
 80159dc:	4621      	mov	r1, r4
 80159de:	695b      	ldr	r3, [r3, #20]
 80159e0:	e7f4      	b.n	80159cc <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80159e2:	bd70      	pop	{r4, r5, r6, pc}

080159e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80159e4:	b538      	push	{r3, r4, r5, lr}
 80159e6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80159ea:	4604      	mov	r4, r0
 80159ec:	460d      	mov	r5, r1
 80159ee:	428b      	cmp	r3, r1
 80159f0:	d006      	beq.n	8015a00 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80159f2:	6803      	ldr	r3, [r0, #0]
 80159f4:	b929      	cbnz	r1, 8015a02 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80159f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80159fa:	4798      	blx	r3
 80159fc:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8015a00:	bd38      	pop	{r3, r4, r5, pc}
 8015a02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8015a06:	e7f8      	b.n	80159fa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08015a08 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8015a08:	4b0d      	ldr	r3, [pc, #52]	@ (8015a40 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8015a0a:	b510      	push	{r4, lr}
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	4604      	mov	r4, r0
 8015a10:	b95b      	cbnz	r3, 8015a2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015a12:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015a16:	2b02      	cmp	r3, #2
 8015a18:	d007      	beq.n	8015a2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015a1a:	6840      	ldr	r0, [r0, #4]
 8015a1c:	f000 f90e 	bl	8015c3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8015a20:	b118      	cbz	r0, 8015a2a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8015a22:	6862      	ldr	r2, [r4, #4]
 8015a24:	7a53      	ldrb	r3, [r2, #9]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d0fc      	beq.n	8015a24 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8015a2a:	f7fc f86b 	bl	8011b04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015a2e:	4620      	mov	r0, r4
 8015a30:	2100      	movs	r1, #0
 8015a32:	f7ff ffd7 	bl	80159e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015a36:	4620      	mov	r0, r4
 8015a38:	f7ff fd74 	bl	8015524 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015a3c:	bd10      	pop	{r4, pc}
 8015a3e:	bf00      	nop
 8015a40:	2401bb36 	.word	0x2401bb36

08015a44 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8015a44:	4770      	bx	lr

08015a46 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8015a46:	2000      	movs	r0, #0
 8015a48:	4770      	bx	lr

08015a4a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8015a4a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8015a4e:	1a13      	subs	r3, r2, r0
 8015a50:	4258      	negs	r0, r3
 8015a52:	4158      	adcs	r0, r3
 8015a54:	4770      	bx	lr

08015a56 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8015a56:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8015a5a:	1a9b      	subs	r3, r3, r2
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	bfdc      	itt	le
 8015a60:	6882      	ldrle	r2, [r0, #8]
 8015a62:	189b      	addle	r3, r3, r2
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	bfcc      	ite	gt
 8015a68:	2000      	movgt	r0, #0
 8015a6a:	2001      	movle	r0, #1
 8015a6c:	4770      	bx	lr

08015a6e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8015a6e:	6902      	ldr	r2, [r0, #16]
 8015a70:	6843      	ldr	r3, [r0, #4]
 8015a72:	2024      	movs	r0, #36	@ 0x24
 8015a74:	fb00 3002 	mla	r0, r0, r2, r3
 8015a78:	4770      	bx	lr

08015a7a <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8015a7a:	6803      	ldr	r3, [r0, #0]
 8015a7c:	691b      	ldr	r3, [r3, #16]
 8015a7e:	4718      	bx	r3

08015a80 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8015a80:	2301      	movs	r3, #1
 8015a82:	b570      	push	{r4, r5, r6, lr}
 8015a84:	7203      	strb	r3, [r0, #8]
 8015a86:	4604      	mov	r4, r0
 8015a88:	6840      	ldr	r0, [r0, #4]
 8015a8a:	6803      	ldr	r3, [r0, #0]
 8015a8c:	699b      	ldr	r3, [r3, #24]
 8015a8e:	4798      	blx	r3
 8015a90:	6803      	ldr	r3, [r0, #0]
 8015a92:	4605      	mov	r5, r0
 8015a94:	2b40      	cmp	r3, #64	@ 0x40
 8015a96:	d00c      	beq.n	8015ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015a98:	d810      	bhi.n	8015abc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8015a9a:	2b04      	cmp	r3, #4
 8015a9c:	d01d      	beq.n	8015ada <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8015a9e:	d804      	bhi.n	8015aaa <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	d006      	beq.n	8015ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015aa4:	2b02      	cmp	r3, #2
 8015aa6:	d02c      	beq.n	8015b02 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8015aa8:	bd70      	pop	{r4, r5, r6, pc}
 8015aaa:	2b08      	cmp	r3, #8
 8015aac:	d01d      	beq.n	8015aea <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8015aae:	2b20      	cmp	r3, #32
 8015ab0:	d1fa      	bne.n	8015aa8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8015ab2:	6823      	ldr	r3, [r4, #0]
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015ab8:	4798      	blx	r3
 8015aba:	e013      	b.n	8015ae4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8015abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ac0:	d0f7      	beq.n	8015ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ac2:	d804      	bhi.n	8015ace <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8015ac4:	2b80      	cmp	r3, #128	@ 0x80
 8015ac6:	d0f4      	beq.n	8015ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015acc:	e7f0      	b.n	8015ab0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8015ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015ad2:	d0ee      	beq.n	8015ab2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8015ad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015ad8:	e7e5      	b.n	8015aa6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	7f01      	ldrb	r1, [r0, #28]
 8015ade:	4620      	mov	r0, r4
 8015ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ae2:	4798      	blx	r3
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ae8:	e006      	b.n	8015af8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8015aea:	6823      	ldr	r3, [r4, #0]
 8015aec:	7f01      	ldrb	r1, [r0, #28]
 8015aee:	4620      	mov	r0, r4
 8015af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015af2:	4798      	blx	r3
 8015af4:	6823      	ldr	r3, [r4, #0]
 8015af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015af8:	4629      	mov	r1, r5
 8015afa:	4620      	mov	r0, r4
 8015afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b00:	4718      	bx	r3
 8015b02:	6823      	ldr	r3, [r4, #0]
 8015b04:	4620      	mov	r0, r4
 8015b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015b08:	4798      	blx	r3
 8015b0a:	e7f3      	b.n	8015af4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08015b0c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8015b0c:	4770      	bx	lr

08015b0e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8015b0e:	4770      	bx	lr

08015b10 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8015b10:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8015b14:	b510      	push	{r4, lr}
 8015b16:	1ad2      	subs	r2, r2, r3
 8015b18:	2a00      	cmp	r2, #0
 8015b1a:	bfdc      	itt	le
 8015b1c:	6884      	ldrle	r4, [r0, #8]
 8015b1e:	1912      	addle	r2, r2, r4
 8015b20:	2a01      	cmp	r2, #1
 8015b22:	dd16      	ble.n	8015b52 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8015b24:	6842      	ldr	r2, [r0, #4]
 8015b26:	2424      	movs	r4, #36	@ 0x24
 8015b28:	fb04 2303 	mla	r3, r4, r3, r2
 8015b2c:	f101 0220 	add.w	r2, r1, #32
 8015b30:	f851 4b04 	ldr.w	r4, [r1], #4
 8015b34:	4291      	cmp	r1, r2
 8015b36:	f843 4b04 	str.w	r4, [r3], #4
 8015b3a:	d1f9      	bne.n	8015b30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8015b3c:	780a      	ldrb	r2, [r1, #0]
 8015b3e:	701a      	strb	r2, [r3, #0]
 8015b40:	68c3      	ldr	r3, [r0, #12]
 8015b42:	6882      	ldr	r2, [r0, #8]
 8015b44:	f3bf 8f5b 	dmb	ish
 8015b48:	3301      	adds	r3, #1
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	bfd8      	it	le
 8015b4e:	1a9b      	suble	r3, r3, r2
 8015b50:	60c3      	str	r3, [r0, #12]
 8015b52:	bd10      	pop	{r4, pc}

08015b54 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8015b54:	6903      	ldr	r3, [r0, #16]
 8015b56:	6882      	ldr	r2, [r0, #8]
 8015b58:	f3bf 8f5b 	dmb	ish
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	bfd8      	it	le
 8015b62:	1a9b      	suble	r3, r3, r2
 8015b64:	6103      	str	r3, [r0, #16]
 8015b66:	4770      	bx	lr

08015b68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8015b68:	b570      	push	{r4, r5, r6, lr}
 8015b6a:	4604      	mov	r4, r0
 8015b6c:	460e      	mov	r6, r1
 8015b6e:	6860      	ldr	r0, [r4, #4]
 8015b70:	6803      	ldr	r3, [r0, #0]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	4798      	blx	r3
 8015b76:	2800      	cmp	r0, #0
 8015b78:	d1f9      	bne.n	8015b6e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8015b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8015bb0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8015b7c:	6828      	ldr	r0, [r5, #0]
 8015b7e:	6803      	ldr	r3, [r0, #0]
 8015b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015b82:	4798      	blx	r3
 8015b84:	f7fb ffd8 	bl	8011b38 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8015b88:	6828      	ldr	r0, [r5, #0]
 8015b8a:	2101      	movs	r1, #1
 8015b8c:	f7ff ff2a 	bl	80159e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8015b90:	6860      	ldr	r0, [r4, #4]
 8015b92:	4631      	mov	r1, r6
 8015b94:	6803      	ldr	r3, [r0, #0]
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	4798      	blx	r3
 8015b9a:	6823      	ldr	r3, [r4, #0]
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ba0:	4798      	blx	r3
 8015ba2:	6828      	ldr	r0, [r5, #0]
 8015ba4:	6803      	ldr	r3, [r0, #0]
 8015ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015baa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bac:	4718      	bx	r3
 8015bae:	bf00      	nop
 8015bb0:	2401bb38 	.word	0x2401bb38

08015bb4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8015bb4:	b508      	push	{r3, lr}
 8015bb6:	f7fb ffa5 	bl	8011b04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8015bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015bbe:	f7fb bfaf 	b.w	8011b20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015bc2 <_ZN8touchgfx13DMA_Interface5startEv>:
 8015bc2:	b510      	push	{r4, lr}
 8015bc4:	4604      	mov	r4, r0
 8015bc6:	6840      	ldr	r0, [r0, #4]
 8015bc8:	6803      	ldr	r3, [r0, #0]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	4798      	blx	r3
 8015bce:	b948      	cbnz	r0, 8015be4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015bd0:	7a63      	ldrb	r3, [r4, #9]
 8015bd2:	b13b      	cbz	r3, 8015be4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015bd4:	7a23      	ldrb	r3, [r4, #8]
 8015bd6:	b92b      	cbnz	r3, 8015be4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	4620      	mov	r0, r4
 8015bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015be2:	4718      	bx	r3
 8015be4:	bd10      	pop	{r4, pc}

08015be6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8015be6:	b570      	push	{r4, r5, r6, lr}
 8015be8:	4604      	mov	r4, r0
 8015bea:	6840      	ldr	r0, [r0, #4]
 8015bec:	6803      	ldr	r3, [r0, #0]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	4798      	blx	r3
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	b930      	cbnz	r0, 8015c04 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015bf6:	7a23      	ldrb	r3, [r4, #8]
 8015bf8:	b123      	cbz	r3, 8015c04 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8015bfa:	6860      	ldr	r0, [r4, #4]
 8015bfc:	6803      	ldr	r3, [r0, #0]
 8015bfe:	695b      	ldr	r3, [r3, #20]
 8015c00:	4798      	blx	r3
 8015c02:	7225      	strb	r5, [r4, #8]
 8015c04:	6860      	ldr	r0, [r4, #4]
 8015c06:	6803      	ldr	r3, [r0, #0]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4798      	blx	r3
 8015c0c:	b928      	cbnz	r0, 8015c1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8015c0e:	6823      	ldr	r3, [r4, #0]
 8015c10:	4620      	mov	r0, r4
 8015c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c18:	4718      	bx	r3
 8015c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c1e:	f7fb bf97 	b.w	8011b50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08015c24 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8015c24:	b510      	push	{r4, lr}
 8015c26:	6082      	str	r2, [r0, #8]
 8015c28:	2200      	movs	r2, #0
 8015c2a:	4c03      	ldr	r4, [pc, #12]	@ (8015c38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8015c2c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015c30:	e9c0 4100 	strd	r4, r1, [r0]
 8015c34:	bd10      	pop	{r4, pc}
 8015c36:	bf00      	nop
 8015c38:	080280dc 	.word	0x080280dc

08015c3c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8015c3c:	6840      	ldr	r0, [r0, #4]
 8015c3e:	6803      	ldr	r3, [r0, #0]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	4718      	bx	r3

08015c44 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8015c44:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8015c48:	4770      	bx	lr

08015c4a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8015c4a:	b510      	push	{r4, lr}
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8015c50:	b150      	cbz	r0, 8015c68 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015c52:	6803      	ldr	r3, [r0, #0]
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	4798      	blx	r3
 8015c58:	b130      	cbz	r0, 8015c68 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8015c5a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015c5c:	4621      	mov	r1, r4
 8015c5e:	6803      	ldr	r3, [r0, #0]
 8015c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c64:	689b      	ldr	r3, [r3, #8]
 8015c66:	4718      	bx	r3
 8015c68:	bd10      	pop	{r4, pc}

08015c6a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8015c6a:	790b      	ldrb	r3, [r1, #4]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	bf0c      	ite	eq
 8015c70:	2301      	moveq	r3, #1
 8015c72:	2300      	movne	r3, #0
 8015c74:	b570      	push	{r4, r5, r6, lr}
 8015c76:	4604      	mov	r4, r0
 8015c78:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8015c7c:	460e      	mov	r6, r1
 8015c7e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8015c82:	d109      	bne.n	8015c98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8015c84:	b14d      	cbz	r5, 8015c9a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8015c86:	7933      	ldrb	r3, [r6, #4]
 8015c88:	2b01      	cmp	r3, #1
 8015c8a:	d10c      	bne.n	8015ca6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015c8c:	6823      	ldr	r3, [r4, #0]
 8015c8e:	4620      	mov	r0, r4
 8015c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c96:	4718      	bx	r3
 8015c98:	b12d      	cbz	r5, 8015ca6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8015c9a:	6823      	ldr	r3, [r4, #0]
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	695b      	ldr	r3, [r3, #20]
 8015ca0:	4798      	blx	r3
 8015ca2:	2d00      	cmp	r5, #0
 8015ca4:	d1ef      	bne.n	8015c86 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8015ca8:	2000      	movs	r0, #0
 8015caa:	4770      	bx	lr

08015cac <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8015cac:	4b07      	ldr	r3, [pc, #28]	@ (8015ccc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8015cae:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8015cb0:	881b      	ldrh	r3, [r3, #0]
 8015cb2:	4293      	cmp	r3, r2
 8015cb4:	bf81      	itttt	hi
 8015cb6:	4b06      	ldrhi	r3, [pc, #24]	@ (8015cd0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015cb8:	681b      	ldrhi	r3, [r3, #0]
 8015cba:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8015cbe:	7858      	ldrbhi	r0, [r3, #1]
 8015cc0:	bf8c      	ite	hi
 8015cc2:	f000 0003 	andhi.w	r0, r0, #3
 8015cc6:	2000      	movls	r0, #0
 8015cc8:	4770      	bx	lr
 8015cca:	bf00      	nop
 8015ccc:	2401bb8c 	.word	0x2401bb8c
 8015cd0:	2401bb88 	.word	0x2401bb88

08015cd4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8015cd4:	4b11      	ldr	r3, [pc, #68]	@ (8015d1c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8015cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cda:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8015cdc:	4604      	mov	r4, r0
 8015cde:	881b      	ldrh	r3, [r3, #0]
 8015ce0:	428b      	cmp	r3, r1
 8015ce2:	d918      	bls.n	8015d16 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8015ce4:	6803      	ldr	r3, [r0, #0]
 8015ce6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8015ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8015d20 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8015cea:	6818      	ldr	r0, [r3, #0]
 8015cec:	f7fa ffde 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8015cf0:	6823      	ldr	r3, [r4, #0]
 8015cf2:	4606      	mov	r6, r0
 8015cf4:	4620      	mov	r0, r4
 8015cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015cf8:	4798      	blx	r3
 8015cfa:	6823      	ldr	r3, [r4, #0]
 8015cfc:	4607      	mov	r7, r0
 8015cfe:	4620      	mov	r0, r4
 8015d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d04:	4798      	blx	r3
 8015d06:	463a      	mov	r2, r7
 8015d08:	4603      	mov	r3, r0
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	4620      	mov	r0, r4
 8015d0e:	46ac      	mov	ip, r5
 8015d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d14:	4760      	bx	ip
 8015d16:	2000      	movs	r0, #0
 8015d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d1c:	2401bb8c 	.word	0x2401bb8c
 8015d20:	2401bb94 	.word	0x2401bb94

08015d24 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015d24:	4b18      	ldr	r3, [pc, #96]	@ (8015d88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015d26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015d2a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	881b      	ldrh	r3, [r3, #0]
 8015d30:	428b      	cmp	r3, r1
 8015d32:	d926      	bls.n	8015d82 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8015d34:	4b15      	ldr	r3, [pc, #84]	@ (8015d8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015d3c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015d40:	4b13      	ldr	r3, [pc, #76]	@ (8015d90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015d42:	7855      	ldrb	r5, [r2, #1]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015d4a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8015d4e:	6833      	ldr	r3, [r6, #0]
 8015d50:	69df      	ldr	r7, [r3, #28]
 8015d52:	4b10      	ldr	r3, [pc, #64]	@ (8015d94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015d54:	6818      	ldr	r0, [r3, #0]
 8015d56:	f7fa ffa9 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8015d5a:	6823      	ldr	r3, [r4, #0]
 8015d5c:	4680      	mov	r8, r0
 8015d5e:	4620      	mov	r0, r4
 8015d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015d62:	4798      	blx	r3
 8015d64:	6823      	ldr	r3, [r4, #0]
 8015d66:	4681      	mov	r9, r0
 8015d68:	4620      	mov	r0, r4
 8015d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015d6e:	4798      	blx	r3
 8015d70:	464b      	mov	r3, r9
 8015d72:	9000      	str	r0, [sp, #0]
 8015d74:	4642      	mov	r2, r8
 8015d76:	4629      	mov	r1, r5
 8015d78:	4630      	mov	r0, r6
 8015d7a:	47b8      	blx	r7
 8015d7c:	b003      	add	sp, #12
 8015d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d82:	2000      	movs	r0, #0
 8015d84:	e7fa      	b.n	8015d7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015d86:	bf00      	nop
 8015d88:	2401bb8c 	.word	0x2401bb8c
 8015d8c:	2401bb88 	.word	0x2401bb88
 8015d90:	2401bb90 	.word	0x2401bb90
 8015d94:	2401bb94 	.word	0x2401bb94

08015d98 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015d98:	b40e      	push	{r1, r2, r3}
 8015d9a:	4b30      	ldr	r3, [pc, #192]	@ (8015e5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015da0:	881a      	ldrh	r2, [r3, #0]
 8015da2:	b09d      	sub	sp, #116	@ 0x74
 8015da4:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8015da6:	4604      	mov	r4, r0
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d954      	bls.n	8015e56 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8015dac:	aa26      	add	r2, sp, #152	@ 0x98
 8015dae:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8015e60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015db2:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8015e64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015db6:	9202      	str	r2, [sp, #8]
 8015db8:	f8d9 2000 	ldr.w	r2, [r9]
 8015dbc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8015dc4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015dc8:	682b      	ldr	r3, [r5, #0]
 8015dca:	4628      	mov	r0, r5
 8015dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dce:	4798      	blx	r3
 8015dd0:	4606      	mov	r6, r0
 8015dd2:	b207      	sxth	r7, r0
 8015dd4:	a803      	add	r0, sp, #12
 8015dd6:	f004 f9bc 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 8015dda:	682b      	ldr	r3, [r5, #0]
 8015ddc:	4628      	mov	r0, r5
 8015dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015de0:	4798      	blx	r3
 8015de2:	682b      	ldr	r3, [r5, #0]
 8015de4:	4682      	mov	sl, r0
 8015de6:	4628      	mov	r0, r5
 8015de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dea:	4798      	blx	r3
 8015dec:	4653      	mov	r3, sl
 8015dee:	9000      	str	r0, [sp, #0]
 8015df0:	a803      	add	r0, sp, #12
 8015df2:	9a02      	ldr	r2, [sp, #8]
 8015df4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8015df6:	f004 fa07 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015dfa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015dfc:	f8d9 3000 	ldr.w	r3, [r9]
 8015e00:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8015e04:	8925      	ldrh	r5, [r4, #8]
 8015e06:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8015e0a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015e0e:	eba5 050c 	sub.w	r5, r5, ip
 8015e12:	784a      	ldrb	r2, [r1, #1]
 8015e14:	f8d8 3000 	ldr.w	r3, [r8]
 8015e18:	b22d      	sxth	r5, r5
 8015e1a:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8015e1e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015e22:	9500      	str	r5, [sp, #0]
 8015e24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015e28:	a803      	add	r0, sp, #12
 8015e2a:	f001 feb7 	bl	8017b9c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015e2e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8015e32:	b203      	sxth	r3, r0
 8015e34:	18b9      	adds	r1, r7, r2
 8015e36:	2900      	cmp	r1, #0
 8015e38:	dd0b      	ble.n	8015e52 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	fb13 f302 	smulbb	r3, r3, r2
 8015e40:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015e44:	b21f      	sxth	r7, r3
 8015e46:	4638      	mov	r0, r7
 8015e48:	b01d      	add	sp, #116	@ 0x74
 8015e4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e4e:	b003      	add	sp, #12
 8015e50:	4770      	bx	lr
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	dcf7      	bgt.n	8015e46 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015e56:	2700      	movs	r7, #0
 8015e58:	e7f5      	b.n	8015e46 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015e5a:	bf00      	nop
 8015e5c:	2401bb8c 	.word	0x2401bb8c
 8015e60:	2401bb88 	.word	0x2401bb88
 8015e64:	2401bb90 	.word	0x2401bb90

08015e68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015e68:	4bbd      	ldr	r3, [pc, #756]	@ (8016160 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8015e6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e6e:	460c      	mov	r4, r1
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8015e74:	b0a9      	sub	sp, #164	@ 0xa4
 8015e76:	4680      	mov	r8, r0
 8015e78:	428b      	cmp	r3, r1
 8015e7a:	d809      	bhi.n	8015e90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8015e82:	6083      	str	r3, [r0, #8]
 8015e84:	e9c0 3200 	strd	r3, r2, [r0]
 8015e88:	4640      	mov	r0, r8
 8015e8a:	b029      	add	sp, #164	@ 0xa4
 8015e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e90:	4eb4      	ldr	r6, [pc, #720]	@ (8016164 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8015e92:	6833      	ldr	r3, [r6, #0]
 8015e94:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015e98:	4bb3      	ldr	r3, [pc, #716]	@ (8016168 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015ea0:	4bb2      	ldr	r3, [pc, #712]	@ (801616c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015ea2:	6818      	ldr	r0, [r3, #0]
 8015ea4:	f7fa ff02 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8015ea8:	682b      	ldr	r3, [r5, #0]
 8015eaa:	4681      	mov	r9, r0
 8015eac:	4628      	mov	r0, r5
 8015eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015eb0:	4798      	blx	r3
 8015eb2:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8015eb4:	b203      	sxth	r3, r0
 8015eb6:	4682      	mov	sl, r0
 8015eb8:	4407      	add	r7, r0
 8015eba:	a80f      	add	r0, sp, #60	@ 0x3c
 8015ebc:	9304      	str	r3, [sp, #16]
 8015ebe:	b2bb      	uxth	r3, r7
 8015ec0:	9303      	str	r3, [sp, #12]
 8015ec2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f040 80a5 	bne.w	8016016 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8015ecc:	f004 f941 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 8015ed0:	682b      	ldr	r3, [r5, #0]
 8015ed2:	4628      	mov	r0, r5
 8015ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ed6:	4798      	blx	r3
 8015ed8:	682b      	ldr	r3, [r5, #0]
 8015eda:	4606      	mov	r6, r0
 8015edc:	4628      	mov	r0, r5
 8015ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ee0:	4798      	blx	r3
 8015ee2:	6823      	ldr	r3, [r4, #0]
 8015ee4:	4607      	mov	r7, r0
 8015ee6:	4620      	mov	r0, r4
 8015ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015eea:	4798      	blx	r3
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	4683      	mov	fp, r0
 8015ef0:	4620      	mov	r0, r4
 8015ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015ef6:	4798      	blx	r3
 8015ef8:	463b      	mov	r3, r7
 8015efa:	4649      	mov	r1, r9
 8015efc:	4632      	mov	r2, r6
 8015efe:	2600      	movs	r6, #0
 8015f00:	e9cd b000 	strd	fp, r0, [sp]
 8015f04:	a80f      	add	r0, sp, #60	@ 0x3c
 8015f06:	4637      	mov	r7, r6
 8015f08:	f004 f993 	bl	801a232 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015f0c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015f10:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8016164 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8015f14:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015f18:	bf0c      	ite	eq
 8015f1a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8015f1e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8015f22:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8015f24:	4629      	mov	r1, r5
 8015f26:	f8db 3000 	ldr.w	r3, [fp]
 8015f2a:	a80f      	add	r0, sp, #60	@ 0x3c
 8015f2c:	3701      	adds	r7, #1
 8015f2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015f32:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015f36:	b2bf      	uxth	r7, r7
 8015f38:	785b      	ldrb	r3, [r3, #1]
 8015f3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015f3e:	f001 fb34 	bl	80175aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015f42:	9b03      	ldr	r3, [sp, #12]
 8015f44:	4286      	cmp	r6, r0
 8015f46:	eba9 0903 	sub.w	r9, r9, r3
 8015f4a:	bfb8      	it	lt
 8015f4c:	4606      	movlt	r6, r0
 8015f4e:	a80f      	add	r0, sp, #60	@ 0x3c
 8015f50:	fa0f f989 	sxth.w	r9, r9
 8015f54:	b236      	sxth	r6, r6
 8015f56:	f004 f923 	bl	801a1a0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015f5a:	b918      	cbnz	r0, 8015f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015f5c:	7a2b      	ldrb	r3, [r5, #8]
 8015f5e:	444b      	add	r3, r9
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	dcde      	bgt.n	8015f22 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8015f64:	9b03      	ldr	r3, [sp, #12]
 8015f66:	4620      	mov	r0, r4
 8015f68:	9a04      	ldr	r2, [sp, #16]
 8015f6a:	fb13 f707 	smulbb	r7, r3, r7
 8015f6e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8015f70:	f895 9009 	ldrb.w	r9, [r5, #9]
 8015f74:	1aff      	subs	r7, r7, r3
 8015f76:	b2bf      	uxth	r7, r7
 8015f78:	b23b      	sxth	r3, r7
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	bfa8      	it	ge
 8015f7e:	4657      	movge	r7, sl
 8015f80:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8015f84:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	444f      	add	r7, r9
 8015f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f8e:	bf08      	it	eq
 8015f90:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8015f94:	fa1f f987 	uxth.w	r9, r7
 8015f98:	bf18      	it	ne
 8015f9a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8015f9e:	4798      	blx	r3
 8015fa0:	2801      	cmp	r0, #1
 8015fa2:	fa0f f789 	sxth.w	r7, r9
 8015fa6:	b2b3      	uxth	r3, r6
 8015fa8:	f000 80e2 	beq.w	8016170 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8015fac:	2802      	cmp	r0, #2
 8015fae:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8015fb2:	f000 80e3 	beq.w	801617c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8015fb6:	7aea      	ldrb	r2, [r5, #11]
 8015fb8:	b236      	sxth	r6, r6
 8015fba:	7b2d      	ldrb	r5, [r5, #12]
 8015fbc:	1ab6      	subs	r6, r6, r2
 8015fbe:	442a      	add	r2, r5
 8015fc0:	fa1f fa86 	uxth.w	sl, r6
 8015fc4:	4413      	add	r3, r2
 8015fc6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8015fca:	fa0f fb8a 	sxth.w	fp, sl
 8015fce:	b29b      	uxth	r3, r3
 8015fd0:	2a02      	cmp	r2, #2
 8015fd2:	b21e      	sxth	r6, r3
 8015fd4:	f000 80d6 	beq.w	8016184 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8015fd8:	2a03      	cmp	r2, #3
 8015fda:	f000 80de 	beq.w	801619a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8015fde:	2a01      	cmp	r2, #1
 8015fe0:	f040 80e6 	bne.w	80161b0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8015fe4:	8925      	ldrh	r5, [r4, #8]
 8015fe6:	4633      	mov	r3, r6
 8015fe8:	463e      	mov	r6, r7
 8015fea:	eba5 0909 	sub.w	r9, r5, r9
 8015fee:	461f      	mov	r7, r3
 8015ff0:	465d      	mov	r5, fp
 8015ff2:	fa0f fb89 	sxth.w	fp, r9
 8015ff6:	4b5d      	ldr	r3, [pc, #372]	@ (801616c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015ff8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8015ffa:	6818      	ldr	r0, [r3, #0]
 8015ffc:	f7fa fe56 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8016000:	f8a8 b000 	strh.w	fp, [r8]
 8016004:	f8a8 5002 	strh.w	r5, [r8, #2]
 8016008:	f8a8 6004 	strh.w	r6, [r8, #4]
 801600c:	f8a8 7006 	strh.w	r7, [r8, #6]
 8016010:	f8c8 0008 	str.w	r0, [r8, #8]
 8016014:	e738      	b.n	8015e88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8016016:	f004 f89c 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 801601a:	682b      	ldr	r3, [r5, #0]
 801601c:	4628      	mov	r0, r5
 801601e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016020:	4798      	blx	r3
 8016022:	682b      	ldr	r3, [r5, #0]
 8016024:	4607      	mov	r7, r0
 8016026:	4628      	mov	r0, r5
 8016028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801602a:	4798      	blx	r3
 801602c:	6823      	ldr	r3, [r4, #0]
 801602e:	4683      	mov	fp, r0
 8016030:	4620      	mov	r0, r4
 8016032:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016034:	4798      	blx	r3
 8016036:	6822      	ldr	r2, [r4, #0]
 8016038:	9005      	str	r0, [sp, #20]
 801603a:	4620      	mov	r0, r4
 801603c:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8016040:	4790      	blx	r2
 8016042:	9b05      	ldr	r3, [sp, #20]
 8016044:	463a      	mov	r2, r7
 8016046:	4649      	mov	r1, r9
 8016048:	9001      	str	r0, [sp, #4]
 801604a:	a80f      	add	r0, sp, #60	@ 0x3c
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	465b      	mov	r3, fp
 8016050:	f004 f8ef 	bl	801a232 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8016054:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016058:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 801605c:	af0f      	add	r7, sp, #60	@ 0x3c
 801605e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016062:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016066:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8016068:	bf0a      	itet	eq
 801606a:	464a      	moveq	r2, r9
 801606c:	461a      	movne	r2, r3
 801606e:	4699      	moveq	r9, r3
 8016070:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8016074:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8016078:	1ad2      	subs	r2, r2, r3
 801607a:	6833      	ldr	r3, [r6, #0]
 801607c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8016080:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8016084:	7859      	ldrb	r1, [r3, #1]
 8016086:	2300      	movs	r3, #0
 8016088:	9707      	str	r7, [sp, #28]
 801608a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801608e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016092:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8016096:	f88d 1020 	strb.w	r1, [sp, #32]
 801609a:	9509      	str	r5, [sp, #36]	@ 0x24
 801609c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80160a0:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 80160a4:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80160a8:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80160ac:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80160b0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80160b4:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80160b8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80160bc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80160c0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 80160c4:	b350      	cbz	r0, 801611c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80160c6:	682b      	ldr	r3, [r5, #0]
 80160c8:	4628      	mov	r0, r5
 80160ca:	695b      	ldr	r3, [r3, #20]
 80160cc:	4798      	blx	r3
 80160ce:	4607      	mov	r7, r0
 80160d0:	b320      	cbz	r0, 801611c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80160d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160d4:	4639      	mov	r1, r7
 80160d6:	6803      	ldr	r3, [r0, #0]
 80160d8:	68db      	ldr	r3, [r3, #12]
 80160da:	4798      	blx	r3
 80160dc:	4606      	mov	r6, r0
 80160de:	b1e8      	cbz	r0, 801611c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80160e0:	7b43      	ldrb	r3, [r0, #13]
 80160e2:	7a82      	ldrb	r2, [r0, #10]
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80160ea:	4313      	orrs	r3, r2
 80160ec:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80160f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80160f4:	2b06      	cmp	r3, #6
 80160f6:	d111      	bne.n	801611c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 80160f8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160fa:	4632      	mov	r2, r6
 80160fc:	4639      	mov	r1, r7
 80160fe:	6803      	ldr	r3, [r0, #0]
 8016100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016102:	4798      	blx	r3
 8016104:	7b73      	ldrb	r3, [r6, #13]
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801610c:	7ab3      	ldrb	r3, [r6, #10]
 801610e:	4313      	orrs	r3, r2
 8016110:	4418      	add	r0, r3
 8016112:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016116:	4418      	add	r0, r3
 8016118:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 801611c:	2600      	movs	r6, #0
 801611e:	4637      	mov	r7, r6
 8016120:	a806      	add	r0, sp, #24
 8016122:	3701      	adds	r7, #1
 8016124:	f001 fc37 	bl	8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016128:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 801612c:	9b03      	ldr	r3, [sp, #12]
 801612e:	b2bf      	uxth	r7, r7
 8016130:	4286      	cmp	r6, r0
 8016132:	eba9 0903 	sub.w	r9, r9, r3
 8016136:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801613a:	bfb8      	it	lt
 801613c:	4606      	movlt	r6, r0
 801613e:	fa0f f989 	sxth.w	r9, r9
 8016142:	b236      	sxth	r6, r6
 8016144:	2b00      	cmp	r3, #0
 8016146:	f43f af0d 	beq.w	8015f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801614a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801614e:	2b00      	cmp	r3, #0
 8016150:	f47f af08 	bne.w	8015f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8016154:	7a2b      	ldrb	r3, [r5, #8]
 8016156:	444b      	add	r3, r9
 8016158:	2b00      	cmp	r3, #0
 801615a:	dce1      	bgt.n	8016120 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 801615c:	e702      	b.n	8015f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801615e:	bf00      	nop
 8016160:	2401bb8c 	.word	0x2401bb8c
 8016164:	2401bb88 	.word	0x2401bb88
 8016168:	2401bb90 	.word	0x2401bb90
 801616c:	2401bb94 	.word	0x2401bb94
 8016170:	ebaa 0606 	sub.w	r6, sl, r6
 8016174:	2002      	movs	r0, #2
 8016176:	fb96 f6f0 	sdiv	r6, r6, r0
 801617a:	e71c      	b.n	8015fb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 801617c:	441e      	add	r6, r3
 801617e:	ebaa 0606 	sub.w	r6, sl, r6
 8016182:	e718      	b.n	8015fb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8016184:	8925      	ldrh	r5, [r4, #8]
 8016186:	1aed      	subs	r5, r5, r3
 8016188:	eba5 050a 	sub.w	r5, r5, sl
 801618c:	fa0f fb85 	sxth.w	fp, r5
 8016190:	8965      	ldrh	r5, [r4, #10]
 8016192:	eba5 0509 	sub.w	r5, r5, r9
 8016196:	b22d      	sxth	r5, r5
 8016198:	e72d      	b.n	8015ff6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801619a:	8965      	ldrh	r5, [r4, #10]
 801619c:	f04f 0b00 	mov.w	fp, #0
 80161a0:	1aed      	subs	r5, r5, r3
 80161a2:	4633      	mov	r3, r6
 80161a4:	463e      	mov	r6, r7
 80161a6:	eba5 050a 	sub.w	r5, r5, sl
 80161aa:	461f      	mov	r7, r3
 80161ac:	b22d      	sxth	r5, r5
 80161ae:	e722      	b.n	8015ff6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80161b0:	2500      	movs	r5, #0
 80161b2:	e720      	b.n	8015ff6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

080161b4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80161b4:	b513      	push	{r0, r1, r4, lr}
 80161b6:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80161ba:	4604      	mov	r4, r0
 80161bc:	b1fb      	cbz	r3, 80161fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80161be:	4b16      	ldr	r3, [pc, #88]	@ (8016218 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80161c0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80161c2:	881b      	ldrh	r3, [r3, #0]
 80161c4:	428b      	cmp	r3, r1
 80161c6:	d91a      	bls.n	80161fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80161c8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	dd16      	ble.n	80161fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80161d0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	dd12      	ble.n	80161fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80161d8:	4b10      	ldr	r3, [pc, #64]	@ (801621c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80161da:	6818      	ldr	r0, [r3, #0]
 80161dc:	f7fa fd66 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 80161e0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80161e4:	6822      	ldr	r2, [r4, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	db06      	blt.n	80161f8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80161ea:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	db02      	blt.n	80161f8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80161f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80161f4:	4298      	cmp	r0, r3
 80161f6:	d004      	beq.n	8016202 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80161f8:	6953      	ldr	r3, [r2, #20]
 80161fa:	4620      	mov	r0, r4
 80161fc:	4798      	blx	r3
 80161fe:	b002      	add	sp, #8
 8016200:	bd10      	pop	{r4, pc}
 8016202:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8016206:	466b      	mov	r3, sp
 8016208:	6912      	ldr	r2, [r2, #16]
 801620a:	c903      	ldmia	r1, {r0, r1}
 801620c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016210:	4619      	mov	r1, r3
 8016212:	4620      	mov	r0, r4
 8016214:	4790      	blx	r2
 8016216:	e7f2      	b.n	80161fe <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8016218:	2401bb8c 	.word	0x2401bb8c
 801621c:	2401bb94 	.word	0x2401bb94

08016220 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8016220:	4b45      	ldr	r3, [pc, #276]	@ (8016338 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8016222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016226:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016228:	b08e      	sub	sp, #56	@ 0x38
 801622a:	881b      	ldrh	r3, [r3, #0]
 801622c:	4604      	mov	r4, r0
 801622e:	4293      	cmp	r3, r2
 8016230:	d97e      	bls.n	8016330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016232:	6808      	ldr	r0, [r1, #0]
 8016234:	ab05      	add	r3, sp, #20
 8016236:	6849      	ldr	r1, [r1, #4]
 8016238:	4d40      	ldr	r5, [pc, #256]	@ (801633c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801623a:	c303      	stmia	r3!, {r0, r1}
 801623c:	4611      	mov	r1, r2
 801623e:	6828      	ldr	r0, [r5, #0]
 8016240:	f7fa fd34 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8016244:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8016248:	2b00      	cmp	r3, #0
 801624a:	db11      	blt.n	8016270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801624c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016250:	2b00      	cmp	r3, #0
 8016252:	db0d      	blt.n	8016270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016254:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8016256:	4298      	cmp	r0, r3
 8016258:	d10a      	bne.n	8016270 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801625a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801625e:	ab09      	add	r3, sp, #36	@ 0x24
 8016260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016264:	e883 0003 	stmia.w	r3, {r0, r1}
 8016268:	4619      	mov	r1, r3
 801626a:	a805      	add	r0, sp, #20
 801626c:	f7fe f834 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8016270:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016274:	2b00      	cmp	r3, #0
 8016276:	dd5b      	ble.n	8016330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016278:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801627c:	2b00      	cmp	r3, #0
 801627e:	dd57      	ble.n	8016330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016280:	4f2f      	ldr	r7, [pc, #188]	@ (8016340 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8016282:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801628a:	4b2e      	ldr	r3, [pc, #184]	@ (8016344 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016292:	2e00      	cmp	r6, #0
 8016294:	d04c      	beq.n	8016330 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016296:	6823      	ldr	r3, [r4, #0]
 8016298:	4620      	mov	r0, r4
 801629a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801629e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162a0:	4798      	blx	r3
 80162a2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 80162aa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80162ae:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80162b2:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80162b6:	785b      	ldrb	r3, [r3, #1]
 80162b8:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80162bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80162c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80162c2:	9609      	str	r6, [sp, #36]	@ 0x24
 80162c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80162c8:	4b1f      	ldr	r3, [pc, #124]	@ (8016348 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80162ca:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80162d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80162d6:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80162da:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80162de:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80162e2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80162e6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80162ea:	b10a      	cbz	r2, 80162f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80162ec:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80162ee:	b906      	cbnz	r6, 80162f2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80162f0:	689e      	ldr	r6, [r3, #8]
 80162f2:	af07      	add	r7, sp, #28
 80162f4:	4621      	mov	r1, r4
 80162f6:	4638      	mov	r0, r7
 80162f8:	f003 fa36 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162fc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80162fe:	6828      	ldr	r0, [r5, #0]
 8016300:	f7fa fcd4 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 8016304:	6823      	ldr	r3, [r4, #0]
 8016306:	4605      	mov	r5, r0
 8016308:	4620      	mov	r0, r4
 801630a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801630c:	4798      	blx	r3
 801630e:	6823      	ldr	r3, [r4, #0]
 8016310:	4680      	mov	r8, r0
 8016312:	4620      	mov	r0, r4
 8016314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016318:	4798      	blx	r3
 801631a:	ab09      	add	r3, sp, #36	@ 0x24
 801631c:	9501      	str	r5, [sp, #4]
 801631e:	9300      	str	r3, [sp, #0]
 8016320:	ab05      	add	r3, sp, #20
 8016322:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8016326:	4630      	mov	r0, r6
 8016328:	e897 0006 	ldmia.w	r7, {r1, r2}
 801632c:	f7fa fc4f 	bl	8010bce <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016330:	b00e      	add	sp, #56	@ 0x38
 8016332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016336:	bf00      	nop
 8016338:	2401bb8c 	.word	0x2401bb8c
 801633c:	2401bb94 	.word	0x2401bb94
 8016340:	2401bb88 	.word	0x2401bb88
 8016344:	2401bb90 	.word	0x2401bb90
 8016348:	2401bb38 	.word	0x2401bb38

0801634c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801634c:	b538      	push	{r3, r4, r5, lr}
 801634e:	4b0e      	ldr	r3, [pc, #56]	@ (8016388 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8016350:	4604      	mov	r4, r0
 8016352:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016354:	881b      	ldrh	r3, [r3, #0]
 8016356:	429a      	cmp	r2, r3
 8016358:	d214      	bcs.n	8016384 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801635a:	6803      	ldr	r3, [r0, #0]
 801635c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801635e:	4798      	blx	r3
 8016360:	6823      	ldr	r3, [r4, #0]
 8016362:	4605      	mov	r5, r0
 8016364:	4620      	mov	r0, r4
 8016366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016368:	4798      	blx	r3
 801636a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801636e:	b22d      	sxth	r5, r5
 8016370:	4601      	mov	r1, r0
 8016372:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8016376:	bf06      	itte	eq
 8016378:	4602      	moveq	r2, r0
 801637a:	4629      	moveq	r1, r5
 801637c:	462a      	movne	r2, r5
 801637e:	4620      	mov	r0, r4
 8016380:	f7f8 fce9 	bl	800ed56 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016384:	bd38      	pop	{r3, r4, r5, pc}
 8016386:	bf00      	nop
 8016388:	2401bb8c 	.word	0x2401bb8c

0801638c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801638c:	b530      	push	{r4, r5, lr}
 801638e:	888b      	ldrh	r3, [r1, #4]
 8016390:	b085      	sub	sp, #20
 8016392:	4604      	mov	r4, r0
 8016394:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8016396:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801639a:	b923      	cbnz	r3, 80163a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801639c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80163a0:	b90b      	cbnz	r3, 80163a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80163a2:	f7ff ffd3 	bl	801634c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80163a6:	6823      	ldr	r3, [r4, #0]
 80163a8:	466d      	mov	r5, sp
 80163aa:	4621      	mov	r1, r4
 80163ac:	343c      	adds	r4, #60	@ 0x3c
 80163ae:	4628      	mov	r0, r5
 80163b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163b4:	4798      	blx	r3
 80163b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80163ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80163be:	b005      	add	sp, #20
 80163c0:	bd30      	pop	{r4, r5, pc}

080163c2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80163c2:	2300      	movs	r3, #0
 80163c4:	8083      	strh	r3, [r0, #4]
 80163c6:	80c3      	strh	r3, [r0, #6]
 80163c8:	8003      	strh	r3, [r0, #0]
 80163ca:	8043      	strh	r3, [r0, #2]
 80163cc:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80163d0:	2bff      	cmp	r3, #255	@ 0xff
 80163d2:	bf01      	itttt	eq
 80163d4:	890b      	ldrheq	r3, [r1, #8]
 80163d6:	8083      	strheq	r3, [r0, #4]
 80163d8:	894b      	ldrheq	r3, [r1, #10]
 80163da:	80c3      	strheq	r3, [r0, #6]
 80163dc:	4770      	bx	lr
	...

080163e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80163e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163e2:	4604      	mov	r4, r0
 80163e4:	466b      	mov	r3, sp
 80163e6:	6808      	ldr	r0, [r1, #0]
 80163e8:	6849      	ldr	r1, [r1, #4]
 80163ea:	c303      	stmia	r3!, {r0, r1}
 80163ec:	6823      	ldr	r3, [r4, #0]
 80163ee:	4669      	mov	r1, sp
 80163f0:	4620      	mov	r0, r4
 80163f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f4:	4798      	blx	r3
 80163f6:	4b08      	ldr	r3, [pc, #32]	@ (8016418 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80163fe:	b10a      	cbz	r2, 8016404 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8016400:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016402:	b900      	cbnz	r0, 8016406 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8016404:	6898      	ldr	r0, [r3, #8]
 8016406:	6803      	ldr	r3, [r0, #0]
 8016408:	4669      	mov	r1, sp
 801640a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801640c:	6a1d      	ldr	r5, [r3, #32]
 801640e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8016412:	47a8      	blx	r5
 8016414:	b003      	add	sp, #12
 8016416:	bd30      	pop	{r4, r5, pc}
 8016418:	2401bb38 	.word	0x2401bb38

0801641c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801641c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8016420:	b12a      	cbz	r2, 801642e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016422:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8016426:	b112      	cbz	r2, 801642e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8016428:	6803      	ldr	r3, [r0, #0]
 801642a:	695b      	ldr	r3, [r3, #20]
 801642c:	4718      	bx	r3
 801642e:	4770      	bx	lr

08016430 <_ZN8touchgfx10TiledImage9setOffsetEss>:
 8016430:	b570      	push	{r4, r5, r6, lr}
 8016432:	6803      	ldr	r3, [r0, #0]
 8016434:	4604      	mov	r4, r0
 8016436:	4615      	mov	r5, r2
 8016438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801643a:	4798      	blx	r3
 801643c:	6823      	ldr	r3, [r4, #0]
 801643e:	4629      	mov	r1, r5
 8016440:	4620      	mov	r0, r4
 8016442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016448:	4718      	bx	r3

0801644a <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
 801644a:	b570      	push	{r4, r5, r6, lr}
 801644c:	6803      	ldr	r3, [r0, #0]
 801644e:	4604      	mov	r4, r0
 8016450:	460e      	mov	r6, r1
 8016452:	4615      	mov	r5, r2
 8016454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016456:	4798      	blx	r3
 8016458:	8030      	strh	r0, [r6, #0]
 801645a:	6823      	ldr	r3, [r4, #0]
 801645c:	4620      	mov	r0, r4
 801645e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016460:	4798      	blx	r3
 8016462:	8028      	strh	r0, [r5, #0]
 8016464:	bd70      	pop	{r4, r5, r6, pc}

08016466 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
 8016466:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 801646a:	4770      	bx	lr

0801646c <_ZN8touchgfx10TiledImage10getYOffsetEv>:
 801646c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8016470:	4770      	bx	lr

08016472 <_ZN8touchgfx10TiledImageD1Ev>:
 8016472:	4770      	bx	lr

08016474 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
 8016474:	b510      	push	{r4, lr}
 8016476:	4604      	mov	r4, r0
 8016478:	f000 fad2 	bl	8016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801647c:	6823      	ldr	r3, [r4, #0]
 801647e:	4620      	mov	r0, r4
 8016480:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8016484:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 8016488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801648e:	4718      	bx	r3

08016490 <_ZN8touchgfx10TiledImage10setXOffsetEs>:
 8016490:	b538      	push	{r3, r4, r5, lr}
 8016492:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8016496:	4604      	mov	r4, r0
 8016498:	8541      	strh	r1, [r0, #42]	@ 0x2a
 801649a:	4628      	mov	r0, r5
 801649c:	f005 faae 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80164a0:	b188      	cbz	r0, 80164c6 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80164a2:	4628      	mov	r0, r5
 80164a4:	f005 faaa 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80164a8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	@ 0x2a
 80164ac:	fb92 f3f0 	sdiv	r3, r2, r0
 80164b0:	fb03 2010 	mls	r0, r3, r0, r2
 80164b4:	2800      	cmp	r0, #0
 80164b6:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80164b8:	da05      	bge.n	80164c6 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
 80164ba:	4628      	mov	r0, r5
 80164bc:	f005 fa9e 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80164c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80164c2:	4418      	add	r0, r3
 80164c4:	8560      	strh	r0, [r4, #42]	@ 0x2a
 80164c6:	bd38      	pop	{r3, r4, r5, pc}

080164c8 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
 80164c8:	b538      	push	{r3, r4, r5, lr}
 80164ca:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80164ce:	4604      	mov	r4, r0
 80164d0:	8581      	strh	r1, [r0, #44]	@ 0x2c
 80164d2:	4628      	mov	r0, r5
 80164d4:	f005 fac6 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80164d8:	b188      	cbz	r0, 80164fe <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80164da:	4628      	mov	r0, r5
 80164dc:	f005 fac2 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80164e0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 80164e4:	fb92 f3f0 	sdiv	r3, r2, r0
 80164e8:	fb03 2010 	mls	r0, r3, r0, r2
 80164ec:	2800      	cmp	r0, #0
 80164ee:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80164f0:	da05      	bge.n	80164fe <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
 80164f2:	4628      	mov	r0, r5
 80164f4:	f005 fab6 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80164f8:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80164fa:	4418      	add	r0, r3
 80164fc:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 80164fe:	bd38      	pop	{r3, r4, r5, pc}

08016500 <_ZN8touchgfx10TiledImageD0Ev>:
 8016500:	b510      	push	{r4, lr}
 8016502:	4604      	mov	r4, r0
 8016504:	2130      	movs	r1, #48	@ 0x30
 8016506:	f00e fcf8 	bl	8024efa <_ZdlPvj>
 801650a:	4620      	mov	r0, r4
 801650c:	bd10      	pop	{r4, pc}
	...

08016510 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
 8016510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016514:	f100 0b26 	add.w	fp, r0, #38	@ 0x26
 8016518:	b093      	sub	sp, #76	@ 0x4c
 801651a:	4607      	mov	r7, r0
 801651c:	460e      	mov	r6, r1
 801651e:	4658      	mov	r0, fp
 8016520:	f005 fa6c 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016524:	4681      	mov	r9, r0
 8016526:	4658      	mov	r0, fp
 8016528:	f005 fa9c 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801652c:	4605      	mov	r5, r0
 801652e:	f1b9 0f00 	cmp.w	r9, #0
 8016532:	f000 80c4 	beq.w	80166be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 8016536:	2800      	cmp	r0, #0
 8016538:	f000 80c1 	beq.w	80166be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 801653c:	2300      	movs	r3, #0
 801653e:	a90e      	add	r1, sp, #56	@ 0x38
 8016540:	4638      	mov	r0, r7
 8016542:	fa1f f889 	uxth.w	r8, r9
 8016546:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801654e:	4798      	blx	r3
 8016550:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8016554:	f9b6 3000 	ldrsh.w	r3, [r6]
 8016558:	88b1      	ldrh	r1, [r6, #4]
 801655a:	189c      	adds	r4, r3, r2
 801655c:	440b      	add	r3, r1
 801655e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8016562:	fa02 f383 	sxtah	r3, r2, r3
 8016566:	3b01      	subs	r3, #1
 8016568:	fb93 f3f9 	sdiv	r3, r3, r9
 801656c:	fb94 f4f9 	sdiv	r4, r4, r9
 8016570:	fb13 f308 	smulbb	r3, r3, r8
 8016574:	fb14 f408 	smulbb	r4, r4, r8
 8016578:	b21b      	sxth	r3, r3
 801657a:	1aa4      	subs	r4, r4, r2
 801657c:	b2aa      	uxth	r2, r5
 801657e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016580:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016584:	b2a4      	uxth	r4, r4
 8016586:	9205      	str	r2, [sp, #20]
 8016588:	185a      	adds	r2, r3, r1
 801658a:	9805      	ldr	r0, [sp, #20]
 801658c:	fb92 f2f5 	sdiv	r2, r2, r5
 8016590:	fb12 f200 	smulbb	r2, r2, r0
 8016594:	1a52      	subs	r2, r2, r1
 8016596:	b212      	sxth	r2, r2
 8016598:	920c      	str	r2, [sp, #48]	@ 0x30
 801659a:	88f2      	ldrh	r2, [r6, #6]
 801659c:	4413      	add	r3, r2
 801659e:	fa01 f383 	sxtah	r3, r1, r3
 80165a2:	3b01      	subs	r3, #1
 80165a4:	fb93 f3f5 	sdiv	r3, r3, r5
 80165a8:	fb13 f300 	smulbb	r3, r3, r0
 80165ac:	eb08 0504 	add.w	r5, r8, r4
 80165b0:	b21b      	sxth	r3, r3
 80165b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80165b4:	b223      	sxth	r3, r4
 80165b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80165b8:	b2ad      	uxth	r5, r5
 80165ba:	4293      	cmp	r3, r2
 80165bc:	9306      	str	r3, [sp, #24]
 80165be:	dc7e      	bgt.n	80166be <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
 80165c0:	b22b      	sxth	r3, r5
 80165c2:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 80165c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80165c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80165ca:	4599      	cmp	r9, r3
 80165cc:	dd03      	ble.n	80165d6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
 80165ce:	4444      	add	r4, r8
 80165d0:	4445      	add	r5, r8
 80165d2:	b2a4      	uxth	r4, r4
 80165d4:	e7ee      	b.n	80165b4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
 80165d6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80165da:	88b2      	ldrh	r2, [r6, #4]
 80165dc:	9806      	ldr	r0, [sp, #24]
 80165de:	4462      	add	r2, ip
 80165e0:	9905      	ldr	r1, [sp, #20]
 80165e2:	b292      	uxth	r2, r2
 80165e4:	b213      	sxth	r3, r2
 80165e6:	9308      	str	r3, [sp, #32]
 80165e8:	fa1f f389 	uxth.w	r3, r9
 80165ec:	4419      	add	r1, r3
 80165ee:	9307      	str	r3, [sp, #28]
 80165f0:	4603      	mov	r3, r0
 80165f2:	9808      	ldr	r0, [sp, #32]
 80165f4:	b289      	uxth	r1, r1
 80165f6:	4283      	cmp	r3, r0
 80165f8:	fa0f fa81 	sxth.w	sl, r1
 80165fc:	da5b      	bge.n	80166b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 80165fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016600:	4584      	cmp	ip, r0
 8016602:	da58      	bge.n	80166b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016604:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8016608:	f8b6 e006 	ldrh.w	lr, [r6, #6]
 801660c:	4486      	add	lr, r0
 801660e:	fa1f fe8e 	uxth.w	lr, lr
 8016612:	fa0f f38e 	sxth.w	r3, lr
 8016616:	4599      	cmp	r9, r3
 8016618:	9309      	str	r3, [sp, #36]	@ 0x24
 801661a:	da4c      	bge.n	80166b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 801661c:	4550      	cmp	r0, sl
 801661e:	da4a      	bge.n	80166b6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
 8016620:	9b06      	ldr	r3, [sp, #24]
 8016622:	459c      	cmp	ip, r3
 8016624:	bfb8      	it	lt
 8016626:	469c      	movlt	ip, r3
 8016628:	4548      	cmp	r0, r9
 801662a:	9b08      	ldr	r3, [sp, #32]
 801662c:	bfb8      	it	lt
 801662e:	4648      	movlt	r0, r9
 8016630:	f8ad c040 	strh.w	ip, [sp, #64]	@ 0x40
 8016634:	4699      	mov	r9, r3
 8016636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016638:	f8ad 0042 	strh.w	r0, [sp, #66]	@ 0x42
 801663c:	4599      	cmp	r9, r3
 801663e:	bfc8      	it	gt
 8016640:	462a      	movgt	r2, r5
 8016642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016644:	4553      	cmp	r3, sl
 8016646:	bfd8      	it	le
 8016648:	4671      	movle	r1, lr
 801664a:	eba2 020c 	sub.w	r2, r2, ip
 801664e:	1a09      	subs	r1, r1, r0
 8016650:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
 8016654:	f8ad 1046 	strh.w	r1, [sp, #70]	@ 0x46
 8016658:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801665c:	9b07      	ldr	r3, [sp, #28]
 801665e:	1b12      	subs	r2, r2, r4
 8016660:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8016664:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8016668:	1ad2      	subs	r2, r2, r3
 801666a:	4b16      	ldr	r3, [pc, #88]	@ (80166c4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
 801666c:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8016670:	681a      	ldr	r2, [r3, #0]
 8016672:	f892 1058 	ldrb.w	r1, [r2, #88]	@ 0x58
 8016676:	b109      	cbz	r1, 801667c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
 8016678:	6cd0      	ldr	r0, [r2, #76]	@ 0x4c
 801667a:	b900      	cbnz	r0, 801667e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
 801667c:	6890      	ldr	r0, [r2, #8]
 801667e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8016682:	f04f 0c01 	mov.w	ip, #1
 8016686:	9b07      	ldr	r3, [sp, #28]
 8016688:	6801      	ldr	r1, [r0, #0]
 801668a:	4413      	add	r3, r2
 801668c:	f8cd c008 	str.w	ip, [sp, #8]
 8016690:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8016694:	f897 c028 	ldrb.w	ip, [r7, #40]	@ 0x28
 8016698:	b21b      	sxth	r3, r3
 801669a:	4422      	add	r2, r4
 801669c:	f8cd c004 	str.w	ip, [sp, #4]
 80166a0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80166a4:	b212      	sxth	r2, r2
 80166a6:	f8cd c000 	str.w	ip, [sp]
 80166aa:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80166ae:	4659      	mov	r1, fp
 80166b0:	47c8      	blx	r9
 80166b2:	46d1      	mov	r9, sl
 80166b4:	e788      	b.n	80165c8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
 80166b6:	2300      	movs	r3, #0
 80166b8:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80166bc:	e7cc      	b.n	8016658 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
 80166be:	b013      	add	sp, #76	@ 0x4c
 80166c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c4:	2401bb38 	.word	0x2401bb38

080166c8 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
 80166c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166cc:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80166d0:	4606      	mov	r6, r0
 80166d2:	4689      	mov	r9, r1
 80166d4:	2bff      	cmp	r3, #255	@ 0xff
 80166d6:	d008      	beq.n	80166ea <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
 80166d8:	2300      	movs	r3, #0
 80166da:	8003      	strh	r3, [r0, #0]
 80166dc:	8043      	strh	r3, [r0, #2]
 80166de:	8083      	strh	r3, [r0, #4]
 80166e0:	4630      	mov	r0, r6
 80166e2:	80f3      	strh	r3, [r6, #6]
 80166e4:	b003      	add	sp, #12
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ea:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 80166ee:	4668      	mov	r0, sp
 80166f0:	4659      	mov	r1, fp
 80166f2:	f005 f9eb 	bl	801bacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80166f6:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80166fa:	4658      	mov	r0, fp
 80166fc:	f9bd 7000 	ldrsh.w	r7, [sp]
 8016700:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8016704:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
 8016708:	f005 f978 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801670c:	4284      	cmp	r4, r0
 801670e:	d10d      	bne.n	801672c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
 8016710:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
 8016714:	4658      	mov	r0, fp
 8016716:	f005 f9a5 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801671a:	4580      	cmp	r8, r0
 801671c:	d12a      	bne.n	8016774 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
 801671e:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
 8016722:	8037      	strh	r7, [r6, #0]
 8016724:	f8a6 a002 	strh.w	sl, [r6, #2]
 8016728:	80b5      	strh	r5, [r6, #4]
 801672a:	e7d9      	b.n	80166e0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
 801672c:	f8b9 502a 	ldrh.w	r5, [r9, #42]	@ 0x2a
 8016730:	4658      	mov	r0, fp
 8016732:	f005 f963 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016736:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
 801673a:	1b7f      	subs	r7, r7, r5
 801673c:	b2a3      	uxth	r3, r4
 801673e:	b2bd      	uxth	r5, r7
 8016740:	b22f      	sxth	r7, r5
 8016742:	4428      	add	r0, r5
 8016744:	2f00      	cmp	r7, #0
 8016746:	b280      	uxth	r0, r0
 8016748:	bfb8      	it	lt
 801674a:	18ed      	addlt	r5, r5, r3
 801674c:	4403      	add	r3, r0
 801674e:	bfac      	ite	ge
 8016750:	4625      	movge	r5, r4
 8016752:	2700      	movlt	r7, #0
 8016754:	b29b      	uxth	r3, r3
 8016756:	bfb8      	it	lt
 8016758:	b22d      	sxthlt	r5, r5
 801675a:	b219      	sxth	r1, r3
 801675c:	bfb8      	it	lt
 801675e:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
 8016762:	4291      	cmp	r1, r2
 8016764:	bfc4      	itt	gt
 8016766:	1a9c      	subgt	r4, r3, r2
 8016768:	b224      	sxthgt	r4, r4
 801676a:	42ac      	cmp	r4, r5
 801676c:	bfc4      	itt	gt
 801676e:	b207      	sxthgt	r7, r0
 8016770:	4625      	movgt	r5, r4
 8016772:	e7cf      	b.n	8016714 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
 8016774:	f8b9 402c 	ldrh.w	r4, [r9, #44]	@ 0x2c
 8016778:	4658      	mov	r0, fp
 801677a:	f005 f973 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801677e:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
 8016782:	ebaa 0404 	sub.w	r4, sl, r4
 8016786:	fa1f f288 	uxth.w	r2, r8
 801678a:	b2a4      	uxth	r4, r4
 801678c:	fa0f fa84 	sxth.w	sl, r4
 8016790:	4420      	add	r0, r4
 8016792:	f1ba 0f00 	cmp.w	sl, #0
 8016796:	b280      	uxth	r0, r0
 8016798:	bfb8      	it	lt
 801679a:	18a3      	addlt	r3, r4, r2
 801679c:	4402      	add	r2, r0
 801679e:	bfac      	ite	ge
 80167a0:	4643      	movge	r3, r8
 80167a2:	f04f 0a00 	movlt.w	sl, #0
 80167a6:	b292      	uxth	r2, r2
 80167a8:	bfb8      	it	lt
 80167aa:	b21b      	sxthlt	r3, r3
 80167ac:	b214      	sxth	r4, r2
 80167ae:	bfb8      	it	lt
 80167b0:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80167b4:	428c      	cmp	r4, r1
 80167b6:	bfc4      	itt	gt
 80167b8:	eba2 0801 	subgt.w	r8, r2, r1
 80167bc:	fa0f f888 	sxthgt.w	r8, r8
 80167c0:	4598      	cmp	r8, r3
 80167c2:	bfc4      	itt	gt
 80167c4:	fa0f fa80 	sxthgt.w	sl, r0
 80167c8:	4643      	movgt	r3, r8
 80167ca:	e7aa      	b.n	8016722 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

080167cc <_ZNK8touchgfx5Image17invalidateContentEv>:
 80167cc:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80167d0:	b12a      	cbz	r2, 80167de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80167d2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80167d6:	b112      	cbz	r2, 80167de <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80167d8:	6803      	ldr	r3, [r0, #0]
 80167da:	695b      	ldr	r3, [r3, #20]
 80167dc:	4718      	bx	r3
 80167de:	4770      	bx	lr

080167e0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80167e0:	b570      	push	{r4, r5, r6, lr}
 80167e2:	880b      	ldrh	r3, [r1, #0]
 80167e4:	4605      	mov	r5, r0
 80167e6:	4604      	mov	r4, r0
 80167e8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80167ea:	8813      	ldrh	r3, [r2, #0]
 80167ec:	f825 3f30 	strh.w	r3, [r5, #48]!
 80167f0:	4628      	mov	r0, r5
 80167f2:	f005 f903 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80167f6:	4606      	mov	r6, r0
 80167f8:	4628      	mov	r0, r5
 80167fa:	f005 f933 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	4605      	mov	r5, r0
 8016802:	4631      	mov	r1, r6
 8016804:	4620      	mov	r0, r4
 8016806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016808:	4798      	blx	r3
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	4629      	mov	r1, r5
 801680e:	4620      	mov	r0, r4
 8016810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016816:	4718      	bx	r3

08016818 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8016818:	b510      	push	{r4, lr}
 801681a:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 801681e:	4604      	mov	r4, r0
 8016820:	2bff      	cmp	r3, #255	@ 0xff
 8016822:	d006      	beq.n	8016832 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8016824:	2300      	movs	r3, #0
 8016826:	8003      	strh	r3, [r0, #0]
 8016828:	8043      	strh	r3, [r0, #2]
 801682a:	8083      	strh	r3, [r0, #4]
 801682c:	80c3      	strh	r3, [r0, #6]
 801682e:	4620      	mov	r0, r4
 8016830:	bd10      	pop	{r4, pc}
 8016832:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8016836:	b11b      	cbz	r3, 8016840 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8016838:	3130      	adds	r1, #48	@ 0x30
 801683a:	f005 f947 	bl	801bacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801683e:	e7f6      	b.n	801682e <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8016840:	312e      	adds	r1, #46	@ 0x2e
 8016842:	e7fa      	b.n	801683a <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08016844 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8016844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016848:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801684c:	b08a      	sub	sp, #40	@ 0x28
 801684e:	4604      	mov	r4, r0
 8016850:	4688      	mov	r8, r1
 8016852:	2b00      	cmp	r3, #0
 8016854:	d066      	beq.n	8016924 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8016856:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8016858:	a805      	add	r0, sp, #20
 801685a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801685e:	f005 f8cd 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016862:	4607      	mov	r7, r0
 8016864:	a805      	add	r0, sp, #20
 8016866:	f005 f8fd 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801686a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801686e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8016872:	2300      	movs	r3, #0
 8016874:	4432      	add	r2, r6
 8016876:	9306      	str	r3, [sp, #24]
 8016878:	b292      	uxth	r2, r2
 801687a:	fa0f fc82 	sxth.w	ip, r2
 801687e:	459c      	cmp	ip, r3
 8016880:	dd52      	ble.n	8016928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016882:	42b7      	cmp	r7, r6
 8016884:	dd50      	ble.n	8016928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016886:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801688a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801688e:	442b      	add	r3, r5
 8016890:	b29b      	uxth	r3, r3
 8016892:	b219      	sxth	r1, r3
 8016894:	2900      	cmp	r1, #0
 8016896:	dd47      	ble.n	8016928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8016898:	42a8      	cmp	r0, r5
 801689a:	dd45      	ble.n	8016928 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801689c:	4567      	cmp	r7, ip
 801689e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80168a2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80168a6:	bfb8      	it	lt
 80168a8:	b2ba      	uxthlt	r2, r7
 80168aa:	4288      	cmp	r0, r1
 80168ac:	f8ad 6018 	strh.w	r6, [sp, #24]
 80168b0:	bfb8      	it	lt
 80168b2:	b283      	uxthlt	r3, r0
 80168b4:	1b92      	subs	r2, r2, r6
 80168b6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80168ba:	1b5b      	subs	r3, r3, r5
 80168bc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80168c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80168c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80168c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80168cc:	429a      	cmp	r2, r3
 80168ce:	d026      	beq.n	801691e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80168d0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	dd22      	ble.n	801691e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80168d8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	dd1e      	ble.n	801691e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80168e0:	2300      	movs	r3, #0
 80168e2:	a908      	add	r1, sp, #32
 80168e4:	4620      	mov	r0, r4
 80168e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80168ea:	6823      	ldr	r3, [r4, #0]
 80168ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168ee:	4798      	blx	r3
 80168f0:	4b0f      	ldr	r3, [pc, #60]	@ (8016930 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80168f8:	b10a      	cbz	r2, 80168fe <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80168fa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80168fc:	b900      	cbnz	r0, 8016900 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80168fe:	6898      	ldr	r0, [r3, #8]
 8016900:	2501      	movs	r5, #1
 8016902:	6801      	ldr	r1, [r0, #0]
 8016904:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8016908:	9502      	str	r5, [sp, #8]
 801690a:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801690e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8016912:	9401      	str	r4, [sp, #4]
 8016914:	ac06      	add	r4, sp, #24
 8016916:	9400      	str	r4, [sp, #0]
 8016918:	688c      	ldr	r4, [r1, #8]
 801691a:	a905      	add	r1, sp, #20
 801691c:	47a0      	blx	r4
 801691e:	b00a      	add	sp, #40	@ 0x28
 8016920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016924:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8016926:	e797      	b.n	8016858 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8016928:	2300      	movs	r3, #0
 801692a:	9307      	str	r3, [sp, #28]
 801692c:	e7ca      	b.n	80168c4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801692e:	bf00      	nop
 8016930:	2401bb38 	.word	0x2401bb38

08016934 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8016934:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8016938:	b12a      	cbz	r2, 8016946 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801693a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801693e:	b112      	cbz	r2, 8016946 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8016940:	6803      	ldr	r3, [r0, #0]
 8016942:	695b      	ldr	r3, [r3, #20]
 8016944:	4718      	bx	r3
 8016946:	4770      	bx	lr

08016948 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8016948:	4b30      	ldr	r3, [pc, #192]	@ (8016a0c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801694a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801694e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8016950:	b08d      	sub	sp, #52	@ 0x34
 8016952:	881b      	ldrh	r3, [r3, #0]
 8016954:	4604      	mov	r4, r0
 8016956:	460f      	mov	r7, r1
 8016958:	4293      	cmp	r3, r2
 801695a:	d954      	bls.n	8016a06 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801695c:	4b2c      	ldr	r3, [pc, #176]	@ (8016a10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801695e:	6819      	ldr	r1, [r3, #0]
 8016960:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8016964:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8016968:	4a2a      	ldr	r2, [pc, #168]	@ (8016a14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801696a:	6812      	ldr	r2, [r2, #0]
 801696c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8016970:	2900      	cmp	r1, #0
 8016972:	d048      	beq.n	8016a06 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016974:	785a      	ldrb	r2, [r3, #1]
 8016976:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801697a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801697e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8016982:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016986:	4b24      	ldr	r3, [pc, #144]	@ (8016a18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8016988:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8016992:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 8016996:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801699a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801699c:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80169a0:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80169a4:	9107      	str	r1, [sp, #28]
 80169a6:	f88d 8020 	strb.w	r8, [sp, #32]
 80169aa:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80169ae:	9609      	str	r6, [sp, #36]	@ 0x24
 80169b0:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80169b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80169b8:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80169bc:	b10b      	cbz	r3, 80169c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80169be:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80169c0:	b905      	cbnz	r5, 80169c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80169c2:	6895      	ldr	r5, [r2, #8]
 80169c4:	ae05      	add	r6, sp, #20
 80169c6:	4621      	mov	r1, r4
 80169c8:	4630      	mov	r0, r6
 80169ca:	f002 fecd 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80169ce:	4b13      	ldr	r3, [pc, #76]	@ (8016a1c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80169d0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80169d2:	6818      	ldr	r0, [r3, #0]
 80169d4:	f7fa f96a 	bl	8010cac <_ZNK8touchgfx5Texts7getTextEt>
 80169d8:	6823      	ldr	r3, [r4, #0]
 80169da:	4680      	mov	r8, r0
 80169dc:	4620      	mov	r0, r4
 80169de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80169e0:	4798      	blx	r3
 80169e2:	6823      	ldr	r3, [r4, #0]
 80169e4:	4681      	mov	r9, r0
 80169e6:	4620      	mov	r0, r4
 80169e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80169ec:	4798      	blx	r3
 80169ee:	ab07      	add	r3, sp, #28
 80169f0:	f8cd 8004 	str.w	r8, [sp, #4]
 80169f4:	9300      	str	r3, [sp, #0]
 80169f6:	463b      	mov	r3, r7
 80169f8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80169fc:	4628      	mov	r0, r5
 80169fe:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016a02:	f7fa f8e4 	bl	8010bce <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8016a06:	b00d      	add	sp, #52	@ 0x34
 8016a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a0c:	2401bb8c 	.word	0x2401bb8c
 8016a10:	2401bb88 	.word	0x2401bb88
 8016a14:	2401bb90 	.word	0x2401bb90
 8016a18:	2401bb38 	.word	0x2401bb38
 8016a1c:	2401bb94 	.word	0x2401bb94

08016a20 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016a20:	b570      	push	{r4, r5, r6, lr}
 8016a22:	880b      	ldrh	r3, [r1, #0]
 8016a24:	460d      	mov	r5, r1
 8016a26:	4604      	mov	r4, r0
 8016a28:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8016a2a:	4608      	mov	r0, r1
 8016a2c:	f004 ffe6 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a30:	4606      	mov	r6, r0
 8016a32:	4628      	mov	r0, r5
 8016a34:	f005 f816 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	4605      	mov	r5, r0
 8016a3c:	4631      	mov	r1, r6
 8016a3e:	4620      	mov	r0, r4
 8016a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a42:	4798      	blx	r3
 8016a44:	6823      	ldr	r3, [r4, #0]
 8016a46:	4629      	mov	r1, r5
 8016a48:	4620      	mov	r0, r4
 8016a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a50:	4718      	bx	r3

08016a52 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016a52:	b510      	push	{r4, lr}
 8016a54:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8016a58:	4604      	mov	r4, r0
 8016a5a:	2bff      	cmp	r3, #255	@ 0xff
 8016a5c:	d006      	beq.n	8016a6c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016a5e:	2300      	movs	r3, #0
 8016a60:	8003      	strh	r3, [r0, #0]
 8016a62:	8043      	strh	r3, [r0, #2]
 8016a64:	8083      	strh	r3, [r0, #4]
 8016a66:	80c3      	strh	r3, [r0, #6]
 8016a68:	4620      	mov	r0, r4
 8016a6a:	bd10      	pop	{r4, pc}
 8016a6c:	3126      	adds	r1, #38	@ 0x26
 8016a6e:	f005 f82d 	bl	801bacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016a72:	e7f9      	b.n	8016a68 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08016a74 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a78:	4604      	mov	r4, r0
 8016a7a:	b088      	sub	sp, #32
 8016a7c:	2500      	movs	r5, #0
 8016a7e:	460f      	mov	r7, r1
 8016a80:	f854 3b26 	ldr.w	r3, [r4], #38
 8016a84:	a904      	add	r1, sp, #16
 8016a86:	4606      	mov	r6, r0
 8016a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016a8e:	4798      	blx	r3
 8016a90:	4620      	mov	r0, r4
 8016a92:	f004 ffb3 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016a96:	4680      	mov	r8, r0
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f004 ffe3 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016a9e:	9506      	str	r5, [sp, #24]
 8016aa0:	ad06      	add	r5, sp, #24
 8016aa2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016aa6:	4639      	mov	r1, r7
 8016aa8:	f8ad 801c 	strh.w	r8, [sp, #28]
 8016aac:	4628      	mov	r0, r5
 8016aae:	f7fd fc13 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8016ab2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	dd19      	ble.n	8016aee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016aba:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	dd15      	ble.n	8016aee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8016ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8016af4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8016aca:	b10a      	cbz	r2, 8016ad0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8016acc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8016ace:	b900      	cbnz	r0, 8016ad2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8016ad0:	6898      	ldr	r0, [r3, #8]
 8016ad2:	2701      	movs	r7, #1
 8016ad4:	6801      	ldr	r1, [r0, #0]
 8016ad6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8016ada:	9702      	str	r7, [sp, #8]
 8016adc:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8016ae0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8016ae4:	e9cd 5600 	strd	r5, r6, [sp]
 8016ae8:	688d      	ldr	r5, [r1, #8]
 8016aea:	4621      	mov	r1, r4
 8016aec:	47a8      	blx	r5
 8016aee:	b008      	add	sp, #32
 8016af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016af4:	2401bb38 	.word	0x2401bb38

08016af8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8016af8:	b510      	push	{r4, lr}
 8016afa:	6803      	ldr	r3, [r0, #0]
 8016afc:	460c      	mov	r4, r1
 8016afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b00:	4798      	blx	r3
 8016b02:	1b03      	subs	r3, r0, r4
 8016b04:	4258      	negs	r0, r3
 8016b06:	4158      	adcs	r0, r3
 8016b08:	bd10      	pop	{r4, pc}
	...

08016b0c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8016b0c:	4b01      	ldr	r3, [pc, #4]	@ (8016b14 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8016b0e:	6019      	str	r1, [r3, #0]
 8016b10:	4770      	bx	lr
 8016b12:	bf00      	nop
 8016b14:	2401bb40 	.word	0x2401bb40

08016b18 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	4696      	mov	lr, r2
 8016b1e:	b097      	sub	sp, #92	@ 0x5c
 8016b20:	4605      	mov	r5, r0
 8016b22:	4614      	mov	r4, r2
 8016b24:	460e      	mov	r6, r1
 8016b26:	461f      	mov	r7, r3
 8016b28:	f10d 0c1c 	add.w	ip, sp, #28
 8016b2c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8016b30:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8016b34:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8016b38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b40:	f8de 3000 	ldr.w	r3, [lr]
 8016b44:	f104 0e14 	add.w	lr, r4, #20
 8016b48:	f8cc 3000 	str.w	r3, [ip]
 8016b4c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016b50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b58:	f8de 3000 	ldr.w	r3, [lr]
 8016b5c:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8016b60:	f8cc 3000 	str.w	r3, [ip]
 8016b64:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8016b68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b70:	f8de 3000 	ldr.w	r3, [lr]
 8016b74:	4631      	mov	r1, r6
 8016b76:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016b78:	4628      	mov	r0, r5
 8016b7a:	f8cc 3000 	str.w	r3, [ip]
 8016b7e:	682b      	ldr	r3, [r5, #0]
 8016b80:	9201      	str	r2, [sp, #4]
 8016b82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016b84:	f8cd 8008 	str.w	r8, [sp, #8]
 8016b88:	9200      	str	r2, [sp, #0]
 8016b8a:	aa07      	add	r2, sp, #28
 8016b8c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016b90:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8016b94:	463b      	mov	r3, r7
 8016b96:	47d8      	blx	fp
 8016b98:	46a6      	mov	lr, r4
 8016b9a:	f10d 0c1c 	add.w	ip, sp, #28
 8016b9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ba2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ba6:	f8de 3000 	ldr.w	r3, [lr]
 8016baa:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8016bae:	343c      	adds	r4, #60	@ 0x3c
 8016bb0:	f8cc 3000 	str.w	r3, [ip]
 8016bb4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016bb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bc0:	f8de 3000 	ldr.w	r3, [lr]
 8016bc4:	f8cc 3000 	str.w	r3, [ip]
 8016bc8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8016bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bd2:	6823      	ldr	r3, [r4, #0]
 8016bd4:	4631      	mov	r1, r6
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	f8cc 3000 	str.w	r3, [ip]
 8016bdc:	682b      	ldr	r3, [r5, #0]
 8016bde:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8016be2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8016be4:	f8cd 8008 	str.w	r8, [sp, #8]
 8016be8:	9201      	str	r2, [sp, #4]
 8016bea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016bec:	9200      	str	r2, [sp, #0]
 8016bee:	aa07      	add	r2, sp, #28
 8016bf0:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8016bf2:	463b      	mov	r3, r7
 8016bf4:	47a0      	blx	r4
 8016bf6:	b017      	add	sp, #92	@ 0x5c
 8016bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bfc <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	4770      	bx	lr

08016c00 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8016c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c04:	b08d      	sub	sp, #52	@ 0x34
 8016c06:	4688      	mov	r8, r1
 8016c08:	f8d3 c000 	ldr.w	ip, [r3]
 8016c0c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8016c0e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8016c12:	680f      	ldr	r7, [r1, #0]
 8016c14:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8016c18:	eba7 070c 	sub.w	r7, r7, ip
 8016c1c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8016c20:	edd3 6a07 	vldr	s13, [r3, #28]
 8016c24:	42bc      	cmp	r4, r7
 8016c26:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016c28:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8016c2c:	bfa8      	it	ge
 8016c2e:	463c      	movge	r4, r7
 8016c30:	f9b1 9000 	ldrsh.w	r9, [r1]
 8016c34:	f9ba 1000 	ldrsh.w	r1, [sl]
 8016c38:	ee07 4a90 	vmov	s15, r4
 8016c3c:	eb09 0e0c 	add.w	lr, r9, ip
 8016c40:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8016c44:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8016c48:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8016c4c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8016c50:	4571      	cmp	r1, lr
 8016c52:	ee25 4a04 	vmul.f32	s8, s10, s8
 8016c56:	ee65 4a24 	vmul.f32	s9, s10, s9
 8016c5a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016c5e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016c62:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8016c66:	ee32 1a05 	vadd.f32	s2, s4, s10
 8016c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8016c6e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8016c72:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016c76:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016c7a:	f340 808c 	ble.w	8016d96 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8016c7e:	eba1 060e 	sub.w	r6, r1, lr
 8016c82:	fb96 f5f4 	sdiv	r5, r6, r4
 8016c86:	ee07 5a10 	vmov	s14, r5
 8016c8a:	2d00      	cmp	r5, #0
 8016c8c:	fb04 6615 	mls	r6, r4, r5, r6
 8016c90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016c94:	eea7 0a04 	vfma.f32	s0, s14, s8
 8016c98:	eee7 0a24 	vfma.f32	s1, s14, s9
 8016c9c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8016ca0:	dd12      	ble.n	8016cc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8016ca2:	ee70 6a44 	vsub.f32	s13, s0, s8
 8016ca6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8016caa:	ee31 2a45 	vsub.f32	s4, s2, s10
 8016cae:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb6:	bf14      	ite	ne
 8016cb8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8016cbc:	eeb0 7a67 	vmoveq.f32	s14, s15
 8016cc0:	ee61 1a87 	vmul.f32	s3, s3, s14
 8016cc4:	ee22 2a07 	vmul.f32	s4, s4, s14
 8016cc8:	fb05 f204 	mul.w	r2, r5, r4
 8016ccc:	1abf      	subs	r7, r7, r2
 8016cce:	4494      	add	ip, r2
 8016cd0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8016cd4:	4411      	add	r1, r2
 8016cd6:	eb09 020c 	add.w	r2, r9, ip
 8016cda:	b209      	sxth	r1, r1
 8016cdc:	443a      	add	r2, r7
 8016cde:	428a      	cmp	r2, r1
 8016ce0:	bfc4      	itt	gt
 8016ce2:	eba1 0209 	subgt.w	r2, r1, r9
 8016ce6:	eba2 070c 	subgt.w	r7, r2, ip
 8016cea:	2f00      	cmp	r7, #0
 8016cec:	dd50      	ble.n	8016d90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8016cee:	fb97 f1f4 	sdiv	r1, r7, r4
 8016cf2:	fb04 7211 	mls	r2, r4, r1, r7
 8016cf6:	b90a      	cbnz	r2, 8016cfc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8016cf8:	3901      	subs	r1, #1
 8016cfa:	4622      	mov	r2, r4
 8016cfc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8016d00:	6840      	ldr	r0, [r0, #4]
 8016d02:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8016d06:	44b6      	add	lr, r6
 8016d08:	f8d0 a000 	ldr.w	sl, [r0]
 8016d0c:	2900      	cmp	r1, #0
 8016d0e:	bfcc      	ite	gt
 8016d10:	46a1      	movgt	r9, r4
 8016d12:	4691      	movle	r9, r2
 8016d14:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016d16:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8016d18:	fb04 e505 	mla	r5, r4, r5, lr
 8016d1c:	eef0 6a42 	vmov.f32	s13, s4
 8016d20:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8016d24:	9008      	str	r0, [sp, #32]
 8016d26:	eeb0 7a61 	vmov.f32	s14, s3
 8016d2a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8016d2c:	695b      	ldr	r3, [r3, #20]
 8016d2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016d32:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8016d36:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8016d3a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016d3c:	445b      	add	r3, fp
 8016d3e:	9307      	str	r3, [sp, #28]
 8016d40:	ee16 3a90 	vmov	r3, s13
 8016d44:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8016d48:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8016d4c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8016d50:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8016d54:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016d58:	ee17 7a90 	vmov	r7, s15
 8016d5c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8016d60:	fb97 f7f4 	sdiv	r7, r7, r4
 8016d64:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8016d68:	ee17 ca90 	vmov	ip, s15
 8016d6c:	fb9c fcf4 	sdiv	ip, ip, r4
 8016d70:	fb0c 3306 	mla	r3, ip, r6, r3
 8016d74:	9302      	str	r3, [sp, #8]
 8016d76:	ee17 3a10 	vmov	r3, s14
 8016d7a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8016d7e:	fb07 3706 	mla	r7, r7, r6, r3
 8016d82:	eba9 0306 	sub.w	r3, r9, r6
 8016d86:	e9cd 4700 	strd	r4, r7, [sp]
 8016d8a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8016d8e:	47a0      	blx	r4
 8016d90:	b00d      	add	sp, #52	@ 0x34
 8016d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d96:	2500      	movs	r5, #0
 8016d98:	462e      	mov	r6, r5
 8016d9a:	e799      	b.n	8016cd0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08016d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8016d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da0:	b0db      	sub	sp, #364	@ 0x16c
 8016da2:	461d      	mov	r5, r3
 8016da4:	4614      	mov	r4, r2
 8016da6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8016daa:	910f      	str	r1, [sp, #60]	@ 0x3c
 8016dac:	4629      	mov	r1, r5
 8016dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8016db0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8016db4:	9009      	str	r0, [sp, #36]	@ 0x24
 8016db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016db8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8016dbc:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8016dc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016dc2:	6803      	ldr	r3, [r0, #0]
 8016dc4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8016dc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016dca:	47b8      	blx	r7
 8016dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dce:	6058      	str	r0, [r3, #4]
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	f000 83a1 	beq.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016dd6:	682b      	ldr	r3, [r5, #0]
 8016dd8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8016ddc:	ed94 7a02 	vldr	s14, [r4, #8]
 8016de0:	9314      	str	r3, [sp, #80]	@ 0x50
 8016de2:	686b      	ldr	r3, [r5, #4]
 8016de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016de8:	9315      	str	r3, [sp, #84]	@ 0x54
 8016dea:	4bc1      	ldr	r3, [pc, #772]	@ (80170f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8016dec:	7819      	ldrb	r1, [r3, #0]
 8016dee:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8016df2:	2900      	cmp	r1, #0
 8016df4:	bf16      	itet	ne
 8016df6:	4619      	movne	r1, r3
 8016df8:	4611      	moveq	r1, r2
 8016dfa:	4613      	movne	r3, r2
 8016dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e00:	9116      	str	r1, [sp, #88]	@ 0x58
 8016e02:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8016e06:	f240 8387 	bls.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e0a:	ed94 7a07 	vldr	s14, [r4, #28]
 8016e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e16:	f240 837f 	bls.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e1a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8016e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e26:	f240 8377 	bls.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e2a:	6822      	ldr	r2, [r4, #0]
 8016e2c:	4bb1      	ldr	r3, [pc, #708]	@ (80170f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	f2c0 8372 	blt.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e34:	49b0      	ldr	r1, [pc, #704]	@ (80170f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8016e36:	6963      	ldr	r3, [r4, #20]
 8016e38:	428a      	cmp	r2, r1
 8016e3a:	f300 836d 	bgt.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e3e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016e42:	48ae      	ldr	r0, [pc, #696]	@ (80170fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8016e44:	33ff      	adds	r3, #255	@ 0xff
 8016e46:	4283      	cmp	r3, r0
 8016e48:	f200 8366 	bhi.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8016e4e:	4dac      	ldr	r5, [pc, #688]	@ (8017100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8016e50:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8016e54:	33ff      	adds	r3, #255	@ 0xff
 8016e56:	42ab      	cmp	r3, r5
 8016e58:	f200 835e 	bhi.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e5c:	6862      	ldr	r2, [r4, #4]
 8016e5e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8016e62:	33ff      	adds	r3, #255	@ 0xff
 8016e64:	4283      	cmp	r3, r0
 8016e66:	f200 8357 	bhi.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e6a:	69a1      	ldr	r1, [r4, #24]
 8016e6c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8016e70:	33ff      	adds	r3, #255	@ 0xff
 8016e72:	4283      	cmp	r3, r0
 8016e74:	f200 8350 	bhi.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016e7a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8016e7e:	30ff      	adds	r0, #255	@ 0xff
 8016e80:	42a8      	cmp	r0, r5
 8016e82:	f200 8349 	bhi.w	8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8016e86:	428a      	cmp	r2, r1
 8016e88:	f280 8110 	bge.w	80170ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	f300 8119 	bgt.w	80170c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8016e92:	4299      	cmp	r1, r3
 8016e94:	f280 811d 	bge.w	80170d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8016e98:	2502      	movs	r5, #2
 8016e9a:	2701      	movs	r7, #1
 8016e9c:	46a9      	mov	r9, r5
 8016e9e:	46b8      	mov	r8, r7
 8016ea0:	f04f 0a00 	mov.w	sl, #0
 8016ea4:	4621      	mov	r1, r4
 8016ea6:	a849      	add	r0, sp, #292	@ 0x124
 8016ea8:	f003 fe9e 	bl	801abe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8016eac:	4622      	mov	r2, r4
 8016eae:	4653      	mov	r3, sl
 8016eb0:	a949      	add	r1, sp, #292	@ 0x124
 8016eb2:	f8cd 9000 	str.w	r9, [sp]
 8016eb6:	a819      	add	r0, sp, #100	@ 0x64
 8016eb8:	f003 ffc6 	bl	801ae48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016ebc:	4622      	mov	r2, r4
 8016ebe:	4653      	mov	r3, sl
 8016ec0:	a949      	add	r1, sp, #292	@ 0x124
 8016ec2:	f8cd 8000 	str.w	r8, [sp]
 8016ec6:	a829      	add	r0, sp, #164	@ 0xa4
 8016ec8:	f003 ffbe 	bl	801ae48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016ecc:	4643      	mov	r3, r8
 8016ece:	4622      	mov	r2, r4
 8016ed0:	a949      	add	r1, sp, #292	@ 0x124
 8016ed2:	f8cd 9000 	str.w	r9, [sp]
 8016ed6:	a839      	add	r0, sp, #228	@ 0xe4
 8016ed8:	f003 ffb6 	bl	801ae48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8016edc:	42af      	cmp	r7, r5
 8016ede:	af12      	add	r7, sp, #72	@ 0x48
 8016ee0:	bfb7      	itett	lt
 8016ee2:	2300      	movlt	r3, #0
 8016ee4:	2301      	movge	r3, #1
 8016ee6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8016ee8:	ac19      	addlt	r4, sp, #100	@ 0x64
 8016eea:	bfb1      	iteee	lt
 8016eec:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8016eee:	ad19      	addge	r5, sp, #100	@ 0x64
 8016ef0:	930e      	strge	r3, [sp, #56]	@ 0x38
 8016ef2:	ac29      	addge	r4, sp, #164	@ 0xa4
 8016ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016efa:	e887 0003 	stmia.w	r7, {r0, r1}
 8016efe:	b928      	cbnz	r0, 8016f0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8016f00:	4b80      	ldr	r3, [pc, #512]	@ (8017104 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8016f02:	6818      	ldr	r0, [r3, #0]
 8016f04:	6803      	ldr	r3, [r0, #0]
 8016f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f08:	4798      	blx	r3
 8016f0a:	6038      	str	r0, [r7, #0]
 8016f0c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016f0e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8016f12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016f16:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8016f18:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016f1c:	6963      	ldr	r3, [r4, #20]
 8016f1e:	440b      	add	r3, r1
 8016f20:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8016f24:	4408      	add	r0, r1
 8016f26:	b200      	sxth	r0, r0
 8016f28:	4283      	cmp	r3, r0
 8016f2a:	900d      	str	r0, [sp, #52]	@ 0x34
 8016f2c:	f280 80dd 	bge.w	80170ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8016f30:	428b      	cmp	r3, r1
 8016f32:	da08      	bge.n	8016f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016f34:	2a00      	cmp	r2, #0
 8016f36:	dd06      	ble.n	8016f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8016f38:	1acb      	subs	r3, r1, r3
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	f2c0 80e4 	blt.w	8017108 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	f300 80e2 	bgt.w	801710a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8016f46:	6967      	ldr	r7, [r4, #20]
 8016f48:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8016f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f4e:	443b      	add	r3, r7
 8016f50:	461f      	mov	r7, r3
 8016f52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016f54:	1bdf      	subs	r7, r3, r7
 8016f56:	4297      	cmp	r7, r2
 8016f58:	bfa8      	it	ge
 8016f5a:	4617      	movge	r7, r2
 8016f5c:	2f00      	cmp	r7, #0
 8016f5e:	f340 8166 	ble.w	801722e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8016f62:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8016f64:	6829      	ldr	r1, [r5, #0]
 8016f66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f6a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8016f6e:	4411      	add	r1, r2
 8016f70:	6820      	ldr	r0, [r4, #0]
 8016f72:	4299      	cmp	r1, r3
 8016f74:	dd1a      	ble.n	8016fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016f76:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8016f7a:	4402      	add	r2, r0
 8016f7c:	440b      	add	r3, r1
 8016f7e:	b21b      	sxth	r3, r3
 8016f80:	429a      	cmp	r2, r3
 8016f82:	dc13      	bgt.n	8016fac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8016f84:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016f86:	a912      	add	r1, sp, #72	@ 0x48
 8016f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	9206      	str	r2, [sp, #24]
 8016f90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f92:	9500      	str	r5, [sp, #0]
 8016f94:	9205      	str	r2, [sp, #20]
 8016f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f98:	e9cd b203 	strd	fp, r2, [sp, #12]
 8016f9c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8016f9e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8016fa2:	aa49      	add	r2, sp, #292	@ 0x124
 8016fa4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8016fa8:	4623      	mov	r3, r4
 8016faa:	47c8      	blx	r9
 8016fac:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8016fb0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8016fb4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8016fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016fbc:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8016fc0:	68a1      	ldr	r1, [r4, #8]
 8016fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016fc6:	ed94 6a08 	vldr	s12, [r4, #32]
 8016fca:	edd4 6a07 	vldr	s13, [r4, #28]
 8016fce:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8016fd2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016fd6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8016fda:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016fde:	edc4 6a07 	vstr	s13, [r4, #28]
 8016fe2:	441a      	add	r2, r3
 8016fe4:	6963      	ldr	r3, [r4, #20]
 8016fe6:	3301      	adds	r3, #1
 8016fe8:	6022      	str	r2, [r4, #0]
 8016fea:	6163      	str	r3, [r4, #20]
 8016fec:	69a3      	ldr	r3, [r4, #24]
 8016fee:	3b01      	subs	r3, #1
 8016ff0:	61a3      	str	r3, [r4, #24]
 8016ff2:	6923      	ldr	r3, [r4, #16]
 8016ff4:	440b      	add	r3, r1
 8016ff6:	68e1      	ldr	r1, [r4, #12]
 8016ff8:	428b      	cmp	r3, r1
 8016ffa:	6123      	str	r3, [r4, #16]
 8016ffc:	db15      	blt.n	801702a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8016ffe:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8017002:	3201      	adds	r2, #1
 8017004:	1a5b      	subs	r3, r3, r1
 8017006:	ee76 6a26 	vadd.f32	s13, s12, s13
 801700a:	6022      	str	r2, [r4, #0]
 801700c:	6123      	str	r3, [r4, #16]
 801700e:	edc4 6a07 	vstr	s13, [r4, #28]
 8017012:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017016:	ee36 7a87 	vadd.f32	s14, s13, s14
 801701a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801701e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8017022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017026:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801702a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801702e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017032:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017036:	ee37 7a27 	vadd.f32	s14, s14, s15
 801703a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801703e:	68a9      	ldr	r1, [r5, #8]
 8017040:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017044:	ed95 6a08 	vldr	s12, [r5, #32]
 8017048:	edd5 6a07 	vldr	s13, [r5, #28]
 801704c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8017050:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017054:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017058:	e9d5 2300 	ldrd	r2, r3, [r5]
 801705c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017060:	441a      	add	r2, r3
 8017062:	696b      	ldr	r3, [r5, #20]
 8017064:	3301      	adds	r3, #1
 8017066:	602a      	str	r2, [r5, #0]
 8017068:	616b      	str	r3, [r5, #20]
 801706a:	69ab      	ldr	r3, [r5, #24]
 801706c:	3b01      	subs	r3, #1
 801706e:	61ab      	str	r3, [r5, #24]
 8017070:	692b      	ldr	r3, [r5, #16]
 8017072:	440b      	add	r3, r1
 8017074:	68e9      	ldr	r1, [r5, #12]
 8017076:	428b      	cmp	r3, r1
 8017078:	612b      	str	r3, [r5, #16]
 801707a:	db15      	blt.n	80170a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801707c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8017080:	3201      	adds	r2, #1
 8017082:	1a5b      	subs	r3, r3, r1
 8017084:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017088:	602a      	str	r2, [r5, #0]
 801708a:	612b      	str	r3, [r5, #16]
 801708c:	edc5 6a07 	vstr	s13, [r5, #28]
 8017090:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8017094:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017098:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801709c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80170a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80170a4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80170a8:	3f01      	subs	r7, #1
 80170aa:	e757      	b.n	8016f5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80170ac:	4299      	cmp	r1, r3
 80170ae:	dc13      	bgt.n	80170d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80170b0:	429a      	cmp	r2, r3
 80170b2:	da14      	bge.n	80170de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80170b4:	2502      	movs	r5, #2
 80170b6:	2703      	movs	r7, #3
 80170b8:	f04f 0800 	mov.w	r8, #0
 80170bc:	46a9      	mov	r9, r5
 80170be:	f04f 0a01 	mov.w	sl, #1
 80170c2:	e6ef      	b.n	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80170c4:	2501      	movs	r5, #1
 80170c6:	2700      	movs	r7, #0
 80170c8:	46a9      	mov	r9, r5
 80170ca:	46b8      	mov	r8, r7
 80170cc:	f04f 0a02 	mov.w	sl, #2
 80170d0:	e6e8      	b.n	8016ea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80170d2:	2501      	movs	r5, #1
 80170d4:	2702      	movs	r7, #2
 80170d6:	e6e1      	b.n	8016e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80170d8:	2500      	movs	r5, #0
 80170da:	2701      	movs	r7, #1
 80170dc:	e7f4      	b.n	80170c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80170de:	2702      	movs	r7, #2
 80170e0:	2503      	movs	r5, #3
 80170e2:	f04f 0900 	mov.w	r9, #0
 80170e6:	46b8      	mov	r8, r7
 80170e8:	e7e9      	b.n	80170be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80170ea:	4613      	mov	r3, r2
 80170ec:	e728      	b.n	8016f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80170ee:	bf00      	nop
 80170f0:	2401bb30 	.word	0x2401bb30
 80170f4:	fffd8f01 	.word	0xfffd8f01
 80170f8:	00027100 	.word	0x00027100
 80170fc:	0004e1ff 	.word	0x0004e1ff
 8017100:	0004e1fe 	.word	0x0004e1fe
 8017104:	2401bb38 	.word	0x2401bb38
 8017108:	4613      	mov	r3, r2
 801710a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801710c:	469e      	mov	lr, r3
 801710e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8017110:	469c      	mov	ip, r3
 8017112:	9111      	str	r1, [sp, #68]	@ 0x44
 8017114:	f04f 0900 	mov.w	r9, #0
 8017118:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801711c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8017120:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8017124:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8017128:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801712c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017130:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8017134:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8017138:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801713c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8017140:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8017144:	f1bc 0f00 	cmp.w	ip, #0
 8017148:	d147      	bne.n	80171da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801714a:	eb03 0c07 	add.w	ip, r3, r7
 801714e:	1ad7      	subs	r7, r2, r3
 8017150:	f1b9 0f00 	cmp.w	r9, #0
 8017154:	d009      	beq.n	801716a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8017156:	9029      	str	r0, [sp, #164]	@ 0xa4
 8017158:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801715c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8017160:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8017164:	912d      	str	r1, [sp, #180]	@ 0xb4
 8017166:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801716a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801716c:	f04f 0800 	mov.w	r8, #0
 8017170:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017174:	9111      	str	r1, [sp, #68]	@ 0x44
 8017176:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801717a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801717e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8017182:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017186:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801718a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801718e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8017192:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8017196:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801719a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801719e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80171a2:	f1be 0f00 	cmp.w	lr, #0
 80171a6:	d031      	beq.n	801720c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80171a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80171aa:	4450      	add	r0, sl
 80171ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80171b0:	4431      	add	r1, r6
 80171b2:	ee37 7a04 	vadd.f32	s14, s14, s8
 80171b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80171ba:	4549      	cmp	r1, r9
 80171bc:	db08      	blt.n	80171d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80171be:	ee77 7a85 	vadd.f32	s15, s15, s10
 80171c2:	3001      	adds	r0, #1
 80171c4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80171c8:	eba1 0109 	sub.w	r1, r1, r9
 80171cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80171d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80171d4:	f04f 0801 	mov.w	r8, #1
 80171d8:	e7e3      	b.n	80171a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80171da:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80171dc:	4450      	add	r0, sl
 80171de:	ee37 7a24 	vadd.f32	s14, s14, s9
 80171e2:	4431      	add	r1, r6
 80171e4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80171e8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80171ec:	4541      	cmp	r1, r8
 80171ee:	db08      	blt.n	8017202 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80171f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80171f4:	3001      	adds	r0, #1
 80171f6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80171fa:	eba1 0108 	sub.w	r1, r1, r8
 80171fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017202:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017206:	f04f 0901 	mov.w	r9, #1
 801720a:	e79b      	b.n	8017144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801720c:	449c      	add	ip, r3
 801720e:	1aff      	subs	r7, r7, r3
 8017210:	f1b8 0f00 	cmp.w	r8, #0
 8017214:	d009      	beq.n	801722a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8017216:	9019      	str	r0, [sp, #100]	@ 0x64
 8017218:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801721c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8017220:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8017224:	911d      	str	r1, [sp, #116]	@ 0x74
 8017226:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801722a:	1ad2      	subs	r2, r2, r3
 801722c:	e68b      	b.n	8016f46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801722e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017230:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8017232:	2b00      	cmp	r3, #0
 8017234:	f000 80d1 	beq.w	80173da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8017238:	ad19      	add	r5, sp, #100	@ 0x64
 801723a:	ac39      	add	r4, sp, #228	@ 0xe4
 801723c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801723e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017242:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017246:	930c      	str	r3, [sp, #48]	@ 0x30
 8017248:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801724a:	6963      	ldr	r3, [r4, #20]
 801724c:	440b      	add	r3, r1
 801724e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017252:	4408      	add	r0, r1
 8017254:	b200      	sxth	r0, r0
 8017256:	4283      	cmp	r3, r0
 8017258:	900d      	str	r0, [sp, #52]	@ 0x34
 801725a:	f280 80c1 	bge.w	80173e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801725e:	428b      	cmp	r3, r1
 8017260:	da08      	bge.n	8017274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017262:	2a00      	cmp	r2, #0
 8017264:	dd06      	ble.n	8017274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017266:	1acb      	subs	r3, r1, r3
 8017268:	429a      	cmp	r2, r3
 801726a:	f2c0 80bb 	blt.w	80173e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801726e:	2b00      	cmp	r3, #0
 8017270:	f300 80b9 	bgt.w	80173e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8017274:	6967      	ldr	r7, [r4, #20]
 8017276:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801727a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801727c:	443b      	add	r3, r7
 801727e:	461f      	mov	r7, r3
 8017280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017282:	1bdf      	subs	r7, r3, r7
 8017284:	4297      	cmp	r7, r2
 8017286:	bfa8      	it	ge
 8017288:	4617      	movge	r7, r2
 801728a:	2f00      	cmp	r7, #0
 801728c:	f340 813c 	ble.w	8017508 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8017290:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8017292:	6829      	ldr	r1, [r5, #0]
 8017294:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017298:	f9bb 3000 	ldrsh.w	r3, [fp]
 801729c:	4411      	add	r1, r2
 801729e:	6820      	ldr	r0, [r4, #0]
 80172a0:	4299      	cmp	r1, r3
 80172a2:	dd1a      	ble.n	80172da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80172a4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80172a8:	4402      	add	r2, r0
 80172aa:	440b      	add	r3, r1
 80172ac:	b21b      	sxth	r3, r3
 80172ae:	429a      	cmp	r2, r3
 80172b0:	dc13      	bgt.n	80172da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80172b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80172b4:	a912      	add	r1, sp, #72	@ 0x48
 80172b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	9206      	str	r2, [sp, #24]
 80172be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80172c0:	9500      	str	r5, [sp, #0]
 80172c2:	9205      	str	r2, [sp, #20]
 80172c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172c6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80172ca:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80172cc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80172d0:	aa49      	add	r2, sp, #292	@ 0x124
 80172d2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80172d6:	4623      	mov	r3, r4
 80172d8:	47c8      	blx	r9
 80172da:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80172de:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80172e2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80172e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80172ea:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80172ee:	68a1      	ldr	r1, [r4, #8]
 80172f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80172f4:	ed94 6a08 	vldr	s12, [r4, #32]
 80172f8:	edd4 6a07 	vldr	s13, [r4, #28]
 80172fc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8017300:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017304:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017308:	e9d4 2300 	ldrd	r2, r3, [r4]
 801730c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017310:	441a      	add	r2, r3
 8017312:	6963      	ldr	r3, [r4, #20]
 8017314:	3301      	adds	r3, #1
 8017316:	6022      	str	r2, [r4, #0]
 8017318:	6163      	str	r3, [r4, #20]
 801731a:	69a3      	ldr	r3, [r4, #24]
 801731c:	3b01      	subs	r3, #1
 801731e:	61a3      	str	r3, [r4, #24]
 8017320:	6923      	ldr	r3, [r4, #16]
 8017322:	440b      	add	r3, r1
 8017324:	68e1      	ldr	r1, [r4, #12]
 8017326:	428b      	cmp	r3, r1
 8017328:	6123      	str	r3, [r4, #16]
 801732a:	db15      	blt.n	8017358 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801732c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8017330:	3201      	adds	r2, #1
 8017332:	1a5b      	subs	r3, r3, r1
 8017334:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017338:	6022      	str	r2, [r4, #0]
 801733a:	6123      	str	r3, [r4, #16]
 801733c:	edc4 6a07 	vstr	s13, [r4, #28]
 8017340:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8017344:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017348:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801734c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8017350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017354:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8017358:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801735c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8017360:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8017364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017368:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801736c:	68a9      	ldr	r1, [r5, #8]
 801736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017372:	ed95 6a08 	vldr	s12, [r5, #32]
 8017376:	edd5 6a07 	vldr	s13, [r5, #28]
 801737a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801737e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017382:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8017386:	e9d5 2300 	ldrd	r2, r3, [r5]
 801738a:	edc5 6a07 	vstr	s13, [r5, #28]
 801738e:	441a      	add	r2, r3
 8017390:	696b      	ldr	r3, [r5, #20]
 8017392:	3301      	adds	r3, #1
 8017394:	602a      	str	r2, [r5, #0]
 8017396:	616b      	str	r3, [r5, #20]
 8017398:	69ab      	ldr	r3, [r5, #24]
 801739a:	3b01      	subs	r3, #1
 801739c:	61ab      	str	r3, [r5, #24]
 801739e:	692b      	ldr	r3, [r5, #16]
 80173a0:	440b      	add	r3, r1
 80173a2:	68e9      	ldr	r1, [r5, #12]
 80173a4:	428b      	cmp	r3, r1
 80173a6:	612b      	str	r3, [r5, #16]
 80173a8:	db15      	blt.n	80173d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80173aa:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80173ae:	3201      	adds	r2, #1
 80173b0:	1a5b      	subs	r3, r3, r1
 80173b2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80173b6:	602a      	str	r2, [r5, #0]
 80173b8:	612b      	str	r3, [r5, #16]
 80173ba:	edc5 6a07 	vstr	s13, [r5, #28]
 80173be:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80173c2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80173c6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80173ca:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80173ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173d2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80173d6:	3f01      	subs	r7, #1
 80173d8:	e757      	b.n	801728a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80173da:	ad39      	add	r5, sp, #228	@ 0xe4
 80173dc:	ac19      	add	r4, sp, #100	@ 0x64
 80173de:	e72d      	b.n	801723c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80173e0:	4613      	mov	r3, r2
 80173e2:	e744      	b.n	801726e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80173e4:	4613      	mov	r3, r2
 80173e6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80173e8:	469e      	mov	lr, r3
 80173ea:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80173ee:	461f      	mov	r7, r3
 80173f0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80173f4:	f04f 0900 	mov.w	r9, #0
 80173f8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80173fc:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8017400:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8017404:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8017408:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801740c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801740e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8017412:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8017416:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801741a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801741e:	960e      	str	r6, [sp, #56]	@ 0x38
 8017420:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8017424:	2f00      	cmp	r7, #0
 8017426:	d146      	bne.n	80174b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017428:	449c      	add	ip, r3
 801742a:	1ad7      	subs	r7, r2, r3
 801742c:	f1b9 0f00 	cmp.w	r9, #0
 8017430:	d009      	beq.n	8017446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017432:	9039      	str	r0, [sp, #228]	@ 0xe4
 8017434:	913d      	str	r1, [sp, #244]	@ 0xf4
 8017436:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801743a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801743e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8017442:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8017446:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8017448:	f04f 0800 	mov.w	r8, #0
 801744c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8017450:	910e      	str	r1, [sp, #56]	@ 0x38
 8017452:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8017456:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801745a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801745e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8017462:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8017466:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801746a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801746e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8017472:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8017476:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801747a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801747e:	f1be 0f00 	cmp.w	lr, #0
 8017482:	d030      	beq.n	80174e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017484:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017486:	4450      	add	r0, sl
 8017488:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801748c:	4431      	add	r1, r6
 801748e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017492:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017496:	4549      	cmp	r1, r9
 8017498:	db08      	blt.n	80174ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801749a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801749e:	3001      	adds	r0, #1
 80174a0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80174a4:	eba1 0109 	sub.w	r1, r1, r9
 80174a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80174ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 80174b0:	f04f 0801 	mov.w	r8, #1
 80174b4:	e7e3      	b.n	801747e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80174b6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80174b8:	4450      	add	r0, sl
 80174ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 80174be:	4431      	add	r1, r6
 80174c0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80174c4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80174c8:	4541      	cmp	r1, r8
 80174ca:	db08      	blt.n	80174de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80174cc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80174d0:	3001      	adds	r0, #1
 80174d2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80174d6:	eba1 0108 	sub.w	r1, r1, r8
 80174da:	ee77 7a86 	vadd.f32	s15, s15, s12
 80174de:	3f01      	subs	r7, #1
 80174e0:	f04f 0901 	mov.w	r9, #1
 80174e4:	e79e      	b.n	8017424 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80174e6:	449c      	add	ip, r3
 80174e8:	1aff      	subs	r7, r7, r3
 80174ea:	f1b8 0f00 	cmp.w	r8, #0
 80174ee:	d009      	beq.n	8017504 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80174f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80174f2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80174f6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80174fa:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80174fe:	911d      	str	r1, [sp, #116]	@ 0x74
 8017500:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8017504:	1ad2      	subs	r2, r2, r3
 8017506:	e6b5      	b.n	8017274 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	b923      	cbnz	r3, 8017518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801750e:	4b04      	ldr	r3, [pc, #16]	@ (8017520 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017510:	6818      	ldr	r0, [r3, #0]
 8017512:	6803      	ldr	r3, [r0, #0]
 8017514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017516:	4798      	blx	r3
 8017518:	b05b      	add	sp, #364	@ 0x16c
 801751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801751e:	bf00      	nop
 8017520:	2401bb38 	.word	0x2401bb38

08017524 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8017524:	b570      	push	{r4, r5, r6, lr}
 8017526:	4604      	mov	r4, r0
 8017528:	2500      	movs	r5, #0
 801752a:	9805      	ldr	r0, [sp, #20]
 801752c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8017530:	6061      	str	r1, [r4, #4]
 8017532:	8263      	strh	r3, [r4, #18]
 8017534:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017538:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801753c:	8025      	strh	r5, [r4, #0]
 801753e:	7221      	strb	r1, [r4, #8]
 8017540:	7266      	strb	r6, [r4, #9]
 8017542:	60e0      	str	r0, [r4, #12]
 8017544:	8222      	strh	r2, [r4, #16]
 8017546:	82a3      	strh	r3, [r4, #20]
 8017548:	82e5      	strh	r5, [r4, #22]
 801754a:	8325      	strh	r5, [r4, #24]
 801754c:	8365      	strh	r5, [r4, #26]
 801754e:	83a5      	strh	r5, [r4, #28]
 8017550:	83e5      	strh	r5, [r4, #30]
 8017552:	8425      	strh	r5, [r4, #32]
 8017554:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8017558:	b32e      	cbz	r6, 80175a6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801755a:	6803      	ldr	r3, [r0, #0]
 801755c:	695b      	ldr	r3, [r3, #20]
 801755e:	4798      	blx	r3
 8017560:	4606      	mov	r6, r0
 8017562:	b300      	cbz	r0, 80175a6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017564:	68e0      	ldr	r0, [r4, #12]
 8017566:	4631      	mov	r1, r6
 8017568:	6803      	ldr	r3, [r0, #0]
 801756a:	68db      	ldr	r3, [r3, #12]
 801756c:	4798      	blx	r3
 801756e:	4605      	mov	r5, r0
 8017570:	b1c8      	cbz	r0, 80175a6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017572:	7b43      	ldrb	r3, [r0, #13]
 8017574:	7a82      	ldrb	r2, [r0, #10]
 8017576:	005b      	lsls	r3, r3, #1
 8017578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801757c:	4313      	orrs	r3, r2
 801757e:	8423      	strh	r3, [r4, #32]
 8017580:	7a63      	ldrb	r3, [r4, #9]
 8017582:	2b06      	cmp	r3, #6
 8017584:	d10f      	bne.n	80175a6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017586:	68e0      	ldr	r0, [r4, #12]
 8017588:	462a      	mov	r2, r5
 801758a:	4631      	mov	r1, r6
 801758c:	6803      	ldr	r3, [r0, #0]
 801758e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017590:	4798      	blx	r3
 8017592:	7b6b      	ldrb	r3, [r5, #13]
 8017594:	005b      	lsls	r3, r3, #1
 8017596:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801759a:	7aab      	ldrb	r3, [r5, #10]
 801759c:	4313      	orrs	r3, r2
 801759e:	4418      	add	r0, r3
 80175a0:	8c23      	ldrh	r3, [r4, #32]
 80175a2:	4418      	add	r0, r3
 80175a4:	8420      	strh	r0, [r4, #32]
 80175a6:	4620      	mov	r0, r4
 80175a8:	bd70      	pop	{r4, r5, r6, pc}

080175aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80175aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ae:	2400      	movs	r4, #0
 80175b0:	b085      	sub	sp, #20
 80175b2:	4681      	mov	r9, r0
 80175b4:	4688      	mov	r8, r1
 80175b6:	4692      	mov	sl, r2
 80175b8:	469b      	mov	fp, r3
 80175ba:	4627      	mov	r7, r4
 80175bc:	4625      	mov	r5, r4
 80175be:	4626      	mov	r6, r4
 80175c0:	4554      	cmp	r4, sl
 80175c2:	da2a      	bge.n	801761a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80175c4:	2300      	movs	r3, #0
 80175c6:	9303      	str	r3, [sp, #12]
 80175c8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80175cc:	429d      	cmp	r5, r3
 80175ce:	d004      	beq.n	80175da <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80175d0:	f242 030b 	movw	r3, #8203	@ 0x200b
 80175d4:	429d      	cmp	r5, r3
 80175d6:	bf18      	it	ne
 80175d8:	462f      	movne	r7, r5
 80175da:	ab03      	add	r3, sp, #12
 80175dc:	4642      	mov	r2, r8
 80175de:	4659      	mov	r1, fp
 80175e0:	4648      	mov	r0, r9
 80175e2:	f003 f917 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80175e6:	4605      	mov	r5, r0
 80175e8:	b1b8      	cbz	r0, 801761a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80175ea:	280a      	cmp	r0, #10
 80175ec:	d015      	beq.n	801761a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80175ee:	9a03      	ldr	r2, [sp, #12]
 80175f0:	b18a      	cbz	r2, 8017616 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80175f2:	7b50      	ldrb	r0, [r2, #13]
 80175f4:	4639      	mov	r1, r7
 80175f6:	7a93      	ldrb	r3, [r2, #10]
 80175f8:	0040      	lsls	r0, r0, #1
 80175fa:	8895      	ldrh	r5, [r2, #4]
 80175fc:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017600:	4303      	orrs	r3, r0
 8017602:	4640      	mov	r0, r8
 8017604:	9301      	str	r3, [sp, #4]
 8017606:	f8d8 3000 	ldr.w	r3, [r8]
 801760a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801760c:	4798      	blx	r3
 801760e:	9b01      	ldr	r3, [sp, #4]
 8017610:	4418      	add	r0, r3
 8017612:	4406      	add	r6, r0
 8017614:	b2b6      	uxth	r6, r6
 8017616:	3401      	adds	r4, #1
 8017618:	e7d2      	b.n	80175c0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801761a:	4630      	mov	r0, r6
 801761c:	b005      	add	sp, #20
 801761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017622 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017622:	2a02      	cmp	r2, #2
 8017624:	b530      	push	{r4, r5, lr}
 8017626:	d011      	beq.n	801764c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017628:	2a03      	cmp	r2, #3
 801762a:	d01c      	beq.n	8017666 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801762c:	2a01      	cmp	r2, #1
 801762e:	d10c      	bne.n	801764a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017630:	888b      	ldrh	r3, [r1, #4]
 8017632:	8801      	ldrh	r1, [r0, #0]
 8017634:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017638:	1a5b      	subs	r3, r3, r1
 801763a:	8844      	ldrh	r4, [r0, #2]
 801763c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017640:	1a9b      	subs	r3, r3, r2
 8017642:	8004      	strh	r4, [r0, #0]
 8017644:	8081      	strh	r1, [r0, #4]
 8017646:	8043      	strh	r3, [r0, #2]
 8017648:	80c2      	strh	r2, [r0, #6]
 801764a:	bd30      	pop	{r4, r5, pc}
 801764c:	88cb      	ldrh	r3, [r1, #6]
 801764e:	8842      	ldrh	r2, [r0, #2]
 8017650:	1a9b      	subs	r3, r3, r2
 8017652:	88c2      	ldrh	r2, [r0, #6]
 8017654:	1a9b      	subs	r3, r3, r2
 8017656:	888a      	ldrh	r2, [r1, #4]
 8017658:	8801      	ldrh	r1, [r0, #0]
 801765a:	8043      	strh	r3, [r0, #2]
 801765c:	1a52      	subs	r2, r2, r1
 801765e:	8881      	ldrh	r1, [r0, #4]
 8017660:	1a52      	subs	r2, r2, r1
 8017662:	8002      	strh	r2, [r0, #0]
 8017664:	e7f1      	b.n	801764a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017666:	88cb      	ldrh	r3, [r1, #6]
 8017668:	8841      	ldrh	r1, [r0, #2]
 801766a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801766e:	1a5b      	subs	r3, r3, r1
 8017670:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017674:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017678:	1a9b      	subs	r3, r3, r2
 801767a:	8045      	strh	r5, [r0, #2]
 801767c:	8082      	strh	r2, [r0, #4]
 801767e:	8003      	strh	r3, [r0, #0]
 8017680:	80c4      	strh	r4, [r0, #6]
 8017682:	e7e2      	b.n	801764a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017688:	b09f      	sub	sp, #124	@ 0x7c
 801768a:	920f      	str	r2, [sp, #60]	@ 0x3c
 801768c:	9312      	str	r3, [sp, #72]	@ 0x48
 801768e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017690:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017692:	8812      	ldrh	r2, [r2, #0]
 8017694:	889b      	ldrh	r3, [r3, #4]
 8017696:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017698:	4413      	add	r3, r2
 801769a:	900e      	str	r0, [sp, #56]	@ 0x38
 801769c:	6828      	ldr	r0, [r5, #0]
 801769e:	b21b      	sxth	r3, r3
 80176a0:	9117      	str	r1, [sp, #92]	@ 0x5c
 80176a2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 80176a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80176a8:	6803      	ldr	r3, [r0, #0]
 80176aa:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 80176ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80176b0:	4798      	blx	r3
 80176b2:	682b      	ldr	r3, [r5, #0]
 80176b4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80176b6:	7b1a      	ldrb	r2, [r3, #12]
 80176b8:	7adb      	ldrb	r3, [r3, #11]
 80176ba:	9215      	str	r2, [sp, #84]	@ 0x54
 80176bc:	9316      	str	r3, [sp, #88]	@ 0x58
 80176be:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 80176c2:	2c00      	cmp	r4, #0
 80176c4:	d067      	beq.n	8017796 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80176c6:	7c2b      	ldrb	r3, [r5, #16]
 80176c8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80176ca:	2b06      	cmp	r3, #6
 80176cc:	bf14      	ite	ne
 80176ce:	2301      	movne	r3, #1
 80176d0:	2302      	moveq	r3, #2
 80176d2:	4413      	add	r3, r2
 80176d4:	f04f 0900 	mov.w	r9, #0
 80176d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80176da:	464c      	mov	r4, r9
 80176dc:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80176e0:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80176e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176e6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80176e8:	4293      	cmp	r3, r2
 80176ea:	f280 808b 	bge.w	8017804 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80176ee:	2300      	movs	r3, #0
 80176f0:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80176f4:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80176f8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80176fc:	429c      	cmp	r4, r3
 80176fe:	d006      	beq.n	801770e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8017700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017702:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017706:	4294      	cmp	r4, r2
 8017708:	bf18      	it	ne
 801770a:	4623      	movne	r3, r4
 801770c:	930c      	str	r3, [sp, #48]	@ 0x30
 801770e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017710:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8017712:	682a      	ldr	r2, [r5, #0]
 8017714:	428b      	cmp	r3, r1
 8017716:	db40      	blt.n	801779a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017718:	6813      	ldr	r3, [r2, #0]
 801771a:	4610      	mov	r0, r2
 801771c:	695b      	ldr	r3, [r3, #20]
 801771e:	4798      	blx	r3
 8017720:	4604      	mov	r4, r0
 8017722:	6828      	ldr	r0, [r5, #0]
 8017724:	aa1d      	add	r2, sp, #116	@ 0x74
 8017726:	4621      	mov	r1, r4
 8017728:	6803      	ldr	r3, [r0, #0]
 801772a:	689f      	ldr	r7, [r3, #8]
 801772c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8017730:	47b8      	blx	r7
 8017732:	901c      	str	r0, [sp, #112]	@ 0x70
 8017734:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017738:	429c      	cmp	r4, r3
 801773a:	f000 80eb 	beq.w	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801773e:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017742:	429c      	cmp	r4, r3
 8017744:	f000 80e6 	beq.w	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017748:	2c00      	cmp	r4, #0
 801774a:	f000 810d 	beq.w	8017968 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801774e:	2c0a      	cmp	r4, #10
 8017750:	d05e      	beq.n	8017810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017752:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017754:	b36a      	cbz	r2, 80177b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017756:	8894      	ldrh	r4, [r2, #4]
 8017758:	f1bb 0f00 	cmp.w	fp, #0
 801775c:	d03a      	beq.n	80177d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801775e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017762:	f1bb 0f01 	cmp.w	fp, #1
 8017766:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801776a:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801776e:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017772:	ea49 0903 	orr.w	r9, r9, r3
 8017776:	d133      	bne.n	80177e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8017778:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801777a:	eba6 0609 	sub.w	r6, r6, r9
 801777e:	2b00      	cmp	r3, #0
 8017780:	d14d      	bne.n	801781e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8017782:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017784:	eb09 0306 	add.w	r3, r9, r6
 8017788:	4413      	add	r3, r2
 801778a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801778c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017790:	4293      	cmp	r3, r2
 8017792:	da4e      	bge.n	8017832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8017794:	e036      	b.n	8017804 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8017796:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017798:	e79c      	b.n	80176d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801779a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801779e:	4659      	mov	r1, fp
 80177a0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80177a2:	9301      	str	r3, [sp, #4]
 80177a4:	ab1d      	add	r3, sp, #116	@ 0x74
 80177a6:	9300      	str	r3, [sp, #0]
 80177a8:	ab1c      	add	r3, sp, #112	@ 0x70
 80177aa:	f003 f87c 	bl	801a8a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80177ae:	4604      	mov	r4, r0
 80177b0:	e7c0      	b.n	8017734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80177b2:	6828      	ldr	r0, [r5, #0]
 80177b4:	6803      	ldr	r3, [r0, #0]
 80177b6:	691b      	ldr	r3, [r3, #16]
 80177b8:	4798      	blx	r3
 80177ba:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80177be:	4298      	cmp	r0, r3
 80177c0:	f000 80a8 	beq.w	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80177c4:	f242 030b 	movw	r3, #8203	@ 0x200b
 80177c8:	4298      	cmp	r0, r3
 80177ca:	f000 80a3 	beq.w	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80177ce:	f1bb 0f00 	cmp.w	fp, #0
 80177d2:	d100      	bne.n	80177d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80177d4:	444e      	add	r6, r9
 80177d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80177d8:	2a00      	cmp	r2, #0
 80177da:	d1c0      	bne.n	801775e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80177dc:	4691      	mov	r9, r2
 80177de:	e099      	b.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80177e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	f000 80c2 	beq.w	801796c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80177e8:	f1bb 0f00 	cmp.w	fp, #0
 80177ec:	d117      	bne.n	801781e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80177ee:	6828      	ldr	r0, [r5, #0]
 80177f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80177f2:	6803      	ldr	r3, [r0, #0]
 80177f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177f6:	4798      	blx	r3
 80177f8:	4406      	add	r6, r0
 80177fa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80177fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80177fe:	1af3      	subs	r3, r6, r3
 8017800:	4293      	cmp	r3, r2
 8017802:	dd16      	ble.n	8017832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8017804:	2c00      	cmp	r4, #0
 8017806:	f000 80af 	beq.w	8017968 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 801780a:	2c0a      	cmp	r4, #10
 801780c:	f040 809d 	bne.w	801794a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8017810:	240a      	movs	r4, #10
 8017812:	fab4 f084 	clz	r0, r4
 8017816:	0940      	lsrs	r0, r0, #5
 8017818:	b01f      	add	sp, #124	@ 0x7c
 801781a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801781e:	6828      	ldr	r0, [r5, #0]
 8017820:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017822:	6803      	ldr	r3, [r0, #0]
 8017824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017826:	4798      	blx	r3
 8017828:	f1bb 0f01 	cmp.w	fp, #1
 801782c:	eba6 0600 	sub.w	r6, r6, r0
 8017830:	d0a7      	beq.n	8017782 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017832:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8017834:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8017836:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801783a:	f9b3 8000 	ldrsh.w	r8, [r3]
 801783e:	7b43      	ldrb	r3, [r0, #13]
 8017840:	4431      	add	r1, r6
 8017842:	015b      	lsls	r3, r3, #5
 8017844:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017848:	7983      	ldrb	r3, [r0, #6]
 801784a:	4313      	orrs	r3, r2
 801784c:	440b      	add	r3, r1
 801784e:	4543      	cmp	r3, r8
 8017850:	db60      	blt.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017854:	4299      	cmp	r1, r3
 8017856:	da5d      	bge.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8017858:	6828      	ldr	r0, [r5, #0]
 801785a:	45b0      	cmp	r8, r6
 801785c:	6803      	ldr	r3, [r0, #0]
 801785e:	bfcc      	ite	gt
 8017860:	eba8 0806 	subgt.w	r8, r8, r6
 8017864:	f04f 0800 	movle.w	r8, #0
 8017868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801786a:	bfc8      	it	gt
 801786c:	fa1f f888 	uxthgt.w	r8, r8
 8017870:	4798      	blx	r3
 8017872:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017874:	7b53      	ldrb	r3, [r2, #13]
 8017876:	00d9      	lsls	r1, r3, #3
 8017878:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801787c:	7a11      	ldrb	r1, [r2, #8]
 801787e:	4339      	orrs	r1, r7
 8017880:	065f      	lsls	r7, r3, #25
 8017882:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8017884:	bf48      	it	mi
 8017886:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801788a:	4407      	add	r7, r0
 801788c:	bf48      	it	mi
 801788e:	b209      	sxthmi	r1, r1
 8017890:	1a7f      	subs	r7, r7, r1
 8017892:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8017894:	b2bf      	uxth	r7, r7
 8017896:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801789a:	fa0f fa87 	sxth.w	sl, r7
 801789e:	4551      	cmp	r1, sl
 80178a0:	dd3c      	ble.n	801791c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 80178a2:	011b      	lsls	r3, r3, #4
 80178a4:	79d0      	ldrb	r0, [r2, #7]
 80178a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178aa:	4303      	orrs	r3, r0
 80178ac:	449a      	add	sl, r3
 80178ae:	4551      	cmp	r1, sl
 80178b0:	dc30      	bgt.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80178b2:	1bcf      	subs	r7, r1, r7
 80178b4:	468a      	mov	sl, r1
 80178b6:	b23f      	sxth	r7, r7
 80178b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80178ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80178bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80178be:	6828      	ldr	r0, [r5, #0]
 80178c0:	2a00      	cmp	r2, #0
 80178c2:	d12d      	bne.n	8017920 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80178c4:	9318      	str	r3, [sp, #96]	@ 0x60
 80178c6:	b2bf      	uxth	r7, r7
 80178c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178ca:	6819      	ldr	r1, [r3, #0]
 80178cc:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 80178ce:	6801      	ldr	r1, [r0, #0]
 80178d0:	9314      	str	r3, [sp, #80]	@ 0x50
 80178d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80178d4:	4788      	blx	r1
 80178d6:	79a9      	ldrb	r1, [r5, #6]
 80178d8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80178da:	910b      	str	r1, [sp, #44]	@ 0x2c
 80178dc:	7ba9      	ldrb	r1, [r5, #14]
 80178de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80178e0:	910a      	str	r1, [sp, #40]	@ 0x28
 80178e2:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80178e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80178e8:	68a9      	ldr	r1, [r5, #8]
 80178ea:	9306      	str	r3, [sp, #24]
 80178ec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80178ee:	9205      	str	r2, [sp, #20]
 80178f0:	9304      	str	r3, [sp, #16]
 80178f2:	f8cd a004 	str.w	sl, [sp, #4]
 80178f6:	e9cd 8702 	strd	r8, r7, [sp, #8]
 80178fa:	44b0      	add	r8, r6
 80178fc:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80178fe:	fa0f f388 	sxth.w	r3, r8
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017906:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801790a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	47b8      	blx	r7
 8017914:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017916:	3301      	adds	r3, #1
 8017918:	930d      	str	r3, [sp, #52]	@ 0x34
 801791a:	e6e3      	b.n	80176e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 801791c:	2700      	movs	r7, #0
 801791e:	e7cb      	b.n	80178b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8017920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017922:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8017926:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017928:	f8dc 1000 	ldr.w	r1, [ip]
 801792c:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8017930:	79aa      	ldrb	r2, [r5, #6]
 8017932:	9203      	str	r2, [sp, #12]
 8017934:	7baa      	ldrb	r2, [r5, #14]
 8017936:	9202      	str	r2, [sp, #8]
 8017938:	68aa      	ldr	r2, [r5, #8]
 801793a:	e9cd 0200 	strd	r0, r2, [sp]
 801793e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8017940:	4660      	mov	r0, ip
 8017942:	688f      	ldr	r7, [r1, #8]
 8017944:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017946:	47b8      	blx	r7
 8017948:	e7e4      	b.n	8017914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801794a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801794c:	3501      	adds	r5, #1
 801794e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8017950:	429d      	cmp	r5, r3
 8017952:	f6bf af5e 	bge.w	8017812 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8017956:	4659      	mov	r1, fp
 8017958:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801795a:	f7f9 f887 	bl	8010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801795e:	4604      	mov	r4, r0
 8017960:	b110      	cbz	r0, 8017968 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8017962:	280a      	cmp	r0, #10
 8017964:	d1f2      	bne.n	801794c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8017966:	e753      	b.n	8017810 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8017968:	2400      	movs	r4, #0
 801796a:	e752      	b.n	8017812 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801796c:	f1bb 0f00 	cmp.w	fp, #0
 8017970:	f43f af43 	beq.w	80177fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8017974:	e75d      	b.n	8017832 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08017976 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8017976:	b530      	push	{r4, r5, lr}
 8017978:	8ac4      	ldrh	r4, [r0, #22]
 801797a:	8b45      	ldrh	r5, [r0, #26]
 801797c:	8343      	strh	r3, [r0, #26]
 801797e:	442c      	add	r4, r5
 8017980:	1ae4      	subs	r4, r4, r3
 8017982:	8b83      	ldrh	r3, [r0, #28]
 8017984:	82c4      	strh	r4, [r0, #22]
 8017986:	8b04      	ldrh	r4, [r0, #24]
 8017988:	4422      	add	r2, r4
 801798a:	440c      	add	r4, r1
 801798c:	1a59      	subs	r1, r3, r1
 801798e:	83c2      	strh	r2, [r0, #30]
 8017990:	8304      	strh	r4, [r0, #24]
 8017992:	8381      	strh	r1, [r0, #28]
 8017994:	bd30      	pop	{r4, r5, pc}

08017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8017996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799a:	4604      	mov	r4, r0
 801799c:	8a47      	ldrh	r7, [r0, #18]
 801799e:	68c0      	ldr	r0, [r0, #12]
 80179a0:	b085      	sub	sp, #20
 80179a2:	6803      	ldr	r3, [r0, #0]
 80179a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179a6:	4798      	blx	r3
 80179a8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80179ac:	7a63      	ldrb	r3, [r4, #9]
 80179ae:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80179b2:	3b01      	subs	r3, #1
 80179b4:	42b7      	cmp	r7, r6
 80179b6:	bfac      	ite	ge
 80179b8:	f04f 0900 	movge.w	r9, #0
 80179bc:	f04f 0901 	movlt.w	r9, #1
 80179c0:	2b05      	cmp	r3, #5
 80179c2:	d804      	bhi.n	80179ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80179c4:	e8df f003 	tbb	[pc, r3]
 80179c8:	470f0854 	.word	0x470f0854
 80179cc:	4c4c      	.short	0x4c4c
 80179ce:	2500      	movs	r5, #0
 80179d0:	46a9      	mov	r9, r5
 80179d2:	462e      	mov	r6, r5
 80179d4:	462f      	mov	r7, r5
 80179d6:	e00e      	b.n	80179f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80179d8:	42b7      	cmp	r7, r6
 80179da:	f04f 0500 	mov.w	r5, #0
 80179de:	bfb4      	ite	lt
 80179e0:	2600      	movlt	r6, #0
 80179e2:	2601      	movge	r6, #1
 80179e4:	e7f6      	b.n	80179d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80179e6:	42b7      	cmp	r7, r6
 80179e8:	464d      	mov	r5, r9
 80179ea:	f04f 0900 	mov.w	r9, #0
 80179ee:	bfb4      	ite	lt
 80179f0:	2600      	movlt	r6, #0
 80179f2:	2601      	movge	r6, #1
 80179f4:	464f      	mov	r7, r9
 80179f6:	f04f 0800 	mov.w	r8, #0
 80179fa:	f8a4 8016 	strh.w	r8, [r4, #22]
 80179fe:	f8a4 8018 	strh.w	r8, [r4, #24]
 8017a02:	f8cd 8004 	str.w	r8, [sp, #4]
 8017a06:	2300      	movs	r3, #0
 8017a08:	9303      	str	r3, [sp, #12]
 8017a0a:	8823      	ldrh	r3, [r4, #0]
 8017a0c:	2b20      	cmp	r3, #32
 8017a0e:	d033      	beq.n	8017a78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8017a10:	f242 010b 	movw	r1, #8203	@ 0x200b
 8017a14:	1a5a      	subs	r2, r3, r1
 8017a16:	f1d2 0a00 	rsbs	sl, r2, #0
 8017a1a:	eb4a 0a02 	adc.w	sl, sl, r2
 8017a1e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8017a22:	4293      	cmp	r3, r2
 8017a24:	d008      	beq.n	8017a38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017a26:	428b      	cmp	r3, r1
 8017a28:	9a01      	ldr	r2, [sp, #4]
 8017a2a:	bf0e      	itee	eq
 8017a2c:	f04f 0a01 	moveq.w	sl, #1
 8017a30:	461a      	movne	r2, r3
 8017a32:	f04f 0a00 	movne.w	sl, #0
 8017a36:	9201      	str	r2, [sp, #4]
 8017a38:	ab03      	add	r3, sp, #12
 8017a3a:	68e2      	ldr	r2, [r4, #12]
 8017a3c:	7a21      	ldrb	r1, [r4, #8]
 8017a3e:	6860      	ldr	r0, [r4, #4]
 8017a40:	f002 fee8 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017a44:	8020      	strh	r0, [r4, #0]
 8017a46:	b9d8      	cbnz	r0, 8017a80 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8017a48:	8ba2      	ldrh	r2, [r4, #28]
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	4611      	mov	r1, r2
 8017a4e:	4620      	mov	r0, r4
 8017a50:	f7ff ff91 	bl	8017976 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017a54:	e06e      	b.n	8017b34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8017a56:	2500      	movs	r5, #0
 8017a58:	2701      	movs	r7, #1
 8017a5a:	46a9      	mov	r9, r5
 8017a5c:	462e      	mov	r6, r5
 8017a5e:	e7ca      	b.n	80179f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017a60:	42b7      	cmp	r7, r6
 8017a62:	f04f 0500 	mov.w	r5, #0
 8017a66:	bfb4      	ite	lt
 8017a68:	2700      	movlt	r7, #0
 8017a6a:	2701      	movge	r7, #1
 8017a6c:	462e      	mov	r6, r5
 8017a6e:	e7c2      	b.n	80179f6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8017a70:	2500      	movs	r5, #0
 8017a72:	2601      	movs	r6, #1
 8017a74:	46a9      	mov	r9, r5
 8017a76:	e7ad      	b.n	80179d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8017a78:	9301      	str	r3, [sp, #4]
 8017a7a:	f04f 0a01 	mov.w	sl, #1
 8017a7e:	e7db      	b.n	8017a38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8017a80:	8b63      	ldrh	r3, [r4, #26]
 8017a82:	280a      	cmp	r0, #10
 8017a84:	f103 0301 	add.w	r3, r3, #1
 8017a88:	8363      	strh	r3, [r4, #26]
 8017a8a:	d0dd      	beq.n	8017a48 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8017a8c:	9a03      	ldr	r2, [sp, #12]
 8017a8e:	bb62      	cbnz	r2, 8017aea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8017a90:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017a94:	4298      	cmp	r0, r3
 8017a96:	d003      	beq.n	8017aa0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8017a98:	f242 030b 	movw	r3, #8203	@ 0x200b
 8017a9c:	4298      	cmp	r0, r3
 8017a9e:	d1b2      	bne.n	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017aa0:	8823      	ldrh	r3, [r4, #0]
 8017aa2:	8ba1      	ldrh	r1, [r4, #28]
 8017aa4:	2b20      	cmp	r3, #32
 8017aa6:	d003      	beq.n	8017ab0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8017aa8:	f242 000b 	movw	r0, #8203	@ 0x200b
 8017aac:	4283      	cmp	r3, r0
 8017aae:	d131      	bne.n	8017b14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8017ab0:	f1ba 0f00 	cmp.w	sl, #0
 8017ab4:	bf0a      	itet	eq
 8017ab6:	4688      	moveq	r8, r1
 8017ab8:	4650      	movne	r0, sl
 8017aba:	2001      	moveq	r0, #1
 8017abc:	440a      	add	r2, r1
 8017abe:	8b23      	ldrh	r3, [r4, #24]
 8017ac0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8017ac4:	b292      	uxth	r2, r2
 8017ac6:	83a2      	strh	r2, [r4, #28]
 8017ac8:	4413      	add	r3, r2
 8017aca:	f1b9 0f00 	cmp.w	r9, #0
 8017ace:	d102      	bne.n	8017ad6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8017ad0:	2d00      	cmp	r5, #0
 8017ad2:	d042      	beq.n	8017b5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8017ad4:	b300      	cbz	r0, 8017b18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8017ad6:	8c21      	ldrh	r1, [r4, #32]
 8017ad8:	4419      	add	r1, r3
 8017ada:	458c      	cmp	ip, r1
 8017adc:	da37      	bge.n	8017b4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8017ade:	8ae1      	ldrh	r1, [r4, #22]
 8017ae0:	2900      	cmp	r1, #0
 8017ae2:	d034      	beq.n	8017b4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8017ae4:	4563      	cmp	r3, ip
 8017ae6:	dd8e      	ble.n	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017ae8:	e01d      	b.n	8017b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8017aea:	8893      	ldrh	r3, [r2, #4]
 8017aec:	9901      	ldr	r1, [sp, #4]
 8017aee:	8023      	strh	r3, [r4, #0]
 8017af0:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8017af4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8017af8:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8017afc:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8017b00:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b04:	68e0      	ldr	r0, [r4, #12]
 8017b06:	6803      	ldr	r3, [r0, #0]
 8017b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b0a:	4798      	blx	r3
 8017b0c:	eb0b 0200 	add.w	r2, fp, r0
 8017b10:	b292      	uxth	r2, r2
 8017b12:	e7c5      	b.n	8017aa0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8017b14:	2000      	movs	r0, #0
 8017b16:	e7d1      	b.n	8017abc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8017b18:	4563      	cmp	r3, ip
 8017b1a:	f77f af74 	ble.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b1e:	8ae3      	ldrh	r3, [r4, #22]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f43f af70 	beq.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b26:	2301      	movs	r3, #1
 8017b28:	8c22      	ldrh	r2, [r4, #32]
 8017b2a:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8017b2e:	8be3      	ldrh	r3, [r4, #30]
 8017b30:	4413      	add	r3, r2
 8017b32:	83e3      	strh	r3, [r4, #30]
 8017b34:	68e0      	ldr	r0, [r4, #12]
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b3a:	4798      	blx	r3
 8017b3c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8017b40:	4418      	add	r0, r3
 8017b42:	8a63      	ldrh	r3, [r4, #18]
 8017b44:	1a18      	subs	r0, r3, r0
 8017b46:	8260      	strh	r0, [r4, #18]
 8017b48:	b005      	add	sp, #20
 8017b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b4e:	2300      	movs	r3, #0
 8017b50:	4611      	mov	r1, r2
 8017b52:	4620      	mov	r0, r4
 8017b54:	f7ff ff0f 	bl	8017976 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8017b58:	e755      	b.n	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b5a:	4563      	cmp	r3, ip
 8017b5c:	dd14      	ble.n	8017b88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8017b5e:	b117      	cbz	r7, 8017b66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8017b60:	2301      	movs	r3, #1
 8017b62:	460a      	mov	r2, r1
 8017b64:	e772      	b.n	8017a4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8017b66:	2e00      	cmp	r6, #0
 8017b68:	f43f af4d 	beq.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	f47f af4a 	bne.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b72:	f1ba 0f00 	cmp.w	sl, #0
 8017b76:	d002      	beq.n	8017b7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8017b78:	2301      	movs	r3, #1
 8017b7a:	4642      	mov	r2, r8
 8017b7c:	e767      	b.n	8017a4e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8017b7e:	8ae3      	ldrh	r3, [r4, #22]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	f43f af40 	beq.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b86:	e7d5      	b.n	8017b34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8017b88:	2800      	cmp	r0, #0
 8017b8a:	f47f af3c 	bne.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b8e:	f1ba 0f00 	cmp.w	sl, #0
 8017b92:	f43f af38 	beq.w	8017a06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8017b96:	2301      	movs	r3, #1
 8017b98:	4642      	mov	r2, r8
 8017b9a:	e7da      	b.n	8017b52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08017b9c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8017b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b9e:	4605      	mov	r5, r0
 8017ba0:	b08f      	sub	sp, #60	@ 0x3c
 8017ba2:	4617      	mov	r7, r2
 8017ba4:	461c      	mov	r4, r3
 8017ba6:	460e      	mov	r6, r1
 8017ba8:	b1d1      	cbz	r1, 8017be0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	4620      	mov	r0, r4
 8017bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bb0:	4798      	blx	r3
 8017bb2:	4240      	negs	r0, r0
 8017bb4:	9603      	str	r6, [sp, #12]
 8017bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bba:	b200      	sxth	r0, r0
 8017bbc:	9700      	str	r7, [sp, #0]
 8017bbe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8017bc2:	4629      	mov	r1, r5
 8017bc4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8017bc8:	2401      	movs	r4, #1
 8017bca:	a805      	add	r0, sp, #20
 8017bcc:	f7ff fcaa 	bl	8017524 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017bd0:	a805      	add	r0, sp, #20
 8017bd2:	f7ff fee0 	bl	8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017bd6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8017bda:	b163      	cbz	r3, 8017bf6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8017bdc:	3401      	adds	r4, #1
 8017bde:	e7f7      	b.n	8017bd0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8017be0:	2401      	movs	r4, #1
 8017be2:	f002 fee3 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017be6:	280a      	cmp	r0, #10
 8017be8:	4628      	mov	r0, r5
 8017bea:	bf08      	it	eq
 8017bec:	3401      	addeq	r4, #1
 8017bee:	f002 fedd 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017bf2:	2800      	cmp	r0, #0
 8017bf4:	d1f7      	bne.n	8017be6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8017bf6:	b2a0      	uxth	r0, r4
 8017bf8:	b00f      	add	sp, #60	@ 0x3c
 8017bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017bfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8017bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c00:	b0e3      	sub	sp, #396	@ 0x18c
 8017c02:	461c      	mov	r4, r3
 8017c04:	4683      	mov	fp, r0
 8017c06:	4688      	mov	r8, r1
 8017c08:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	f000 8112 	beq.w	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 810e 	beq.w	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017c18:	7ba3      	ldrb	r3, [r4, #14]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	f000 810a 	beq.w	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017c20:	ad0a      	add	r5, sp, #40	@ 0x28
 8017c22:	6810      	ldr	r0, [r2, #0]
 8017c24:	6851      	ldr	r1, [r2, #4]
 8017c26:	462b      	mov	r3, r5
 8017c28:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8017c2c:	c303      	stmia	r3!, {r0, r1}
 8017c2e:	2100      	movs	r1, #0
 8017c30:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017c34:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8017c38:	4628      	mov	r0, r5
 8017c3a:	910c      	str	r1, [sp, #48]	@ 0x30
 8017c3c:	a90c      	add	r1, sp, #48	@ 0x30
 8017c3e:	79a2      	ldrb	r2, [r4, #6]
 8017c40:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017c44:	f7ff fced 	bl	8017622 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017c48:	a90c      	add	r1, sp, #48	@ 0x30
 8017c4a:	79a2      	ldrb	r2, [r4, #6]
 8017c4c:	4608      	mov	r0, r1
 8017c4e:	f7ff fce8 	bl	8017622 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8017c52:	a817      	add	r0, sp, #92	@ 0x5c
 8017c54:	f002 fa7d 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 8017c58:	6820      	ldr	r0, [r4, #0]
 8017c5a:	6803      	ldr	r3, [r0, #0]
 8017c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c5e:	4798      	blx	r3
 8017c60:	4606      	mov	r6, r0
 8017c62:	6820      	ldr	r0, [r4, #0]
 8017c64:	6803      	ldr	r3, [r0, #0]
 8017c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c68:	4798      	blx	r3
 8017c6a:	4633      	mov	r3, r6
 8017c6c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8017c6e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8017c70:	9000      	str	r0, [sp, #0]
 8017c72:	a817      	add	r0, sp, #92	@ 0x5c
 8017c74:	f002 fac8 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c78:	6820      	ldr	r0, [r4, #0]
 8017c7a:	f894 a004 	ldrb.w	sl, [r4, #4]
 8017c7e:	6803      	ldr	r3, [r0, #0]
 8017c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017c82:	4798      	blx	r3
 8017c84:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	4607      	mov	r7, r0
 8017c8c:	4406      	add	r6, r0
 8017c8e:	a830      	add	r0, sp, #192	@ 0xc0
 8017c90:	f893 9009 	ldrb.w	r9, [r3, #9]
 8017c94:	f002 fa5d 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 8017c98:	7c23      	ldrb	r3, [r4, #16]
 8017c9a:	b17b      	cbz	r3, 8017cbc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8017c9c:	6820      	ldr	r0, [r4, #0]
 8017c9e:	6803      	ldr	r3, [r0, #0]
 8017ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017ca2:	4798      	blx	r3
 8017ca4:	9009      	str	r0, [sp, #36]	@ 0x24
 8017ca6:	6820      	ldr	r0, [r4, #0]
 8017ca8:	6802      	ldr	r2, [r0, #0]
 8017caa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8017cac:	4790      	blx	r2
 8017cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cb0:	9000      	str	r0, [sp, #0]
 8017cb2:	a830      	add	r0, sp, #192	@ 0xc0
 8017cb4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8017cb6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8017cb8:	f002 faa6 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017cbc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8017cc0:	a80e      	add	r0, sp, #56	@ 0x38
 8017cc2:	7be2      	ldrb	r2, [r4, #15]
 8017cc4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017cc8:	1a8a      	subs	r2, r1, r2
 8017cca:	7c21      	ldrb	r1, [r4, #16]
 8017ccc:	9103      	str	r1, [sp, #12]
 8017cce:	b292      	uxth	r2, r2
 8017cd0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017cd4:	9102      	str	r1, [sp, #8]
 8017cd6:	6821      	ldr	r1, [r4, #0]
 8017cd8:	9101      	str	r1, [sp, #4]
 8017cda:	7961      	ldrb	r1, [r4, #5]
 8017cdc:	9100      	str	r1, [sp, #0]
 8017cde:	a930      	add	r1, sp, #192	@ 0xc0
 8017ce0:	f7ff fc20 	bl	8017524 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8017ce4:	2e00      	cmp	r6, #0
 8017ce6:	dc5b      	bgt.n	8017da0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8017ce8:	af17      	add	r7, sp, #92	@ 0x5c
 8017cea:	f04f 0900 	mov.w	r9, #0
 8017cee:	7c23      	ldrb	r3, [r4, #16]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	f000 80b1 	beq.w	8017e58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8017cf6:	a80e      	add	r0, sp, #56	@ 0x38
 8017cf8:	f7ff fe4d 	bl	8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017cfc:	f1ba 0f00 	cmp.w	sl, #0
 8017d00:	f000 80a5 	beq.w	8017e4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017d04:	7c23      	ldrb	r3, [r4, #16]
 8017d06:	2264      	movs	r2, #100	@ 0x64
 8017d08:	4639      	mov	r1, r7
 8017d0a:	a849      	add	r0, sp, #292	@ 0x124
 8017d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d0e:	f00d fc50 	bl	80255b2 <memcpy>
 8017d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	f000 80a7 	beq.w	8017e68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8017d1a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8017d1e:	7922      	ldrb	r2, [r4, #4]
 8017d20:	2a01      	cmp	r2, #1
 8017d22:	f040 808a 	bne.w	8017e3a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8017d26:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8017d2a:	1ac0      	subs	r0, r0, r3
 8017d2c:	2302      	movs	r3, #2
 8017d2e:	fb90 f0f3 	sdiv	r0, r0, r3
 8017d32:	b200      	sxth	r0, r0
 8017d34:	7c23      	ldrb	r3, [r4, #16]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	f000 808b 	beq.w	8017e52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8017d3c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8017d40:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8017d44:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017d48:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017d4c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8017d50:	2100      	movs	r1, #0
 8017d52:	4410      	add	r0, r2
 8017d54:	4642      	mov	r2, r8
 8017d56:	b200      	sxth	r0, r0
 8017d58:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8017d5c:	9000      	str	r0, [sp, #0]
 8017d5e:	4658      	mov	r0, fp
 8017d60:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8017d64:	f7ff fc8e 	bl	8017684 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8017d68:	2800      	cmp	r0, #0
 8017d6a:	d163      	bne.n	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017d6c:	b2b2      	uxth	r2, r6
 8017d6e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017d72:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8017d76:	4413      	add	r3, r2
 8017d78:	1a8a      	subs	r2, r1, r2
 8017d7a:	b21b      	sxth	r3, r3
 8017d7c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8017d80:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8017d84:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017d88:	2a00      	cmp	r2, #0
 8017d8a:	d153      	bne.n	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017d8c:	6822      	ldr	r2, [r4, #0]
 8017d8e:	8869      	ldrh	r1, [r5, #2]
 8017d90:	7a12      	ldrb	r2, [r2, #8]
 8017d92:	1a9b      	subs	r3, r3, r2
 8017d94:	88ea      	ldrh	r2, [r5, #6]
 8017d96:	440a      	add	r2, r1
 8017d98:	b212      	sxth	r2, r2
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	dda7      	ble.n	8017cee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8017d9e:	e049      	b.n	8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017da0:	7c23      	ldrb	r3, [r4, #16]
 8017da2:	444f      	add	r7, r9
 8017da4:	b1c3      	cbz	r3, 8017dd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8017da6:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8017daa:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017dae:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017db2:	443b      	add	r3, r7
 8017db4:	4293      	cmp	r3, r2
 8017db6:	da97      	bge.n	8017ce8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017db8:	a80e      	add	r0, sp, #56	@ 0x38
 8017dba:	f7ff fdec 	bl	8017996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017dbe:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8017dc2:	3b01      	subs	r3, #1
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	454b      	cmp	r3, r9
 8017dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dca:	d021      	beq.n	8017e10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8017dcc:	7961      	ldrb	r1, [r4, #5]
 8017dce:	a817      	add	r0, sp, #92	@ 0x5c
 8017dd0:	f7f8 fe4c 	bl	8010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8017dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dd6:	e7f4      	b.n	8017dc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8017dd8:	fa1f f986 	uxth.w	r9, r6
 8017ddc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8017de0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017de4:	443b      	add	r3, r7
 8017de6:	4293      	cmp	r3, r2
 8017de8:	f6bf af7e 	bge.w	8017ce8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8017dec:	a817      	add	r0, sp, #92	@ 0x5c
 8017dee:	f002 fddd 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017df2:	b1f8      	cbz	r0, 8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017df4:	280a      	cmp	r0, #10
 8017df6:	d1f1      	bne.n	8017ddc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017df8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8017dfc:	444b      	add	r3, r9
 8017dfe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017e02:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8017e06:	eba3 0309 	sub.w	r3, r3, r9
 8017e0a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017e0e:	e7e5      	b.n	8017ddc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8017e10:	b2b3      	uxth	r3, r6
 8017e12:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8017e16:	441a      	add	r2, r3
 8017e18:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017e1c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8017e20:	1ad3      	subs	r3, r2, r3
 8017e22:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017e26:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017e2a:	b11b      	cbz	r3, 8017e34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8017e2c:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d0ba      	beq.n	8017daa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8017e34:	b063      	add	sp, #396	@ 0x18c
 8017e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3a:	2a02      	cmp	r2, #2
 8017e3c:	d105      	bne.n	8017e4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8017e3e:	7be2      	ldrb	r2, [r4, #15]
 8017e40:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8017e44:	1a80      	subs	r0, r0, r2
 8017e46:	1ac0      	subs	r0, r0, r3
 8017e48:	e773      	b.n	8017d32 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8017e4a:	2000      	movs	r0, #0
 8017e4c:	e772      	b.n	8017d34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017e4e:	7be0      	ldrb	r0, [r4, #15]
 8017e50:	e770      	b.n	8017d34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8017e52:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017e56:	e773      	b.n	8017d40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8017e58:	f1ba 0f00 	cmp.w	sl, #0
 8017e5c:	d0f7      	beq.n	8017e4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8017e5e:	2264      	movs	r2, #100	@ 0x64
 8017e60:	4639      	mov	r1, r7
 8017e62:	a849      	add	r0, sp, #292	@ 0x124
 8017e64:	f00d fba5 	bl	80255b2 <memcpy>
 8017e68:	2300      	movs	r3, #0
 8017e6a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017e6e:	6821      	ldr	r1, [r4, #0]
 8017e70:	a849      	add	r0, sp, #292	@ 0x124
 8017e72:	f7ff fb9a 	bl	80175aa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017e76:	b203      	sxth	r3, r0
 8017e78:	e751      	b.n	8017d1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08017e7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8017e7a:	2b03      	cmp	r3, #3
 8017e7c:	d818      	bhi.n	8017eb0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8017e7e:	e8df f003 	tbb	[pc, r3]
 8017e82:	0602      	.short	0x0602
 8017e84:	130d      	.short	0x130d
 8017e86:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017e8a:	1850      	adds	r0, r2, r1
 8017e8c:	4770      	bx	lr
 8017e8e:	8803      	ldrh	r3, [r0, #0]
 8017e90:	8880      	ldrh	r0, [r0, #4]
 8017e92:	4418      	add	r0, r3
 8017e94:	b200      	sxth	r0, r0
 8017e96:	1a80      	subs	r0, r0, r2
 8017e98:	3801      	subs	r0, #1
 8017e9a:	4770      	bx	lr
 8017e9c:	8803      	ldrh	r3, [r0, #0]
 8017e9e:	8880      	ldrh	r0, [r0, #4]
 8017ea0:	4418      	add	r0, r3
 8017ea2:	b200      	sxth	r0, r0
 8017ea4:	1a40      	subs	r0, r0, r1
 8017ea6:	e7f7      	b.n	8017e98 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8017ea8:	f9b0 0000 	ldrsh.w	r0, [r0]
 8017eac:	4410      	add	r0, r2
 8017eae:	4770      	bx	lr
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	4770      	bx	lr

08017eb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8017eb4:	2b03      	cmp	r3, #3
 8017eb6:	d817      	bhi.n	8017ee8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8017eb8:	e8df f003 	tbb	[pc, r3]
 8017ebc:	10090602 	.word	0x10090602
 8017ec0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8017ec4:	1850      	adds	r0, r2, r1
 8017ec6:	4770      	bx	lr
 8017ec8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017ecc:	e7fa      	b.n	8017ec4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8017ece:	8843      	ldrh	r3, [r0, #2]
 8017ed0:	88c0      	ldrh	r0, [r0, #6]
 8017ed2:	4418      	add	r0, r3
 8017ed4:	b200      	sxth	r0, r0
 8017ed6:	1a80      	subs	r0, r0, r2
 8017ed8:	3801      	subs	r0, #1
 8017eda:	4770      	bx	lr
 8017edc:	8843      	ldrh	r3, [r0, #2]
 8017ede:	88c0      	ldrh	r0, [r0, #6]
 8017ee0:	4418      	add	r0, r3
 8017ee2:	b200      	sxth	r0, r0
 8017ee4:	1a40      	subs	r0, r0, r1
 8017ee6:	e7f7      	b.n	8017ed8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8017ee8:	2000      	movs	r0, #0
 8017eea:	4770      	bx	lr

08017eec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8017eec:	4b01      	ldr	r3, [pc, #4]	@ (8017ef4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8017eee:	2200      	movs	r2, #0
 8017ef0:	601a      	str	r2, [r3, #0]
 8017ef2:	4770      	bx	lr
 8017ef4:	2401bb40 	.word	0x2401bb40

08017ef8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8017ef8:	4603      	mov	r3, r0
 8017efa:	b1c8      	cbz	r0, 8017f30 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8017efc:	0c02      	lsrs	r2, r0, #16
 8017efe:	0412      	lsls	r2, r2, #16
 8017f00:	b9a2      	cbnz	r2, 8017f2c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8017f02:	0403      	lsls	r3, r0, #16
 8017f04:	2010      	movs	r0, #16
 8017f06:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8017f0a:	bf04      	itt	eq
 8017f0c:	021b      	lsleq	r3, r3, #8
 8017f0e:	3008      	addeq	r0, #8
 8017f10:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8017f14:	bf04      	itt	eq
 8017f16:	011b      	lsleq	r3, r3, #4
 8017f18:	3004      	addeq	r0, #4
 8017f1a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8017f1e:	bf04      	itt	eq
 8017f20:	009b      	lsleq	r3, r3, #2
 8017f22:	3002      	addeq	r0, #2
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	db04      	blt.n	8017f32 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8017f28:	3001      	adds	r0, #1
 8017f2a:	4770      	bx	lr
 8017f2c:	2000      	movs	r0, #0
 8017f2e:	e7ea      	b.n	8017f06 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8017f30:	2020      	movs	r0, #32
 8017f32:	4770      	bx	lr

08017f34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8017f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f38:	b087      	sub	sp, #28
 8017f3a:	460d      	mov	r5, r1
 8017f3c:	4616      	mov	r6, r2
 8017f3e:	4698      	mov	r8, r3
 8017f40:	4601      	mov	r1, r0
 8017f42:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8017f46:	b120      	cbz	r0, 8017f52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017f48:	b11a      	cbz	r2, 8017f52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017f4a:	2d1f      	cmp	r5, #31
 8017f4c:	d801      	bhi.n	8017f52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8017f4e:	2b1f      	cmp	r3, #31
 8017f50:	d904      	bls.n	8017f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8017f52:	2000      	movs	r0, #0
 8017f54:	6038      	str	r0, [r7, #0]
 8017f56:	b007      	add	sp, #28
 8017f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5c:	b97d      	cbnz	r5, 8017f7e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8017f5e:	b143      	cbz	r3, 8017f72 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8017f60:	4602      	mov	r2, r0
 8017f62:	462b      	mov	r3, r5
 8017f64:	4641      	mov	r1, r8
 8017f66:	4630      	mov	r0, r6
 8017f68:	e9cd 4700 	strd	r4, r7, [sp]
 8017f6c:	f7ff ffe2 	bl	8017f34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017f70:	e7f1      	b.n	8017f56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017f72:	f04f 33ff 	mov.w	r3, #4294967295
 8017f76:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017f7a:	603b      	str	r3, [r7, #0]
 8017f7c:	e7eb      	b.n	8017f56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017f7e:	fa32 fa05 	lsrs.w	sl, r2, r5
 8017f82:	d106      	bne.n	8017f92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8017f84:	4346      	muls	r6, r0
 8017f86:	fbb6 f0f4 	udiv	r0, r6, r4
 8017f8a:	fb04 6610 	mls	r6, r4, r0, r6
 8017f8e:	603e      	str	r6, [r7, #0]
 8017f90:	e7e1      	b.n	8017f56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8017f92:	2201      	movs	r2, #1
 8017f94:	fa00 fb05 	lsl.w	fp, r0, r5
 8017f98:	40aa      	lsls	r2, r5
 8017f9a:	fbbb f9f4 	udiv	r9, fp, r4
 8017f9e:	3a01      	subs	r2, #1
 8017fa0:	fb0a f309 	mul.w	r3, sl, r9
 8017fa4:	fb04 b919 	mls	r9, r4, r9, fp
 8017fa8:	4016      	ands	r6, r2
 8017faa:	9303      	str	r3, [sp, #12]
 8017fac:	4630      	mov	r0, r6
 8017fae:	f7ff ffa3 	bl	8017ef8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017fb2:	462b      	mov	r3, r5
 8017fb4:	460a      	mov	r2, r1
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	4630      	mov	r0, r6
 8017fba:	e9cd 4700 	strd	r4, r7, [sp]
 8017fbe:	f7ff ffb9 	bl	8017f34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017fc2:	4606      	mov	r6, r0
 8017fc4:	4648      	mov	r0, r9
 8017fc6:	eb05 0108 	add.w	r1, r5, r8
 8017fca:	f7ff ff95 	bl	8017ef8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8017fce:	ab05      	add	r3, sp, #20
 8017fd0:	464a      	mov	r2, r9
 8017fd2:	e9cd 4300 	strd	r4, r3, [sp]
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	4650      	mov	r0, sl
 8017fda:	f7ff ffab 	bl	8017f34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8017fde:	6839      	ldr	r1, [r7, #0]
 8017fe0:	9a05      	ldr	r2, [sp, #20]
 8017fe2:	9b03      	ldr	r3, [sp, #12]
 8017fe4:	4411      	add	r1, r2
 8017fe6:	fbb1 f2f4 	udiv	r2, r1, r4
 8017fea:	18d3      	adds	r3, r2, r3
 8017fec:	fb04 1412 	mls	r4, r4, r2, r1
 8017ff0:	441e      	add	r6, r3
 8017ff2:	603c      	str	r4, [r7, #0]
 8017ff4:	4430      	add	r0, r6
 8017ff6:	e7ae      	b.n	8017f56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08017ff8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8017ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ffc:	b085      	sub	sp, #20
 8017ffe:	f1b0 0900 	subs.w	r9, r0, #0
 8018002:	461d      	mov	r5, r3
 8018004:	4617      	mov	r7, r2
 8018006:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8018008:	bfbb      	ittet	lt
 801800a:	f1c9 0900 	rsblt	r9, r9, #0
 801800e:	f04f 36ff 	movlt.w	r6, #4294967295
 8018012:	2601      	movge	r6, #1
 8018014:	6823      	ldrlt	r3, [r4, #0]
 8018016:	bfbc      	itt	lt
 8018018:	425b      	neglt	r3, r3
 801801a:	6023      	strlt	r3, [r4, #0]
 801801c:	2a00      	cmp	r2, #0
 801801e:	da04      	bge.n	801802a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8018020:	6823      	ldr	r3, [r4, #0]
 8018022:	4257      	negs	r7, r2
 8018024:	4276      	negs	r6, r6
 8018026:	425b      	negs	r3, r3
 8018028:	6023      	str	r3, [r4, #0]
 801802a:	2d00      	cmp	r5, #0
 801802c:	4638      	mov	r0, r7
 801802e:	bfba      	itte	lt
 8018030:	426d      	neglt	r5, r5
 8018032:	f04f 38ff 	movlt.w	r8, #4294967295
 8018036:	f04f 0801 	movge.w	r8, #1
 801803a:	f7ff ff5d 	bl	8017ef8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801803e:	ab03      	add	r3, sp, #12
 8018040:	463a      	mov	r2, r7
 8018042:	e9cd 5300 	strd	r5, r3, [sp]
 8018046:	4603      	mov	r3, r0
 8018048:	4648      	mov	r0, r9
 801804a:	f7ff ff73 	bl	8017f34 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801804e:	6823      	ldr	r3, [r4, #0]
 8018050:	9a03      	ldr	r2, [sp, #12]
 8018052:	4546      	cmp	r6, r8
 8018054:	441a      	add	r2, r3
 8018056:	fb92 f3f5 	sdiv	r3, r2, r5
 801805a:	4418      	add	r0, r3
 801805c:	fb05 2313 	mls	r3, r5, r3, r2
 8018060:	bf18      	it	ne
 8018062:	4240      	negne	r0, r0
 8018064:	1c72      	adds	r2, r6, #1
 8018066:	6023      	str	r3, [r4, #0]
 8018068:	d105      	bne.n	8018076 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801806a:	2b00      	cmp	r3, #0
 801806c:	f1c3 0200 	rsb	r2, r3, #0
 8018070:	db0b      	blt.n	801808a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8018072:	6022      	str	r2, [r4, #0]
 8018074:	e006      	b.n	8018084 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018076:	2e01      	cmp	r6, #1
 8018078:	d104      	bne.n	8018084 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801807a:	2b00      	cmp	r3, #0
 801807c:	da02      	bge.n	8018084 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801807e:	442b      	add	r3, r5
 8018080:	3801      	subs	r0, #1
 8018082:	6023      	str	r3, [r4, #0]
 8018084:	b005      	add	sp, #20
 8018086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801808a:	3801      	subs	r0, #1
 801808c:	1b52      	subs	r2, r2, r5
 801808e:	e7f0      	b.n	8018072 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08018090 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8018090:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018094:	4c1c      	ldr	r4, [pc, #112]	@ (8018108 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8018096:	4605      	mov	r5, r0
 8018098:	6807      	ldr	r7, [r0, #0]
 801809a:	69a3      	ldr	r3, [r4, #24]
 801809c:	b92b      	cbnz	r3, 80180aa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801809e:	6840      	ldr	r0, [r0, #4]
 80180a0:	e9c5 7000 	strd	r7, r0, [r5]
 80180a4:	b004      	add	sp, #16
 80180a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180aa:	f04f 0802 	mov.w	r8, #2
 80180ae:	68a2      	ldr	r2, [r4, #8]
 80180b0:	ae04      	add	r6, sp, #16
 80180b2:	6820      	ldr	r0, [r4, #0]
 80180b4:	fb93 f1f8 	sdiv	r1, r3, r8
 80180b8:	440a      	add	r2, r1
 80180ba:	69e1      	ldr	r1, [r4, #28]
 80180bc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80180c0:	463a      	mov	r2, r7
 80180c2:	9600      	str	r6, [sp, #0]
 80180c4:	f7ff ff98 	bl	8017ff8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80180c8:	69a3      	ldr	r3, [r4, #24]
 80180ca:	4607      	mov	r7, r0
 80180cc:	686a      	ldr	r2, [r5, #4]
 80180ce:	6a21      	ldr	r1, [r4, #32]
 80180d0:	9600      	str	r6, [sp, #0]
 80180d2:	6860      	ldr	r0, [r4, #4]
 80180d4:	f7ff ff90 	bl	8017ff8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80180d8:	69a3      	ldr	r3, [r4, #24]
 80180da:	6962      	ldr	r2, [r4, #20]
 80180dc:	4407      	add	r7, r0
 80180de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80180e0:	9600      	str	r6, [sp, #0]
 80180e2:	68e0      	ldr	r0, [r4, #12]
 80180e4:	fb93 f8f8 	sdiv	r8, r3, r8
 80180e8:	4442      	add	r2, r8
 80180ea:	9203      	str	r2, [sp, #12]
 80180ec:	682a      	ldr	r2, [r5, #0]
 80180ee:	f7ff ff83 	bl	8017ff8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80180f2:	4680      	mov	r8, r0
 80180f4:	9600      	str	r6, [sp, #0]
 80180f6:	69a3      	ldr	r3, [r4, #24]
 80180f8:	686a      	ldr	r2, [r5, #4]
 80180fa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80180fc:	6920      	ldr	r0, [r4, #16]
 80180fe:	f7ff ff7b 	bl	8017ff8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8018102:	4440      	add	r0, r8
 8018104:	e7cc      	b.n	80180a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018106:	bf00      	nop
 8018108:	2401bb44 	.word	0x2401bb44

0801810c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801810c:	4b07      	ldr	r3, [pc, #28]	@ (801812c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	2b01      	cmp	r3, #1
 8018112:	d109      	bne.n	8018128 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018114:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018118:	f9b0 2000 	ldrsh.w	r2, [r0]
 801811c:	8003      	strh	r3, [r0, #0]
 801811e:	4b04      	ldr	r3, [pc, #16]	@ (8018130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8018120:	881b      	ldrh	r3, [r3, #0]
 8018122:	3b01      	subs	r3, #1
 8018124:	1a9b      	subs	r3, r3, r2
 8018126:	800b      	strh	r3, [r1, #0]
 8018128:	4770      	bx	lr
 801812a:	bf00      	nop
 801812c:	2401bb30 	.word	0x2401bb30
 8018130:	2401bb2c 	.word	0x2401bb2c

08018134 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018134:	4b07      	ldr	r3, [pc, #28]	@ (8018154 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018136:	b510      	push	{r4, lr}
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	2b01      	cmp	r3, #1
 801813c:	d108      	bne.n	8018150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801813e:	4b06      	ldr	r3, [pc, #24]	@ (8018158 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8018140:	880c      	ldrh	r4, [r1, #0]
 8018142:	881b      	ldrh	r3, [r3, #0]
 8018144:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018148:	3b01      	subs	r3, #1
 801814a:	1b1b      	subs	r3, r3, r4
 801814c:	8003      	strh	r3, [r0, #0]
 801814e:	800a      	strh	r2, [r1, #0]
 8018150:	bd10      	pop	{r4, pc}
 8018152:	bf00      	nop
 8018154:	2401bb30 	.word	0x2401bb30
 8018158:	2401bb2c 	.word	0x2401bb2c

0801815c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801815c:	4b0a      	ldr	r3, [pc, #40]	@ (8018188 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801815e:	b510      	push	{r4, lr}
 8018160:	781b      	ldrb	r3, [r3, #0]
 8018162:	2b01      	cmp	r3, #1
 8018164:	d10e      	bne.n	8018184 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018166:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801816a:	8843      	ldrh	r3, [r0, #2]
 801816c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018170:	18ca      	adds	r2, r1, r3
 8018172:	4b06      	ldr	r3, [pc, #24]	@ (801818c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018174:	8044      	strh	r4, [r0, #2]
 8018176:	881b      	ldrh	r3, [r3, #0]
 8018178:	1a9b      	subs	r3, r3, r2
 801817a:	8003      	strh	r3, [r0, #0]
 801817c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018180:	8081      	strh	r1, [r0, #4]
 8018182:	80c3      	strh	r3, [r0, #6]
 8018184:	bd10      	pop	{r4, pc}
 8018186:	bf00      	nop
 8018188:	2401bb30 	.word	0x2401bb30
 801818c:	2401bb2c 	.word	0x2401bb2c

08018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8018190:	4b08      	ldr	r3, [pc, #32]	@ (80181b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8018192:	781b      	ldrb	r3, [r3, #0]
 8018194:	2b01      	cmp	r3, #1
 8018196:	d10c      	bne.n	80181b2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8018198:	8803      	ldrh	r3, [r0, #0]
 801819a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801819e:	8842      	ldrh	r2, [r0, #2]
 80181a0:	8002      	strh	r2, [r0, #0]
 80181a2:	185a      	adds	r2, r3, r1
 80181a4:	4b04      	ldr	r3, [pc, #16]	@ (80181b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80181a6:	881b      	ldrh	r3, [r3, #0]
 80181a8:	1a9b      	subs	r3, r3, r2
 80181aa:	8043      	strh	r3, [r0, #2]
 80181ac:	88c3      	ldrh	r3, [r0, #6]
 80181ae:	80c1      	strh	r1, [r0, #6]
 80181b0:	8083      	strh	r3, [r0, #4]
 80181b2:	4770      	bx	lr
 80181b4:	2401bb30 	.word	0x2401bb30
 80181b8:	2401bb2c 	.word	0x2401bb2c

080181bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80181bc:	4b07      	ldr	r3, [pc, #28]	@ (80181dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80181be:	b510      	push	{r4, lr}
 80181c0:	781b      	ldrb	r3, [r3, #0]
 80181c2:	2b01      	cmp	r3, #1
 80181c4:	d108      	bne.n	80181d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80181c6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80181ca:	f9b0 4000 	ldrsh.w	r4, [r0]
 80181ce:	8003      	strh	r3, [r0, #0]
 80181d0:	8893      	ldrh	r3, [r2, #4]
 80181d2:	3b01      	subs	r3, #1
 80181d4:	1b1b      	subs	r3, r3, r4
 80181d6:	800b      	strh	r3, [r1, #0]
 80181d8:	bd10      	pop	{r4, pc}
 80181da:	bf00      	nop
 80181dc:	2401bb30 	.word	0x2401bb30

080181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80181e0:	4b0a      	ldr	r3, [pc, #40]	@ (801820c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80181e2:	460a      	mov	r2, r1
 80181e4:	b510      	push	{r4, lr}
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	2b01      	cmp	r3, #1
 80181ea:	d10d      	bne.n	8018208 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80181ec:	8881      	ldrh	r1, [r0, #4]
 80181ee:	8803      	ldrh	r3, [r0, #0]
 80181f0:	440b      	add	r3, r1
 80181f2:	4601      	mov	r1, r0
 80181f4:	3b01      	subs	r3, #1
 80181f6:	f821 3b02 	strh.w	r3, [r1], #2
 80181fa:	f7ff ffdf 	bl	80181bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80181fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018202:	88c2      	ldrh	r2, [r0, #6]
 8018204:	80c3      	strh	r3, [r0, #6]
 8018206:	8082      	strh	r2, [r0, #4]
 8018208:	bd10      	pop	{r4, pc}
 801820a:	bf00      	nop
 801820c:	2401bb30 	.word	0x2401bb30

08018210 <_ZN8touchgfx11Application13requestRedrawEv>:
 8018210:	4b06      	ldr	r3, [pc, #24]	@ (801822c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8018212:	2100      	movs	r1, #0
 8018214:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018218:	4b05      	ldr	r3, [pc, #20]	@ (8018230 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801821a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801821e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018222:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8018226:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801822a:	4770      	bx	lr
 801822c:	2401bb2c 	.word	0x2401bb2c
 8018230:	2401bb2e 	.word	0x2401bb2e

08018234 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018234:	4b03      	ldr	r3, [pc, #12]	@ (8018244 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018236:	6818      	ldr	r0, [r3, #0]
 8018238:	b110      	cbz	r0, 8018240 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801823a:	6803      	ldr	r3, [r0, #0]
 801823c:	699b      	ldr	r3, [r3, #24]
 801823e:	4718      	bx	r3
 8018240:	4770      	bx	lr
 8018242:	bf00      	nop
 8018244:	2401bb74 	.word	0x2401bb74

08018248 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018248:	4770      	bx	lr
	...

0801824c <_ZN8touchgfx11Application4drawEv>:
 801824c:	4b09      	ldr	r3, [pc, #36]	@ (8018274 <_ZN8touchgfx11Application4drawEv+0x28>)
 801824e:	b507      	push	{r0, r1, r2, lr}
 8018250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018254:	2100      	movs	r1, #0
 8018256:	4b08      	ldr	r3, [pc, #32]	@ (8018278 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018258:	9100      	str	r1, [sp, #0]
 801825a:	4669      	mov	r1, sp
 801825c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018260:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018264:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018268:	6803      	ldr	r3, [r0, #0]
 801826a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801826c:	4798      	blx	r3
 801826e:	b003      	add	sp, #12
 8018270:	f85d fb04 	ldr.w	pc, [sp], #4
 8018274:	2401bb2c 	.word	0x2401bb2c
 8018278:	2401bb2e 	.word	0x2401bb2e

0801827c <_ZN8touchgfx11Application10invalidateEv>:
 801827c:	4b09      	ldr	r3, [pc, #36]	@ (80182a4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801827e:	b082      	sub	sp, #8
 8018280:	2100      	movs	r1, #0
 8018282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018286:	4b08      	ldr	r3, [pc, #32]	@ (80182a8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8018288:	f8ad 2004 	strh.w	r2, [sp, #4]
 801828c:	aa02      	add	r2, sp, #8
 801828e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018292:	9100      	str	r1, [sp, #0]
 8018294:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018298:	6803      	ldr	r3, [r0, #0]
 801829a:	e912 0006 	ldmdb	r2, {r1, r2}
 801829e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80182a0:	b002      	add	sp, #8
 80182a2:	4718      	bx	r3
 80182a4:	2401bb2c 	.word	0x2401bb2c
 80182a8:	2401bb2e 	.word	0x2401bb2e

080182ac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80182ac:	4b03      	ldr	r3, [pc, #12]	@ (80182bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80182ae:	6818      	ldr	r0, [r3, #0]
 80182b0:	b110      	cbz	r0, 80182b8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	69db      	ldr	r3, [r3, #28]
 80182b6:	4718      	bx	r3
 80182b8:	4770      	bx	lr
 80182ba:	bf00      	nop
 80182bc:	2401bb74 	.word	0x2401bb74

080182c0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80182c0:	4b03      	ldr	r3, [pc, #12]	@ (80182d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80182c2:	6818      	ldr	r0, [r3, #0]
 80182c4:	b110      	cbz	r0, 80182cc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80182c6:	6803      	ldr	r3, [r0, #0]
 80182c8:	6a1b      	ldr	r3, [r3, #32]
 80182ca:	4718      	bx	r3
 80182cc:	4770      	bx	lr
 80182ce:	bf00      	nop
 80182d0:	2401bb74 	.word	0x2401bb74

080182d4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80182d4:	2300      	movs	r3, #0
 80182d6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80182da:	4770      	bx	lr

080182dc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80182dc:	4b03      	ldr	r3, [pc, #12]	@ (80182ec <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80182de:	6818      	ldr	r0, [r3, #0]
 80182e0:	b110      	cbz	r0, 80182e8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80182e2:	6803      	ldr	r3, [r0, #0]
 80182e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182e6:	4718      	bx	r3
 80182e8:	4770      	bx	lr
 80182ea:	bf00      	nop
 80182ec:	2401bb74 	.word	0x2401bb74

080182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80182f0:	b510      	push	{r4, lr}
 80182f2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80182f6:	888a      	ldrh	r2, [r1, #4]
 80182f8:	f9b0 3000 	ldrsh.w	r3, [r0]
 80182fc:	4422      	add	r2, r4
 80182fe:	b212      	sxth	r2, r2
 8018300:	4293      	cmp	r3, r2
 8018302:	da15      	bge.n	8018330 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018304:	8882      	ldrh	r2, [r0, #4]
 8018306:	4413      	add	r3, r2
 8018308:	b21b      	sxth	r3, r3
 801830a:	429c      	cmp	r4, r3
 801830c:	da10      	bge.n	8018330 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801830e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018312:	88c9      	ldrh	r1, [r1, #6]
 8018314:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018318:	4419      	add	r1, r3
 801831a:	b209      	sxth	r1, r1
 801831c:	428a      	cmp	r2, r1
 801831e:	da07      	bge.n	8018330 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018320:	88c0      	ldrh	r0, [r0, #6]
 8018322:	4410      	add	r0, r2
 8018324:	b200      	sxth	r0, r0
 8018326:	4283      	cmp	r3, r0
 8018328:	bfac      	ite	ge
 801832a:	2000      	movge	r0, #0
 801832c:	2001      	movlt	r0, #1
 801832e:	bd10      	pop	{r4, pc}
 8018330:	2000      	movs	r0, #0
 8018332:	e7fc      	b.n	801832e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018334 <_ZN8touchgfx4Rect10restrictToEss>:
 8018334:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018338:	2b00      	cmp	r3, #0
 801833a:	b510      	push	{r4, lr}
 801833c:	da04      	bge.n	8018348 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801833e:	8884      	ldrh	r4, [r0, #4]
 8018340:	4423      	add	r3, r4
 8018342:	8083      	strh	r3, [r0, #4]
 8018344:	2300      	movs	r3, #0
 8018346:	8003      	strh	r3, [r0, #0]
 8018348:	f9b0 4000 	ldrsh.w	r4, [r0]
 801834c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018350:	1b09      	subs	r1, r1, r4
 8018352:	428b      	cmp	r3, r1
 8018354:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018358:	bfc8      	it	gt
 801835a:	8081      	strhgt	r1, [r0, #4]
 801835c:	2b00      	cmp	r3, #0
 801835e:	da04      	bge.n	801836a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018360:	88c1      	ldrh	r1, [r0, #6]
 8018362:	440b      	add	r3, r1
 8018364:	80c3      	strh	r3, [r0, #6]
 8018366:	2300      	movs	r3, #0
 8018368:	8043      	strh	r3, [r0, #2]
 801836a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801836e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018372:	1a52      	subs	r2, r2, r1
 8018374:	4293      	cmp	r3, r2
 8018376:	bfc8      	it	gt
 8018378:	80c2      	strhgt	r2, [r0, #6]
 801837a:	bd10      	pop	{r4, pc}

0801837c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801837c:	4b10      	ldr	r3, [pc, #64]	@ (80183c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801837e:	b510      	push	{r4, lr}
 8018380:	460c      	mov	r4, r1
 8018382:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018386:	4b0f      	ldr	r3, [pc, #60]	@ (80183c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018388:	4620      	mov	r0, r4
 801838a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801838e:	f7ff ffd1 	bl	8018334 <_ZN8touchgfx4Rect10restrictToEss>
 8018392:	4b0d      	ldr	r3, [pc, #52]	@ (80183c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018394:	6818      	ldr	r0, [r3, #0]
 8018396:	b190      	cbz	r0, 80183be <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	4621      	mov	r1, r4
 801839c:	689b      	ldr	r3, [r3, #8]
 801839e:	4798      	blx	r3
 80183a0:	4b0a      	ldr	r3, [pc, #40]	@ (80183cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80183a2:	6818      	ldr	r0, [r3, #0]
 80183a4:	b118      	cbz	r0, 80183ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80183a6:	6803      	ldr	r3, [r0, #0]
 80183a8:	4621      	mov	r1, r4
 80183aa:	689b      	ldr	r3, [r3, #8]
 80183ac:	4798      	blx	r3
 80183ae:	4b08      	ldr	r3, [pc, #32]	@ (80183d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80183b0:	4621      	mov	r1, r4
 80183b2:	6818      	ldr	r0, [r3, #0]
 80183b4:	6803      	ldr	r3, [r0, #0]
 80183b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183ba:	69db      	ldr	r3, [r3, #28]
 80183bc:	4718      	bx	r3
 80183be:	bd10      	pop	{r4, pc}
 80183c0:	2401bb2e 	.word	0x2401bb2e
 80183c4:	2401bb2c 	.word	0x2401bb2c
 80183c8:	2401bb74 	.word	0x2401bb74
 80183cc:	2401bb70 	.word	0x2401bb70
 80183d0:	2401bb38 	.word	0x2401bb38

080183d4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80183d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183d6:	4606      	mov	r6, r0
 80183d8:	4608      	mov	r0, r1
 80183da:	460f      	mov	r7, r1
 80183dc:	f7fb ffbf 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 80183e0:	b9e8      	cbnz	r0, 801841e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80183e2:	f9b7 5000 	ldrsh.w	r5, [r7]
 80183e6:	f9b6 4000 	ldrsh.w	r4, [r6]
 80183ea:	42a5      	cmp	r5, r4
 80183ec:	db17      	blt.n	801841e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80183ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80183f2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	db11      	blt.n	801841e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80183fa:	88b9      	ldrh	r1, [r7, #4]
 80183fc:	440d      	add	r5, r1
 80183fe:	88b1      	ldrh	r1, [r6, #4]
 8018400:	440c      	add	r4, r1
 8018402:	b22d      	sxth	r5, r5
 8018404:	b224      	sxth	r4, r4
 8018406:	42a5      	cmp	r5, r4
 8018408:	dc09      	bgt.n	801841e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801840a:	88f8      	ldrh	r0, [r7, #6]
 801840c:	4410      	add	r0, r2
 801840e:	88f2      	ldrh	r2, [r6, #6]
 8018410:	4413      	add	r3, r2
 8018412:	b200      	sxth	r0, r0
 8018414:	b21b      	sxth	r3, r3
 8018416:	4298      	cmp	r0, r3
 8018418:	bfcc      	ite	gt
 801841a:	2000      	movgt	r0, #0
 801841c:	2001      	movle	r0, #1
 801841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8018420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018422:	4604      	mov	r4, r0
 8018424:	4608      	mov	r0, r1
 8018426:	460d      	mov	r5, r1
 8018428:	f7fb ff99 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 801842c:	b978      	cbnz	r0, 801844e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801842e:	4620      	mov	r0, r4
 8018430:	f7fb ff95 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018434:	f9b5 6000 	ldrsh.w	r6, [r5]
 8018438:	b150      	cbz	r0, 8018450 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801843a:	8026      	strh	r6, [r4, #0]
 801843c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018440:	8063      	strh	r3, [r4, #2]
 8018442:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8018446:	80a3      	strh	r3, [r4, #4]
 8018448:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801844c:	80e3      	strh	r3, [r4, #6]
 801844e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018450:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018454:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018458:	42b1      	cmp	r1, r6
 801845a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801845e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8018462:	460f      	mov	r7, r1
 8018464:	88ed      	ldrh	r5, [r5, #6]
 8018466:	bfa8      	it	ge
 8018468:	4637      	movge	r7, r6
 801846a:	4293      	cmp	r3, r2
 801846c:	4618      	mov	r0, r3
 801846e:	4466      	add	r6, ip
 8018470:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018474:	bfa8      	it	ge
 8018476:	4610      	movge	r0, r2
 8018478:	442a      	add	r2, r5
 801847a:	88e5      	ldrh	r5, [r4, #6]
 801847c:	4461      	add	r1, ip
 801847e:	b236      	sxth	r6, r6
 8018480:	8027      	strh	r7, [r4, #0]
 8018482:	442b      	add	r3, r5
 8018484:	b209      	sxth	r1, r1
 8018486:	b212      	sxth	r2, r2
 8018488:	8060      	strh	r0, [r4, #2]
 801848a:	b21b      	sxth	r3, r3
 801848c:	428e      	cmp	r6, r1
 801848e:	bfac      	ite	ge
 8018490:	ebc7 0106 	rsbge	r1, r7, r6
 8018494:	ebc7 0101 	rsblt	r1, r7, r1
 8018498:	429a      	cmp	r2, r3
 801849a:	bfac      	ite	ge
 801849c:	ebc0 0202 	rsbge	r2, r0, r2
 80184a0:	ebc0 0203 	rsblt	r2, r0, r3
 80184a4:	80a1      	strh	r1, [r4, #4]
 80184a6:	80e2      	strh	r2, [r4, #6]
 80184a8:	e7d1      	b.n	801844e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080184ac <_ZN8touchgfx11Application11getInstanceEv>:
 80184ac:	4b01      	ldr	r3, [pc, #4]	@ (80184b4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80184ae:	6818      	ldr	r0, [r3, #0]
 80184b0:	4770      	bx	lr
 80184b2:	bf00      	nop
 80184b4:	2401bb84 	.word	0x2401bb84

080184b8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80184b8:	2300      	movs	r3, #0
 80184ba:	b510      	push	{r4, lr}
 80184bc:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80184c0:	4604      	mov	r4, r0
 80184c2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80184c6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80184ca:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80184ce:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d90e      	bls.n	80184f4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80184d6:	18e2      	adds	r2, r4, r3
 80184d8:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80184dc:	b122      	cbz	r2, 80184e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80184de:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80184e2:	6803      	ldr	r3, [r0, #0]
 80184e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184e6:	4798      	blx	r3
 80184e8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80184ec:	3301      	adds	r3, #1
 80184ee:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80184f2:	e7ea      	b.n	80184ca <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80184f4:	bd10      	pop	{r4, pc}

080184f6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80184f6:	b530      	push	{r4, r5, lr}
 80184f8:	2200      	movs	r2, #0
 80184fa:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80184fe:	b293      	uxth	r3, r2
 8018500:	429d      	cmp	r5, r3
 8018502:	d90e      	bls.n	8018522 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8018504:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8018508:	428b      	cmp	r3, r1
 801850a:	d10b      	bne.n	8018524 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801850c:	1884      	adds	r4, r0, r2
 801850e:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8018512:	b13b      	cbz	r3, 8018524 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8018514:	3b01      	subs	r3, #1
 8018516:	b2db      	uxtb	r3, r3
 8018518:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 801851c:	b90b      	cbnz	r3, 8018522 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801851e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018522:	bd30      	pop	{r4, r5, pc}
 8018524:	3201      	adds	r2, #1
 8018526:	e7ea      	b.n	80184fe <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08018528 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018528:	2300      	movs	r3, #0
 801852a:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801852e:	30a4      	adds	r0, #164	@ 0xa4
 8018530:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018534:	f802 3b01 	strb.w	r3, [r2], #1
 8018538:	4282      	cmp	r2, r0
 801853a:	d1fb      	bne.n	8018534 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801853c:	4770      	bx	lr
	...

08018540 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018540:	b570      	push	{r4, r5, r6, lr}
 8018542:	4c0b      	ldr	r4, [pc, #44]	@ (8018570 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018544:	4605      	mov	r5, r0
 8018546:	460e      	mov	r6, r1
 8018548:	6820      	ldr	r0, [r4, #0]
 801854a:	b110      	cbz	r0, 8018552 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801854c:	6803      	ldr	r3, [r0, #0]
 801854e:	695b      	ldr	r3, [r3, #20]
 8018550:	4798      	blx	r3
 8018552:	1d28      	adds	r0, r5, #4
 8018554:	f7ff ffe8 	bl	8018528 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018558:	6026      	str	r6, [r4, #0]
 801855a:	6833      	ldr	r3, [r6, #0]
 801855c:	4630      	mov	r0, r6
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	4798      	blx	r3
 8018562:	682b      	ldr	r3, [r5, #0]
 8018564:	4628      	mov	r0, r5
 8018566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801856c:	4718      	bx	r3
 801856e:	bf00      	nop
 8018570:	2401bb74 	.word	0x2401bb74

08018574 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018574:	2300      	movs	r3, #0
 8018576:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801857a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801857e:	461a      	mov	r2, r3
 8018580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018582:	461c      	mov	r4, r3
 8018584:	461d      	mov	r5, r3
 8018586:	459c      	cmp	ip, r3
 8018588:	dd1a      	ble.n	80185c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801858a:	18c6      	adds	r6, r0, r3
 801858c:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8018590:	b16e      	cbz	r6, 80185ae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018592:	429a      	cmp	r2, r3
 8018594:	d008      	beq.n	80185a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018596:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801859a:	fa1f fe82 	uxth.w	lr, r2
 801859e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80185a2:	1887      	adds	r7, r0, r2
 80185a4:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80185a8:	3201      	adds	r2, #1
 80185aa:	3301      	adds	r3, #1
 80185ac:	e7eb      	b.n	8018586 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80185ae:	4299      	cmp	r1, r3
 80185b0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80185b4:	bfa8      	it	ge
 80185b6:	3501      	addge	r5, #1
 80185b8:	429e      	cmp	r6, r3
 80185ba:	bfc8      	it	gt
 80185bc:	3401      	addgt	r4, #1
 80185be:	e7f4      	b.n	80185aa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80185c0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80185c4:	1b49      	subs	r1, r1, r5
 80185c6:	1b1b      	subs	r3, r3, r4
 80185c8:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80185cc:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80185d0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80185d4:	4293      	cmp	r3, r2
 80185d6:	dd03      	ble.n	80185e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80185d8:	3b01      	subs	r3, #1
 80185da:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80185de:	e7f7      	b.n	80185d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80185e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080185e4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80185e4:	b570      	push	{r4, r5, r6, lr}
 80185e6:	4d16      	ldr	r5, [pc, #88]	@ (8018640 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80185e8:	4604      	mov	r4, r0
 80185ea:	6828      	ldr	r0, [r5, #0]
 80185ec:	b140      	cbz	r0, 8018600 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80185ee:	7a03      	ldrb	r3, [r0, #8]
 80185f0:	b933      	cbnz	r3, 8018600 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80185f2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80185f6:	6803      	ldr	r3, [r0, #0]
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185fe:	4718      	bx	r3
 8018600:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8018604:	4e0f      	ldr	r6, [pc, #60]	@ (8018644 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018606:	b973      	cbnz	r3, 8018626 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018608:	b168      	cbz	r0, 8018626 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801860a:	7a03      	ldrb	r3, [r0, #8]
 801860c:	b15b      	cbz	r3, 8018626 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801860e:	6830      	ldr	r0, [r6, #0]
 8018610:	b110      	cbz	r0, 8018618 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018612:	6803      	ldr	r3, [r0, #0]
 8018614:	691b      	ldr	r3, [r3, #16]
 8018616:	4798      	blx	r3
 8018618:	6828      	ldr	r0, [r5, #0]
 801861a:	6803      	ldr	r3, [r0, #0]
 801861c:	68db      	ldr	r3, [r3, #12]
 801861e:	4798      	blx	r3
 8018620:	2301      	movs	r3, #1
 8018622:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8018626:	3404      	adds	r4, #4
 8018628:	4620      	mov	r0, r4
 801862a:	f7ff ff45 	bl	80184b8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801862e:	4620      	mov	r0, r4
 8018630:	f7ff ffa0 	bl	8018574 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018634:	6830      	ldr	r0, [r6, #0]
 8018636:	b110      	cbz	r0, 801863e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018638:	6803      	ldr	r3, [r0, #0]
 801863a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801863c:	e7dd      	b.n	80185fa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801863e:	bd70      	pop	{r4, r5, r6, pc}
 8018640:	2401bb78 	.word	0x2401bb78
 8018644:	2401bb74 	.word	0x2401bb74

08018648 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	2300      	movs	r3, #0
 801864c:	4604      	mov	r4, r0
 801864e:	460d      	mov	r5, r1
 8018650:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8018654:	4618      	mov	r0, r3
 8018656:	b29a      	uxth	r2, r3
 8018658:	4291      	cmp	r1, r2
 801865a:	d912      	bls.n	8018682 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801865c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8018660:	18e6      	adds	r6, r4, r3
 8018662:	42af      	cmp	r7, r5
 8018664:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8018668:	d105      	bne.n	8018676 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801866a:	2aff      	cmp	r2, #255	@ 0xff
 801866c:	d002      	beq.n	8018674 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801866e:	3201      	adds	r2, #1
 8018670:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8018674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018676:	2a00      	cmp	r2, #0
 8018678:	f103 0301 	add.w	r3, r3, #1
 801867c:	bf08      	it	eq
 801867e:	2001      	moveq	r0, #1
 8018680:	e7e9      	b.n	8018656 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8018682:	b120      	cbz	r0, 801868e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8018684:	2920      	cmp	r1, #32
 8018686:	d102      	bne.n	801868e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8018688:	4620      	mov	r0, r4
 801868a:	f7ff ff73 	bl	8018574 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801868e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8018692:	2b1f      	cmp	r3, #31
 8018694:	d8ee      	bhi.n	8018674 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8018696:	18e2      	adds	r2, r4, r3
 8018698:	2101      	movs	r1, #1
 801869a:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 801869e:	185a      	adds	r2, r3, r1
 80186a0:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 80186a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80186a8:	e7e4      	b.n	8018674 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

080186aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80186aa:	4603      	mov	r3, r0
 80186ac:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80186b0:	2200      	movs	r2, #0
 80186b2:	801a      	strh	r2, [r3, #0]
 80186b4:	3308      	adds	r3, #8
 80186b6:	f823 2c06 	strh.w	r2, [r3, #-6]
 80186ba:	f823 2c04 	strh.w	r2, [r3, #-4]
 80186be:	f823 2c02 	strh.w	r2, [r3, #-2]
 80186c2:	428b      	cmp	r3, r1
 80186c4:	d1f5      	bne.n	80186b2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80186c6:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80186ca:	4770      	bx	lr

080186cc <_ZN8touchgfx11ApplicationC1Ev>:
 80186cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ce:	4b1d      	ldr	r3, [pc, #116]	@ (8018744 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80186d0:	4606      	mov	r6, r0
 80186d2:	4604      	mov	r4, r0
 80186d4:	2500      	movs	r5, #0
 80186d6:	f846 3b04 	str.w	r3, [r6], #4
 80186da:	22a8      	movs	r2, #168	@ 0xa8
 80186dc:	2100      	movs	r1, #0
 80186de:	4630      	mov	r0, r6
 80186e0:	f00c fe41 	bl	8025366 <memset>
 80186e4:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80186e8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80186ec:	4f16      	ldr	r7, [pc, #88]	@ (8018748 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80186ee:	f7ff ffdc 	bl	80186aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80186f2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80186f6:	f7ff ffd8 	bl	80186aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80186fa:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80186fe:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8018702:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8018706:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801870a:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801870e:	490f      	ldr	r1, [pc, #60]	@ (801874c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018710:	480f      	ldr	r0, [pc, #60]	@ (8018750 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018712:	f00c fac9 	bl	8024ca8 <CRC_Lock>
 8018716:	4b0f      	ldr	r3, [pc, #60]	@ (8018754 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018718:	b158      	cbz	r0, 8018732 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801871a:	801d      	strh	r5, [r3, #0]
 801871c:	2300      	movs	r3, #0
 801871e:	4a0e      	ldr	r2, [pc, #56]	@ (8018758 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018720:	4630      	mov	r0, r6
 8018722:	6013      	str	r3, [r2, #0]
 8018724:	4a0d      	ldr	r2, [pc, #52]	@ (801875c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018726:	603b      	str	r3, [r7, #0]
 8018728:	6013      	str	r3, [r2, #0]
 801872a:	f7ff fefd 	bl	8018528 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801872e:	4620      	mov	r0, r4
 8018730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018736:	2002      	movs	r0, #2
 8018738:	801a      	strh	r2, [r3, #0]
 801873a:	6038      	str	r0, [r7, #0]
 801873c:	f001 fb1e 	bl	8019d7c <_ZN8touchgfx6Screen4drawEv>
 8018740:	e7ec      	b.n	801871c <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018742:	bf00      	nop
 8018744:	080284b4 	.word	0x080284b4
 8018748:	2401bb74 	.word	0x2401bb74
 801874c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018750:	f407a5c2 	.word	0xf407a5c2
 8018754:	24000050 	.word	0x24000050
 8018758:	2401bb84 	.word	0x2401bb84
 801875c:	2401bb78 	.word	0x2401bb78

08018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018760:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8018764:	3b01      	subs	r3, #1
 8018766:	b29b      	uxth	r3, r3
 8018768:	428b      	cmp	r3, r1
 801876a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801876e:	b510      	push	{r4, lr}
 8018770:	d908      	bls.n	8018784 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018772:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018776:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801877a:	681a      	ldr	r2, [r3, #0]
 801877c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018780:	685a      	ldr	r2, [r3, #4]
 8018782:	6062      	str	r2, [r4, #4]
 8018784:	bd10      	pop	{r4, pc}
	...

08018788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	b08f      	sub	sp, #60	@ 0x3c
 801878e:	4b8f      	ldr	r3, [pc, #572]	@ (80189cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018790:	4683      	mov	fp, r0
 8018792:	ac0a      	add	r4, sp, #40	@ 0x28
 8018794:	e884 0006 	stmia.w	r4, {r1, r2}
 8018798:	f9b3 2000 	ldrsh.w	r2, [r3]
 801879c:	4620      	mov	r0, r4
 801879e:	4b8c      	ldr	r3, [pc, #560]	@ (80189d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80187a0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80187a4:	f7ff fdc6 	bl	8018334 <_ZN8touchgfx4Rect10restrictToEss>
 80187a8:	4620      	mov	r0, r4
 80187aa:	f7fb fdd8 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 80187ae:	2800      	cmp	r0, #0
 80187b0:	d16a      	bne.n	8018888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80187b2:	9403      	str	r4, [sp, #12]
 80187b4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80187b8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80187bc:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80187c0:	9301      	str	r3, [sp, #4]
 80187c2:	35a4      	adds	r5, #164	@ 0xa4
 80187c4:	b15c      	cbz	r4, 80187de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80187c6:	4629      	mov	r1, r5
 80187c8:	9803      	ldr	r0, [sp, #12]
 80187ca:	f7ff fe03 	bl	80183d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80187ce:	3c01      	subs	r4, #1
 80187d0:	b118      	cbz	r0, 80187da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80187d2:	b2a1      	uxth	r1, r4
 80187d4:	9801      	ldr	r0, [sp, #4]
 80187d6:	f7ff ffc3 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80187da:	3d08      	subs	r5, #8
 80187dc:	e7f2      	b.n	80187c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80187de:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80187e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80187e6:	f8cd a010 	str.w	sl, [sp, #16]
 80187ea:	9302      	str	r3, [sp, #8]
 80187ec:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80187f0:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80187f4:	9306      	str	r3, [sp, #24]
 80187f6:	445c      	add	r4, fp
 80187f8:	2500      	movs	r5, #0
 80187fa:	4626      	mov	r6, r4
 80187fc:	f8cd a014 	str.w	sl, [sp, #20]
 8018800:	462f      	mov	r7, r5
 8018802:	9b05      	ldr	r3, [sp, #20]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d073      	beq.n	80188f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018808:	9903      	ldr	r1, [sp, #12]
 801880a:	4630      	mov	r0, r6
 801880c:	f7ff fd70 	bl	80182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018810:	b350      	cbz	r0, 8018868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018812:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8018816:	f9b6 c000 	ldrsh.w	ip, [r6]
 801881a:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801881e:	45e6      	cmp	lr, ip
 8018820:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018824:	db33      	blt.n	801888e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018826:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801882a:	88b3      	ldrh	r3, [r6, #4]
 801882c:	4472      	add	r2, lr
 801882e:	4463      	add	r3, ip
 8018830:	b212      	sxth	r2, r2
 8018832:	b21b      	sxth	r3, r3
 8018834:	429a      	cmp	r2, r3
 8018836:	dc2a      	bgt.n	801888e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018838:	fa1f f289 	uxth.w	r2, r9
 801883c:	88f3      	ldrh	r3, [r6, #6]
 801883e:	45c8      	cmp	r8, r9
 8018840:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8018844:	4413      	add	r3, r2
 8018846:	fa1f fc88 	uxth.w	ip, r8
 801884a:	b29b      	uxth	r3, r3
 801884c:	fa0f fe83 	sxth.w	lr, r3
 8018850:	db0f      	blt.n	8018872 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018852:	eba3 030c 	sub.w	r3, r3, ip
 8018856:	1ac9      	subs	r1, r1, r3
 8018858:	b209      	sxth	r1, r1
 801885a:	2900      	cmp	r1, #0
 801885c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018860:	dd12      	ble.n	8018888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018862:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8018866:	4605      	mov	r5, r0
 8018868:	9b05      	ldr	r3, [sp, #20]
 801886a:	3e08      	subs	r6, #8
 801886c:	3b01      	subs	r3, #1
 801886e:	9305      	str	r3, [sp, #20]
 8018870:	e7c7      	b.n	8018802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018872:	4461      	add	r1, ip
 8018874:	b209      	sxth	r1, r1
 8018876:	4571      	cmp	r1, lr
 8018878:	dc38      	bgt.n	80188ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801887a:	eba2 020c 	sub.w	r2, r2, ip
 801887e:	b212      	sxth	r2, r2
 8018880:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8018884:	2a00      	cmp	r2, #0
 8018886:	dcee      	bgt.n	8018866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018888:	b00f      	add	sp, #60	@ 0x3c
 801888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888e:	45c8      	cmp	r8, r9
 8018890:	db2c      	blt.n	80188ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018892:	88f3      	ldrh	r3, [r6, #6]
 8018894:	4499      	add	r9, r3
 8018896:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801889a:	4498      	add	r8, r3
 801889c:	fa0f f989 	sxth.w	r9, r9
 80188a0:	fa0f f888 	sxth.w	r8, r8
 80188a4:	45c1      	cmp	r9, r8
 80188a6:	db21      	blt.n	80188ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80188a8:	fa1f f28c 	uxth.w	r2, ip
 80188ac:	88b3      	ldrh	r3, [r6, #4]
 80188ae:	45e6      	cmp	lr, ip
 80188b0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80188b4:	4413      	add	r3, r2
 80188b6:	fa1f f88e 	uxth.w	r8, lr
 80188ba:	b29b      	uxth	r3, r3
 80188bc:	fa0f f983 	sxth.w	r9, r3
 80188c0:	db0a      	blt.n	80188d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80188c2:	eba3 0308 	sub.w	r3, r3, r8
 80188c6:	1ac9      	subs	r1, r1, r3
 80188c8:	b209      	sxth	r1, r1
 80188ca:	2900      	cmp	r1, #0
 80188cc:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80188d0:	ddda      	ble.n	8018888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80188d2:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80188d6:	e7c6      	b.n	8018866 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80188d8:	4441      	add	r1, r8
 80188da:	b209      	sxth	r1, r1
 80188dc:	4549      	cmp	r1, r9
 80188de:	dc05      	bgt.n	80188ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80188e0:	eba2 0208 	sub.w	r2, r2, r8
 80188e4:	b212      	sxth	r2, r2
 80188e6:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80188ea:	e7cb      	b.n	8018884 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80188ec:	4607      	mov	r7, r0
 80188ee:	e7bb      	b.n	8018868 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80188f0:	2d00      	cmp	r5, #0
 80188f2:	d181      	bne.n	80187f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80188f4:	2f00      	cmp	r7, #0
 80188f6:	f000 81dd 	beq.w	8018cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80188fa:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80188fe:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8018902:	b2b3      	uxth	r3, r6
 8018904:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8018908:	9305      	str	r3, [sp, #20]
 801890a:	9a05      	ldr	r2, [sp, #20]
 801890c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018910:	4413      	add	r3, r2
 8018912:	b2ba      	uxth	r2, r7
 8018914:	4492      	add	sl, r2
 8018916:	b29b      	uxth	r3, r3
 8018918:	fa1f fa8a 	uxth.w	sl, sl
 801891c:	fa0f f883 	sxth.w	r8, r3
 8018920:	fa0f f98a 	sxth.w	r9, sl
 8018924:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018928:	9b04      	ldr	r3, [sp, #16]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d052      	beq.n	80189d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801892e:	9903      	ldr	r1, [sp, #12]
 8018930:	4620      	mov	r0, r4
 8018932:	f7ff fcdd 	bl	80182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018936:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801893a:	b1c0      	cbz	r0, 801896e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801893c:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018940:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018944:	4576      	cmp	r6, lr
 8018946:	dc22      	bgt.n	801898e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018948:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801894c:	44f4      	add	ip, lr
 801894e:	fa0f fc8c 	sxth.w	ip, ip
 8018952:	45e0      	cmp	r8, ip
 8018954:	db1b      	blt.n	801898e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018956:	428f      	cmp	r7, r1
 8018958:	fa1f fc81 	uxth.w	ip, r1
 801895c:	88e1      	ldrh	r1, [r4, #6]
 801895e:	dc0d      	bgt.n	801897c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8018960:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018964:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018968:	eba1 010c 	sub.w	r1, r1, ip
 801896c:	80e1      	strh	r1, [r4, #6]
 801896e:	4628      	mov	r0, r5
 8018970:	9904      	ldr	r1, [sp, #16]
 8018972:	3c08      	subs	r4, #8
 8018974:	4605      	mov	r5, r0
 8018976:	3901      	subs	r1, #1
 8018978:	9104      	str	r1, [sp, #16]
 801897a:	e7d3      	b.n	8018924 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801897c:	4461      	add	r1, ip
 801897e:	b209      	sxth	r1, r1
 8018980:	4549      	cmp	r1, r9
 8018982:	dcf5      	bgt.n	8018970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018984:	eba2 0c0c 	sub.w	ip, r2, ip
 8018988:	f8a4 c006 	strh.w	ip, [r4, #6]
 801898c:	e7ef      	b.n	801896e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801898e:	428f      	cmp	r7, r1
 8018990:	dcee      	bgt.n	8018970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8018992:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018996:	4461      	add	r1, ip
 8018998:	b209      	sxth	r1, r1
 801899a:	4589      	cmp	r9, r1
 801899c:	dbe8      	blt.n	8018970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801899e:	4576      	cmp	r6, lr
 80189a0:	fa1f fc8e 	uxth.w	ip, lr
 80189a4:	88a1      	ldrh	r1, [r4, #4]
 80189a6:	dc07      	bgt.n	80189b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80189a8:	eba3 0c0c 	sub.w	ip, r3, ip
 80189ac:	f8a4 8000 	strh.w	r8, [r4]
 80189b0:	eba1 010c 	sub.w	r1, r1, ip
 80189b4:	80a1      	strh	r1, [r4, #4]
 80189b6:	e7da      	b.n	801896e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80189b8:	4461      	add	r1, ip
 80189ba:	b209      	sxth	r1, r1
 80189bc:	4588      	cmp	r8, r1
 80189be:	dbd7      	blt.n	8018970 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80189c0:	9905      	ldr	r1, [sp, #20]
 80189c2:	eba1 0c0c 	sub.w	ip, r1, ip
 80189c6:	f8a4 c004 	strh.w	ip, [r4, #4]
 80189ca:	e7d0      	b.n	801896e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80189cc:	2401bb2e 	.word	0x2401bb2e
 80189d0:	2401bb2c 	.word	0x2401bb2c
 80189d4:	2d00      	cmp	r5, #0
 80189d6:	f000 816d 	beq.w	8018cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80189da:	9b06      	ldr	r3, [sp, #24]
 80189dc:	445b      	add	r3, fp
 80189de:	461c      	mov	r4, r3
 80189e0:	9b02      	ldr	r3, [sp, #8]
 80189e2:	3301      	adds	r3, #1
 80189e4:	f000 8166 	beq.w	8018cb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80189e8:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80189ec:	9803      	ldr	r0, [sp, #12]
 80189ee:	4629      	mov	r1, r5
 80189f0:	f7ff fcf0 	bl	80183d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80189f4:	b120      	cbz	r0, 8018a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80189f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80189fa:	9801      	ldr	r0, [sp, #4]
 80189fc:	f7ff feb0 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018a00:	9903      	ldr	r1, [sp, #12]
 8018a02:	4628      	mov	r0, r5
 8018a04:	f7ff fc74 	bl	80182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018a08:	2800      	cmp	r0, #0
 8018a0a:	f000 809c 	beq.w	8018b46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018a0e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8018a12:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018a16:	fa1f f189 	uxth.w	r1, r9
 8018a1a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8018a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a20:	eb01 0c03 	add.w	ip, r1, r3
 8018a24:	b283      	uxth	r3, r0
 8018a26:	4548      	cmp	r0, r9
 8018a28:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8018a2c:	fa1f fa8c 	uxth.w	sl, ip
 8018a30:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8018a34:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8018a38:	eb03 050c 	add.w	r5, r3, ip
 8018a3c:	b2ad      	uxth	r5, r5
 8018a3e:	9505      	str	r5, [sp, #20]
 8018a40:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8018a44:	9504      	str	r5, [sp, #16]
 8018a46:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8018a4a:	f340 8099 	ble.w	8018b80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8018a4e:	1a5b      	subs	r3, r3, r1
 8018a50:	4596      	cmp	lr, r2
 8018a52:	fa0f f08a 	sxth.w	r0, sl
 8018a56:	b29b      	uxth	r3, r3
 8018a58:	b21e      	sxth	r6, r3
 8018a5a:	dd2e      	ble.n	8018aba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8018a5c:	9f02      	ldr	r7, [sp, #8]
 8018a5e:	fa1f fe8e 	uxth.w	lr, lr
 8018a62:	b292      	uxth	r2, r2
 8018a64:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8018a68:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8018a6c:	9f04      	ldr	r7, [sp, #16]
 8018a6e:	ebae 0102 	sub.w	r1, lr, r2
 8018a72:	44a6      	add	lr, r4
 8018a74:	1a3f      	subs	r7, r7, r0
 8018a76:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8018a7a:	b289      	uxth	r1, r1
 8018a7c:	4402      	add	r2, r0
 8018a7e:	fa0f fe8e 	sxth.w	lr, lr
 8018a82:	b20d      	sxth	r5, r1
 8018a84:	b212      	sxth	r2, r2
 8018a86:	436f      	muls	r7, r5
 8018a88:	ebae 0202 	sub.w	r2, lr, r2
 8018a8c:	4372      	muls	r2, r6
 8018a8e:	4297      	cmp	r7, r2
 8018a90:	db09      	blt.n	8018aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8018a92:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8018a96:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8018a9a:	449c      	add	ip, r3
 8018a9c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8018aa0:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018aa4:	e686      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018aa6:	4421      	add	r1, r4
 8018aa8:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8018aac:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8018ab0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018ab4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018ab8:	e67c      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018aba:	9f04      	ldr	r7, [sp, #16]
 8018abc:	42b8      	cmp	r0, r7
 8018abe:	da27      	bge.n	8018b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8018ac0:	9902      	ldr	r1, [sp, #8]
 8018ac2:	1a3f      	subs	r7, r7, r0
 8018ac4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8018ac8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8018acc:	eb05 010e 	add.w	r1, r5, lr
 8018ad0:	fa1f f881 	uxth.w	r8, r1
 8018ad4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8018ad8:	4411      	add	r1, r2
 8018ada:	fa0f f988 	sxth.w	r9, r8
 8018ade:	eba2 020e 	sub.w	r2, r2, lr
 8018ae2:	eba1 0108 	sub.w	r1, r1, r8
 8018ae6:	4372      	muls	r2, r6
 8018ae8:	b289      	uxth	r1, r1
 8018aea:	fa0f f881 	sxth.w	r8, r1
 8018aee:	fb08 f707 	mul.w	r7, r8, r7
 8018af2:	42ba      	cmp	r2, r7
 8018af4:	dc06      	bgt.n	8018b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8018af6:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8018afa:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8018afe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8018b02:	e7ca      	b.n	8018a9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8018b04:	4429      	add	r1, r5
 8018b06:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8018b0a:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018b0e:	e651      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018b10:	9805      	ldr	r0, [sp, #20]
 8018b12:	2d06      	cmp	r5, #6
 8018b14:	ebaa 0000 	sub.w	r0, sl, r0
 8018b18:	b280      	uxth	r0, r0
 8018b1a:	fa0f fe80 	sxth.w	lr, r0
 8018b1e:	d817      	bhi.n	8018b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8018b20:	9b04      	ldr	r3, [sp, #16]
 8018b22:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8018b26:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8018b2a:	1c6b      	adds	r3, r5, #1
 8018b2c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8018b30:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8018b34:	9b01      	ldr	r3, [sp, #4]
 8018b36:	9801      	ldr	r0, [sp, #4]
 8018b38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018b3c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018b40:	805a      	strh	r2, [r3, #2]
 8018b42:	809e      	strh	r6, [r3, #4]
 8018b44:	80d9      	strh	r1, [r3, #6]
 8018b46:	9b02      	ldr	r3, [sp, #8]
 8018b48:	3c08      	subs	r4, #8
 8018b4a:	3b01      	subs	r3, #1
 8018b4c:	9302      	str	r3, [sp, #8]
 8018b4e:	e747      	b.n	80189e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8018b50:	9a02      	ldr	r2, [sp, #8]
 8018b52:	45b6      	cmp	lr, r6
 8018b54:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018b58:	db0d      	blt.n	8018b76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8018b5a:	449c      	add	ip, r3
 8018b5c:	445a      	add	r2, fp
 8018b5e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8018b62:	fa1f fc8c 	uxth.w	ip, ip
 8018b66:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8018b6a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8018b6e:	448c      	add	ip, r1
 8018b70:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8018b74:	e61e      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018b76:	445a      	add	r2, fp
 8018b78:	4484      	add	ip, r0
 8018b7a:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8018b7e:	e78f      	b.n	8018aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018b80:	fa1f f18e 	uxth.w	r1, lr
 8018b84:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8018b88:	b293      	uxth	r3, r2
 8018b8a:	4596      	cmp	lr, r2
 8018b8c:	eb01 0806 	add.w	r8, r1, r6
 8018b90:	9306      	str	r3, [sp, #24]
 8018b92:	fa1f f888 	uxth.w	r8, r8
 8018b96:	9f06      	ldr	r7, [sp, #24]
 8018b98:	fa0f f388 	sxth.w	r3, r8
 8018b9c:	9307      	str	r3, [sp, #28]
 8018b9e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8018ba2:	443b      	add	r3, r7
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	9308      	str	r3, [sp, #32]
 8018ba8:	da24      	bge.n	8018bf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8018baa:	9905      	ldr	r1, [sp, #20]
 8018bac:	eba3 0308 	sub.w	r3, r3, r8
 8018bb0:	eba2 020e 	sub.w	r2, r2, lr
 8018bb4:	eba9 0000 	sub.w	r0, r9, r0
 8018bb8:	ebaa 0401 	sub.w	r4, sl, r1
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	b2a4      	uxth	r4, r4
 8018bc0:	b219      	sxth	r1, r3
 8018bc2:	b225      	sxth	r5, r4
 8018bc4:	4348      	muls	r0, r1
 8018bc6:	436a      	muls	r2, r5
 8018bc8:	4282      	cmp	r2, r0
 8018bca:	9a02      	ldr	r2, [sp, #8]
 8018bcc:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018bd0:	445a      	add	r2, fp
 8018bd2:	dc06      	bgt.n	8018be2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8018bd4:	9b07      	ldr	r3, [sp, #28]
 8018bd6:	44a4      	add	ip, r4
 8018bd8:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8018bdc:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8018be0:	e75e      	b.n	8018aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018be2:	9904      	ldr	r1, [sp, #16]
 8018be4:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8018be8:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8018bec:	4433      	add	r3, r6
 8018bee:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8018bf2:	e5df      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018bf4:	9f06      	ldr	r7, [sp, #24]
 8018bf6:	9b04      	ldr	r3, [sp, #16]
 8018bf8:	1bc9      	subs	r1, r1, r7
 8018bfa:	fa0f f78a 	sxth.w	r7, sl
 8018bfe:	b289      	uxth	r1, r1
 8018c00:	429f      	cmp	r7, r3
 8018c02:	fa0f fe81 	sxth.w	lr, r1
 8018c06:	dd23      	ble.n	8018c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8018c08:	9a05      	ldr	r2, [sp, #20]
 8018c0a:	eba9 0000 	sub.w	r0, r9, r0
 8018c0e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8018c12:	ebaa 0202 	sub.w	r2, sl, r2
 8018c16:	9d07      	ldr	r5, [sp, #28]
 8018c18:	fb0e f000 	mul.w	r0, lr, r0
 8018c1c:	b292      	uxth	r2, r2
 8018c1e:	eba5 0a03 	sub.w	sl, r5, r3
 8018c22:	9b02      	ldr	r3, [sp, #8]
 8018c24:	b214      	sxth	r4, r2
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	fb04 fa0a 	mul.w	sl, r4, sl
 8018c2c:	445b      	add	r3, fp
 8018c2e:	4550      	cmp	r0, sl
 8018c30:	db03      	blt.n	8018c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8018c32:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8018c36:	4494      	add	ip, r2
 8018c38:	e732      	b.n	8018aa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8018c3a:	9a04      	ldr	r2, [sp, #16]
 8018c3c:	4431      	add	r1, r6
 8018c3e:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8018c42:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8018c46:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8018c4a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8018c4e:	e75c      	b.n	8018b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8018c50:	9b08      	ldr	r3, [sp, #32]
 8018c52:	2d06      	cmp	r5, #6
 8018c54:	eba3 0308 	sub.w	r3, r3, r8
 8018c58:	b29b      	uxth	r3, r3
 8018c5a:	b218      	sxth	r0, r3
 8018c5c:	d813      	bhi.n	8018c86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8018c5e:	9b07      	ldr	r3, [sp, #28]
 8018c60:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8018c64:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8018c68:	1c6b      	adds	r3, r5, #1
 8018c6a:	9901      	ldr	r1, [sp, #4]
 8018c6c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8018c70:	9b01      	ldr	r3, [sp, #4]
 8018c72:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8018c76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018c7a:	805a      	strh	r2, [r3, #2]
 8018c7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c7e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8018c82:	809a      	strh	r2, [r3, #4]
 8018c84:	e75f      	b.n	8018b46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018c86:	9c02      	ldr	r4, [sp, #8]
 8018c88:	4570      	cmp	r0, lr
 8018c8a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8018c8e:	db0d      	blt.n	8018cac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8018c90:	4431      	add	r1, r6
 8018c92:	9b06      	ldr	r3, [sp, #24]
 8018c94:	445c      	add	r4, fp
 8018c96:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8018c9a:	b289      	uxth	r1, r1
 8018c9c:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8018ca0:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8018ca4:	4419      	add	r1, r3
 8018ca6:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8018caa:	e583      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018cac:	445c      	add	r4, fp
 8018cae:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8018cb2:	e79b      	b.n	8018bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8018cb4:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8018cb8:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8018cbc:	1e65      	subs	r5, r4, #1
 8018cbe:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8018cc2:	b2ad      	uxth	r5, r5
 8018cc4:	42b5      	cmp	r5, r6
 8018cc6:	d044      	beq.n	8018d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8018cc8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8018ccc:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8018cd0:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8018cd4:	4282      	cmp	r2, r0
 8018cd6:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8018cda:	d11f      	bne.n	8018d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018cdc:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8018ce0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8018ce4:	459c      	cmp	ip, r3
 8018ce6:	d119      	bne.n	8018d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8018ce8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8018cec:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8018cf0:	19d8      	adds	r0, r3, r7
 8018cf2:	b200      	sxth	r0, r0
 8018cf4:	4288      	cmp	r0, r1
 8018cf6:	d109      	bne.n	8018d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8018cf8:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8018cfc:	4413      	add	r3, r2
 8018cfe:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8018d02:	4629      	mov	r1, r5
 8018d04:	9801      	ldr	r0, [sp, #4]
 8018d06:	f7ff fd2b 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018d0a:	e003      	b.n	8018d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018d0c:	4411      	add	r1, r2
 8018d0e:	b209      	sxth	r1, r1
 8018d10:	42b9      	cmp	r1, r7
 8018d12:	d0f3      	beq.n	8018cfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8018d14:	3d01      	subs	r5, #1
 8018d16:	3c08      	subs	r4, #8
 8018d18:	b2ad      	uxth	r5, r5
 8018d1a:	e7d3      	b.n	8018cc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8018d1c:	42b9      	cmp	r1, r7
 8018d1e:	d1f9      	bne.n	8018d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018d20:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8018d24:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018d28:	4299      	cmp	r1, r3
 8018d2a:	d1f3      	bne.n	8018d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018d2c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8018d30:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8018d34:	181f      	adds	r7, r3, r0
 8018d36:	b23f      	sxth	r7, r7
 8018d38:	42ba      	cmp	r2, r7
 8018d3a:	d105      	bne.n	8018d48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8018d3c:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8018d40:	440b      	add	r3, r1
 8018d42:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8018d46:	e7dc      	b.n	8018d02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8018d48:	440a      	add	r2, r1
 8018d4a:	b212      	sxth	r2, r2
 8018d4c:	4290      	cmp	r0, r2
 8018d4e:	d1e1      	bne.n	8018d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8018d50:	e7f6      	b.n	8018d40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8018d52:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8018d56:	2e07      	cmp	r6, #7
 8018d58:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8018d5c:	d812      	bhi.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8018d5e:	1c75      	adds	r5, r6, #1
 8018d60:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8018d64:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8018d68:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8018d6c:	9d01      	ldr	r5, [sp, #4]
 8018d6e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8018d72:	442c      	add	r4, r5
 8018d74:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8018d78:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8018d7c:	8061      	strh	r1, [r4, #2]
 8018d7e:	80a2      	strh	r2, [r4, #4]
 8018d80:	80e3      	strh	r3, [r4, #6]
 8018d82:	e581      	b.n	8018888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018d84:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8018d88:	3e01      	subs	r6, #1
 8018d8a:	445c      	add	r4, fp
 8018d8c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8018d90:	f04f 37ff 	mov.w	r7, #4294967295
 8018d94:	2500      	movs	r5, #0
 8018d96:	9305      	str	r3, [sp, #20]
 8018d98:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8018d9c:	1e72      	subs	r2, r6, #1
 8018d9e:	9302      	str	r3, [sp, #8]
 8018da0:	4691      	mov	r9, r2
 8018da2:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8018da6:	9304      	str	r3, [sp, #16]
 8018da8:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8018dac:	f1b9 3fff 	cmp.w	r9, #4294967295
 8018db0:	6818      	ldr	r0, [r3, #0]
 8018db2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018db6:	9207      	str	r2, [sp, #28]
 8018db8:	bf16      	itet	ne
 8018dba:	9905      	ldrne	r1, [sp, #20]
 8018dbc:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8018dc0:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8018dc4:	9306      	str	r3, [sp, #24]
 8018dc6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8018dca:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8018dce:	fb18 f801 	smulbb	r8, r8, r1
 8018dd2:	6859      	ldr	r1, [r3, #4]
 8018dd4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018dd8:	4671      	mov	r1, lr
 8018dda:	a80c      	add	r0, sp, #48	@ 0x30
 8018ddc:	f7ff fb20 	bl	8018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018de0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8018de4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8018de8:	f04f 0c08 	mov.w	ip, #8
 8018dec:	9b04      	ldr	r3, [sp, #16]
 8018dee:	9a02      	ldr	r2, [sp, #8]
 8018df0:	fb10 f001 	smulbb	r0, r0, r1
 8018df4:	fb02 8803 	mla	r8, r2, r3, r8
 8018df8:	eba0 0108 	sub.w	r1, r0, r8
 8018dfc:	fb90 f0fc 	sdiv	r0, r0, ip
 8018e00:	4288      	cmp	r0, r1
 8018e02:	dc20      	bgt.n	8018e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8018e04:	4551      	cmp	r1, sl
 8018e06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8018e0a:	da03      	bge.n	8018e14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8018e0c:	b1d9      	cbz	r1, 8018e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8018e0e:	468a      	mov	sl, r1
 8018e10:	464f      	mov	r7, r9
 8018e12:	4635      	mov	r5, r6
 8018e14:	f109 39ff 	add.w	r9, r9, #4294967295
 8018e18:	f119 0f02 	cmn.w	r9, #2
 8018e1c:	d1c6      	bne.n	8018dac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8018e1e:	4616      	mov	r6, r2
 8018e20:	3201      	adds	r2, #1
 8018e22:	f1a4 0408 	sub.w	r4, r4, #8
 8018e26:	d1b7      	bne.n	8018d98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8018e28:	9b01      	ldr	r3, [sp, #4]
 8018e2a:	b2ac      	uxth	r4, r5
 8018e2c:	00ed      	lsls	r5, r5, #3
 8018e2e:	1958      	adds	r0, r3, r5
 8018e30:	1c7b      	adds	r3, r7, #1
 8018e32:	d10b      	bne.n	8018e4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8018e34:	4601      	mov	r1, r0
 8018e36:	9803      	ldr	r0, [sp, #12]
 8018e38:	f7ff faf2 	bl	8018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018e3c:	4621      	mov	r1, r4
 8018e3e:	9801      	ldr	r0, [sp, #4]
 8018e40:	f7ff fc8e 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018e44:	e4b6      	b.n	80187b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8018e46:	464f      	mov	r7, r9
 8018e48:	4635      	mov	r5, r6
 8018e4a:	e7ed      	b.n	8018e28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8018e4c:	9b01      	ldr	r3, [sp, #4]
 8018e4e:	00ff      	lsls	r7, r7, #3
 8018e50:	445d      	add	r5, fp
 8018e52:	19d9      	adds	r1, r3, r7
 8018e54:	445f      	add	r7, fp
 8018e56:	f7ff fae3 	bl	8018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8018e5a:	9b03      	ldr	r3, [sp, #12]
 8018e5c:	cb03      	ldmia	r3!, {r0, r1}
 8018e5e:	9b03      	ldr	r3, [sp, #12]
 8018e60:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8018e64:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8018e68:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8018e6c:	6869      	ldr	r1, [r5, #4]
 8018e6e:	c303      	stmia	r3!, {r0, r1}
 8018e70:	e7e4      	b.n	8018e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8018e72:	bf00      	nop

08018e74 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8018e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e78:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8018e7c:	b09b      	sub	sp, #108	@ 0x6c
 8018e7e:	4604      	mov	r4, r0
 8018e80:	4630      	mov	r0, r6
 8018e82:	f7fb fa6c 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018e86:	4605      	mov	r5, r0
 8018e88:	b948      	cbnz	r0, 8018e9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8018e8a:	6823      	ldr	r3, [r4, #0]
 8018e8c:	4620      	mov	r0, r4
 8018e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018e90:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018e94:	4798      	blx	r3
 8018e96:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8018e9a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8018e9e:	4bc5      	ldr	r3, [pc, #788]	@ (80191b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d03f      	beq.n	8018f26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018ea6:	4dc4      	ldr	r5, [pc, #784]	@ (80191b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f7fb fa58 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018eae:	4606      	mov	r6, r0
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	d138      	bne.n	8018f26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	f7ff f951 	bl	801815c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8018eba:	6823      	ldr	r3, [r4, #0]
 8018ebc:	6829      	ldr	r1, [r5, #0]
 8018ebe:	4620      	mov	r0, r4
 8018ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018ec2:	686a      	ldr	r2, [r5, #4]
 8018ec4:	4798      	blx	r3
 8018ec6:	802e      	strh	r6, [r5, #0]
 8018ec8:	806e      	strh	r6, [r5, #2]
 8018eca:	80ae      	strh	r6, [r5, #4]
 8018ecc:	80ee      	strh	r6, [r5, #6]
 8018ece:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8018ed2:	4dba      	ldr	r5, [pc, #744]	@ (80191bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8018ed4:	4640      	mov	r0, r8
 8018ed6:	f7ff fbe8 	bl	80186aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018eda:	882e      	ldrh	r6, [r5, #0]
 8018edc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018ee0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8018ee4:	4633      	mov	r3, r6
 8018ee6:	42bb      	cmp	r3, r7
 8018ee8:	d224      	bcs.n	8018f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8018eea:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8018eee:	2907      	cmp	r1, #7
 8018ef0:	d816      	bhi.n	8018f20 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8018ef2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8018ef6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8018efa:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8018efe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8018f02:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8018f06:	1c4a      	adds	r2, r1, #1
 8018f08:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8018f0c:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8018f10:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8018f14:	f8a2 a002 	strh.w	sl, [r2, #2]
 8018f18:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018f1c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018f20:	3301      	adds	r3, #1
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	e7df      	b.n	8018ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8018f26:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d1cf      	bne.n	8018ece <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8018f2e:	b01b      	add	sp, #108	@ 0x6c
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8018f38:	42b3      	cmp	r3, r6
 8018f3a:	d90c      	bls.n	8018f56 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8018f3c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8018f40:	6822      	ldr	r2, [r4, #0]
 8018f42:	3601      	adds	r6, #1
 8018f44:	4620      	mov	r0, r4
 8018f46:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8018f48:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8018f4c:	b2b6      	uxth	r6, r6
 8018f4e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8018f52:	47b8      	blx	r7
 8018f54:	e7ee      	b.n	8018f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8018f56:	4a9a      	ldr	r2, [pc, #616]	@ (80191c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018f58:	6813      	ldr	r3, [r2, #0]
 8018f5a:	4691      	mov	r9, r2
 8018f5c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8018f60:	2b01      	cmp	r3, #1
 8018f62:	f040 80e0 	bne.w	8019126 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8018f66:	8829      	ldrh	r1, [r5, #0]
 8018f68:	2600      	movs	r6, #0
 8018f6a:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8018f6e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8018f72:	33ae      	adds	r3, #174	@ 0xae
 8018f74:	428f      	cmp	r7, r1
 8018f76:	f103 0308 	add.w	r3, r3, #8
 8018f7a:	dd0a      	ble.n	8018f92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8018f7c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8018f80:	3101      	adds	r1, #1
 8018f82:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8018f86:	4402      	add	r2, r0
 8018f88:	b212      	sxth	r2, r2
 8018f8a:	4296      	cmp	r6, r2
 8018f8c:	bfb8      	it	lt
 8018f8e:	4616      	movlt	r6, r2
 8018f90:	e7f0      	b.n	8018f74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8018f92:	4b8c      	ldr	r3, [pc, #560]	@ (80191c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8018f94:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80191c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8018f98:	881b      	ldrh	r3, [r3, #0]
 8018f9a:	2b0f      	cmp	r3, #15
 8018f9c:	bf8c      	ite	hi
 8018f9e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8018fa2:	f04f 0b01 	movls.w	fp, #1
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8018fac:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8018fb0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8018fb4:	4b82      	ldr	r3, [pc, #520]	@ (80191c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8018fb6:	4438      	add	r0, r7
 8018fb8:	b207      	sxth	r7, r0
 8018fba:	6818      	ldr	r0, [r3, #0]
 8018fbc:	42b7      	cmp	r7, r6
 8018fbe:	6803      	ldr	r3, [r0, #0]
 8018fc0:	f280 8083 	bge.w	80190ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8018fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8018fc8:	4798      	blx	r3
 8018fca:	eb07 030b 	add.w	r3, r7, fp
 8018fce:	4298      	cmp	r0, r3
 8018fd0:	da07      	bge.n	8018fe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018fd2:	42b0      	cmp	r0, r6
 8018fd4:	da05      	bge.n	8018fe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8018fd6:	4287      	cmp	r7, r0
 8018fd8:	dd6c      	ble.n	80190b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018fda:	2f00      	cmp	r7, #0
 8018fdc:	dd6a      	ble.n	80190b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8018fde:	4630      	mov	r0, r6
 8018fe0:	e004      	b.n	8018fec <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8018fe2:	4287      	cmp	r7, r0
 8018fe4:	dcfb      	bgt.n	8018fde <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8018fe6:	42b0      	cmp	r0, r6
 8018fe8:	bfa8      	it	ge
 8018fea:	4630      	movge	r0, r6
 8018fec:	4b76      	ldr	r3, [pc, #472]	@ (80191c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8018fee:	1bc0      	subs	r0, r0, r7
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ffa:	882f      	ldrh	r7, [r5, #0]
 8018ffc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019000:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019004:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019008:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801900c:	42bb      	cmp	r3, r7
 801900e:	d9cd      	bls.n	8018fac <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8019010:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019014:	ab07      	add	r3, sp, #28
 8019016:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801901a:	6851      	ldr	r1, [r2, #4]
 801901c:	c303      	stmia	r3!, {r0, r1}
 801901e:	a905      	add	r1, sp, #20
 8019020:	a807      	add	r0, sp, #28
 8019022:	f7ff f965 	bl	80182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019026:	2800      	cmp	r0, #0
 8019028:	d04c      	beq.n	80190c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801902a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801902e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019032:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8019036:	4686      	mov	lr, r0
 8019038:	4290      	cmp	r0, r2
 801903a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801903e:	4450      	add	r0, sl
 8019040:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8019044:	bfb8      	it	lt
 8019046:	4696      	movlt	lr, r2
 8019048:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801904c:	4452      	add	r2, sl
 801904e:	b280      	uxth	r0, r0
 8019050:	4299      	cmp	r1, r3
 8019052:	468c      	mov	ip, r1
 8019054:	b292      	uxth	r2, r2
 8019056:	9302      	str	r3, [sp, #8]
 8019058:	bfb8      	it	lt
 801905a:	469c      	movlt	ip, r3
 801905c:	b203      	sxth	r3, r0
 801905e:	fa0f fa82 	sxth.w	sl, r2
 8019062:	f8ad e01c 	strh.w	lr, [sp, #28]
 8019066:	f8ad c01e 	strh.w	ip, [sp, #30]
 801906a:	4553      	cmp	r3, sl
 801906c:	bfb8      	it	lt
 801906e:	4602      	movlt	r2, r0
 8019070:	9b02      	ldr	r3, [sp, #8]
 8019072:	eba2 020e 	sub.w	r2, r2, lr
 8019076:	f8ad 2020 	strh.w	r2, [sp, #32]
 801907a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801907e:	4411      	add	r1, r2
 8019080:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019084:	4413      	add	r3, r2
 8019086:	b289      	uxth	r1, r1
 8019088:	b29b      	uxth	r3, r3
 801908a:	b208      	sxth	r0, r1
 801908c:	b21a      	sxth	r2, r3
 801908e:	4290      	cmp	r0, r2
 8019090:	bfb8      	it	lt
 8019092:	460b      	movlt	r3, r1
 8019094:	eba3 030c 	sub.w	r3, r3, ip
 8019098:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801909c:	a807      	add	r0, sp, #28
 801909e:	f7fb f95e 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 80190a2:	b920      	cbnz	r0, 80190ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80190a4:	6823      	ldr	r3, [r4, #0]
 80190a6:	a907      	add	r1, sp, #28
 80190a8:	4620      	mov	r0, r4
 80190aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80190ac:	4798      	blx	r3
 80190ae:	3701      	adds	r7, #1
 80190b0:	b2bf      	uxth	r7, r7
 80190b2:	e7a9      	b.n	8019008 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80190b4:	f8d9 0000 	ldr.w	r0, [r9]
 80190b8:	2101      	movs	r1, #1
 80190ba:	6803      	ldr	r3, [r0, #0]
 80190bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80190c0:	4798      	blx	r3
 80190c2:	e773      	b.n	8018fac <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80190c4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80190c8:	e7e8      	b.n	801909c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80190ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190cc:	4798      	blx	r3
 80190ce:	4b3f      	ldr	r3, [pc, #252]	@ (80191cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	f43f af2b 	beq.w	8018f2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80190d8:	2300      	movs	r3, #0
 80190da:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80190de:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80190e2:	882b      	ldrh	r3, [r5, #0]
 80190e4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80190e8:	42ab      	cmp	r3, r5
 80190ea:	f4bf af20 	bcs.w	8018f2e <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80190ee:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80190f2:	2907      	cmp	r1, #7
 80190f4:	d814      	bhi.n	8019120 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80190f6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80190fa:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80190fe:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8019102:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8019106:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801910a:	1c4a      	adds	r2, r1, #1
 801910c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8019110:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019114:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8019118:	f8a2 c002 	strh.w	ip, [r2, #2]
 801911c:	8097      	strh	r7, [r2, #4]
 801911e:	80d6      	strh	r6, [r2, #6]
 8019120:	3301      	adds	r3, #1
 8019122:	b29b      	uxth	r3, r3
 8019124:	e7e0      	b.n	80190e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8019126:	2b02      	cmp	r3, #2
 8019128:	f040 8133 	bne.w	8019392 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801912c:	4b28      	ldr	r3, [pc, #160]	@ (80191d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801912e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8019132:	781b      	ldrb	r3, [r3, #0]
 8019134:	2b01      	cmp	r3, #1
 8019136:	f000 8098 	beq.w	801926a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801913a:	882a      	ldrh	r2, [r5, #0]
 801913c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8019140:	3201      	adds	r2, #1
 8019142:	b292      	uxth	r2, r2
 8019144:	2900      	cmp	r1, #0
 8019146:	d0c2      	beq.n	80190ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019148:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801914c:	4694      	mov	ip, r2
 801914e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8019152:	f04f 0900 	mov.w	r9, #0
 8019156:	441e      	add	r6, r3
 8019158:	b236      	sxth	r6, r6
 801915a:	fa1f f38c 	uxth.w	r3, ip
 801915e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8019162:	4299      	cmp	r1, r3
 8019164:	f240 80be 	bls.w	80192e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8019168:	4427      	add	r7, r4
 801916a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801916e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8019172:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8019176:	4283      	cmp	r3, r0
 8019178:	f340 80a0 	ble.w	80192bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801917c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8019180:	46e1      	mov	r9, ip
 8019182:	4406      	add	r6, r0
 8019184:	b236      	sxth	r6, r6
 8019186:	429e      	cmp	r6, r3
 8019188:	bfa8      	it	ge
 801918a:	461e      	movge	r6, r3
 801918c:	f10c 0c01 	add.w	ip, ip, #1
 8019190:	e7e3      	b.n	801915a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8019192:	d10a      	bne.n	80191aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8019194:	4562      	cmp	r2, ip
 8019196:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801919a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801919e:	bfb8      	it	lt
 80191a0:	4662      	movlt	r2, ip
 80191a2:	4288      	cmp	r0, r1
 80191a4:	bfb8      	it	lt
 80191a6:	461f      	movlt	r7, r3
 80191a8:	e086      	b.n	80192b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80191aa:	428a      	cmp	r2, r1
 80191ac:	bfb8      	it	lt
 80191ae:	460a      	movlt	r2, r1
 80191b0:	e082      	b.n	80192b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80191b2:	bf00      	nop
 80191b4:	2401bb70 	.word	0x2401bb70
 80191b8:	2401bb7c 	.word	0x2401bb7c
 80191bc:	24000050 	.word	0x24000050
 80191c0:	2401bb38 	.word	0x2401bb38
 80191c4:	2401bb2e 	.word	0x2401bb2e
 80191c8:	2401bb2c 	.word	0x2401bb2c
 80191cc:	2401bb36 	.word	0x2401bb36
 80191d0:	2401bb30 	.word	0x2401bb30
 80191d4:	19a1      	adds	r1, r4, r6
 80191d6:	ab07      	add	r3, sp, #28
 80191d8:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80191dc:	6849      	ldr	r1, [r1, #4]
 80191de:	c303      	stmia	r3!, {r0, r1}
 80191e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80191e4:	a807      	add	r0, sp, #28
 80191e6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80191ea:	2b13      	cmp	r3, #19
 80191ec:	440b      	add	r3, r1
 80191ee:	bfd8      	it	le
 80191f0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80191f4:	1a9b      	subs	r3, r3, r2
 80191f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80191fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80191fe:	f7fe ffc7 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019202:	a807      	add	r0, sp, #28
 8019204:	f7fb f8ab 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019208:	bb78      	cbnz	r0, 801926a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801920a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801920e:	4426      	add	r6, r4
 8019210:	f8d9 0000 	ldr.w	r0, [r9]
 8019214:	f1bc 0f14 	cmp.w	ip, #20
 8019218:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801921c:	f8d0 e000 	ldr.w	lr, [r0]
 8019220:	bfa8      	it	ge
 8019222:	f04f 0c14 	movge.w	ip, #20
 8019226:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801922a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801922e:	fa1f fc8c 	uxth.w	ip, ip
 8019232:	f8cd c000 	str.w	ip, [sp]
 8019236:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801923a:	47d8      	blx	fp
 801923c:	4683      	mov	fp, r0
 801923e:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8019242:	a807      	add	r0, sp, #28
 8019244:	f7fe ff8a 	bl	801815c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019248:	6823      	ldr	r3, [r4, #0]
 801924a:	4620      	mov	r0, r4
 801924c:	a907      	add	r1, sp, #28
 801924e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019250:	4798      	blx	r3
 8019252:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8019256:	eba0 000b 	sub.w	r0, r0, fp
 801925a:	b200      	sxth	r0, r0
 801925c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8019260:	b918      	cbnz	r0, 801926a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8019262:	b2b9      	uxth	r1, r7
 8019264:	4650      	mov	r0, sl
 8019266:	f7ff fa7b 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801926a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801926e:	f1bb 0f00 	cmp.w	fp, #0
 8019272:	f43f af2c 	beq.w	80190ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019276:	882b      	ldrh	r3, [r5, #0]
 8019278:	2700      	movs	r7, #0
 801927a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801927e:	3301      	adds	r3, #1
 8019280:	b29b      	uxth	r3, r3
 8019282:	b299      	uxth	r1, r3
 8019284:	00fe      	lsls	r6, r7, #3
 8019286:	458b      	cmp	fp, r1
 8019288:	d9a4      	bls.n	80191d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801928a:	4426      	add	r6, r4
 801928c:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8019290:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8019294:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8019298:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801929c:	4408      	add	r0, r1
 801929e:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80192a2:	4461      	add	r1, ip
 80192a4:	b200      	sxth	r0, r0
 80192a6:	b209      	sxth	r1, r1
 80192a8:	4288      	cmp	r0, r1
 80192aa:	f6bf af72 	bge.w	8019192 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80192ae:	4584      	cmp	ip, r0
 80192b0:	4662      	mov	r2, ip
 80192b2:	461f      	mov	r7, r3
 80192b4:	bfb8      	it	lt
 80192b6:	4602      	movlt	r2, r0
 80192b8:	3301      	adds	r3, #1
 80192ba:	e7e2      	b.n	8019282 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80192bc:	d10e      	bne.n	80192dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80192be:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80192c2:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80192c6:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80192ca:	4473      	add	r3, lr
 80192cc:	b21b      	sxth	r3, r3
 80192ce:	429e      	cmp	r6, r3
 80192d0:	bfa8      	it	ge
 80192d2:	461e      	movge	r6, r3
 80192d4:	4287      	cmp	r7, r0
 80192d6:	bfb8      	it	lt
 80192d8:	46e1      	movlt	r9, ip
 80192da:	e757      	b.n	801918c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80192dc:	4286      	cmp	r6, r0
 80192de:	bfa8      	it	ge
 80192e0:	4606      	movge	r6, r0
 80192e2:	e753      	b.n	801918c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80192e4:	eb0a 0007 	add.w	r0, sl, r7
 80192e8:	4427      	add	r7, r4
 80192ea:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80192ee:	f1bb 0f13 	cmp.w	fp, #19
 80192f2:	bfdc      	itt	le
 80192f4:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80192f8:	445e      	addle	r6, fp
 80192fa:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80192fe:	bfd8      	it	le
 8019300:	b236      	sxthle	r6, r6
 8019302:	f7fb f82c 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019306:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801930a:	2800      	cmp	r0, #0
 801930c:	f47f af1a 	bne.w	8019144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8019310:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8019314:	fa1f fb8b 	uxth.w	fp, fp
 8019318:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801931c:	1ab6      	subs	r6, r6, r2
 801931e:	4829      	ldr	r0, [pc, #164]	@ (80193c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8019320:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8019324:	2e14      	cmp	r6, #20
 8019326:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801932a:	6800      	ldr	r0, [r0, #0]
 801932c:	bfa8      	it	ge
 801932e:	2614      	movge	r6, #20
 8019330:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019334:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019338:	b289      	uxth	r1, r1
 801933a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801933e:	b2b6      	uxth	r6, r6
 8019340:	f8d0 c000 	ldr.w	ip, [r0]
 8019344:	b292      	uxth	r2, r2
 8019346:	455e      	cmp	r6, fp
 8019348:	bf94      	ite	ls
 801934a:	9600      	strls	r6, [sp, #0]
 801934c:	f8cd b000 	strhi.w	fp, [sp]
 8019350:	b29b      	uxth	r3, r3
 8019352:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8019356:	47b0      	blx	r6
 8019358:	6823      	ldr	r3, [r4, #0]
 801935a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801935e:	a907      	add	r1, sp, #28
 8019360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019362:	4620      	mov	r0, r4
 8019364:	4798      	blx	r3
 8019366:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801936a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801936e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8019372:	1a5b      	subs	r3, r3, r1
 8019374:	440a      	add	r2, r1
 8019376:	b21b      	sxth	r3, r3
 8019378:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801937c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8019380:	2b00      	cmp	r3, #0
 8019382:	f47f aeda 	bne.w	801913a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8019386:	fa1f f189 	uxth.w	r1, r9
 801938a:	4650      	mov	r0, sl
 801938c:	f7ff f9e8 	bl	8018760 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019390:	e6d3      	b.n	801913a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8019392:	882e      	ldrh	r6, [r5, #0]
 8019394:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8019398:	42b3      	cmp	r3, r6
 801939a:	f67f ae98 	bls.w	80190ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801939e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80193a2:	ab07      	add	r3, sp, #28
 80193a4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80193a8:	6851      	ldr	r1, [r2, #4]
 80193aa:	c303      	stmia	r3!, {r0, r1}
 80193ac:	a807      	add	r0, sp, #28
 80193ae:	f7fa ffd6 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 80193b2:	b920      	cbnz	r0, 80193be <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80193b4:	6823      	ldr	r3, [r4, #0]
 80193b6:	a907      	add	r1, sp, #28
 80193b8:	4620      	mov	r0, r4
 80193ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80193bc:	4798      	blx	r3
 80193be:	3601      	adds	r6, #1
 80193c0:	b2b6      	uxth	r6, r6
 80193c2:	e7e7      	b.n	8019394 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80193c4:	2401bb38 	.word	0x2401bb38

080193c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80193c8:	4b03      	ldr	r3, [pc, #12]	@ (80193d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80193ca:	2200      	movs	r2, #0
 80193cc:	801a      	strh	r2, [r3, #0]
 80193ce:	805a      	strh	r2, [r3, #2]
 80193d0:	809a      	strh	r2, [r3, #4]
 80193d2:	80da      	strh	r2, [r3, #6]
 80193d4:	4770      	bx	lr
 80193d6:	bf00      	nop
 80193d8:	2401bb7c 	.word	0x2401bb7c

080193dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80193dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e0:	b09d      	sub	sp, #116	@ 0x74
 80193e2:	4606      	mov	r6, r0
 80193e4:	4614      	mov	r4, r2
 80193e6:	468a      	mov	sl, r1
 80193e8:	a803      	add	r0, sp, #12
 80193ea:	461d      	mov	r5, r3
 80193ec:	f000 feb1 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 80193f0:	6833      	ldr	r3, [r6, #0]
 80193f2:	4630      	mov	r0, r6
 80193f4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80193f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80193fa:	4798      	blx	r3
 80193fc:	6833      	ldr	r3, [r6, #0]
 80193fe:	4607      	mov	r7, r0
 8019400:	4630      	mov	r0, r6
 8019402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019404:	4798      	blx	r3
 8019406:	462a      	mov	r2, r5
 8019408:	2500      	movs	r5, #0
 801940a:	4621      	mov	r1, r4
 801940c:	9000      	str	r0, [sp, #0]
 801940e:	463b      	mov	r3, r7
 8019410:	462c      	mov	r4, r5
 8019412:	46a9      	mov	r9, r5
 8019414:	46a8      	mov	r8, r5
 8019416:	a803      	add	r0, sp, #12
 8019418:	f000 fef6 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801941c:	2300      	movs	r3, #0
 801941e:	9302      	str	r3, [sp, #8]
 8019420:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019424:	429c      	cmp	r4, r3
 8019426:	d002      	beq.n	801942e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019428:	455c      	cmp	r4, fp
 801942a:	bf18      	it	ne
 801942c:	4625      	movne	r5, r4
 801942e:	ab02      	add	r3, sp, #8
 8019430:	4632      	mov	r2, r6
 8019432:	4651      	mov	r1, sl
 8019434:	a803      	add	r0, sp, #12
 8019436:	f001 f9ed 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801943a:	4604      	mov	r4, r0
 801943c:	b108      	cbz	r0, 8019442 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801943e:	280a      	cmp	r0, #10
 8019440:	d10a      	bne.n	8019458 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8019442:	45c1      	cmp	r9, r8
 8019444:	bf38      	it	cc
 8019446:	46c1      	movcc	r9, r8
 8019448:	f04f 0800 	mov.w	r8, #0
 801944c:	2c00      	cmp	r4, #0
 801944e:	d1e5      	bne.n	801941c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8019450:	4648      	mov	r0, r9
 8019452:	b01d      	add	sp, #116	@ 0x74
 8019454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019458:	9a02      	ldr	r2, [sp, #8]
 801945a:	2a00      	cmp	r2, #0
 801945c:	d0de      	beq.n	801941c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801945e:	7b57      	ldrb	r7, [r2, #13]
 8019460:	4629      	mov	r1, r5
 8019462:	6833      	ldr	r3, [r6, #0]
 8019464:	007f      	lsls	r7, r7, #1
 8019466:	8894      	ldrh	r4, [r2, #4]
 8019468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801946a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801946e:	7a97      	ldrb	r7, [r2, #10]
 8019470:	4307      	orrs	r7, r0
 8019472:	4630      	mov	r0, r6
 8019474:	4798      	blx	r3
 8019476:	4438      	add	r0, r7
 8019478:	4480      	add	r8, r0
 801947a:	fa1f f888 	uxth.w	r8, r8
 801947e:	e7e5      	b.n	801944c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08019480 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8019480:	b508      	push	{r3, lr}
 8019482:	6803      	ldr	r3, [r0, #0]
 8019484:	68db      	ldr	r3, [r3, #12]
 8019486:	4798      	blx	r3
 8019488:	b128      	cbz	r0, 8019496 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801948a:	7b43      	ldrb	r3, [r0, #13]
 801948c:	7a80      	ldrb	r0, [r0, #10]
 801948e:	005b      	lsls	r3, r3, #1
 8019490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019494:	4318      	orrs	r0, r3
 8019496:	bd08      	pop	{r3, pc}

08019498 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019498:	b40e      	push	{r1, r2, r3}
 801949a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801949c:	b09e      	sub	sp, #120	@ 0x78
 801949e:	4605      	mov	r5, r0
 80194a0:	ab23      	add	r3, sp, #140	@ 0x8c
 80194a2:	a805      	add	r0, sp, #20
 80194a4:	f853 4b04 	ldr.w	r4, [r3], #4
 80194a8:	9303      	str	r3, [sp, #12]
 80194aa:	f000 fe52 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 80194ae:	682b      	ldr	r3, [r5, #0]
 80194b0:	4628      	mov	r0, r5
 80194b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80194b4:	4798      	blx	r3
 80194b6:	682b      	ldr	r3, [r5, #0]
 80194b8:	4606      	mov	r6, r0
 80194ba:	4628      	mov	r0, r5
 80194bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194be:	4798      	blx	r3
 80194c0:	4633      	mov	r3, r6
 80194c2:	4621      	mov	r1, r4
 80194c4:	ae1e      	add	r6, sp, #120	@ 0x78
 80194c6:	2400      	movs	r4, #0
 80194c8:	9000      	str	r0, [sp, #0]
 80194ca:	9a03      	ldr	r2, [sp, #12]
 80194cc:	a805      	add	r0, sp, #20
 80194ce:	f000 fe9b 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80194d2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80194d6:	462a      	mov	r2, r5
 80194d8:	4633      	mov	r3, r6
 80194da:	4621      	mov	r1, r4
 80194dc:	a805      	add	r0, sp, #20
 80194de:	f001 f999 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194e2:	b300      	cbz	r0, 8019526 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80194e4:	280a      	cmp	r0, #10
 80194e6:	d01a      	beq.n	801951e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80194e8:	9f04      	ldr	r7, [sp, #16]
 80194ea:	b1c7      	cbz	r7, 801951e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80194ec:	7b78      	ldrb	r0, [r7, #13]
 80194ee:	7a3b      	ldrb	r3, [r7, #8]
 80194f0:	00c1      	lsls	r1, r0, #3
 80194f2:	88ea      	ldrh	r2, [r5, #6]
 80194f4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80194f8:	4319      	orrs	r1, r3
 80194fa:	0643      	lsls	r3, r0, #25
 80194fc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019500:	bf48      	it	mi
 8019502:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8019506:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801950a:	bf48      	it	mi
 801950c:	b219      	sxthmi	r1, r3
 801950e:	79fb      	ldrb	r3, [r7, #7]
 8019510:	4303      	orrs	r3, r0
 8019512:	4413      	add	r3, r2
 8019514:	1a5b      	subs	r3, r3, r1
 8019516:	b21b      	sxth	r3, r3
 8019518:	429c      	cmp	r4, r3
 801951a:	bfb8      	it	lt
 801951c:	461c      	movlt	r4, r3
 801951e:	4633      	mov	r3, r6
 8019520:	462a      	mov	r2, r5
 8019522:	2100      	movs	r1, #0
 8019524:	e7da      	b.n	80194dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019526:	b2a0      	uxth	r0, r4
 8019528:	b01e      	add	sp, #120	@ 0x78
 801952a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801952e:	b003      	add	sp, #12
 8019530:	4770      	bx	lr

08019532 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019532:	7a43      	ldrb	r3, [r0, #9]
 8019534:	8880      	ldrh	r0, [r0, #4]
 8019536:	4418      	add	r0, r3
 8019538:	b280      	uxth	r0, r0
 801953a:	4770      	bx	lr

0801953c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801953c:	6803      	ldr	r3, [r0, #0]
 801953e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019540:	4718      	bx	r3

08019542 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019542:	b40e      	push	{r1, r2, r3}
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	b09d      	sub	sp, #116	@ 0x74
 8019548:	4604      	mov	r4, r0
 801954a:	ab21      	add	r3, sp, #132	@ 0x84
 801954c:	a803      	add	r0, sp, #12
 801954e:	f853 5b04 	ldr.w	r5, [r3], #4
 8019552:	9302      	str	r3, [sp, #8]
 8019554:	f000 fdfd 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 8019558:	6823      	ldr	r3, [r4, #0]
 801955a:	4620      	mov	r0, r4
 801955c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801955e:	4798      	blx	r3
 8019560:	6823      	ldr	r3, [r4, #0]
 8019562:	4606      	mov	r6, r0
 8019564:	4620      	mov	r0, r4
 8019566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019568:	2401      	movs	r4, #1
 801956a:	4798      	blx	r3
 801956c:	4633      	mov	r3, r6
 801956e:	9000      	str	r0, [sp, #0]
 8019570:	4629      	mov	r1, r5
 8019572:	9a02      	ldr	r2, [sp, #8]
 8019574:	a803      	add	r0, sp, #12
 8019576:	f000 fe47 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801957a:	a803      	add	r0, sp, #12
 801957c:	f001 fa16 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019580:	b2a3      	uxth	r3, r4
 8019582:	b138      	cbz	r0, 8019594 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019584:	280a      	cmp	r0, #10
 8019586:	a803      	add	r0, sp, #12
 8019588:	bf04      	itt	eq
 801958a:	3301      	addeq	r3, #1
 801958c:	b21c      	sxtheq	r4, r3
 801958e:	f001 fa0d 	bl	801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019592:	e7f5      	b.n	8019580 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019594:	4618      	mov	r0, r3
 8019596:	b01d      	add	sp, #116	@ 0x74
 8019598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801959c:	b003      	add	sp, #12
 801959e:	4770      	bx	lr

080195a0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80195a0:	b40e      	push	{r1, r2, r3}
 80195a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195a4:	b09e      	sub	sp, #120	@ 0x78
 80195a6:	4604      	mov	r4, r0
 80195a8:	ab23      	add	r3, sp, #140	@ 0x8c
 80195aa:	a805      	add	r0, sp, #20
 80195ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80195b0:	9303      	str	r3, [sp, #12]
 80195b2:	f000 fdce 	bl	801a152 <_ZN8touchgfx12TextProviderC1Ev>
 80195b6:	6823      	ldr	r3, [r4, #0]
 80195b8:	4620      	mov	r0, r4
 80195ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80195bc:	4798      	blx	r3
 80195be:	6823      	ldr	r3, [r4, #0]
 80195c0:	4606      	mov	r6, r0
 80195c2:	4620      	mov	r0, r4
 80195c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80195c6:	4798      	blx	r3
 80195c8:	4633      	mov	r3, r6
 80195ca:	4629      	mov	r1, r5
 80195cc:	9000      	str	r0, [sp, #0]
 80195ce:	9a03      	ldr	r2, [sp, #12]
 80195d0:	a805      	add	r0, sp, #20
 80195d2:	f000 fe19 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80195d6:	ad1e      	add	r5, sp, #120	@ 0x78
 80195d8:	2100      	movs	r1, #0
 80195da:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80195de:	4622      	mov	r2, r4
 80195e0:	a805      	add	r0, sp, #20
 80195e2:	f845 1d68 	str.w	r1, [r5, #-104]!
 80195e6:	462b      	mov	r3, r5
 80195e8:	f001 f914 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80195ec:	b1d8      	cbz	r0, 8019626 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80195ee:	280a      	cmp	r0, #10
 80195f0:	d012      	beq.n	8019618 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80195f2:	9804      	ldr	r0, [sp, #16]
 80195f4:	b180      	cbz	r0, 8019618 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80195f6:	7b47      	ldrb	r7, [r0, #13]
 80195f8:	88e2      	ldrh	r2, [r4, #6]
 80195fa:	00fb      	lsls	r3, r7, #3
 80195fc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8019600:	7a03      	ldrb	r3, [r0, #8]
 8019602:	430b      	orrs	r3, r1
 8019604:	0679      	lsls	r1, r7, #25
 8019606:	bf44      	itt	mi
 8019608:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801960c:	b21b      	sxthmi	r3, r3
 801960e:	1ad3      	subs	r3, r2, r3
 8019610:	b21b      	sxth	r3, r3
 8019612:	429e      	cmp	r6, r3
 8019614:	bfa8      	it	ge
 8019616:	461e      	movge	r6, r3
 8019618:	462b      	mov	r3, r5
 801961a:	4622      	mov	r2, r4
 801961c:	2100      	movs	r1, #0
 801961e:	a805      	add	r0, sp, #20
 8019620:	f001 f8f8 	bl	801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019624:	e7e2      	b.n	80195ec <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019626:	4630      	mov	r0, r6
 8019628:	b01e      	add	sp, #120	@ 0x78
 801962a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801962e:	b003      	add	sp, #12
 8019630:	4770      	bx	lr

08019632 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019632:	b513      	push	{r0, r1, r4, lr}
 8019634:	6803      	ldr	r3, [r0, #0]
 8019636:	2400      	movs	r4, #0
 8019638:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801963c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019640:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019644:	4669      	mov	r1, sp
 8019646:	691b      	ldr	r3, [r3, #16]
 8019648:	9400      	str	r4, [sp, #0]
 801964a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801964e:	4798      	blx	r3
 8019650:	b002      	add	sp, #8
 8019652:	bd10      	pop	{r4, pc}

08019654 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019654:	b538      	push	{r3, r4, r5, lr}
 8019656:	680b      	ldr	r3, [r1, #0]
 8019658:	460c      	mov	r4, r1
 801965a:	4605      	mov	r5, r0
 801965c:	68db      	ldr	r3, [r3, #12]
 801965e:	4798      	blx	r3
 8019660:	6823      	ldr	r3, [r4, #0]
 8019662:	4620      	mov	r0, r4
 8019664:	4629      	mov	r1, r5
 8019666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019668:	4798      	blx	r3
 801966a:	4628      	mov	r0, r5
 801966c:	bd38      	pop	{r3, r4, r5, pc}

0801966e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801966e:	b410      	push	{r4}
 8019670:	880a      	ldrh	r2, [r1, #0]
 8019672:	8884      	ldrh	r4, [r0, #4]
 8019674:	4422      	add	r2, r4
 8019676:	800a      	strh	r2, [r1, #0]
 8019678:	884a      	ldrh	r2, [r1, #2]
 801967a:	88c4      	ldrh	r4, [r0, #6]
 801967c:	4422      	add	r2, r4
 801967e:	804a      	strh	r2, [r1, #2]
 8019680:	6940      	ldr	r0, [r0, #20]
 8019682:	b120      	cbz	r0, 801968e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019684:	6803      	ldr	r3, [r0, #0]
 8019686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801968c:	4718      	bx	r3
 801968e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019692:	4770      	bx	lr

08019694 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019694:	b570      	push	{r4, r5, r6, lr}
 8019696:	8882      	ldrh	r2, [r0, #4]
 8019698:	460c      	mov	r4, r1
 801969a:	880b      	ldrh	r3, [r1, #0]
 801969c:	4605      	mov	r5, r0
 801969e:	4413      	add	r3, r2
 80196a0:	800b      	strh	r3, [r1, #0]
 80196a2:	884b      	ldrh	r3, [r1, #2]
 80196a4:	88c2      	ldrh	r2, [r0, #6]
 80196a6:	4413      	add	r3, r2
 80196a8:	804b      	strh	r3, [r1, #2]
 80196aa:	1d01      	adds	r1, r0, #4
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7fa fe13 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 80196b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	dd0b      	ble.n	80196d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80196ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	dd07      	ble.n	80196d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80196c2:	6968      	ldr	r0, [r5, #20]
 80196c4:	b128      	cbz	r0, 80196d2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80196c6:	6803      	ldr	r3, [r0, #0]
 80196c8:	4621      	mov	r1, r4
 80196ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196d0:	4718      	bx	r3
 80196d2:	bd70      	pop	{r4, r5, r6, pc}

080196d4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80196d4:	b570      	push	{r4, r5, r6, lr}
 80196d6:	8882      	ldrh	r2, [r0, #4]
 80196d8:	460c      	mov	r4, r1
 80196da:	880b      	ldrh	r3, [r1, #0]
 80196dc:	4605      	mov	r5, r0
 80196de:	4413      	add	r3, r2
 80196e0:	800b      	strh	r3, [r1, #0]
 80196e2:	884b      	ldrh	r3, [r1, #2]
 80196e4:	88c2      	ldrh	r2, [r0, #6]
 80196e6:	4413      	add	r3, r2
 80196e8:	804b      	strh	r3, [r1, #2]
 80196ea:	1d01      	adds	r1, r0, #4
 80196ec:	4620      	mov	r0, r4
 80196ee:	f7fa fdf3 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 80196f2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	dd19      	ble.n	801972e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80196fa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	dd15      	ble.n	801972e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8019702:	6968      	ldr	r0, [r5, #20]
 8019704:	b128      	cbz	r0, 8019712 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019706:	6803      	ldr	r3, [r0, #0]
 8019708:	4621      	mov	r1, r4
 801970a:	691b      	ldr	r3, [r3, #16]
 801970c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019710:	4718      	bx	r3
 8019712:	4b07      	ldr	r3, [pc, #28]	@ (8019730 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	3304      	adds	r3, #4
 8019718:	429d      	cmp	r5, r3
 801971a:	d108      	bne.n	801972e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801971c:	f7fe fec6 	bl	80184ac <_ZN8touchgfx11Application11getInstanceEv>
 8019720:	6803      	ldr	r3, [r0, #0]
 8019722:	6821      	ldr	r1, [r4, #0]
 8019724:	6862      	ldr	r2, [r4, #4]
 8019726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801972c:	4718      	bx	r3
 801972e:	bd70      	pop	{r4, r5, r6, pc}
 8019730:	2401bb74 	.word	0x2401bb74

08019734 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019734:	b570      	push	{r4, r5, r6, lr}
 8019736:	4604      	mov	r4, r0
 8019738:	4616      	mov	r6, r2
 801973a:	460d      	mov	r5, r1
 801973c:	b901      	cbnz	r1, 8019740 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801973e:	b192      	cbz	r2, 8019766 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019740:	6823      	ldr	r3, [r4, #0]
 8019742:	4620      	mov	r0, r4
 8019744:	699b      	ldr	r3, [r3, #24]
 8019746:	4798      	blx	r3
 8019748:	88e2      	ldrh	r2, [r4, #6]
 801974a:	88a1      	ldrh	r1, [r4, #4]
 801974c:	4620      	mov	r0, r4
 801974e:	4432      	add	r2, r6
 8019750:	4429      	add	r1, r5
 8019752:	b212      	sxth	r2, r2
 8019754:	b209      	sxth	r1, r1
 8019756:	f7f5 faa2 	bl	800ec9e <_ZN8touchgfx8Drawable5setXYEss>
 801975a:	6823      	ldr	r3, [r4, #0]
 801975c:	4620      	mov	r0, r4
 801975e:	699b      	ldr	r3, [r3, #24]
 8019760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019764:	4718      	bx	r3
 8019766:	bd70      	pop	{r4, r5, r6, pc}

08019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019768:	b510      	push	{r4, lr}
 801976a:	2300      	movs	r3, #0
 801976c:	4604      	mov	r4, r0
 801976e:	4608      	mov	r0, r1
 8019770:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019774:	8023      	strh	r3, [r4, #0]
 8019776:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801977a:	8063      	strh	r3, [r4, #2]
 801977c:	6803      	ldr	r3, [r0, #0]
 801977e:	80a1      	strh	r1, [r4, #4]
 8019780:	4621      	mov	r1, r4
 8019782:	80e2      	strh	r2, [r4, #6]
 8019784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019786:	4798      	blx	r3
 8019788:	4620      	mov	r0, r4
 801978a:	bd10      	pop	{r4, pc}

0801978c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801978c:	b530      	push	{r4, r5, lr}
 801978e:	8083      	strh	r3, [r0, #4]
 8019790:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019794:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019798:	80c3      	strh	r3, [r0, #6]
 801979a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801979e:	6141      	str	r1, [r0, #20]
 80197a0:	7203      	strb	r3, [r0, #8]
 80197a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80197a6:	8302      	strh	r2, [r0, #24]
 80197a8:	7243      	strb	r3, [r0, #9]
 80197aa:	7a83      	ldrb	r3, [r0, #10]
 80197ac:	f365 0306 	bfi	r3, r5, #0, #7
 80197b0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80197b4:	f365 13c7 	bfi	r3, r5, #7, #1
 80197b8:	7283      	strb	r3, [r0, #10]
 80197ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80197be:	72c3      	strb	r3, [r0, #11]
 80197c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80197c4:	7303      	strb	r3, [r0, #12]
 80197c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80197ca:	81c3      	strh	r3, [r0, #14]
 80197cc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80197d0:	8203      	strh	r3, [r0, #16]
 80197d2:	4b01      	ldr	r3, [pc, #4]	@ (80197d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80197d4:	6003      	str	r3, [r0, #0]
 80197d6:	bd30      	pop	{r4, r5, pc}
 80197d8:	08028570 	.word	0x08028570

080197dc <_ZNK8touchgfx9ConstFont4findEt>:
 80197dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197de:	6944      	ldr	r4, [r0, #20]
 80197e0:	b3bc      	cbz	r4, 8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80197e2:	88a3      	ldrh	r3, [r4, #4]
 80197e4:	8b02      	ldrh	r2, [r0, #24]
 80197e6:	1acb      	subs	r3, r1, r3
 80197e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80197ec:	d431      	bmi.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80197ee:	4293      	cmp	r3, r2
 80197f0:	dd0c      	ble.n	801980c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80197f2:	230e      	movs	r3, #14
 80197f4:	fb03 4302 	mla	r3, r3, r2, r4
 80197f8:	889b      	ldrh	r3, [r3, #4]
 80197fa:	1a5b      	subs	r3, r3, r1
 80197fc:	1ad3      	subs	r3, r2, r3
 80197fe:	429a      	cmp	r2, r3
 8019800:	db27      	blt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019802:	2b00      	cmp	r3, #0
 8019804:	bfbc      	itt	lt
 8019806:	2302      	movlt	r3, #2
 8019808:	fb92 f3f3 	sdivlt	r3, r2, r3
 801980c:	2500      	movs	r5, #0
 801980e:	260e      	movs	r6, #14
 8019810:	4295      	cmp	r5, r2
 8019812:	dc1e      	bgt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019814:	fb06 4003 	mla	r0, r6, r3, r4
 8019818:	8887      	ldrh	r7, [r0, #4]
 801981a:	42b9      	cmp	r1, r7
 801981c:	d01a      	beq.n	8019854 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801981e:	d20d      	bcs.n	801983c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019820:	1e5a      	subs	r2, r3, #1
 8019822:	4295      	cmp	r5, r2
 8019824:	dc15      	bgt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019826:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801982a:	1a5b      	subs	r3, r3, r1
 801982c:	1ad3      	subs	r3, r2, r3
 801982e:	429a      	cmp	r2, r3
 8019830:	db0f      	blt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019832:	429d      	cmp	r5, r3
 8019834:	ddec      	ble.n	8019810 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019836:	1953      	adds	r3, r2, r5
 8019838:	105b      	asrs	r3, r3, #1
 801983a:	e7e9      	b.n	8019810 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801983c:	1c5d      	adds	r5, r3, #1
 801983e:	42aa      	cmp	r2, r5
 8019840:	db07      	blt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019842:	8a43      	ldrh	r3, [r0, #18]
 8019844:	1acb      	subs	r3, r1, r3
 8019846:	442b      	add	r3, r5
 8019848:	429d      	cmp	r5, r3
 801984a:	dc02      	bgt.n	8019852 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801984c:	429a      	cmp	r2, r3
 801984e:	dadf      	bge.n	8019810 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019850:	e7f1      	b.n	8019836 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019852:	2000      	movs	r0, #0
 8019854:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019856 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019858:	4604      	mov	r4, r0
 801985a:	4617      	mov	r7, r2
 801985c:	461e      	mov	r6, r3
 801985e:	b911      	cbnz	r1, 8019866 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019860:	2500      	movs	r5, #0
 8019862:	4628      	mov	r0, r5
 8019864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019866:	290a      	cmp	r1, #10
 8019868:	d0fa      	beq.n	8019860 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801986a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801986e:	4291      	cmp	r1, r2
 8019870:	d0f6      	beq.n	8019860 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019872:	f242 020b 	movw	r2, #8203	@ 0x200b
 8019876:	4291      	cmp	r1, r2
 8019878:	d0f2      	beq.n	8019860 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801987a:	f7ff ffaf 	bl	80197dc <_ZNK8touchgfx9ConstFont4findEt>
 801987e:	4605      	mov	r5, r0
 8019880:	b950      	cbnz	r0, 8019898 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019882:	6823      	ldr	r3, [r4, #0]
 8019884:	4620      	mov	r0, r4
 8019886:	691b      	ldr	r3, [r3, #16]
 8019888:	4798      	blx	r3
 801988a:	4601      	mov	r1, r0
 801988c:	4620      	mov	r0, r4
 801988e:	f7ff ffa5 	bl	80197dc <_ZNK8touchgfx9ConstFont4findEt>
 8019892:	4605      	mov	r5, r0
 8019894:	2800      	cmp	r0, #0
 8019896:	d0e3      	beq.n	8019860 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019898:	6823      	ldr	r3, [r4, #0]
 801989a:	4629      	mov	r1, r5
 801989c:	4620      	mov	r0, r4
 801989e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80198a0:	4798      	blx	r3
 80198a2:	6038      	str	r0, [r7, #0]
 80198a4:	6823      	ldr	r3, [r4, #0]
 80198a6:	4620      	mov	r0, r4
 80198a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80198aa:	4798      	blx	r3
 80198ac:	7030      	strb	r0, [r6, #0]
 80198ae:	e7d8      	b.n	8019862 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080198b0 <_ZN8touchgfx4clzuEm>:
 80198b0:	4603      	mov	r3, r0
 80198b2:	b1c8      	cbz	r0, 80198e8 <_ZN8touchgfx4clzuEm+0x38>
 80198b4:	0c02      	lsrs	r2, r0, #16
 80198b6:	0412      	lsls	r2, r2, #16
 80198b8:	b9a2      	cbnz	r2, 80198e4 <_ZN8touchgfx4clzuEm+0x34>
 80198ba:	0403      	lsls	r3, r0, #16
 80198bc:	2010      	movs	r0, #16
 80198be:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80198c2:	bf04      	itt	eq
 80198c4:	021b      	lsleq	r3, r3, #8
 80198c6:	3008      	addeq	r0, #8
 80198c8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80198cc:	bf04      	itt	eq
 80198ce:	011b      	lsleq	r3, r3, #4
 80198d0:	3004      	addeq	r0, #4
 80198d2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80198d6:	bf04      	itt	eq
 80198d8:	009b      	lsleq	r3, r3, #2
 80198da:	3002      	addeq	r0, #2
 80198dc:	2b00      	cmp	r3, #0
 80198de:	db04      	blt.n	80198ea <_ZN8touchgfx4clzuEm+0x3a>
 80198e0:	3001      	adds	r0, #1
 80198e2:	4770      	bx	lr
 80198e4:	2000      	movs	r0, #0
 80198e6:	e7ea      	b.n	80198be <_ZN8touchgfx4clzuEm+0xe>
 80198e8:	2020      	movs	r0, #32
 80198ea:	4770      	bx	lr

080198ec <_ZN8touchgfx7muldivuEmmmRm>:
 80198ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80198f0:	460f      	mov	r7, r1
 80198f2:	4615      	mov	r5, r2
 80198f4:	461e      	mov	r6, r3
 80198f6:	4601      	mov	r1, r0
 80198f8:	b100      	cbz	r0, 80198fc <_ZN8touchgfx7muldivuEmmmRm+0x10>
 80198fa:	b927      	cbnz	r7, 8019906 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 80198fc:	2000      	movs	r0, #0
 80198fe:	6030      	str	r0, [r6, #0]
 8019900:	b002      	add	sp, #8
 8019902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019906:	f7ff ffd3 	bl	80198b0 <_ZN8touchgfx4clzuEm>
 801990a:	b980      	cbnz	r0, 801992e <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801990c:	4638      	mov	r0, r7
 801990e:	f7ff ffcf 	bl	80198b0 <_ZN8touchgfx4clzuEm>
 8019912:	2800      	cmp	r0, #0
 8019914:	dd05      	ble.n	8019922 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8019916:	4633      	mov	r3, r6
 8019918:	462a      	mov	r2, r5
 801991a:	4638      	mov	r0, r7
 801991c:	f7ff ffe6 	bl	80198ec <_ZN8touchgfx7muldivuEmmmRm>
 8019920:	e7ee      	b.n	8019900 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019922:	f04f 33ff 	mov.w	r3, #4294967295
 8019926:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801992a:	6033      	str	r3, [r6, #0]
 801992c:	e7e8      	b.n	8019900 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801992e:	fa37 f800 	lsrs.w	r8, r7, r0
 8019932:	fb07 f301 	mul.w	r3, r7, r1
 8019936:	d105      	bne.n	8019944 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8019938:	fbb3 f0f5 	udiv	r0, r3, r5
 801993c:	fb05 3510 	mls	r5, r5, r0, r3
 8019940:	6035      	str	r5, [r6, #0]
 8019942:	e7dd      	b.n	8019900 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8019944:	2301      	movs	r3, #1
 8019946:	fa01 fa00 	lsl.w	sl, r1, r0
 801994a:	462a      	mov	r2, r5
 801994c:	fa03 f000 	lsl.w	r0, r3, r0
 8019950:	4633      	mov	r3, r6
 8019952:	fbba f9f5 	udiv	r9, sl, r5
 8019956:	3801      	subs	r0, #1
 8019958:	fb08 f409 	mul.w	r4, r8, r9
 801995c:	4038      	ands	r0, r7
 801995e:	f7ff ffc5 	bl	80198ec <_ZN8touchgfx7muldivuEmmmRm>
 8019962:	462a      	mov	r2, r5
 8019964:	4607      	mov	r7, r0
 8019966:	ab01      	add	r3, sp, #4
 8019968:	fb05 a119 	mls	r1, r5, r9, sl
 801996c:	4640      	mov	r0, r8
 801996e:	f7ff ffbd 	bl	80198ec <_ZN8touchgfx7muldivuEmmmRm>
 8019972:	9b01      	ldr	r3, [sp, #4]
 8019974:	6832      	ldr	r2, [r6, #0]
 8019976:	441a      	add	r2, r3
 8019978:	fbb2 f3f5 	udiv	r3, r2, r5
 801997c:	441c      	add	r4, r3
 801997e:	fb05 2513 	mls	r5, r5, r3, r2
 8019982:	443c      	add	r4, r7
 8019984:	4420      	add	r0, r4
 8019986:	e7db      	b.n	8019940 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08019988 <_ZN8touchgfx6muldivElllRl>:
 8019988:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801998a:	2800      	cmp	r0, #0
 801998c:	461e      	mov	r6, r3
 801998e:	bfba      	itte	lt
 8019990:	4240      	neglt	r0, r0
 8019992:	f04f 34ff 	movlt.w	r4, #4294967295
 8019996:	2401      	movge	r4, #1
 8019998:	2900      	cmp	r1, #0
 801999a:	bfbc      	itt	lt
 801999c:	4249      	neglt	r1, r1
 801999e:	4264      	neglt	r4, r4
 80199a0:	2a00      	cmp	r2, #0
 80199a2:	bfb6      	itet	lt
 80199a4:	4265      	neglt	r5, r4
 80199a6:	4625      	movge	r5, r4
 80199a8:	4252      	neglt	r2, r2
 80199aa:	4288      	cmp	r0, r1
 80199ac:	bfc2      	ittt	gt
 80199ae:	4603      	movgt	r3, r0
 80199b0:	4608      	movgt	r0, r1
 80199b2:	4619      	movgt	r1, r3
 80199b4:	ab01      	add	r3, sp, #4
 80199b6:	f7ff ff99 	bl	80198ec <_ZN8touchgfx7muldivuEmmmRm>
 80199ba:	9b01      	ldr	r3, [sp, #4]
 80199bc:	4368      	muls	r0, r5
 80199be:	435c      	muls	r4, r3
 80199c0:	6034      	str	r4, [r6, #0]
 80199c2:	b002      	add	sp, #8
 80199c4:	bd70      	pop	{r4, r5, r6, pc}

080199c6 <_ZN8touchgfx6muldivElll>:
 80199c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199c8:	4606      	mov	r6, r0
 80199ca:	ab01      	add	r3, sp, #4
 80199cc:	460d      	mov	r5, r1
 80199ce:	4614      	mov	r4, r2
 80199d0:	f7ff ffda 	bl	8019988 <_ZN8touchgfx6muldivElllRl>
 80199d4:	2e00      	cmp	r6, #0
 80199d6:	db20      	blt.n	8019a1a <_ZN8touchgfx6muldivElll+0x54>
 80199d8:	bf14      	ite	ne
 80199da:	2301      	movne	r3, #1
 80199dc:	2300      	moveq	r3, #0
 80199de:	2d00      	cmp	r5, #0
 80199e0:	db1e      	blt.n	8019a20 <_ZN8touchgfx6muldivElll+0x5a>
 80199e2:	bf14      	ite	ne
 80199e4:	2201      	movne	r2, #1
 80199e6:	2200      	moveq	r2, #0
 80199e8:	2c00      	cmp	r4, #0
 80199ea:	fb03 f202 	mul.w	r2, r3, r2
 80199ee:	db1a      	blt.n	8019a26 <_ZN8touchgfx6muldivElll+0x60>
 80199f0:	bf14      	ite	ne
 80199f2:	2301      	movne	r3, #1
 80199f4:	2300      	moveq	r3, #0
 80199f6:	4353      	muls	r3, r2
 80199f8:	2b01      	cmp	r3, #1
 80199fa:	d117      	bne.n	8019a2c <_ZN8touchgfx6muldivElll+0x66>
 80199fc:	2c00      	cmp	r4, #0
 80199fe:	9b01      	ldr	r3, [sp, #4]
 8019a00:	bfb8      	it	lt
 8019a02:	4264      	neglt	r4, r4
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	f104 0401 	add.w	r4, r4, #1
 8019a0a:	bfb8      	it	lt
 8019a0c:	425b      	neglt	r3, r3
 8019a0e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019a12:	db00      	blt.n	8019a16 <_ZN8touchgfx6muldivElll+0x50>
 8019a14:	3001      	adds	r0, #1
 8019a16:	b002      	add	sp, #8
 8019a18:	bd70      	pop	{r4, r5, r6, pc}
 8019a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a1e:	e7de      	b.n	80199de <_ZN8touchgfx6muldivElll+0x18>
 8019a20:	f04f 32ff 	mov.w	r2, #4294967295
 8019a24:	e7e0      	b.n	80199e8 <_ZN8touchgfx6muldivElll+0x22>
 8019a26:	f04f 33ff 	mov.w	r3, #4294967295
 8019a2a:	e7e4      	b.n	80199f6 <_ZN8touchgfx6muldivElll+0x30>
 8019a2c:	3301      	adds	r3, #1
 8019a2e:	d1f2      	bne.n	8019a16 <_ZN8touchgfx6muldivElll+0x50>
 8019a30:	9b01      	ldr	r3, [sp, #4]
 8019a32:	2c00      	cmp	r4, #0
 8019a34:	bfb8      	it	lt
 8019a36:	4264      	neglt	r4, r4
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	bfb8      	it	lt
 8019a3c:	425b      	neglt	r3, r3
 8019a3e:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019a42:	bfc8      	it	gt
 8019a44:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019a48:	e7e5      	b.n	8019a16 <_ZN8touchgfx6muldivElll+0x50>

08019a4a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019a4a:	2000      	movs	r0, #0
 8019a4c:	4770      	bx	lr

08019a4e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019a4e:	2001      	movs	r0, #1
 8019a50:	4770      	bx	lr

08019a52 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019a52:	2002      	movs	r0, #2
 8019a54:	4770      	bx	lr

08019a56 <_ZN8touchgfx12GestureEventD1Ev>:
 8019a56:	4770      	bx	lr

08019a58 <_ZN8touchgfx9DragEventD1Ev>:
 8019a58:	4770      	bx	lr

08019a5a <_ZN8touchgfx10ClickEventD1Ev>:
 8019a5a:	4770      	bx	lr

08019a5c <_ZN8touchgfx10ClickEventD0Ev>:
 8019a5c:	b510      	push	{r4, lr}
 8019a5e:	4604      	mov	r4, r0
 8019a60:	210c      	movs	r1, #12
 8019a62:	f00b fa4a 	bl	8024efa <_ZdlPvj>
 8019a66:	4620      	mov	r0, r4
 8019a68:	bd10      	pop	{r4, pc}

08019a6a <_ZN8touchgfx9DragEventD0Ev>:
 8019a6a:	b510      	push	{r4, lr}
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	2110      	movs	r1, #16
 8019a70:	f00b fa43 	bl	8024efa <_ZdlPvj>
 8019a74:	4620      	mov	r0, r4
 8019a76:	bd10      	pop	{r4, pc}

08019a78 <_ZN8touchgfx12GestureEventD0Ev>:
 8019a78:	b510      	push	{r4, lr}
 8019a7a:	4604      	mov	r4, r0
 8019a7c:	210c      	movs	r1, #12
 8019a7e:	f00b fa3c 	bl	8024efa <_ZdlPvj>
 8019a82:	4620      	mov	r0, r4
 8019a84:	bd10      	pop	{r4, pc}
	...

08019a88 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019a88:	b530      	push	{r4, r5, lr}
 8019a8a:	460d      	mov	r5, r1
 8019a8c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019a8e:	b087      	sub	sp, #28
 8019a90:	4604      	mov	r4, r0
 8019a92:	b301      	cbz	r1, 8019ad6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8019a94:	a801      	add	r0, sp, #4
 8019a96:	f7ff fe67 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019a9a:	892a      	ldrh	r2, [r5, #8]
 8019a9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019aa0:	7928      	ldrb	r0, [r5, #4]
 8019aa2:	1ad2      	subs	r2, r2, r3
 8019aa4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019aa6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8019aaa:	441a      	add	r2, r3
 8019aac:	896b      	ldrh	r3, [r5, #10]
 8019aae:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8019ab2:	f88d 0010 	strb.w	r0, [sp, #16]
 8019ab6:	1b5b      	subs	r3, r3, r5
 8019ab8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8019aba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019abc:	442b      	add	r3, r5
 8019abe:	4d07      	ldr	r5, [pc, #28]	@ (8019adc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8019ac0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8019ac4:	a903      	add	r1, sp, #12
 8019ac6:	9503      	str	r5, [sp, #12]
 8019ac8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019acc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019ad0:	6803      	ldr	r3, [r0, #0]
 8019ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019ad4:	4798      	blx	r3
 8019ad6:	b007      	add	sp, #28
 8019ad8:	bd30      	pop	{r4, r5, pc}
 8019ada:	bf00      	nop
 8019adc:	08028600 	.word	0x08028600

08019ae0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8019ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019ae6:	b08a      	sub	sp, #40	@ 0x28
 8019ae8:	4604      	mov	r4, r0
 8019aea:	460d      	mov	r5, r1
 8019aec:	b113      	cbz	r3, 8019af4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8019aee:	790b      	ldrb	r3, [r1, #4]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d044      	beq.n	8019b7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019af4:	f104 0804 	add.w	r8, r4, #4
 8019af8:	a803      	add	r0, sp, #12
 8019afa:	4641      	mov	r1, r8
 8019afc:	f7ff fe34 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b00:	792b      	ldrb	r3, [r5, #4]
 8019b02:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019b06:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8019b0a:	b983      	cbnz	r3, 8019b2e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8019b0c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8019b10:	892a      	ldrh	r2, [r5, #8]
 8019b12:	88e9      	ldrh	r1, [r5, #6]
 8019b14:	4640      	mov	r0, r8
 8019b16:	1b92      	subs	r2, r2, r6
 8019b18:	9301      	str	r3, [sp, #4]
 8019b1a:	1bc9      	subs	r1, r1, r7
 8019b1c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8019b20:	b212      	sxth	r2, r2
 8019b22:	9300      	str	r3, [sp, #0]
 8019b24:	b209      	sxth	r1, r1
 8019b26:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8019b2a:	f7fa faf3 	bl	8014114 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8019b2e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019b30:	b329      	cbz	r1, 8019b7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019b32:	a805      	add	r0, sp, #20
 8019b34:	f7ff fe18 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b38:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019b3c:	792b      	ldrb	r3, [r5, #4]
 8019b3e:	a907      	add	r1, sp, #28
 8019b40:	1abf      	subs	r7, r7, r2
 8019b42:	88ea      	ldrh	r2, [r5, #6]
 8019b44:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8019b46:	4417      	add	r7, r2
 8019b48:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8019b4a:	f88d 3020 	strb.w	r3, [sp, #32]
 8019b4e:	4417      	add	r7, r2
 8019b50:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8019b54:	1ab6      	subs	r6, r6, r2
 8019b56:	892a      	ldrh	r2, [r5, #8]
 8019b58:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8019b5c:	4416      	add	r6, r2
 8019b5e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8019b60:	4416      	add	r6, r2
 8019b62:	4a08      	ldr	r2, [pc, #32]	@ (8019b84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8019b64:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8019b68:	2600      	movs	r6, #0
 8019b6a:	9207      	str	r2, [sp, #28]
 8019b6c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8019b70:	6803      	ldr	r3, [r0, #0]
 8019b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019b74:	4798      	blx	r3
 8019b76:	792b      	ldrb	r3, [r5, #4]
 8019b78:	b10b      	cbz	r3, 8019b7e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8019b7a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8019b7e:	b00a      	add	sp, #40	@ 0x28
 8019b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b84:	080285d8 	.word	0x080285d8

08019b88 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8019b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b8c:	460c      	mov	r4, r1
 8019b8e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8019b90:	b088      	sub	sp, #32
 8019b92:	4605      	mov	r5, r0
 8019b94:	2900      	cmp	r1, #0
 8019b96:	d06d      	beq.n	8019c74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8019b98:	4668      	mov	r0, sp
 8019b9a:	f7ff fde5 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b9e:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8019ba0:	88e3      	ldrh	r3, [r4, #6]
 8019ba2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8019ba6:	440b      	add	r3, r1
 8019ba8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8019bac:	b21b      	sxth	r3, r3
 8019bae:	4543      	cmp	r3, r8
 8019bb0:	db31      	blt.n	8019c16 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019bb2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8019bb6:	44c4      	add	ip, r8
 8019bb8:	fa0f fc8c 	sxth.w	ip, ip
 8019bbc:	4563      	cmp	r3, ip
 8019bbe:	da2a      	bge.n	8019c16 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019bc0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8019bc2:	8926      	ldrh	r6, [r4, #8]
 8019bc4:	4416      	add	r6, r2
 8019bc6:	b236      	sxth	r6, r6
 8019bc8:	42be      	cmp	r6, r7
 8019bca:	db24      	blt.n	8019c16 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019bcc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019bd0:	4438      	add	r0, r7
 8019bd2:	b200      	sxth	r0, r0
 8019bd4:	4286      	cmp	r6, r0
 8019bd6:	da1e      	bge.n	8019c16 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019bd8:	8963      	ldrh	r3, [r4, #10]
 8019bda:	4419      	add	r1, r3
 8019bdc:	b209      	sxth	r1, r1
 8019bde:	4541      	cmp	r1, r8
 8019be0:	db08      	blt.n	8019bf4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019be2:	4561      	cmp	r1, ip
 8019be4:	da06      	bge.n	8019bf4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019be6:	89a3      	ldrh	r3, [r4, #12]
 8019be8:	441a      	add	r2, r3
 8019bea:	b212      	sxth	r2, r2
 8019bec:	42ba      	cmp	r2, r7
 8019bee:	db01      	blt.n	8019bf4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8019bf0:	4282      	cmp	r2, r0
 8019bf2:	db10      	blt.n	8019c16 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8019bf4:	4b21      	ldr	r3, [pc, #132]	@ (8019c7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8019bf6:	a904      	add	r1, sp, #16
 8019bf8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019bfa:	9304      	str	r3, [sp, #16]
 8019bfc:	2302      	movs	r3, #2
 8019bfe:	f88d 3014 	strb.w	r3, [sp, #20]
 8019c02:	2300      	movs	r3, #0
 8019c04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019c0c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019c10:	6803      	ldr	r3, [r0, #0]
 8019c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c14:	4798      	blx	r3
 8019c16:	1d29      	adds	r1, r5, #4
 8019c18:	a802      	add	r0, sp, #8
 8019c1a:	f7ff fda5 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019c1e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019c22:	88e0      	ldrh	r0, [r4, #6]
 8019c24:	eba3 0808 	sub.w	r8, r3, r8
 8019c28:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019c2c:	7921      	ldrb	r1, [r4, #4]
 8019c2e:	fa1f f888 	uxth.w	r8, r8
 8019c32:	1bdf      	subs	r7, r3, r7
 8019c34:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8019c38:	b2bb      	uxth	r3, r7
 8019c3a:	4440      	add	r0, r8
 8019c3c:	8922      	ldrh	r2, [r4, #8]
 8019c3e:	8967      	ldrh	r7, [r4, #10]
 8019c40:	4460      	add	r0, ip
 8019c42:	89a4      	ldrh	r4, [r4, #12]
 8019c44:	441a      	add	r2, r3
 8019c46:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8019c48:	44b8      	add	r8, r7
 8019c4a:	4423      	add	r3, r4
 8019c4c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8019c50:	4432      	add	r2, r6
 8019c52:	44e0      	add	r8, ip
 8019c54:	4433      	add	r3, r6
 8019c56:	4c0a      	ldr	r4, [pc, #40]	@ (8019c80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8019c58:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8019c5a:	f88d 1014 	strb.w	r1, [sp, #20]
 8019c5e:	a904      	add	r1, sp, #16
 8019c60:	9404      	str	r4, [sp, #16]
 8019c62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019c66:	f8ad 801a 	strh.w	r8, [sp, #26]
 8019c6a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019c72:	4798      	blx	r3
 8019c74:	b008      	add	sp, #32
 8019c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c7a:	bf00      	nop
 8019c7c:	080285d8 	.word	0x080285d8
 8019c80:	080285ec 	.word	0x080285ec

08019c84 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8019c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c86:	4604      	mov	r4, r0
 8019c88:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8019c8c:	3201      	adds	r2, #1
 8019c8e:	d112      	bne.n	8019cb6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8019c90:	2500      	movs	r5, #0
 8019c92:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019c96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019c9a:	6803      	ldr	r3, [r0, #0]
 8019c9c:	9500      	str	r5, [sp, #0]
 8019c9e:	466d      	mov	r5, sp
 8019ca0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019ca4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019ca8:	4629      	mov	r1, r5
 8019caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019cac:	4798      	blx	r3
 8019cae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019cb2:	e884 0003 	stmia.w	r4, {r0, r1}
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	b003      	add	sp, #12
 8019cba:	bd30      	pop	{r4, r5, pc}

08019cbc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8019cbc:	b513      	push	{r0, r1, r4, lr}
 8019cbe:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8019cc2:	4604      	mov	r4, r0
 8019cc4:	3301      	adds	r3, #1
 8019cc6:	d109      	bne.n	8019cdc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8019cc8:	4601      	mov	r1, r0
 8019cca:	4668      	mov	r0, sp
 8019ccc:	f7ff fd4c 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cd0:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cd4:	8423      	strh	r3, [r4, #32]
 8019cd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019cda:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019cdc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8019ce0:	b002      	add	sp, #8
 8019ce2:	bd10      	pop	{r4, pc}

08019ce4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8019ce4:	b513      	push	{r0, r1, r4, lr}
 8019ce6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8019cea:	4604      	mov	r4, r0
 8019cec:	3301      	adds	r3, #1
 8019cee:	d109      	bne.n	8019d04 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8019cf0:	4601      	mov	r1, r0
 8019cf2:	4668      	mov	r0, sp
 8019cf4:	f7ff fd38 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019cf8:	f8bd 3000 	ldrh.w	r3, [sp]
 8019cfc:	8423      	strh	r3, [r4, #32]
 8019cfe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019d02:	8463      	strh	r3, [r4, #34]	@ 0x22
 8019d04:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8019d08:	b002      	add	sp, #8
 8019d0a:	bd10      	pop	{r4, pc}

08019d0c <_ZN8touchgfx6ScreenC1Ev>:
 8019d0c:	b570      	push	{r4, r5, r6, lr}
 8019d0e:	4b17      	ldr	r3, [pc, #92]	@ (8019d6c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8019d10:	4605      	mov	r5, r0
 8019d12:	4a17      	ldr	r2, [pc, #92]	@ (8019d70 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8019d14:	2101      	movs	r1, #1
 8019d16:	f845 3b04 	str.w	r3, [r5], #4
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	6042      	str	r2, [r0, #4]
 8019d1e:	4604      	mov	r4, r0
 8019d20:	8103      	strh	r3, [r0, #8]
 8019d22:	8143      	strh	r3, [r0, #10]
 8019d24:	8183      	strh	r3, [r0, #12]
 8019d26:	81c3      	strh	r3, [r0, #14]
 8019d28:	8203      	strh	r3, [r0, #16]
 8019d2a:	8243      	strh	r3, [r0, #18]
 8019d2c:	8283      	strh	r3, [r0, #20]
 8019d2e:	82c3      	strh	r3, [r0, #22]
 8019d30:	6203      	str	r3, [r0, #32]
 8019d32:	8483      	strh	r3, [r0, #36]	@ 0x24
 8019d34:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8019d36:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8019d3a:	6343      	str	r3, [r0, #52]	@ 0x34
 8019d3c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8019d40:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8019d44:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8019d48:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8019d4c:	4b09      	ldr	r3, [pc, #36]	@ (8019d74 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8019d4e:	4628      	mov	r0, r5
 8019d50:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019d54:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8019d56:	4a08      	ldr	r2, [pc, #32]	@ (8019d78 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8019d58:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019d5c:	4798      	blx	r3
 8019d5e:	6863      	ldr	r3, [r4, #4]
 8019d60:	4628      	mov	r0, r5
 8019d62:	4631      	mov	r1, r6
 8019d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d66:	4798      	blx	r3
 8019d68:	4620      	mov	r0, r4
 8019d6a:	bd70      	pop	{r4, r5, r6, pc}
 8019d6c:	08028614 	.word	0x08028614
 8019d70:	08027d2c 	.word	0x08027d2c
 8019d74:	2401bb2e 	.word	0x2401bb2e
 8019d78:	2401bb2c 	.word	0x2401bb2c

08019d7c <_ZN8touchgfx6Screen4drawEv>:
 8019d7c:	4b09      	ldr	r3, [pc, #36]	@ (8019da4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8019d7e:	b507      	push	{r0, r1, r2, lr}
 8019d80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d84:	2100      	movs	r1, #0
 8019d86:	4b08      	ldr	r3, [pc, #32]	@ (8019da8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8019d88:	9100      	str	r1, [sp, #0]
 8019d8a:	4669      	mov	r1, sp
 8019d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d90:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019d94:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019d98:	6803      	ldr	r3, [r0, #0]
 8019d9a:	689b      	ldr	r3, [r3, #8]
 8019d9c:	4798      	blx	r3
 8019d9e:	b003      	add	sp, #12
 8019da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019da4:	2401bb2c 	.word	0x2401bb2c
 8019da8:	2401bb2e 	.word	0x2401bb2e

08019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8019dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019db0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8019db4:	b089      	sub	sp, #36	@ 0x24
 8019db6:	4680      	mov	r8, r0
 8019db8:	460c      	mov	r4, r1
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	4615      	mov	r5, r2
 8019dbe:	dd0e      	ble.n	8019dde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019dc0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	dd0a      	ble.n	8019dde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019dc8:	4628      	mov	r0, r5
 8019dca:	f7ff ff5b 	bl	8019c84 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019dce:	4621      	mov	r1, r4
 8019dd0:	f7fe fa8e 	bl	80182f0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019dd4:	69eb      	ldr	r3, [r5, #28]
 8019dd6:	b928      	cbnz	r0, 8019de4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8019dd8:	461d      	mov	r5, r3
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d1f4      	bne.n	8019dc8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8019dde:	b009      	add	sp, #36	@ 0x24
 8019de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019de4:	ae04      	add	r6, sp, #16
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	f000 80b5 	beq.w	8019f56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019dec:	682b      	ldr	r3, [r5, #0]
 8019dee:	4629      	mov	r1, r5
 8019df0:	a802      	add	r0, sp, #8
 8019df2:	68db      	ldr	r3, [r3, #12]
 8019df4:	4798      	blx	r3
 8019df6:	4628      	mov	r0, r5
 8019df8:	f7ff ff60 	bl	8019cbc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019dfc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8019e00:	4407      	add	r7, r0
 8019e02:	4628      	mov	r0, r5
 8019e04:	f7ff ff6e 	bl	8019ce4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019e08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019e0c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019e10:	b23f      	sxth	r7, r7
 8019e12:	4418      	add	r0, r3
 8019e14:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019e18:	4621      	mov	r1, r4
 8019e1a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019e1e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019e22:	4630      	mov	r0, r6
 8019e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e28:	f8ad 7010 	strh.w	r7, [sp, #16]
 8019e2c:	f7fa fa54 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8019e30:	4628      	mov	r0, r5
 8019e32:	f7ff ff27 	bl	8019c84 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019e36:	ab06      	add	r3, sp, #24
 8019e38:	4602      	mov	r2, r0
 8019e3a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019e3e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e42:	4611      	mov	r1, r2
 8019e44:	4618      	mov	r0, r3
 8019e46:	f7fa fa47 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8019e4a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019e4e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019e52:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8019e56:	4299      	cmp	r1, r3
 8019e58:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8019e5c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8019e60:	d10b      	bne.n	8019e7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019e62:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019e66:	4552      	cmp	r2, sl
 8019e68:	d107      	bne.n	8019e7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019e6a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019e6e:	455a      	cmp	r2, fp
 8019e70:	d103      	bne.n	8019e7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8019e72:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019e76:	454a      	cmp	r2, r9
 8019e78:	d06d      	beq.n	8019f56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019e7a:	f1bb 0f00 	cmp.w	fp, #0
 8019e7e:	dd65      	ble.n	8019f4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019e80:	f1b9 0f00 	cmp.w	r9, #0
 8019e84:	dd62      	ble.n	8019f4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8019e86:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019e8a:	fa1f f08a 	uxth.w	r0, sl
 8019e8e:	4552      	cmp	r2, sl
 8019e90:	9000      	str	r0, [sp, #0]
 8019e92:	da12      	bge.n	8019eba <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8019e94:	9301      	str	r3, [sp, #4]
 8019e96:	9b00      	ldr	r3, [sp, #0]
 8019e98:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019e9c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019ea0:	1a9a      	subs	r2, r3, r2
 8019ea2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019ea6:	4631      	mov	r1, r6
 8019ea8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019eac:	4640      	mov	r0, r8
 8019eae:	f8ad 2016 	strh.w	r2, [sp, #22]
 8019eb2:	69ea      	ldr	r2, [r5, #28]
 8019eb4:	f7ff ff7a 	bl	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019eb8:	9b01      	ldr	r3, [sp, #4]
 8019eba:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019ebe:	b29f      	uxth	r7, r3
 8019ec0:	429a      	cmp	r2, r3
 8019ec2:	da0d      	bge.n	8019ee0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8019ec4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019ec8:	1aba      	subs	r2, r7, r2
 8019eca:	f8ad a012 	strh.w	sl, [sp, #18]
 8019ece:	4631      	mov	r1, r6
 8019ed0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8019ed4:	4640      	mov	r0, r8
 8019ed6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019eda:	69ea      	ldr	r2, [r5, #28]
 8019edc:	f7ff ff66 	bl	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019ee0:	8822      	ldrh	r2, [r4, #0]
 8019ee2:	445f      	add	r7, fp
 8019ee4:	88a3      	ldrh	r3, [r4, #4]
 8019ee6:	b2bf      	uxth	r7, r7
 8019ee8:	4413      	add	r3, r2
 8019eea:	b23a      	sxth	r2, r7
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	b219      	sxth	r1, r3
 8019ef0:	4291      	cmp	r1, r2
 8019ef2:	dd0d      	ble.n	8019f10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8019ef4:	1bdb      	subs	r3, r3, r7
 8019ef6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019efa:	f8ad a012 	strh.w	sl, [sp, #18]
 8019efe:	4631      	mov	r1, r6
 8019f00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019f04:	4640      	mov	r0, r8
 8019f06:	f8ad 9016 	strh.w	r9, [sp, #22]
 8019f0a:	69ea      	ldr	r2, [r5, #28]
 8019f0c:	f7ff ff4e 	bl	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f10:	88e2      	ldrh	r2, [r4, #6]
 8019f12:	8863      	ldrh	r3, [r4, #2]
 8019f14:	4413      	add	r3, r2
 8019f16:	9a00      	ldr	r2, [sp, #0]
 8019f18:	444a      	add	r2, r9
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	fa1f f982 	uxth.w	r9, r2
 8019f20:	b219      	sxth	r1, r3
 8019f22:	fa0f f289 	sxth.w	r2, r9
 8019f26:	428a      	cmp	r2, r1
 8019f28:	da15      	bge.n	8019f56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8019f2a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019f2e:	eba3 0309 	sub.w	r3, r3, r9
 8019f32:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019f36:	f8ad 1014 	strh.w	r1, [sp, #20]
 8019f3a:	4631      	mov	r1, r6
 8019f3c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019f40:	f8ad 2012 	strh.w	r2, [sp, #18]
 8019f44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019f48:	69ea      	ldr	r2, [r5, #28]
 8019f4a:	e001      	b.n	8019f50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8019f4c:	69ea      	ldr	r2, [r5, #28]
 8019f4e:	4621      	mov	r1, r4
 8019f50:	4640      	mov	r0, r8
 8019f52:	f7ff ff2b 	bl	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8019f56:	4628      	mov	r0, r5
 8019f58:	f7ff fe94 	bl	8019c84 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8019f5c:	6861      	ldr	r1, [r4, #4]
 8019f5e:	4602      	mov	r2, r0
 8019f60:	4633      	mov	r3, r6
 8019f62:	6820      	ldr	r0, [r4, #0]
 8019f64:	c303      	stmia	r3!, {r0, r1}
 8019f66:	4611      	mov	r1, r2
 8019f68:	4630      	mov	r0, r6
 8019f6a:	f7fa f9b5 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 8019f6e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	f77f af33 	ble.w	8019dde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019f78:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	f77f af2e 	ble.w	8019dde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8019f82:	4628      	mov	r0, r5
 8019f84:	f7ff fe9a 	bl	8019cbc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8019f88:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8019f8c:	1a18      	subs	r0, r3, r0
 8019f8e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8019f92:	4628      	mov	r0, r5
 8019f94:	f7ff fea6 	bl	8019ce4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8019f98:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019f9c:	4631      	mov	r1, r6
 8019f9e:	1a18      	subs	r0, r3, r0
 8019fa0:	f8ad 0012 	strh.w	r0, [sp, #18]
 8019fa4:	4628      	mov	r0, r5
 8019fa6:	682b      	ldr	r3, [r5, #0]
 8019fa8:	689b      	ldr	r3, [r3, #8]
 8019faa:	4798      	blx	r3
 8019fac:	e717      	b.n	8019dde <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08019fae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8019fae:	b570      	push	{r4, r5, r6, lr}
 8019fb0:	1d06      	adds	r6, r0, #4
 8019fb2:	b086      	sub	sp, #24
 8019fb4:	460c      	mov	r4, r1
 8019fb6:	2300      	movs	r3, #0
 8019fb8:	4631      	mov	r1, r6
 8019fba:	4605      	mov	r5, r0
 8019fbc:	a802      	add	r0, sp, #8
 8019fbe:	9301      	str	r3, [sp, #4]
 8019fc0:	f7ff fbd2 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019fc4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019fc8:	8822      	ldrh	r2, [r4, #0]
 8019fca:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8019fce:	1ad2      	subs	r2, r2, r3
 8019fd0:	8863      	ldrh	r3, [r4, #2]
 8019fd2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8019fd6:	1a5b      	subs	r3, r3, r1
 8019fd8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019fdc:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019fe0:	aa01      	add	r2, sp, #4
 8019fe2:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019fe6:	4630      	mov	r0, r6
 8019fe8:	f8ad 1016 	strh.w	r1, [sp, #22]
 8019fec:	a904      	add	r1, sp, #16
 8019fee:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019ff2:	f7fa fa49 	bl	8014488 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8019ff6:	9a01      	ldr	r2, [sp, #4]
 8019ff8:	b11a      	cbz	r2, 801a002 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	4628      	mov	r0, r5
 8019ffe:	f7ff fed5 	bl	8019dac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a002:	b006      	add	sp, #24
 801a004:	bd70      	pop	{r4, r5, r6, pc}

0801a006 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a006:	4602      	mov	r2, r0
 801a008:	b530      	push	{r4, r5, lr}
 801a00a:	4604      	mov	r4, r0
 801a00c:	b085      	sub	sp, #20
 801a00e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a012:	460d      	mov	r5, r1
 801a014:	466b      	mov	r3, sp
 801a016:	6851      	ldr	r1, [r2, #4]
 801a018:	c303      	stmia	r3!, {r0, r1}
 801a01a:	4629      	mov	r1, r5
 801a01c:	4668      	mov	r0, sp
 801a01e:	f7fa f95b 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 801a022:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a026:	b12b      	cbz	r3, 801a034 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a028:	4669      	mov	r1, sp
 801a02a:	4620      	mov	r0, r4
 801a02c:	f7ff ffbf 	bl	8019fae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a030:	b005      	add	sp, #20
 801a032:	bd30      	pop	{r4, r5, pc}
 801a034:	3404      	adds	r4, #4
 801a036:	a802      	add	r0, sp, #8
 801a038:	4621      	mov	r1, r4
 801a03a:	f7ff fb95 	bl	8019768 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a03e:	f8bd 3000 	ldrh.w	r3, [sp]
 801a042:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a046:	4669      	mov	r1, sp
 801a048:	4620      	mov	r0, r4
 801a04a:	1a9b      	subs	r3, r3, r2
 801a04c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a050:	f8ad 3000 	strh.w	r3, [sp]
 801a054:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a058:	1a9b      	subs	r3, r3, r2
 801a05a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a05e:	f7fa f9da 	bl	8014416 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a062:	e7e5      	b.n	801a030 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a064 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a064:	460b      	mov	r3, r1
 801a066:	680a      	ldr	r2, [r1, #0]
 801a068:	1d01      	adds	r1, r0, #4
 801a06a:	6992      	ldr	r2, [r2, #24]
 801a06c:	4618      	mov	r0, r3
 801a06e:	4710      	bx	r2

0801a070 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801a070:	4298      	cmp	r0, r3
 801a072:	d200      	bcs.n	801a076 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x6>
 801a074:	b913      	cbnz	r3, 801a07c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0xc>
 801a076:	440a      	add	r2, r1
 801a078:	b210      	sxth	r0, r2
 801a07a:	4770      	bx	lr
 801a07c:	ee07 0a90 	vmov	s15, r0
 801a080:	eddf 4a18 	vldr	s9, [pc, #96]	@ 801a0e4 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x74>
 801a084:	eddf 5a18 	vldr	s11, [pc, #96]	@ 801a0e8 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x78>
 801a088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a08c:	ee07 3a90 	vmov	s15, r3
 801a090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a098:	ee07 2a90 	vmov	s15, r2
 801a09c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a0a0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a0a4:	ee07 1a90 	vmov	s15, r1
 801a0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a0b0:	eee7 5a24 	vfma.f32	s11, s14, s9
 801a0b4:	ee27 5a07 	vmul.f32	s10, s14, s14
 801a0b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a0bc:	eee5 6a25 	vfma.f32	s13, s10, s11
 801a0c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a0c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0cc:	bfcc      	ite	gt
 801a0ce:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a0d2:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a0d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a0da:	ee17 3a90 	vmov	r3, s15
 801a0de:	b218      	sxth	r0, r3
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	402ce6b0 	.word	0x402ce6b0
 801a0e8:	3fd9cd60 	.word	0x3fd9cd60

0801a0ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801a0ec:	4298      	cmp	r0, r3
 801a0ee:	d200      	bcs.n	801a0f2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801a0f0:	b913      	cbnz	r3, 801a0f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801a0f2:	440a      	add	r2, r1
 801a0f4:	b210      	sxth	r0, r2
 801a0f6:	4770      	bx	lr
 801a0f8:	ee07 0a90 	vmov	s15, r0
 801a0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801a100:	ee07 3a90 	vmov	s15, r3
 801a104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a10c:	ee07 2a90 	vmov	s15, r2
 801a110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a114:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801a118:	ee07 1a90 	vmov	s15, r1
 801a11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a120:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a124:	ee67 5a07 	vmul.f32	s11, s14, s14
 801a128:	eee5 6a87 	vfma.f32	s13, s11, s14
 801a12c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a130:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13c:	bfcc      	ite	gt
 801a13e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801a142:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801a146:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a14a:	ee17 3a90 	vmov	r3, s15
 801a14e:	b218      	sxth	r0, r3
 801a150:	4770      	bx	lr

0801a152 <_ZN8touchgfx12TextProviderC1Ev>:
 801a152:	b538      	push	{r3, r4, r5, lr}
 801a154:	2500      	movs	r5, #0
 801a156:	2302      	movs	r3, #2
 801a158:	4604      	mov	r4, r0
 801a15a:	220e      	movs	r2, #14
 801a15c:	7403      	strb	r3, [r0, #16]
 801a15e:	4629      	mov	r1, r5
 801a160:	6145      	str	r5, [r0, #20]
 801a162:	7605      	strb	r5, [r0, #24]
 801a164:	83c5      	strh	r5, [r0, #30]
 801a166:	8405      	strh	r5, [r0, #32]
 801a168:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801a16a:	8705      	strh	r5, [r0, #56]	@ 0x38
 801a16c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801a16e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801a172:	e9c0 5500 	strd	r5, r5, [r0]
 801a176:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801a17a:	304c      	adds	r0, #76	@ 0x4c
 801a17c:	f00b f8f3 	bl	8025366 <memset>
 801a180:	2301      	movs	r3, #1
 801a182:	4620      	mov	r0, r4
 801a184:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801a188:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a18c:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801a190:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801a194:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801a198:	f7f6 fd0e 	bl	8010bb8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a19c:	4620      	mov	r0, r4
 801a19e:	bd38      	pop	{r3, r4, r5, pc}

0801a1a0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801a1a0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a1a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a1a6:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801a1a8:	fab0 f080 	clz	r0, r0
 801a1ac:	0940      	lsrs	r0, r0, #5
 801a1ae:	4770      	bx	lr

0801a1b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a1b0:	b530      	push	{r4, r5, lr}
 801a1b2:	2500      	movs	r5, #0
 801a1b4:	2401      	movs	r4, #1
 801a1b6:	6843      	ldr	r3, [r0, #4]
 801a1b8:	b913      	cbnz	r3, 801a1c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a1ba:	6803      	ldr	r3, [r0, #0]
 801a1bc:	b313      	cbz	r3, 801a204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a1be:	6043      	str	r3, [r0, #4]
 801a1c0:	7e03      	ldrb	r3, [r0, #24]
 801a1c2:	b143      	cbz	r3, 801a1d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a1c4:	6943      	ldr	r3, [r0, #20]
 801a1c6:	b12b      	cbz	r3, 801a1d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a1c8:	881a      	ldrh	r2, [r3, #0]
 801a1ca:	b11a      	cbz	r2, 801a1d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a1cc:	1c9a      	adds	r2, r3, #2
 801a1ce:	6142      	str	r2, [r0, #20]
 801a1d0:	8818      	ldrh	r0, [r3, #0]
 801a1d2:	bd30      	pop	{r4, r5, pc}
 801a1d4:	7605      	strb	r5, [r0, #24]
 801a1d6:	6843      	ldr	r3, [r0, #4]
 801a1d8:	8819      	ldrh	r1, [r3, #0]
 801a1da:	b199      	cbz	r1, 801a204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a1dc:	1c9a      	adds	r2, r3, #2
 801a1de:	2902      	cmp	r1, #2
 801a1e0:	6042      	str	r2, [r0, #4]
 801a1e2:	d1f5      	bne.n	801a1d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a1e4:	7c03      	ldrb	r3, [r0, #16]
 801a1e6:	2b01      	cmp	r3, #1
 801a1e8:	d8e5      	bhi.n	801a1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a1ea:	1c5a      	adds	r2, r3, #1
 801a1ec:	3302      	adds	r3, #2
 801a1ee:	7402      	strb	r2, [r0, #16]
 801a1f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a1f4:	6143      	str	r3, [r0, #20]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d0dd      	beq.n	801a1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a1fa:	881b      	ldrh	r3, [r3, #0]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d0da      	beq.n	801a1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a200:	7604      	strb	r4, [r0, #24]
 801a202:	e7d8      	b.n	801a1b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a204:	2000      	movs	r0, #0
 801a206:	e7e4      	b.n	801a1d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a208:	6001      	str	r1, [r0, #0]
 801a20a:	2100      	movs	r1, #0
 801a20c:	b430      	push	{r4, r5}
 801a20e:	6041      	str	r1, [r0, #4]
 801a210:	6815      	ldr	r5, [r2, #0]
 801a212:	6085      	str	r5, [r0, #8]
 801a214:	6852      	ldr	r2, [r2, #4]
 801a216:	6443      	str	r3, [r0, #68]	@ 0x44
 801a218:	9b02      	ldr	r3, [sp, #8]
 801a21a:	60c2      	str	r2, [r0, #12]
 801a21c:	7401      	strb	r1, [r0, #16]
 801a21e:	6141      	str	r1, [r0, #20]
 801a220:	7601      	strb	r1, [r0, #24]
 801a222:	8701      	strh	r1, [r0, #56]	@ 0x38
 801a224:	8401      	strh	r1, [r0, #32]
 801a226:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801a22a:	6483      	str	r3, [r0, #72]	@ 0x48
 801a22c:	bc30      	pop	{r4, r5}
 801a22e:	f7f6 bcc3 	b.w	8010bb8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a232 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801a232:	b408      	push	{r3}
 801a234:	b510      	push	{r4, lr}
 801a236:	b085      	sub	sp, #20
 801a238:	ac07      	add	r4, sp, #28
 801a23a:	f854 3b04 	ldr.w	r3, [r4], #4
 801a23e:	9300      	str	r3, [sp, #0]
 801a240:	4613      	mov	r3, r2
 801a242:	4622      	mov	r2, r4
 801a244:	9403      	str	r4, [sp, #12]
 801a246:	f7ff ffdf 	bl	801a208 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a24a:	b005      	add	sp, #20
 801a24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a250:	b001      	add	sp, #4
 801a252:	4770      	bx	lr

0801a254 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a256:	4605      	mov	r5, r0
 801a258:	4608      	mov	r0, r1
 801a25a:	b1f1      	cbz	r1, 801a29a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a25c:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801a260:	460b      	mov	r3, r1
 801a262:	f101 0708 	add.w	r7, r1, #8
 801a266:	4622      	mov	r2, r4
 801a268:	6818      	ldr	r0, [r3, #0]
 801a26a:	3308      	adds	r3, #8
 801a26c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a270:	4626      	mov	r6, r4
 801a272:	42bb      	cmp	r3, r7
 801a274:	c603      	stmia	r6!, {r0, r1}
 801a276:	4634      	mov	r4, r6
 801a278:	d1f6      	bne.n	801a268 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a27a:	6818      	ldr	r0, [r3, #0]
 801a27c:	6030      	str	r0, [r6, #0]
 801a27e:	4610      	mov	r0, r2
 801a280:	889b      	ldrh	r3, [r3, #4]
 801a282:	80b3      	strh	r3, [r6, #4]
 801a284:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801a288:	015b      	lsls	r3, r3, #5
 801a28a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a28e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801a292:	430b      	orrs	r3, r1
 801a294:	425b      	negs	r3, r3
 801a296:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801a29a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a29c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a29c:	b538      	push	{r3, r4, r5, lr}
 801a29e:	460c      	mov	r4, r1
 801a2a0:	6811      	ldr	r1, [r2, #0]
 801a2a2:	4610      	mov	r0, r2
 801a2a4:	68cd      	ldr	r5, [r1, #12]
 801a2a6:	4619      	mov	r1, r3
 801a2a8:	47a8      	blx	r5
 801a2aa:	2800      	cmp	r0, #0
 801a2ac:	bf08      	it	eq
 801a2ae:	4620      	moveq	r0, r4
 801a2b0:	bd38      	pop	{r3, r4, r5, pc}
	...

0801a2b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2b6:	4604      	mov	r4, r0
 801a2b8:	4615      	mov	r5, r2
 801a2ba:	4608      	mov	r0, r1
 801a2bc:	b93a      	cbnz	r2, 801a2ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a2be:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a2c2:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801a2c6:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801a2ca:	4628      	mov	r0, r5
 801a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2ce:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a2d2:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 801a2d6:	8893      	ldrh	r3, [r2, #4]
 801a2d8:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a2dc:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a2e0:	79ee      	ldrb	r6, [r5, #7]
 801a2e2:	4316      	orrs	r6, r2
 801a2e4:	19da      	adds	r2, r3, r7
 801a2e6:	b291      	uxth	r1, r2
 801a2e8:	b2b7      	uxth	r7, r6
 801a2ea:	291d      	cmp	r1, #29
 801a2ec:	d87b      	bhi.n	801a3e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a2ee:	2201      	movs	r2, #1
 801a2f0:	10f6      	asrs	r6, r6, #3
 801a2f2:	408a      	lsls	r2, r1
 801a2f4:	4974      	ldr	r1, [pc, #464]	@ (801a4c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801a2f6:	420a      	tst	r2, r1
 801a2f8:	d12e      	bne.n	801a358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801a2fa:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801a2fe:	d072      	beq.n	801a3e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a300:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801a304:	462b      	mov	r3, r5
 801a306:	f105 0e08 	add.w	lr, r5, #8
 801a30a:	4615      	mov	r5, r2
 801a30c:	6818      	ldr	r0, [r3, #0]
 801a30e:	3308      	adds	r3, #8
 801a310:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a314:	4694      	mov	ip, r2
 801a316:	4573      	cmp	r3, lr
 801a318:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a31c:	4662      	mov	r2, ip
 801a31e:	d1f5      	bne.n	801a30c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a320:	6818      	ldr	r0, [r3, #0]
 801a322:	f8cc 0000 	str.w	r0, [ip]
 801a326:	889b      	ldrh	r3, [r3, #4]
 801a328:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a32c:	b2b3      	uxth	r3, r6
 801a32e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801a332:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801a336:	1aca      	subs	r2, r1, r3
 801a338:	1bcf      	subs	r7, r1, r7
 801a33a:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801a33e:	b292      	uxth	r2, r2
 801a340:	1afb      	subs	r3, r7, r3
 801a342:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801a346:	10d2      	asrs	r2, r2, #3
 801a348:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801a34c:	4302      	orrs	r2, r0
 801a34e:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801a352:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a356:	e7b8      	b.n	801a2ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a358:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801a35a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a35e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801a360:	f640 6333 	movw	r3, #3635	@ 0xe33
 801a364:	4299      	cmp	r1, r3
 801a366:	d110      	bne.n	801a38a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801a368:	6803      	ldr	r3, [r0, #0]
 801a36a:	68db      	ldr	r3, [r3, #12]
 801a36c:	4798      	blx	r3
 801a36e:	7b41      	ldrb	r1, [r0, #13]
 801a370:	00cb      	lsls	r3, r1, #3
 801a372:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a376:	7a03      	ldrb	r3, [r0, #8]
 801a378:	0648      	lsls	r0, r1, #25
 801a37a:	ea43 0302 	orr.w	r3, r3, r2
 801a37e:	bf44      	itt	mi
 801a380:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a384:	b21b      	sxthmi	r3, r3
 801a386:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a38a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801a38e:	462a      	mov	r2, r5
 801a390:	f105 0c08 	add.w	ip, r5, #8
 801a394:	443b      	add	r3, r7
 801a396:	4433      	add	r3, r6
 801a398:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801a39c:	b29b      	uxth	r3, r3
 801a39e:	4635      	mov	r5, r6
 801a3a0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a3a4:	6810      	ldr	r0, [r2, #0]
 801a3a6:	3208      	adds	r2, #8
 801a3a8:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a3ac:	4637      	mov	r7, r6
 801a3ae:	4562      	cmp	r2, ip
 801a3b0:	c703      	stmia	r7!, {r0, r1}
 801a3b2:	463e      	mov	r6, r7
 801a3b4:	d1f6      	bne.n	801a3a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801a3b6:	6810      	ldr	r0, [r2, #0]
 801a3b8:	6038      	str	r0, [r7, #0]
 801a3ba:	8892      	ldrh	r2, [r2, #4]
 801a3bc:	80ba      	strh	r2, [r7, #4]
 801a3be:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a3c2:	10db      	asrs	r3, r3, #3
 801a3c4:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a3c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a3cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a3d0:	4313      	orrs	r3, r2
 801a3d2:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801a3d6:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a3da:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801a3de:	1a9b      	subs	r3, r3, r2
 801a3e0:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801a3e4:	e771      	b.n	801a2ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a3e6:	f023 0204 	bic.w	r2, r3, #4
 801a3ea:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801a3ee:	428a      	cmp	r2, r1
 801a3f0:	d003      	beq.n	801a3fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801a3f2:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801a3f6:	4293      	cmp	r3, r2
 801a3f8:	d120      	bne.n	801a43c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801a3fa:	3b01      	subs	r3, #1
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	4629      	mov	r1, r5
 801a400:	4620      	mov	r0, r4
 801a402:	b29b      	uxth	r3, r3
 801a404:	f7ff ff4a 	bl	801a29c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a408:	7b41      	ldrb	r1, [r0, #13]
 801a40a:	00cb      	lsls	r3, r1, #3
 801a40c:	0649      	lsls	r1, r1, #25
 801a40e:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a412:	7a03      	ldrb	r3, [r0, #8]
 801a414:	ea43 0302 	orr.w	r3, r3, r2
 801a418:	bf44      	itt	mi
 801a41a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a41e:	b21b      	sxthmi	r3, r3
 801a420:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a424:	7b6b      	ldrb	r3, [r5, #13]
 801a426:	7aaa      	ldrb	r2, [r5, #10]
 801a428:	005b      	lsls	r3, r3, #1
 801a42a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a42e:	4313      	orrs	r3, r2
 801a430:	115a      	asrs	r2, r3, #5
 801a432:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a436:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a43a:	e035      	b.n	801a4a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801a43c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a440:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801a444:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801a448:	7a2a      	ldrb	r2, [r5, #8]
 801a44a:	ea42 0201 	orr.w	r2, r2, r1
 801a44e:	f640 6109 	movw	r1, #3593	@ 0xe09
 801a452:	bf1c      	itt	ne
 801a454:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801a458:	b212      	sxthne	r2, r2
 801a45a:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801a45e:	f023 0210 	bic.w	r2, r3, #16
 801a462:	428a      	cmp	r2, r1
 801a464:	d003      	beq.n	801a46e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801a466:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a46a:	4293      	cmp	r3, r2
 801a46c:	d129      	bne.n	801a4c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801a46e:	7b6e      	ldrb	r6, [r5, #13]
 801a470:	4629      	mov	r1, r5
 801a472:	0076      	lsls	r6, r6, #1
 801a474:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801a478:	7aae      	ldrb	r6, [r5, #10]
 801a47a:	4316      	orrs	r6, r2
 801a47c:	f640 6213 	movw	r2, #3603	@ 0xe13
 801a480:	4293      	cmp	r3, r2
 801a482:	4602      	mov	r2, r0
 801a484:	4620      	mov	r0, r4
 801a486:	bf16      	itet	ne
 801a488:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a48c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801a490:	b29b      	uxthne	r3, r3
 801a492:	f7ff ff03 	bl	801a29c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a496:	7b43      	ldrb	r3, [r0, #13]
 801a498:	7a82      	ldrb	r2, [r0, #10]
 801a49a:	005b      	lsls	r3, r3, #1
 801a49c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a4a0:	4313      	orrs	r3, r2
 801a4a2:	1af6      	subs	r6, r6, r3
 801a4a4:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801a4a8:	7b69      	ldrb	r1, [r5, #13]
 801a4aa:	00cb      	lsls	r3, r1, #3
 801a4ac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a4b0:	7a2b      	ldrb	r3, [r5, #8]
 801a4b2:	4313      	orrs	r3, r2
 801a4b4:	064a      	lsls	r2, r1, #25
 801a4b6:	bf44      	itt	mi
 801a4b8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a4bc:	b21b      	sxthmi	r3, r3
 801a4be:	1bdb      	subs	r3, r3, r7
 801a4c0:	e747      	b.n	801a352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	e7b7      	b.n	801a436 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801a4c6:	bf00      	nop
 801a4c8:	3fc00079 	.word	0x3fc00079

0801a4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a4d0:	4604      	mov	r4, r0
 801a4d2:	b942      	cbnz	r2, 801a4e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a4d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a4d8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801a4dc:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801a4e0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801a4e4:	e047      	b.n	801a576 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a4e6:	7b51      	ldrb	r1, [r2, #13]
 801a4e8:	8893      	ldrh	r3, [r2, #4]
 801a4ea:	010d      	lsls	r5, r1, #4
 801a4ec:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801a4f0:	79d5      	ldrb	r5, [r2, #7]
 801a4f2:	4305      	orrs	r5, r0
 801a4f4:	2d04      	cmp	r5, #4
 801a4f6:	bfcc      	ite	gt
 801a4f8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a4fc:	f04f 0e01 	movle.w	lr, #1
 801a500:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801a504:	f200 80ab 	bhi.w	801a65e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a508:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801a50c:	4283      	cmp	r3, r0
 801a50e:	d216      	bcs.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a510:	f240 605b 	movw	r0, #1627	@ 0x65b
 801a514:	4283      	cmp	r3, r0
 801a516:	d859      	bhi.n	801a5cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a518:	f240 6057 	movw	r0, #1623	@ 0x657
 801a51c:	4283      	cmp	r3, r0
 801a51e:	d20e      	bcs.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a520:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a524:	d24a      	bcs.n	801a5bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a526:	f240 604e 	movw	r0, #1614	@ 0x64e
 801a52a:	4283      	cmp	r3, r0
 801a52c:	d207      	bcs.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a52e:	f240 601a 	movw	r0, #1562	@ 0x61a
 801a532:	4283      	cmp	r3, r0
 801a534:	d02a      	beq.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a536:	d821      	bhi.n	801a57c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a538:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801a53c:	d35b      	bcc.n	801a5f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a53e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801a542:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a546:	f040 80d0 	bne.w	801a6ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a54a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801a54e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a552:	f040 80ca 	bne.w	801a6ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a556:	00cb      	lsls	r3, r1, #3
 801a558:	0649      	lsls	r1, r1, #25
 801a55a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a55e:	7a13      	ldrb	r3, [r2, #8]
 801a560:	ea43 0300 	orr.w	r3, r3, r0
 801a564:	bf44      	itt	mi
 801a566:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a56a:	b21b      	sxthmi	r3, r3
 801a56c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a570:	1b5d      	subs	r5, r3, r5
 801a572:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a576:	4610      	mov	r0, r2
 801a578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a57c:	f240 604b 	movw	r0, #1611	@ 0x64b
 801a580:	4283      	cmp	r3, r0
 801a582:	d338      	bcc.n	801a5f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a584:	f240 604c 	movw	r0, #1612	@ 0x64c
 801a588:	4283      	cmp	r3, r0
 801a58a:	d9d8      	bls.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a58c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801a590:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801a594:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a598:	f040 80f3 	bne.w	801a782 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a59c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a5a0:	f040 80ef 	bne.w	801a782 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801a5a4:	00cb      	lsls	r3, r1, #3
 801a5a6:	064e      	lsls	r6, r1, #25
 801a5a8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a5ac:	7a13      	ldrb	r3, [r2, #8]
 801a5ae:	ea43 0300 	orr.w	r3, r3, r0
 801a5b2:	bf44      	itt	mi
 801a5b4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a5b8:	b21b      	sxthmi	r3, r3
 801a5ba:	e7d9      	b.n	801a570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801a5bc:	f240 6054 	movw	r0, #1620	@ 0x654
 801a5c0:	4283      	cmp	r3, r0
 801a5c2:	d8e3      	bhi.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a5c4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801a5c8:	d9e0      	bls.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a5ca:	e7b8      	b.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a5cc:	f240 6074 	movw	r0, #1652	@ 0x674
 801a5d0:	4283      	cmp	r3, r0
 801a5d2:	d0b4      	beq.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a5d4:	d82d      	bhi.n	801a632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801a5d6:	f240 605e 	movw	r0, #1630	@ 0x65e
 801a5da:	4283      	cmp	r3, r0
 801a5dc:	d804      	bhi.n	801a5e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801a5de:	f240 605d 	movw	r0, #1629	@ 0x65d
 801a5e2:	4283      	cmp	r3, r0
 801a5e4:	d3d2      	bcc.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a5e6:	e7aa      	b.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a5e8:	f240 605f 	movw	r0, #1631	@ 0x65f
 801a5ec:	4283      	cmp	r3, r0
 801a5ee:	d0cd      	beq.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a5f0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801a5f4:	d0a3      	beq.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a5f6:	00cb      	lsls	r3, r1, #3
 801a5f8:	0649      	lsls	r1, r1, #25
 801a5fa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801a5fe:	7a13      	ldrb	r3, [r2, #8]
 801a600:	ea43 0300 	orr.w	r3, r3, r0
 801a604:	bf44      	itt	mi
 801a606:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a60a:	b21b      	sxthmi	r3, r3
 801a60c:	1b5d      	subs	r5, r3, r5
 801a60e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a612:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a616:	7b53      	ldrb	r3, [r2, #13]
 801a618:	015b      	lsls	r3, r3, #5
 801a61a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801a61e:	7993      	ldrb	r3, [r2, #6]
 801a620:	430b      	orrs	r3, r1
 801a622:	2105      	movs	r1, #5
 801a624:	005b      	lsls	r3, r3, #1
 801a626:	fb93 f3f1 	sdiv	r3, r3, r1
 801a62a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801a62e:	440b      	add	r3, r1
 801a630:	e756      	b.n	801a4e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801a632:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801a636:	4283      	cmp	r3, r0
 801a638:	d809      	bhi.n	801a64e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801a63a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801a63e:	4283      	cmp	r3, r0
 801a640:	f4bf af7d 	bcs.w	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a644:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801a648:	2b05      	cmp	r3, #5
 801a64a:	d8d4      	bhi.n	801a5f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a64c:	e777      	b.n	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a64e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801a652:	4283      	cmp	r3, r0
 801a654:	d09a      	beq.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a656:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801a65a:	4283      	cmp	r3, r0
 801a65c:	e7ca      	b.n	801a5f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801a65e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801a662:	d22b      	bcs.n	801a6bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801a664:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801a668:	4283      	cmp	r3, r0
 801a66a:	d28f      	bcs.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a66c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801a670:	4283      	cmp	r3, r0
 801a672:	d816      	bhi.n	801a6a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801a674:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801a678:	4283      	cmp	r3, r0
 801a67a:	f4bf af60 	bcs.w	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a67e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801a682:	4283      	cmp	r3, r0
 801a684:	d80a      	bhi.n	801a69c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801a686:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801a68a:	4283      	cmp	r3, r0
 801a68c:	f4bf af57 	bcs.w	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a690:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801a694:	4283      	cmp	r3, r0
 801a696:	f43f af79 	beq.w	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a69a:	e7ac      	b.n	801a5f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a69c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801a6a0:	e7f8      	b.n	801a694 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801a6a2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801a6a6:	4283      	cmp	r3, r0
 801a6a8:	d802      	bhi.n	801a6b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801a6aa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a6ae:	e798      	b.n	801a5e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801a6b0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801a6b4:	4283      	cmp	r3, r0
 801a6b6:	f47f af42 	bne.w	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6ba:	e767      	b.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6bc:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801a6c0:	4283      	cmp	r3, r0
 801a6c2:	f43f af63 	beq.w	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6c6:	d802      	bhi.n	801a6ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801a6c8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801a6cc:	e7f2      	b.n	801a6b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801a6ce:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801a6d2:	4283      	cmp	r3, r0
 801a6d4:	d805      	bhi.n	801a6e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801a6d6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801a6da:	4283      	cmp	r3, r0
 801a6dc:	f4ff af2f 	bcc.w	801a53e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a6e0:	e754      	b.n	801a58c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a6e2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801a6e6:	4283      	cmp	r3, r0
 801a6e8:	e7af      	b.n	801a64a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801a6ea:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a6ee:	4617      	mov	r7, r2
 801a6f0:	f102 0808 	add.w	r8, r2, #8
 801a6f4:	4666      	mov	r6, ip
 801a6f6:	6838      	ldr	r0, [r7, #0]
 801a6f8:	3708      	adds	r7, #8
 801a6fa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a6fe:	46e6      	mov	lr, ip
 801a700:	4547      	cmp	r7, r8
 801a702:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801a706:	46f4      	mov	ip, lr
 801a708:	d1f5      	bne.n	801a6f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801a70a:	6838      	ldr	r0, [r7, #0]
 801a70c:	f8ce 0000 	str.w	r0, [lr]
 801a710:	88b9      	ldrh	r1, [r7, #4]
 801a712:	f8ae 1004 	strh.w	r1, [lr, #4]
 801a716:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a71a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a71e:	d009      	beq.n	801a734 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801a720:	7b51      	ldrb	r1, [r2, #13]
 801a722:	7992      	ldrb	r2, [r2, #6]
 801a724:	0149      	lsls	r1, r1, #5
 801a726:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a72a:	4311      	orrs	r1, r2
 801a72c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a730:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a734:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a738:	b2ad      	uxth	r5, r5
 801a73a:	d00d      	beq.n	801a758 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801a73c:	442b      	add	r3, r5
 801a73e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a742:	b29b      	uxth	r3, r3
 801a744:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a748:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a74c:	10db      	asrs	r3, r3, #3
 801a74e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a752:	4313      	orrs	r3, r2
 801a754:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a758:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a75c:	00cb      	lsls	r3, r1, #3
 801a75e:	064f      	lsls	r7, r1, #25
 801a760:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a764:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a768:	ea43 0302 	orr.w	r3, r3, r2
 801a76c:	bf44      	itt	mi
 801a76e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a772:	b21b      	sxthmi	r3, r3
 801a774:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801a778:	1b5b      	subs	r3, r3, r5
 801a77a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801a77e:	4632      	mov	r2, r6
 801a780:	e6f9      	b.n	801a576 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a782:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801a786:	4617      	mov	r7, r2
 801a788:	f102 0908 	add.w	r9, r2, #8
 801a78c:	4666      	mov	r6, ip
 801a78e:	6838      	ldr	r0, [r7, #0]
 801a790:	3708      	adds	r7, #8
 801a792:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801a796:	46e0      	mov	r8, ip
 801a798:	454f      	cmp	r7, r9
 801a79a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801a79e:	46c4      	mov	ip, r8
 801a7a0:	d1f5      	bne.n	801a78e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801a7a2:	6838      	ldr	r0, [r7, #0]
 801a7a4:	f8c8 0000 	str.w	r0, [r8]
 801a7a8:	88b9      	ldrh	r1, [r7, #4]
 801a7aa:	f8a8 1004 	strh.w	r1, [r8, #4]
 801a7ae:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801a7b2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801a7b6:	d009      	beq.n	801a7cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801a7b8:	7b51      	ldrb	r1, [r2, #13]
 801a7ba:	7992      	ldrb	r2, [r2, #6]
 801a7bc:	0149      	lsls	r1, r1, #5
 801a7be:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801a7c2:	4311      	orrs	r1, r2
 801a7c4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801a7c8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801a7cc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801a7d0:	d00e      	beq.n	801a7f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801a7d2:	eba3 030e 	sub.w	r3, r3, lr
 801a7d6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801a7da:	b29b      	uxth	r3, r3
 801a7dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801a7e0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801a7e4:	10db      	asrs	r3, r3, #3
 801a7e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801a7ea:	4313      	orrs	r3, r2
 801a7ec:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801a7f0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801a7f4:	00cb      	lsls	r3, r1, #3
 801a7f6:	0648      	lsls	r0, r1, #25
 801a7f8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801a7fc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801a800:	ea43 0302 	orr.w	r3, r3, r2
 801a804:	bf44      	itt	mi
 801a806:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801a80a:	b21b      	sxthmi	r3, r3
 801a80c:	1b5d      	subs	r5, r3, r5
 801a80e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801a812:	e7b4      	b.n	801a77e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801a814 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a818:	461e      	mov	r6, r3
 801a81a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a81c:	4604      	mov	r4, r0
 801a81e:	4617      	mov	r7, r2
 801a820:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a824:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a828:	f7f6 f920 	bl	8010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a82c:	4605      	mov	r5, r0
 801a82e:	b918      	cbnz	r0, 801a838 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801a830:	6030      	str	r0, [r6, #0]
 801a832:	4628      	mov	r0, r5
 801a834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a838:	683b      	ldr	r3, [r7, #0]
 801a83a:	4601      	mov	r1, r0
 801a83c:	4638      	mov	r0, r7
 801a83e:	68db      	ldr	r3, [r3, #12]
 801a840:	4798      	blx	r3
 801a842:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a846:	4602      	mov	r2, r0
 801a848:	6030      	str	r0, [r6, #0]
 801a84a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a84e:	d213      	bcs.n	801a878 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801a850:	4643      	mov	r3, r8
 801a852:	4639      	mov	r1, r7
 801a854:	4620      	mov	r0, r4
 801a856:	f7ff fe39 	bl	801a4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a85a:	6030      	str	r0, [r6, #0]
 801a85c:	6833      	ldr	r3, [r6, #0]
 801a85e:	b143      	cbz	r3, 801a872 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801a860:	7b5a      	ldrb	r2, [r3, #13]
 801a862:	7a9b      	ldrb	r3, [r3, #10]
 801a864:	0052      	lsls	r2, r2, #1
 801a866:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a86a:	4313      	orrs	r3, r2
 801a86c:	bf0c      	ite	eq
 801a86e:	2301      	moveq	r3, #1
 801a870:	2300      	movne	r3, #0
 801a872:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a876:	e7dc      	b.n	801a832 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801a878:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a87c:	b29b      	uxth	r3, r3
 801a87e:	2b7f      	cmp	r3, #127	@ 0x7f
 801a880:	d804      	bhi.n	801a88c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801a882:	4639      	mov	r1, r7
 801a884:	4620      	mov	r0, r4
 801a886:	f7ff fd15 	bl	801a2b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a88a:	e7e6      	b.n	801a85a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801a88c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801a890:	2b00      	cmp	r3, #0
 801a892:	d0e3      	beq.n	801a85c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a894:	f640 1302 	movw	r3, #2306	@ 0x902
 801a898:	429d      	cmp	r5, r3
 801a89a:	d1df      	bne.n	801a85c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801a89c:	4601      	mov	r1, r0
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f7ff fcd8 	bl	801a254 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a8a4:	e7d9      	b.n	801a85a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801a8a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801a8a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a8aa:	461e      	mov	r6, r3
 801a8ac:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	4617      	mov	r7, r2
 801a8b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a8b6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801a8ba:	f7f6 f8d7 	bl	8010a6c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a8be:	4605      	mov	r5, r0
 801a8c0:	b918      	cbnz	r0, 801a8ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801a8c2:	6030      	str	r0, [r6, #0]
 801a8c4:	4628      	mov	r0, r5
 801a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a8ca:	683b      	ldr	r3, [r7, #0]
 801a8cc:	4601      	mov	r1, r0
 801a8ce:	4638      	mov	r0, r7
 801a8d0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801a8d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a8d8:	47c8      	blx	r9
 801a8da:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801a8de:	4602      	mov	r2, r0
 801a8e0:	6030      	str	r0, [r6, #0]
 801a8e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a8e6:	d213      	bcs.n	801a910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801a8e8:	4643      	mov	r3, r8
 801a8ea:	4639      	mov	r1, r7
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	f7ff fded 	bl	801a4cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801a8f2:	6030      	str	r0, [r6, #0]
 801a8f4:	6833      	ldr	r3, [r6, #0]
 801a8f6:	b143      	cbz	r3, 801a90a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801a8f8:	7b5a      	ldrb	r2, [r3, #13]
 801a8fa:	7a9b      	ldrb	r3, [r3, #10]
 801a8fc:	0052      	lsls	r2, r2, #1
 801a8fe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801a902:	4313      	orrs	r3, r2
 801a904:	bf0c      	ite	eq
 801a906:	2301      	moveq	r3, #1
 801a908:	2300      	movne	r3, #0
 801a90a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801a90e:	e7d9      	b.n	801a8c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801a910:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801a914:	b29b      	uxth	r3, r3
 801a916:	2b7f      	cmp	r3, #127	@ 0x7f
 801a918:	d804      	bhi.n	801a924 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801a91a:	4639      	mov	r1, r7
 801a91c:	4620      	mov	r0, r4
 801a91e:	f7ff fcc9 	bl	801a2b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801a922:	e7e6      	b.n	801a8f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801a924:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d0e3      	beq.n	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a92c:	f640 1302 	movw	r3, #2306	@ 0x902
 801a930:	429d      	cmp	r5, r3
 801a932:	d1df      	bne.n	801a8f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801a934:	4601      	mov	r1, r0
 801a936:	4620      	mov	r0, r4
 801a938:	f7ff fc8c 	bl	801a254 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801a93c:	e7d9      	b.n	801a8f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801a93e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801a93e:	b510      	push	{r4, lr}
 801a940:	4604      	mov	r4, r0
 801a942:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801a946:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a948:	b1e1      	cbz	r1, 801a984 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a94a:	2b0a      	cmp	r3, #10
 801a94c:	d02d      	beq.n	801a9aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a94e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801a950:	3901      	subs	r1, #1
 801a952:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801a956:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801a958:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801a95c:	1c51      	adds	r1, r2, #1
 801a95e:	b289      	uxth	r1, r1
 801a960:	2901      	cmp	r1, #1
 801a962:	bf8a      	itet	hi
 801a964:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801a968:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801a96a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801a96c:	1c5a      	adds	r2, r3, #1
 801a96e:	8722      	strh	r2, [r4, #56]	@ 0x38
 801a970:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a972:	4413      	add	r3, r2
 801a974:	b29b      	uxth	r3, r3
 801a976:	2b09      	cmp	r3, #9
 801a978:	bf88      	it	hi
 801a97a:	3b0a      	subhi	r3, #10
 801a97c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a980:	8458      	strh	r0, [r3, #34]	@ 0x22
 801a982:	e7de      	b.n	801a942 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801a984:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a986:	2b0a      	cmp	r3, #10
 801a988:	d00f      	beq.n	801a9aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801a98a:	4620      	mov	r0, r4
 801a98c:	f7ff fc10 	bl	801a1b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801a990:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801a992:	1c5a      	adds	r2, r3, #1
 801a994:	8722      	strh	r2, [r4, #56]	@ 0x38
 801a996:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801a998:	4413      	add	r3, r2
 801a99a:	b29b      	uxth	r3, r3
 801a99c:	2b09      	cmp	r3, #9
 801a99e:	bf88      	it	hi
 801a9a0:	3b0a      	subhi	r3, #10
 801a9a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a9a6:	8458      	strh	r0, [r3, #34]	@ 0x22
 801a9a8:	e7ec      	b.n	801a984 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801a9aa:	bd10      	pop	{r4, pc}

0801a9ac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801a9ac:	b538      	push	{r3, r4, r5, lr}
 801a9ae:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801a9b6:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801a9b8:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801a9ba:	3a01      	subs	r2, #1
 801a9bc:	8702      	strh	r2, [r0, #56]	@ 0x38
 801a9be:	1c5a      	adds	r2, r3, #1
 801a9c0:	b292      	uxth	r2, r2
 801a9c2:	2a09      	cmp	r2, #9
 801a9c4:	bf8a      	itet	hi
 801a9c6:	3b09      	subhi	r3, #9
 801a9c8:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801a9ca:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801a9cc:	f7ff ffb7 	bl	801a93e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801a9d0:	8c23      	ldrh	r3, [r4, #32]
 801a9d2:	2b01      	cmp	r3, #1
 801a9d4:	bf9c      	itt	ls
 801a9d6:	3301      	addls	r3, #1
 801a9d8:	8423      	strhls	r3, [r4, #32]
 801a9da:	8be3      	ldrh	r3, [r4, #30]
 801a9dc:	b90b      	cbnz	r3, 801a9e2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801a9de:	2302      	movs	r3, #2
 801a9e0:	83e3      	strh	r3, [r4, #30]
 801a9e2:	8be3      	ldrh	r3, [r4, #30]
 801a9e4:	4628      	mov	r0, r5
 801a9e6:	3b01      	subs	r3, #1
 801a9e8:	b29b      	uxth	r3, r3
 801a9ea:	83e3      	strh	r3, [r4, #30]
 801a9ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a9f0:	8365      	strh	r5, [r4, #26]
 801a9f2:	bd38      	pop	{r3, r4, r5, pc}

0801a9f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801a9f4:	428a      	cmp	r2, r1
 801a9f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a9fa:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801a9fc:	d932      	bls.n	801aa64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801a9fe:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801aa00:	1a54      	subs	r4, r2, r1
 801aa02:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801aa06:	19ee      	adds	r6, r5, r7
 801aa08:	fa1f fe84 	uxth.w	lr, r4
 801aa0c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801aa10:	3e01      	subs	r6, #1
 801aa12:	b2b4      	uxth	r4, r6
 801aa14:	eba4 090e 	sub.w	r9, r4, lr
 801aa18:	fa1f f989 	uxth.w	r9, r9
 801aa1c:	2c09      	cmp	r4, #9
 801aa1e:	4626      	mov	r6, r4
 801aa20:	bf88      	it	hi
 801aa22:	f1a4 060a 	subhi.w	r6, r4, #10
 801aa26:	f1bc 0f00 	cmp.w	ip, #0
 801aa2a:	f104 34ff 	add.w	r4, r4, #4294967295
 801aa2e:	bf08      	it	eq
 801aa30:	f04f 0c02 	moveq.w	ip, #2
 801aa34:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801aa38:	b2a4      	uxth	r4, r4
 801aa3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa3e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801aa42:	454c      	cmp	r4, r9
 801aa44:	fa1f fc8c 	uxth.w	ip, ip
 801aa48:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801aa4c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801aa50:	d1e4      	bne.n	801aa1c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801aa52:	eba5 050e 	sub.w	r5, r5, lr
 801aa56:	eb0e 0408 	add.w	r4, lr, r8
 801aa5a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801aa5e:	8705      	strh	r5, [r0, #56]	@ 0x38
 801aa60:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801aa64:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801aa66:	250a      	movs	r5, #10
 801aa68:	1a64      	subs	r4, r4, r1
 801aa6a:	4439      	add	r1, r7
 801aa6c:	b289      	uxth	r1, r1
 801aa6e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801aa70:	2909      	cmp	r1, #9
 801aa72:	bf88      	it	hi
 801aa74:	390a      	subhi	r1, #10
 801aa76:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801aa78:	b18a      	cbz	r2, 801aa9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801aa7a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801aa7c:	3a01      	subs	r2, #1
 801aa7e:	3101      	adds	r1, #1
 801aa80:	b292      	uxth	r2, r2
 801aa82:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801aa86:	8701      	strh	r1, [r0, #56]	@ 0x38
 801aa88:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801aa8a:	b901      	cbnz	r1, 801aa8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801aa8c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801aa8e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801aa90:	3901      	subs	r1, #1
 801aa92:	b289      	uxth	r1, r1
 801aa94:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801aa96:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801aa9a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801aa9c:	e7ec      	b.n	801aa78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801aa9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaa2:	f7ff bf4c 	b.w	801a93e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801aaa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801aaa6:	b570      	push	{r4, r5, r6, lr}
 801aaa8:	2500      	movs	r5, #0
 801aaaa:	4295      	cmp	r5, r2
 801aaac:	d011      	beq.n	801aad2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801aaae:	8bc4      	ldrh	r4, [r0, #30]
 801aab0:	f831 6b02 	ldrh.w	r6, [r1], #2
 801aab4:	4414      	add	r4, r2
 801aab6:	3c01      	subs	r4, #1
 801aab8:	1b64      	subs	r4, r4, r5
 801aaba:	b2a4      	uxth	r4, r4
 801aabc:	2c01      	cmp	r4, #1
 801aabe:	bf88      	it	hi
 801aac0:	3c02      	subhi	r4, #2
 801aac2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801aac6:	8b64      	ldrh	r4, [r4, #26]
 801aac8:	42b4      	cmp	r4, r6
 801aaca:	d117      	bne.n	801aafc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801aacc:	3501      	adds	r5, #1
 801aace:	b2ad      	uxth	r5, r5
 801aad0:	e7eb      	b.n	801aaaa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801aad2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801aad6:	2400      	movs	r4, #0
 801aad8:	4413      	add	r3, r2
 801aada:	b2a2      	uxth	r2, r4
 801aadc:	429a      	cmp	r2, r3
 801aade:	da0f      	bge.n	801ab00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801aae0:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801aae2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801aae6:	3401      	adds	r4, #1
 801aae8:	4432      	add	r2, r6
 801aaea:	b292      	uxth	r2, r2
 801aaec:	2a09      	cmp	r2, #9
 801aaee:	bf88      	it	hi
 801aaf0:	3a0a      	subhi	r2, #10
 801aaf2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801aaf6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801aaf8:	42aa      	cmp	r2, r5
 801aafa:	d0ee      	beq.n	801aada <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801aafc:	2000      	movs	r0, #0
 801aafe:	bd70      	pop	{r4, r5, r6, pc}
 801ab00:	2001      	movs	r0, #1
 801ab02:	e7fc      	b.n	801aafe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801ab04 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801ab04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab08:	4605      	mov	r5, r0
 801ab0a:	4616      	mov	r6, r2
 801ab0c:	1c8c      	adds	r4, r1, #2
 801ab0e:	8809      	ldrh	r1, [r1, #0]
 801ab10:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801ab14:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801ab18:	42b3      	cmp	r3, r6
 801ab1a:	d124      	bne.n	801ab66 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801ab1c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801ab20:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801ab24:	f001 070f 	and.w	r7, r1, #15
 801ab28:	4652      	mov	r2, sl
 801ab2a:	f8cd 8000 	str.w	r8, [sp]
 801ab2e:	464b      	mov	r3, r9
 801ab30:	4621      	mov	r1, r4
 801ab32:	4628      	mov	r0, r5
 801ab34:	f7ff ffb7 	bl	801aaa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ab38:	4683      	mov	fp, r0
 801ab3a:	b168      	cbz	r0, 801ab58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ab3c:	eb0a 0109 	add.w	r1, sl, r9
 801ab40:	463a      	mov	r2, r7
 801ab42:	4628      	mov	r0, r5
 801ab44:	4441      	add	r1, r8
 801ab46:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ab4a:	4649      	mov	r1, r9
 801ab4c:	f7ff ff52 	bl	801a9f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ab50:	4658      	mov	r0, fp
 801ab52:	b003      	add	sp, #12
 801ab54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab58:	eb07 010a 	add.w	r1, r7, sl
 801ab5c:	4449      	add	r1, r9
 801ab5e:	4441      	add	r1, r8
 801ab60:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ab64:	e7d2      	b.n	801ab0c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ab66:	f04f 0b00 	mov.w	fp, #0
 801ab6a:	e7f1      	b.n	801ab50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ab6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ab6c:	b570      	push	{r4, r5, r6, lr}
 801ab6e:	8810      	ldrh	r0, [r2, #0]
 801ab70:	4298      	cmp	r0, r3
 801ab72:	d817      	bhi.n	801aba4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ab74:	1e48      	subs	r0, r1, #1
 801ab76:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ab7a:	4298      	cmp	r0, r3
 801ab7c:	d312      	bcc.n	801aba4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ab7e:	2400      	movs	r4, #0
 801ab80:	428c      	cmp	r4, r1
 801ab82:	d20f      	bcs.n	801aba4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ab84:	1860      	adds	r0, r4, r1
 801ab86:	1040      	asrs	r0, r0, #1
 801ab88:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ab8c:	0085      	lsls	r5, r0, #2
 801ab8e:	42b3      	cmp	r3, r6
 801ab90:	d902      	bls.n	801ab98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ab92:	3001      	adds	r0, #1
 801ab94:	b284      	uxth	r4, r0
 801ab96:	e7f3      	b.n	801ab80 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ab98:	d201      	bcs.n	801ab9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ab9a:	b281      	uxth	r1, r0
 801ab9c:	e7f0      	b.n	801ab80 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ab9e:	442a      	add	r2, r5
 801aba0:	8850      	ldrh	r0, [r2, #2]
 801aba2:	bd70      	pop	{r4, r5, r6, pc}
 801aba4:	2000      	movs	r0, #0
 801aba6:	e7fc      	b.n	801aba2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801aba8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abac:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801abae:	4604      	mov	r4, r0
 801abb0:	260b      	movs	r6, #11
 801abb2:	886f      	ldrh	r7, [r5, #2]
 801abb4:	087f      	lsrs	r7, r7, #1
 801abb6:	3e01      	subs	r6, #1
 801abb8:	d013      	beq.n	801abe2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801abba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801abbc:	462a      	mov	r2, r5
 801abbe:	4639      	mov	r1, r7
 801abc0:	4620      	mov	r0, r4
 801abc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801abc6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801abca:	4643      	mov	r3, r8
 801abcc:	f7ff ffce 	bl	801ab6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801abd0:	b138      	cbz	r0, 801abe2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801abd2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801abd6:	4642      	mov	r2, r8
 801abd8:	4620      	mov	r0, r4
 801abda:	f7ff ff93 	bl	801ab04 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801abde:	2800      	cmp	r0, #0
 801abe0:	d1e9      	bne.n	801abb6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801abe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801abe8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801abe8:	b570      	push	{r4, r5, r6, lr}
 801abea:	694a      	ldr	r2, [r1, #20]
 801abec:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801abee:	684b      	ldr	r3, [r1, #4]
 801abf0:	1b54      	subs	r4, r2, r5
 801abf2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801abf4:	f000 8106 	beq.w	801ae04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801abf8:	1b9b      	subs	r3, r3, r6
 801abfa:	d003      	beq.n	801ac04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801abfc:	4363      	muls	r3, r4
 801abfe:	2210      	movs	r2, #16
 801ac00:	fb93 f3f2 	sdiv	r3, r3, r2
 801ac04:	680c      	ldr	r4, [r1, #0]
 801ac06:	698a      	ldr	r2, [r1, #24]
 801ac08:	1b65      	subs	r5, r4, r5
 801ac0a:	f000 80fd 	beq.w	801ae08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801ac0e:	1b92      	subs	r2, r2, r6
 801ac10:	d003      	beq.n	801ac1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ac12:	436a      	muls	r2, r5
 801ac14:	2410      	movs	r4, #16
 801ac16:	fb92 f2f4 	sdiv	r2, r2, r4
 801ac1a:	1a9b      	subs	r3, r3, r2
 801ac1c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801ae44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801ac20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ac24:	460a      	mov	r2, r1
 801ac26:	ee07 3a90 	vmov	s15, r3
 801ac2a:	f100 040c 	add.w	r4, r0, #12
 801ac2e:	4603      	mov	r3, r0
 801ac30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac34:	ee67 7a84 	vmul.f32	s15, s15, s8
 801ac38:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801ac3c:	eeb1 6a43 	vneg.f32	s12, s6
 801ac40:	edd2 7a02 	vldr	s15, [r2, #8]
 801ac44:	3214      	adds	r2, #20
 801ac46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801ac4a:	ece3 6a01 	vstmia	r3!, {s13}
 801ac4e:	429c      	cmp	r4, r3
 801ac50:	ed52 7a02 	vldr	s15, [r2, #-8]
 801ac54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ac58:	edc3 7a02 	vstr	s15, [r3, #8]
 801ac5c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801ac60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ac64:	edc3 7a05 	vstr	s15, [r3, #20]
 801ac68:	d1ea      	bne.n	801ac40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801ac6a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ac6c:	698b      	ldr	r3, [r1, #24]
 801ac6e:	edd0 4a02 	vldr	s9, [r0, #8]
 801ac72:	1a9b      	subs	r3, r3, r2
 801ac74:	edd0 3a00 	vldr	s7, [r0]
 801ac78:	edd0 6a01 	vldr	s13, [r0, #4]
 801ac7c:	ee07 3a90 	vmov	s15, r3
 801ac80:	684b      	ldr	r3, [r1, #4]
 801ac82:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801ac86:	ed90 5a05 	vldr	s10, [r0, #20]
 801ac8a:	1a9b      	subs	r3, r3, r2
 801ac8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac90:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801ac94:	ed90 2a03 	vldr	s4, [r0, #12]
 801ac98:	ee07 3a10 	vmov	s14, r3
 801ac9c:	edd0 5a04 	vldr	s11, [r0, #16]
 801aca0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801aca4:	ed90 1a07 	vldr	s2, [r0, #28]
 801aca8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801acac:	edd0 2a06 	vldr	s5, [r0, #24]
 801acb0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801acb4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801acb8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801acbc:	ee32 5a45 	vsub.f32	s10, s4, s10
 801acc0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801acc4:	ee67 7a83 	vmul.f32	s15, s15, s6
 801acc8:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801accc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801acce:	694a      	ldr	r2, [r1, #20]
 801acd0:	1b13      	subs	r3, r2, r4
 801acd2:	ee07 3a10 	vmov	s14, r3
 801acd6:	680b      	ldr	r3, [r1, #0]
 801acd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801acdc:	1b1b      	subs	r3, r3, r4
 801acde:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ace2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801ace6:	ee07 3a10 	vmov	s14, r3
 801acea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801acee:	ee27 7a04 	vmul.f32	s14, s14, s8
 801acf2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801acf6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801acfa:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801acfe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ad00:	698b      	ldr	r3, [r1, #24]
 801ad02:	1a9b      	subs	r3, r3, r2
 801ad04:	ee06 3a90 	vmov	s13, r3
 801ad08:	684b      	ldr	r3, [r1, #4]
 801ad0a:	1a9b      	subs	r3, r3, r2
 801ad0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ad10:	ee07 3a10 	vmov	s14, r3
 801ad14:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ad18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad1c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801ad20:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ad24:	eee5 6a87 	vfma.f32	s13, s11, s14
 801ad28:	ee66 6a83 	vmul.f32	s13, s13, s6
 801ad2c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801ad30:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ad32:	694a      	ldr	r2, [r1, #20]
 801ad34:	1b13      	subs	r3, r2, r4
 801ad36:	ee07 3a10 	vmov	s14, r3
 801ad3a:	680b      	ldr	r3, [r1, #0]
 801ad3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad40:	1b1b      	subs	r3, r3, r4
 801ad42:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ad46:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801ad4a:	ee07 3a10 	vmov	s14, r3
 801ad4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad52:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ad56:	eea5 5a87 	vfma.f32	s10, s11, s14
 801ad5a:	edd0 5a08 	vldr	s11, [r0, #32]
 801ad5e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801ad62:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801ad66:	ee25 5a06 	vmul.f32	s10, s10, s12
 801ad6a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801ad6e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801ad70:	698b      	ldr	r3, [r1, #24]
 801ad72:	1a9b      	subs	r3, r3, r2
 801ad74:	ee07 3a10 	vmov	s14, r3
 801ad78:	684b      	ldr	r3, [r1, #4]
 801ad7a:	1a9b      	subs	r3, r3, r2
 801ad7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ad80:	ee01 3a90 	vmov	s3, r3
 801ad84:	ee27 7a04 	vmul.f32	s14, s14, s8
 801ad88:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801ad8c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ad90:	ee61 1a84 	vmul.f32	s3, s3, s8
 801ad94:	eea1 7a21 	vfma.f32	s14, s2, s3
 801ad98:	ee27 7a03 	vmul.f32	s14, s14, s6
 801ad9c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801ada0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801ada2:	694a      	ldr	r2, [r1, #20]
 801ada4:	1b13      	subs	r3, r2, r4
 801ada6:	ee03 3a10 	vmov	s6, r3
 801adaa:	680b      	ldr	r3, [r1, #0]
 801adac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801adb0:	1b1b      	subs	r3, r3, r4
 801adb2:	ee23 3a04 	vmul.f32	s6, s6, s8
 801adb6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801adba:	ee03 3a10 	vmov	s6, r3
 801adbe:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801adc2:	ee23 4a04 	vmul.f32	s8, s6, s8
 801adc6:	eee1 5a04 	vfma.f32	s11, s2, s8
 801adca:	ee25 6a86 	vmul.f32	s12, s11, s12
 801adce:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801add2:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801add6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801adda:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801adde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade2:	dd13      	ble.n	801ae0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801ade4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ade8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801adec:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801adee:	eee3 7a87 	vfma.f32	s15, s7, s14
 801adf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfa:	dd15      	ble.n	801ae28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801adfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ae00:	6403      	str	r3, [r0, #64]	@ 0x40
 801ae02:	bd70      	pop	{r4, r5, r6, pc}
 801ae04:	4623      	mov	r3, r4
 801ae06:	e6fd      	b.n	801ac04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801ae08:	462a      	mov	r2, r5
 801ae0a:	e706      	b.n	801ac1a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ae0c:	d502      	bpl.n	801ae14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801ae0e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ae12:	e7e9      	b.n	801ade8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801ae14:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801ae18:	eea3 2a85 	vfma.f32	s4, s7, s10
 801ae1c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801ae20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae24:	dade      	bge.n	801ade4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801ae26:	e7f2      	b.n	801ae0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801ae28:	d502      	bpl.n	801ae30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801ae2a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ae2e:	e7e7      	b.n	801ae00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801ae30:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801ae34:	eee3 4a86 	vfma.f32	s9, s7, s12
 801ae38:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801ae3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae40:	dadc      	bge.n	801adfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801ae42:	e7f2      	b.n	801ae2a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801ae44:	3d800000 	.word	0x3d800000

0801ae48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae4c:	2714      	movs	r7, #20
 801ae4e:	435f      	muls	r7, r3
 801ae50:	eb02 0c07 	add.w	ip, r2, r7
 801ae54:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801ae58:	f115 0e0f 	adds.w	lr, r5, #15
 801ae5c:	f100 80a2 	bmi.w	801afa4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801ae60:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801ae64:	9c08      	ldr	r4, [sp, #32]
 801ae66:	2614      	movs	r6, #20
 801ae68:	f8c0 e014 	str.w	lr, [r0, #20]
 801ae6c:	4366      	muls	r6, r4
 801ae6e:	eb02 0806 	add.w	r8, r2, r6
 801ae72:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ae76:	f115 040f 	adds.w	r4, r5, #15
 801ae7a:	f100 809f 	bmi.w	801afbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801ae7e:	1124      	asrs	r4, r4, #4
 801ae80:	eba4 040e 	sub.w	r4, r4, lr
 801ae84:	6184      	str	r4, [r0, #24]
 801ae86:	2c00      	cmp	r4, #0
 801ae88:	f000 808a 	beq.w	801afa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801ae8c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801ae90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801ae94:	5995      	ldr	r5, [r2, r6]
 801ae96:	eba4 0809 	sub.w	r8, r4, r9
 801ae9a:	59d4      	ldr	r4, [r2, r7]
 801ae9c:	eba5 0a04 	sub.w	sl, r5, r4
 801aea0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801aea4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801aea8:	fb0e fe05 	mul.w	lr, lr, r5
 801aeac:	fb0a ee19 	mls	lr, sl, r9, lr
 801aeb0:	fb08 e404 	mla	r4, r8, r4, lr
 801aeb4:	3c01      	subs	r4, #1
 801aeb6:	19a4      	adds	r4, r4, r6
 801aeb8:	f100 808c 	bmi.w	801afd4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801aebc:	fb94 fef6 	sdiv	lr, r4, r6
 801aec0:	fb06 441e 	mls	r4, r6, lr, r4
 801aec4:	f8c0 e000 	str.w	lr, [r0]
 801aec8:	6104      	str	r4, [r0, #16]
 801aeca:	2d00      	cmp	r5, #0
 801aecc:	f2c0 8095 	blt.w	801affa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801aed0:	fb95 f4f6 	sdiv	r4, r5, r6
 801aed4:	fb06 5514 	mls	r5, r6, r4, r5
 801aed8:	6044      	str	r4, [r0, #4]
 801aeda:	6085      	str	r5, [r0, #8]
 801aedc:	60c6      	str	r6, [r0, #12]
 801aede:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aee2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801aee6:	6945      	ldr	r5, [r0, #20]
 801aee8:	59d2      	ldr	r2, [r2, r7]
 801aeea:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801aeee:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801b01c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801aef2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801aef6:	ee07 4a10 	vmov	s14, r4
 801aefa:	6804      	ldr	r4, [r0, #0]
 801aefc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801af00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af04:	ee07 2a90 	vmov	s15, r2
 801af08:	ee27 7a26 	vmul.f32	s14, s14, s13
 801af0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af14:	edd3 6a00 	vldr	s13, [r3]
 801af18:	eee6 6a07 	vfma.f32	s13, s12, s14
 801af1c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801af20:	eee6 6a27 	vfma.f32	s13, s12, s15
 801af24:	edc0 6a07 	vstr	s13, [r0, #28]
 801af28:	edd0 6a01 	vldr	s13, [r0, #4]
 801af2c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801af30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801af34:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801af38:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801af3c:	ed80 6a08 	vstr	s12, [r0, #32]
 801af40:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801af42:	6242      	str	r2, [r0, #36]	@ 0x24
 801af44:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801af48:	ed93 6a03 	vldr	s12, [r3, #12]
 801af4c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801af50:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801af54:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801af58:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801af5c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801af60:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801af64:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801af68:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801af6c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801af6e:	6302      	str	r2, [r0, #48]	@ 0x30
 801af70:	ed93 6a06 	vldr	s12, [r3, #24]
 801af74:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801af78:	eea5 6a87 	vfma.f32	s12, s11, s14
 801af7c:	eeb0 7a46 	vmov.f32	s14, s12
 801af80:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801af84:	eea6 7a27 	vfma.f32	s14, s12, s15
 801af88:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801af8c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801af90:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801af94:	eee6 7a87 	vfma.f32	s15, s13, s14
 801af98:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801af9c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801af9e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801afa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afa4:	2410      	movs	r4, #16
 801afa6:	f1c5 0501 	rsb	r5, r5, #1
 801afaa:	fb9e fef4 	sdiv	lr, lr, r4
 801afae:	f015 050f 	ands.w	r5, r5, #15
 801afb2:	bf18      	it	ne
 801afb4:	2501      	movne	r5, #1
 801afb6:	ebae 0e05 	sub.w	lr, lr, r5
 801afba:	e753      	b.n	801ae64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801afbc:	f04f 0910 	mov.w	r9, #16
 801afc0:	f1c5 0501 	rsb	r5, r5, #1
 801afc4:	fb94 f4f9 	sdiv	r4, r4, r9
 801afc8:	f015 050f 	ands.w	r5, r5, #15
 801afcc:	bf18      	it	ne
 801afce:	2501      	movne	r5, #1
 801afd0:	1b64      	subs	r4, r4, r5
 801afd2:	e755      	b.n	801ae80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801afd4:	4264      	negs	r4, r4
 801afd6:	fb94 fef6 	sdiv	lr, r4, r6
 801afda:	f1ce 0800 	rsb	r8, lr, #0
 801afde:	fb06 441e 	mls	r4, r6, lr, r4
 801afe2:	f8c0 8000 	str.w	r8, [r0]
 801afe6:	6104      	str	r4, [r0, #16]
 801afe8:	2c00      	cmp	r4, #0
 801afea:	f43f af6e 	beq.w	801aeca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801afee:	ea6f 0e0e 	mvn.w	lr, lr
 801aff2:	1b34      	subs	r4, r6, r4
 801aff4:	f8c0 e000 	str.w	lr, [r0]
 801aff8:	e766      	b.n	801aec8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801affa:	426d      	negs	r5, r5
 801affc:	fb95 f4f6 	sdiv	r4, r5, r6
 801b000:	f1c4 0e00 	rsb	lr, r4, #0
 801b004:	fb06 5514 	mls	r5, r6, r4, r5
 801b008:	f8c0 e004 	str.w	lr, [r0, #4]
 801b00c:	6085      	str	r5, [r0, #8]
 801b00e:	2d00      	cmp	r5, #0
 801b010:	f43f af64 	beq.w	801aedc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b014:	43e4      	mvns	r4, r4
 801b016:	1b75      	subs	r5, r6, r5
 801b018:	6044      	str	r4, [r0, #4]
 801b01a:	e75e      	b.n	801aeda <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b01c:	3d800000 	.word	0x3d800000

0801b020 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b020:	4602      	mov	r2, r0
 801b022:	b148      	cbz	r0, 801b038 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b024:	2300      	movs	r3, #0
 801b026:	b298      	uxth	r0, r3
 801b028:	3301      	adds	r3, #1
 801b02a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b02e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b032:	2900      	cmp	r1, #0
 801b034:	d1f7      	bne.n	801b026 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b036:	4770      	bx	lr
 801b038:	4770      	bx	lr

0801b03a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b03a:	b530      	push	{r4, r5, lr}
 801b03c:	4604      	mov	r4, r0
 801b03e:	b159      	cbz	r1, 801b058 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b040:	b148      	cbz	r0, 801b056 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b042:	2300      	movs	r3, #0
 801b044:	b298      	uxth	r0, r3
 801b046:	4282      	cmp	r2, r0
 801b048:	d905      	bls.n	801b056 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b04a:	5ccd      	ldrb	r5, [r1, r3]
 801b04c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b050:	3301      	adds	r3, #1
 801b052:	2d00      	cmp	r5, #0
 801b054:	d1f6      	bne.n	801b044 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b056:	bd30      	pop	{r4, r5, pc}
 801b058:	4608      	mov	r0, r1
 801b05a:	e7fc      	b.n	801b056 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b05c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b05e:	b08b      	sub	sp, #44	@ 0x2c
 801b060:	468c      	mov	ip, r1
 801b062:	4604      	mov	r4, r0
 801b064:	2100      	movs	r1, #0
 801b066:	261f      	movs	r6, #31
 801b068:	af01      	add	r7, sp, #4
 801b06a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b06e:	1e71      	subs	r1, r6, #1
 801b070:	fb94 fef3 	sdiv	lr, r4, r3
 801b074:	fb03 441e 	mls	r4, r3, lr, r4
 801b078:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b07c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b080:	b2ec      	uxtb	r4, r5
 801b082:	2d09      	cmp	r5, #9
 801b084:	bfd4      	ite	le
 801b086:	3430      	addle	r4, #48	@ 0x30
 801b088:	3457      	addgt	r4, #87	@ 0x57
 801b08a:	b2e4      	uxtb	r4, r4
 801b08c:	55bc      	strb	r4, [r7, r6]
 801b08e:	4674      	mov	r4, lr
 801b090:	b974      	cbnz	r4, 801b0b0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801b092:	2800      	cmp	r0, #0
 801b094:	da05      	bge.n	801b0a2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801b096:	ab0a      	add	r3, sp, #40	@ 0x28
 801b098:	4419      	add	r1, r3
 801b09a:	232d      	movs	r3, #45	@ 0x2d
 801b09c:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b0a0:	1eb1      	subs	r1, r6, #2
 801b0a2:	3101      	adds	r1, #1
 801b0a4:	4660      	mov	r0, ip
 801b0a6:	4439      	add	r1, r7
 801b0a8:	f7ff ffc7 	bl	801b03a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b0ac:	b00b      	add	sp, #44	@ 0x2c
 801b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0b0:	460e      	mov	r6, r1
 801b0b2:	e7dc      	b.n	801b06e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801b0b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0b6:	468c      	mov	ip, r1
 801b0b8:	b08b      	sub	sp, #44	@ 0x2c
 801b0ba:	2100      	movs	r1, #0
 801b0bc:	ae01      	add	r6, sp, #4
 801b0be:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801b0c2:	211f      	movs	r1, #31
 801b0c4:	fbb0 f7f3 	udiv	r7, r0, r3
 801b0c8:	fb03 0517 	mls	r5, r3, r7, r0
 801b0cc:	4638      	mov	r0, r7
 801b0ce:	b2ec      	uxtb	r4, r5
 801b0d0:	2d09      	cmp	r5, #9
 801b0d2:	bfd4      	ite	le
 801b0d4:	3430      	addle	r4, #48	@ 0x30
 801b0d6:	3457      	addgt	r4, #87	@ 0x57
 801b0d8:	b2e4      	uxtb	r4, r4
 801b0da:	558c      	strb	r4, [r1, r6]
 801b0dc:	1e4c      	subs	r4, r1, #1
 801b0de:	b92f      	cbnz	r7, 801b0ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801b0e0:	4431      	add	r1, r6
 801b0e2:	4660      	mov	r0, ip
 801b0e4:	f7ff ffa9 	bl	801b03a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b0e8:	b00b      	add	sp, #44	@ 0x2c
 801b0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0ec:	4621      	mov	r1, r4
 801b0ee:	e7e9      	b.n	801b0c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801b0f0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b0f0:	b410      	push	{r4}
 801b0f2:	b131      	cbz	r1, 801b102 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 801b0f4:	1e9c      	subs	r4, r3, #2
 801b0f6:	2c22      	cmp	r4, #34	@ 0x22
 801b0f8:	d803      	bhi.n	801b102 <_ZN8touchgfx7Unicode4itoaElPtti+0x12>
 801b0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0fe:	f7ff bfad 	b.w	801b05c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801b102:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b106:	4770      	bx	lr

0801b108 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b10c:	b085      	sub	sp, #20
 801b10e:	4691      	mov	r9, r2
 801b110:	6802      	ldr	r2, [r0, #0]
 801b112:	4688      	mov	r8, r1
 801b114:	461c      	mov	r4, r3
 801b116:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801b11a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801b11e:	4683      	mov	fp, r0
 801b120:	4610      	mov	r0, r2
 801b122:	9103      	str	r1, [sp, #12]
 801b124:	9302      	str	r3, [sp, #8]
 801b126:	9201      	str	r2, [sp, #4]
 801b128:	f7ff ff7a 	bl	801b020 <_ZN8touchgfx7Unicode6strlenEPKt>
 801b12c:	f1b8 0f00 	cmp.w	r8, #0
 801b130:	bf0c      	ite	eq
 801b132:	4684      	moveq	ip, r0
 801b134:	f100 0c01 	addne.w	ip, r0, #1
 801b138:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801b13c:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801b140:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b142:	fa1f fc8c 	uxth.w	ip, ip
 801b146:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b148:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801b14c:	9903      	ldr	r1, [sp, #12]
 801b14e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b152:	d041      	beq.n	801b1d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b154:	d834      	bhi.n	801b1c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b156:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801b15a:	d059      	beq.n	801b210 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b15c:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801b160:	d03a      	beq.n	801b1d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b162:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801b166:	d034      	beq.n	801b1d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b168:	2400      	movs	r4, #0
 801b16a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801b16e:	3a01      	subs	r2, #1
 801b170:	b169      	cbz	r1, 801b18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b172:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b174:	458c      	cmp	ip, r1
 801b176:	da09      	bge.n	801b18c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b178:	eba1 010c 	sub.w	r1, r1, ip
 801b17c:	b289      	uxth	r1, r1
 801b17e:	b933      	cbnz	r3, 801b18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b180:	2e00      	cmp	r6, #0
 801b182:	d051      	beq.n	801b228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b184:	2800      	cmp	r0, #0
 801b186:	d04f      	beq.n	801b228 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b188:	440c      	add	r4, r1
 801b18a:	b2a4      	uxth	r4, r4
 801b18c:	2100      	movs	r1, #0
 801b18e:	682b      	ldr	r3, [r5, #0]
 801b190:	4293      	cmp	r3, r2
 801b192:	da07      	bge.n	801b1a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b194:	f1b8 0f00 	cmp.w	r8, #0
 801b198:	d004      	beq.n	801b1a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b19a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b19e:	682b      	ldr	r3, [r5, #0]
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	602b      	str	r3, [r5, #0]
 801b1a4:	2730      	movs	r7, #48	@ 0x30
 801b1a6:	2c00      	cmp	r4, #0
 801b1a8:	d04e      	beq.n	801b248 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b1aa:	682e      	ldr	r6, [r5, #0]
 801b1ac:	3c01      	subs	r4, #1
 801b1ae:	42b2      	cmp	r2, r6
 801b1b0:	b2a4      	uxth	r4, r4
 801b1b2:	dd49      	ble.n	801b248 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b1b4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b1b8:	682b      	ldr	r3, [r5, #0]
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	602b      	str	r3, [r5, #0]
 801b1be:	e7f2      	b.n	801b1a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b1c0:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801b1c4:	d01d      	beq.n	801b202 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b1c6:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801b1ca:	d002      	beq.n	801b1d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b1cc:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801b1d0:	e7c9      	b.n	801b166 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b1d2:	4684      	mov	ip, r0
 801b1d4:	f04f 0800 	mov.w	r8, #0
 801b1d8:	2c00      	cmp	r4, #0
 801b1da:	d0c6      	beq.n	801b16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b1dc:	b947      	cbnz	r7, 801b1f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b1de:	2801      	cmp	r0, #1
 801b1e0:	d106      	bne.n	801b1f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b1e2:	8814      	ldrh	r4, [r2, #0]
 801b1e4:	2c30      	cmp	r4, #48	@ 0x30
 801b1e6:	bf02      	ittt	eq
 801b1e8:	3202      	addeq	r2, #2
 801b1ea:	4638      	moveq	r0, r7
 801b1ec:	f8cb 2000 	streq.w	r2, [fp]
 801b1f0:	45bc      	cmp	ip, r7
 801b1f2:	da14      	bge.n	801b21e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b1f4:	b2bf      	uxth	r7, r7
 801b1f6:	eba7 040c 	sub.w	r4, r7, ip
 801b1fa:	46bc      	mov	ip, r7
 801b1fc:	b2a4      	uxth	r4, r4
 801b1fe:	2600      	movs	r6, #0
 801b200:	e7b3      	b.n	801b16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b202:	4684      	mov	ip, r0
 801b204:	b16c      	cbz	r4, 801b222 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b206:	42b8      	cmp	r0, r7
 801b208:	dd00      	ble.n	801b20c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b20a:	b2b8      	uxth	r0, r7
 801b20c:	2400      	movs	r4, #0
 801b20e:	e003      	b.n	801b218 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b210:	f04f 0c01 	mov.w	ip, #1
 801b214:	2400      	movs	r4, #0
 801b216:	4660      	mov	r0, ip
 801b218:	4626      	mov	r6, r4
 801b21a:	46a0      	mov	r8, r4
 801b21c:	e7a5      	b.n	801b16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b21e:	2400      	movs	r4, #0
 801b220:	e7ed      	b.n	801b1fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b222:	4626      	mov	r6, r4
 801b224:	46a0      	mov	r8, r4
 801b226:	e7a0      	b.n	801b16a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b228:	2900      	cmp	r1, #0
 801b22a:	d0b0      	beq.n	801b18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b22c:	2720      	movs	r7, #32
 801b22e:	682e      	ldr	r6, [r5, #0]
 801b230:	2900      	cmp	r1, #0
 801b232:	d0ac      	beq.n	801b18e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b234:	3901      	subs	r1, #1
 801b236:	4296      	cmp	r6, r2
 801b238:	b289      	uxth	r1, r1
 801b23a:	daa7      	bge.n	801b18c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b23c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b240:	682b      	ldr	r3, [r5, #0]
 801b242:	3301      	adds	r3, #1
 801b244:	602b      	str	r3, [r5, #0]
 801b246:	e7f2      	b.n	801b22e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b248:	b188      	cbz	r0, 801b26e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b24a:	682b      	ldr	r3, [r5, #0]
 801b24c:	3801      	subs	r0, #1
 801b24e:	429a      	cmp	r2, r3
 801b250:	b280      	uxth	r0, r0
 801b252:	dd0c      	ble.n	801b26e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b254:	f8db 3000 	ldr.w	r3, [fp]
 801b258:	1c9c      	adds	r4, r3, #2
 801b25a:	f8cb 4000 	str.w	r4, [fp]
 801b25e:	881c      	ldrh	r4, [r3, #0]
 801b260:	682b      	ldr	r3, [r5, #0]
 801b262:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b266:	682b      	ldr	r3, [r5, #0]
 801b268:	3301      	adds	r3, #1
 801b26a:	602b      	str	r3, [r5, #0]
 801b26c:	e7ec      	b.n	801b248 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b26e:	2620      	movs	r6, #32
 801b270:	b151      	cbz	r1, 801b288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b272:	6828      	ldr	r0, [r5, #0]
 801b274:	3901      	subs	r1, #1
 801b276:	4282      	cmp	r2, r0
 801b278:	b289      	uxth	r1, r1
 801b27a:	dd05      	ble.n	801b288 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b27c:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b280:	682b      	ldr	r3, [r5, #0]
 801b282:	3301      	adds	r3, #1
 801b284:	602b      	str	r3, [r5, #0]
 801b286:	e7f3      	b.n	801b270 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b288:	b005      	add	sp, #20
 801b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b28e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b28e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b292:	2400      	movs	r4, #0
 801b294:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b298:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801b29c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801b2a0:	8014      	strh	r4, [r2, #0]
 801b2a2:	701c      	strb	r4, [r3, #0]
 801b2a4:	f888 4000 	strb.w	r4, [r8]
 801b2a8:	f88c 4000 	strb.w	r4, [ip]
 801b2ac:	f88e 4000 	strb.w	r4, [lr]
 801b2b0:	703c      	strb	r4, [r7, #0]
 801b2b2:	6804      	ldr	r4, [r0, #0]
 801b2b4:	b1a4      	cbz	r4, 801b2e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b2b6:	8824      	ldrh	r4, [r4, #0]
 801b2b8:	f04f 0901 	mov.w	r9, #1
 801b2bc:	b314      	cbz	r4, 801b304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b2be:	2c2b      	cmp	r4, #43	@ 0x2b
 801b2c0:	d001      	beq.n	801b2c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b2c2:	2c20      	cmp	r4, #32
 801b2c4:	d110      	bne.n	801b2e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b2c6:	8014      	strh	r4, [r2, #0]
 801b2c8:	6804      	ldr	r4, [r0, #0]
 801b2ca:	b10c      	cbz	r4, 801b2d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b2cc:	3402      	adds	r4, #2
 801b2ce:	6004      	str	r4, [r0, #0]
 801b2d0:	680c      	ldr	r4, [r1, #0]
 801b2d2:	b10c      	cbz	r4, 801b2d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b2d4:	3401      	adds	r4, #1
 801b2d6:	600c      	str	r4, [r1, #0]
 801b2d8:	6804      	ldr	r4, [r0, #0]
 801b2da:	b17c      	cbz	r4, 801b2fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b2dc:	8824      	ldrh	r4, [r4, #0]
 801b2de:	e7ed      	b.n	801b2bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b2e0:	680c      	ldr	r4, [r1, #0]
 801b2e2:	b17c      	cbz	r4, 801b304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b2e4:	7824      	ldrb	r4, [r4, #0]
 801b2e6:	e7e7      	b.n	801b2b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b2e8:	2c2d      	cmp	r4, #45	@ 0x2d
 801b2ea:	d102      	bne.n	801b2f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b2ec:	f883 9000 	strb.w	r9, [r3]
 801b2f0:	e7ea      	b.n	801b2c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b2f2:	2c23      	cmp	r4, #35	@ 0x23
 801b2f4:	d107      	bne.n	801b306 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b2f6:	f888 9000 	strb.w	r9, [r8]
 801b2fa:	e7e5      	b.n	801b2c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b2fc:	680c      	ldr	r4, [r1, #0]
 801b2fe:	b10c      	cbz	r4, 801b304 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b300:	7824      	ldrb	r4, [r4, #0]
 801b302:	e7db      	b.n	801b2bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b304:	2400      	movs	r4, #0
 801b306:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801b30a:	2b09      	cmp	r3, #9
 801b30c:	d901      	bls.n	801b312 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b30e:	2c2a      	cmp	r4, #42	@ 0x2a
 801b310:	d122      	bne.n	801b358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b312:	2301      	movs	r3, #1
 801b314:	2c30      	cmp	r4, #48	@ 0x30
 801b316:	f88e 3000 	strb.w	r3, [lr]
 801b31a:	d10d      	bne.n	801b338 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b31c:	f88c 3000 	strb.w	r3, [ip]
 801b320:	6803      	ldr	r3, [r0, #0]
 801b322:	b10b      	cbz	r3, 801b328 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b324:	3302      	adds	r3, #2
 801b326:	6003      	str	r3, [r0, #0]
 801b328:	680b      	ldr	r3, [r1, #0]
 801b32a:	b10b      	cbz	r3, 801b330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b32c:	3301      	adds	r3, #1
 801b32e:	600b      	str	r3, [r1, #0]
 801b330:	6803      	ldr	r3, [r0, #0]
 801b332:	2b00      	cmp	r3, #0
 801b334:	d02f      	beq.n	801b396 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b336:	881c      	ldrh	r4, [r3, #0]
 801b338:	2c2a      	cmp	r4, #42	@ 0x2a
 801b33a:	d135      	bne.n	801b3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b33c:	f04f 33ff 	mov.w	r3, #4294967295
 801b340:	6033      	str	r3, [r6, #0]
 801b342:	6803      	ldr	r3, [r0, #0]
 801b344:	b10b      	cbz	r3, 801b34a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b346:	3302      	adds	r3, #2
 801b348:	6003      	str	r3, [r0, #0]
 801b34a:	680b      	ldr	r3, [r1, #0]
 801b34c:	b10b      	cbz	r3, 801b352 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b34e:	3301      	adds	r3, #1
 801b350:	600b      	str	r3, [r1, #0]
 801b352:	6803      	ldr	r3, [r0, #0]
 801b354:	b31b      	cbz	r3, 801b39e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b356:	881c      	ldrh	r4, [r3, #0]
 801b358:	2c2e      	cmp	r4, #46	@ 0x2e
 801b35a:	d11a      	bne.n	801b392 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b35c:	2301      	movs	r3, #1
 801b35e:	703b      	strb	r3, [r7, #0]
 801b360:	6803      	ldr	r3, [r0, #0]
 801b362:	b10b      	cbz	r3, 801b368 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b364:	3302      	adds	r3, #2
 801b366:	6003      	str	r3, [r0, #0]
 801b368:	680b      	ldr	r3, [r1, #0]
 801b36a:	b10b      	cbz	r3, 801b370 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b36c:	3301      	adds	r3, #1
 801b36e:	600b      	str	r3, [r1, #0]
 801b370:	6803      	ldr	r3, [r0, #0]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d036      	beq.n	801b3e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b376:	881b      	ldrh	r3, [r3, #0]
 801b378:	2b2a      	cmp	r3, #42	@ 0x2a
 801b37a:	d137      	bne.n	801b3ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b37c:	f04f 33ff 	mov.w	r3, #4294967295
 801b380:	602b      	str	r3, [r5, #0]
 801b382:	6803      	ldr	r3, [r0, #0]
 801b384:	b10b      	cbz	r3, 801b38a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b386:	3302      	adds	r3, #2
 801b388:	6003      	str	r3, [r0, #0]
 801b38a:	680b      	ldr	r3, [r1, #0]
 801b38c:	b10b      	cbz	r3, 801b392 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b38e:	3301      	adds	r3, #1
 801b390:	600b      	str	r3, [r1, #0]
 801b392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b396:	680c      	ldr	r4, [r1, #0]
 801b398:	b134      	cbz	r4, 801b3a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b39a:	7824      	ldrb	r4, [r4, #0]
 801b39c:	e7cc      	b.n	801b338 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b39e:	680b      	ldr	r3, [r1, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d0f6      	beq.n	801b392 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b3a4:	781c      	ldrb	r4, [r3, #0]
 801b3a6:	e7d7      	b.n	801b358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	220a      	movs	r2, #10
 801b3ac:	6033      	str	r3, [r6, #0]
 801b3ae:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b3b2:	fa1f f38c 	uxth.w	r3, ip
 801b3b6:	2b09      	cmp	r3, #9
 801b3b8:	d8ce      	bhi.n	801b358 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b3ba:	6833      	ldr	r3, [r6, #0]
 801b3bc:	fb02 c303 	mla	r3, r2, r3, ip
 801b3c0:	6033      	str	r3, [r6, #0]
 801b3c2:	6803      	ldr	r3, [r0, #0]
 801b3c4:	b10b      	cbz	r3, 801b3ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b3c6:	3302      	adds	r3, #2
 801b3c8:	6003      	str	r3, [r0, #0]
 801b3ca:	680b      	ldr	r3, [r1, #0]
 801b3cc:	b10b      	cbz	r3, 801b3d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b3ce:	3301      	adds	r3, #1
 801b3d0:	600b      	str	r3, [r1, #0]
 801b3d2:	6803      	ldr	r3, [r0, #0]
 801b3d4:	b10b      	cbz	r3, 801b3da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b3d6:	881c      	ldrh	r4, [r3, #0]
 801b3d8:	e7e9      	b.n	801b3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b3da:	680c      	ldr	r4, [r1, #0]
 801b3dc:	2c00      	cmp	r4, #0
 801b3de:	d0e6      	beq.n	801b3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b3e0:	7824      	ldrb	r4, [r4, #0]
 801b3e2:	e7e4      	b.n	801b3ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b3e4:	680b      	ldr	r3, [r1, #0]
 801b3e6:	b10b      	cbz	r3, 801b3ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b3e8:	781b      	ldrb	r3, [r3, #0]
 801b3ea:	e7c5      	b.n	801b378 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	240a      	movs	r4, #10
 801b3f0:	602a      	str	r2, [r5, #0]
 801b3f2:	3b30      	subs	r3, #48	@ 0x30
 801b3f4:	682a      	ldr	r2, [r5, #0]
 801b3f6:	b29e      	uxth	r6, r3
 801b3f8:	2e09      	cmp	r6, #9
 801b3fa:	d813      	bhi.n	801b424 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b3fc:	fb04 3302 	mla	r3, r4, r2, r3
 801b400:	602b      	str	r3, [r5, #0]
 801b402:	6803      	ldr	r3, [r0, #0]
 801b404:	b10b      	cbz	r3, 801b40a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b406:	3302      	adds	r3, #2
 801b408:	6003      	str	r3, [r0, #0]
 801b40a:	680b      	ldr	r3, [r1, #0]
 801b40c:	b10b      	cbz	r3, 801b412 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b40e:	3301      	adds	r3, #1
 801b410:	600b      	str	r3, [r1, #0]
 801b412:	6803      	ldr	r3, [r0, #0]
 801b414:	b10b      	cbz	r3, 801b41a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b416:	881b      	ldrh	r3, [r3, #0]
 801b418:	e7eb      	b.n	801b3f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b41a:	680b      	ldr	r3, [r1, #0]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d0e8      	beq.n	801b3f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b420:	781b      	ldrb	r3, [r3, #0]
 801b422:	e7e6      	b.n	801b3f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b424:	2a06      	cmp	r2, #6
 801b426:	bfa8      	it	ge
 801b428:	2206      	movge	r2, #6
 801b42a:	602a      	str	r2, [r5, #0]
 801b42c:	e7b1      	b.n	801b392 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b42e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b42e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b432:	b0a3      	sub	sp, #140	@ 0x8c
 801b434:	2600      	movs	r6, #0
 801b436:	4607      	mov	r7, r0
 801b438:	4688      	mov	r8, r1
 801b43a:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801b43e:	4631      	mov	r1, r6
 801b440:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801b442:	4648      	mov	r0, r9
 801b444:	960d      	str	r6, [sp, #52]	@ 0x34
 801b446:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b44a:	2242      	movs	r2, #66	@ 0x42
 801b44c:	f009 ff8b 	bl	8025366 <memset>
 801b450:	b15f      	cbz	r7, 801b46a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b452:	f108 3aff 	add.w	sl, r8, #4294967295
 801b456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b45a:	b152      	cbz	r2, 801b472 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b45c:	8812      	ldrh	r2, [r2, #0]
 801b45e:	b10a      	cbz	r2, 801b464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b460:	459a      	cmp	sl, r3
 801b462:	dc2e      	bgt.n	801b4c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b464:	2200      	movs	r2, #0
 801b466:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b46a:	4638      	mov	r0, r7
 801b46c:	b023      	add	sp, #140	@ 0x8c
 801b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b472:	9a08      	ldr	r2, [sp, #32]
 801b474:	2a00      	cmp	r2, #0
 801b476:	d0f5      	beq.n	801b464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b478:	7812      	ldrb	r2, [r2, #0]
 801b47a:	e7f0      	b.n	801b45e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b47c:	2d00      	cmp	r5, #0
 801b47e:	d0ea      	beq.n	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b480:	782a      	ldrb	r2, [r5, #0]
 801b482:	b142      	cbz	r2, 801b496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b484:	2a25      	cmp	r2, #37	@ 0x25
 801b486:	d001      	beq.n	801b48c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b488:	459a      	cmp	sl, r3
 801b48a:	dc08      	bgt.n	801b49e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b48c:	f1bb 0f00 	cmp.w	fp, #0
 801b490:	d121      	bne.n	801b4d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b492:	2d00      	cmp	r5, #0
 801b494:	d0df      	beq.n	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b496:	782a      	ldrb	r2, [r5, #0]
 801b498:	f04f 0b00 	mov.w	fp, #0
 801b49c:	e01d      	b.n	801b4da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b49e:	f1bb 0f00 	cmp.w	fp, #0
 801b4a2:	d077      	beq.n	801b594 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b4a4:	f8bb 2000 	ldrh.w	r2, [fp]
 801b4a8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b4ac:	f1bb 0f00 	cmp.w	fp, #0
 801b4b0:	d002      	beq.n	801b4b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b4b2:	f10b 0202 	add.w	r2, fp, #2
 801b4b6:	9209      	str	r2, [sp, #36]	@ 0x24
 801b4b8:	b10d      	cbz	r5, 801b4be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b4ba:	3501      	adds	r5, #1
 801b4bc:	9508      	str	r5, [sp, #32]
 801b4be:	3301      	adds	r3, #1
 801b4c0:	930d      	str	r3, [sp, #52]	@ 0x34
 801b4c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b4c4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b4c8:	f1bb 0f00 	cmp.w	fp, #0
 801b4cc:	d0d6      	beq.n	801b47c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b4ce:	f8bb 2000 	ldrh.w	r2, [fp]
 801b4d2:	2a00      	cmp	r2, #0
 801b4d4:	d1d6      	bne.n	801b484 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b4d6:	f8bb 2000 	ldrh.w	r2, [fp]
 801b4da:	2a00      	cmp	r2, #0
 801b4dc:	d0bb      	beq.n	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b4de:	459a      	cmp	sl, r3
 801b4e0:	ddb9      	ble.n	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b4e2:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801b4e6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801b4ea:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801b4ee:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801b4f2:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801b4f6:	960e      	str	r6, [sp, #56]	@ 0x38
 801b4f8:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801b4fc:	960f      	str	r6, [sp, #60]	@ 0x3c
 801b4fe:	f1bb 0f00 	cmp.w	fp, #0
 801b502:	d002      	beq.n	801b50a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b504:	f10b 0302 	add.w	r3, fp, #2
 801b508:	9309      	str	r3, [sp, #36]	@ 0x24
 801b50a:	b10d      	cbz	r5, 801b510 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b50c:	1c6b      	adds	r3, r5, #1
 801b50e:	9308      	str	r3, [sp, #32]
 801b510:	ab0f      	add	r3, sp, #60	@ 0x3c
 801b512:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801b516:	a908      	add	r1, sp, #32
 801b518:	a809      	add	r0, sp, #36	@ 0x24
 801b51a:	9305      	str	r3, [sp, #20]
 801b51c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801b520:	9304      	str	r3, [sp, #16]
 801b522:	ab0e      	add	r3, sp, #56	@ 0x38
 801b524:	9303      	str	r3, [sp, #12]
 801b526:	ab0c      	add	r3, sp, #48	@ 0x30
 801b528:	9302      	str	r3, [sp, #8]
 801b52a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801b52e:	9301      	str	r3, [sp, #4]
 801b530:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801b534:	9300      	str	r3, [sp, #0]
 801b536:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801b53a:	f7ff fea8 	bl	801b28e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b53e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b540:	2b00      	cmp	r3, #0
 801b542:	bfbf      	itttt	lt
 801b544:	6823      	ldrlt	r3, [r4, #0]
 801b546:	3404      	addlt	r4, #4
 801b548:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b54c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801b54e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b550:	2b00      	cmp	r3, #0
 801b552:	bfbe      	ittt	lt
 801b554:	6823      	ldrlt	r3, [r4, #0]
 801b556:	3404      	addlt	r4, #4
 801b558:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b55c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b560:	bfb8      	it	lt
 801b562:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801b564:	b1d9      	cbz	r1, 801b59e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b566:	880b      	ldrh	r3, [r1, #0]
 801b568:	2b69      	cmp	r3, #105	@ 0x69
 801b56a:	d01f      	beq.n	801b5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b56c:	d82f      	bhi.n	801b5ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b56e:	2b58      	cmp	r3, #88	@ 0x58
 801b570:	d01c      	beq.n	801b5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b572:	d818      	bhi.n	801b5a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b574:	2b25      	cmp	r3, #37	@ 0x25
 801b576:	d034      	beq.n	801b5e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b578:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b57a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b57e:	f1bb 0f00 	cmp.w	fp, #0
 801b582:	f000 80b7 	beq.w	801b6f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801b586:	f8bb 5000 	ldrh.w	r5, [fp]
 801b58a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801b58e:	3301      	adds	r3, #1
 801b590:	930d      	str	r3, [sp, #52]	@ 0x34
 801b592:	e029      	b.n	801b5e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b594:	b10d      	cbz	r5, 801b59a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801b596:	782a      	ldrb	r2, [r5, #0]
 801b598:	e786      	b.n	801b4a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b59a:	462a      	mov	r2, r5
 801b59c:	e784      	b.n	801b4a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801b59e:	2a00      	cmp	r2, #0
 801b5a0:	d0ea      	beq.n	801b578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b5a2:	7813      	ldrb	r3, [r2, #0]
 801b5a4:	e7e0      	b.n	801b568 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801b5a6:	3b63      	subs	r3, #99	@ 0x63
 801b5a8:	2b01      	cmp	r3, #1
 801b5aa:	d8e5      	bhi.n	801b578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b5ac:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801b5b0:	b329      	cbz	r1, 801b5fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801b5b2:	880b      	ldrh	r3, [r1, #0]
 801b5b4:	2b69      	cmp	r3, #105	@ 0x69
 801b5b6:	d063      	beq.n	801b680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b5b8:	d825      	bhi.n	801b606 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801b5ba:	2b63      	cmp	r3, #99	@ 0x63
 801b5bc:	d038      	beq.n	801b630 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801b5be:	2b64      	cmp	r3, #100	@ 0x64
 801b5c0:	d05e      	beq.n	801b680 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801b5c2:	2b58      	cmp	r3, #88	@ 0x58
 801b5c4:	d07a      	beq.n	801b6bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801b5c6:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801b5ca:	4625      	mov	r5, r4
 801b5cc:	e036      	b.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b5ce:	2b73      	cmp	r3, #115	@ 0x73
 801b5d0:	d0ec      	beq.n	801b5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b5d2:	d802      	bhi.n	801b5da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801b5d4:	2b6f      	cmp	r3, #111	@ 0x6f
 801b5d6:	d1cf      	bne.n	801b578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801b5d8:	e7e8      	b.n	801b5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b5da:	2b75      	cmp	r3, #117	@ 0x75
 801b5dc:	d0e6      	beq.n	801b5ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b5de:	2b78      	cmp	r3, #120	@ 0x78
 801b5e0:	e7f9      	b.n	801b5d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801b5e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b5e4:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801b5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5ea:	b10b      	cbz	r3, 801b5f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801b5ec:	3302      	adds	r3, #2
 801b5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801b5f0:	9b08      	ldr	r3, [sp, #32]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	f43f af2f 	beq.w	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b5f8:	3301      	adds	r3, #1
 801b5fa:	9308      	str	r3, [sp, #32]
 801b5fc:	e72b      	b.n	801b456 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b5fe:	2a00      	cmp	r2, #0
 801b600:	d0e1      	beq.n	801b5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b602:	7813      	ldrb	r3, [r2, #0]
 801b604:	e7d6      	b.n	801b5b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801b606:	2b73      	cmp	r3, #115	@ 0x73
 801b608:	d036      	beq.n	801b678 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801b60a:	d807      	bhi.n	801b61c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801b60c:	2b6f      	cmp	r3, #111	@ 0x6f
 801b60e:	d1da      	bne.n	801b5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b610:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b612:	1d25      	adds	r5, r4, #4
 801b614:	2308      	movs	r3, #8
 801b616:	eba8 0202 	sub.w	r2, r8, r2
 801b61a:	e049      	b.n	801b6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b61c:	2b75      	cmp	r3, #117	@ 0x75
 801b61e:	d042      	beq.n	801b6a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801b620:	2b78      	cmp	r3, #120	@ 0x78
 801b622:	d1d0      	bne.n	801b5c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801b624:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b626:	1d25      	adds	r5, r4, #4
 801b628:	2310      	movs	r3, #16
 801b62a:	eba8 0202 	sub.w	r2, r8, r2
 801b62e:	e03f      	b.n	801b6b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801b630:	6823      	ldr	r3, [r4, #0]
 801b632:	1d25      	adds	r5, r4, #4
 801b634:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b638:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801b63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b63e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801b642:	2b00      	cmp	r3, #0
 801b644:	d051      	beq.n	801b6ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801b646:	881a      	ldrh	r2, [r3, #0]
 801b648:	a80d      	add	r0, sp, #52	@ 0x34
 801b64a:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801b64e:	462c      	mov	r4, r5
 801b650:	9005      	str	r0, [sp, #20]
 801b652:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801b656:	9004      	str	r0, [sp, #16]
 801b658:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b65a:	9003      	str	r0, [sp, #12]
 801b65c:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801b660:	9002      	str	r0, [sp, #8]
 801b662:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801b664:	9001      	str	r0, [sp, #4]
 801b666:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801b66a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801b66e:	9000      	str	r0, [sp, #0]
 801b670:	a810      	add	r0, sp, #64	@ 0x40
 801b672:	f7ff fd49 	bl	801b108 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801b676:	e7b7      	b.n	801b5e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801b678:	1d25      	adds	r5, r4, #4
 801b67a:	6823      	ldr	r3, [r4, #0]
 801b67c:	9310      	str	r3, [sp, #64]	@ 0x40
 801b67e:	e7dd      	b.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b680:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b682:	230a      	movs	r3, #10
 801b684:	4649      	mov	r1, r9
 801b686:	6820      	ldr	r0, [r4, #0]
 801b688:	eba8 0202 	sub.w	r2, r8, r2
 801b68c:	1d25      	adds	r5, r4, #4
 801b68e:	b292      	uxth	r2, r2
 801b690:	f7ff fce4 	bl	801b05c <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801b694:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801b698:	2b2d      	cmp	r3, #45	@ 0x2d
 801b69a:	d1cf      	bne.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b69c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b6a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6a2:	3302      	adds	r3, #2
 801b6a4:	e7ea      	b.n	801b67c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801b6a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6a8:	1d25      	adds	r5, r4, #4
 801b6aa:	230a      	movs	r3, #10
 801b6ac:	eba8 0202 	sub.w	r2, r8, r2
 801b6b0:	b292      	uxth	r2, r2
 801b6b2:	4649      	mov	r1, r9
 801b6b4:	6820      	ldr	r0, [r4, #0]
 801b6b6:	f7ff fcfd 	bl	801b0b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b6ba:	e7bf      	b.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b6bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b6be:	2310      	movs	r3, #16
 801b6c0:	4649      	mov	r1, r9
 801b6c2:	6820      	ldr	r0, [r4, #0]
 801b6c4:	eba8 0202 	sub.w	r2, r8, r2
 801b6c8:	1d25      	adds	r5, r4, #4
 801b6ca:	b292      	uxth	r2, r2
 801b6cc:	f7ff fcf2 	bl	801b0b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801b6d0:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801b6d4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d0af      	beq.n	801b63c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801b6dc:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801b6e0:	2919      	cmp	r1, #25
 801b6e2:	d8f7      	bhi.n	801b6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b6e4:	3b20      	subs	r3, #32
 801b6e6:	8013      	strh	r3, [r2, #0]
 801b6e8:	e7f4      	b.n	801b6d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801b6ea:	9a08      	ldr	r2, [sp, #32]
 801b6ec:	2a00      	cmp	r2, #0
 801b6ee:	d0ab      	beq.n	801b648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b6f0:	7812      	ldrb	r2, [r2, #0]
 801b6f2:	e7a9      	b.n	801b648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801b6f4:	2d00      	cmp	r5, #0
 801b6f6:	f43f af48 	beq.w	801b58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801b6fa:	782d      	ldrb	r5, [r5, #0]
 801b6fc:	e745      	b.n	801b58a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801b6fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801b6fe:	b507      	push	{r0, r1, r2, lr}
 801b700:	9300      	str	r3, [sp, #0]
 801b702:	4613      	mov	r3, r2
 801b704:	2200      	movs	r2, #0
 801b706:	f7ff fe92 	bl	801b42e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801b70a:	b003      	add	sp, #12
 801b70c:	f85d fb04 	ldr.w	pc, [sp], #4

0801b710 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801b710:	b40c      	push	{r2, r3}
 801b712:	b507      	push	{r0, r1, r2, lr}
 801b714:	ab04      	add	r3, sp, #16
 801b716:	f853 2b04 	ldr.w	r2, [r3], #4
 801b71a:	9301      	str	r3, [sp, #4]
 801b71c:	f7ff ffef 	bl	801b6fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801b720:	b003      	add	sp, #12
 801b722:	f85d eb04 	ldr.w	lr, [sp], #4
 801b726:	b002      	add	sp, #8
 801b728:	4770      	bx	lr
	...

0801b72c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801b72c:	4b01      	ldr	r3, [pc, #4]	@ (801b734 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801b72e:	6018      	str	r0, [r3, #0]
 801b730:	4770      	bx	lr
 801b732:	bf00      	nop
 801b734:	2401bb98 	.word	0x2401bb98

0801b738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801b738:	4b06      	ldr	r3, [pc, #24]	@ (801b754 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801b73a:	881a      	ldrh	r2, [r3, #0]
 801b73c:	4282      	cmp	r2, r0
 801b73e:	d807      	bhi.n	801b750 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801b740:	4b05      	ldr	r3, [pc, #20]	@ (801b758 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801b742:	881b      	ldrh	r3, [r3, #0]
 801b744:	4413      	add	r3, r2
 801b746:	4298      	cmp	r0, r3
 801b748:	bfac      	ite	ge
 801b74a:	2000      	movge	r0, #0
 801b74c:	2001      	movlt	r0, #1
 801b74e:	4770      	bx	lr
 801b750:	2000      	movs	r0, #0
 801b752:	4770      	bx	lr
 801b754:	2401bbb8 	.word	0x2401bbb8
 801b758:	2401bbbc 	.word	0x2401bbbc

0801b75c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801b75c:	b508      	push	{r3, lr}
 801b75e:	4601      	mov	r1, r0
 801b760:	f7ff ffea 	bl	801b738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b764:	b118      	cbz	r0, 801b76e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801b766:	4b02      	ldr	r3, [pc, #8]	@ (801b770 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801b76e:	bd08      	pop	{r3, pc}
 801b770:	2401bb9c 	.word	0x2401bb9c

0801b774 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801b774:	b538      	push	{r3, r4, r5, lr}
 801b776:	4604      	mov	r4, r0
 801b778:	f7ff ffde 	bl	801b738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b77c:	b1d8      	cbz	r0, 801b7b6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801b77e:	4b0f      	ldr	r3, [pc, #60]	@ (801b7bc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801b780:	881b      	ldrh	r3, [r3, #0]
 801b782:	1ae4      	subs	r4, r4, r3
 801b784:	230e      	movs	r3, #14
 801b786:	4363      	muls	r3, r4
 801b788:	4c0d      	ldr	r4, [pc, #52]	@ (801b7c0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801b78a:	6825      	ldr	r5, [r4, #0]
 801b78c:	18ea      	adds	r2, r5, r3
 801b78e:	7b12      	ldrb	r2, [r2, #12]
 801b790:	f012 0220 	ands.w	r2, r2, #32
 801b794:	d010      	beq.n	801b7b8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801b796:	f9b1 2000 	ldrsh.w	r2, [r1]
 801b79a:	52ea      	strh	r2, [r5, r3]
 801b79c:	6822      	ldr	r2, [r4, #0]
 801b79e:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801b7a2:	441a      	add	r2, r3
 801b7a4:	8055      	strh	r5, [r2, #2]
 801b7a6:	6822      	ldr	r2, [r4, #0]
 801b7a8:	4413      	add	r3, r2
 801b7aa:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801b7ae:	809a      	strh	r2, [r3, #4]
 801b7b0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801b7b4:	80da      	strh	r2, [r3, #6]
 801b7b6:	bd38      	pop	{r3, r4, r5, pc}
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	e7fc      	b.n	801b7b6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801b7bc:	2401bbb8 	.word	0x2401bbb8
 801b7c0:	2401bba0 	.word	0x2401bba0

0801b7c4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801b7c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b7c8:	4606      	mov	r6, r0
 801b7ca:	460c      	mov	r4, r1
 801b7cc:	f7ff ffb4 	bl	801b738 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801b7d0:	b918      	cbnz	r0, 801b7da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801b7d2:	2000      	movs	r0, #0
 801b7d4:	b002      	add	sp, #8
 801b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7da:	4608      	mov	r0, r1
 801b7dc:	f7f8 fdbf 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b7e0:	2800      	cmp	r0, #0
 801b7e2:	d1f6      	bne.n	801b7d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b7e4:	4b3f      	ldr	r3, [pc, #252]	@ (801b8e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801b7e6:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801b8e8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801b7ea:	881d      	ldrh	r5, [r3, #0]
 801b7ec:	f8d9 a000 	ldr.w	sl, [r9]
 801b7f0:	46c8      	mov	r8, r9
 801b7f2:	1b73      	subs	r3, r6, r5
 801b7f4:	250e      	movs	r5, #14
 801b7f6:	435d      	muls	r5, r3
 801b7f8:	eb0a 0705 	add.w	r7, sl, r5
 801b7fc:	7b3b      	ldrb	r3, [r7, #12]
 801b7fe:	f013 0f20 	tst.w	r3, #32
 801b802:	d0e6      	beq.n	801b7d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b804:	4621      	mov	r1, r4
 801b806:	4638      	mov	r0, r7
 801b808:	f7fc fde4 	bl	80183d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b80c:	2800      	cmp	r0, #0
 801b80e:	d1e1      	bne.n	801b7d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b810:	4639      	mov	r1, r7
 801b812:	4620      	mov	r0, r4
 801b814:	f7fc fdde 	bl	80183d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b818:	b108      	cbz	r0, 801b81e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801b81a:	4621      	mov	r1, r4
 801b81c:	e020      	b.n	801b860 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801b81e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b822:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801b826:	429a      	cmp	r2, r3
 801b828:	d11e      	bne.n	801b868 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b82a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b82e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801b832:	429a      	cmp	r2, r3
 801b834:	d118      	bne.n	801b868 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b836:	6820      	ldr	r0, [r4, #0]
 801b838:	466b      	mov	r3, sp
 801b83a:	6861      	ldr	r1, [r4, #4]
 801b83c:	c303      	stmia	r3!, {r0, r1}
 801b83e:	4639      	mov	r1, r7
 801b840:	4668      	mov	r0, sp
 801b842:	f7fc fded 	bl	8018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b846:	f8d9 3000 	ldr.w	r3, [r9]
 801b84a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b84e:	442b      	add	r3, r5
 801b850:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b854:	4413      	add	r3, r2
 801b856:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801b85a:	4293      	cmp	r3, r2
 801b85c:	dc04      	bgt.n	801b868 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801b85e:	4669      	mov	r1, sp
 801b860:	4630      	mov	r0, r6
 801b862:	f7ff ff87 	bl	801b774 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801b866:	e7b5      	b.n	801b7d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801b868:	f8d8 3000 	ldr.w	r3, [r8]
 801b86c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801b870:	442b      	add	r3, r5
 801b872:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801b876:	4291      	cmp	r1, r2
 801b878:	d119      	bne.n	801b8ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b87a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b87e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801b882:	4291      	cmp	r1, r2
 801b884:	d113      	bne.n	801b8ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801b886:	6820      	ldr	r0, [r4, #0]
 801b888:	466a      	mov	r2, sp
 801b88a:	6861      	ldr	r1, [r4, #4]
 801b88c:	c203      	stmia	r2!, {r0, r1}
 801b88e:	4619      	mov	r1, r3
 801b890:	4668      	mov	r0, sp
 801b892:	f7fc fdc5 	bl	8018420 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b896:	f8d8 3000 	ldr.w	r3, [r8]
 801b89a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b89e:	442b      	add	r3, r5
 801b8a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b8a4:	4413      	add	r3, r2
 801b8a6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	ddd7      	ble.n	801b85e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	f7f8 fd55 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8b4:	b990      	cbnz	r0, 801b8dc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801b8b6:	88a7      	ldrh	r7, [r4, #4]
 801b8b8:	88e3      	ldrh	r3, [r4, #6]
 801b8ba:	fb17 f703 	smulbb	r7, r7, r3
 801b8be:	f8d8 3000 	ldr.w	r3, [r8]
 801b8c2:	441d      	add	r5, r3
 801b8c4:	4628      	mov	r0, r5
 801b8c6:	f7f8 fd4a 	bl	801435e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8ca:	b948      	cbnz	r0, 801b8e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801b8cc:	88ab      	ldrh	r3, [r5, #4]
 801b8ce:	88ea      	ldrh	r2, [r5, #6]
 801b8d0:	fb13 f302 	smulbb	r3, r3, r2
 801b8d4:	42bb      	cmp	r3, r7
 801b8d6:	f6bf af7c 	bge.w	801b7d2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801b8da:	e79e      	b.n	801b81a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801b8dc:	2700      	movs	r7, #0
 801b8de:	e7ee      	b.n	801b8be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801b8e0:	2300      	movs	r3, #0
 801b8e2:	e7f7      	b.n	801b8d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801b8e4:	2401bbb8 	.word	0x2401bbb8
 801b8e8:	2401bba0 	.word	0x2401bba0

0801b8ec <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8ee:	4c24      	ldr	r4, [pc, #144]	@ (801b980 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801b8f0:	6823      	ldr	r3, [r4, #0]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d042      	beq.n	801b97c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b8f6:	4a23      	ldr	r2, [pc, #140]	@ (801b984 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801b8f8:	4d23      	ldr	r5, [pc, #140]	@ (801b988 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801b8fa:	8811      	ldrh	r1, [r2, #0]
 801b8fc:	f8b5 c000 	ldrh.w	ip, [r5]
 801b900:	4822      	ldr	r0, [pc, #136]	@ (801b98c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801b902:	4461      	add	r1, ip
 801b904:	1c4a      	adds	r2, r1, #1
 801b906:	008f      	lsls	r7, r1, #2
 801b908:	f022 0201 	bic.w	r2, r2, #1
 801b90c:	19de      	adds	r6, r3, r7
 801b90e:	0412      	lsls	r2, r2, #16
 801b910:	6006      	str	r6, [r0, #0]
 801b912:	4e1f      	ldr	r6, [pc, #124]	@ (801b990 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801b914:	0c12      	lsrs	r2, r2, #16
 801b916:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801b91a:	19da      	adds	r2, r3, r7
 801b91c:	6032      	str	r2, [r6, #0]
 801b91e:	220e      	movs	r2, #14
 801b920:	fb02 f20c 	mul.w	r2, r2, ip
 801b924:	3203      	adds	r2, #3
 801b926:	f022 0203 	bic.w	r2, r2, #3
 801b92a:	443a      	add	r2, r7
 801b92c:	4f19      	ldr	r7, [pc, #100]	@ (801b994 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801b92e:	4413      	add	r3, r2
 801b930:	603b      	str	r3, [r7, #0]
 801b932:	2300      	movs	r3, #0
 801b934:	4f18      	ldr	r7, [pc, #96]	@ (801b998 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801b936:	469c      	mov	ip, r3
 801b938:	803b      	strh	r3, [r7, #0]
 801b93a:	4f18      	ldr	r7, [pc, #96]	@ (801b99c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801b93c:	683f      	ldr	r7, [r7, #0]
 801b93e:	1aba      	subs	r2, r7, r2
 801b940:	4f17      	ldr	r7, [pc, #92]	@ (801b9a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801b942:	603a      	str	r2, [r7, #0]
 801b944:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801b948:	4a16      	ldr	r2, [pc, #88]	@ (801b9a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801b94a:	8013      	strh	r3, [r2, #0]
 801b94c:	428b      	cmp	r3, r1
 801b94e:	d10d      	bne.n	801b96c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801b950:	882d      	ldrh	r5, [r5, #0]
 801b952:	2300      	movs	r3, #0
 801b954:	6830      	ldr	r0, [r6, #0]
 801b956:	240e      	movs	r4, #14
 801b958:	429d      	cmp	r5, r3
 801b95a:	d90f      	bls.n	801b97c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801b95c:	fb04 0203 	mla	r2, r4, r3, r0
 801b960:	3301      	adds	r3, #1
 801b962:	7b11      	ldrb	r1, [r2, #12]
 801b964:	f36f 1145 	bfc	r1, #5, #1
 801b968:	7311      	strb	r1, [r2, #12]
 801b96a:	e7f5      	b.n	801b958 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801b96c:	6822      	ldr	r2, [r4, #0]
 801b96e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801b972:	6802      	ldr	r2, [r0, #0]
 801b974:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801b978:	3301      	adds	r3, #1
 801b97a:	e7e7      	b.n	801b94c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b97e:	bf00      	nop
 801b980:	2401bb9c 	.word	0x2401bb9c
 801b984:	2401bbb8 	.word	0x2401bbb8
 801b988:	2401bbbc 	.word	0x2401bbbc
 801b98c:	2401bbb0 	.word	0x2401bbb0
 801b990:	2401bba0 	.word	0x2401bba0
 801b994:	2401bba8 	.word	0x2401bba8
 801b998:	2401bbba 	.word	0x2401bbba
 801b99c:	2401bba4 	.word	0x2401bba4
 801b9a0:	2401bbb4 	.word	0x2401bbb4
 801b9a4:	2401bbac 	.word	0x2401bbac

0801b9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801b9a8:	4b06      	ldr	r3, [pc, #24]	@ (801b9c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	b943      	cbnz	r3, 801b9c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b9ae:	b139      	cbz	r1, 801b9c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801b9b0:	4b05      	ldr	r3, [pc, #20]	@ (801b9c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801b9b2:	801a      	strh	r2, [r3, #0]
 801b9b4:	4b05      	ldr	r3, [pc, #20]	@ (801b9cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801b9b6:	6019      	str	r1, [r3, #0]
 801b9b8:	4b05      	ldr	r3, [pc, #20]	@ (801b9d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801b9ba:	6018      	str	r0, [r3, #0]
 801b9bc:	f7ff bf96 	b.w	801b8ec <_ZN8touchgfx6Bitmap10clearCacheEv>
 801b9c0:	4770      	bx	lr
 801b9c2:	bf00      	nop
 801b9c4:	2401bba8 	.word	0x2401bba8
 801b9c8:	2401bbbc 	.word	0x2401bbbc
 801b9cc:	2401bba4 	.word	0x2401bba4
 801b9d0:	2401bb9c 	.word	0x2401bb9c

0801b9d4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801b9d4:	b470      	push	{r4, r5, r6}
 801b9d6:	4c07      	ldr	r4, [pc, #28]	@ (801b9f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801b9d8:	4605      	mov	r5, r0
 801b9da:	4610      	mov	r0, r2
 801b9dc:	9a03      	ldr	r2, [sp, #12]
 801b9de:	6826      	ldr	r6, [r4, #0]
 801b9e0:	b936      	cbnz	r6, 801b9f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801b9e2:	6025      	str	r5, [r4, #0]
 801b9e4:	4c04      	ldr	r4, [pc, #16]	@ (801b9f8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801b9e6:	8021      	strh	r1, [r4, #0]
 801b9e8:	4619      	mov	r1, r3
 801b9ea:	bc70      	pop	{r4, r5, r6}
 801b9ec:	f7ff bfdc 	b.w	801b9a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801b9f0:	bc70      	pop	{r4, r5, r6}
 801b9f2:	4770      	bx	lr
 801b9f4:	2401bbc0 	.word	0x2401bbc0
 801b9f8:	2401bbb8 	.word	0x2401bbb8

0801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801b9fc:	4a12      	ldr	r2, [pc, #72]	@ (801ba48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801b9fe:	8803      	ldrh	r3, [r0, #0]
 801ba00:	8812      	ldrh	r2, [r2, #0]
 801ba02:	4293      	cmp	r3, r2
 801ba04:	d207      	bcs.n	801ba16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ba06:	4a11      	ldr	r2, [pc, #68]	@ (801ba4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ba08:	2114      	movs	r1, #20
 801ba0a:	6812      	ldr	r2, [r2, #0]
 801ba0c:	fb01 2303 	mla	r3, r1, r3, r2
 801ba10:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ba14:	4770      	bx	lr
 801ba16:	490e      	ldr	r1, [pc, #56]	@ (801ba50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ba18:	8809      	ldrh	r1, [r1, #0]
 801ba1a:	4411      	add	r1, r2
 801ba1c:	428b      	cmp	r3, r1
 801ba1e:	da04      	bge.n	801ba2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801ba20:	1a9b      	subs	r3, r3, r2
 801ba22:	4a0c      	ldr	r2, [pc, #48]	@ (801ba54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ba24:	210e      	movs	r1, #14
 801ba26:	6812      	ldr	r2, [r2, #0]
 801ba28:	e7f0      	b.n	801ba0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801ba2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ba2e:	4293      	cmp	r3, r2
 801ba30:	d108      	bne.n	801ba44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801ba32:	4b09      	ldr	r3, [pc, #36]	@ (801ba58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ba34:	781b      	ldrb	r3, [r3, #0]
 801ba36:	b91b      	cbnz	r3, 801ba40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801ba38:	4b08      	ldr	r3, [pc, #32]	@ (801ba5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ba3a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ba3e:	4770      	bx	lr
 801ba40:	4b07      	ldr	r3, [pc, #28]	@ (801ba60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ba42:	e7fa      	b.n	801ba3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801ba44:	2000      	movs	r0, #0
 801ba46:	4770      	bx	lr
 801ba48:	2401bbb8 	.word	0x2401bbb8
 801ba4c:	2401bbc0 	.word	0x2401bbc0
 801ba50:	2401bbbc 	.word	0x2401bbbc
 801ba54:	2401bba0 	.word	0x2401bba0
 801ba58:	2401bb30 	.word	0x2401bb30
 801ba5c:	2401bb32 	.word	0x2401bb32
 801ba60:	2401bb34 	.word	0x2401bb34

0801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ba64:	4a12      	ldr	r2, [pc, #72]	@ (801bab0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801ba66:	8803      	ldrh	r3, [r0, #0]
 801ba68:	8812      	ldrh	r2, [r2, #0]
 801ba6a:	4293      	cmp	r3, r2
 801ba6c:	d207      	bcs.n	801ba7e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801ba6e:	4a11      	ldr	r2, [pc, #68]	@ (801bab4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801ba70:	2114      	movs	r1, #20
 801ba72:	6812      	ldr	r2, [r2, #0]
 801ba74:	fb01 2303 	mla	r3, r1, r3, r2
 801ba78:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ba7c:	4770      	bx	lr
 801ba7e:	490e      	ldr	r1, [pc, #56]	@ (801bab8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ba80:	8809      	ldrh	r1, [r1, #0]
 801ba82:	4411      	add	r1, r2
 801ba84:	428b      	cmp	r3, r1
 801ba86:	da04      	bge.n	801ba92 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ba88:	1a9b      	subs	r3, r3, r2
 801ba8a:	4a0c      	ldr	r2, [pc, #48]	@ (801babc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ba8c:	210e      	movs	r1, #14
 801ba8e:	6812      	ldr	r2, [r2, #0]
 801ba90:	e7f0      	b.n	801ba74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ba92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ba96:	4293      	cmp	r3, r2
 801ba98:	d108      	bne.n	801baac <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ba9a:	4b09      	ldr	r3, [pc, #36]	@ (801bac0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ba9c:	781b      	ldrb	r3, [r3, #0]
 801ba9e:	b91b      	cbnz	r3, 801baa8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801baa0:	4b08      	ldr	r3, [pc, #32]	@ (801bac4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801baa2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801baa6:	4770      	bx	lr
 801baa8:	4b07      	ldr	r3, [pc, #28]	@ (801bac8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801baaa:	e7fa      	b.n	801baa2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801baac:	2000      	movs	r0, #0
 801baae:	4770      	bx	lr
 801bab0:	2401bbb8 	.word	0x2401bbb8
 801bab4:	2401bbc0 	.word	0x2401bbc0
 801bab8:	2401bbbc 	.word	0x2401bbbc
 801babc:	2401bba0 	.word	0x2401bba0
 801bac0:	2401bb30 	.word	0x2401bb30
 801bac4:	2401bb34 	.word	0x2401bb34
 801bac8:	2401bb32 	.word	0x2401bb32

0801bacc <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bacc:	4a22      	ldr	r2, [pc, #136]	@ (801bb58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bace:	b530      	push	{r4, r5, lr}
 801bad0:	880b      	ldrh	r3, [r1, #0]
 801bad2:	8812      	ldrh	r2, [r2, #0]
 801bad4:	4293      	cmp	r3, r2
 801bad6:	d213      	bcs.n	801bb00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bad8:	4a20      	ldr	r2, [pc, #128]	@ (801bb5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bada:	2114      	movs	r1, #20
 801badc:	6812      	ldr	r2, [r2, #0]
 801bade:	fb01 2303 	mla	r3, r1, r3, r2
 801bae2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bae6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801baea:	8a1a      	ldrh	r2, [r3, #16]
 801baec:	8a5b      	ldrh	r3, [r3, #18]
 801baee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801baf2:	8004      	strh	r4, [r0, #0]
 801baf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801baf8:	8041      	strh	r1, [r0, #2]
 801bafa:	8082      	strh	r2, [r0, #4]
 801bafc:	80c3      	strh	r3, [r0, #6]
 801bafe:	e024      	b.n	801bb4a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801bb00:	4917      	ldr	r1, [pc, #92]	@ (801bb60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bb02:	8809      	ldrh	r1, [r1, #0]
 801bb04:	4411      	add	r1, r2
 801bb06:	428b      	cmp	r3, r1
 801bb08:	da10      	bge.n	801bb2c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801bb0a:	1a9b      	subs	r3, r3, r2
 801bb0c:	220e      	movs	r2, #14
 801bb0e:	4353      	muls	r3, r2
 801bb10:	4a14      	ldr	r2, [pc, #80]	@ (801bb64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801bb12:	6811      	ldr	r1, [r2, #0]
 801bb14:	18ca      	adds	r2, r1, r3
 801bb16:	5ecd      	ldrsh	r5, [r1, r3]
 801bb18:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801bb1c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801bb20:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801bb24:	8005      	strh	r5, [r0, #0]
 801bb26:	8044      	strh	r4, [r0, #2]
 801bb28:	8081      	strh	r1, [r0, #4]
 801bb2a:	e7e7      	b.n	801bafc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bb2c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d10b      	bne.n	801bb4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801bb34:	4b0c      	ldr	r3, [pc, #48]	@ (801bb68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801bb36:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bb3a:	4b0c      	ldr	r3, [pc, #48]	@ (801bb6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801bb3c:	8081      	strh	r1, [r0, #4]
 801bb3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb42:	2300      	movs	r3, #0
 801bb44:	80c2      	strh	r2, [r0, #6]
 801bb46:	8003      	strh	r3, [r0, #0]
 801bb48:	8043      	strh	r3, [r0, #2]
 801bb4a:	bd30      	pop	{r4, r5, pc}
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	8003      	strh	r3, [r0, #0]
 801bb50:	8043      	strh	r3, [r0, #2]
 801bb52:	8083      	strh	r3, [r0, #4]
 801bb54:	e7d2      	b.n	801bafc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bb56:	bf00      	nop
 801bb58:	2401bbb8 	.word	0x2401bbb8
 801bb5c:	2401bbc0 	.word	0x2401bbc0
 801bb60:	2401bbbc 	.word	0x2401bbbc
 801bb64:	2401bba0 	.word	0x2401bba0
 801bb68:	2401bb2c 	.word	0x2401bb2c
 801bb6c:	2401bb2e 	.word	0x2401bb2e

0801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bb70:	4a12      	ldr	r2, [pc, #72]	@ (801bbbc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bb72:	8803      	ldrh	r3, [r0, #0]
 801bb74:	8811      	ldrh	r1, [r2, #0]
 801bb76:	428b      	cmp	r3, r1
 801bb78:	d20b      	bcs.n	801bb92 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bb7a:	4a11      	ldr	r2, [pc, #68]	@ (801bbc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bb7c:	6812      	ldr	r2, [r2, #0]
 801bb7e:	b112      	cbz	r2, 801bb86 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bb80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bb84:	b9c0      	cbnz	r0, 801bbb8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bb86:	4a0f      	ldr	r2, [pc, #60]	@ (801bbc4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bb88:	6811      	ldr	r1, [r2, #0]
 801bb8a:	2214      	movs	r2, #20
 801bb8c:	4353      	muls	r3, r2
 801bb8e:	58c8      	ldr	r0, [r1, r3]
 801bb90:	4770      	bx	lr
 801bb92:	4a0d      	ldr	r2, [pc, #52]	@ (801bbc8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bb94:	8812      	ldrh	r2, [r2, #0]
 801bb96:	440a      	add	r2, r1
 801bb98:	4293      	cmp	r3, r2
 801bb9a:	da04      	bge.n	801bba6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bb9c:	4a08      	ldr	r2, [pc, #32]	@ (801bbc0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bb9e:	6812      	ldr	r2, [r2, #0]
 801bba0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bba4:	4770      	bx	lr
 801bba6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bbaa:	4293      	cmp	r3, r2
 801bbac:	d103      	bne.n	801bbb6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801bbae:	4b07      	ldr	r3, [pc, #28]	@ (801bbcc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801bbb4:	4770      	bx	lr
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	4770      	bx	lr
 801bbba:	bf00      	nop
 801bbbc:	2401bbb8 	.word	0x2401bbb8
 801bbc0:	2401bb9c 	.word	0x2401bb9c
 801bbc4:	2401bbc0 	.word	0x2401bbc0
 801bbc8:	2401bbbc 	.word	0x2401bbbc
 801bbcc:	2401bb38 	.word	0x2401bb38

0801bbd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801bbd0:	4b24      	ldr	r3, [pc, #144]	@ (801bc64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801bbd2:	8802      	ldrh	r2, [r0, #0]
 801bbd4:	8818      	ldrh	r0, [r3, #0]
 801bbd6:	4282      	cmp	r2, r0
 801bbd8:	d221      	bcs.n	801bc1e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801bbda:	4b23      	ldr	r3, [pc, #140]	@ (801bc68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801bbdc:	6819      	ldr	r1, [r3, #0]
 801bbde:	2314      	movs	r3, #20
 801bbe0:	fb03 1302 	mla	r3, r3, r2, r1
 801bbe4:	6858      	ldr	r0, [r3, #4]
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	d03a      	beq.n	801bc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bbea:	4920      	ldr	r1, [pc, #128]	@ (801bc6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bbec:	6809      	ldr	r1, [r1, #0]
 801bbee:	2900      	cmp	r1, #0
 801bbf0:	d036      	beq.n	801bc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bbf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801bbf6:	2900      	cmp	r1, #0
 801bbf8:	d032      	beq.n	801bc60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801bbfa:	891a      	ldrh	r2, [r3, #8]
 801bbfc:	8958      	ldrh	r0, [r3, #10]
 801bbfe:	4350      	muls	r0, r2
 801bc00:	7c5a      	ldrb	r2, [r3, #17]
 801bc02:	7cdb      	ldrb	r3, [r3, #19]
 801bc04:	0952      	lsrs	r2, r2, #5
 801bc06:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801bc0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801bc0e:	2b0b      	cmp	r3, #11
 801bc10:	bf18      	it	ne
 801bc12:	0040      	lslne	r0, r0, #1
 801bc14:	3003      	adds	r0, #3
 801bc16:	f020 0003 	bic.w	r0, r0, #3
 801bc1a:	4408      	add	r0, r1
 801bc1c:	4770      	bx	lr
 801bc1e:	4b14      	ldr	r3, [pc, #80]	@ (801bc70 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801bc20:	881b      	ldrh	r3, [r3, #0]
 801bc22:	4403      	add	r3, r0
 801bc24:	429a      	cmp	r2, r3
 801bc26:	da1a      	bge.n	801bc5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc28:	4b12      	ldr	r3, [pc, #72]	@ (801bc74 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801bc2a:	1a10      	subs	r0, r2, r0
 801bc2c:	210e      	movs	r1, #14
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	fb01 3000 	mla	r0, r1, r0, r3
 801bc34:	7b03      	ldrb	r3, [r0, #12]
 801bc36:	f003 031f 	and.w	r3, r3, #31
 801bc3a:	2b0b      	cmp	r3, #11
 801bc3c:	d10b      	bne.n	801bc56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801bc3e:	8903      	ldrh	r3, [r0, #8]
 801bc40:	8940      	ldrh	r0, [r0, #10]
 801bc42:	4358      	muls	r0, r3
 801bc44:	4b09      	ldr	r3, [pc, #36]	@ (801bc6c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801bc46:	3003      	adds	r0, #3
 801bc48:	6819      	ldr	r1, [r3, #0]
 801bc4a:	f020 0303 	bic.w	r3, r0, #3
 801bc4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801bc52:	4418      	add	r0, r3
 801bc54:	4770      	bx	lr
 801bc56:	2b0d      	cmp	r3, #13
 801bc58:	d101      	bne.n	801bc5e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801bc5a:	300d      	adds	r0, #13
 801bc5c:	4770      	bx	lr
 801bc5e:	2000      	movs	r0, #0
 801bc60:	4770      	bx	lr
 801bc62:	bf00      	nop
 801bc64:	2401bbb8 	.word	0x2401bbb8
 801bc68:	2401bbc0 	.word	0x2401bbc0
 801bc6c:	2401bb9c 	.word	0x2401bb9c
 801bc70:	2401bbbc 	.word	0x2401bbbc
 801bc74:	2401bba0 	.word	0x2401bba0

0801bc78 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801bc78:	4a17      	ldr	r2, [pc, #92]	@ (801bcd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801bc7a:	b510      	push	{r4, lr}
 801bc7c:	8803      	ldrh	r3, [r0, #0]
 801bc7e:	8812      	ldrh	r2, [r2, #0]
 801bc80:	4293      	cmp	r3, r2
 801bc82:	d20c      	bcs.n	801bc9e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801bc84:	4a15      	ldr	r2, [pc, #84]	@ (801bcdc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801bc86:	2114      	movs	r1, #20
 801bc88:	6812      	ldr	r2, [r2, #0]
 801bc8a:	fb01 2303 	mla	r3, r1, r3, r2
 801bc8e:	7c58      	ldrb	r0, [r3, #17]
 801bc90:	0942      	lsrs	r2, r0, #5
 801bc92:	7cd8      	ldrb	r0, [r3, #19]
 801bc94:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801bc98:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801bc9c:	bd10      	pop	{r4, pc}
 801bc9e:	4910      	ldr	r1, [pc, #64]	@ (801bce0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801bca0:	8809      	ldrh	r1, [r1, #0]
 801bca2:	4411      	add	r1, r2
 801bca4:	428b      	cmp	r3, r1
 801bca6:	da09      	bge.n	801bcbc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801bca8:	1a9b      	subs	r3, r3, r2
 801bcaa:	4a0e      	ldr	r2, [pc, #56]	@ (801bce4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801bcac:	210e      	movs	r1, #14
 801bcae:	6812      	ldr	r2, [r2, #0]
 801bcb0:	fb01 2303 	mla	r3, r1, r3, r2
 801bcb4:	7b18      	ldrb	r0, [r3, #12]
 801bcb6:	f000 001f 	and.w	r0, r0, #31
 801bcba:	e7ef      	b.n	801bc9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bcbc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801bcc0:	4293      	cmp	r3, r2
 801bcc2:	d106      	bne.n	801bcd2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801bcc4:	f7f2 fa6a 	bl	800e19c <_ZN8touchgfx3HAL3lcdEv>
 801bcc8:	6803      	ldr	r3, [r0, #0]
 801bcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bcd0:	4718      	bx	r3
 801bcd2:	2000      	movs	r0, #0
 801bcd4:	e7e2      	b.n	801bc9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801bcd6:	bf00      	nop
 801bcd8:	2401bbb8 	.word	0x2401bbb8
 801bcdc:	2401bbc0 	.word	0x2401bbc0
 801bce0:	2401bbbc 	.word	0x2401bbbc
 801bce4:	2401bba0 	.word	0x2401bba0

0801bce8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801bce8:	2018      	movs	r0, #24
 801bcea:	4770      	bx	lr

0801bcec <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801bcec:	2001      	movs	r0, #1
 801bcee:	4770      	bx	lr

0801bcf0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801bcf0:	4b02      	ldr	r3, [pc, #8]	@ (801bcfc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801bcf2:	8818      	ldrh	r0, [r3, #0]
 801bcf4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bcf8:	b280      	uxth	r0, r0
 801bcfa:	4770      	bx	lr
 801bcfc:	2401bb32 	.word	0x2401bb32

0801bd00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801bd00:	2bff      	cmp	r3, #255	@ 0xff
 801bd02:	d040      	beq.n	801bd86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801bd04:	2a2c      	cmp	r2, #44	@ 0x2c
 801bd06:	d02a      	beq.n	801bd5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801bd08:	d80f      	bhi.n	801bd2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801bd0a:	2a08      	cmp	r2, #8
 801bd0c:	d037      	beq.n	801bd7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bd0e:	d805      	bhi.n	801bd1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801bd10:	2a04      	cmp	r2, #4
 801bd12:	d032      	beq.n	801bd7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801bd14:	2a05      	cmp	r2, #5
 801bd16:	d02e      	beq.n	801bd76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801bd18:	2000      	movs	r0, #0
 801bd1a:	4770      	bx	lr
 801bd1c:	2a0a      	cmp	r2, #10
 801bd1e:	d02e      	beq.n	801bd7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801bd20:	d301      	bcc.n	801bd26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801bd22:	2a0b      	cmp	r2, #11
 801bd24:	d1f8      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd26:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801bd28:	4770      	bx	lr
 801bd2a:	2a30      	cmp	r2, #48	@ 0x30
 801bd2c:	d029      	beq.n	801bd82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bd2e:	d808      	bhi.n	801bd42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801bd30:	2a2e      	cmp	r2, #46	@ 0x2e
 801bd32:	684b      	ldr	r3, [r1, #4]
 801bd34:	d01a      	beq.n	801bd6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801bd36:	d90b      	bls.n	801bd50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801bd38:	781b      	ldrb	r3, [r3, #0]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d1ec      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd3e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801bd40:	4770      	bx	lr
 801bd42:	2a32      	cmp	r2, #50	@ 0x32
 801bd44:	d01d      	beq.n	801bd82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801bd46:	d301      	bcc.n	801bd4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801bd48:	2a33      	cmp	r2, #51	@ 0x33
 801bd4a:	d1e5      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd4c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801bd4e:	4770      	bx	lr
 801bd50:	781b      	ldrb	r3, [r3, #0]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d0f3      	beq.n	801bd3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801bd56:	2b01      	cmp	r3, #1
 801bd58:	d1de      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd5a:	6940      	ldr	r0, [r0, #20]
 801bd5c:	4770      	bx	lr
 801bd5e:	684b      	ldr	r3, [r1, #4]
 801bd60:	781b      	ldrb	r3, [r3, #0]
 801bd62:	b133      	cbz	r3, 801bd72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801bd64:	2b01      	cmp	r3, #1
 801bd66:	d1d7      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd68:	68c0      	ldr	r0, [r0, #12]
 801bd6a:	4770      	bx	lr
 801bd6c:	781b      	ldrb	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d1d2      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd72:	69c0      	ldr	r0, [r0, #28]
 801bd74:	4770      	bx	lr
 801bd76:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801bd78:	4770      	bx	lr
 801bd7a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801bd7c:	4770      	bx	lr
 801bd7e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801bd80:	4770      	bx	lr
 801bd82:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801bd84:	4770      	bx	lr
 801bd86:	2a2c      	cmp	r2, #44	@ 0x2c
 801bd88:	d02a      	beq.n	801bde0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801bd8a:	d80f      	bhi.n	801bdac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801bd8c:	2a08      	cmp	r2, #8
 801bd8e:	d035      	beq.n	801bdfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801bd90:	d805      	bhi.n	801bd9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801bd92:	2a04      	cmp	r2, #4
 801bd94:	d030      	beq.n	801bdf8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801bd96:	2a05      	cmp	r2, #5
 801bd98:	d1be      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bd9a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801bd9c:	4770      	bx	lr
 801bd9e:	2a0a      	cmp	r2, #10
 801bda0:	d02c      	beq.n	801bdfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801bda2:	d301      	bcc.n	801bda8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801bda4:	2a0b      	cmp	r2, #11
 801bda6:	d1b7      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bda8:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801bdaa:	4770      	bx	lr
 801bdac:	2a30      	cmp	r2, #48	@ 0x30
 801bdae:	d027      	beq.n	801be00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801bdb0:	d808      	bhi.n	801bdc4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801bdb2:	2a2e      	cmp	r2, #46	@ 0x2e
 801bdb4:	684b      	ldr	r3, [r1, #4]
 801bdb6:	d01a      	beq.n	801bdee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801bdb8:	d90b      	bls.n	801bdd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801bdba:	781b      	ldrb	r3, [r3, #0]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d1ab      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bdc0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801bdc2:	4770      	bx	lr
 801bdc4:	2a32      	cmp	r2, #50	@ 0x32
 801bdc6:	d01b      	beq.n	801be00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801bdc8:	d301      	bcc.n	801bdce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801bdca:	2a33      	cmp	r2, #51	@ 0x33
 801bdcc:	d1a4      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bdce:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801bdd0:	4770      	bx	lr
 801bdd2:	781b      	ldrb	r3, [r3, #0]
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d0f3      	beq.n	801bdc0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801bdd8:	2b01      	cmp	r3, #1
 801bdda:	d19d      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bddc:	6980      	ldr	r0, [r0, #24]
 801bdde:	4770      	bx	lr
 801bde0:	684b      	ldr	r3, [r1, #4]
 801bde2:	781b      	ldrb	r3, [r3, #0]
 801bde4:	b133      	cbz	r3, 801bdf4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801bde6:	2b01      	cmp	r3, #1
 801bde8:	d196      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bdea:	6900      	ldr	r0, [r0, #16]
 801bdec:	4770      	bx	lr
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d191      	bne.n	801bd18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801bdf4:	6a00      	ldr	r0, [r0, #32]
 801bdf6:	4770      	bx	lr
 801bdf8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801bdfa:	4770      	bx	lr
 801bdfc:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801bdfe:	4770      	bx	lr
 801be00:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801be02:	4770      	bx	lr

0801be04 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be08:	b085      	sub	sp, #20
 801be0a:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801be0c:	9203      	str	r2, [sp, #12]
 801be0e:	6870      	ldr	r0, [r6, #4]
 801be10:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801be14:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801be18:	9101      	str	r1, [sp, #4]
 801be1a:	fa1f f885 	uxth.w	r8, r5
 801be1e:	43ed      	mvns	r5, r5
 801be20:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801be24:	b2ed      	uxtb	r5, r5
 801be26:	fb00 2404 	mla	r4, r0, r4, r2
 801be2a:	6832      	ldr	r2, [r6, #0]
 801be2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be30:	4414      	add	r4, r2
 801be32:	f8dc 2000 	ldr.w	r2, [ip]
 801be36:	9202      	str	r2, [sp, #8]
 801be38:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801be3c:	f102 0e04 	add.w	lr, r2, #4
 801be40:	9a01      	ldr	r2, [sp, #4]
 801be42:	2a00      	cmp	r2, #0
 801be44:	dc03      	bgt.n	801be4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801be46:	9a03      	ldr	r2, [sp, #12]
 801be48:	2a00      	cmp	r2, #0
 801be4a:	f340 8116 	ble.w	801c07a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801be4e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801be50:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801be54:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801be58:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801be5a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801be5e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801be62:	2b00      	cmp	r3, #0
 801be64:	dd0e      	ble.n	801be84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801be66:	1406      	asrs	r6, r0, #16
 801be68:	d405      	bmi.n	801be76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be6a:	4556      	cmp	r6, sl
 801be6c:	da03      	bge.n	801be76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be6e:	1416      	asrs	r6, r2, #16
 801be70:	d401      	bmi.n	801be76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801be72:	454e      	cmp	r6, r9
 801be74:	db07      	blt.n	801be86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801be76:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801be78:	3b01      	subs	r3, #1
 801be7a:	3403      	adds	r4, #3
 801be7c:	4430      	add	r0, r6
 801be7e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801be80:	4432      	add	r2, r6
 801be82:	e7ee      	b.n	801be62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801be84:	d063      	beq.n	801bf4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801be86:	1e5e      	subs	r6, r3, #1
 801be88:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801be8a:	fb07 0706 	mla	r7, r7, r6, r0
 801be8e:	143f      	asrs	r7, r7, #16
 801be90:	d454      	bmi.n	801bf3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801be92:	4557      	cmp	r7, sl
 801be94:	da52      	bge.n	801bf3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801be96:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801be98:	fb07 2606 	mla	r6, r7, r6, r2
 801be9c:	1436      	asrs	r6, r6, #16
 801be9e:	d44d      	bmi.n	801bf3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801bea0:	454e      	cmp	r6, r9
 801bea2:	da4b      	bge.n	801bf3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801bea4:	1ce6      	adds	r6, r4, #3
 801bea6:	4699      	mov	r9, r3
 801bea8:	f1b9 0f00 	cmp.w	r9, #0
 801beac:	f106 0603 	add.w	r6, r6, #3
 801beb0:	dd48      	ble.n	801bf44 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801beb2:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801beb6:	1417      	asrs	r7, r2, #16
 801beb8:	9902      	ldr	r1, [sp, #8]
 801beba:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801bebe:	f109 39ff 	add.w	r9, r9, #4294967295
 801bec2:	fb0b 1707 	mla	r7, fp, r7, r1
 801bec6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801beca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801becc:	f817 700a 	ldrb.w	r7, [r7, sl]
 801bed0:	fb1b fb05 	smulbb	fp, fp, r5
 801bed4:	4408      	add	r0, r1
 801bed6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801bed8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bedc:	440a      	add	r2, r1
 801bede:	eb0e 0a07 	add.w	sl, lr, r7
 801bee2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801bee6:	fb07 b708 	mla	r7, r7, r8, fp
 801beea:	b2bf      	uxth	r7, r7
 801beec:	f107 0b01 	add.w	fp, r7, #1
 801bef0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bef4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801bef8:	fb1b fb05 	smulbb	fp, fp, r5
 801befc:	123f      	asrs	r7, r7, #8
 801befe:	f806 7c06 	strb.w	r7, [r6, #-6]
 801bf02:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801bf06:	fb07 b708 	mla	r7, r7, r8, fp
 801bf0a:	b2bf      	uxth	r7, r7
 801bf0c:	f107 0b01 	add.w	fp, r7, #1
 801bf10:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801bf14:	123f      	asrs	r7, r7, #8
 801bf16:	f806 7c05 	strb.w	r7, [r6, #-5]
 801bf1a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801bf1e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801bf22:	fb1a fa05 	smulbb	sl, sl, r5
 801bf26:	fb07 a708 	mla	r7, r7, r8, sl
 801bf2a:	b2bf      	uxth	r7, r7
 801bf2c:	f107 0a01 	add.w	sl, r7, #1
 801bf30:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801bf34:	123f      	asrs	r7, r7, #8
 801bf36:	f806 7c04 	strb.w	r7, [r6, #-4]
 801bf3a:	e7b5      	b.n	801bea8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801bf3c:	2700      	movs	r7, #0
 801bf3e:	1bde      	subs	r6, r3, r7
 801bf40:	2e00      	cmp	r6, #0
 801bf42:	dc42      	bgt.n	801bfca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801bf44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf4c:	441c      	add	r4, r3
 801bf4e:	9b01      	ldr	r3, [sp, #4]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	f340 8092 	ble.w	801c07a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801bf56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801bf5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf5c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bf60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bf64:	eef0 6a62 	vmov.f32	s13, s5
 801bf68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bf6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bf70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf74:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801bf78:	eef0 6a43 	vmov.f32	s13, s6
 801bf7c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bf80:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801bf84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bf88:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bf8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bf90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bf94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bf98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bf9c:	ee12 2a90 	vmov	r2, s5
 801bfa0:	eef0 2a47 	vmov.f32	s5, s14
 801bfa4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfa8:	ee13 2a10 	vmov	r2, s6
 801bfac:	9311      	str	r3, [sp, #68]	@ 0x44
 801bfae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfb0:	eeb0 3a67 	vmov.f32	s6, s15
 801bfb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bfb8:	9312      	str	r3, [sp, #72]	@ 0x48
 801bfba:	9b01      	ldr	r3, [sp, #4]
 801bfbc:	9a03      	ldr	r2, [sp, #12]
 801bfbe:	3b01      	subs	r3, #1
 801bfc0:	9301      	str	r3, [sp, #4]
 801bfc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfc4:	bf08      	it	eq
 801bfc6:	4613      	moveq	r3, r2
 801bfc8:	e73a      	b.n	801be40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bfca:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801bfce:	d44e      	bmi.n	801c06e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bfd0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bfd4:	4556      	cmp	r6, sl
 801bfd6:	dd4a      	ble.n	801c06e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bfd8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801bfdc:	d447      	bmi.n	801c06e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bfde:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801bfe2:	4559      	cmp	r1, fp
 801bfe4:	dd43      	ble.n	801c06e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801bfe6:	fa0f f986 	sxth.w	r9, r6
 801bfea:	9902      	ldr	r1, [sp, #8]
 801bfec:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801bff0:	fb0b 1909 	mla	r9, fp, r9, r1
 801bff4:	f814 b006 	ldrb.w	fp, [r4, r6]
 801bff8:	f819 900a 	ldrb.w	r9, [r9, sl]
 801bffc:	fb1b fb05 	smulbb	fp, fp, r5
 801c000:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c004:	eb0e 0a09 	add.w	sl, lr, r9
 801c008:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c00c:	fb09 b908 	mla	r9, r9, r8, fp
 801c010:	fa1f f989 	uxth.w	r9, r9
 801c014:	f109 0b01 	add.w	fp, r9, #1
 801c018:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c01c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c020:	f804 9006 	strb.w	r9, [r4, r6]
 801c024:	4426      	add	r6, r4
 801c026:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c02a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c02e:	fb1b fb05 	smulbb	fp, fp, r5
 801c032:	fb09 b908 	mla	r9, r9, r8, fp
 801c036:	fa1f f989 	uxth.w	r9, r9
 801c03a:	f109 0b01 	add.w	fp, r9, #1
 801c03e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c042:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c046:	f886 9001 	strb.w	r9, [r6, #1]
 801c04a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c04e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c052:	fb1a fa05 	smulbb	sl, sl, r5
 801c056:	fb09 a908 	mla	r9, r9, r8, sl
 801c05a:	fa1f f989 	uxth.w	r9, r9
 801c05e:	f109 0a01 	add.w	sl, r9, #1
 801c062:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c066:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c06a:	f886 9002 	strb.w	r9, [r6, #2]
 801c06e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801c070:	3701      	adds	r7, #1
 801c072:	4408      	add	r0, r1
 801c074:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c076:	440a      	add	r2, r1
 801c078:	e761      	b.n	801bf3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c07a:	b005      	add	sp, #20
 801c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c080 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c084:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c086:	4693      	mov	fp, r2
 801c088:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801c08a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c08e:	6868      	ldr	r0, [r5, #4]
 801c090:	6877      	ldr	r7, [r6, #4]
 801c092:	9100      	str	r1, [sp, #0]
 801c094:	3704      	adds	r7, #4
 801c096:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c09a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801c09e:	fb00 2404 	mla	r4, r0, r4, r2
 801c0a2:	682a      	ldr	r2, [r5, #0]
 801c0a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c0a8:	4414      	add	r4, r2
 801c0aa:	6832      	ldr	r2, [r6, #0]
 801c0ac:	9201      	str	r2, [sp, #4]
 801c0ae:	9a00      	ldr	r2, [sp, #0]
 801c0b0:	2a00      	cmp	r2, #0
 801c0b2:	dc03      	bgt.n	801c0bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c0b4:	f1bb 0f00 	cmp.w	fp, #0
 801c0b8:	f340 80bc 	ble.w	801c234 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c0bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c0be:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c0c2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c0c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c0c8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c0cc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	dd0c      	ble.n	801c0ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c0d4:	1405      	asrs	r5, r0, #16
 801c0d6:	d405      	bmi.n	801c0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c0d8:	4555      	cmp	r5, sl
 801c0da:	da03      	bge.n	801c0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c0dc:	1415      	asrs	r5, r2, #16
 801c0de:	d401      	bmi.n	801c0e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c0e0:	454d      	cmp	r5, r9
 801c0e2:	db05      	blt.n	801c0f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c0e4:	4440      	add	r0, r8
 801c0e6:	4472      	add	r2, lr
 801c0e8:	3b01      	subs	r3, #1
 801c0ea:	3403      	adds	r4, #3
 801c0ec:	e7f0      	b.n	801c0d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c0ee:	d03f      	beq.n	801c170 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c0f0:	1e5d      	subs	r5, r3, #1
 801c0f2:	fb08 0c05 	mla	ip, r8, r5, r0
 801c0f6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c0fa:	d42e      	bmi.n	801c15a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c0fc:	45d4      	cmp	ip, sl
 801c0fe:	da2c      	bge.n	801c15a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c100:	fb0e 2505 	mla	r5, lr, r5, r2
 801c104:	142d      	asrs	r5, r5, #16
 801c106:	d428      	bmi.n	801c15a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c108:	454d      	cmp	r5, r9
 801c10a:	da26      	bge.n	801c15a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c10c:	1ce5      	adds	r5, r4, #3
 801c10e:	469c      	mov	ip, r3
 801c110:	f1bc 0f00 	cmp.w	ip, #0
 801c114:	f105 0503 	add.w	r5, r5, #3
 801c118:	dd25      	ble.n	801c166 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c11a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c11e:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c122:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c126:	4472      	add	r2, lr
 801c128:	468a      	mov	sl, r1
 801c12a:	9901      	ldr	r1, [sp, #4]
 801c12c:	fb0a 1909 	mla	r9, sl, r9, r1
 801c130:	1401      	asrs	r1, r0, #16
 801c132:	4440      	add	r0, r8
 801c134:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c138:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c13c:	eb07 0a09 	add.w	sl, r7, r9
 801c140:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c144:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c148:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c14c:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c150:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c154:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c158:	e7da      	b.n	801c110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c15a:	2500      	movs	r5, #0
 801c15c:	eba3 0c05 	sub.w	ip, r3, r5
 801c160:	f1bc 0f00 	cmp.w	ip, #0
 801c164:	dc3b      	bgt.n	801c1de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c16a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c16e:	441c      	add	r4, r3
 801c170:	9b00      	ldr	r3, [sp, #0]
 801c172:	2b00      	cmp	r3, #0
 801c174:	dd5e      	ble.n	801c234 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c176:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c17a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c17c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c180:	eeb0 6a62 	vmov.f32	s12, s5
 801c184:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c188:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c18c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c190:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801c194:	eeb0 6a43 	vmov.f32	s12, s6
 801c198:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c19c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801c1a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1b8:	ee12 2a90 	vmov	r2, s5
 801c1bc:	eef0 2a47 	vmov.f32	s5, s14
 801c1c0:	fb92 f8f3 	sdiv	r8, r2, r3
 801c1c4:	ee13 2a10 	vmov	r2, s6
 801c1c8:	eeb0 3a67 	vmov.f32	s6, s15
 801c1cc:	fb92 fef3 	sdiv	lr, r2, r3
 801c1d0:	9b00      	ldr	r3, [sp, #0]
 801c1d2:	3b01      	subs	r3, #1
 801c1d4:	9300      	str	r3, [sp, #0]
 801c1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c1d8:	bf08      	it	eq
 801c1da:	465b      	moveq	r3, fp
 801c1dc:	e767      	b.n	801c0ae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c1de:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c1e2:	d423      	bmi.n	801c22c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c1e4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c1e8:	45cc      	cmp	ip, r9
 801c1ea:	dd1f      	ble.n	801c22c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c1ec:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c1f0:	d41c      	bmi.n	801c22c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c1f2:	68f1      	ldr	r1, [r6, #12]
 801c1f4:	4551      	cmp	r1, sl
 801c1f6:	dd19      	ble.n	801c22c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c1f8:	fa0f fc8c 	sxth.w	ip, ip
 801c1fc:	9901      	ldr	r1, [sp, #4]
 801c1fe:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c202:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c206:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c20a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c20e:	eb07 090c 	add.w	r9, r7, ip
 801c212:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c216:	f804 a00c 	strb.w	sl, [r4, ip]
 801c21a:	44a4      	add	ip, r4
 801c21c:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c220:	f88c a001 	strb.w	sl, [ip, #1]
 801c224:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c228:	f88c 9002 	strb.w	r9, [ip, #2]
 801c22c:	4440      	add	r0, r8
 801c22e:	4472      	add	r2, lr
 801c230:	3501      	adds	r5, #1
 801c232:	e793      	b.n	801c15c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c234:	b003      	add	sp, #12
 801c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c23a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c23a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c23e:	b085      	sub	sp, #20
 801c240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c244:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c246:	9202      	str	r2, [sp, #8]
 801c248:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801c24c:	6860      	ldr	r0, [r4, #4]
 801c24e:	9203      	str	r2, [sp, #12]
 801c250:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c254:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801c258:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801c25c:	fb00 2505 	mla	r5, r0, r5, r2
 801c260:	6822      	ldr	r2, [r4, #0]
 801c262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c266:	4415      	add	r5, r2
 801c268:	f8dc 2000 	ldr.w	r2, [ip]
 801c26c:	9200      	str	r2, [sp, #0]
 801c26e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c272:	3204      	adds	r2, #4
 801c274:	9201      	str	r2, [sp, #4]
 801c276:	2900      	cmp	r1, #0
 801c278:	dc03      	bgt.n	801c282 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c27a:	9a02      	ldr	r2, [sp, #8]
 801c27c:	2a00      	cmp	r2, #0
 801c27e:	f340 8127 	ble.w	801c4d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c284:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c288:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801c28c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c28e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c292:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c296:	2b00      	cmp	r3, #0
 801c298:	dd0d      	ble.n	801c2b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c29a:	1422      	asrs	r2, r4, #16
 801c29c:	d405      	bmi.n	801c2aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c29e:	4542      	cmp	r2, r8
 801c2a0:	da03      	bge.n	801c2aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c2a2:	1402      	asrs	r2, r0, #16
 801c2a4:	d401      	bmi.n	801c2aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c2a6:	42ba      	cmp	r2, r7
 801c2a8:	db06      	blt.n	801c2b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c2aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c2ac:	4474      	add	r4, lr
 801c2ae:	3b01      	subs	r3, #1
 801c2b0:	3503      	adds	r5, #3
 801c2b2:	4410      	add	r0, r2
 801c2b4:	e7ef      	b.n	801c296 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c2b6:	d075      	beq.n	801c3a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c2b8:	1e5a      	subs	r2, r3, #1
 801c2ba:	fb0e 4602 	mla	r6, lr, r2, r4
 801c2be:	1436      	asrs	r6, r6, #16
 801c2c0:	d465      	bmi.n	801c38e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c2c2:	4546      	cmp	r6, r8
 801c2c4:	da63      	bge.n	801c38e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c2c6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c2c8:	fb06 0202 	mla	r2, r6, r2, r0
 801c2cc:	1412      	asrs	r2, r2, #16
 801c2ce:	d45e      	bmi.n	801c38e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c2d0:	42ba      	cmp	r2, r7
 801c2d2:	da5c      	bge.n	801c38e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c2d4:	1cef      	adds	r7, r5, #3
 801c2d6:	4699      	mov	r9, r3
 801c2d8:	f1b9 0f00 	cmp.w	r9, #0
 801c2dc:	dd5d      	ble.n	801c39a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c2de:	1402      	asrs	r2, r0, #16
 801c2e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c2e4:	1426      	asrs	r6, r4, #16
 801c2e6:	4692      	mov	sl, r2
 801c2e8:	9a00      	ldr	r2, [sp, #0]
 801c2ea:	fb08 220a 	mla	r2, r8, sl, r2
 801c2ee:	5d92      	ldrb	r2, [r2, r6]
 801c2f0:	9e01      	ldr	r6, [sp, #4]
 801c2f2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c2f6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c2fa:	d041      	beq.n	801c380 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c2fc:	9a03      	ldr	r2, [sp, #12]
 801c2fe:	fa5f fb86 	uxtb.w	fp, r6
 801c302:	fb02 f808 	mul.w	r8, r2, r8
 801c306:	f108 0201 	add.w	r2, r8, #1
 801c30a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c30e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c312:	1212      	asrs	r2, r2, #8
 801c314:	fa1f fa82 	uxth.w	sl, r2
 801c318:	43d2      	mvns	r2, r2
 801c31a:	fb1b fb0a 	smulbb	fp, fp, sl
 801c31e:	b2d2      	uxtb	r2, r2
 801c320:	fb08 b802 	mla	r8, r8, r2, fp
 801c324:	fa1f f888 	uxth.w	r8, r8
 801c328:	f108 0b01 	add.w	fp, r8, #1
 801c32c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c330:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c334:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c338:	fb1b fb0a 	smulbb	fp, fp, sl
 801c33c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c340:	fb16 fa0a 	smulbb	sl, r6, sl
 801c344:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c348:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c34c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c350:	fb06 aa02 	mla	sl, r6, r2, sl
 801c354:	fb08 b802 	mla	r8, r8, r2, fp
 801c358:	fa1f fa8a 	uxth.w	sl, sl
 801c35c:	fa1f f888 	uxth.w	r8, r8
 801c360:	f10a 0601 	add.w	r6, sl, #1
 801c364:	f108 0b01 	add.w	fp, r8, #1
 801c368:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c36c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c370:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c374:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c378:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c37c:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c380:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c382:	4474      	add	r4, lr
 801c384:	3703      	adds	r7, #3
 801c386:	f109 39ff 	add.w	r9, r9, #4294967295
 801c38a:	4410      	add	r0, r2
 801c38c:	e7a4      	b.n	801c2d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c38e:	f04f 0800 	mov.w	r8, #0
 801c392:	eba3 0208 	sub.w	r2, r3, r8
 801c396:	2a00      	cmp	r2, #0
 801c398:	dc3b      	bgt.n	801c412 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c39a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3a2:	441d      	add	r5, r3
 801c3a4:	2900      	cmp	r1, #0
 801c3a6:	f340 8093 	ble.w	801c4d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c3aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3b4:	3901      	subs	r1, #1
 801c3b6:	eeb0 6a62 	vmov.f32	s12, s5
 801c3ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c3be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3c6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c3ca:	eeb0 6a43 	vmov.f32	s12, s6
 801c3ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c3d2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c3d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3ee:	ee12 2a90 	vmov	r2, s5
 801c3f2:	eef0 2a47 	vmov.f32	s5, s14
 801c3f6:	fb92 fef3 	sdiv	lr, r2, r3
 801c3fa:	ee13 2a10 	vmov	r2, s6
 801c3fe:	eeb0 3a67 	vmov.f32	s6, s15
 801c402:	fb92 f3f3 	sdiv	r3, r2, r3
 801c406:	9a02      	ldr	r2, [sp, #8]
 801c408:	9312      	str	r3, [sp, #72]	@ 0x48
 801c40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c40c:	bf08      	it	eq
 801c40e:	4613      	moveq	r3, r2
 801c410:	e731      	b.n	801c276 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c412:	1427      	asrs	r7, r4, #16
 801c414:	d456      	bmi.n	801c4c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c416:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c41a:	42be      	cmp	r6, r7
 801c41c:	dd52      	ble.n	801c4c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c41e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c422:	d44f      	bmi.n	801c4c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c424:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c428:	454a      	cmp	r2, r9
 801c42a:	dd4b      	ble.n	801c4c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c42c:	9a00      	ldr	r2, [sp, #0]
 801c42e:	b236      	sxth	r6, r6
 801c430:	fb09 2606 	mla	r6, r9, r6, r2
 801c434:	5df2      	ldrb	r2, [r6, r7]
 801c436:	9e01      	ldr	r6, [sp, #4]
 801c438:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c43c:	0e3a      	lsrs	r2, r7, #24
 801c43e:	d041      	beq.n	801c4c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c440:	9e03      	ldr	r6, [sp, #12]
 801c442:	fa5f fb87 	uxtb.w	fp, r7
 801c446:	4372      	muls	r2, r6
 801c448:	1c56      	adds	r6, r2, #1
 801c44a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c44e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c452:	1212      	asrs	r2, r2, #8
 801c454:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c458:	fa1f fa82 	uxth.w	sl, r2
 801c45c:	43d2      	mvns	r2, r2
 801c45e:	fb1b fb0a 	smulbb	fp, fp, sl
 801c462:	b2d2      	uxtb	r2, r2
 801c464:	fb09 b902 	mla	r9, r9, r2, fp
 801c468:	fa1f f989 	uxth.w	r9, r9
 801c46c:	f109 0b01 	add.w	fp, r9, #1
 801c470:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c474:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c478:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c47c:	fb1b fb0a 	smulbb	fp, fp, sl
 801c480:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c484:	fb17 fa0a 	smulbb	sl, r7, sl
 801c488:	f805 9006 	strb.w	r9, [r5, r6]
 801c48c:	442e      	add	r6, r5
 801c48e:	78b7      	ldrb	r7, [r6, #2]
 801c490:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c494:	fb07 aa02 	mla	sl, r7, r2, sl
 801c498:	fb09 b902 	mla	r9, r9, r2, fp
 801c49c:	fa1f fa8a 	uxth.w	sl, sl
 801c4a0:	fa1f f989 	uxth.w	r9, r9
 801c4a4:	f10a 0701 	add.w	r7, sl, #1
 801c4a8:	f109 0b01 	add.w	fp, r9, #1
 801c4ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c4b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c4b4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c4b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4bc:	f886 a002 	strb.w	sl, [r6, #2]
 801c4c0:	f886 9001 	strb.w	r9, [r6, #1]
 801c4c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c4c6:	4474      	add	r4, lr
 801c4c8:	f108 0801 	add.w	r8, r8, #1
 801c4cc:	4410      	add	r0, r2
 801c4ce:	e760      	b.n	801c392 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c4d0:	b005      	add	sp, #20
 801c4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c4d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4da:	b085      	sub	sp, #20
 801c4dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c4e0:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801c4e2:	9203      	str	r2, [sp, #12]
 801c4e4:	6868      	ldr	r0, [r5, #4]
 801c4e6:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801c4ea:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801c4ee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801c4f2:	fb00 2404 	mla	r4, r0, r4, r2
 801c4f6:	682a      	ldr	r2, [r5, #0]
 801c4f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c4fc:	4414      	add	r4, r2
 801c4fe:	f8dc 2000 	ldr.w	r2, [ip]
 801c502:	9201      	str	r2, [sp, #4]
 801c504:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c508:	3204      	adds	r2, #4
 801c50a:	9202      	str	r2, [sp, #8]
 801c50c:	2900      	cmp	r1, #0
 801c50e:	dc03      	bgt.n	801c518 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c510:	9a03      	ldr	r2, [sp, #12]
 801c512:	2a00      	cmp	r2, #0
 801c514:	f340 8137 	ble.w	801c786 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c518:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c51a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c51e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c522:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c524:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c528:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	dd0d      	ble.n	801c54c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c530:	1405      	asrs	r5, r0, #16
 801c532:	d405      	bmi.n	801c540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c534:	4545      	cmp	r5, r8
 801c536:	da03      	bge.n	801c540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c538:	1415      	asrs	r5, r2, #16
 801c53a:	d401      	bmi.n	801c540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c53c:	42bd      	cmp	r5, r7
 801c53e:	db06      	blt.n	801c54e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c540:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c542:	4470      	add	r0, lr
 801c544:	3b01      	subs	r3, #1
 801c546:	3403      	adds	r4, #3
 801c548:	442a      	add	r2, r5
 801c54a:	e7ef      	b.n	801c52c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c54c:	d070      	beq.n	801c630 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c54e:	1e5d      	subs	r5, r3, #1
 801c550:	fb0e 0605 	mla	r6, lr, r5, r0
 801c554:	1436      	asrs	r6, r6, #16
 801c556:	d462      	bmi.n	801c61e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c558:	4546      	cmp	r6, r8
 801c55a:	da60      	bge.n	801c61e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c55c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c55e:	fb06 2505 	mla	r5, r6, r5, r2
 801c562:	142d      	asrs	r5, r5, #16
 801c564:	d45b      	bmi.n	801c61e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c566:	42bd      	cmp	r5, r7
 801c568:	da59      	bge.n	801c61e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c56a:	1ce5      	adds	r5, r4, #3
 801c56c:	469a      	mov	sl, r3
 801c56e:	f1ba 0f00 	cmp.w	sl, #0
 801c572:	dd58      	ble.n	801c626 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c574:	1416      	asrs	r6, r2, #16
 801c576:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c57a:	1407      	asrs	r7, r0, #16
 801c57c:	46b1      	mov	r9, r6
 801c57e:	9e01      	ldr	r6, [sp, #4]
 801c580:	fb08 6609 	mla	r6, r8, r9, r6
 801c584:	5df6      	ldrb	r6, [r6, r7]
 801c586:	9f02      	ldr	r7, [sp, #8]
 801c588:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c58c:	0e37      	lsrs	r7, r6, #24
 801c58e:	2fff      	cmp	r7, #255	@ 0xff
 801c590:	f000 80f0 	beq.w	801c774 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c594:	fa5f f887 	uxtb.w	r8, r7
 801c598:	b3d7      	cbz	r7, 801c610 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c59a:	fa1f f788 	uxth.w	r7, r8
 801c59e:	ea6f 0808 	mvn.w	r8, r8
 801c5a2:	fa5f fb86 	uxtb.w	fp, r6
 801c5a6:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801c5aa:	fa5f f888 	uxtb.w	r8, r8
 801c5ae:	fb1b fb07 	smulbb	fp, fp, r7
 801c5b2:	fb09 b908 	mla	r9, r9, r8, fp
 801c5b6:	fa1f f989 	uxth.w	r9, r9
 801c5ba:	f109 0b01 	add.w	fp, r9, #1
 801c5be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5c2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801c5c6:	fb1b fb08 	smulbb	fp, fp, r8
 801c5ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5ce:	f805 9c03 	strb.w	r9, [r5, #-3]
 801c5d2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801c5d6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c5da:	fb09 b907 	mla	r9, r9, r7, fp
 801c5de:	fa1f f989 	uxth.w	r9, r9
 801c5e2:	f109 0b01 	add.w	fp, r9, #1
 801c5e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c5ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c5ee:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c5f2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801c5f6:	fb19 f808 	smulbb	r8, r9, r8
 801c5fa:	fb06 8607 	mla	r6, r6, r7, r8
 801c5fe:	b2b6      	uxth	r6, r6
 801c600:	f106 0801 	add.w	r8, r6, #1
 801c604:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c608:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c60c:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c610:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801c612:	4470      	add	r0, lr
 801c614:	3503      	adds	r5, #3
 801c616:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c61a:	4432      	add	r2, r6
 801c61c:	e7a7      	b.n	801c56e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801c61e:	2600      	movs	r6, #0
 801c620:	1b9d      	subs	r5, r3, r6
 801c622:	2d00      	cmp	r5, #0
 801c624:	dc3b      	bgt.n	801c69e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801c626:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c62a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c62e:	441c      	add	r4, r3
 801c630:	2900      	cmp	r1, #0
 801c632:	f340 80a8 	ble.w	801c786 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c636:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c63a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c63c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c640:	3901      	subs	r1, #1
 801c642:	eeb0 6a62 	vmov.f32	s12, s5
 801c646:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c64a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c64e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c652:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c656:	eeb0 6a43 	vmov.f32	s12, s6
 801c65a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c65e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c662:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c666:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c66a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c66e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c672:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c676:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c67a:	ee12 2a90 	vmov	r2, s5
 801c67e:	eef0 2a47 	vmov.f32	s5, s14
 801c682:	fb92 fef3 	sdiv	lr, r2, r3
 801c686:	ee13 2a10 	vmov	r2, s6
 801c68a:	eeb0 3a67 	vmov.f32	s6, s15
 801c68e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c692:	9a03      	ldr	r2, [sp, #12]
 801c694:	9312      	str	r3, [sp, #72]	@ 0x48
 801c696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c698:	bf08      	it	eq
 801c69a:	4613      	moveq	r3, r2
 801c69c:	e736      	b.n	801c50c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c69e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801c6a2:	d457      	bmi.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c6a4:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801c6a8:	4547      	cmp	r7, r8
 801c6aa:	dd53      	ble.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c6ac:	ea5f 4922 	movs.w	r9, r2, asr #16
 801c6b0:	d450      	bmi.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c6b2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801c6b6:	454d      	cmp	r5, r9
 801c6b8:	dd4c      	ble.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c6ba:	9d01      	ldr	r5, [sp, #4]
 801c6bc:	b23f      	sxth	r7, r7
 801c6be:	fb09 5707 	mla	r7, r9, r7, r5
 801c6c2:	f817 5008 	ldrb.w	r5, [r7, r8]
 801c6c6:	9f02      	ldr	r7, [sp, #8]
 801c6c8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801c6cc:	0e2f      	lsrs	r7, r5, #24
 801c6ce:	2fff      	cmp	r7, #255	@ 0xff
 801c6d0:	d045      	beq.n	801c75e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801c6d2:	fa5f f987 	uxtb.w	r9, r7
 801c6d6:	b3ef      	cbz	r7, 801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c6d8:	fa1f f889 	uxth.w	r8, r9
 801c6dc:	ea6f 0909 	mvn.w	r9, r9
 801c6e0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c6e4:	fa5f fb85 	uxtb.w	fp, r5
 801c6e8:	f814 a007 	ldrb.w	sl, [r4, r7]
 801c6ec:	fa5f f989 	uxtb.w	r9, r9
 801c6f0:	fb1b fb08 	smulbb	fp, fp, r8
 801c6f4:	fb0a ba09 	mla	sl, sl, r9, fp
 801c6f8:	fa1f fa8a 	uxth.w	sl, sl
 801c6fc:	f10a 0b01 	add.w	fp, sl, #1
 801c700:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c704:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c708:	f804 a007 	strb.w	sl, [r4, r7]
 801c70c:	4427      	add	r7, r4
 801c70e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801c712:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801c716:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c71a:	fb1b fb09 	smulbb	fp, fp, r9
 801c71e:	fb0a ba08 	mla	sl, sl, r8, fp
 801c722:	fa1f fa8a 	uxth.w	sl, sl
 801c726:	f10a 0b01 	add.w	fp, sl, #1
 801c72a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801c72e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c732:	f887 a001 	strb.w	sl, [r7, #1]
 801c736:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c73a:	fb1a f909 	smulbb	r9, sl, r9
 801c73e:	fb05 9508 	mla	r5, r5, r8, r9
 801c742:	b2ad      	uxth	r5, r5
 801c744:	f105 0901 	add.w	r9, r5, #1
 801c748:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801c74c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c750:	f887 9002 	strb.w	r9, [r7, #2]
 801c754:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801c756:	4470      	add	r0, lr
 801c758:	3601      	adds	r6, #1
 801c75a:	442a      	add	r2, r5
 801c75c:	e760      	b.n	801c620 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c75e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801c762:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801c766:	55e5      	strb	r5, [r4, r7]
 801c768:	4427      	add	r7, r4
 801c76a:	0c2d      	lsrs	r5, r5, #16
 801c76c:	f887 8001 	strb.w	r8, [r7, #1]
 801c770:	70bd      	strb	r5, [r7, #2]
 801c772:	e7ef      	b.n	801c754 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c774:	0a37      	lsrs	r7, r6, #8
 801c776:	f805 6c03 	strb.w	r6, [r5, #-3]
 801c77a:	0c36      	lsrs	r6, r6, #16
 801c77c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801c780:	f805 6c01 	strb.w	r6, [r5, #-1]
 801c784:	e744      	b.n	801c610 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c786:	b005      	add	sp, #20
 801c788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c78c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c790:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801c792:	9201      	str	r2, [sp, #4]
 801c794:	6870      	ldr	r0, [r6, #4]
 801c796:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801c79a:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801c79e:	fa1f fe85 	uxth.w	lr, r5
 801c7a2:	43ed      	mvns	r5, r5
 801c7a4:	f8dc 8000 	ldr.w	r8, [ip]
 801c7a8:	b2ed      	uxtb	r5, r5
 801c7aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c7ae:	fb00 2404 	mla	r4, r0, r4, r2
 801c7b2:	6832      	ldr	r2, [r6, #0]
 801c7b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7b8:	4414      	add	r4, r2
 801c7ba:	2900      	cmp	r1, #0
 801c7bc:	dc03      	bgt.n	801c7c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c7be:	9a01      	ldr	r2, [sp, #4]
 801c7c0:	2a00      	cmp	r2, #0
 801c7c2:	f340 810d 	ble.w	801c9e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c7c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c7c8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c7cc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801c7d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c7d2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c7d6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	dd0e      	ble.n	801c7fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c7de:	1406      	asrs	r6, r0, #16
 801c7e0:	d405      	bmi.n	801c7ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c7e2:	4556      	cmp	r6, sl
 801c7e4:	da03      	bge.n	801c7ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c7e6:	1416      	asrs	r6, r2, #16
 801c7e8:	d401      	bmi.n	801c7ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801c7ea:	454e      	cmp	r6, r9
 801c7ec:	db07      	blt.n	801c7fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c7ee:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c7f0:	3b01      	subs	r3, #1
 801c7f2:	3403      	adds	r4, #3
 801c7f4:	4430      	add	r0, r6
 801c7f6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c7f8:	4432      	add	r2, r6
 801c7fa:	e7ee      	b.n	801c7da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c7fc:	d060      	beq.n	801c8c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801c7fe:	1e5e      	subs	r6, r3, #1
 801c800:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c802:	fb07 0706 	mla	r7, r7, r6, r0
 801c806:	143f      	asrs	r7, r7, #16
 801c808:	d451      	bmi.n	801c8ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c80a:	4557      	cmp	r7, sl
 801c80c:	da4f      	bge.n	801c8ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c80e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c810:	fb07 2606 	mla	r6, r7, r6, r2
 801c814:	1436      	asrs	r6, r6, #16
 801c816:	d44a      	bmi.n	801c8ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c818:	454e      	cmp	r6, r9
 801c81a:	da48      	bge.n	801c8ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801c81c:	1ce6      	adds	r6, r4, #3
 801c81e:	4699      	mov	r9, r3
 801c820:	f1b9 0f00 	cmp.w	r9, #0
 801c824:	f106 0603 	add.w	r6, r6, #3
 801c828:	dd45      	ble.n	801c8b6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801c82a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c82e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c832:	1417      	asrs	r7, r2, #16
 801c834:	f109 39ff 	add.w	r9, r9, #4294967295
 801c838:	fb0b a707 	mla	r7, fp, r7, sl
 801c83c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c840:	fb1b fb05 	smulbb	fp, fp, r5
 801c844:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c848:	eb08 0a07 	add.w	sl, r8, r7
 801c84c:	f818 7007 	ldrb.w	r7, [r8, r7]
 801c850:	fb07 b70e 	mla	r7, r7, lr, fp
 801c854:	b2bf      	uxth	r7, r7
 801c856:	f107 0b01 	add.w	fp, r7, #1
 801c85a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c85e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c862:	fb1b fb05 	smulbb	fp, fp, r5
 801c866:	123f      	asrs	r7, r7, #8
 801c868:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c86c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c870:	fb07 b70e 	mla	r7, r7, lr, fp
 801c874:	b2bf      	uxth	r7, r7
 801c876:	f107 0b01 	add.w	fp, r7, #1
 801c87a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c87e:	123f      	asrs	r7, r7, #8
 801c880:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c884:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c888:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c88c:	fb1a fa05 	smulbb	sl, sl, r5
 801c890:	fb07 a70e 	mla	r7, r7, lr, sl
 801c894:	b2bf      	uxth	r7, r7
 801c896:	f107 0a01 	add.w	sl, r7, #1
 801c89a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c89e:	123f      	asrs	r7, r7, #8
 801c8a0:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c8a4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801c8a6:	4438      	add	r0, r7
 801c8a8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c8aa:	443a      	add	r2, r7
 801c8ac:	e7b8      	b.n	801c820 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c8ae:	2700      	movs	r7, #0
 801c8b0:	1bde      	subs	r6, r3, r7
 801c8b2:	2e00      	cmp	r6, #0
 801c8b4:	dc3f      	bgt.n	801c936 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801c8b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8be:	441c      	add	r4, r3
 801c8c0:	2900      	cmp	r1, #0
 801c8c2:	f340 808d 	ble.w	801c9e0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801c8c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c8ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c8d0:	3901      	subs	r1, #1
 801c8d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c8d6:	eef0 6a62 	vmov.f32	s13, s5
 801c8da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c8de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8e6:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801c8ea:	eef0 6a43 	vmov.f32	s13, s6
 801c8ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8f2:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801c8f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c8fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c902:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c90a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c90e:	ee12 2a90 	vmov	r2, s5
 801c912:	eef0 2a47 	vmov.f32	s5, s14
 801c916:	fb92 f3f3 	sdiv	r3, r2, r3
 801c91a:	ee13 2a10 	vmov	r2, s6
 801c91e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c920:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c922:	eeb0 3a67 	vmov.f32	s6, s15
 801c926:	fb92 f3f3 	sdiv	r3, r2, r3
 801c92a:	9a01      	ldr	r2, [sp, #4]
 801c92c:	9310      	str	r3, [sp, #64]	@ 0x40
 801c92e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c930:	bf08      	it	eq
 801c932:	4613      	moveq	r3, r2
 801c934:	e741      	b.n	801c7ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c936:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c93a:	d44b      	bmi.n	801c9d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c93c:	f8dc b008 	ldr.w	fp, [ip, #8]
 801c940:	45cb      	cmp	fp, r9
 801c942:	dd47      	ble.n	801c9d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c944:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c948:	d444      	bmi.n	801c9d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c94a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801c94e:	4556      	cmp	r6, sl
 801c950:	dd40      	ble.n	801c9d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c952:	fa0f f68b 	sxth.w	r6, fp
 801c956:	fb0a 9906 	mla	r9, sl, r6, r9
 801c95a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c95e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c962:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c966:	fb1b fb05 	smulbb	fp, fp, r5
 801c96a:	eb08 0a09 	add.w	sl, r8, r9
 801c96e:	f818 9009 	ldrb.w	r9, [r8, r9]
 801c972:	fb09 b90e 	mla	r9, r9, lr, fp
 801c976:	fa1f f989 	uxth.w	r9, r9
 801c97a:	f109 0b01 	add.w	fp, r9, #1
 801c97e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c982:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c986:	f804 9006 	strb.w	r9, [r4, r6]
 801c98a:	4426      	add	r6, r4
 801c98c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c990:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c994:	fb1b fb05 	smulbb	fp, fp, r5
 801c998:	fb09 b90e 	mla	r9, r9, lr, fp
 801c99c:	fa1f f989 	uxth.w	r9, r9
 801c9a0:	f109 0b01 	add.w	fp, r9, #1
 801c9a4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c9a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9ac:	f886 9001 	strb.w	r9, [r6, #1]
 801c9b0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c9b4:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c9b8:	fb1a fa05 	smulbb	sl, sl, r5
 801c9bc:	fb09 a90e 	mla	r9, r9, lr, sl
 801c9c0:	fa1f f989 	uxth.w	r9, r9
 801c9c4:	f109 0a01 	add.w	sl, r9, #1
 801c9c8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c9cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9d0:	f886 9002 	strb.w	r9, [r6, #2]
 801c9d4:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801c9d6:	3701      	adds	r7, #1
 801c9d8:	4430      	add	r0, r6
 801c9da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801c9dc:	4432      	add	r2, r6
 801c9de:	e767      	b.n	801c8b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c9e0:	b003      	add	sp, #12
 801c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c9e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c9e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9ea:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801c9ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c9f0:	9201      	str	r2, [sp, #4]
 801c9f2:	6868      	ldr	r0, [r5, #4]
 801c9f4:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801c9f6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801c9fa:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801c9fe:	fb00 2404 	mla	r4, r0, r4, r2
 801ca02:	682a      	ldr	r2, [r5, #0]
 801ca04:	f8d7 8000 	ldr.w	r8, [r7]
 801ca08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca0c:	4414      	add	r4, r2
 801ca0e:	2900      	cmp	r1, #0
 801ca10:	dc03      	bgt.n	801ca1a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ca12:	9a01      	ldr	r2, [sp, #4]
 801ca14:	2a00      	cmp	r2, #0
 801ca16:	f340 80af 	ble.w	801cb78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ca1a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ca1c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ca20:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ca24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca26:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ca2a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	dd0c      	ble.n	801ca4c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ca32:	1405      	asrs	r5, r0, #16
 801ca34:	d405      	bmi.n	801ca42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ca36:	4555      	cmp	r5, sl
 801ca38:	da03      	bge.n	801ca42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ca3a:	1415      	asrs	r5, r2, #16
 801ca3c:	d401      	bmi.n	801ca42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ca3e:	454d      	cmp	r5, r9
 801ca40:	db05      	blt.n	801ca4e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ca42:	4470      	add	r0, lr
 801ca44:	4462      	add	r2, ip
 801ca46:	3b01      	subs	r3, #1
 801ca48:	3403      	adds	r4, #3
 801ca4a:	e7f0      	b.n	801ca2e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ca4c:	d038      	beq.n	801cac0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ca4e:	1e5d      	subs	r5, r3, #1
 801ca50:	fb0e 0605 	mla	r6, lr, r5, r0
 801ca54:	1436      	asrs	r6, r6, #16
 801ca56:	d42a      	bmi.n	801caae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ca58:	4556      	cmp	r6, sl
 801ca5a:	da28      	bge.n	801caae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ca5c:	fb0c 2505 	mla	r5, ip, r5, r2
 801ca60:	142d      	asrs	r5, r5, #16
 801ca62:	d424      	bmi.n	801caae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ca64:	454d      	cmp	r5, r9
 801ca66:	da22      	bge.n	801caae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ca68:	1ce6      	adds	r6, r4, #3
 801ca6a:	4699      	mov	r9, r3
 801ca6c:	f1b9 0f00 	cmp.w	r9, #0
 801ca70:	f106 0603 	add.w	r6, r6, #3
 801ca74:	dd1f      	ble.n	801cab6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ca76:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ca7a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ca7e:	1415      	asrs	r5, r2, #16
 801ca80:	4470      	add	r0, lr
 801ca82:	4462      	add	r2, ip
 801ca84:	f109 39ff 	add.w	r9, r9, #4294967295
 801ca88:	fb0b a505 	mla	r5, fp, r5, sl
 801ca8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca90:	eb08 0a05 	add.w	sl, r8, r5
 801ca94:	f818 5005 	ldrb.w	r5, [r8, r5]
 801ca98:	f806 5c06 	strb.w	r5, [r6, #-6]
 801ca9c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801caa0:	f806 5c05 	strb.w	r5, [r6, #-5]
 801caa4:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801caa8:	f806 5c04 	strb.w	r5, [r6, #-4]
 801caac:	e7de      	b.n	801ca6c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801caae:	2600      	movs	r6, #0
 801cab0:	1b9d      	subs	r5, r3, r6
 801cab2:	2d00      	cmp	r5, #0
 801cab4:	dc38      	bgt.n	801cb28 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cab6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801caba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cabe:	441c      	add	r4, r3
 801cac0:	2900      	cmp	r1, #0
 801cac2:	dd59      	ble.n	801cb78 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cac4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801caca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cace:	3901      	subs	r1, #1
 801cad0:	eeb0 6a62 	vmov.f32	s12, s5
 801cad4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cad8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cadc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cae0:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801cae4:	eeb0 6a43 	vmov.f32	s12, s6
 801cae8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801caec:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801caf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801caf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801caf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cafc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb08:	ee12 2a90 	vmov	r2, s5
 801cb0c:	eef0 2a47 	vmov.f32	s5, s14
 801cb10:	fb92 fef3 	sdiv	lr, r2, r3
 801cb14:	ee13 2a10 	vmov	r2, s6
 801cb18:	eeb0 3a67 	vmov.f32	s6, s15
 801cb1c:	fb92 fcf3 	sdiv	ip, r2, r3
 801cb20:	9a01      	ldr	r2, [sp, #4]
 801cb22:	bf08      	it	eq
 801cb24:	4613      	moveq	r3, r2
 801cb26:	e772      	b.n	801ca0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801cb28:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cb2c:	d420      	bmi.n	801cb70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cb2e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801cb32:	45cb      	cmp	fp, r9
 801cb34:	dd1c      	ble.n	801cb70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cb36:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cb3a:	d419      	bmi.n	801cb70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cb3c:	68fd      	ldr	r5, [r7, #12]
 801cb3e:	4555      	cmp	r5, sl
 801cb40:	dd16      	ble.n	801cb70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cb42:	fa0f f58b 	sxth.w	r5, fp
 801cb46:	fb0a 9505 	mla	r5, sl, r5, r9
 801cb4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cb4e:	f818 9005 	ldrb.w	r9, [r8, r5]
 801cb52:	eb08 0b05 	add.w	fp, r8, r5
 801cb56:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801cb5a:	f804 9005 	strb.w	r9, [r4, r5]
 801cb5e:	4425      	add	r5, r4
 801cb60:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801cb64:	f885 9001 	strb.w	r9, [r5, #1]
 801cb68:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801cb6c:	f885 9002 	strb.w	r9, [r5, #2]
 801cb70:	4470      	add	r0, lr
 801cb72:	4462      	add	r2, ip
 801cb74:	3601      	adds	r6, #1
 801cb76:	e79b      	b.n	801cab0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801cb78:	b003      	add	sp, #12
 801cb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cb7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb82:	b085      	sub	sp, #20
 801cb84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cb88:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cb8a:	9202      	str	r2, [sp, #8]
 801cb8c:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801cb90:	6860      	ldr	r0, [r4, #4]
 801cb92:	9203      	str	r2, [sp, #12]
 801cb94:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801cb98:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801cb9c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801cba0:	fb00 2505 	mla	r5, r0, r5, r2
 801cba4:	6822      	ldr	r2, [r4, #0]
 801cba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cbaa:	4415      	add	r5, r2
 801cbac:	f8dc 2000 	ldr.w	r2, [ip]
 801cbb0:	9201      	str	r2, [sp, #4]
 801cbb2:	2900      	cmp	r1, #0
 801cbb4:	dc03      	bgt.n	801cbbe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801cbb6:	9a02      	ldr	r2, [sp, #8]
 801cbb8:	2a00      	cmp	r2, #0
 801cbba:	f340 8122 	ble.w	801ce02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cbbe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cbc0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cbc4:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801cbc8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cbca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801cbce:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	dd0d      	ble.n	801cbf2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cbd6:	1422      	asrs	r2, r4, #16
 801cbd8:	d405      	bmi.n	801cbe6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cbda:	4542      	cmp	r2, r8
 801cbdc:	da03      	bge.n	801cbe6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cbde:	1402      	asrs	r2, r0, #16
 801cbe0:	d401      	bmi.n	801cbe6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801cbe2:	42ba      	cmp	r2, r7
 801cbe4:	db06      	blt.n	801cbf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cbe6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cbe8:	4474      	add	r4, lr
 801cbea:	3b01      	subs	r3, #1
 801cbec:	3503      	adds	r5, #3
 801cbee:	4410      	add	r0, r2
 801cbf0:	e7ef      	b.n	801cbd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801cbf2:	d072      	beq.n	801ccda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cbf4:	1e5a      	subs	r2, r3, #1
 801cbf6:	fb0e 4602 	mla	r6, lr, r2, r4
 801cbfa:	1436      	asrs	r6, r6, #16
 801cbfc:	d462      	bmi.n	801ccc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cbfe:	4546      	cmp	r6, r8
 801cc00:	da60      	bge.n	801ccc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cc02:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801cc04:	fb06 0202 	mla	r2, r6, r2, r0
 801cc08:	1412      	asrs	r2, r2, #16
 801cc0a:	d45b      	bmi.n	801ccc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cc0c:	42ba      	cmp	r2, r7
 801cc0e:	da59      	bge.n	801ccc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801cc10:	1cef      	adds	r7, r5, #3
 801cc12:	4699      	mov	r9, r3
 801cc14:	f1b9 0f00 	cmp.w	r9, #0
 801cc18:	dd5a      	ble.n	801ccd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801cc1a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801cc1e:	1426      	asrs	r6, r4, #16
 801cc20:	1402      	asrs	r2, r0, #16
 801cc22:	fb08 6202 	mla	r2, r8, r2, r6
 801cc26:	9e01      	ldr	r6, [sp, #4]
 801cc28:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801cc2c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801cc30:	d041      	beq.n	801ccb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801cc32:	9a03      	ldr	r2, [sp, #12]
 801cc34:	fa5f fb86 	uxtb.w	fp, r6
 801cc38:	fb02 f808 	mul.w	r8, r2, r8
 801cc3c:	f108 0201 	add.w	r2, r8, #1
 801cc40:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801cc44:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801cc48:	1212      	asrs	r2, r2, #8
 801cc4a:	fa1f fa82 	uxth.w	sl, r2
 801cc4e:	43d2      	mvns	r2, r2
 801cc50:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc54:	b2d2      	uxtb	r2, r2
 801cc56:	fb08 b802 	mla	r8, r8, r2, fp
 801cc5a:	fa1f f888 	uxth.w	r8, r8
 801cc5e:	f108 0b01 	add.w	fp, r8, #1
 801cc62:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cc66:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801cc6a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801cc6e:	fb1b fb0a 	smulbb	fp, fp, sl
 801cc72:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cc76:	fb16 fa0a 	smulbb	sl, r6, sl
 801cc7a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801cc7e:	f807 8c03 	strb.w	r8, [r7, #-3]
 801cc82:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801cc86:	fb06 aa02 	mla	sl, r6, r2, sl
 801cc8a:	fb08 b802 	mla	r8, r8, r2, fp
 801cc8e:	fa1f fa8a 	uxth.w	sl, sl
 801cc92:	fa1f f888 	uxth.w	r8, r8
 801cc96:	f10a 0601 	add.w	r6, sl, #1
 801cc9a:	f108 0b01 	add.w	fp, r8, #1
 801cc9e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801cca2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cca6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ccaa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ccae:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ccb2:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ccb6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ccb8:	4474      	add	r4, lr
 801ccba:	3703      	adds	r7, #3
 801ccbc:	f109 39ff 	add.w	r9, r9, #4294967295
 801ccc0:	4410      	add	r0, r2
 801ccc2:	e7a7      	b.n	801cc14 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ccc4:	f04f 0800 	mov.w	r8, #0
 801ccc8:	eba3 0208 	sub.w	r2, r3, r8
 801cccc:	2a00      	cmp	r2, #0
 801ccce:	dc3b      	bgt.n	801cd48 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ccd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ccd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccd8:	441d      	add	r5, r3
 801ccda:	2900      	cmp	r1, #0
 801ccdc:	f340 8091 	ble.w	801ce02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801cce0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cce6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ccea:	3901      	subs	r1, #1
 801ccec:	eeb0 6a62 	vmov.f32	s12, s5
 801ccf0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ccf4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ccf8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ccfc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801cd00:	eeb0 6a43 	vmov.f32	s12, s6
 801cd04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cd08:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801cd0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd10:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd14:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd24:	ee12 2a90 	vmov	r2, s5
 801cd28:	eef0 2a47 	vmov.f32	s5, s14
 801cd2c:	fb92 fef3 	sdiv	lr, r2, r3
 801cd30:	ee13 2a10 	vmov	r2, s6
 801cd34:	eeb0 3a67 	vmov.f32	s6, s15
 801cd38:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd3c:	9a02      	ldr	r2, [sp, #8]
 801cd3e:	9312      	str	r3, [sp, #72]	@ 0x48
 801cd40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cd42:	bf08      	it	eq
 801cd44:	4613      	moveq	r3, r2
 801cd46:	e734      	b.n	801cbb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cd48:	1427      	asrs	r7, r4, #16
 801cd4a:	d454      	bmi.n	801cdf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cd4c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cd50:	42be      	cmp	r6, r7
 801cd52:	dd50      	ble.n	801cdf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cd54:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cd58:	d44d      	bmi.n	801cdf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cd5a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cd5e:	454a      	cmp	r2, r9
 801cd60:	dd49      	ble.n	801cdf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cd62:	b236      	sxth	r6, r6
 801cd64:	9a01      	ldr	r2, [sp, #4]
 801cd66:	fb09 7606 	mla	r6, r9, r6, r7
 801cd6a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801cd6e:	0e3a      	lsrs	r2, r7, #24
 801cd70:	d041      	beq.n	801cdf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801cd72:	9e03      	ldr	r6, [sp, #12]
 801cd74:	fa5f fb87 	uxtb.w	fp, r7
 801cd78:	4372      	muls	r2, r6
 801cd7a:	1c56      	adds	r6, r2, #1
 801cd7c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801cd80:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801cd84:	1212      	asrs	r2, r2, #8
 801cd86:	f815 9006 	ldrb.w	r9, [r5, r6]
 801cd8a:	fa1f fa82 	uxth.w	sl, r2
 801cd8e:	43d2      	mvns	r2, r2
 801cd90:	fb1b fb0a 	smulbb	fp, fp, sl
 801cd94:	b2d2      	uxtb	r2, r2
 801cd96:	fb09 b902 	mla	r9, r9, r2, fp
 801cd9a:	fa1f f989 	uxth.w	r9, r9
 801cd9e:	f109 0b01 	add.w	fp, r9, #1
 801cda2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cda6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801cdaa:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801cdae:	fb1b fb0a 	smulbb	fp, fp, sl
 801cdb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdb6:	fb17 fa0a 	smulbb	sl, r7, sl
 801cdba:	f805 9006 	strb.w	r9, [r5, r6]
 801cdbe:	442e      	add	r6, r5
 801cdc0:	78b7      	ldrb	r7, [r6, #2]
 801cdc2:	f896 9001 	ldrb.w	r9, [r6, #1]
 801cdc6:	fb07 aa02 	mla	sl, r7, r2, sl
 801cdca:	fb09 b902 	mla	r9, r9, r2, fp
 801cdce:	fa1f fa8a 	uxth.w	sl, sl
 801cdd2:	fa1f f989 	uxth.w	r9, r9
 801cdd6:	f10a 0701 	add.w	r7, sl, #1
 801cdda:	f109 0b01 	add.w	fp, r9, #1
 801cdde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cde2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cde6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cdea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cdee:	f886 a002 	strb.w	sl, [r6, #2]
 801cdf2:	f886 9001 	strb.w	r9, [r6, #1]
 801cdf6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cdf8:	4474      	add	r4, lr
 801cdfa:	f108 0801 	add.w	r8, r8, #1
 801cdfe:	4410      	add	r0, r2
 801ce00:	e762      	b.n	801ccc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ce02:	b005      	add	sp, #20
 801ce04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ce0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ce12:	9201      	str	r2, [sp, #4]
 801ce14:	6860      	ldr	r0, [r4, #4]
 801ce16:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801ce1a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801ce1e:	fb00 2505 	mla	r5, r0, r5, r2
 801ce22:	6822      	ldr	r2, [r4, #0]
 801ce24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce28:	4415      	add	r5, r2
 801ce2a:	f8dc 2000 	ldr.w	r2, [ip]
 801ce2e:	9200      	str	r2, [sp, #0]
 801ce30:	2900      	cmp	r1, #0
 801ce32:	dc03      	bgt.n	801ce3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ce34:	9a01      	ldr	r2, [sp, #4]
 801ce36:	2a00      	cmp	r2, #0
 801ce38:	f340 812b 	ble.w	801d092 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ce3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ce3e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ce42:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ce46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce48:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ce4c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	dd0e      	ble.n	801ce72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ce54:	1422      	asrs	r2, r4, #16
 801ce56:	d405      	bmi.n	801ce64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce58:	4572      	cmp	r2, lr
 801ce5a:	da03      	bge.n	801ce64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce5c:	1402      	asrs	r2, r0, #16
 801ce5e:	d401      	bmi.n	801ce64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce60:	42ba      	cmp	r2, r7
 801ce62:	db07      	blt.n	801ce74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ce64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ce66:	3b01      	subs	r3, #1
 801ce68:	3503      	adds	r5, #3
 801ce6a:	4414      	add	r4, r2
 801ce6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ce6e:	4410      	add	r0, r2
 801ce70:	e7ee      	b.n	801ce50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ce72:	d06f      	beq.n	801cf54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ce74:	1e5a      	subs	r2, r3, #1
 801ce76:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801ce78:	fb06 4602 	mla	r6, r6, r2, r4
 801ce7c:	1436      	asrs	r6, r6, #16
 801ce7e:	d45e      	bmi.n	801cf3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ce80:	4576      	cmp	r6, lr
 801ce82:	da5c      	bge.n	801cf3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ce84:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ce86:	fb06 0202 	mla	r2, r6, r2, r0
 801ce8a:	1412      	asrs	r2, r2, #16
 801ce8c:	d457      	bmi.n	801cf3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ce8e:	42ba      	cmp	r2, r7
 801ce90:	da55      	bge.n	801cf3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ce92:	1cee      	adds	r6, r5, #3
 801ce94:	469a      	mov	sl, r3
 801ce96:	f1ba 0f00 	cmp.w	sl, #0
 801ce9a:	dd56      	ble.n	801cf4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ce9c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801cea0:	1427      	asrs	r7, r4, #16
 801cea2:	1402      	asrs	r2, r0, #16
 801cea4:	fb0e 7202 	mla	r2, lr, r2, r7
 801cea8:	9f00      	ldr	r7, [sp, #0]
 801ceaa:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ceae:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801ceb2:	d03c      	beq.n	801cf2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ceb4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ceb8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cebc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801cec0:	fa5f f28e 	uxtb.w	r2, lr
 801cec4:	b2ff      	uxtb	r7, r7
 801cec6:	f000 80dd 	beq.w	801d084 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ceca:	fa1f f882 	uxth.w	r8, r2
 801cece:	43d2      	mvns	r2, r2
 801ced0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801ced4:	fb17 f708 	smulbb	r7, r7, r8
 801ced8:	b2d2      	uxtb	r2, r2
 801ceda:	fb19 f908 	smulbb	r9, r9, r8
 801cede:	fb0e 7702 	mla	r7, lr, r2, r7
 801cee2:	fb1b f808 	smulbb	r8, fp, r8
 801cee6:	b2bf      	uxth	r7, r7
 801cee8:	f107 0e01 	add.w	lr, r7, #1
 801ceec:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801cef0:	123f      	asrs	r7, r7, #8
 801cef2:	f806 7c03 	strb.w	r7, [r6, #-3]
 801cef6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801cefa:	fb07 9902 	mla	r9, r7, r2, r9
 801cefe:	fa1f f989 	uxth.w	r9, r9
 801cf02:	f109 0701 	add.w	r7, r9, #1
 801cf06:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801cf0a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801cf0e:	fb07 8802 	mla	r8, r7, r2, r8
 801cf12:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf16:	fa1f f888 	uxth.w	r8, r8
 801cf1a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801cf1e:	f108 0201 	add.w	r2, r8, #1
 801cf22:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cf26:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf2a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801cf2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cf30:	3603      	adds	r6, #3
 801cf32:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf36:	4414      	add	r4, r2
 801cf38:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cf3a:	4410      	add	r0, r2
 801cf3c:	e7ab      	b.n	801ce96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cf3e:	f04f 0e00 	mov.w	lr, #0
 801cf42:	eba3 020e 	sub.w	r2, r3, lr
 801cf46:	2a00      	cmp	r2, #0
 801cf48:	dc3d      	bgt.n	801cfc6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801cf4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf52:	441d      	add	r5, r3
 801cf54:	2900      	cmp	r1, #0
 801cf56:	f340 809c 	ble.w	801d092 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801cf5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf64:	3901      	subs	r1, #1
 801cf66:	eeb0 6a62 	vmov.f32	s12, s5
 801cf6a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf76:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801cf7a:	eeb0 6a43 	vmov.f32	s12, s6
 801cf7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf82:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801cf86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf9e:	ee12 2a90 	vmov	r2, s5
 801cfa2:	eef0 2a47 	vmov.f32	s5, s14
 801cfa6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfaa:	ee13 2a10 	vmov	r2, s6
 801cfae:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cfb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfb2:	eeb0 3a67 	vmov.f32	s6, s15
 801cfb6:	fb92 f3f3 	sdiv	r3, r2, r3
 801cfba:	9a01      	ldr	r2, [sp, #4]
 801cfbc:	9310      	str	r3, [sp, #64]	@ 0x40
 801cfbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfc0:	bf08      	it	eq
 801cfc2:	4613      	moveq	r3, r2
 801cfc4:	e734      	b.n	801ce30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801cfc6:	1427      	asrs	r7, r4, #16
 801cfc8:	d44d      	bmi.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801cfca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801cfce:	42be      	cmp	r6, r7
 801cfd0:	dd49      	ble.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801cfd2:	ea5f 4820 	movs.w	r8, r0, asr #16
 801cfd6:	d446      	bmi.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801cfd8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cfdc:	4542      	cmp	r2, r8
 801cfde:	dd42      	ble.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801cfe0:	b236      	sxth	r6, r6
 801cfe2:	9a00      	ldr	r2, [sp, #0]
 801cfe4:	fb08 7606 	mla	r6, r8, r6, r7
 801cfe8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801cfec:	0e3a      	lsrs	r2, r7, #24
 801cfee:	d03a      	beq.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801cff0:	2aff      	cmp	r2, #255	@ 0xff
 801cff2:	b2d6      	uxtb	r6, r2
 801cff4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801cff8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801cffc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d000:	b2ff      	uxtb	r7, r7
 801d002:	d037      	beq.n	801d074 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d004:	fa1f f986 	uxth.w	r9, r6
 801d008:	4472      	add	r2, lr
 801d00a:	43f6      	mvns	r6, r6
 801d00c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d010:	fb17 f709 	smulbb	r7, r7, r9
 801d014:	fb1a fa09 	smulbb	sl, sl, r9
 801d018:	b2f6      	uxtb	r6, r6
 801d01a:	fb1b f909 	smulbb	r9, fp, r9
 801d01e:	fb08 7706 	mla	r7, r8, r6, r7
 801d022:	b2bf      	uxth	r7, r7
 801d024:	f107 0801 	add.w	r8, r7, #1
 801d028:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d02c:	123f      	asrs	r7, r7, #8
 801d02e:	54af      	strb	r7, [r5, r2]
 801d030:	442a      	add	r2, r5
 801d032:	7857      	ldrb	r7, [r2, #1]
 801d034:	fb07 aa06 	mla	sl, r7, r6, sl
 801d038:	fa1f fa8a 	uxth.w	sl, sl
 801d03c:	f10a 0701 	add.w	r7, sl, #1
 801d040:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d044:	7897      	ldrb	r7, [r2, #2]
 801d046:	fb07 9906 	mla	r9, r7, r6, r9
 801d04a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d04e:	fa1f f989 	uxth.w	r9, r9
 801d052:	f882 a001 	strb.w	sl, [r2, #1]
 801d056:	f109 0601 	add.w	r6, r9, #1
 801d05a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d05e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d062:	f882 9002 	strb.w	r9, [r2, #2]
 801d066:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d068:	f10e 0e01 	add.w	lr, lr, #1
 801d06c:	4414      	add	r4, r2
 801d06e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d070:	4410      	add	r0, r2
 801d072:	e766      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d074:	4472      	add	r2, lr
 801d076:	54af      	strb	r7, [r5, r2]
 801d078:	442a      	add	r2, r5
 801d07a:	f882 a001 	strb.w	sl, [r2, #1]
 801d07e:	f882 b002 	strb.w	fp, [r2, #2]
 801d082:	e7f0      	b.n	801d066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d084:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d088:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d08c:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d090:	e74d      	b.n	801cf2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d092:	b003      	add	sp, #12
 801d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d098 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d09c:	b087      	sub	sp, #28
 801d09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d0a2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d0a4:	9204      	str	r2, [sp, #16]
 801d0a6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d0aa:	6860      	ldr	r0, [r4, #4]
 801d0ac:	9205      	str	r2, [sp, #20]
 801d0ae:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801d0b2:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801d0b6:	9101      	str	r1, [sp, #4]
 801d0b8:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801d0bc:	fb00 2505 	mla	r5, r0, r5, r2
 801d0c0:	6822      	ldr	r2, [r4, #0]
 801d0c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0c6:	4415      	add	r5, r2
 801d0c8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d0cc:	3201      	adds	r2, #1
 801d0ce:	f022 0201 	bic.w	r2, r2, #1
 801d0d2:	9202      	str	r2, [sp, #8]
 801d0d4:	f8dc 2000 	ldr.w	r2, [ip]
 801d0d8:	9203      	str	r2, [sp, #12]
 801d0da:	9a01      	ldr	r2, [sp, #4]
 801d0dc:	2a00      	cmp	r2, #0
 801d0de:	dc03      	bgt.n	801d0e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d0e0:	9a04      	ldr	r2, [sp, #16]
 801d0e2:	2a00      	cmp	r2, #0
 801d0e4:	f340 8135 	ble.w	801d352 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d0e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d0ea:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d0ee:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801d0f2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d0f4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d0f8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	dd0d      	ble.n	801d11c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d100:	1422      	asrs	r2, r4, #16
 801d102:	d405      	bmi.n	801d110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d104:	4542      	cmp	r2, r8
 801d106:	da03      	bge.n	801d110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d108:	1402      	asrs	r2, r0, #16
 801d10a:	d401      	bmi.n	801d110 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d10c:	42ba      	cmp	r2, r7
 801d10e:	db06      	blt.n	801d11e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d110:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d112:	4474      	add	r4, lr
 801d114:	3b01      	subs	r3, #1
 801d116:	3503      	adds	r5, #3
 801d118:	4410      	add	r0, r2
 801d11a:	e7ef      	b.n	801d0fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d11c:	d077      	beq.n	801d20e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d11e:	1e5a      	subs	r2, r3, #1
 801d120:	fb0e 4602 	mla	r6, lr, r2, r4
 801d124:	1436      	asrs	r6, r6, #16
 801d126:	d469      	bmi.n	801d1fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d128:	4546      	cmp	r6, r8
 801d12a:	da67      	bge.n	801d1fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d12c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d12e:	fb06 0202 	mla	r2, r6, r2, r0
 801d132:	1412      	asrs	r2, r2, #16
 801d134:	d462      	bmi.n	801d1fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d136:	42ba      	cmp	r2, r7
 801d138:	da60      	bge.n	801d1fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d13a:	1cee      	adds	r6, r5, #3
 801d13c:	4699      	mov	r9, r3
 801d13e:	f1b9 0f00 	cmp.w	r9, #0
 801d142:	dd5f      	ble.n	801d204 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d144:	1422      	asrs	r2, r4, #16
 801d146:	9902      	ldr	r1, [sp, #8]
 801d148:	1407      	asrs	r7, r0, #16
 801d14a:	fb01 2707 	mla	r7, r1, r7, r2
 801d14e:	9903      	ldr	r1, [sp, #12]
 801d150:	087a      	lsrs	r2, r7, #1
 801d152:	5c8a      	ldrb	r2, [r1, r2]
 801d154:	07f9      	lsls	r1, r7, #31
 801d156:	bf54      	ite	pl
 801d158:	f002 020f 	andpl.w	r2, r2, #15
 801d15c:	1112      	asrmi	r2, r2, #4
 801d15e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d162:	b2d2      	uxtb	r2, r2
 801d164:	2a00      	cmp	r2, #0
 801d166:	d042      	beq.n	801d1ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d168:	497b      	ldr	r1, [pc, #492]	@ (801d358 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d16a:	680f      	ldr	r7, [r1, #0]
 801d16c:	9905      	ldr	r1, [sp, #20]
 801d16e:	fa5f fb87 	uxtb.w	fp, r7
 801d172:	434a      	muls	r2, r1
 801d174:	f102 0801 	add.w	r8, r2, #1
 801d178:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d17c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d180:	1212      	asrs	r2, r2, #8
 801d182:	fa1f fa82 	uxth.w	sl, r2
 801d186:	43d2      	mvns	r2, r2
 801d188:	fb1b fb0a 	smulbb	fp, fp, sl
 801d18c:	b2d2      	uxtb	r2, r2
 801d18e:	fb08 b802 	mla	r8, r8, r2, fp
 801d192:	fa1f f888 	uxth.w	r8, r8
 801d196:	f108 0b01 	add.w	fp, r8, #1
 801d19a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d19e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d1a2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d1a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801d1aa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d1ae:	fb17 fa0a 	smulbb	sl, r7, sl
 801d1b2:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d1b6:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d1ba:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d1be:	fb07 aa02 	mla	sl, r7, r2, sl
 801d1c2:	fb08 b802 	mla	r8, r8, r2, fp
 801d1c6:	fa1f fa8a 	uxth.w	sl, sl
 801d1ca:	fa1f f888 	uxth.w	r8, r8
 801d1ce:	f10a 0701 	add.w	r7, sl, #1
 801d1d2:	f108 0b01 	add.w	fp, r8, #1
 801d1d6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1da:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d1de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d1e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d1e6:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d1ea:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d1ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d1f0:	4474      	add	r4, lr
 801d1f2:	3603      	adds	r6, #3
 801d1f4:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1f8:	4410      	add	r0, r2
 801d1fa:	e7a0      	b.n	801d13e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d1fc:	2700      	movs	r7, #0
 801d1fe:	1bda      	subs	r2, r3, r7
 801d200:	2a00      	cmp	r2, #0
 801d202:	dc3e      	bgt.n	801d282 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d20c:	441d      	add	r5, r3
 801d20e:	9b01      	ldr	r3, [sp, #4]
 801d210:	2b00      	cmp	r3, #0
 801d212:	f340 809e 	ble.w	801d352 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d216:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d21a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d21c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d220:	eeb0 6a62 	vmov.f32	s12, s5
 801d224:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d228:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d22c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d230:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801d234:	eeb0 6a43 	vmov.f32	s12, s6
 801d238:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d23c:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801d240:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d244:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d248:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d24c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d250:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d254:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d258:	ee12 2a90 	vmov	r2, s5
 801d25c:	eef0 2a47 	vmov.f32	s5, s14
 801d260:	fb92 fef3 	sdiv	lr, r2, r3
 801d264:	ee13 2a10 	vmov	r2, s6
 801d268:	eeb0 3a67 	vmov.f32	s6, s15
 801d26c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d270:	9314      	str	r3, [sp, #80]	@ 0x50
 801d272:	9b01      	ldr	r3, [sp, #4]
 801d274:	9a04      	ldr	r2, [sp, #16]
 801d276:	3b01      	subs	r3, #1
 801d278:	9301      	str	r3, [sp, #4]
 801d27a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d27c:	bf08      	it	eq
 801d27e:	4613      	moveq	r3, r2
 801d280:	e72b      	b.n	801d0da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d282:	1426      	asrs	r6, r4, #16
 801d284:	d460      	bmi.n	801d348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d286:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d28a:	42b2      	cmp	r2, r6
 801d28c:	dd5c      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d28e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d292:	d459      	bmi.n	801d348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d294:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d298:	4542      	cmp	r2, r8
 801d29a:	dd55      	ble.n	801d348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d29c:	9a02      	ldr	r2, [sp, #8]
 801d29e:	9903      	ldr	r1, [sp, #12]
 801d2a0:	fb08 6602 	mla	r6, r8, r2, r6
 801d2a4:	0872      	lsrs	r2, r6, #1
 801d2a6:	07f6      	lsls	r6, r6, #31
 801d2a8:	5c8a      	ldrb	r2, [r1, r2]
 801d2aa:	bf54      	ite	pl
 801d2ac:	f002 020f 	andpl.w	r2, r2, #15
 801d2b0:	1112      	asrmi	r2, r2, #4
 801d2b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d2b6:	b2d2      	uxtb	r2, r2
 801d2b8:	2a00      	cmp	r2, #0
 801d2ba:	d045      	beq.n	801d348 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d2bc:	4926      	ldr	r1, [pc, #152]	@ (801d358 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d2be:	f8d1 8000 	ldr.w	r8, [r1]
 801d2c2:	9905      	ldr	r1, [sp, #20]
 801d2c4:	fa5f fb88 	uxtb.w	fp, r8
 801d2c8:	434a      	muls	r2, r1
 801d2ca:	1c56      	adds	r6, r2, #1
 801d2cc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d2d0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d2d4:	1212      	asrs	r2, r2, #8
 801d2d6:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d2da:	fa1f fa82 	uxth.w	sl, r2
 801d2de:	43d2      	mvns	r2, r2
 801d2e0:	fb1b fb0a 	smulbb	fp, fp, sl
 801d2e4:	b2d2      	uxtb	r2, r2
 801d2e6:	fb09 b902 	mla	r9, r9, r2, fp
 801d2ea:	fa1f f989 	uxth.w	r9, r9
 801d2ee:	f109 0b01 	add.w	fp, r9, #1
 801d2f2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d2f6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d2fa:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d2fe:	fb1b fb0a 	smulbb	fp, fp, sl
 801d302:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d306:	fb18 fa0a 	smulbb	sl, r8, sl
 801d30a:	f805 9006 	strb.w	r9, [r5, r6]
 801d30e:	442e      	add	r6, r5
 801d310:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d314:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d318:	fb08 aa02 	mla	sl, r8, r2, sl
 801d31c:	fb09 b902 	mla	r9, r9, r2, fp
 801d320:	fa1f fa8a 	uxth.w	sl, sl
 801d324:	fa1f f989 	uxth.w	r9, r9
 801d328:	f10a 0801 	add.w	r8, sl, #1
 801d32c:	f109 0b01 	add.w	fp, r9, #1
 801d330:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d334:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d338:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d33c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d340:	f886 a002 	strb.w	sl, [r6, #2]
 801d344:	f886 9001 	strb.w	r9, [r6, #1]
 801d348:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d34a:	4474      	add	r4, lr
 801d34c:	3701      	adds	r7, #1
 801d34e:	4410      	add	r0, r2
 801d350:	e755      	b.n	801d1fe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d352:	b007      	add	sp, #28
 801d354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d358:	2401bb40 	.word	0x2401bb40

0801d35c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d360:	b085      	sub	sp, #20
 801d362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d366:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d368:	9203      	str	r2, [sp, #12]
 801d36a:	6860      	ldr	r0, [r4, #4]
 801d36c:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801d370:	9100      	str	r1, [sp, #0]
 801d372:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801d376:	fb00 2606 	mla	r6, r0, r6, r2
 801d37a:	6822      	ldr	r2, [r4, #0]
 801d37c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d380:	4416      	add	r6, r2
 801d382:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d386:	3201      	adds	r2, #1
 801d388:	f022 0201 	bic.w	r2, r2, #1
 801d38c:	9201      	str	r2, [sp, #4]
 801d38e:	f8dc 2000 	ldr.w	r2, [ip]
 801d392:	9202      	str	r2, [sp, #8]
 801d394:	9a00      	ldr	r2, [sp, #0]
 801d396:	2a00      	cmp	r2, #0
 801d398:	dc03      	bgt.n	801d3a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d39a:	9a03      	ldr	r2, [sp, #12]
 801d39c:	2a00      	cmp	r2, #0
 801d39e:	f340 8140 	ble.w	801d622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d3a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d3a4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d3a8:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801d3ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d3ae:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d3b2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	dd0e      	ble.n	801d3d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d3ba:	142a      	asrs	r2, r5, #16
 801d3bc:	d405      	bmi.n	801d3ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d3be:	4572      	cmp	r2, lr
 801d3c0:	da03      	bge.n	801d3ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d3c2:	1422      	asrs	r2, r4, #16
 801d3c4:	d401      	bmi.n	801d3ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d3c6:	42ba      	cmp	r2, r7
 801d3c8:	db07      	blt.n	801d3da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d3ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d3cc:	3b01      	subs	r3, #1
 801d3ce:	3603      	adds	r6, #3
 801d3d0:	4415      	add	r5, r2
 801d3d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d3d4:	4414      	add	r4, r2
 801d3d6:	e7ee      	b.n	801d3b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d3d8:	d072      	beq.n	801d4c0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d3da:	1e5a      	subs	r2, r3, #1
 801d3dc:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d3de:	fb00 5002 	mla	r0, r0, r2, r5
 801d3e2:	1400      	asrs	r0, r0, #16
 801d3e4:	d463      	bmi.n	801d4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3e6:	4570      	cmp	r0, lr
 801d3e8:	da61      	bge.n	801d4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3ea:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d3ec:	fb00 4202 	mla	r2, r0, r2, r4
 801d3f0:	1412      	asrs	r2, r2, #16
 801d3f2:	d45c      	bmi.n	801d4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3f4:	42ba      	cmp	r2, r7
 801d3f6:	da5a      	bge.n	801d4ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d3f8:	1cf0      	adds	r0, r6, #3
 801d3fa:	469a      	mov	sl, r3
 801d3fc:	f1ba 0f00 	cmp.w	sl, #0
 801d400:	dd59      	ble.n	801d4b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d402:	142a      	asrs	r2, r5, #16
 801d404:	9901      	ldr	r1, [sp, #4]
 801d406:	1427      	asrs	r7, r4, #16
 801d408:	fb01 2707 	mla	r7, r1, r7, r2
 801d40c:	9902      	ldr	r1, [sp, #8]
 801d40e:	087a      	lsrs	r2, r7, #1
 801d410:	5c8a      	ldrb	r2, [r1, r2]
 801d412:	07f9      	lsls	r1, r7, #31
 801d414:	bf54      	ite	pl
 801d416:	f002 020f 	andpl.w	r2, r2, #15
 801d41a:	1112      	asrmi	r2, r2, #4
 801d41c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d420:	b2d2      	uxtb	r2, r2
 801d422:	2a00      	cmp	r2, #0
 801d424:	d03b      	beq.n	801d49e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d426:	4980      	ldr	r1, [pc, #512]	@ (801d628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d428:	2aff      	cmp	r2, #255	@ 0xff
 801d42a:	680f      	ldr	r7, [r1, #0]
 801d42c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d430:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d434:	b2ff      	uxtb	r7, r7
 801d436:	f000 80ed 	beq.w	801d614 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d43a:	fa1f f882 	uxth.w	r8, r2
 801d43e:	43d2      	mvns	r2, r2
 801d440:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d444:	fb17 f708 	smulbb	r7, r7, r8
 801d448:	b2d2      	uxtb	r2, r2
 801d44a:	fb19 f908 	smulbb	r9, r9, r8
 801d44e:	fb0e 7702 	mla	r7, lr, r2, r7
 801d452:	fb1b f808 	smulbb	r8, fp, r8
 801d456:	b2bf      	uxth	r7, r7
 801d458:	f107 0e01 	add.w	lr, r7, #1
 801d45c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d460:	123f      	asrs	r7, r7, #8
 801d462:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d466:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d46a:	fb07 9902 	mla	r9, r7, r2, r9
 801d46e:	fa1f f989 	uxth.w	r9, r9
 801d472:	f109 0701 	add.w	r7, r9, #1
 801d476:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d47a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d47e:	fb07 8802 	mla	r8, r7, r2, r8
 801d482:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d486:	fa1f f888 	uxth.w	r8, r8
 801d48a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d48e:	f108 0201 	add.w	r2, r8, #1
 801d492:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d496:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d49a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d49e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d4a0:	3003      	adds	r0, #3
 801d4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d4a6:	4415      	add	r5, r2
 801d4a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d4aa:	4414      	add	r4, r2
 801d4ac:	e7a6      	b.n	801d3fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d4ae:	2700      	movs	r7, #0
 801d4b0:	1bda      	subs	r2, r3, r7
 801d4b2:	2a00      	cmp	r2, #0
 801d4b4:	dc40      	bgt.n	801d538 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d4b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4be:	441e      	add	r6, r3
 801d4c0:	9b00      	ldr	r3, [sp, #0]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	f340 80ad 	ble.w	801d622 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d4c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d4ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4d2:	eeb0 6a62 	vmov.f32	s12, s5
 801d4d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d4da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801d4e6:	eeb0 6a43 	vmov.f32	s12, s6
 801d4ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4ee:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801d4f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d502:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d506:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d50a:	ee12 2a90 	vmov	r2, s5
 801d50e:	eef0 2a47 	vmov.f32	s5, s14
 801d512:	fb92 f3f3 	sdiv	r3, r2, r3
 801d516:	ee13 2a10 	vmov	r2, s6
 801d51a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d51c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d51e:	eeb0 3a67 	vmov.f32	s6, s15
 801d522:	fb92 f3f3 	sdiv	r3, r2, r3
 801d526:	9312      	str	r3, [sp, #72]	@ 0x48
 801d528:	9b00      	ldr	r3, [sp, #0]
 801d52a:	9a03      	ldr	r2, [sp, #12]
 801d52c:	3b01      	subs	r3, #1
 801d52e:	9300      	str	r3, [sp, #0]
 801d530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d532:	bf08      	it	eq
 801d534:	4613      	moveq	r3, r2
 801d536:	e72d      	b.n	801d394 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d538:	1428      	asrs	r0, r5, #16
 801d53a:	d45c      	bmi.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d53c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d540:	4282      	cmp	r2, r0
 801d542:	dd58      	ble.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d544:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d548:	d455      	bmi.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d54a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d54e:	4572      	cmp	r2, lr
 801d550:	dd51      	ble.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d552:	9a01      	ldr	r2, [sp, #4]
 801d554:	9902      	ldr	r1, [sp, #8]
 801d556:	fb0e 0002 	mla	r0, lr, r2, r0
 801d55a:	0842      	lsrs	r2, r0, #1
 801d55c:	07c0      	lsls	r0, r0, #31
 801d55e:	5c8a      	ldrb	r2, [r1, r2]
 801d560:	bf54      	ite	pl
 801d562:	f002 020f 	andpl.w	r2, r2, #15
 801d566:	1112      	asrmi	r2, r2, #4
 801d568:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d56c:	b2d2      	uxtb	r2, r2
 801d56e:	2a00      	cmp	r2, #0
 801d570:	d041      	beq.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d572:	492d      	ldr	r1, [pc, #180]	@ (801d628 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d574:	2aff      	cmp	r2, #255	@ 0xff
 801d576:	6808      	ldr	r0, [r1, #0]
 801d578:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d57c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d580:	fa5f fe80 	uxtb.w	lr, r0
 801d584:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d588:	d03b      	beq.n	801d602 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d58a:	fa1f f982 	uxth.w	r9, r2
 801d58e:	4438      	add	r0, r7
 801d590:	43d2      	mvns	r2, r2
 801d592:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d596:	fb1e fe09 	smulbb	lr, lr, r9
 801d59a:	fb1a fa09 	smulbb	sl, sl, r9
 801d59e:	b2d2      	uxtb	r2, r2
 801d5a0:	fb1b f909 	smulbb	r9, fp, r9
 801d5a4:	fb08 ee02 	mla	lr, r8, r2, lr
 801d5a8:	fa1f fe8e 	uxth.w	lr, lr
 801d5ac:	f10e 0801 	add.w	r8, lr, #1
 801d5b0:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801d5b4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d5b8:	f806 e000 	strb.w	lr, [r6, r0]
 801d5bc:	4430      	add	r0, r6
 801d5be:	f890 e001 	ldrb.w	lr, [r0, #1]
 801d5c2:	fb0e aa02 	mla	sl, lr, r2, sl
 801d5c6:	fa1f fa8a 	uxth.w	sl, sl
 801d5ca:	f10a 0e01 	add.w	lr, sl, #1
 801d5ce:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801d5d2:	f890 e002 	ldrb.w	lr, [r0, #2]
 801d5d6:	fb0e 9902 	mla	r9, lr, r2, r9
 801d5da:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d5de:	fa1f f989 	uxth.w	r9, r9
 801d5e2:	f880 a001 	strb.w	sl, [r0, #1]
 801d5e6:	f109 0201 	add.w	r2, r9, #1
 801d5ea:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d5ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5f2:	f880 9002 	strb.w	r9, [r0, #2]
 801d5f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d5f8:	3701      	adds	r7, #1
 801d5fa:	4415      	add	r5, r2
 801d5fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d5fe:	4414      	add	r4, r2
 801d600:	e756      	b.n	801d4b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801d602:	4438      	add	r0, r7
 801d604:	f806 e000 	strb.w	lr, [r6, r0]
 801d608:	4430      	add	r0, r6
 801d60a:	f880 a001 	strb.w	sl, [r0, #1]
 801d60e:	f880 b002 	strb.w	fp, [r0, #2]
 801d612:	e7f0      	b.n	801d5f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d614:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d618:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d61c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801d620:	e73d      	b.n	801d49e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d622:	b005      	add	sp, #20
 801d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d628:	2401bb40 	.word	0x2401bb40

0801d62c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801d62c:	4770      	bx	lr

0801d62e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801d62e:	4770      	bx	lr

0801d630 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801d630:	4770      	bx	lr

0801d632 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801d632:	4770      	bx	lr

0801d634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801d634:	4770      	bx	lr

0801d636 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801d636:	4770      	bx	lr

0801d638 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801d638:	4770      	bx	lr

0801d63a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d63a:	4770      	bx	lr

0801d63c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d63c:	4770      	bx	lr

0801d63e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d63e:	4770      	bx	lr

0801d640 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d640:	4770      	bx	lr

0801d642 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d642:	4770      	bx	lr

0801d644 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d644:	4770      	bx	lr

0801d646 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d646:	4770      	bx	lr

0801d648 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d648:	4770      	bx	lr

0801d64a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801d64a:	4770      	bx	lr

0801d64c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801d64c:	4770      	bx	lr

0801d64e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801d64e:	4770      	bx	lr

0801d650 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801d650:	4770      	bx	lr

0801d652 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801d652:	4770      	bx	lr

0801d654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801d654:	4770      	bx	lr

0801d656 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801d656:	4770      	bx	lr

0801d658 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801d658:	4770      	bx	lr
	...

0801d65c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d65e:	4606      	mov	r6, r0
 801d660:	b087      	sub	sp, #28
 801d662:	4615      	mov	r5, r2
 801d664:	461f      	mov	r7, r3
 801d666:	b353      	cbz	r3, 801d6be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d668:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	dd26      	ble.n	801d6be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d670:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d674:	2b00      	cmp	r3, #0
 801d676:	dd22      	ble.n	801d6be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d678:	6808      	ldr	r0, [r1, #0]
 801d67a:	aa04      	add	r2, sp, #16
 801d67c:	6849      	ldr	r1, [r1, #4]
 801d67e:	4c1b      	ldr	r4, [pc, #108]	@ (801d6ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801d680:	c203      	stmia	r2!, {r0, r1}
 801d682:	a804      	add	r0, sp, #16
 801d684:	f7fa fd84 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d688:	6820      	ldr	r0, [r4, #0]
 801d68a:	6803      	ldr	r3, [r0, #0]
 801d68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d68e:	4798      	blx	r3
 801d690:	2fff      	cmp	r7, #255	@ 0xff
 801d692:	d016      	beq.n	801d6c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801d694:	f010 0f08 	tst.w	r0, #8
 801d698:	6820      	ldr	r0, [r4, #0]
 801d69a:	d015      	beq.n	801d6c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801d69c:	2400      	movs	r4, #0
 801d69e:	6801      	ldr	r1, [r0, #0]
 801d6a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d6a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d6a8:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801d6ac:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801d6b0:	9401      	str	r4, [sp, #4]
 801d6b2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801d6b6:	9400      	str	r4, [sp, #0]
 801d6b8:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801d6ba:	4629      	mov	r1, r5
 801d6bc:	47a0      	blx	r4
 801d6be:	b007      	add	sp, #28
 801d6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6c2:	f010 0f02 	tst.w	r0, #2
 801d6c6:	e7e7      	b.n	801d698 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801d6c8:	6803      	ldr	r3, [r0, #0]
 801d6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6cc:	4798      	blx	r3
 801d6ce:	4b08      	ldr	r3, [pc, #32]	@ (801d6f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801d6d0:	4601      	mov	r1, r0
 801d6d2:	4630      	mov	r0, r6
 801d6d4:	881a      	ldrh	r2, [r3, #0]
 801d6d6:	6833      	ldr	r3, [r6, #0]
 801d6d8:	e9cd 5700 	strd	r5, r7, [sp]
 801d6dc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801d6de:	ab04      	add	r3, sp, #16
 801d6e0:	47a8      	blx	r5
 801d6e2:	6820      	ldr	r0, [r4, #0]
 801d6e4:	6803      	ldr	r3, [r0, #0]
 801d6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6e8:	4798      	blx	r3
 801d6ea:	e7e8      	b.n	801d6be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801d6ec:	2401bb38 	.word	0x2401bb38
 801d6f0:	2401bb32 	.word	0x2401bb32

0801d6f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6f8:	b08b      	sub	sp, #44	@ 0x2c
 801d6fa:	460d      	mov	r5, r1
 801d6fc:	4616      	mov	r6, r2
 801d6fe:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801d702:	f1b8 0f00 	cmp.w	r8, #0
 801d706:	d047      	beq.n	801d798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801d708:	6810      	ldr	r0, [r2, #0]
 801d70a:	ac06      	add	r4, sp, #24
 801d70c:	6851      	ldr	r1, [r2, #4]
 801d70e:	4f51      	ldr	r7, [pc, #324]	@ (801d854 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801d710:	c403      	stmia	r4!, {r0, r1}
 801d712:	6818      	ldr	r0, [r3, #0]
 801d714:	ac08      	add	r4, sp, #32
 801d716:	6859      	ldr	r1, [r3, #4]
 801d718:	c403      	stmia	r4!, {r0, r1}
 801d71a:	a806      	add	r0, sp, #24
 801d71c:	f7fa fd38 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d720:	4631      	mov	r1, r6
 801d722:	a808      	add	r0, sp, #32
 801d724:	f7fa fd5c 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d728:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d72c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d730:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d734:	6838      	ldr	r0, [r7, #0]
 801d736:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d73a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801d73e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801d742:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d746:	440d      	add	r5, r1
 801d748:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d74c:	440a      	add	r2, r1
 801d74e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d752:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d756:	4413      	add	r3, r2
 801d758:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d75c:	6803      	ldr	r3, [r0, #0]
 801d75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d760:	4798      	blx	r3
 801d762:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d766:	d01a      	beq.n	801d79e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801d768:	f010 0f04 	tst.w	r0, #4
 801d76c:	6838      	ldr	r0, [r7, #0]
 801d76e:	d019      	beq.n	801d7a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801d770:	2100      	movs	r1, #0
 801d772:	6807      	ldr	r7, [r0, #0]
 801d774:	b2a4      	uxth	r4, r4
 801d776:	f8cd 800c 	str.w	r8, [sp, #12]
 801d77a:	b2b6      	uxth	r6, r6
 801d77c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d780:	9401      	str	r4, [sp, #4]
 801d782:	9600      	str	r6, [sp, #0]
 801d784:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d788:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801d78c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d790:	9102      	str	r1, [sp, #8]
 801d792:	4629      	mov	r1, r5
 801d794:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801d796:	47a0      	blx	r4
 801d798:	b00b      	add	sp, #44	@ 0x2c
 801d79a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d79e:	f010 0f01 	tst.w	r0, #1
 801d7a2:	e7e3      	b.n	801d76c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801d7a4:	6803      	ldr	r3, [r0, #0]
 801d7a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d7a8:	4798      	blx	r3
 801d7aa:	4a2b      	ldr	r2, [pc, #172]	@ (801d858 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801d7ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801d7b0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801d7b4:	8813      	ldrh	r3, [r2, #0]
 801d7b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801d7ba:	fb03 f404 	mul.w	r4, r3, r4
 801d7be:	fb03 c101 	mla	r1, r3, r1, ip
 801d7c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d7c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d7ca:	4408      	add	r0, r1
 801d7cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801d7d0:	4404      	add	r4, r0
 801d7d2:	d02e      	beq.n	801d832 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801d7d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d7d8:	1b9b      	subs	r3, r3, r6
 801d7da:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801d7de:	1b96      	subs	r6, r2, r6
 801d7e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7e8:	42a0      	cmp	r0, r4
 801d7ea:	d22d      	bcs.n	801d848 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d7ec:	eb00 0e01 	add.w	lr, r0, r1
 801d7f0:	4570      	cmp	r0, lr
 801d7f2:	d210      	bcs.n	801d816 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801d7f4:	f890 9000 	ldrb.w	r9, [r0]
 801d7f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801d7fc:	fb19 f90c 	smulbb	r9, r9, ip
 801d800:	fb02 9208 	mla	r2, r2, r8, r9
 801d804:	b292      	uxth	r2, r2
 801d806:	f102 0901 	add.w	r9, r2, #1
 801d80a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801d80e:	1212      	asrs	r2, r2, #8
 801d810:	f800 2b01 	strb.w	r2, [r0], #1
 801d814:	e7ec      	b.n	801d7f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801d816:	4418      	add	r0, r3
 801d818:	4435      	add	r5, r6
 801d81a:	e7e5      	b.n	801d7e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801d81c:	8813      	ldrh	r3, [r2, #0]
 801d81e:	1b9b      	subs	r3, r3, r6
 801d820:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d824:	4418      	add	r0, r3
 801d826:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d82a:	1b9b      	subs	r3, r3, r6
 801d82c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d830:	441d      	add	r5, r3
 801d832:	42a0      	cmp	r0, r4
 801d834:	d208      	bcs.n	801d848 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801d836:	eb00 0c01 	add.w	ip, r0, r1
 801d83a:	4560      	cmp	r0, ip
 801d83c:	d2ee      	bcs.n	801d81c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801d83e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d842:	f800 3b01 	strb.w	r3, [r0], #1
 801d846:	e7f8      	b.n	801d83a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801d848:	6838      	ldr	r0, [r7, #0]
 801d84a:	6803      	ldr	r3, [r0, #0]
 801d84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d84e:	4798      	blx	r3
 801d850:	e7a2      	b.n	801d798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801d852:	bf00      	nop
 801d854:	2401bb38 	.word	0x2401bb38
 801d858:	2401bb32 	.word	0x2401bb32

0801d85c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801d85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d85e:	2300      	movs	r3, #0
 801d860:	b085      	sub	sp, #20
 801d862:	9300      	str	r3, [sp, #0]
 801d864:	4b41      	ldr	r3, [pc, #260]	@ (801d96c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801d866:	781b      	ldrb	r3, [r3, #0]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d136      	bne.n	801d8da <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801d86c:	4a40      	ldr	r2, [pc, #256]	@ (801d970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d86e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d872:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d876:	2b00      	cmp	r3, #0
 801d878:	d131      	bne.n	801d8de <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801d87a:	4b3e      	ldr	r3, [pc, #248]	@ (801d974 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801d87c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d880:	ac02      	add	r4, sp, #8
 801d882:	6808      	ldr	r0, [r1, #0]
 801d884:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d888:	ab02      	add	r3, sp, #8
 801d88a:	6849      	ldr	r1, [r1, #4]
 801d88c:	4d3a      	ldr	r5, [pc, #232]	@ (801d978 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801d88e:	c303      	stmia	r3!, {r0, r1}
 801d890:	4669      	mov	r1, sp
 801d892:	4620      	mov	r0, r4
 801d894:	f7fa fca4 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d898:	4668      	mov	r0, sp
 801d89a:	f7fa fc79 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d89e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d8a2:	f8bd 2000 	ldrh.w	r2, [sp]
 801d8a6:	462e      	mov	r6, r5
 801d8a8:	6828      	ldr	r0, [r5, #0]
 801d8aa:	4413      	add	r3, r2
 801d8ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801d8b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 801d8b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d8b8:	4413      	add	r3, r2
 801d8ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 801d8be:	6803      	ldr	r3, [r0, #0]
 801d8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d8c2:	4798      	blx	r3
 801d8c4:	f010 0f01 	tst.w	r0, #1
 801d8c8:	d00b      	beq.n	801d8e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801d8ca:	6828      	ldr	r0, [r5, #0]
 801d8cc:	6803      	ldr	r3, [r0, #0]
 801d8ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d8d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d8d4:	4798      	blx	r3
 801d8d6:	b005      	add	sp, #20
 801d8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8da:	4a26      	ldr	r2, [pc, #152]	@ (801d974 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801d8dc:	e7c7      	b.n	801d86e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801d8de:	4b24      	ldr	r3, [pc, #144]	@ (801d970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d8e0:	e7cc      	b.n	801d87c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801d8e2:	6830      	ldr	r0, [r6, #0]
 801d8e4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801d8e8:	6803      	ldr	r3, [r0, #0]
 801d8ea:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801d8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d8f0:	4798      	blx	r3
 801d8f2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801d8f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d8fa:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801d8fe:	fb14 3402 	smlabb	r4, r4, r2, r3
 801d902:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d906:	4404      	add	r4, r0
 801d908:	6830      	ldr	r0, [r6, #0]
 801d90a:	6803      	ldr	r3, [r0, #0]
 801d90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d90e:	4798      	blx	r3
 801d910:	4917      	ldr	r1, [pc, #92]	@ (801d970 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801d912:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801d916:	880b      	ldrh	r3, [r1, #0]
 801d918:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801d91c:	fb03 c202 	mla	r2, r3, r2, ip
 801d920:	437b      	muls	r3, r7
 801d922:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801d926:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d92a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d92e:	4410      	add	r0, r2
 801d930:	18c2      	adds	r2, r0, r3
 801d932:	4290      	cmp	r0, r2
 801d934:	d214      	bcs.n	801d960 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801d936:	eb00 0c07 	add.w	ip, r0, r7
 801d93a:	4560      	cmp	r0, ip
 801d93c:	d204      	bcs.n	801d948 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801d93e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d942:	f800 3b01 	strb.w	r3, [r0], #1
 801d946:	e7f8      	b.n	801d93a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801d948:	880b      	ldrh	r3, [r1, #0]
 801d94a:	1b5b      	subs	r3, r3, r5
 801d94c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d950:	4418      	add	r0, r3
 801d952:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801d956:	1b5b      	subs	r3, r3, r5
 801d958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d95c:	441c      	add	r4, r3
 801d95e:	e7e8      	b.n	801d932 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801d960:	6830      	ldr	r0, [r6, #0]
 801d962:	6803      	ldr	r3, [r0, #0]
 801d964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d966:	4798      	blx	r3
 801d968:	e7b5      	b.n	801d8d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801d96a:	bf00      	nop
 801d96c:	2401bb30 	.word	0x2401bb30
 801d970:	2401bb32 	.word	0x2401bb32
 801d974:	2401bb34 	.word	0x2401bb34
 801d978:	2401bb38 	.word	0x2401bb38

0801d97c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d980:	b08f      	sub	sp, #60	@ 0x3c
 801d982:	461c      	mov	r4, r3
 801d984:	9203      	str	r2, [sp, #12]
 801d986:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801d98a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d98c:	6820      	ldr	r0, [r4, #0]
 801d98e:	9100      	str	r1, [sp, #0]
 801d990:	9204      	str	r2, [sp, #16]
 801d992:	aa0a      	add	r2, sp, #40	@ 0x28
 801d994:	6861      	ldr	r1, [r4, #4]
 801d996:	c203      	stmia	r2!, {r0, r1}
 801d998:	6818      	ldr	r0, [r3, #0]
 801d99a:	aa0c      	add	r2, sp, #48	@ 0x30
 801d99c:	6859      	ldr	r1, [r3, #4]
 801d99e:	c203      	stmia	r2!, {r0, r1}
 801d9a0:	a80a      	add	r0, sp, #40	@ 0x28
 801d9a2:	f7fa fbf5 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9a6:	4621      	mov	r1, r4
 801d9a8:	a80c      	add	r0, sp, #48	@ 0x30
 801d9aa:	f7fa fc19 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9ae:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801d9b2:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801d9b6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801d9ba:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801d9be:	bfdb      	ittet	le
 801d9c0:	b2b3      	uxthle	r3, r6
 801d9c2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801d9c6:	2301      	movgt	r3, #1
 801d9c8:	fb92 f3f3 	sdivle	r3, r2, r3
 801d9cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d9d0:	441d      	add	r5, r3
 801d9d2:	fb92 f1f3 	sdiv	r1, r2, r3
 801d9d6:	fa1f fc81 	uxth.w	ip, r1
 801d9da:	3d01      	subs	r5, #1
 801d9dc:	fb0c 2413 	mls	r4, ip, r3, r2
 801d9e0:	4661      	mov	r1, ip
 801d9e2:	fb14 f406 	smulbb	r4, r4, r6
 801d9e6:	4404      	add	r4, r0
 801d9e8:	fb95 f5f3 	sdiv	r5, r5, r3
 801d9ec:	b2a4      	uxth	r4, r4
 801d9ee:	b131      	cbz	r1, 801d9fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801d9f0:	9b03      	ldr	r3, [sp, #12]
 801d9f2:	9900      	ldr	r1, [sp, #0]
 801d9f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801d9f8:	ba1b      	rev	r3, r3
 801d9fa:	4419      	add	r1, r3
 801d9fc:	9100      	str	r1, [sp, #0]
 801d9fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801da02:	b2ad      	uxth	r5, r5
 801da04:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801da08:	4418      	add	r0, r3
 801da0a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801da0e:	00ad      	lsls	r5, r5, #2
 801da10:	441a      	add	r2, r3
 801da12:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801da16:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801da1a:	9301      	str	r3, [sp, #4]
 801da1c:	4b79      	ldr	r3, [pc, #484]	@ (801dc04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801da1e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801da22:	6818      	ldr	r0, [r3, #0]
 801da24:	6803      	ldr	r3, [r0, #0]
 801da26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da28:	4798      	blx	r3
 801da2a:	4a77      	ldr	r2, [pc, #476]	@ (801dc08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801da2c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801da30:	2c00      	cmp	r4, #0
 801da32:	8813      	ldrh	r3, [r2, #0]
 801da34:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801da38:	9209      	str	r2, [sp, #36]	@ 0x24
 801da3a:	fb03 c101 	mla	r1, r3, r1, ip
 801da3e:	fb06 f303 	mul.w	r3, r6, r3
 801da42:	bf18      	it	ne
 801da44:	2600      	movne	r6, #0
 801da46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801da4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da4e:	4408      	add	r0, r1
 801da50:	4403      	add	r3, r0
 801da52:	9306      	str	r3, [sp, #24]
 801da54:	f105 0304 	add.w	r3, r5, #4
 801da58:	9305      	str	r3, [sp, #20]
 801da5a:	9b01      	ldr	r3, [sp, #4]
 801da5c:	bf08      	it	eq
 801da5e:	461e      	moveq	r6, r3
 801da60:	2300      	movs	r3, #0
 801da62:	b2b6      	uxth	r6, r6
 801da64:	9302      	str	r3, [sp, #8]
 801da66:	9a06      	ldr	r2, [sp, #24]
 801da68:	4290      	cmp	r0, r2
 801da6a:	f080 80c2 	bcs.w	801dbf2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801da6e:	b963      	cbnz	r3, 801da8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801da70:	9b00      	ldr	r3, [sp, #0]
 801da72:	781a      	ldrb	r2, [r3, #0]
 801da74:	0993      	lsrs	r3, r2, #6
 801da76:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801da7a:	9202      	str	r2, [sp, #8]
 801da7c:	1e5a      	subs	r2, r3, #1
 801da7e:	2a02      	cmp	r2, #2
 801da80:	d815      	bhi.n	801daae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801da82:	9a00      	ldr	r2, [sp, #0]
 801da84:	b29b      	uxth	r3, r3
 801da86:	3201      	adds	r2, #1
 801da88:	9200      	str	r2, [sp, #0]
 801da8a:	b1b4      	cbz	r4, 801daba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801da8c:	429c      	cmp	r4, r3
 801da8e:	bf91      	iteee	ls
 801da90:	1b1c      	subls	r4, r3, r4
 801da92:	1ae4      	subhi	r4, r4, r3
 801da94:	4635      	movhi	r5, r6
 801da96:	f04f 0e00 	movhi.w	lr, #0
 801da9a:	bf9b      	ittet	ls
 801da9c:	fa1f fe84 	uxthls.w	lr, r4
 801daa0:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801daa4:	b2a4      	uxthhi	r4, r4
 801daa6:	2400      	movls	r4, #0
 801daa8:	4673      	mov	r3, lr
 801daaa:	462e      	mov	r6, r5
 801daac:	e7db      	b.n	801da66 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801daae:	9a00      	ldr	r2, [sp, #0]
 801dab0:	9b00      	ldr	r3, [sp, #0]
 801dab2:	3202      	adds	r2, #2
 801dab4:	785b      	ldrb	r3, [r3, #1]
 801dab6:	9200      	str	r2, [sp, #0]
 801dab8:	e7e7      	b.n	801da8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801daba:	2204      	movs	r2, #4
 801dabc:	9905      	ldr	r1, [sp, #20]
 801dabe:	429e      	cmp	r6, r3
 801dac0:	4615      	mov	r5, r2
 801dac2:	9a02      	ldr	r2, [sp, #8]
 801dac4:	bf94      	ite	ls
 801dac6:	eba3 0e06 	subls.w	lr, r3, r6
 801daca:	46a6      	movhi	lr, r4
 801dacc:	fb15 1202 	smlabb	r2, r5, r2, r1
 801dad0:	9903      	ldr	r1, [sp, #12]
 801dad2:	bf8c      	ite	hi
 801dad4:	1af5      	subhi	r5, r6, r3
 801dad6:	fa1f fe8e 	uxthls.w	lr, lr
 801dada:	f851 c002 	ldr.w	ip, [r1, r2]
 801dade:	bf9a      	itte	ls
 801dae0:	4625      	movls	r5, r4
 801dae2:	4632      	movls	r2, r6
 801dae4:	b2ad      	uxthhi	r5, r5
 801dae6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801daea:	bf88      	it	hi
 801daec:	461a      	movhi	r2, r3
 801daee:	b179      	cbz	r1, 801db10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801daf0:	29ff      	cmp	r1, #255	@ 0xff
 801daf2:	fa5f f98c 	uxtb.w	r9, ip
 801daf6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801dafa:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801dafe:	d126      	bne.n	801db4e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801db00:	9f04      	ldr	r7, [sp, #16]
 801db02:	2fff      	cmp	r7, #255	@ 0xff
 801db04:	d123      	bne.n	801db4e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801db06:	4682      	mov	sl, r0
 801db08:	4611      	mov	r1, r2
 801db0a:	f10a 0a03 	add.w	sl, sl, #3
 801db0e:	b9a9      	cbnz	r1, 801db3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801db10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db14:	429e      	cmp	r6, r3
 801db16:	4410      	add	r0, r2
 801db18:	d8c6      	bhi.n	801daa8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801db1a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801db1e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801db22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db24:	1b64      	subs	r4, r4, r5
 801db26:	9a01      	ldr	r2, [sp, #4]
 801db28:	881b      	ldrh	r3, [r3, #0]
 801db2a:	b2a4      	uxth	r4, r4
 801db2c:	1a9b      	subs	r3, r3, r2
 801db2e:	2c00      	cmp	r4, #0
 801db30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db34:	bf18      	it	ne
 801db36:	2500      	movne	r5, #0
 801db38:	4418      	add	r0, r3
 801db3a:	e7b5      	b.n	801daa8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801db3c:	3901      	subs	r1, #1
 801db3e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801db42:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801db46:	f80a cc01 	strb.w	ip, [sl, #-1]
 801db4a:	b289      	uxth	r1, r1
 801db4c:	e7dd      	b.n	801db0a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801db4e:	9f04      	ldr	r7, [sp, #16]
 801db50:	fb07 fa01 	mul.w	sl, r7, r1
 801db54:	f10a 0101 	add.w	r1, sl, #1
 801db58:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801db5c:	1209      	asrs	r1, r1, #8
 801db5e:	ea6f 0a01 	mvn.w	sl, r1
 801db62:	b289      	uxth	r1, r1
 801db64:	fb19 f901 	smulbb	r9, r9, r1
 801db68:	fa5f fa8a 	uxtb.w	sl, sl
 801db6c:	fb18 f801 	smulbb	r8, r8, r1
 801db70:	fb1c f101 	smulbb	r1, ip, r1
 801db74:	fa1f f789 	uxth.w	r7, r9
 801db78:	4684      	mov	ip, r0
 801db7a:	4691      	mov	r9, r2
 801db7c:	9707      	str	r7, [sp, #28]
 801db7e:	b289      	uxth	r1, r1
 801db80:	fa1f f788 	uxth.w	r7, r8
 801db84:	9708      	str	r7, [sp, #32]
 801db86:	f10c 0c03 	add.w	ip, ip, #3
 801db8a:	f1b9 0f00 	cmp.w	r9, #0
 801db8e:	d0bf      	beq.n	801db10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801db90:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801db94:	f109 39ff 	add.w	r9, r9, #4294967295
 801db98:	9f07      	ldr	r7, [sp, #28]
 801db9a:	fa1f f989 	uxth.w	r9, r9
 801db9e:	fb08 780a 	mla	r8, r8, sl, r7
 801dba2:	9f08      	ldr	r7, [sp, #32]
 801dba4:	fa1f f888 	uxth.w	r8, r8
 801dba8:	f108 0b01 	add.w	fp, r8, #1
 801dbac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dbb0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dbb4:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801dbb8:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801dbbc:	fb08 780a 	mla	r8, r8, sl, r7
 801dbc0:	fa1f f888 	uxth.w	r8, r8
 801dbc4:	f108 0b01 	add.w	fp, r8, #1
 801dbc8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dbcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dbd0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801dbd4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801dbd8:	fb08 180a 	mla	r8, r8, sl, r1
 801dbdc:	fa1f f888 	uxth.w	r8, r8
 801dbe0:	f108 0b01 	add.w	fp, r8, #1
 801dbe4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801dbe8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dbec:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801dbf0:	e7c9      	b.n	801db86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801dbf2:	4b04      	ldr	r3, [pc, #16]	@ (801dc04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801dbf4:	6818      	ldr	r0, [r3, #0]
 801dbf6:	6803      	ldr	r3, [r0, #0]
 801dbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dbfa:	4798      	blx	r3
 801dbfc:	b00f      	add	sp, #60	@ 0x3c
 801dbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc02:	bf00      	nop
 801dc04:	2401bb38 	.word	0x2401bb38
 801dc08:	2401bb32 	.word	0x2401bb32

0801dc0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801dc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc10:	b089      	sub	sp, #36	@ 0x24
 801dc12:	4607      	mov	r7, r0
 801dc14:	4689      	mov	r9, r1
 801dc16:	4692      	mov	sl, r2
 801dc18:	ac08      	add	r4, sp, #32
 801dc1a:	461e      	mov	r6, r3
 801dc1c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801dc20:	4620      	mov	r0, r4
 801dc22:	f7fd ffa5 	bl	801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801dc26:	683b      	ldr	r3, [r7, #0]
 801dc28:	4605      	mov	r5, r0
 801dc2a:	4620      	mov	r0, r4
 801dc2c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801dc30:	f7fd fee4 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801dc34:	4683      	mov	fp, r0
 801dc36:	4620      	mov	r0, r4
 801dc38:	f7fd ff14 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801dc3c:	4653      	mov	r3, sl
 801dc3e:	464a      	mov	r2, r9
 801dc40:	4639      	mov	r1, r7
 801dc42:	9500      	str	r5, [sp, #0]
 801dc44:	e9cd b001 	strd	fp, r0, [sp, #4]
 801dc48:	a806      	add	r0, sp, #24
 801dc4a:	47c0      	blx	r8
 801dc4c:	a906      	add	r1, sp, #24
 801dc4e:	4630      	mov	r0, r6
 801dc50:	f7fd fdb8 	bl	801b7c4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801dc54:	4628      	mov	r0, r5
 801dc56:	b009      	add	sp, #36	@ 0x24
 801dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801dc5c:	b510      	push	{r4, lr}
 801dc5e:	4604      	mov	r4, r0
 801dc60:	2104      	movs	r1, #4
 801dc62:	f007 f94a 	bl	8024efa <_ZdlPvj>
 801dc66:	4620      	mov	r0, r4
 801dc68:	bd10      	pop	{r4, pc}

0801dc6a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801dc6a:	b510      	push	{r4, lr}
 801dc6c:	4604      	mov	r4, r0
 801dc6e:	2104      	movs	r1, #4
 801dc70:	f007 f943 	bl	8024efa <_ZdlPvj>
 801dc74:	4620      	mov	r0, r4
 801dc76:	bd10      	pop	{r4, pc}

0801dc78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801dc78:	b510      	push	{r4, lr}
 801dc7a:	4604      	mov	r4, r0
 801dc7c:	f640 0144 	movw	r1, #2116	@ 0x844
 801dc80:	f007 f93b 	bl	8024efa <_ZdlPvj>
 801dc84:	4620      	mov	r0, r4
 801dc86:	bd10      	pop	{r4, pc}

0801dc88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dc88:	b510      	push	{r4, lr}
 801dc8a:	4604      	mov	r4, r0
 801dc8c:	2104      	movs	r1, #4
 801dc8e:	f007 f934 	bl	8024efa <_ZdlPvj>
 801dc92:	4620      	mov	r0, r4
 801dc94:	bd10      	pop	{r4, pc}

0801dc96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dc96:	b510      	push	{r4, lr}
 801dc98:	4604      	mov	r4, r0
 801dc9a:	2104      	movs	r1, #4
 801dc9c:	f007 f92d 	bl	8024efa <_ZdlPvj>
 801dca0:	4620      	mov	r0, r4
 801dca2:	bd10      	pop	{r4, pc}

0801dca4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dca4:	b510      	push	{r4, lr}
 801dca6:	4604      	mov	r4, r0
 801dca8:	2104      	movs	r1, #4
 801dcaa:	f007 f926 	bl	8024efa <_ZdlPvj>
 801dcae:	4620      	mov	r0, r4
 801dcb0:	bd10      	pop	{r4, pc}

0801dcb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dcb2:	b510      	push	{r4, lr}
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	2104      	movs	r1, #4
 801dcb8:	f007 f91f 	bl	8024efa <_ZdlPvj>
 801dcbc:	4620      	mov	r0, r4
 801dcbe:	bd10      	pop	{r4, pc}

0801dcc0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dcc0:	b510      	push	{r4, lr}
 801dcc2:	4604      	mov	r4, r0
 801dcc4:	2104      	movs	r1, #4
 801dcc6:	f007 f918 	bl	8024efa <_ZdlPvj>
 801dcca:	4620      	mov	r0, r4
 801dccc:	bd10      	pop	{r4, pc}

0801dcce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dcce:	b510      	push	{r4, lr}
 801dcd0:	4604      	mov	r4, r0
 801dcd2:	2104      	movs	r1, #4
 801dcd4:	f007 f911 	bl	8024efa <_ZdlPvj>
 801dcd8:	4620      	mov	r0, r4
 801dcda:	bd10      	pop	{r4, pc}

0801dcdc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dcdc:	b510      	push	{r4, lr}
 801dcde:	4604      	mov	r4, r0
 801dce0:	2104      	movs	r1, #4
 801dce2:	f007 f90a 	bl	8024efa <_ZdlPvj>
 801dce6:	4620      	mov	r0, r4
 801dce8:	bd10      	pop	{r4, pc}

0801dcea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dcea:	b510      	push	{r4, lr}
 801dcec:	4604      	mov	r4, r0
 801dcee:	2104      	movs	r1, #4
 801dcf0:	f007 f903 	bl	8024efa <_ZdlPvj>
 801dcf4:	4620      	mov	r0, r4
 801dcf6:	bd10      	pop	{r4, pc}

0801dcf8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dcf8:	b510      	push	{r4, lr}
 801dcfa:	4604      	mov	r4, r0
 801dcfc:	2104      	movs	r1, #4
 801dcfe:	f007 f8fc 	bl	8024efa <_ZdlPvj>
 801dd02:	4620      	mov	r0, r4
 801dd04:	bd10      	pop	{r4, pc}

0801dd06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801dd06:	b510      	push	{r4, lr}
 801dd08:	4604      	mov	r4, r0
 801dd0a:	2104      	movs	r1, #4
 801dd0c:	f007 f8f5 	bl	8024efa <_ZdlPvj>
 801dd10:	4620      	mov	r0, r4
 801dd12:	bd10      	pop	{r4, pc}

0801dd14 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801dd14:	b510      	push	{r4, lr}
 801dd16:	4604      	mov	r4, r0
 801dd18:	2104      	movs	r1, #4
 801dd1a:	f007 f8ee 	bl	8024efa <_ZdlPvj>
 801dd1e:	4620      	mov	r0, r4
 801dd20:	bd10      	pop	{r4, pc}

0801dd22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801dd22:	b510      	push	{r4, lr}
 801dd24:	4604      	mov	r4, r0
 801dd26:	2104      	movs	r1, #4
 801dd28:	f007 f8e7 	bl	8024efa <_ZdlPvj>
 801dd2c:	4620      	mov	r0, r4
 801dd2e:	bd10      	pop	{r4, pc}

0801dd30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801dd30:	b510      	push	{r4, lr}
 801dd32:	4604      	mov	r4, r0
 801dd34:	2104      	movs	r1, #4
 801dd36:	f007 f8e0 	bl	8024efa <_ZdlPvj>
 801dd3a:	4620      	mov	r0, r4
 801dd3c:	bd10      	pop	{r4, pc}

0801dd3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dd3e:	b510      	push	{r4, lr}
 801dd40:	4604      	mov	r4, r0
 801dd42:	2104      	movs	r1, #4
 801dd44:	f007 f8d9 	bl	8024efa <_ZdlPvj>
 801dd48:	4620      	mov	r0, r4
 801dd4a:	bd10      	pop	{r4, pc}

0801dd4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801dd4c:	b510      	push	{r4, lr}
 801dd4e:	4604      	mov	r4, r0
 801dd50:	2104      	movs	r1, #4
 801dd52:	f007 f8d2 	bl	8024efa <_ZdlPvj>
 801dd56:	4620      	mov	r0, r4
 801dd58:	bd10      	pop	{r4, pc}

0801dd5a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801dd5a:	b510      	push	{r4, lr}
 801dd5c:	4604      	mov	r4, r0
 801dd5e:	2104      	movs	r1, #4
 801dd60:	f007 f8cb 	bl	8024efa <_ZdlPvj>
 801dd64:	4620      	mov	r0, r4
 801dd66:	bd10      	pop	{r4, pc}

0801dd68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801dd68:	b510      	push	{r4, lr}
 801dd6a:	4604      	mov	r4, r0
 801dd6c:	2104      	movs	r1, #4
 801dd6e:	f007 f8c4 	bl	8024efa <_ZdlPvj>
 801dd72:	4620      	mov	r0, r4
 801dd74:	bd10      	pop	{r4, pc}

0801dd76 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801dd76:	b510      	push	{r4, lr}
 801dd78:	4604      	mov	r4, r0
 801dd7a:	2104      	movs	r1, #4
 801dd7c:	f007 f8bd 	bl	8024efa <_ZdlPvj>
 801dd80:	4620      	mov	r0, r4
 801dd82:	bd10      	pop	{r4, pc}

0801dd84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801dd84:	b510      	push	{r4, lr}
 801dd86:	4604      	mov	r4, r0
 801dd88:	2104      	movs	r1, #4
 801dd8a:	f007 f8b6 	bl	8024efa <_ZdlPvj>
 801dd8e:	4620      	mov	r0, r4
 801dd90:	bd10      	pop	{r4, pc}

0801dd92 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801dd92:	b510      	push	{r4, lr}
 801dd94:	4604      	mov	r4, r0
 801dd96:	2104      	movs	r1, #4
 801dd98:	f007 f8af 	bl	8024efa <_ZdlPvj>
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	bd10      	pop	{r4, pc}

0801dda0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dda4:	b08f      	sub	sp, #60	@ 0x3c
 801dda6:	461c      	mov	r4, r3
 801dda8:	460e      	mov	r6, r1
 801ddaa:	9206      	str	r2, [sp, #24]
 801ddac:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ddb0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ddb2:	9202      	str	r2, [sp, #8]
 801ddb4:	2a00      	cmp	r2, #0
 801ddb6:	f000 8128 	beq.w	801e00a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801ddba:	6820      	ldr	r0, [r4, #0]
 801ddbc:	aa0a      	add	r2, sp, #40	@ 0x28
 801ddbe:	6861      	ldr	r1, [r4, #4]
 801ddc0:	c203      	stmia	r2!, {r0, r1}
 801ddc2:	6818      	ldr	r0, [r3, #0]
 801ddc4:	aa0c      	add	r2, sp, #48	@ 0x30
 801ddc6:	6859      	ldr	r1, [r3, #4]
 801ddc8:	c203      	stmia	r2!, {r0, r1}
 801ddca:	a80a      	add	r0, sp, #40	@ 0x28
 801ddcc:	f7fa f9e0 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ddd0:	4621      	mov	r1, r4
 801ddd2:	a80c      	add	r0, sp, #48	@ 0x30
 801ddd4:	f7fa fa04 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ddd8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801dddc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801dde0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801dde4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801dde8:	bfdb      	ittet	le
 801ddea:	b2bb      	uxthle	r3, r7
 801ddec:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ddf0:	2301      	movgt	r3, #1
 801ddf2:	fb92 f3f3 	sdivle	r3, r2, r3
 801ddf6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ddfa:	441d      	add	r5, r3
 801ddfc:	fb92 f1f3 	sdiv	r1, r2, r3
 801de00:	fa1f fc81 	uxth.w	ip, r1
 801de04:	3d01      	subs	r5, #1
 801de06:	fb0c 2413 	mls	r4, ip, r3, r2
 801de0a:	4661      	mov	r1, ip
 801de0c:	fb14 f407 	smulbb	r4, r4, r7
 801de10:	4404      	add	r4, r0
 801de12:	fb95 f5f3 	sdiv	r5, r5, r3
 801de16:	b2a4      	uxth	r4, r4
 801de18:	b121      	cbz	r1, 801de24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801de1a:	9b06      	ldr	r3, [sp, #24]
 801de1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801de20:	ba1b      	rev	r3, r3
 801de22:	441e      	add	r6, r3
 801de24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801de28:	b2ad      	uxth	r5, r5
 801de2a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801de2e:	4418      	add	r0, r3
 801de30:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801de34:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801de38:	00ad      	lsls	r5, r5, #2
 801de3a:	441a      	add	r2, r3
 801de3c:	4b74      	ldr	r3, [pc, #464]	@ (801e010 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801de3e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801de42:	6818      	ldr	r0, [r3, #0]
 801de44:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801de48:	6803      	ldr	r3, [r0, #0]
 801de4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de4c:	4798      	blx	r3
 801de4e:	4a71      	ldr	r2, [pc, #452]	@ (801e014 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801de50:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801de54:	2c00      	cmp	r4, #0
 801de56:	8813      	ldrh	r3, [r2, #0]
 801de58:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801de5c:	9209      	str	r2, [sp, #36]	@ 0x24
 801de5e:	fb03 c101 	mla	r1, r3, r1, ip
 801de62:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801de66:	fb03 f307 	mul.w	r3, r3, r7
 801de6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801de6e:	9204      	str	r2, [sp, #16]
 801de70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de74:	9a02      	ldr	r2, [sp, #8]
 801de76:	4408      	add	r0, r1
 801de78:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801de7c:	4403      	add	r3, r0
 801de7e:	b292      	uxth	r2, r2
 801de80:	9307      	str	r3, [sp, #28]
 801de82:	f105 0304 	add.w	r3, r5, #4
 801de86:	bf0c      	ite	eq
 801de88:	4645      	moveq	r5, r8
 801de8a:	2500      	movne	r5, #0
 801de8c:	9308      	str	r3, [sp, #32]
 801de8e:	2300      	movs	r3, #0
 801de90:	b2ad      	uxth	r5, r5
 801de92:	9205      	str	r2, [sp, #20]
 801de94:	9303      	str	r3, [sp, #12]
 801de96:	9a07      	ldr	r2, [sp, #28]
 801de98:	4282      	cmp	r2, r0
 801de9a:	f240 80b1 	bls.w	801e000 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801de9e:	b95b      	cbnz	r3, 801deb8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801dea0:	7832      	ldrb	r2, [r6, #0]
 801dea2:	0993      	lsrs	r3, r2, #6
 801dea4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801dea8:	9203      	str	r2, [sp, #12]
 801deaa:	1e5a      	subs	r2, r3, #1
 801deac:	2a02      	cmp	r2, #2
 801deae:	bf8d      	iteet	hi
 801deb0:	7873      	ldrbhi	r3, [r6, #1]
 801deb2:	3601      	addls	r6, #1
 801deb4:	b29b      	uxthls	r3, r3
 801deb6:	3602      	addhi	r6, #2
 801deb8:	b184      	cbz	r4, 801dedc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801deba:	429c      	cmp	r4, r3
 801debc:	bf91      	iteee	ls
 801debe:	1b1c      	subls	r4, r3, r4
 801dec0:	1ae4      	subhi	r4, r4, r3
 801dec2:	4629      	movhi	r1, r5
 801dec4:	f04f 0e00 	movhi.w	lr, #0
 801dec8:	bf9b      	ittet	ls
 801deca:	fa1f fe84 	uxthls.w	lr, r4
 801dece:	2400      	movls	r4, #0
 801ded0:	b2a4      	uxthhi	r4, r4
 801ded2:	fa1f f188 	uxthls.w	r1, r8
 801ded6:	4673      	mov	r3, lr
 801ded8:	460d      	mov	r5, r1
 801deda:	e7dc      	b.n	801de96 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801dedc:	2203      	movs	r2, #3
 801dede:	9908      	ldr	r1, [sp, #32]
 801dee0:	42ab      	cmp	r3, r5
 801dee2:	4617      	mov	r7, r2
 801dee4:	9a03      	ldr	r2, [sp, #12]
 801dee6:	bf24      	itt	cs
 801dee8:	eba3 0e05 	subcs.w	lr, r3, r5
 801deec:	9501      	strcs	r5, [sp, #4]
 801deee:	fb17 1702 	smlabb	r7, r7, r2, r1
 801def2:	9a06      	ldr	r2, [sp, #24]
 801def4:	bf34      	ite	cc
 801def6:	1ae9      	subcc	r1, r5, r3
 801def8:	fa1f fe8e 	uxthcs.w	lr, lr
 801defc:	4417      	add	r7, r2
 801defe:	9a02      	ldr	r2, [sp, #8]
 801df00:	bf2f      	iteee	cs
 801df02:	4621      	movcs	r1, r4
 801df04:	b289      	uxthcc	r1, r1
 801df06:	9301      	strcc	r3, [sp, #4]
 801df08:	46a6      	movcc	lr, r4
 801df0a:	2aff      	cmp	r2, #255	@ 0xff
 801df0c:	d11e      	bne.n	801df4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801df0e:	4681      	mov	r9, r0
 801df10:	f8dd c004 	ldr.w	ip, [sp, #4]
 801df14:	f109 0903 	add.w	r9, r9, #3
 801df18:	f1bc 0f00 	cmp.w	ip, #0
 801df1c:	d15f      	bne.n	801dfde <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801df1e:	9a01      	ldr	r2, [sp, #4]
 801df20:	42ab      	cmp	r3, r5
 801df22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df26:	4410      	add	r0, r2
 801df28:	d3d5      	bcc.n	801ded6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801df2a:	fa1f f188 	uxth.w	r1, r8
 801df2e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801df32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df34:	1a64      	subs	r4, r4, r1
 801df36:	881b      	ldrh	r3, [r3, #0]
 801df38:	b2a4      	uxth	r4, r4
 801df3a:	eba3 0308 	sub.w	r3, r3, r8
 801df3e:	2c00      	cmp	r4, #0
 801df40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df44:	bf18      	it	ne
 801df46:	2100      	movne	r1, #0
 801df48:	4418      	add	r0, r3
 801df4a:	e7c4      	b.n	801ded6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801df4c:	4684      	mov	ip, r0
 801df4e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801df52:	f10c 0c03 	add.w	ip, ip, #3
 801df56:	f1ba 0f00 	cmp.w	sl, #0
 801df5a:	d0e0      	beq.n	801df1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801df5c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801df60:	f10a 3aff 	add.w	sl, sl, #4294967295
 801df64:	9a05      	ldr	r2, [sp, #20]
 801df66:	f897 9000 	ldrb.w	r9, [r7]
 801df6a:	fa1f fa8a 	uxth.w	sl, sl
 801df6e:	fb1b fb02 	smulbb	fp, fp, r2
 801df72:	9a04      	ldr	r2, [sp, #16]
 801df74:	fb09 b902 	mla	r9, r9, r2, fp
 801df78:	9a05      	ldr	r2, [sp, #20]
 801df7a:	fa1f f989 	uxth.w	r9, r9
 801df7e:	f109 0b01 	add.w	fp, r9, #1
 801df82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801df86:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801df8a:	fb1b fb02 	smulbb	fp, fp, r2
 801df8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801df92:	9a04      	ldr	r2, [sp, #16]
 801df94:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801df98:	f897 9001 	ldrb.w	r9, [r7, #1]
 801df9c:	fb09 b902 	mla	r9, r9, r2, fp
 801dfa0:	9a05      	ldr	r2, [sp, #20]
 801dfa2:	fa1f f989 	uxth.w	r9, r9
 801dfa6:	f109 0b01 	add.w	fp, r9, #1
 801dfaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dfae:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801dfb2:	fb1b fb02 	smulbb	fp, fp, r2
 801dfb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dfba:	9a04      	ldr	r2, [sp, #16]
 801dfbc:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801dfc0:	f897 9002 	ldrb.w	r9, [r7, #2]
 801dfc4:	fb09 b902 	mla	r9, r9, r2, fp
 801dfc8:	fa1f f989 	uxth.w	r9, r9
 801dfcc:	f109 0b01 	add.w	fp, r9, #1
 801dfd0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801dfd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dfd8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801dfdc:	e7b9      	b.n	801df52 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801dfde:	f897 a000 	ldrb.w	sl, [r7]
 801dfe2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dfe6:	f809 ac03 	strb.w	sl, [r9, #-3]
 801dfea:	fa1f fc8c 	uxth.w	ip, ip
 801dfee:	f897 a001 	ldrb.w	sl, [r7, #1]
 801dff2:	f809 ac02 	strb.w	sl, [r9, #-2]
 801dff6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801dffa:	f809 ac01 	strb.w	sl, [r9, #-1]
 801dffe:	e789      	b.n	801df14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801e000:	4b03      	ldr	r3, [pc, #12]	@ (801e010 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801e002:	6818      	ldr	r0, [r3, #0]
 801e004:	6803      	ldr	r3, [r0, #0]
 801e006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e008:	4798      	blx	r3
 801e00a:	b00f      	add	sp, #60	@ 0x3c
 801e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e010:	2401bb38 	.word	0x2401bb38
 801e014:	2401bb32 	.word	0x2401bb32

0801e018 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e01c:	b09b      	sub	sp, #108	@ 0x6c
 801e01e:	461d      	mov	r5, r3
 801e020:	4604      	mov	r4, r0
 801e022:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e024:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801e028:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801e02c:	9208      	str	r2, [sp, #32]
 801e02e:	2a00      	cmp	r2, #0
 801e030:	f000 81f3 	beq.w	801e41a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801e034:	6828      	ldr	r0, [r5, #0]
 801e036:	aa16      	add	r2, sp, #88	@ 0x58
 801e038:	6869      	ldr	r1, [r5, #4]
 801e03a:	c203      	stmia	r2!, {r0, r1}
 801e03c:	6818      	ldr	r0, [r3, #0]
 801e03e:	aa18      	add	r2, sp, #96	@ 0x60
 801e040:	6859      	ldr	r1, [r3, #4]
 801e042:	c203      	stmia	r2!, {r0, r1}
 801e044:	a816      	add	r0, sp, #88	@ 0x58
 801e046:	f7fa f8a3 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e04a:	4629      	mov	r1, r5
 801e04c:	a818      	add	r0, sp, #96	@ 0x60
 801e04e:	f7fa f8c7 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e052:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801e056:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801e05a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e05e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801e062:	bfdb      	ittet	le
 801e064:	b29a      	uxthle	r2, r3
 801e066:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e06a:	f04f 0a01 	movgt.w	sl, #1
 801e06e:	fb91 faf2 	sdivle	sl, r1, r2
 801e072:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801e076:	4456      	add	r6, sl
 801e078:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801e07c:	3e01      	subs	r6, #1
 801e07e:	fb92 f0fa 	sdiv	r0, r2, sl
 801e082:	b280      	uxth	r0, r0
 801e084:	fb00 281a 	mls	r8, r0, sl, r2
 801e088:	900e      	str	r0, [sp, #56]	@ 0x38
 801e08a:	fb18 f803 	smulbb	r8, r8, r3
 801e08e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801e092:	4488      	add	r8, r1
 801e094:	4419      	add	r1, r3
 801e096:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801e09a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801e09e:	fa1f f888 	uxth.w	r8, r8
 801e0a2:	441a      	add	r2, r3
 801e0a4:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801e0a8:	9303      	str	r3, [sp, #12]
 801e0aa:	4b9c      	ldr	r3, [pc, #624]	@ (801e31c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801e0ac:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801e0b0:	6818      	ldr	r0, [r3, #0]
 801e0b2:	6803      	ldr	r3, [r0, #0]
 801e0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e0b6:	4798      	blx	r3
 801e0b8:	4b99      	ldr	r3, [pc, #612]	@ (801e320 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801e0ba:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801e0be:	f1b8 0f00 	cmp.w	r8, #0
 801e0c2:	881a      	ldrh	r2, [r3, #0]
 801e0c4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801e0c8:	fb02 f505 	mul.w	r5, r2, r5
 801e0cc:	fb02 7101 	mla	r1, r2, r1, r7
 801e0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e0d4:	9314      	str	r3, [sp, #80]	@ 0x50
 801e0d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e0da:	9b08      	ldr	r3, [sp, #32]
 801e0dc:	fb96 f6fa 	sdiv	r6, r6, sl
 801e0e0:	4408      	add	r0, r1
 801e0e2:	f106 0601 	add.w	r6, r6, #1
 801e0e6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801e0ea:	f04f 0100 	mov.w	r1, #0
 801e0ee:	eb00 0205 	add.w	r2, r0, r5
 801e0f2:	b2b6      	uxth	r6, r6
 801e0f4:	b29b      	uxth	r3, r3
 801e0f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e0f8:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e0fc:	930d      	str	r3, [sp, #52]	@ 0x34
 801e0fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e102:	4b88      	ldr	r3, [pc, #544]	@ (801e324 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801e104:	f106 0204 	add.w	r2, r6, #4
 801e108:	eba3 0304 	sub.w	r3, r3, r4
 801e10c:	9205      	str	r2, [sp, #20]
 801e10e:	9a03      	ldr	r2, [sp, #12]
 801e110:	bf18      	it	ne
 801e112:	2200      	movne	r2, #0
 801e114:	9315      	str	r3, [sp, #84]	@ 0x54
 801e116:	b292      	uxth	r2, r2
 801e118:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e11a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e11c:	fa11 f383 	uxtah	r3, r1, r3
 801e120:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e122:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e126:	3304      	adds	r3, #4
 801e128:	9306      	str	r3, [sp, #24]
 801e12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e12c:	4283      	cmp	r3, r0
 801e12e:	f240 816f 	bls.w	801e410 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801e132:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801e136:	f04f 0900 	mov.w	r9, #0
 801e13a:	9d06      	ldr	r5, [sp, #24]
 801e13c:	fbb8 f3f3 	udiv	r3, r8, r3
 801e140:	ebaa 0303 	sub.w	r3, sl, r3
 801e144:	782d      	ldrb	r5, [r5, #0]
 801e146:	b29b      	uxth	r3, r3
 801e148:	950f      	str	r5, [sp, #60]	@ 0x3c
 801e14a:	3501      	adds	r5, #1
 801e14c:	9312      	str	r3, [sp, #72]	@ 0x48
 801e14e:	9b06      	ldr	r3, [sp, #24]
 801e150:	9504      	str	r5, [sp, #16]
 801e152:	7859      	ldrb	r1, [r3, #1]
 801e154:	789b      	ldrb	r3, [r3, #2]
 801e156:	021b      	lsls	r3, r3, #8
 801e158:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801e15c:	9906      	ldr	r1, [sp, #24]
 801e15e:	78c9      	ldrb	r1, [r1, #3]
 801e160:	430b      	orrs	r3, r1
 801e162:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e164:	4419      	add	r1, r3
 801e166:	1c4d      	adds	r5, r1, #1
 801e168:	7849      	ldrb	r1, [r1, #1]
 801e16a:	9502      	str	r5, [sp, #8]
 801e16c:	0209      	lsls	r1, r1, #8
 801e16e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801e170:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801e174:	5ceb      	ldrb	r3, [r5, r3]
 801e176:	4319      	orrs	r1, r3
 801e178:	b28b      	uxth	r3, r1
 801e17a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e17e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e180:	2300      	movs	r3, #0
 801e182:	9307      	str	r3, [sp, #28]
 801e184:	2301      	movs	r3, #1
 801e186:	e9cd 3300 	strd	r3, r3, [sp]
 801e18a:	469c      	mov	ip, r3
 801e18c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e190:	930c      	str	r3, [sp, #48]	@ 0x30
 801e192:	f1b8 0f00 	cmp.w	r8, #0
 801e196:	f000 8082 	beq.w	801e29e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801e19a:	45c4      	cmp	ip, r8
 801e19c:	d270      	bcs.n	801e280 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801e19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1a0:	eba8 080c 	sub.w	r8, r8, ip
 801e1a4:	4611      	mov	r1, r2
 801e1a6:	4283      	cmp	r3, r0
 801e1a8:	fa1f f888 	uxth.w	r8, r8
 801e1ac:	d802      	bhi.n	801e1b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801e1ae:	e074      	b.n	801e29a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d15f      	bne.n	801e274 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801e1b4:	9b02      	ldr	r3, [sp, #8]
 801e1b6:	9a01      	ldr	r2, [sp, #4]
 801e1b8:	785b      	ldrb	r3, [r3, #1]
 801e1ba:	f1c2 0207 	rsb	r2, r2, #7
 801e1be:	9d01      	ldr	r5, [sp, #4]
 801e1c0:	4093      	lsls	r3, r2
 801e1c2:	005b      	lsls	r3, r3, #1
 801e1c4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e1c8:	9b02      	ldr	r3, [sp, #8]
 801e1ca:	781b      	ldrb	r3, [r3, #0]
 801e1cc:	412b      	asrs	r3, r5
 801e1ce:	b2db      	uxtb	r3, r3
 801e1d0:	4313      	orrs	r3, r2
 801e1d2:	462a      	mov	r2, r5
 801e1d4:	3201      	adds	r2, #1
 801e1d6:	b29e      	uxth	r6, r3
 801e1d8:	b2d2      	uxtb	r2, r2
 801e1da:	2a08      	cmp	r2, #8
 801e1dc:	9201      	str	r2, [sp, #4]
 801e1de:	9a02      	ldr	r2, [sp, #8]
 801e1e0:	bf09      	itett	eq
 801e1e2:	3202      	addeq	r2, #2
 801e1e4:	3201      	addne	r2, #1
 801e1e6:	9202      	streq	r2, [sp, #8]
 801e1e8:	2200      	moveq	r2, #0
 801e1ea:	bf14      	ite	ne
 801e1ec:	9202      	strne	r2, [sp, #8]
 801e1ee:	9201      	streq	r2, [sp, #4]
 801e1f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e1f2:	42b2      	cmp	r2, r6
 801e1f4:	d309      	bcc.n	801e20a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801e1f6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e1fa:	2301      	movs	r3, #1
 801e1fc:	9a04      	ldr	r2, [sp, #16]
 801e1fe:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801e202:	d30e      	bcc.n	801e222 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801e204:	9300      	str	r3, [sp, #0]
 801e206:	2500      	movs	r5, #0
 801e208:	e035      	b.n	801e276 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e20a:	9b04      	ldr	r3, [sp, #16]
 801e20c:	429e      	cmp	r6, r3
 801e20e:	d318      	bcc.n	801e242 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801e210:	9b00      	ldr	r3, [sp, #0]
 801e212:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801e216:	18e3      	adds	r3, r4, r3
 801e218:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801e21c:	9b00      	ldr	r3, [sp, #0]
 801e21e:	3301      	adds	r3, #1
 801e220:	b29b      	uxth	r3, r3
 801e222:	9a04      	ldr	r2, [sp, #16]
 801e224:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801e228:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e22c:	9f00      	ldr	r7, [sp, #0]
 801e22e:	7115      	strb	r5, [r2, #4]
 801e230:	3701      	adds	r7, #1
 801e232:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801e234:	7157      	strb	r7, [r2, #5]
 801e236:	80d5      	strh	r5, [r2, #6]
 801e238:	9a04      	ldr	r2, [sp, #16]
 801e23a:	3201      	adds	r2, #1
 801e23c:	b292      	uxth	r2, r2
 801e23e:	9204      	str	r2, [sp, #16]
 801e240:	e7e0      	b.n	801e204 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801e242:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e246:	4632      	mov	r2, r6
 801e248:	795b      	ldrb	r3, [r3, #5]
 801e24a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801e24e:	4425      	add	r5, r4
 801e250:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e252:	eb07 0c05 	add.w	ip, r7, r5
 801e256:	f1bc 0f00 	cmp.w	ip, #0
 801e25a:	dd07      	ble.n	801e26c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801e25c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801e260:	f892 c004 	ldrb.w	ip, [r2, #4]
 801e264:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801e268:	88d2      	ldrh	r2, [r2, #6]
 801e26a:	e7f1      	b.n	801e250 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801e26c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e270:	b29b      	uxth	r3, r3
 801e272:	e7c3      	b.n	801e1fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801e274:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e276:	460a      	mov	r2, r1
 801e278:	960a      	str	r6, [sp, #40]	@ 0x28
 801e27a:	46a9      	mov	r9, r5
 801e27c:	469c      	mov	ip, r3
 801e27e:	e788      	b.n	801e192 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801e280:	ebac 0308 	sub.w	r3, ip, r8
 801e284:	eb09 0508 	add.w	r5, r9, r8
 801e288:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e28c:	b29b      	uxth	r3, r3
 801e28e:	b2ad      	uxth	r5, r5
 801e290:	f04f 0800 	mov.w	r8, #0
 801e294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e296:	4282      	cmp	r2, r0
 801e298:	d88a      	bhi.n	801e1b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801e29a:	460a      	mov	r2, r1
 801e29c:	e745      	b.n	801e12a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801e29e:	4594      	cmp	ip, r2
 801e2a0:	9d08      	ldr	r5, [sp, #32]
 801e2a2:	4686      	mov	lr, r0
 801e2a4:	bf27      	ittee	cs
 801e2a6:	ebac 0302 	subcs.w	r3, ip, r2
 801e2aa:	4616      	movcs	r6, r2
 801e2ac:	eba2 010c 	subcc.w	r1, r2, ip
 801e2b0:	4666      	movcc	r6, ip
 801e2b2:	bf27      	ittee	cs
 801e2b4:	b29b      	uxthcs	r3, r3
 801e2b6:	4641      	movcs	r1, r8
 801e2b8:	b289      	uxthcc	r1, r1
 801e2ba:	4643      	movcc	r3, r8
 801e2bc:	2dff      	cmp	r5, #255	@ 0xff
 801e2be:	eb09 0506 	add.w	r5, r9, r6
 801e2c2:	b2ad      	uxth	r5, r5
 801e2c4:	d130      	bne.n	801e328 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e2c6:	45a9      	cmp	r9, r5
 801e2c8:	f10e 0e03 	add.w	lr, lr, #3
 801e2cc:	d17a      	bne.n	801e3c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801e2ce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e2d2:	4594      	cmp	ip, r2
 801e2d4:	4430      	add	r0, r6
 801e2d6:	d3db      	bcc.n	801e290 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801e2d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e2da:	9903      	ldr	r1, [sp, #12]
 801e2dc:	8812      	ldrh	r2, [r2, #0]
 801e2de:	1a52      	subs	r2, r2, r1
 801e2e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e2e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e2e6:	4410      	add	r0, r2
 801e2e8:	9a07      	ldr	r2, [sp, #28]
 801e2ea:	3201      	adds	r2, #1
 801e2ec:	428a      	cmp	r2, r1
 801e2ee:	9207      	str	r2, [sp, #28]
 801e2f0:	f040 8081 	bne.w	801e3f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801e2f4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801e2f8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801e2fc:	9b03      	ldr	r3, [sp, #12]
 801e2fe:	eba8 080c 	sub.w	r8, r8, ip
 801e302:	fa1f f888 	uxth.w	r8, r8
 801e306:	f1b8 0f00 	cmp.w	r8, #0
 801e30a:	bf08      	it	eq
 801e30c:	461a      	moveq	r2, r3
 801e30e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e310:	bf18      	it	ne
 801e312:	2200      	movne	r2, #0
 801e314:	3301      	adds	r3, #1
 801e316:	b292      	uxth	r2, r2
 801e318:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e31a:	e6fd      	b.n	801e118 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801e31c:	2401bb38 	.word	0x2401bb38
 801e320:	2401bb32 	.word	0x2401bb32
 801e324:	fffff7fb 	.word	0xfffff7fb
 801e328:	45a9      	cmp	r9, r5
 801e32a:	f10e 0e03 	add.w	lr, lr, #3
 801e32e:	d0ce      	beq.n	801e2ce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801e330:	f109 0701 	add.w	r7, r9, #1
 801e334:	44a1      	add	r9, r4
 801e336:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801e33a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801e33e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801e340:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e344:	9f05      	ldr	r7, [sp, #20]
 801e346:	eb07 0908 	add.w	r9, r7, r8
 801e34a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e34e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e350:	fb1b fb07 	smulbb	fp, fp, r7
 801e354:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e356:	fb08 b807 	mla	r8, r8, r7, fp
 801e35a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e35c:	fa1f f888 	uxth.w	r8, r8
 801e360:	f108 0b01 	add.w	fp, r8, #1
 801e364:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e368:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801e36c:	fb1b fb07 	smulbb	fp, fp, r7
 801e370:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e374:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e376:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e37a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e37e:	fb08 b807 	mla	r8, r8, r7, fp
 801e382:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801e384:	fa1f f888 	uxth.w	r8, r8
 801e388:	f108 0b01 	add.w	fp, r8, #1
 801e38c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801e390:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e394:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e398:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e39c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801e3a0:	fb19 f907 	smulbb	r9, r9, r7
 801e3a4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e3a6:	fb08 9807 	mla	r8, r8, r7, r9
 801e3aa:	fa1f f888 	uxth.w	r8, r8
 801e3ae:	f108 0901 	add.w	r9, r8, #1
 801e3b2:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801e3b6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801e3ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e3be:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e3c2:	e7b1      	b.n	801e328 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801e3c4:	f109 0b01 	add.w	fp, r9, #1
 801e3c8:	44a1      	add	r9, r4
 801e3ca:	9f05      	ldr	r7, [sp, #20]
 801e3cc:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801e3d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e3d4:	eb07 0908 	add.w	r9, r7, r8
 801e3d8:	f817 8008 	ldrb.w	r8, [r7, r8]
 801e3dc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801e3e0:	f899 8001 	ldrb.w	r8, [r9, #1]
 801e3e4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801e3e8:	f899 8002 	ldrb.w	r8, [r9, #2]
 801e3ec:	fa1f f98b 	uxth.w	r9, fp
 801e3f0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801e3f4:	e767      	b.n	801e2c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801e3f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e3fa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801e3fe:	eba8 0801 	sub.w	r8, r8, r1
 801e402:	fa1f f888 	uxth.w	r8, r8
 801e406:	f1b8 0f00 	cmp.w	r8, #0
 801e40a:	bf18      	it	ne
 801e40c:	2100      	movne	r1, #0
 801e40e:	e741      	b.n	801e294 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801e410:	4b03      	ldr	r3, [pc, #12]	@ (801e420 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801e412:	6818      	ldr	r0, [r3, #0]
 801e414:	6803      	ldr	r3, [r0, #0]
 801e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e418:	4798      	blx	r3
 801e41a:	b01b      	add	sp, #108	@ 0x6c
 801e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e420:	2401bb38 	.word	0x2401bb38

0801e424 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801e424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e428:	b09d      	sub	sp, #116	@ 0x74
 801e42a:	461d      	mov	r5, r3
 801e42c:	4604      	mov	r4, r0
 801e42e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e430:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801e434:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801e438:	920c      	str	r2, [sp, #48]	@ 0x30
 801e43a:	2a00      	cmp	r2, #0
 801e43c:	f000 81de 	beq.w	801e7fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801e440:	6828      	ldr	r0, [r5, #0]
 801e442:	aa18      	add	r2, sp, #96	@ 0x60
 801e444:	6869      	ldr	r1, [r5, #4]
 801e446:	c203      	stmia	r2!, {r0, r1}
 801e448:	6818      	ldr	r0, [r3, #0]
 801e44a:	aa1a      	add	r2, sp, #104	@ 0x68
 801e44c:	6859      	ldr	r1, [r3, #4]
 801e44e:	c203      	stmia	r2!, {r0, r1}
 801e450:	a818      	add	r0, sp, #96	@ 0x60
 801e452:	f7f9 fe9d 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e456:	4629      	mov	r1, r5
 801e458:	a81a      	add	r0, sp, #104	@ 0x68
 801e45a:	f7f9 fec1 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e45e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801e462:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801e466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e46a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801e46e:	bfdb      	ittet	le
 801e470:	b29a      	uxthle	r2, r3
 801e472:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801e476:	2201      	movgt	r2, #1
 801e478:	fb91 f2f2 	sdivle	r2, r1, r2
 801e47c:	9201      	str	r2, [sp, #4]
 801e47e:	9801      	ldr	r0, [sp, #4]
 801e480:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801e484:	9901      	ldr	r1, [sp, #4]
 801e486:	fb92 f0f0 	sdiv	r0, r2, r0
 801e48a:	b280      	uxth	r0, r0
 801e48c:	440f      	add	r7, r1
 801e48e:	900d      	str	r0, [sp, #52]	@ 0x34
 801e490:	3f01      	subs	r7, #1
 801e492:	9801      	ldr	r0, [sp, #4]
 801e494:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801e496:	fb05 2510 	mls	r5, r5, r0, r2
 801e49a:	fb97 f7f1 	sdiv	r7, r7, r1
 801e49e:	fb15 f503 	smulbb	r5, r5, r3
 801e4a2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801e4a6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801e4aa:	3701      	adds	r7, #1
 801e4ac:	440d      	add	r5, r1
 801e4ae:	4419      	add	r1, r3
 801e4b0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801e4b4:	b2bf      	uxth	r7, r7
 801e4b6:	441a      	add	r2, r3
 801e4b8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801e4bc:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801e4c0:	00bf      	lsls	r7, r7, #2
 801e4c2:	9304      	str	r3, [sp, #16]
 801e4c4:	b2ad      	uxth	r5, r5
 801e4c6:	4bb0      	ldr	r3, [pc, #704]	@ (801e788 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801e4c8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801e4cc:	6818      	ldr	r0, [r3, #0]
 801e4ce:	6803      	ldr	r3, [r0, #0]
 801e4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e4d2:	4798      	blx	r3
 801e4d4:	4bad      	ldr	r3, [pc, #692]	@ (801e78c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801e4d6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801e4da:	2d00      	cmp	r5, #0
 801e4dc:	881a      	ldrh	r2, [r3, #0]
 801e4de:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801e4e2:	fb02 f606 	mul.w	r6, r2, r6
 801e4e6:	fb02 c101 	mla	r1, r2, r1, ip
 801e4ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e4ee:	9316      	str	r3, [sp, #88]	@ 0x58
 801e4f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e4f4:	4ba6      	ldr	r3, [pc, #664]	@ (801e790 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801e4f6:	eb00 0801 	add.w	r8, r0, r1
 801e4fa:	bf18      	it	ne
 801e4fc:	2100      	movne	r1, #0
 801e4fe:	eba3 0304 	sub.w	r3, r3, r4
 801e502:	eb08 0206 	add.w	r2, r8, r6
 801e506:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e508:	9208      	str	r2, [sp, #32]
 801e50a:	f107 0204 	add.w	r2, r7, #4
 801e50e:	9211      	str	r2, [sp, #68]	@ 0x44
 801e510:	9a04      	ldr	r2, [sp, #16]
 801e512:	bf08      	it	eq
 801e514:	4611      	moveq	r1, r2
 801e516:	2200      	movs	r2, #0
 801e518:	b289      	uxth	r1, r1
 801e51a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e51c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e520:	fa12 f383 	uxtah	r3, r2, r3
 801e524:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e52a:	3304      	adds	r3, #4
 801e52c:	9306      	str	r3, [sp, #24]
 801e52e:	9b08      	ldr	r3, [sp, #32]
 801e530:	4543      	cmp	r3, r8
 801e532:	f240 815e 	bls.w	801e7f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801e536:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801e53a:	f04f 0b01 	mov.w	fp, #1
 801e53e:	9a01      	ldr	r2, [sp, #4]
 801e540:	9806      	ldr	r0, [sp, #24]
 801e542:	465e      	mov	r6, fp
 801e544:	f8cd b008 	str.w	fp, [sp, #8]
 801e548:	7800      	ldrb	r0, [r0, #0]
 801e54a:	fbb5 f3f3 	udiv	r3, r5, r3
 801e54e:	1ad3      	subs	r3, r2, r3
 801e550:	900e      	str	r0, [sp, #56]	@ 0x38
 801e552:	3001      	adds	r0, #1
 801e554:	b29b      	uxth	r3, r3
 801e556:	9005      	str	r0, [sp, #20]
 801e558:	9312      	str	r3, [sp, #72]	@ 0x48
 801e55a:	9b06      	ldr	r3, [sp, #24]
 801e55c:	785a      	ldrb	r2, [r3, #1]
 801e55e:	789b      	ldrb	r3, [r3, #2]
 801e560:	021b      	lsls	r3, r3, #8
 801e562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e566:	9a06      	ldr	r2, [sp, #24]
 801e568:	78d2      	ldrb	r2, [r2, #3]
 801e56a:	4313      	orrs	r3, r2
 801e56c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e56e:	441a      	add	r2, r3
 801e570:	1c50      	adds	r0, r2, #1
 801e572:	7852      	ldrb	r2, [r2, #1]
 801e574:	9003      	str	r0, [sp, #12]
 801e576:	0212      	lsls	r2, r2, #8
 801e578:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e57a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801e57e:	5cc3      	ldrb	r3, [r0, r3]
 801e580:	431a      	orrs	r2, r3
 801e582:	b293      	uxth	r3, r2
 801e584:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801e588:	930a      	str	r3, [sp, #40]	@ 0x28
 801e58a:	2300      	movs	r3, #0
 801e58c:	461a      	mov	r2, r3
 801e58e:	9307      	str	r3, [sp, #28]
 801e590:	2d00      	cmp	r5, #0
 801e592:	d07c      	beq.n	801e68e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801e594:	42ae      	cmp	r6, r5
 801e596:	d26c      	bcs.n	801e672 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801e598:	9b08      	ldr	r3, [sp, #32]
 801e59a:	1bad      	subs	r5, r5, r6
 801e59c:	4608      	mov	r0, r1
 801e59e:	4543      	cmp	r3, r8
 801e5a0:	b2ad      	uxth	r5, r5
 801e5a2:	d802      	bhi.n	801e5aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801e5a4:	e071      	b.n	801e68a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d15d      	bne.n	801e666 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801e5aa:	9b03      	ldr	r3, [sp, #12]
 801e5ac:	9a02      	ldr	r2, [sp, #8]
 801e5ae:	785b      	ldrb	r3, [r3, #1]
 801e5b0:	f1c2 0207 	rsb	r2, r2, #7
 801e5b4:	9902      	ldr	r1, [sp, #8]
 801e5b6:	4093      	lsls	r3, r2
 801e5b8:	005b      	lsls	r3, r3, #1
 801e5ba:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801e5be:	9b03      	ldr	r3, [sp, #12]
 801e5c0:	781b      	ldrb	r3, [r3, #0]
 801e5c2:	410b      	asrs	r3, r1
 801e5c4:	3101      	adds	r1, #1
 801e5c6:	b2c9      	uxtb	r1, r1
 801e5c8:	b2db      	uxtb	r3, r3
 801e5ca:	2908      	cmp	r1, #8
 801e5cc:	9102      	str	r1, [sp, #8]
 801e5ce:	9903      	ldr	r1, [sp, #12]
 801e5d0:	ea43 0302 	orr.w	r3, r3, r2
 801e5d4:	bf0c      	ite	eq
 801e5d6:	3102      	addeq	r1, #2
 801e5d8:	3101      	addne	r1, #1
 801e5da:	b29a      	uxth	r2, r3
 801e5dc:	bf05      	ittet	eq
 801e5de:	9103      	streq	r1, [sp, #12]
 801e5e0:	2100      	moveq	r1, #0
 801e5e2:	9103      	strne	r1, [sp, #12]
 801e5e4:	9102      	streq	r1, [sp, #8]
 801e5e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e5e8:	4291      	cmp	r1, r2
 801e5ea:	d30a      	bcc.n	801e602 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801e5ec:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801e5f0:	2301      	movs	r3, #1
 801e5f2:	9905      	ldr	r1, [sp, #20]
 801e5f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e5f8:	d30f      	bcc.n	801e61a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801e5fa:	469b      	mov	fp, r3
 801e5fc:	f04f 0c00 	mov.w	ip, #0
 801e600:	e032      	b.n	801e668 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801e602:	9b05      	ldr	r3, [sp, #20]
 801e604:	429a      	cmp	r2, r3
 801e606:	d318      	bcc.n	801e63a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801e608:	eb04 030b 	add.w	r3, r4, fp
 801e60c:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801e610:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801e614:	f10b 0301 	add.w	r3, fp, #1
 801e618:	b29b      	uxth	r3, r3
 801e61a:	9905      	ldr	r1, [sp, #20]
 801e61c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801e620:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e624:	710e      	strb	r6, [r1, #4]
 801e626:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e628:	80ce      	strh	r6, [r1, #6]
 801e62a:	f10b 0601 	add.w	r6, fp, #1
 801e62e:	714e      	strb	r6, [r1, #5]
 801e630:	9905      	ldr	r1, [sp, #20]
 801e632:	3101      	adds	r1, #1
 801e634:	b289      	uxth	r1, r1
 801e636:	9105      	str	r1, [sp, #20]
 801e638:	e7df      	b.n	801e5fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801e63a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e63e:	4611      	mov	r1, r2
 801e640:	795b      	ldrb	r3, [r3, #5]
 801e642:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801e646:	4426      	add	r6, r4
 801e648:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801e64a:	4437      	add	r7, r6
 801e64c:	2f00      	cmp	r7, #0
 801e64e:	dd06      	ble.n	801e65e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801e650:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e654:	790f      	ldrb	r7, [r1, #4]
 801e656:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e65a:	88c9      	ldrh	r1, [r1, #6]
 801e65c:	e7f4      	b.n	801e648 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801e65e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801e662:	b29b      	uxth	r3, r3
 801e664:	e7c5      	b.n	801e5f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801e666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e668:	920a      	str	r2, [sp, #40]	@ 0x28
 801e66a:	4601      	mov	r1, r0
 801e66c:	4662      	mov	r2, ip
 801e66e:	461e      	mov	r6, r3
 801e670:	e78e      	b.n	801e590 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801e672:	1b73      	subs	r3, r6, r5
 801e674:	eb02 0c05 	add.w	ip, r2, r5
 801e678:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	fa1f fc8c 	uxth.w	ip, ip
 801e682:	2500      	movs	r5, #0
 801e684:	9a08      	ldr	r2, [sp, #32]
 801e686:	4542      	cmp	r2, r8
 801e688:	d88d      	bhi.n	801e5a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801e68a:	4601      	mov	r1, r0
 801e68c:	e74f      	b.n	801e52e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801e68e:	428e      	cmp	r6, r1
 801e690:	bf2b      	itete	cs
 801e692:	468e      	movcs	lr, r1
 801e694:	46b6      	movcc	lr, r6
 801e696:	1a73      	subcs	r3, r6, r1
 801e698:	1b88      	subcc	r0, r1, r6
 801e69a:	eb02 0c0e 	add.w	ip, r2, lr
 801e69e:	bf2b      	itete	cs
 801e6a0:	4628      	movcs	r0, r5
 801e6a2:	462b      	movcc	r3, r5
 801e6a4:	b29b      	uxthcs	r3, r3
 801e6a6:	b280      	uxthcc	r0, r0
 801e6a8:	f108 0503 	add.w	r5, r8, #3
 801e6ac:	fa1f fc8c 	uxth.w	ip, ip
 801e6b0:	4562      	cmp	r2, ip
 801e6b2:	d06f      	beq.n	801e794 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801e6b4:	1c57      	adds	r7, r2, #1
 801e6b6:	4422      	add	r2, r4
 801e6b8:	b2bf      	uxth	r7, r7
 801e6ba:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801e6be:	9713      	str	r7, [sp, #76]	@ 0x4c
 801e6c0:	2704      	movs	r7, #4
 801e6c2:	46b9      	mov	r9, r7
 801e6c4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801e6c6:	fb19 7202 	smlabb	r2, r9, r2, r7
 801e6ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801e6cc:	58bf      	ldr	r7, [r7, r2]
 801e6ce:	0e3a      	lsrs	r2, r7, #24
 801e6d0:	9209      	str	r2, [sp, #36]	@ 0x24
 801e6d2:	d016      	beq.n	801e702 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801e6d4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801e6d8:	fa5f fa87 	uxtb.w	sl, r7
 801e6dc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801e6e0:	fa5f f289 	uxtb.w	r2, r9
 801e6e4:	9214      	str	r2, [sp, #80]	@ 0x50
 801e6e6:	b2fa      	uxtb	r2, r7
 801e6e8:	9215      	str	r2, [sp, #84]	@ 0x54
 801e6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e6ec:	2aff      	cmp	r2, #255	@ 0xff
 801e6ee:	d10b      	bne.n	801e708 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801e6f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e6f2:	2aff      	cmp	r2, #255	@ 0xff
 801e6f4:	d108      	bne.n	801e708 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801e6f6:	f805 ac03 	strb.w	sl, [r5, #-3]
 801e6fa:	f805 9c02 	strb.w	r9, [r5, #-2]
 801e6fe:	f805 7c01 	strb.w	r7, [r5, #-1]
 801e702:	3503      	adds	r5, #3
 801e704:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e706:	e7d3      	b.n	801e6b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801e708:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801e70a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e70c:	437a      	muls	r2, r7
 801e70e:	1c57      	adds	r7, r2, #1
 801e710:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801e714:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801e718:	1212      	asrs	r2, r2, #8
 801e71a:	fa1f f982 	uxth.w	r9, r2
 801e71e:	43d2      	mvns	r2, r2
 801e720:	fb1a fa09 	smulbb	sl, sl, r9
 801e724:	b2d2      	uxtb	r2, r2
 801e726:	fb07 a702 	mla	r7, r7, r2, sl
 801e72a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e72c:	b2bf      	uxth	r7, r7
 801e72e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e730:	f107 0a01 	add.w	sl, r7, #1
 801e734:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801e738:	fb12 fa09 	smulbb	sl, r2, r9
 801e73c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e73e:	123f      	asrs	r7, r7, #8
 801e740:	f805 7c03 	strb.w	r7, [r5, #-3]
 801e744:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801e748:	fb07 aa02 	mla	sl, r7, r2, sl
 801e74c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e74e:	fb12 f909 	smulbb	r9, r2, r9
 801e752:	fa1f fa8a 	uxth.w	sl, sl
 801e756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e758:	f10a 0701 	add.w	r7, sl, #1
 801e75c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e760:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801e764:	fb07 9902 	mla	r9, r7, r2, r9
 801e768:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e76c:	fa1f f989 	uxth.w	r9, r9
 801e770:	f805 ac02 	strb.w	sl, [r5, #-2]
 801e774:	f109 0201 	add.w	r2, r9, #1
 801e778:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e77c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e780:	f805 9c01 	strb.w	r9, [r5, #-1]
 801e784:	e7bd      	b.n	801e702 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801e786:	bf00      	nop
 801e788:	2401bb38 	.word	0x2401bb38
 801e78c:	2401bb32 	.word	0x2401bb32
 801e790:	fffff7fb 	.word	0xfffff7fb
 801e794:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e798:	428e      	cmp	r6, r1
 801e79a:	44f0      	add	r8, lr
 801e79c:	f4ff af71 	bcc.w	801e682 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801e7a0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e7a2:	9904      	ldr	r1, [sp, #16]
 801e7a4:	8812      	ldrh	r2, [r2, #0]
 801e7a6:	1a52      	subs	r2, r2, r1
 801e7a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e7aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e7ae:	4490      	add	r8, r2
 801e7b0:	9a07      	ldr	r2, [sp, #28]
 801e7b2:	3201      	adds	r2, #1
 801e7b4:	428a      	cmp	r2, r1
 801e7b6:	9207      	str	r2, [sp, #28]
 801e7b8:	d111      	bne.n	801e7de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801e7ba:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801e7be:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801e7c2:	9b04      	ldr	r3, [sp, #16]
 801e7c4:	eba5 050c 	sub.w	r5, r5, ip
 801e7c8:	b2ad      	uxth	r5, r5
 801e7ca:	2d00      	cmp	r5, #0
 801e7cc:	bf08      	it	eq
 801e7ce:	4619      	moveq	r1, r3
 801e7d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7d2:	bf18      	it	ne
 801e7d4:	2100      	movne	r1, #0
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	b289      	uxth	r1, r1
 801e7da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7dc:	e69e      	b.n	801e51c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801e7de:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801e7e2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801e7e6:	1a2d      	subs	r5, r5, r0
 801e7e8:	b2ad      	uxth	r5, r5
 801e7ea:	2d00      	cmp	r5, #0
 801e7ec:	bf18      	it	ne
 801e7ee:	2000      	movne	r0, #0
 801e7f0:	e748      	b.n	801e684 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801e7f2:	4b04      	ldr	r3, [pc, #16]	@ (801e804 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801e7f4:	6818      	ldr	r0, [r3, #0]
 801e7f6:	6803      	ldr	r3, [r0, #0]
 801e7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7fa:	4798      	blx	r3
 801e7fc:	b01d      	add	sp, #116	@ 0x74
 801e7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e802:	bf00      	nop
 801e804:	2401bb38 	.word	0x2401bb38

0801e808 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e80c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801e810:	9c06      	ldr	r4, [sp, #24]
 801e812:	2800      	cmp	r0, #0
 801e814:	d06e      	beq.n	801e8f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e816:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801e81a:	2d00      	cmp	r5, #0
 801e81c:	dd6a      	ble.n	801e8f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e81e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801e822:	f1bc 0f00 	cmp.w	ip, #0
 801e826:	dd65      	ble.n	801e8f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e828:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801e82c:	28ff      	cmp	r0, #255	@ 0xff
 801e82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e832:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801e836:	fb02 3306 	mla	r3, r2, r6, r3
 801e83a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801e83e:	b2e4      	uxtb	r4, r4
 801e840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e844:	4419      	add	r1, r3
 801e846:	fb02 f30c 	mul.w	r3, r2, ip
 801e84a:	eba2 0205 	sub.w	r2, r2, r5
 801e84e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e852:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e856:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e85a:	440b      	add	r3, r1
 801e85c:	d03e      	beq.n	801e8dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801e85e:	fa1f fc80 	uxth.w	ip, r0
 801e862:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801e866:	fb06 f60c 	mul.w	r6, r6, ip
 801e86a:	b280      	uxth	r0, r0
 801e86c:	fb07 f70c 	mul.w	r7, r7, ip
 801e870:	fb04 f40c 	mul.w	r4, r4, ip
 801e874:	4299      	cmp	r1, r3
 801e876:	d23d      	bcs.n	801e8f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e878:	eb01 0c05 	add.w	ip, r1, r5
 801e87c:	458c      	cmp	ip, r1
 801e87e:	f101 0e03 	add.w	lr, r1, #3
 801e882:	d928      	bls.n	801e8d6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801e884:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e888:	fb11 f100 	smulbb	r1, r1, r0
 801e88c:	4421      	add	r1, r4
 801e88e:	b289      	uxth	r1, r1
 801e890:	f101 0801 	add.w	r8, r1, #1
 801e894:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e898:	1209      	asrs	r1, r1, #8
 801e89a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e89e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801e8a2:	fb11 f100 	smulbb	r1, r1, r0
 801e8a6:	4439      	add	r1, r7
 801e8a8:	b289      	uxth	r1, r1
 801e8aa:	f101 0801 	add.w	r8, r1, #1
 801e8ae:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e8b2:	1209      	asrs	r1, r1, #8
 801e8b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e8b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e8bc:	fb11 f100 	smulbb	r1, r1, r0
 801e8c0:	4431      	add	r1, r6
 801e8c2:	b289      	uxth	r1, r1
 801e8c4:	f101 0801 	add.w	r8, r1, #1
 801e8c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e8cc:	1209      	asrs	r1, r1, #8
 801e8ce:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e8d2:	4671      	mov	r1, lr
 801e8d4:	e7d2      	b.n	801e87c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801e8d6:	4411      	add	r1, r2
 801e8d8:	e7cc      	b.n	801e874 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801e8da:	4411      	add	r1, r2
 801e8dc:	4299      	cmp	r1, r3
 801e8de:	d209      	bcs.n	801e8f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e8e0:	1948      	adds	r0, r1, r5
 801e8e2:	4281      	cmp	r1, r0
 801e8e4:	d2f9      	bcs.n	801e8da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801e8e6:	700c      	strb	r4, [r1, #0]
 801e8e8:	3103      	adds	r1, #3
 801e8ea:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e8ee:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e8f2:	e7f6      	b.n	801e8e2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801e8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e8f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8fc:	b093      	sub	sp, #76	@ 0x4c
 801e8fe:	4699      	mov	r9, r3
 801e900:	4617      	mov	r7, r2
 801e902:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e906:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801e90a:	4604      	mov	r4, r0
 801e90c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e910:	a80c      	add	r0, sp, #48	@ 0x30
 801e912:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801e916:	460d      	mov	r5, r1
 801e918:	4649      	mov	r1, r9
 801e91a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e91e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e922:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801e926:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801e92a:	f7f5 fcd5 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 801e92e:	4639      	mov	r1, r7
 801e930:	a80c      	add	r0, sp, #48	@ 0x30
 801e932:	f7f5 fcd1 	bl	80142d8 <_ZN8touchgfx4RectaNERKS0_>
 801e936:	4b78      	ldr	r3, [pc, #480]	@ (801eb18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801e938:	8818      	ldrh	r0, [r3, #0]
 801e93a:	4b78      	ldr	r3, [pc, #480]	@ (801eb1c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801e93c:	b202      	sxth	r2, r0
 801e93e:	8819      	ldrh	r1, [r3, #0]
 801e940:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e944:	b20f      	sxth	r7, r1
 801e946:	2b00      	cmp	r3, #0
 801e948:	da07      	bge.n	801e95a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801e94a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801e94e:	4463      	add	r3, ip
 801e950:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801e954:	2300      	movs	r3, #0
 801e956:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801e95a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e95e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801e962:	1ad2      	subs	r2, r2, r3
 801e964:	4594      	cmp	ip, r2
 801e966:	bfc4      	itt	gt
 801e968:	1ac2      	subgt	r2, r0, r3
 801e96a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801e96e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e972:	2a00      	cmp	r2, #0
 801e974:	da07      	bge.n	801e986 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801e976:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801e97a:	4462      	add	r2, ip
 801e97c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801e980:	2200      	movs	r2, #0
 801e982:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801e986:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e98a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801e98e:	1abf      	subs	r7, r7, r2
 801e990:	45bc      	cmp	ip, r7
 801e992:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801eb24 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801e996:	bfc8      	it	gt
 801e998:	1a8f      	subgt	r7, r1, r2
 801e99a:	f89c c000 	ldrb.w	ip, [ip]
 801e99e:	bfc8      	it	gt
 801e9a0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801e9a4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801e9a8:	f1bc 0f00 	cmp.w	ip, #0
 801e9ac:	d176      	bne.n	801ea9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801e9ae:	4287      	cmp	r7, r0
 801e9b0:	bf14      	ite	ne
 801e9b2:	2100      	movne	r1, #0
 801e9b4:	2101      	moveq	r1, #1
 801e9b6:	2f00      	cmp	r7, #0
 801e9b8:	9107      	str	r1, [sp, #28]
 801e9ba:	dd73      	ble.n	801eaa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e9bc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801e9c0:	2900      	cmp	r1, #0
 801e9c2:	9104      	str	r1, [sp, #16]
 801e9c4:	dd6e      	ble.n	801eaa4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e9c6:	f8b9 1000 	ldrh.w	r1, [r9]
 801e9ca:	a80e      	add	r0, sp, #56	@ 0x38
 801e9cc:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801e9d0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801e9d4:	1a5b      	subs	r3, r3, r1
 801e9d6:	a910      	add	r1, sp, #64	@ 0x40
 801e9d8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e9dc:	b21b      	sxth	r3, r3
 801e9de:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801e9e2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801eb28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e9e6:	9305      	str	r3, [sp, #20]
 801e9e8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801e9ec:	1ad2      	subs	r2, r2, r3
 801e9ee:	b213      	sxth	r3, r2
 801e9f0:	9306      	str	r3, [sp, #24]
 801e9f2:	9b05      	ldr	r3, [sp, #20]
 801e9f4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801e9f8:	9b06      	ldr	r3, [sp, #24]
 801e9fa:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e9fe:	9b04      	ldr	r3, [sp, #16]
 801ea00:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801ea04:	2300      	movs	r3, #0
 801ea06:	9310      	str	r3, [sp, #64]	@ 0x40
 801ea08:	f7f9 fbea 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ea0c:	4640      	mov	r0, r8
 801ea0e:	f7f9 fbbf 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea12:	a810      	add	r0, sp, #64	@ 0x40
 801ea14:	f7f9 fbbc 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ea18:	4b41      	ldr	r3, [pc, #260]	@ (801eb20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801ea1a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801ea1e:	4628      	mov	r0, r5
 801ea20:	881b      	ldrh	r3, [r3, #0]
 801ea22:	9308      	str	r3, [sp, #32]
 801ea24:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801ea28:	b21b      	sxth	r3, r3
 801ea2a:	9303      	str	r3, [sp, #12]
 801ea2c:	682b      	ldr	r3, [r5, #0]
 801ea2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea30:	4798      	blx	r3
 801ea32:	9a03      	ldr	r2, [sp, #12]
 801ea34:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801ea38:	4681      	mov	r9, r0
 801ea3a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801ea3e:	fb13 f302 	smulbb	r3, r3, r2
 801ea42:	2203      	movs	r2, #3
 801ea44:	f8da 0000 	ldr.w	r0, [sl]
 801ea48:	fb15 3302 	smlabb	r3, r5, r2, r3
 801ea4c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801ea4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ea50:	441d      	add	r5, r3
 801ea52:	6803      	ldr	r3, [r0, #0]
 801ea54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ea56:	4798      	blx	r3
 801ea58:	9009      	str	r0, [sp, #36]	@ 0x24
 801ea5a:	f8da 0000 	ldr.w	r0, [sl]
 801ea5e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ea62:	6803      	ldr	r3, [r0, #0]
 801ea64:	910a      	str	r1, [sp, #40]	@ 0x28
 801ea66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea68:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801ea6c:	4798      	blx	r3
 801ea6e:	f010 0f01 	tst.w	r0, #1
 801ea72:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801ea76:	d01e      	beq.n	801eab6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801ea78:	f8da 0000 	ldr.w	r0, [sl]
 801ea7c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801ea80:	6803      	ldr	r3, [r0, #0]
 801ea82:	9200      	str	r2, [sp, #0]
 801ea84:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801ea86:	462b      	mov	r3, r5
 801ea88:	e898 0006 	ldmia.w	r8, {r1, r2}
 801ea8c:	47b0      	blx	r6
 801ea8e:	9b05      	ldr	r3, [sp, #20]
 801ea90:	80a7      	strh	r7, [r4, #4]
 801ea92:	8023      	strh	r3, [r4, #0]
 801ea94:	9b06      	ldr	r3, [sp, #24]
 801ea96:	8063      	strh	r3, [r4, #2]
 801ea98:	9b04      	ldr	r3, [sp, #16]
 801ea9a:	e007      	b.n	801eaac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801ea9c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801eaa0:	4288      	cmp	r0, r1
 801eaa2:	e785      	b.n	801e9b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801eaa4:	2300      	movs	r3, #0
 801eaa6:	8023      	strh	r3, [r4, #0]
 801eaa8:	8063      	strh	r3, [r4, #2]
 801eaaa:	80a3      	strh	r3, [r4, #4]
 801eaac:	4620      	mov	r0, r4
 801eaae:	80e3      	strh	r3, [r4, #6]
 801eab0:	b013      	add	sp, #76	@ 0x4c
 801eab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eab6:	fb09 f606 	mul.w	r6, r9, r6
 801eaba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eabc:	fb11 6602 	smlabb	r6, r1, r2, r6
 801eac0:	9a07      	ldr	r2, [sp, #28]
 801eac2:	4433      	add	r3, r6
 801eac4:	461e      	mov	r6, r3
 801eac6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801eaca:	b16a      	cbz	r2, 801eae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801eacc:	9a08      	ldr	r2, [sp, #32]
 801eace:	4593      	cmp	fp, r2
 801ead0:	d10a      	bne.n	801eae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801ead2:	f8da 0000 	ldr.w	r0, [sl]
 801ead6:	fb09 f303 	mul.w	r3, r9, r3
 801eada:	4629      	mov	r1, r5
 801eadc:	6802      	ldr	r2, [r0, #0]
 801eade:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801eae2:	4632      	mov	r2, r6
 801eae4:	47d0      	blx	sl
 801eae6:	e7d2      	b.n	801ea8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801eae8:	9a03      	ldr	r2, [sp, #12]
 801eaea:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801eb28 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801eaee:	fb02 5803 	mla	r8, r2, r3, r5
 801eaf2:	4545      	cmp	r5, r8
 801eaf4:	d2cb      	bcs.n	801ea8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801eaf6:	f8db 0000 	ldr.w	r0, [fp]
 801eafa:	4629      	mov	r1, r5
 801eafc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801eb00:	6802      	ldr	r2, [r0, #0]
 801eb02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb06:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801eb0a:	4632      	mov	r2, r6
 801eb0c:	47d0      	blx	sl
 801eb0e:	9b03      	ldr	r3, [sp, #12]
 801eb10:	444e      	add	r6, r9
 801eb12:	441d      	add	r5, r3
 801eb14:	e7ed      	b.n	801eaf2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801eb16:	bf00      	nop
 801eb18:	2401bb2c 	.word	0x2401bb2c
 801eb1c:	2401bb2e 	.word	0x2401bb2e
 801eb20:	2401bb32 	.word	0x2401bb32
 801eb24:	2401bb30 	.word	0x2401bb30
 801eb28:	2401bb38 	.word	0x2401bb38

0801eb2c <_ZN8touchgfx8LCD24bppC1Ev>:
 801eb2c:	2200      	movs	r2, #0
 801eb2e:	490e      	ldr	r1, [pc, #56]	@ (801eb68 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801eb30:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801eb34:	6001      	str	r1, [r0, #0]
 801eb36:	6642      	str	r2, [r0, #100]	@ 0x64
 801eb38:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801eb3c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801eb40:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801eb44:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801eb48:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801eb4c:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801eb50:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801eb54:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801eb58:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801eb5c:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801eb60:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801eb64:	4770      	bx	lr
 801eb66:	bf00      	nop
 801eb68:	08028820 	.word	0x08028820

0801eb6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb70:	b091      	sub	sp, #68	@ 0x44
 801eb72:	4607      	mov	r7, r0
 801eb74:	4688      	mov	r8, r1
 801eb76:	6810      	ldr	r0, [r2, #0]
 801eb78:	6851      	ldr	r1, [r2, #4]
 801eb7a:	ac0c      	add	r4, sp, #48	@ 0x30
 801eb7c:	4616      	mov	r6, r2
 801eb7e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801eb82:	4d64      	ldr	r5, [pc, #400]	@ (801ed14 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801eb84:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801ed18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801eb88:	c403      	stmia	r4!, {r0, r1}
 801eb8a:	6818      	ldr	r0, [r3, #0]
 801eb8c:	ac0e      	add	r4, sp, #56	@ 0x38
 801eb8e:	6859      	ldr	r1, [r3, #4]
 801eb90:	c403      	stmia	r4!, {r0, r1}
 801eb92:	a80c      	add	r0, sp, #48	@ 0x30
 801eb94:	f7f9 fafc 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb98:	4631      	mov	r1, r6
 801eb9a:	a80e      	add	r0, sp, #56	@ 0x38
 801eb9c:	f7f9 fb20 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eba0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801eba4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801eba8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ebac:	6828      	ldr	r0, [r5, #0]
 801ebae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ebb2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801ebb6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801ebba:	440f      	add	r7, r1
 801ebbc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ebc0:	440a      	add	r2, r1
 801ebc2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801ebc6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801ebca:	4413      	add	r3, r2
 801ebcc:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801ebd0:	6803      	ldr	r3, [r0, #0]
 801ebd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebd4:	4798      	blx	r3
 801ebd6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801ebda:	6828      	ldr	r0, [r5, #0]
 801ebdc:	d01f      	beq.n	801ec1e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801ebde:	2201      	movs	r2, #1
 801ebe0:	2500      	movs	r5, #0
 801ebe2:	6801      	ldr	r1, [r0, #0]
 801ebe4:	b2a4      	uxth	r4, r4
 801ebe6:	b2b6      	uxth	r6, r6
 801ebe8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801ebec:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801ebf0:	250b      	movs	r5, #11
 801ebf2:	9507      	str	r5, [sp, #28]
 801ebf4:	f8ba 5000 	ldrh.w	r5, [sl]
 801ebf8:	f8cd 9010 	str.w	r9, [sp, #16]
 801ebfc:	9602      	str	r6, [sp, #8]
 801ebfe:	9401      	str	r4, [sp, #4]
 801ec00:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801ec04:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801ec08:	9203      	str	r2, [sp, #12]
 801ec0a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801ec0e:	9200      	str	r2, [sp, #0]
 801ec10:	4642      	mov	r2, r8
 801ec12:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801ec14:	4639      	mov	r1, r7
 801ec16:	47a0      	blx	r4
 801ec18:	b011      	add	sp, #68	@ 0x44
 801ec1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec1e:	6803      	ldr	r3, [r0, #0]
 801ec20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec22:	4798      	blx	r3
 801ec24:	f8ba 5000 	ldrh.w	r5, [sl]
 801ec28:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ec2c:	f04f 0e04 	mov.w	lr, #4
 801ec30:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ec34:	436e      	muls	r6, r5
 801ec36:	fb05 2303 	mla	r3, r5, r3, r2
 801ec3a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ec3e:	1b2d      	subs	r5, r5, r4
 801ec40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ec48:	4418      	add	r0, r3
 801ec4a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ec4e:	1982      	adds	r2, r0, r6
 801ec50:	1b1b      	subs	r3, r3, r4
 801ec52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ec56:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ec58:	4290      	cmp	r0, r2
 801ec5a:	d254      	bcs.n	801ed06 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ec5c:	eb00 0a04 	add.w	sl, r0, r4
 801ec60:	4550      	cmp	r0, sl
 801ec62:	d24c      	bcs.n	801ecfe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ec64:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ec68:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ec6c:	eb08 0c01 	add.w	ip, r8, r1
 801ec70:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ec74:	b173      	cbz	r3, 801ec94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ec76:	2bff      	cmp	r3, #255	@ 0xff
 801ec78:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ec7c:	d10c      	bne.n	801ec98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ec7e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ec82:	d109      	bne.n	801ec98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ec84:	f880 b000 	strb.w	fp, [r0]
 801ec88:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ec8c:	7043      	strb	r3, [r0, #1]
 801ec8e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ec92:	7083      	strb	r3, [r0, #2]
 801ec94:	3003      	adds	r0, #3
 801ec96:	e7e3      	b.n	801ec60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ec98:	fb09 f103 	mul.w	r1, r9, r3
 801ec9c:	1c4b      	adds	r3, r1, #1
 801ec9e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eca2:	7801      	ldrb	r1, [r0, #0]
 801eca4:	121b      	asrs	r3, r3, #8
 801eca6:	b29e      	uxth	r6, r3
 801eca8:	43db      	mvns	r3, r3
 801ecaa:	fb1b fb06 	smulbb	fp, fp, r6
 801ecae:	b2db      	uxtb	r3, r3
 801ecb0:	fb01 b103 	mla	r1, r1, r3, fp
 801ecb4:	b289      	uxth	r1, r1
 801ecb6:	f101 0b01 	add.w	fp, r1, #1
 801ecba:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ecbe:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ecc2:	fb1b fb03 	smulbb	fp, fp, r3
 801ecc6:	1209      	asrs	r1, r1, #8
 801ecc8:	7001      	strb	r1, [r0, #0]
 801ecca:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ecce:	fb01 b106 	mla	r1, r1, r6, fp
 801ecd2:	b289      	uxth	r1, r1
 801ecd4:	f101 0b01 	add.w	fp, r1, #1
 801ecd8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ecdc:	1209      	asrs	r1, r1, #8
 801ecde:	7041      	strb	r1, [r0, #1]
 801ece0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801ece4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801ece8:	fb1c f303 	smulbb	r3, ip, r3
 801ecec:	fb01 3606 	mla	r6, r1, r6, r3
 801ecf0:	b2b6      	uxth	r6, r6
 801ecf2:	1c73      	adds	r3, r6, #1
 801ecf4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ecf8:	1236      	asrs	r6, r6, #8
 801ecfa:	7086      	strb	r6, [r0, #2]
 801ecfc:	e7ca      	b.n	801ec94 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ecfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed00:	4428      	add	r0, r5
 801ed02:	441f      	add	r7, r3
 801ed04:	e7a8      	b.n	801ec58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801ed06:	4b03      	ldr	r3, [pc, #12]	@ (801ed14 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801ed08:	6818      	ldr	r0, [r3, #0]
 801ed0a:	6803      	ldr	r3, [r0, #0]
 801ed0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed0e:	4798      	blx	r3
 801ed10:	e782      	b.n	801ec18 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801ed12:	bf00      	nop
 801ed14:	2401bb38 	.word	0x2401bb38
 801ed18:	2401bb32 	.word	0x2401bb32

0801ed1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801ed1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed20:	b091      	sub	sp, #68	@ 0x44
 801ed22:	4680      	mov	r8, r0
 801ed24:	460e      	mov	r6, r1
 801ed26:	6810      	ldr	r0, [r2, #0]
 801ed28:	6851      	ldr	r1, [r2, #4]
 801ed2a:	ad0c      	add	r5, sp, #48	@ 0x30
 801ed2c:	4614      	mov	r4, r2
 801ed2e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801ed32:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801eecc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801ed36:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801eed0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801ed3a:	c503      	stmia	r5!, {r0, r1}
 801ed3c:	6818      	ldr	r0, [r3, #0]
 801ed3e:	ad0e      	add	r5, sp, #56	@ 0x38
 801ed40:	6859      	ldr	r1, [r3, #4]
 801ed42:	c503      	stmia	r5!, {r0, r1}
 801ed44:	a80c      	add	r0, sp, #48	@ 0x30
 801ed46:	f7f9 fa23 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ed4a:	4621      	mov	r1, r4
 801ed4c:	a80e      	add	r0, sp, #56	@ 0x38
 801ed4e:	f7f9 fa47 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ed52:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ed56:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ed5a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801ed5e:	f8d9 0000 	ldr.w	r0, [r9]
 801ed62:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ed66:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801ed6a:	eb08 0401 	add.w	r4, r8, r1
 801ed6e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ed72:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801ed76:	440a      	add	r2, r1
 801ed78:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801ed7c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801ed80:	4413      	add	r3, r2
 801ed82:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801ed86:	6803      	ldr	r3, [r0, #0]
 801ed88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ed8a:	4798      	blx	r3
 801ed8c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801ed90:	f8d9 0000 	ldr.w	r0, [r9]
 801ed94:	d022      	beq.n	801eddc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801ed96:	2200      	movs	r2, #0
 801ed98:	f04f 0c01 	mov.w	ip, #1
 801ed9c:	6801      	ldr	r1, [r0, #0]
 801ed9e:	b2ad      	uxth	r5, r5
 801eda0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801eda4:	e9cd c208 	strd	ip, r2, [sp, #32]
 801eda8:	f04f 0c0b 	mov.w	ip, #11
 801edac:	f8cd c01c 	str.w	ip, [sp, #28]
 801edb0:	f8ba c000 	ldrh.w	ip, [sl]
 801edb4:	9704      	str	r7, [sp, #16]
 801edb6:	9502      	str	r5, [sp, #8]
 801edb8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801edbc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801edc0:	9203      	str	r2, [sp, #12]
 801edc2:	fa1f f288 	uxth.w	r2, r8
 801edc6:	9201      	str	r2, [sp, #4]
 801edc8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801edcc:	9200      	str	r2, [sp, #0]
 801edce:	4632      	mov	r2, r6
 801edd0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801edd2:	4621      	mov	r1, r4
 801edd4:	47a8      	blx	r5
 801edd6:	b011      	add	sp, #68	@ 0x44
 801edd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eddc:	6803      	ldr	r3, [r0, #0]
 801edde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ede0:	4798      	blx	r3
 801ede2:	f8ba 2000 	ldrh.w	r2, [sl]
 801ede6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801edea:	f04f 0e03 	mov.w	lr, #3
 801edee:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801edf2:	4355      	muls	r5, r2
 801edf4:	fa1f fc87 	uxth.w	ip, r7
 801edf8:	fb02 1303 	mla	r3, r2, r3, r1
 801edfc:	eba2 0208 	sub.w	r2, r2, r8
 801ee00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ee04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ee0c:	4418      	add	r0, r3
 801ee0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ee10:	1943      	adds	r3, r0, r5
 801ee12:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801ee16:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801ee1a:	eba2 0208 	sub.w	r2, r2, r8
 801ee1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ee22:	b2ad      	uxth	r5, r5
 801ee24:	4298      	cmp	r0, r3
 801ee26:	d24a      	bcs.n	801eebe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801ee28:	eb00 0908 	add.w	r9, r0, r8
 801ee2c:	4621      	mov	r1, r4
 801ee2e:	4548      	cmp	r0, r9
 801ee30:	460c      	mov	r4, r1
 801ee32:	d240      	bcs.n	801eeb6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ee34:	f04f 0a04 	mov.w	sl, #4
 801ee38:	7824      	ldrb	r4, [r4, #0]
 801ee3a:	2fff      	cmp	r7, #255	@ 0xff
 801ee3c:	f101 0101 	add.w	r1, r1, #1
 801ee40:	fb1e a404 	smlabb	r4, lr, r4, sl
 801ee44:	eb06 0a04 	add.w	sl, r6, r4
 801ee48:	f816 b004 	ldrb.w	fp, [r6, r4]
 801ee4c:	d02b      	beq.n	801eea6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801ee4e:	7804      	ldrb	r4, [r0, #0]
 801ee50:	fb14 f405 	smulbb	r4, r4, r5
 801ee54:	fb0b 440c 	mla	r4, fp, ip, r4
 801ee58:	b2a4      	uxth	r4, r4
 801ee5a:	f104 0b01 	add.w	fp, r4, #1
 801ee5e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ee62:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ee66:	fb1b fb05 	smulbb	fp, fp, r5
 801ee6a:	1224      	asrs	r4, r4, #8
 801ee6c:	7004      	strb	r4, [r0, #0]
 801ee6e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ee72:	fb04 b40c 	mla	r4, r4, ip, fp
 801ee76:	b2a4      	uxth	r4, r4
 801ee78:	f104 0b01 	add.w	fp, r4, #1
 801ee7c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ee80:	1224      	asrs	r4, r4, #8
 801ee82:	7044      	strb	r4, [r0, #1]
 801ee84:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ee88:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ee8c:	fb1a fa05 	smulbb	sl, sl, r5
 801ee90:	fb04 a40c 	mla	r4, r4, ip, sl
 801ee94:	b2a4      	uxth	r4, r4
 801ee96:	f104 0a01 	add.w	sl, r4, #1
 801ee9a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ee9e:	1224      	asrs	r4, r4, #8
 801eea0:	7084      	strb	r4, [r0, #2]
 801eea2:	3003      	adds	r0, #3
 801eea4:	e7c3      	b.n	801ee2e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801eea6:	f880 b000 	strb.w	fp, [r0]
 801eeaa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801eeae:	7044      	strb	r4, [r0, #1]
 801eeb0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801eeb4:	e7f4      	b.n	801eea0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801eeb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eeb8:	4420      	add	r0, r4
 801eeba:	188c      	adds	r4, r1, r2
 801eebc:	e7b2      	b.n	801ee24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801eebe:	4b03      	ldr	r3, [pc, #12]	@ (801eecc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801eec0:	6818      	ldr	r0, [r3, #0]
 801eec2:	6803      	ldr	r3, [r0, #0]
 801eec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eec6:	4798      	blx	r3
 801eec8:	e785      	b.n	801edd6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801eeca:	bf00      	nop
 801eecc:	2401bb38 	.word	0x2401bb38
 801eed0:	2401bb32 	.word	0x2401bb32

0801eed4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801eed4:	b4f0      	push	{r4, r5, r6, r7}
 801eed6:	460c      	mov	r4, r1
 801eed8:	4611      	mov	r1, r2
 801eeda:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801eede:	461a      	mov	r2, r3
 801eee0:	780f      	ldrb	r7, [r1, #0]
 801eee2:	9b04      	ldr	r3, [sp, #16]
 801eee4:	784e      	ldrb	r6, [r1, #1]
 801eee6:	b11f      	cbz	r7, 801eef0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801eee8:	2f01      	cmp	r7, #1
 801eeea:	d01d      	beq.n	801ef28 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801eeec:	bcf0      	pop	{r4, r5, r6, r7}
 801eeee:	4770      	bx	lr
 801eef0:	2e03      	cmp	r6, #3
 801eef2:	d8fb      	bhi.n	801eeec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801eef4:	e8df f006 	tbb	[pc, r6]
 801eef8:	16140702 	.word	0x16140702
 801eefc:	9504      	str	r5, [sp, #16]
 801eefe:	4620      	mov	r0, r4
 801ef00:	bcf0      	pop	{r4, r5, r6, r7}
 801ef02:	f7ff be33 	b.w	801eb6c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801ef06:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801ef08:	2800      	cmp	r0, #0
 801ef0a:	d0ef      	beq.n	801eeec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ef0c:	6806      	ldr	r6, [r0, #0]
 801ef0e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801ef12:	68f5      	ldr	r5, [r6, #12]
 801ef14:	4613      	mov	r3, r2
 801ef16:	46ac      	mov	ip, r5
 801ef18:	460a      	mov	r2, r1
 801ef1a:	4621      	mov	r1, r4
 801ef1c:	bcf0      	pop	{r4, r5, r6, r7}
 801ef1e:	4760      	bx	ip
 801ef20:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ef22:	e7f1      	b.n	801ef08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ef24:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801ef26:	e7ef      	b.n	801ef08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801ef28:	2e03      	cmp	r6, #3
 801ef2a:	d8df      	bhi.n	801eeec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ef2c:	e8df f006 	tbb	[pc, r6]
 801ef30:	110f0702 	.word	0x110f0702
 801ef34:	9504      	str	r5, [sp, #16]
 801ef36:	4620      	mov	r0, r4
 801ef38:	bcf0      	pop	{r4, r5, r6, r7}
 801ef3a:	f7ff beef 	b.w	801ed1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801ef3e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801ef40:	2800      	cmp	r0, #0
 801ef42:	d0d3      	beq.n	801eeec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801ef44:	6806      	ldr	r6, [r0, #0]
 801ef46:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801ef4a:	68b5      	ldr	r5, [r6, #8]
 801ef4c:	e7e2      	b.n	801ef14 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801ef4e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801ef50:	e7f6      	b.n	801ef40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801ef52:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801ef54:	e7f4      	b.n	801ef40 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801ef58 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801ef58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ef5c:	4605      	mov	r5, r0
 801ef5e:	b08f      	sub	sp, #60	@ 0x3c
 801ef60:	460c      	mov	r4, r1
 801ef62:	461f      	mov	r7, r3
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d052      	beq.n	801f00e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801ef68:	6808      	ldr	r0, [r1, #0]
 801ef6a:	ab0a      	add	r3, sp, #40	@ 0x28
 801ef6c:	6849      	ldr	r1, [r1, #4]
 801ef6e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801f138 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801ef72:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801f13c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801ef76:	c303      	stmia	r3!, {r0, r1}
 801ef78:	6810      	ldr	r0, [r2, #0]
 801ef7a:	ab0c      	add	r3, sp, #48	@ 0x30
 801ef7c:	6851      	ldr	r1, [r2, #4]
 801ef7e:	c303      	stmia	r3!, {r0, r1}
 801ef80:	a80a      	add	r0, sp, #40	@ 0x28
 801ef82:	f7f9 f905 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ef86:	4621      	mov	r1, r4
 801ef88:	a80c      	add	r0, sp, #48	@ 0x30
 801ef8a:	f7f9 f929 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ef8e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ef92:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ef96:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ef9a:	f8d8 0000 	ldr.w	r0, [r8]
 801ef9e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801efa2:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801efa6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801efaa:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801efae:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801efb2:	440a      	add	r2, r1
 801efb4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801efb8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801efbc:	4413      	add	r3, r2
 801efbe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801efc2:	6803      	ldr	r3, [r0, #0]
 801efc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801efc6:	4798      	blx	r3
 801efc8:	2fff      	cmp	r7, #255	@ 0xff
 801efca:	d023      	beq.n	801f014 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801efcc:	f010 0f04 	tst.w	r0, #4
 801efd0:	f8d8 0000 	ldr.w	r0, [r8]
 801efd4:	d021      	beq.n	801f01a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801efd6:	2100      	movs	r1, #0
 801efd8:	f04f 0e01 	mov.w	lr, #1
 801efdc:	f8d0 c000 	ldr.w	ip, [r0]
 801efe0:	b2a4      	uxth	r4, r4
 801efe2:	9106      	str	r1, [sp, #24]
 801efe4:	b2b6      	uxth	r6, r6
 801efe6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801efea:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801efee:	e9cd e107 	strd	lr, r1, [sp, #28]
 801eff2:	f8b9 e000 	ldrh.w	lr, [r9]
 801eff6:	9703      	str	r7, [sp, #12]
 801eff8:	9401      	str	r4, [sp, #4]
 801effa:	9600      	str	r6, [sp, #0]
 801effc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801f000:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801f004:	9102      	str	r1, [sp, #8]
 801f006:	4629      	mov	r1, r5
 801f008:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801f00c:	47a0      	blx	r4
 801f00e:	b00f      	add	sp, #60	@ 0x3c
 801f010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f014:	f010 0f01 	tst.w	r0, #1
 801f018:	e7da      	b.n	801efd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801f01a:	6803      	ldr	r3, [r0, #0]
 801f01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f01e:	4798      	blx	r3
 801f020:	f8b9 1000 	ldrh.w	r1, [r9]
 801f024:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801f028:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801f02c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f030:	434c      	muls	r4, r1
 801f032:	2fff      	cmp	r7, #255	@ 0xff
 801f034:	fb01 2303 	mla	r3, r1, r3, r2
 801f038:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f03c:	eba1 0106 	sub.w	r1, r1, r6
 801f040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f044:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f048:	4418      	add	r0, r3
 801f04a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f04e:	eba3 0606 	sub.w	r6, r3, r6
 801f052:	4404      	add	r4, r0
 801f054:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801f058:	d04a      	beq.n	801f0f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801f05a:	43fa      	mvns	r2, r7
 801f05c:	b2bb      	uxth	r3, r7
 801f05e:	b2d7      	uxtb	r7, r2
 801f060:	42a0      	cmp	r0, r4
 801f062:	d263      	bcs.n	801f12c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f064:	eb00 0e0c 	add.w	lr, r0, ip
 801f068:	4586      	cmp	lr, r0
 801f06a:	f100 0803 	add.w	r8, r0, #3
 801f06e:	d93a      	bls.n	801f0e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801f070:	f835 2b02 	ldrh.w	r2, [r5], #2
 801f074:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801f078:	00d0      	lsls	r0, r2, #3
 801f07a:	fb19 f907 	smulbb	r9, r9, r7
 801f07e:	b2c0      	uxtb	r0, r0
 801f080:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801f084:	fb00 9003 	mla	r0, r0, r3, r9
 801f088:	b280      	uxth	r0, r0
 801f08a:	f100 0901 	add.w	r9, r0, #1
 801f08e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f092:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801f096:	fb19 f907 	smulbb	r9, r9, r7
 801f09a:	1200      	asrs	r0, r0, #8
 801f09c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801f0a0:	10d0      	asrs	r0, r2, #3
 801f0a2:	1212      	asrs	r2, r2, #8
 801f0a4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801f0a8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801f0ac:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801f0b0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f0b4:	fb00 9003 	mla	r0, r0, r3, r9
 801f0b8:	b280      	uxth	r0, r0
 801f0ba:	f100 0901 	add.w	r9, r0, #1
 801f0be:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801f0c2:	1200      	asrs	r0, r0, #8
 801f0c4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801f0c8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801f0cc:	fb10 f007 	smulbb	r0, r0, r7
 801f0d0:	fb02 0203 	mla	r2, r2, r3, r0
 801f0d4:	b292      	uxth	r2, r2
 801f0d6:	1c50      	adds	r0, r2, #1
 801f0d8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f0dc:	4640      	mov	r0, r8
 801f0de:	1212      	asrs	r2, r2, #8
 801f0e0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801f0e4:	e7c0      	b.n	801f068 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801f0e6:	4408      	add	r0, r1
 801f0e8:	4435      	add	r5, r6
 801f0ea:	e7b9      	b.n	801f060 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801f0ec:	4408      	add	r0, r1
 801f0ee:	4435      	add	r5, r6
 801f0f0:	42a0      	cmp	r0, r4
 801f0f2:	d21b      	bcs.n	801f12c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801f0f4:	eb00 070c 	add.w	r7, r0, ip
 801f0f8:	42b8      	cmp	r0, r7
 801f0fa:	d2f7      	bcs.n	801f0ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801f0fc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801f100:	3003      	adds	r0, #3
 801f102:	00da      	lsls	r2, r3, #3
 801f104:	b2d2      	uxtb	r2, r2
 801f106:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f10a:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f10e:	10da      	asrs	r2, r3, #3
 801f110:	121b      	asrs	r3, r3, #8
 801f112:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801f116:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801f11a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801f11e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801f122:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f126:	f800 3c01 	strb.w	r3, [r0, #-1]
 801f12a:	e7e5      	b.n	801f0f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801f12c:	4b02      	ldr	r3, [pc, #8]	@ (801f138 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801f12e:	6818      	ldr	r0, [r3, #0]
 801f130:	6803      	ldr	r3, [r0, #0]
 801f132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f134:	4798      	blx	r3
 801f136:	e76a      	b.n	801f00e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801f138:	2401bb38 	.word	0x2401bb38
 801f13c:	2401bb32 	.word	0x2401bb32

0801f140 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f144:	b08a      	sub	sp, #40	@ 0x28
 801f146:	460d      	mov	r5, r1
 801f148:	4604      	mov	r4, r0
 801f14a:	461e      	mov	r6, r3
 801f14c:	6808      	ldr	r0, [r1, #0]
 801f14e:	ab06      	add	r3, sp, #24
 801f150:	6849      	ldr	r1, [r1, #4]
 801f152:	4f5d      	ldr	r7, [pc, #372]	@ (801f2c8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801f154:	c303      	stmia	r3!, {r0, r1}
 801f156:	6810      	ldr	r0, [r2, #0]
 801f158:	ab08      	add	r3, sp, #32
 801f15a:	6851      	ldr	r1, [r2, #4]
 801f15c:	c303      	stmia	r3!, {r0, r1}
 801f15e:	a806      	add	r0, sp, #24
 801f160:	f7f9 f816 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f164:	4629      	mov	r1, r5
 801f166:	a808      	add	r0, sp, #32
 801f168:	f7f9 f83a 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f16c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f170:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f174:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f178:	6838      	ldr	r0, [r7, #0]
 801f17a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f17e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f182:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801f186:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f18a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f18e:	440a      	add	r2, r1
 801f190:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f194:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f198:	4413      	add	r3, r2
 801f19a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801f19e:	6803      	ldr	r3, [r0, #0]
 801f1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1a2:	4798      	blx	r3
 801f1a4:	2eff      	cmp	r6, #255	@ 0xff
 801f1a6:	d119      	bne.n	801f1dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801f1a8:	f010 0f20 	tst.w	r0, #32
 801f1ac:	6838      	ldr	r0, [r7, #0]
 801f1ae:	d018      	beq.n	801f1e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801f1b0:	b2ad      	uxth	r5, r5
 801f1b2:	2700      	movs	r7, #0
 801f1b4:	6801      	ldr	r1, [r0, #0]
 801f1b6:	9501      	str	r5, [sp, #4]
 801f1b8:	fa1f f588 	uxth.w	r5, r8
 801f1bc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801f1c0:	9500      	str	r5, [sp, #0]
 801f1c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f1c6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801f1ca:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f1ce:	9602      	str	r6, [sp, #8]
 801f1d0:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801f1d2:	4621      	mov	r1, r4
 801f1d4:	47a8      	blx	r5
 801f1d6:	b00a      	add	sp, #40	@ 0x28
 801f1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f1dc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801f1e0:	e7e4      	b.n	801f1ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801f1e2:	6803      	ldr	r3, [r0, #0]
 801f1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1e6:	4798      	blx	r3
 801f1e8:	4b38      	ldr	r3, [pc, #224]	@ (801f2cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801f1ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f1ee:	f8b3 c000 	ldrh.w	ip, [r3]
 801f1f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801f1f6:	fb0c f505 	mul.w	r5, ip, r5
 801f1fa:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801f1fe:	fb0c 2303 	mla	r3, ip, r3, r2
 801f202:	ebac 0c08 	sub.w	ip, ip, r8
 801f206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f20a:	ebae 0e08 	sub.w	lr, lr, r8
 801f20e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f212:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f216:	4418      	add	r0, r3
 801f218:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801f21c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801f220:	4405      	add	r5, r0
 801f222:	42a8      	cmp	r0, r5
 801f224:	d24a      	bcs.n	801f2bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801f226:	eb00 0803 	add.w	r8, r0, r3
 801f22a:	4540      	cmp	r0, r8
 801f22c:	d243      	bcs.n	801f2b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801f22e:	78e2      	ldrb	r2, [r4, #3]
 801f230:	b15a      	cbz	r2, 801f24a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801f232:	2aff      	cmp	r2, #255	@ 0xff
 801f234:	f894 9000 	ldrb.w	r9, [r4]
 801f238:	d10a      	bne.n	801f250 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f23a:	2eff      	cmp	r6, #255	@ 0xff
 801f23c:	d108      	bne.n	801f250 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801f23e:	f880 9000 	strb.w	r9, [r0]
 801f242:	7862      	ldrb	r2, [r4, #1]
 801f244:	7042      	strb	r2, [r0, #1]
 801f246:	78a2      	ldrb	r2, [r4, #2]
 801f248:	7082      	strb	r2, [r0, #2]
 801f24a:	3003      	adds	r0, #3
 801f24c:	3404      	adds	r4, #4
 801f24e:	e7ec      	b.n	801f22a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801f250:	4372      	muls	r2, r6
 801f252:	1c51      	adds	r1, r2, #1
 801f254:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f258:	1209      	asrs	r1, r1, #8
 801f25a:	fa1f fa81 	uxth.w	sl, r1
 801f25e:	43c9      	mvns	r1, r1
 801f260:	fb19 f90a 	smulbb	r9, r9, sl
 801f264:	b2ca      	uxtb	r2, r1
 801f266:	7801      	ldrb	r1, [r0, #0]
 801f268:	fb01 9902 	mla	r9, r1, r2, r9
 801f26c:	fa1f f989 	uxth.w	r9, r9
 801f270:	f109 0101 	add.w	r1, r9, #1
 801f274:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801f278:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f27c:	f880 9000 	strb.w	r9, [r0]
 801f280:	f890 9001 	ldrb.w	r9, [r0, #1]
 801f284:	7861      	ldrb	r1, [r4, #1]
 801f286:	fb19 f902 	smulbb	r9, r9, r2
 801f28a:	fb01 910a 	mla	r1, r1, sl, r9
 801f28e:	b289      	uxth	r1, r1
 801f290:	f101 0901 	add.w	r9, r1, #1
 801f294:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801f298:	1209      	asrs	r1, r1, #8
 801f29a:	7041      	strb	r1, [r0, #1]
 801f29c:	7881      	ldrb	r1, [r0, #2]
 801f29e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f2a2:	fb11 f202 	smulbb	r2, r1, r2
 801f2a6:	fb09 220a 	mla	r2, r9, sl, r2
 801f2aa:	b292      	uxth	r2, r2
 801f2ac:	1c51      	adds	r1, r2, #1
 801f2ae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f2b2:	1212      	asrs	r2, r2, #8
 801f2b4:	e7c8      	b.n	801f248 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801f2b6:	4460      	add	r0, ip
 801f2b8:	4474      	add	r4, lr
 801f2ba:	e7b2      	b.n	801f222 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801f2bc:	6838      	ldr	r0, [r7, #0]
 801f2be:	6803      	ldr	r3, [r0, #0]
 801f2c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2c2:	4798      	blx	r3
 801f2c4:	e787      	b.n	801f1d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801f2c6:	bf00      	nop
 801f2c8:	2401bb38 	.word	0x2401bb38
 801f2cc:	2401bb32 	.word	0x2401bb32

0801f2d0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801f2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f2d4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801f2d8:	4607      	mov	r7, r0
 801f2da:	460c      	mov	r4, r1
 801f2dc:	4692      	mov	sl, r2
 801f2de:	4699      	mov	r9, r3
 801f2e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f2e2:	b31d      	cbz	r5, 801f32c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f2e4:	4608      	mov	r0, r1
 801f2e6:	f7fc fb89 	bl	801b9fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f2ea:	4680      	mov	r8, r0
 801f2ec:	4620      	mov	r0, r4
 801f2ee:	f7fc fbb9 	bl	801ba64 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f2f2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	f8ad a008 	strh.w	sl, [sp, #8]
 801f2fc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801f300:	f8ad 800c 	strh.w	r8, [sp, #12]
 801f304:	f7fc fcb8 	bl	801bc78 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f308:	280b      	cmp	r0, #11
 801f30a:	d80f      	bhi.n	801f32c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f30c:	e8df f000 	tbb	[pc, r0]
 801f310:	0e062a21 	.word	0x0e062a21
 801f314:	0e0e0e0e 	.word	0x0e0e0e0e
 801f318:	110e0e0e 	.word	0x110e0e0e
 801f31c:	4620      	mov	r0, r4
 801f31e:	f7fc fc27 	bl	801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f322:	462b      	mov	r3, r5
 801f324:	4632      	mov	r2, r6
 801f326:	a902      	add	r1, sp, #8
 801f328:	f7ff ff0a 	bl	801f140 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f32c:	b004      	add	sp, #16
 801f32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f332:	4620      	mov	r0, r4
 801f334:	f7fc fc1c 	bl	801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f338:	4680      	mov	r8, r0
 801f33a:	4620      	mov	r0, r4
 801f33c:	f7fc fc48 	bl	801bbd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801f340:	ab02      	add	r3, sp, #8
 801f342:	4602      	mov	r2, r0
 801f344:	4641      	mov	r1, r8
 801f346:	4638      	mov	r0, r7
 801f348:	e9cd 6500 	strd	r6, r5, [sp]
 801f34c:	f7ff fdc2 	bl	801eed4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801f350:	e7ec      	b.n	801f32c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f352:	4620      	mov	r0, r4
 801f354:	f7fc fc0c 	bl	801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f358:	462b      	mov	r3, r5
 801f35a:	4632      	mov	r2, r6
 801f35c:	a902      	add	r1, sp, #8
 801f35e:	f7ff fdfb 	bl	801ef58 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f362:	e7e3      	b.n	801f32c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801f364:	683b      	ldr	r3, [r7, #0]
 801f366:	4620      	mov	r0, r4
 801f368:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801f36c:	f7fc fc00 	bl	801bb70 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f370:	2300      	movs	r3, #0
 801f372:	4601      	mov	r1, r0
 801f374:	aa02      	add	r2, sp, #8
 801f376:	4638      	mov	r0, r7
 801f378:	e9cd 5300 	strd	r5, r3, [sp]
 801f37c:	4633      	mov	r3, r6
 801f37e:	47c0      	blx	r8
 801f380:	e7d4      	b.n	801f32c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801f382 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f382:	b4f0      	push	{r4, r5, r6, r7}
 801f384:	4616      	mov	r6, r2
 801f386:	461c      	mov	r4, r3
 801f388:	460d      	mov	r5, r1
 801f38a:	9a04      	ldr	r2, [sp, #16]
 801f38c:	2e01      	cmp	r6, #1
 801f38e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f392:	d00e      	beq.n	801f3b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801f394:	d303      	bcc.n	801f39e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801f396:	2e02      	cmp	r6, #2
 801f398:	d006      	beq.n	801f3a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801f39a:	bcf0      	pop	{r4, r5, r6, r7}
 801f39c:	4770      	bx	lr
 801f39e:	4621      	mov	r1, r4
 801f3a0:	4628      	mov	r0, r5
 801f3a2:	bcf0      	pop	{r4, r5, r6, r7}
 801f3a4:	f7ff bdd8 	b.w	801ef58 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801f3a8:	4621      	mov	r1, r4
 801f3aa:	4628      	mov	r0, r5
 801f3ac:	bcf0      	pop	{r4, r5, r6, r7}
 801f3ae:	f7ff bec7 	b.w	801f140 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f3b2:	6805      	ldr	r5, [r0, #0]
 801f3b4:	2600      	movs	r6, #0
 801f3b6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801f3ba:	68ed      	ldr	r5, [r5, #12]
 801f3bc:	4613      	mov	r3, r2
 801f3be:	4622      	mov	r2, r4
 801f3c0:	46ac      	mov	ip, r5
 801f3c2:	bcf0      	pop	{r4, r5, r6, r7}
 801f3c4:	4760      	bx	ip
	...

0801f3c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801f3c8:	b160      	cbz	r0, 801f3e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801f3ca:	2903      	cmp	r1, #3
 801f3cc:	d818      	bhi.n	801f400 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f3ce:	e8df f001 	tbb	[pc, r1]
 801f3d2:	1902      	.short	0x1902
 801f3d4:	1b06      	.short	0x1b06
 801f3d6:	4b0e      	ldr	r3, [pc, #56]	@ (801f410 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f3d8:	8818      	ldrh	r0, [r3, #0]
 801f3da:	4240      	negs	r0, r0
 801f3dc:	4770      	bx	lr
 801f3de:	4b0c      	ldr	r3, [pc, #48]	@ (801f410 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801f3e0:	8818      	ldrh	r0, [r3, #0]
 801f3e2:	4770      	bx	lr
 801f3e4:	2903      	cmp	r1, #3
 801f3e6:	d80b      	bhi.n	801f400 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801f3e8:	a301      	add	r3, pc, #4	@ (adr r3, 801f3f0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801f3ea:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f3ee:	bf00      	nop
 801f3f0:	0801f405 	.word	0x0801f405
 801f3f4:	0801f3df 	.word	0x0801f3df
 801f3f8:	0801f409 	.word	0x0801f409
 801f3fc:	0801f3d7 	.word	0x0801f3d7
 801f400:	2000      	movs	r0, #0
 801f402:	4770      	bx	lr
 801f404:	2001      	movs	r0, #1
 801f406:	4770      	bx	lr
 801f408:	f04f 30ff 	mov.w	r0, #4294967295
 801f40c:	4770      	bx	lr
 801f40e:	bf00      	nop
 801f410:	2401bb32 	.word	0x2401bb32

0801f414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801f414:	b160      	cbz	r0, 801f430 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801f416:	2903      	cmp	r1, #3
 801f418:	d818      	bhi.n	801f44c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f41a:	e8df f001 	tbb	[pc, r1]
 801f41e:	0219      	.short	0x0219
 801f420:	051b      	.short	0x051b
 801f422:	4b0e      	ldr	r3, [pc, #56]	@ (801f45c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f424:	8818      	ldrh	r0, [r3, #0]
 801f426:	4770      	bx	lr
 801f428:	4b0c      	ldr	r3, [pc, #48]	@ (801f45c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801f42a:	8818      	ldrh	r0, [r3, #0]
 801f42c:	4240      	negs	r0, r0
 801f42e:	4770      	bx	lr
 801f430:	2903      	cmp	r1, #3
 801f432:	d80b      	bhi.n	801f44c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801f434:	a301      	add	r3, pc, #4	@ (adr r3, 801f43c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801f436:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801f43a:	bf00      	nop
 801f43c:	0801f423 	.word	0x0801f423
 801f440:	0801f455 	.word	0x0801f455
 801f444:	0801f429 	.word	0x0801f429
 801f448:	0801f451 	.word	0x0801f451
 801f44c:	2000      	movs	r0, #0
 801f44e:	4770      	bx	lr
 801f450:	2001      	movs	r0, #1
 801f452:	4770      	bx	lr
 801f454:	f04f 30ff 	mov.w	r0, #4294967295
 801f458:	4770      	bx	lr
 801f45a:	bf00      	nop
 801f45c:	2401bb32 	.word	0x2401bb32

0801f460 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801f460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f464:	b097      	sub	sp, #92	@ 0x5c
 801f466:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f468:	a912      	add	r1, sp, #72	@ 0x48
 801f46a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801f46e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801f472:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801f476:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801f47a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801f47e:	e881 000c 	stmia.w	r1, {r2, r3}
 801f482:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801f486:	930a      	str	r3, [sp, #40]	@ 0x28
 801f488:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801f48c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801f490:	9311      	str	r3, [sp, #68]	@ 0x44
 801f492:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801f496:	798d      	ldrb	r5, [r1, #6]
 801f498:	930c      	str	r3, [sp, #48]	@ 0x30
 801f49a:	7b4b      	ldrb	r3, [r1, #13]
 801f49c:	0158      	lsls	r0, r3, #5
 801f49e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801f4a2:	4328      	orrs	r0, r5
 801f4a4:	9009      	str	r0, [sp, #36]	@ 0x24
 801f4a6:	f000 817c 	beq.w	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f4aa:	011b      	lsls	r3, r3, #4
 801f4ac:	79c8      	ldrb	r0, [r1, #7]
 801f4ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f4b2:	4303      	orrs	r3, r0
 801f4b4:	930e      	str	r3, [sp, #56]	@ 0x38
 801f4b6:	f000 8174 	beq.w	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f4ba:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801f4be:	b29b      	uxth	r3, r3
 801f4c0:	2f00      	cmp	r7, #0
 801f4c2:	f000 8116 	beq.w	801f6f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801f4c6:	1aff      	subs	r7, r7, r3
 801f4c8:	b2bf      	uxth	r7, r7
 801f4ca:	043b      	lsls	r3, r7, #16
 801f4cc:	d502      	bpl.n	801f4d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f4ce:	1bf6      	subs	r6, r6, r7
 801f4d0:	2700      	movs	r7, #0
 801f4d2:	b236      	sxth	r6, r6
 801f4d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f4d8:	a812      	add	r0, sp, #72	@ 0x48
 801f4da:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801f4de:	428e      	cmp	r6, r1
 801f4e0:	b28b      	uxth	r3, r1
 801f4e2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801f4e6:	bfbf      	itttt	lt
 801f4e8:	18ff      	addlt	r7, r7, r3
 801f4ea:	1bbe      	sublt	r6, r7, r6
 801f4ec:	b2b7      	uxthlt	r7, r6
 801f4ee:	460e      	movlt	r6, r1
 801f4f0:	8891      	ldrh	r1, [r2, #4]
 801f4f2:	440b      	add	r3, r1
 801f4f4:	4631      	mov	r1, r6
 801f4f6:	b21b      	sxth	r3, r3
 801f4f8:	9310      	str	r3, [sp, #64]	@ 0x40
 801f4fa:	88d3      	ldrh	r3, [r2, #6]
 801f4fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f4fe:	449a      	add	sl, r3
 801f500:	fa0f f38a 	sxth.w	r3, sl
 801f504:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f508:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f50a:	4bb5      	ldr	r3, [pc, #724]	@ (801f7e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801f50c:	f893 b000 	ldrb.w	fp, [r3]
 801f510:	f10b 3cff 	add.w	ip, fp, #4294967295
 801f514:	f1dc 0300 	rsbs	r3, ip, #0
 801f518:	eb43 030c 	adc.w	r3, r3, ip
 801f51c:	930d      	str	r3, [sp, #52]	@ 0x34
 801f51e:	464b      	mov	r3, r9
 801f520:	f7f8 fcab 	bl	8017e7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801f524:	4631      	mov	r1, r6
 801f526:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801f52a:	464b      	mov	r3, r9
 801f52c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f52e:	a812      	add	r0, sp, #72	@ 0x48
 801f530:	f7f8 fcc0 	bl	8017eb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801f534:	a916      	add	r1, sp, #88	@ 0x58
 801f536:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801f53a:	a815      	add	r0, sp, #84	@ 0x54
 801f53c:	f7f8 fde6 	bl	801810c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801f540:	f1b9 0f00 	cmp.w	r9, #0
 801f544:	f040 80d8 	bne.w	801f6f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801f548:	f1bb 0f01 	cmp.w	fp, #1
 801f54c:	f040 80dc 	bne.w	801f708 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801f550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f552:	b153      	cbz	r3, 801f56a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801f554:	2508      	movs	r5, #8
 801f556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f558:	fb95 f3f8 	sdiv	r3, r5, r8
 801f55c:	1e5d      	subs	r5, r3, #1
 801f55e:	4415      	add	r5, r2
 801f560:	fb95 f5f3 	sdiv	r5, r5, r3
 801f564:	fb15 f503 	smulbb	r5, r5, r3
 801f568:	b2ad      	uxth	r5, r5
 801f56a:	b907      	cbnz	r7, 801f56e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801f56c:	b16c      	cbz	r4, 801f58a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801f56e:	fb04 7305 	mla	r3, r4, r5, r7
 801f572:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f574:	ebaa 0a04 	sub.w	sl, sl, r4
 801f578:	fb08 f303 	mul.w	r3, r8, r3
 801f57c:	fa1f fa8a 	uxth.w	sl, sl
 801f580:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801f584:	f003 0407 	and.w	r4, r3, #7
 801f588:	9226      	str	r2, [sp, #152]	@ 0x98
 801f58a:	4649      	mov	r1, r9
 801f58c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f58e:	f7ff ff1b 	bl	801f3c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801f592:	4683      	mov	fp, r0
 801f594:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f596:	f7ff ff3d 	bl	801f414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801f59a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f59c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f59e:	4681      	mov	r9, r0
 801f5a0:	1a9b      	subs	r3, r3, r2
 801f5a2:	459a      	cmp	sl, r3
 801f5a4:	bfa8      	it	ge
 801f5a6:	469a      	movge	sl, r3
 801f5a8:	f1ba 0f00 	cmp.w	sl, #0
 801f5ac:	f340 80f9 	ble.w	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f5b0:	1bf6      	subs	r6, r6, r7
 801f5b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f5b4:	1b9e      	subs	r6, r3, r6
 801f5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5b8:	429e      	cmp	r6, r3
 801f5ba:	bfd4      	ite	le
 801f5bc:	ebc7 0706 	rsble	r7, r7, r6
 801f5c0:	ebc7 0703 	rsbgt	r7, r7, r3
 801f5c4:	2f00      	cmp	r7, #0
 801f5c6:	f340 80ec 	ble.w	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f5ca:	1bed      	subs	r5, r5, r7
 801f5cc:	fb08 f305 	mul.w	r3, r8, r5
 801f5d0:	930d      	str	r3, [sp, #52]	@ 0x34
 801f5d2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f5d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801f5d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801f5da:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f5dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f5e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f5e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f5e4:	b2db      	uxtb	r3, r3
 801f5e6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	f040 80de 	bne.w	801f7ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801f5f0:	4b7c      	ldr	r3, [pc, #496]	@ (801f7e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801f5f2:	6818      	ldr	r0, [r3, #0]
 801f5f4:	6803      	ldr	r3, [r0, #0]
 801f5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f5f8:	4798      	blx	r3
 801f5fa:	2301      	movs	r3, #1
 801f5fc:	4a7a      	ldr	r2, [pc, #488]	@ (801f7e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801f5fe:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801f602:	fb07 9b1b 	mls	fp, r7, fp, r9
 801f606:	fa03 f308 	lsl.w	r3, r3, r8
 801f60a:	8811      	ldrh	r1, [r2, #0]
 801f60c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801f610:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801f614:	3b01      	subs	r3, #1
 801f616:	fb06 bb07 	mla	fp, r6, r7, fp
 801f61a:	b2db      	uxtb	r3, r3
 801f61c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f61e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801f622:	fb01 2303 	mla	r3, r1, r3, r2
 801f626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f62a:	18c3      	adds	r3, r0, r3
 801f62c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f62e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f630:	781a      	ldrb	r2, [r3, #0]
 801f632:	4122      	asrs	r2, r4
 801f634:	b2d2      	uxtb	r2, r2
 801f636:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801f63a:	f0c0 80d7 	bcc.w	801f7ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801f63e:	46be      	mov	lr, r7
 801f640:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f642:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801f646:	f0c0 80ba 	bcc.w	801f7be <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801f64a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f64c:	4013      	ands	r3, r2
 801f64e:	d041      	beq.n	801f6d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801f650:	20ff      	movs	r0, #255	@ 0xff
 801f652:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f654:	fb90 f5f5 	sdiv	r5, r0, r5
 801f658:	436b      	muls	r3, r5
 801f65a:	2bfe      	cmp	r3, #254	@ 0xfe
 801f65c:	dd03      	ble.n	801f666 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801f65e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f660:	4285      	cmp	r5, r0
 801f662:	f000 80a5 	beq.w	801f7b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801f666:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f668:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f66a:	fb15 f303 	smulbb	r3, r5, r3
 801f66e:	b29b      	uxth	r3, r3
 801f670:	1c5d      	adds	r5, r3, #1
 801f672:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801f676:	780d      	ldrb	r5, [r1, #0]
 801f678:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f67c:	fa1f fc83 	uxth.w	ip, r3
 801f680:	43db      	mvns	r3, r3
 801f682:	fb10 f90c 	smulbb	r9, r0, ip
 801f686:	b2db      	uxtb	r3, r3
 801f688:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f68a:	fb05 9503 	mla	r5, r5, r3, r9
 801f68e:	b2ad      	uxth	r5, r5
 801f690:	f105 0901 	add.w	r9, r5, #1
 801f694:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f698:	fb10 f90c 	smulbb	r9, r0, ip
 801f69c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f69e:	122d      	asrs	r5, r5, #8
 801f6a0:	fb10 fc0c 	smulbb	ip, r0, ip
 801f6a4:	700d      	strb	r5, [r1, #0]
 801f6a6:	784d      	ldrb	r5, [r1, #1]
 801f6a8:	fb05 9503 	mla	r5, r5, r3, r9
 801f6ac:	b2ad      	uxth	r5, r5
 801f6ae:	f105 0901 	add.w	r9, r5, #1
 801f6b2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801f6b6:	122d      	asrs	r5, r5, #8
 801f6b8:	704d      	strb	r5, [r1, #1]
 801f6ba:	788d      	ldrb	r5, [r1, #2]
 801f6bc:	fb05 cc03 	mla	ip, r5, r3, ip
 801f6c0:	fa1f fc8c 	uxth.w	ip, ip
 801f6c4:	f10c 0301 	add.w	r3, ip, #1
 801f6c8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f6cc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f6d0:	f881 c002 	strb.w	ip, [r1, #2]
 801f6d4:	4444      	add	r4, r8
 801f6d6:	4431      	add	r1, r6
 801f6d8:	b2a4      	uxth	r4, r4
 801f6da:	2c07      	cmp	r4, #7
 801f6dc:	bf89      	itett	hi
 801f6de:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801f6e0:	fa42 f208 	asrls.w	r2, r2, r8
 801f6e4:	2400      	movhi	r4, #0
 801f6e6:	785a      	ldrbhi	r2, [r3, #1]
 801f6e8:	bf8a      	itet	hi
 801f6ea:	3301      	addhi	r3, #1
 801f6ec:	b2d2      	uxtbls	r2, r2
 801f6ee:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801f6f0:	e7a7      	b.n	801f642 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f6f2:	441e      	add	r6, r3
 801f6f4:	b236      	sxth	r6, r6
 801f6f6:	e6ed      	b.n	801f4d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801f6f8:	f1b9 0f01 	cmp.w	r9, #1
 801f6fc:	f47f af28 	bne.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f700:	f1bb 0f01 	cmp.w	fp, #1
 801f704:	f47f af24 	bne.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f708:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801f7e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801f70c:	f8db 0000 	ldr.w	r0, [fp]
 801f710:	6803      	ldr	r3, [r0, #0]
 801f712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f714:	4798      	blx	r3
 801f716:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801f71a:	465a      	mov	r2, fp
 801f71c:	d006      	beq.n	801f72c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801f71e:	f1b8 0f04 	cmp.w	r8, #4
 801f722:	d141      	bne.n	801f7a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801f724:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f726:	3300      	adds	r3, #0
 801f728:	bf18      	it	ne
 801f72a:	2301      	movne	r3, #1
 801f72c:	0580      	lsls	r0, r0, #22
 801f72e:	d566      	bpl.n	801f7fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801f730:	f1b8 0f08 	cmp.w	r8, #8
 801f734:	d163      	bne.n	801f7fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801f736:	2b00      	cmp	r3, #0
 801f738:	bf0c      	ite	eq
 801f73a:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801f73e:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801f742:	2f00      	cmp	r7, #0
 801f744:	f47f af04 	bne.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f748:	2c00      	cmp	r4, #0
 801f74a:	f47f af01 	bne.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f750:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f752:	18f3      	adds	r3, r6, r3
 801f754:	4283      	cmp	r3, r0
 801f756:	f73f aefb 	bgt.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f75a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f75c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f75e:	4403      	add	r3, r0
 801f760:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f762:	4283      	cmp	r3, r0
 801f764:	f73f aef4 	bgt.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f768:	f1b8 0f08 	cmp.w	r8, #8
 801f76c:	6810      	ldr	r0, [r2, #0]
 801f76e:	f04f 0600 	mov.w	r6, #0
 801f772:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801f776:	bf18      	it	ne
 801f778:	3501      	addne	r5, #1
 801f77a:	6804      	ldr	r4, [r0, #0]
 801f77c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801f780:	bf18      	it	ne
 801f782:	f025 0501 	bicne.w	r5, r5, #1
 801f786:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801f78a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f78c:	bf18      	it	ne
 801f78e:	b2ad      	uxthne	r5, r5
 801f790:	9104      	str	r1, [sp, #16]
 801f792:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f794:	e9cd 5a00 	strd	r5, sl, [sp]
 801f798:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801f79c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801f79e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801f7a0:	47a0      	blx	r4
 801f7a2:	b017      	add	sp, #92	@ 0x5c
 801f7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7a8:	2300      	movs	r3, #0
 801f7aa:	e7bf      	b.n	801f72c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801f7ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f7ae:	e724      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801f7b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f7b2:	700b      	strb	r3, [r1, #0]
 801f7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7b6:	704b      	strb	r3, [r1, #1]
 801f7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7ba:	708b      	strb	r3, [r1, #2]
 801f7bc:	e78a      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801f7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7c0:	b153      	cbz	r3, 801f7d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801f7c2:	441c      	add	r4, r3
 801f7c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f7c6:	b2a4      	uxth	r4, r4
 801f7c8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801f7cc:	f004 0407 	and.w	r4, r4, #7
 801f7d0:	781a      	ldrb	r2, [r3, #0]
 801f7d2:	9326      	str	r3, [sp, #152]	@ 0x98
 801f7d4:	4122      	asrs	r2, r4
 801f7d6:	b2d2      	uxtb	r2, r2
 801f7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7da:	445b      	add	r3, fp
 801f7dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7de:	e72a      	b.n	801f636 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801f7e0:	2401bb30 	.word	0x2401bb30
 801f7e4:	2401bb38 	.word	0x2401bb38
 801f7e8:	2401bb32 	.word	0x2401bb32
 801f7ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d1d7      	bne.n	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f7f2:	4b06      	ldr	r3, [pc, #24]	@ (801f80c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801f7f4:	6818      	ldr	r0, [r3, #0]
 801f7f6:	6803      	ldr	r3, [r0, #0]
 801f7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f7fa:	4798      	blx	r3
 801f7fc:	e7d1      	b.n	801f7a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	f43f aea6 	beq.w	801f550 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801f804:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801f808:	e79b      	b.n	801f742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801f80a:	bf00      	nop
 801f80c:	2401bb38 	.word	0x2401bb38

0801f810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801f810:	b538      	push	{r3, r4, r5, lr}
 801f812:	4c15      	ldr	r4, [pc, #84]	@ (801f868 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801f814:	4605      	mov	r5, r0
 801f816:	7823      	ldrb	r3, [r4, #0]
 801f818:	f3bf 8f5b 	dmb	ish
 801f81c:	07da      	lsls	r2, r3, #31
 801f81e:	d40b      	bmi.n	801f838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f820:	4620      	mov	r0, r4
 801f822:	f005 fb6c 	bl	8024efe <__cxa_guard_acquire>
 801f826:	b138      	cbz	r0, 801f838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801f828:	4620      	mov	r0, r4
 801f82a:	f005 fb74 	bl	8024f16 <__cxa_guard_release>
 801f82e:	4a0f      	ldr	r2, [pc, #60]	@ (801f86c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f830:	490f      	ldr	r1, [pc, #60]	@ (801f870 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801f832:	4810      	ldr	r0, [pc, #64]	@ (801f874 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f834:	f005 fb5c 	bl	8024ef0 <__aeabi_atexit>
 801f838:	4c0f      	ldr	r4, [pc, #60]	@ (801f878 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801f83a:	7823      	ldrb	r3, [r4, #0]
 801f83c:	f3bf 8f5b 	dmb	ish
 801f840:	07db      	lsls	r3, r3, #31
 801f842:	d40b      	bmi.n	801f85c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f844:	4620      	mov	r0, r4
 801f846:	f005 fb5a 	bl	8024efe <__cxa_guard_acquire>
 801f84a:	b138      	cbz	r0, 801f85c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801f84c:	4620      	mov	r0, r4
 801f84e:	f005 fb62 	bl	8024f16 <__cxa_guard_release>
 801f852:	4a06      	ldr	r2, [pc, #24]	@ (801f86c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801f854:	4909      	ldr	r1, [pc, #36]	@ (801f87c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801f856:	480a      	ldr	r0, [pc, #40]	@ (801f880 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f858:	f005 fb4a 	bl	8024ef0 <__aeabi_atexit>
 801f85c:	4b05      	ldr	r3, [pc, #20]	@ (801f874 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801f85e:	616b      	str	r3, [r5, #20]
 801f860:	4b07      	ldr	r3, [pc, #28]	@ (801f880 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801f862:	61ab      	str	r3, [r5, #24]
 801f864:	bd38      	pop	{r3, r4, r5, pc}
 801f866:	bf00      	nop
 801f868:	2401bc10 	.word	0x2401bc10
 801f86c:	24000000 	.word	0x24000000
 801f870:	0801d655 	.word	0x0801d655
 801f874:	2400009c 	.word	0x2400009c
 801f878:	2401bc14 	.word	0x2401bc14
 801f87c:	0801d653 	.word	0x0801d653
 801f880:	240000a0 	.word	0x240000a0

0801f884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801f884:	b538      	push	{r3, r4, r5, lr}
 801f886:	4c15      	ldr	r4, [pc, #84]	@ (801f8dc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801f888:	4605      	mov	r5, r0
 801f88a:	7823      	ldrb	r3, [r4, #0]
 801f88c:	f3bf 8f5b 	dmb	ish
 801f890:	07da      	lsls	r2, r3, #31
 801f892:	d40b      	bmi.n	801f8ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f894:	4620      	mov	r0, r4
 801f896:	f005 fb32 	bl	8024efe <__cxa_guard_acquire>
 801f89a:	b138      	cbz	r0, 801f8ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f89c:	4620      	mov	r0, r4
 801f89e:	f005 fb3a 	bl	8024f16 <__cxa_guard_release>
 801f8a2:	4a0f      	ldr	r2, [pc, #60]	@ (801f8e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f8a4:	490f      	ldr	r1, [pc, #60]	@ (801f8e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f8a6:	4810      	ldr	r0, [pc, #64]	@ (801f8e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f8a8:	f005 fb22 	bl	8024ef0 <__aeabi_atexit>
 801f8ac:	4c0f      	ldr	r4, [pc, #60]	@ (801f8ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f8ae:	7823      	ldrb	r3, [r4, #0]
 801f8b0:	f3bf 8f5b 	dmb	ish
 801f8b4:	07db      	lsls	r3, r3, #31
 801f8b6:	d40b      	bmi.n	801f8d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	f005 fb20 	bl	8024efe <__cxa_guard_acquire>
 801f8be:	b138      	cbz	r0, 801f8d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f8c0:	4620      	mov	r0, r4
 801f8c2:	f005 fb28 	bl	8024f16 <__cxa_guard_release>
 801f8c6:	4a06      	ldr	r2, [pc, #24]	@ (801f8e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f8c8:	4909      	ldr	r1, [pc, #36]	@ (801f8f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f8ca:	480a      	ldr	r0, [pc, #40]	@ (801f8f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f8cc:	f005 fb10 	bl	8024ef0 <__aeabi_atexit>
 801f8d0:	4b05      	ldr	r3, [pc, #20]	@ (801f8e8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f8d2:	60eb      	str	r3, [r5, #12]
 801f8d4:	4b07      	ldr	r3, [pc, #28]	@ (801f8f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f8d6:	612b      	str	r3, [r5, #16]
 801f8d8:	bd38      	pop	{r3, r4, r5, pc}
 801f8da:	bf00      	nop
 801f8dc:	2401bbf0 	.word	0x2401bbf0
 801f8e0:	24000000 	.word	0x24000000
 801f8e4:	0801d659 	.word	0x0801d659
 801f8e8:	2400007c 	.word	0x2400007c
 801f8ec:	2401bbf4 	.word	0x2401bbf4
 801f8f0:	0801d657 	.word	0x0801d657
 801f8f4:	24000080 	.word	0x24000080

0801f8f8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f8f8:	b510      	push	{r4, lr}
 801f8fa:	4604      	mov	r4, r0
 801f8fc:	f7ff ff88 	bl	801f810 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f900:	4620      	mov	r0, r4
 801f902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f906:	f7ff bfbd 	b.w	801f884 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f90c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f90c:	b538      	push	{r3, r4, r5, lr}
 801f90e:	4c15      	ldr	r4, [pc, #84]	@ (801f964 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f910:	4605      	mov	r5, r0
 801f912:	7823      	ldrb	r3, [r4, #0]
 801f914:	f3bf 8f5b 	dmb	ish
 801f918:	07da      	lsls	r2, r3, #31
 801f91a:	d40b      	bmi.n	801f934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f91c:	4620      	mov	r0, r4
 801f91e:	f005 faee 	bl	8024efe <__cxa_guard_acquire>
 801f922:	b138      	cbz	r0, 801f934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f924:	4620      	mov	r0, r4
 801f926:	f005 faf6 	bl	8024f16 <__cxa_guard_release>
 801f92a:	4a0f      	ldr	r2, [pc, #60]	@ (801f968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f92c:	490f      	ldr	r1, [pc, #60]	@ (801f96c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f92e:	4810      	ldr	r0, [pc, #64]	@ (801f970 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f930:	f005 fade 	bl	8024ef0 <__aeabi_atexit>
 801f934:	4c0f      	ldr	r4, [pc, #60]	@ (801f974 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f936:	7823      	ldrb	r3, [r4, #0]
 801f938:	f3bf 8f5b 	dmb	ish
 801f93c:	07db      	lsls	r3, r3, #31
 801f93e:	d40b      	bmi.n	801f958 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f940:	4620      	mov	r0, r4
 801f942:	f005 fadc 	bl	8024efe <__cxa_guard_acquire>
 801f946:	b138      	cbz	r0, 801f958 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f948:	4620      	mov	r0, r4
 801f94a:	f005 fae4 	bl	8024f16 <__cxa_guard_release>
 801f94e:	4a06      	ldr	r2, [pc, #24]	@ (801f968 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f950:	4909      	ldr	r1, [pc, #36]	@ (801f978 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f952:	480a      	ldr	r0, [pc, #40]	@ (801f97c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f954:	f005 facc 	bl	8024ef0 <__aeabi_atexit>
 801f958:	4b05      	ldr	r3, [pc, #20]	@ (801f970 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f95a:	626b      	str	r3, [r5, #36]	@ 0x24
 801f95c:	4b07      	ldr	r3, [pc, #28]	@ (801f97c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f95e:	62ab      	str	r3, [r5, #40]	@ 0x28
 801f960:	bd38      	pop	{r3, r4, r5, pc}
 801f962:	bf00      	nop
 801f964:	2401bc18 	.word	0x2401bc18
 801f968:	24000000 	.word	0x24000000
 801f96c:	0801d64d 	.word	0x0801d64d
 801f970:	240000a4 	.word	0x240000a4
 801f974:	2401bc1c 	.word	0x2401bc1c
 801f978:	0801d64b 	.word	0x0801d64b
 801f97c:	240000a8 	.word	0x240000a8

0801f980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f980:	b538      	push	{r3, r4, r5, lr}
 801f982:	4c15      	ldr	r4, [pc, #84]	@ (801f9d8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f984:	4605      	mov	r5, r0
 801f986:	7823      	ldrb	r3, [r4, #0]
 801f988:	f3bf 8f5b 	dmb	ish
 801f98c:	07da      	lsls	r2, r3, #31
 801f98e:	d40b      	bmi.n	801f9a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f990:	4620      	mov	r0, r4
 801f992:	f005 fab4 	bl	8024efe <__cxa_guard_acquire>
 801f996:	b138      	cbz	r0, 801f9a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f998:	4620      	mov	r0, r4
 801f99a:	f005 fabc 	bl	8024f16 <__cxa_guard_release>
 801f99e:	4a0f      	ldr	r2, [pc, #60]	@ (801f9dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f9a0:	490f      	ldr	r1, [pc, #60]	@ (801f9e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f9a2:	4810      	ldr	r0, [pc, #64]	@ (801f9e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f9a4:	f005 faa4 	bl	8024ef0 <__aeabi_atexit>
 801f9a8:	4c0f      	ldr	r4, [pc, #60]	@ (801f9e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f9aa:	7823      	ldrb	r3, [r4, #0]
 801f9ac:	f3bf 8f5b 	dmb	ish
 801f9b0:	07db      	lsls	r3, r3, #31
 801f9b2:	d40b      	bmi.n	801f9cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f9b4:	4620      	mov	r0, r4
 801f9b6:	f005 faa2 	bl	8024efe <__cxa_guard_acquire>
 801f9ba:	b138      	cbz	r0, 801f9cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f9bc:	4620      	mov	r0, r4
 801f9be:	f005 faaa 	bl	8024f16 <__cxa_guard_release>
 801f9c2:	4a06      	ldr	r2, [pc, #24]	@ (801f9dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f9c4:	4909      	ldr	r1, [pc, #36]	@ (801f9ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f9c6:	480a      	ldr	r0, [pc, #40]	@ (801f9f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f9c8:	f005 fa92 	bl	8024ef0 <__aeabi_atexit>
 801f9cc:	4b05      	ldr	r3, [pc, #20]	@ (801f9e4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f9ce:	61eb      	str	r3, [r5, #28]
 801f9d0:	4b07      	ldr	r3, [pc, #28]	@ (801f9f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f9d2:	622b      	str	r3, [r5, #32]
 801f9d4:	bd38      	pop	{r3, r4, r5, pc}
 801f9d6:	bf00      	nop
 801f9d8:	2401bbf8 	.word	0x2401bbf8
 801f9dc:	24000000 	.word	0x24000000
 801f9e0:	0801d651 	.word	0x0801d651
 801f9e4:	24000084 	.word	0x24000084
 801f9e8:	2401bbfc 	.word	0x2401bbfc
 801f9ec:	0801d64f 	.word	0x0801d64f
 801f9f0:	24000088 	.word	0x24000088

0801f9f4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f9f4:	b510      	push	{r4, lr}
 801f9f6:	4604      	mov	r4, r0
 801f9f8:	f7ff ff88 	bl	801f90c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f9fc:	4620      	mov	r0, r4
 801f9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa02:	f7ff bfbd 	b.w	801f980 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801fa08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801fa08:	b538      	push	{r3, r4, r5, lr}
 801fa0a:	4c15      	ldr	r4, [pc, #84]	@ (801fa60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801fa0c:	4605      	mov	r5, r0
 801fa0e:	7823      	ldrb	r3, [r4, #0]
 801fa10:	f3bf 8f5b 	dmb	ish
 801fa14:	07da      	lsls	r2, r3, #31
 801fa16:	d40b      	bmi.n	801fa30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fa18:	4620      	mov	r0, r4
 801fa1a:	f005 fa70 	bl	8024efe <__cxa_guard_acquire>
 801fa1e:	b138      	cbz	r0, 801fa30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801fa20:	4620      	mov	r0, r4
 801fa22:	f005 fa78 	bl	8024f16 <__cxa_guard_release>
 801fa26:	4a0f      	ldr	r2, [pc, #60]	@ (801fa64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fa28:	490f      	ldr	r1, [pc, #60]	@ (801fa68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801fa2a:	4810      	ldr	r0, [pc, #64]	@ (801fa6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fa2c:	f005 fa60 	bl	8024ef0 <__aeabi_atexit>
 801fa30:	4c0f      	ldr	r4, [pc, #60]	@ (801fa70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801fa32:	7823      	ldrb	r3, [r4, #0]
 801fa34:	f3bf 8f5b 	dmb	ish
 801fa38:	07db      	lsls	r3, r3, #31
 801fa3a:	d40b      	bmi.n	801fa54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fa3c:	4620      	mov	r0, r4
 801fa3e:	f005 fa5e 	bl	8024efe <__cxa_guard_acquire>
 801fa42:	b138      	cbz	r0, 801fa54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801fa44:	4620      	mov	r0, r4
 801fa46:	f005 fa66 	bl	8024f16 <__cxa_guard_release>
 801fa4a:	4a06      	ldr	r2, [pc, #24]	@ (801fa64 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801fa4c:	4909      	ldr	r1, [pc, #36]	@ (801fa74 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801fa4e:	480a      	ldr	r0, [pc, #40]	@ (801fa78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fa50:	f005 fa4e 	bl	8024ef0 <__aeabi_atexit>
 801fa54:	4b05      	ldr	r3, [pc, #20]	@ (801fa6c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801fa56:	636b      	str	r3, [r5, #52]	@ 0x34
 801fa58:	4b07      	ldr	r3, [pc, #28]	@ (801fa78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801fa5a:	63ab      	str	r3, [r5, #56]	@ 0x38
 801fa5c:	bd38      	pop	{r3, r4, r5, pc}
 801fa5e:	bf00      	nop
 801fa60:	2401bc00 	.word	0x2401bc00
 801fa64:	24000000 	.word	0x24000000
 801fa68:	0801d645 	.word	0x0801d645
 801fa6c:	2400008c 	.word	0x2400008c
 801fa70:	2401bc04 	.word	0x2401bc04
 801fa74:	0801d643 	.word	0x0801d643
 801fa78:	24000090 	.word	0x24000090

0801fa7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801fa7c:	b538      	push	{r3, r4, r5, lr}
 801fa7e:	4c15      	ldr	r4, [pc, #84]	@ (801fad4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801fa80:	4605      	mov	r5, r0
 801fa82:	7823      	ldrb	r3, [r4, #0]
 801fa84:	f3bf 8f5b 	dmb	ish
 801fa88:	07da      	lsls	r2, r3, #31
 801fa8a:	d40b      	bmi.n	801faa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fa8c:	4620      	mov	r0, r4
 801fa8e:	f005 fa36 	bl	8024efe <__cxa_guard_acquire>
 801fa92:	b138      	cbz	r0, 801faa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801fa94:	4620      	mov	r0, r4
 801fa96:	f005 fa3e 	bl	8024f16 <__cxa_guard_release>
 801fa9a:	4a0f      	ldr	r2, [pc, #60]	@ (801fad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fa9c:	490f      	ldr	r1, [pc, #60]	@ (801fadc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801fa9e:	4810      	ldr	r0, [pc, #64]	@ (801fae0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801faa0:	f005 fa26 	bl	8024ef0 <__aeabi_atexit>
 801faa4:	4c0f      	ldr	r4, [pc, #60]	@ (801fae4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801faa6:	7823      	ldrb	r3, [r4, #0]
 801faa8:	f3bf 8f5b 	dmb	ish
 801faac:	07db      	lsls	r3, r3, #31
 801faae:	d40b      	bmi.n	801fac8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fab0:	4620      	mov	r0, r4
 801fab2:	f005 fa24 	bl	8024efe <__cxa_guard_acquire>
 801fab6:	b138      	cbz	r0, 801fac8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801fab8:	4620      	mov	r0, r4
 801faba:	f005 fa2c 	bl	8024f16 <__cxa_guard_release>
 801fabe:	4a06      	ldr	r2, [pc, #24]	@ (801fad8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801fac0:	4909      	ldr	r1, [pc, #36]	@ (801fae8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801fac2:	480a      	ldr	r0, [pc, #40]	@ (801faec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801fac4:	f005 fa14 	bl	8024ef0 <__aeabi_atexit>
 801fac8:	4b05      	ldr	r3, [pc, #20]	@ (801fae0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801faca:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801facc:	4b07      	ldr	r3, [pc, #28]	@ (801faec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801face:	632b      	str	r3, [r5, #48]	@ 0x30
 801fad0:	bd38      	pop	{r3, r4, r5, pc}
 801fad2:	bf00      	nop
 801fad4:	2401bbd8 	.word	0x2401bbd8
 801fad8:	24000000 	.word	0x24000000
 801fadc:	0801d649 	.word	0x0801d649
 801fae0:	24000064 	.word	0x24000064
 801fae4:	2401bbdc 	.word	0x2401bbdc
 801fae8:	0801d647 	.word	0x0801d647
 801faec:	24000068 	.word	0x24000068

0801faf0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801faf0:	b510      	push	{r4, lr}
 801faf2:	4604      	mov	r4, r0
 801faf4:	f7ff ff88 	bl	801fa08 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801faf8:	4620      	mov	r0, r4
 801fafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fafe:	f7ff bfbd 	b.w	801fa7c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801fb04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801fb04:	b538      	push	{r3, r4, r5, lr}
 801fb06:	4c15      	ldr	r4, [pc, #84]	@ (801fb5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801fb08:	4605      	mov	r5, r0
 801fb0a:	7823      	ldrb	r3, [r4, #0]
 801fb0c:	f3bf 8f5b 	dmb	ish
 801fb10:	07da      	lsls	r2, r3, #31
 801fb12:	d40b      	bmi.n	801fb2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fb14:	4620      	mov	r0, r4
 801fb16:	f005 f9f2 	bl	8024efe <__cxa_guard_acquire>
 801fb1a:	b138      	cbz	r0, 801fb2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f005 f9fa 	bl	8024f16 <__cxa_guard_release>
 801fb22:	4a0f      	ldr	r2, [pc, #60]	@ (801fb60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fb24:	490f      	ldr	r1, [pc, #60]	@ (801fb64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801fb26:	4810      	ldr	r0, [pc, #64]	@ (801fb68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fb28:	f005 f9e2 	bl	8024ef0 <__aeabi_atexit>
 801fb2c:	4c0f      	ldr	r4, [pc, #60]	@ (801fb6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801fb2e:	7823      	ldrb	r3, [r4, #0]
 801fb30:	f3bf 8f5b 	dmb	ish
 801fb34:	07db      	lsls	r3, r3, #31
 801fb36:	d40b      	bmi.n	801fb50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fb38:	4620      	mov	r0, r4
 801fb3a:	f005 f9e0 	bl	8024efe <__cxa_guard_acquire>
 801fb3e:	b138      	cbz	r0, 801fb50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801fb40:	4620      	mov	r0, r4
 801fb42:	f005 f9e8 	bl	8024f16 <__cxa_guard_release>
 801fb46:	4a06      	ldr	r2, [pc, #24]	@ (801fb60 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801fb48:	4909      	ldr	r1, [pc, #36]	@ (801fb70 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801fb4a:	480a      	ldr	r0, [pc, #40]	@ (801fb74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fb4c:	f005 f9d0 	bl	8024ef0 <__aeabi_atexit>
 801fb50:	4b05      	ldr	r3, [pc, #20]	@ (801fb68 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801fb52:	646b      	str	r3, [r5, #68]	@ 0x44
 801fb54:	4b07      	ldr	r3, [pc, #28]	@ (801fb74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801fb56:	64ab      	str	r3, [r5, #72]	@ 0x48
 801fb58:	bd38      	pop	{r3, r4, r5, pc}
 801fb5a:	bf00      	nop
 801fb5c:	2401bc08 	.word	0x2401bc08
 801fb60:	24000000 	.word	0x24000000
 801fb64:	0801d63d 	.word	0x0801d63d
 801fb68:	24000094 	.word	0x24000094
 801fb6c:	2401bc0c 	.word	0x2401bc0c
 801fb70:	0801d63b 	.word	0x0801d63b
 801fb74:	24000098 	.word	0x24000098

0801fb78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801fb78:	b538      	push	{r3, r4, r5, lr}
 801fb7a:	4c15      	ldr	r4, [pc, #84]	@ (801fbd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801fb7c:	4605      	mov	r5, r0
 801fb7e:	7823      	ldrb	r3, [r4, #0]
 801fb80:	f3bf 8f5b 	dmb	ish
 801fb84:	07da      	lsls	r2, r3, #31
 801fb86:	d40b      	bmi.n	801fba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fb88:	4620      	mov	r0, r4
 801fb8a:	f005 f9b8 	bl	8024efe <__cxa_guard_acquire>
 801fb8e:	b138      	cbz	r0, 801fba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801fb90:	4620      	mov	r0, r4
 801fb92:	f005 f9c0 	bl	8024f16 <__cxa_guard_release>
 801fb96:	4a0f      	ldr	r2, [pc, #60]	@ (801fbd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fb98:	490f      	ldr	r1, [pc, #60]	@ (801fbd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801fb9a:	4810      	ldr	r0, [pc, #64]	@ (801fbdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fb9c:	f005 f9a8 	bl	8024ef0 <__aeabi_atexit>
 801fba0:	4c0f      	ldr	r4, [pc, #60]	@ (801fbe0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801fba2:	7823      	ldrb	r3, [r4, #0]
 801fba4:	f3bf 8f5b 	dmb	ish
 801fba8:	07db      	lsls	r3, r3, #31
 801fbaa:	d40b      	bmi.n	801fbc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fbac:	4620      	mov	r0, r4
 801fbae:	f005 f9a6 	bl	8024efe <__cxa_guard_acquire>
 801fbb2:	b138      	cbz	r0, 801fbc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801fbb4:	4620      	mov	r0, r4
 801fbb6:	f005 f9ae 	bl	8024f16 <__cxa_guard_release>
 801fbba:	4a06      	ldr	r2, [pc, #24]	@ (801fbd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801fbbc:	4909      	ldr	r1, [pc, #36]	@ (801fbe4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801fbbe:	480a      	ldr	r0, [pc, #40]	@ (801fbe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fbc0:	f005 f996 	bl	8024ef0 <__aeabi_atexit>
 801fbc4:	4b05      	ldr	r3, [pc, #20]	@ (801fbdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801fbc6:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801fbc8:	4b07      	ldr	r3, [pc, #28]	@ (801fbe8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801fbca:	642b      	str	r3, [r5, #64]	@ 0x40
 801fbcc:	bd38      	pop	{r3, r4, r5, pc}
 801fbce:	bf00      	nop
 801fbd0:	2401bbe8 	.word	0x2401bbe8
 801fbd4:	24000000 	.word	0x24000000
 801fbd8:	0801d641 	.word	0x0801d641
 801fbdc:	24000074 	.word	0x24000074
 801fbe0:	2401bbec 	.word	0x2401bbec
 801fbe4:	0801d63f 	.word	0x0801d63f
 801fbe8:	24000078 	.word	0x24000078

0801fbec <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801fbec:	b510      	push	{r4, lr}
 801fbee:	4604      	mov	r4, r0
 801fbf0:	f7ff ff88 	bl	801fb04 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fbfa:	f7ff bfbd 	b.w	801fb78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801fc00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801fc00:	b538      	push	{r3, r4, r5, lr}
 801fc02:	4c15      	ldr	r4, [pc, #84]	@ (801fc58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801fc04:	4605      	mov	r5, r0
 801fc06:	7823      	ldrb	r3, [r4, #0]
 801fc08:	f3bf 8f5b 	dmb	ish
 801fc0c:	07da      	lsls	r2, r3, #31
 801fc0e:	d40b      	bmi.n	801fc28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fc10:	4620      	mov	r0, r4
 801fc12:	f005 f974 	bl	8024efe <__cxa_guard_acquire>
 801fc16:	b138      	cbz	r0, 801fc28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801fc18:	4620      	mov	r0, r4
 801fc1a:	f005 f97c 	bl	8024f16 <__cxa_guard_release>
 801fc1e:	4a0f      	ldr	r2, [pc, #60]	@ (801fc5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fc20:	490f      	ldr	r1, [pc, #60]	@ (801fc60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801fc22:	4810      	ldr	r0, [pc, #64]	@ (801fc64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fc24:	f005 f964 	bl	8024ef0 <__aeabi_atexit>
 801fc28:	4c0f      	ldr	r4, [pc, #60]	@ (801fc68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801fc2a:	7823      	ldrb	r3, [r4, #0]
 801fc2c:	f3bf 8f5b 	dmb	ish
 801fc30:	07db      	lsls	r3, r3, #31
 801fc32:	d40b      	bmi.n	801fc4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fc34:	4620      	mov	r0, r4
 801fc36:	f005 f962 	bl	8024efe <__cxa_guard_acquire>
 801fc3a:	b138      	cbz	r0, 801fc4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801fc3c:	4620      	mov	r0, r4
 801fc3e:	f005 f96a 	bl	8024f16 <__cxa_guard_release>
 801fc42:	4a06      	ldr	r2, [pc, #24]	@ (801fc5c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801fc44:	4909      	ldr	r1, [pc, #36]	@ (801fc6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801fc46:	480a      	ldr	r0, [pc, #40]	@ (801fc70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fc48:	f005 f952 	bl	8024ef0 <__aeabi_atexit>
 801fc4c:	4b05      	ldr	r3, [pc, #20]	@ (801fc64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801fc4e:	656b      	str	r3, [r5, #84]	@ 0x54
 801fc50:	4b07      	ldr	r3, [pc, #28]	@ (801fc70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801fc52:	65ab      	str	r3, [r5, #88]	@ 0x58
 801fc54:	bd38      	pop	{r3, r4, r5, pc}
 801fc56:	bf00      	nop
 801fc58:	2401bbe0 	.word	0x2401bbe0
 801fc5c:	24000000 	.word	0x24000000
 801fc60:	0801d635 	.word	0x0801d635
 801fc64:	2400006c 	.word	0x2400006c
 801fc68:	2401bbe4 	.word	0x2401bbe4
 801fc6c:	0801d633 	.word	0x0801d633
 801fc70:	24000070 	.word	0x24000070

0801fc74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801fc74:	b538      	push	{r3, r4, r5, lr}
 801fc76:	4c15      	ldr	r4, [pc, #84]	@ (801fccc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801fc78:	4605      	mov	r5, r0
 801fc7a:	7823      	ldrb	r3, [r4, #0]
 801fc7c:	f3bf 8f5b 	dmb	ish
 801fc80:	07da      	lsls	r2, r3, #31
 801fc82:	d40b      	bmi.n	801fc9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fc84:	4620      	mov	r0, r4
 801fc86:	f005 f93a 	bl	8024efe <__cxa_guard_acquire>
 801fc8a:	b138      	cbz	r0, 801fc9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801fc8c:	4620      	mov	r0, r4
 801fc8e:	f005 f942 	bl	8024f16 <__cxa_guard_release>
 801fc92:	4a0f      	ldr	r2, [pc, #60]	@ (801fcd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fc94:	490f      	ldr	r1, [pc, #60]	@ (801fcd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801fc96:	4810      	ldr	r0, [pc, #64]	@ (801fcd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fc98:	f005 f92a 	bl	8024ef0 <__aeabi_atexit>
 801fc9c:	4c0f      	ldr	r4, [pc, #60]	@ (801fcdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801fc9e:	7823      	ldrb	r3, [r4, #0]
 801fca0:	f3bf 8f5b 	dmb	ish
 801fca4:	07db      	lsls	r3, r3, #31
 801fca6:	d40b      	bmi.n	801fcc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fca8:	4620      	mov	r0, r4
 801fcaa:	f005 f928 	bl	8024efe <__cxa_guard_acquire>
 801fcae:	b138      	cbz	r0, 801fcc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	f005 f930 	bl	8024f16 <__cxa_guard_release>
 801fcb6:	4a06      	ldr	r2, [pc, #24]	@ (801fcd0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801fcb8:	4909      	ldr	r1, [pc, #36]	@ (801fce0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801fcba:	480a      	ldr	r0, [pc, #40]	@ (801fce4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fcbc:	f005 f918 	bl	8024ef0 <__aeabi_atexit>
 801fcc0:	4b05      	ldr	r3, [pc, #20]	@ (801fcd8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801fcc2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801fcc4:	4b07      	ldr	r3, [pc, #28]	@ (801fce4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801fcc6:	652b      	str	r3, [r5, #80]	@ 0x50
 801fcc8:	bd38      	pop	{r3, r4, r5, pc}
 801fcca:	bf00      	nop
 801fccc:	2401bbd0 	.word	0x2401bbd0
 801fcd0:	24000000 	.word	0x24000000
 801fcd4:	0801d639 	.word	0x0801d639
 801fcd8:	2400005c 	.word	0x2400005c
 801fcdc:	2401bbd4 	.word	0x2401bbd4
 801fce0:	0801d637 	.word	0x0801d637
 801fce4:	24000060 	.word	0x24000060

0801fce8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801fce8:	b510      	push	{r4, lr}
 801fcea:	4604      	mov	r4, r0
 801fcec:	f7ff ff88 	bl	801fc00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801fcf0:	4620      	mov	r0, r4
 801fcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcf6:	f7ff bfbd 	b.w	801fc74 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801fcfa <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801fcfa:	b510      	push	{r4, lr}
 801fcfc:	4604      	mov	r4, r0
 801fcfe:	f7ff fff3 	bl	801fce8 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801fd02:	4620      	mov	r0, r4
 801fd04:	f7ff ff72 	bl	801fbec <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801fd08:	4620      	mov	r0, r4
 801fd0a:	f7ff fe73 	bl	801f9f4 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801fd0e:	4620      	mov	r0, r4
 801fd10:	f7ff fdf2 	bl	801f8f8 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801fd14:	4620      	mov	r0, r4
 801fd16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd1a:	f7ff bee9 	b.w	801faf0 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801fd20 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801fd20:	b538      	push	{r3, r4, r5, lr}
 801fd22:	4c0b      	ldr	r4, [pc, #44]	@ (801fd50 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801fd24:	4605      	mov	r5, r0
 801fd26:	7823      	ldrb	r3, [r4, #0]
 801fd28:	f3bf 8f5b 	dmb	ish
 801fd2c:	07db      	lsls	r3, r3, #31
 801fd2e:	d40b      	bmi.n	801fd48 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801fd30:	4620      	mov	r0, r4
 801fd32:	f005 f8e4 	bl	8024efe <__cxa_guard_acquire>
 801fd36:	b138      	cbz	r0, 801fd48 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801fd38:	4620      	mov	r0, r4
 801fd3a:	f005 f8ec 	bl	8024f16 <__cxa_guard_release>
 801fd3e:	4a05      	ldr	r2, [pc, #20]	@ (801fd54 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801fd40:	4905      	ldr	r1, [pc, #20]	@ (801fd58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801fd42:	4806      	ldr	r0, [pc, #24]	@ (801fd5c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801fd44:	f005 f8d4 	bl	8024ef0 <__aeabi_atexit>
 801fd48:	4b04      	ldr	r3, [pc, #16]	@ (801fd5c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801fd4a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801fd4c:	bd38      	pop	{r3, r4, r5, pc}
 801fd4e:	bf00      	nop
 801fd50:	2401bbc4 	.word	0x2401bbc4
 801fd54:	24000000 	.word	0x24000000
 801fd58:	0801d631 	.word	0x0801d631
 801fd5c:	24000054 	.word	0x24000054

0801fd60 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801fd60:	b538      	push	{r3, r4, r5, lr}
 801fd62:	4c0b      	ldr	r4, [pc, #44]	@ (801fd90 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801fd64:	4605      	mov	r5, r0
 801fd66:	7823      	ldrb	r3, [r4, #0]
 801fd68:	f3bf 8f5b 	dmb	ish
 801fd6c:	07db      	lsls	r3, r3, #31
 801fd6e:	d40b      	bmi.n	801fd88 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801fd70:	4620      	mov	r0, r4
 801fd72:	f005 f8c4 	bl	8024efe <__cxa_guard_acquire>
 801fd76:	b138      	cbz	r0, 801fd88 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801fd78:	4620      	mov	r0, r4
 801fd7a:	f005 f8cc 	bl	8024f16 <__cxa_guard_release>
 801fd7e:	4a05      	ldr	r2, [pc, #20]	@ (801fd94 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801fd80:	4905      	ldr	r1, [pc, #20]	@ (801fd98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801fd82:	4806      	ldr	r0, [pc, #24]	@ (801fd9c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801fd84:	f005 f8b4 	bl	8024ef0 <__aeabi_atexit>
 801fd88:	4b04      	ldr	r3, [pc, #16]	@ (801fd9c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801fd8a:	662b      	str	r3, [r5, #96]	@ 0x60
 801fd8c:	bd38      	pop	{r3, r4, r5, pc}
 801fd8e:	bf00      	nop
 801fd90:	2401bbc8 	.word	0x2401bbc8
 801fd94:	24000000 	.word	0x24000000
 801fd98:	0801d62f 	.word	0x0801d62f
 801fd9c:	24000058 	.word	0x24000058

0801fda0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801fda0:	b570      	push	{r4, r5, r6, lr}
 801fda2:	4d0c      	ldr	r5, [pc, #48]	@ (801fdd4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801fda4:	4606      	mov	r6, r0
 801fda6:	4c0c      	ldr	r4, [pc, #48]	@ (801fdd8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801fda8:	782b      	ldrb	r3, [r5, #0]
 801fdaa:	f3bf 8f5b 	dmb	ish
 801fdae:	f013 0f01 	tst.w	r3, #1
 801fdb2:	d10d      	bne.n	801fdd0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801fdb4:	4628      	mov	r0, r5
 801fdb6:	f005 f8a2 	bl	8024efe <__cxa_guard_acquire>
 801fdba:	b148      	cbz	r0, 801fdd0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801fdbc:	4b07      	ldr	r3, [pc, #28]	@ (801fddc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801fdbe:	4628      	mov	r0, r5
 801fdc0:	6023      	str	r3, [r4, #0]
 801fdc2:	f005 f8a8 	bl	8024f16 <__cxa_guard_release>
 801fdc6:	4a06      	ldr	r2, [pc, #24]	@ (801fde0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801fdc8:	4620      	mov	r0, r4
 801fdca:	4906      	ldr	r1, [pc, #24]	@ (801fde4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801fdcc:	f005 f890 	bl	8024ef0 <__aeabi_atexit>
 801fdd0:	6674      	str	r4, [r6, #100]	@ 0x64
 801fdd2:	bd70      	pop	{r4, r5, r6, pc}
 801fdd4:	2401bbcc 	.word	0x2401bbcc
 801fdd8:	2401bc20 	.word	0x2401bc20
 801fddc:	08028678 	.word	0x08028678
 801fde0:	24000000 	.word	0x24000000
 801fde4:	0801d62d 	.word	0x0801d62d

0801fde8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801fde8:	b510      	push	{r4, lr}
 801fdea:	4604      	mov	r4, r0
 801fdec:	f7ff ff98 	bl	801fd20 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801fdf0:	4620      	mov	r0, r4
 801fdf2:	f7ff ffb5 	bl	801fd60 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801fdf6:	4620      	mov	r0, r4
 801fdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fdfc:	f7ff bfd0 	b.w	801fda0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801fe00 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe04:	b087      	sub	sp, #28
 801fe06:	788d      	ldrb	r5, [r1, #2]
 801fe08:	f891 9000 	ldrb.w	r9, [r1]
 801fe0c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801fe10:	9501      	str	r5, [sp, #4]
 801fe12:	784d      	ldrb	r5, [r1, #1]
 801fe14:	9203      	str	r2, [sp, #12]
 801fe16:	9502      	str	r5, [sp, #8]
 801fe18:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801fe1c:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801fe20:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801fe24:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801fe28:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801fe2c:	fb06 0708 	mla	r7, r6, r8, r0
 801fe30:	2e00      	cmp	r6, #0
 801fe32:	eb02 0a07 	add.w	sl, r2, r7
 801fe36:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801fe3a:	9d01      	ldr	r5, [sp, #4]
 801fe3c:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801fe40:	ea45 0509 	orr.w	r5, r5, r9
 801fe44:	9505      	str	r5, [sp, #20]
 801fe46:	f2c0 80b2 	blt.w	801ffae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801fe4a:	45b3      	cmp	fp, r6
 801fe4c:	f340 80af 	ble.w	801ffae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801fe50:	2800      	cmp	r0, #0
 801fe52:	f2c0 80aa 	blt.w	801ffaa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801fe56:	4580      	cmp	r8, r0
 801fe58:	f340 80a7 	ble.w	801ffaa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801fe5c:	9a03      	ldr	r2, [sp, #12]
 801fe5e:	5dd7      	ldrb	r7, [r2, r7]
 801fe60:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fe64:	441f      	add	r7, r3
 801fe66:	1c42      	adds	r2, r0, #1
 801fe68:	f100 80a4 	bmi.w	801ffb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fe6c:	4590      	cmp	r8, r2
 801fe6e:	f340 80a1 	ble.w	801ffb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fe72:	2c00      	cmp	r4, #0
 801fe74:	f000 809e 	beq.w	801ffb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801fe78:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801fe7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fe80:	441d      	add	r5, r3
 801fe82:	3601      	adds	r6, #1
 801fe84:	f100 809a 	bmi.w	801ffbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fe88:	45b3      	cmp	fp, r6
 801fe8a:	f340 8097 	ble.w	801ffbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fe8e:	f1bc 0f00 	cmp.w	ip, #0
 801fe92:	f000 8093 	beq.w	801ffbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801fe96:	2800      	cmp	r0, #0
 801fe98:	f2c0 808e 	blt.w	801ffb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801fe9c:	4580      	cmp	r8, r0
 801fe9e:	f340 808b 	ble.w	801ffb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801fea2:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801fea6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801feaa:	441e      	add	r6, r3
 801feac:	3001      	adds	r0, #1
 801feae:	f100 8088 	bmi.w	801ffc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801feb2:	4580      	cmp	r8, r0
 801feb4:	f340 8085 	ble.w	801ffc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801feb8:	2c00      	cmp	r4, #0
 801feba:	f000 8082 	beq.w	801ffc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801febe:	44d0      	add	r8, sl
 801fec0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fec4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fec8:	4413      	add	r3, r2
 801feca:	b2a4      	uxth	r4, r4
 801fecc:	f895 a000 	ldrb.w	sl, [r5]
 801fed0:	fa1f fc8c 	uxth.w	ip, ip
 801fed4:	fb04 fb0c 	mul.w	fp, r4, ip
 801fed8:	0124      	lsls	r4, r4, #4
 801feda:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801fede:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801fee2:	eba4 040b 	sub.w	r4, r4, fp
 801fee6:	fa1f f08c 	uxth.w	r0, ip
 801feea:	b2a2      	uxth	r2, r4
 801feec:	783c      	ldrb	r4, [r7, #0]
 801feee:	eba8 0800 	sub.w	r8, r8, r0
 801fef2:	fa1f fc8e 	uxth.w	ip, lr
 801fef6:	fb02 fa0a 	mul.w	sl, r2, sl
 801fefa:	ea6f 0e0e 	mvn.w	lr, lr
 801fefe:	fa1f f888 	uxth.w	r8, r8
 801ff02:	fa5f fe8e 	uxtb.w	lr, lr
 801ff06:	fb08 aa04 	mla	sl, r8, r4, sl
 801ff0a:	7834      	ldrb	r4, [r6, #0]
 801ff0c:	fb19 f90e 	smulbb	r9, r9, lr
 801ff10:	fb00 aa04 	mla	sl, r0, r4, sl
 801ff14:	781c      	ldrb	r4, [r3, #0]
 801ff16:	fb0b a404 	mla	r4, fp, r4, sl
 801ff1a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ff1e:	fb04 990c 	mla	r9, r4, ip, r9
 801ff22:	fa1f f989 	uxth.w	r9, r9
 801ff26:	f109 0401 	add.w	r4, r9, #1
 801ff2a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ff2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff32:	f881 9000 	strb.w	r9, [r1]
 801ff36:	f895 9001 	ldrb.w	r9, [r5, #1]
 801ff3a:	787c      	ldrb	r4, [r7, #1]
 801ff3c:	fb02 f909 	mul.w	r9, r2, r9
 801ff40:	fb08 9904 	mla	r9, r8, r4, r9
 801ff44:	7874      	ldrb	r4, [r6, #1]
 801ff46:	fb00 9904 	mla	r9, r0, r4, r9
 801ff4a:	785c      	ldrb	r4, [r3, #1]
 801ff4c:	fb0b 9404 	mla	r4, fp, r4, r9
 801ff50:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801ff54:	9c02      	ldr	r4, [sp, #8]
 801ff56:	fb14 f90e 	smulbb	r9, r4, lr
 801ff5a:	fb0a 940c 	mla	r4, sl, ip, r9
 801ff5e:	b2a4      	uxth	r4, r4
 801ff60:	f104 0901 	add.w	r9, r4, #1
 801ff64:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801ff68:	1224      	asrs	r4, r4, #8
 801ff6a:	704c      	strb	r4, [r1, #1]
 801ff6c:	78ad      	ldrb	r5, [r5, #2]
 801ff6e:	78bc      	ldrb	r4, [r7, #2]
 801ff70:	436a      	muls	r2, r5
 801ff72:	789b      	ldrb	r3, [r3, #2]
 801ff74:	fb08 2204 	mla	r2, r8, r4, r2
 801ff78:	78b4      	ldrb	r4, [r6, #2]
 801ff7a:	fb00 2004 	mla	r0, r0, r4, r2
 801ff7e:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ff82:	9b01      	ldr	r3, [sp, #4]
 801ff84:	fb13 fe0e 	smulbb	lr, r3, lr
 801ff88:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ff8c:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ff90:	fa1f fc8c 	uxth.w	ip, ip
 801ff94:	f10c 0e01 	add.w	lr, ip, #1
 801ff98:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ff9c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ffa0:	f881 c002 	strb.w	ip, [r1, #2]
 801ffa4:	b007      	add	sp, #28
 801ffa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffaa:	af05      	add	r7, sp, #20
 801ffac:	e75b      	b.n	801fe66 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ffae:	ad05      	add	r5, sp, #20
 801ffb0:	462f      	mov	r7, r5
 801ffb2:	e766      	b.n	801fe82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ffb4:	ad05      	add	r5, sp, #20
 801ffb6:	e764      	b.n	801fe82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ffb8:	ae05      	add	r6, sp, #20
 801ffba:	e777      	b.n	801feac <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ffbc:	ab05      	add	r3, sp, #20
 801ffbe:	461e      	mov	r6, r3
 801ffc0:	e783      	b.n	801feca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ffc2:	ab05      	add	r3, sp, #20
 801ffc4:	e781      	b.n	801feca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ffc6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ffc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffca:	b093      	sub	sp, #76	@ 0x4c
 801ffcc:	9210      	str	r2, [sp, #64]	@ 0x40
 801ffce:	9309      	str	r3, [sp, #36]	@ 0x24
 801ffd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ffd2:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801ffd6:	9011      	str	r0, [sp, #68]	@ 0x44
 801ffd8:	930e      	str	r3, [sp, #56]	@ 0x38
 801ffda:	6850      	ldr	r0, [r2, #4]
 801ffdc:	910d      	str	r1, [sp, #52]	@ 0x34
 801ffde:	6812      	ldr	r2, [r2, #0]
 801ffe0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ffe4:	fb00 1303 	mla	r3, r0, r3, r1
 801ffe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffec:	18d3      	adds	r3, r2, r3
 801ffee:	930a      	str	r3, [sp, #40]	@ 0x28
 801fff0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	930c      	str	r3, [sp, #48]	@ 0x30
 801fff6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fff8:	685c      	ldr	r4, [r3, #4]
 801fffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fffc:	3404      	adds	r4, #4
 801fffe:	43db      	mvns	r3, r3
 8020000:	b2db      	uxtb	r3, r3
 8020002:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020006:	2b00      	cmp	r3, #0
 8020008:	dc03      	bgt.n	8020012 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802000a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802000c:	2b00      	cmp	r3, #0
 802000e:	f340 8250 	ble.w	80204b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8020012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020014:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020018:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802001c:	1e48      	subs	r0, r1, #1
 802001e:	1e55      	subs	r5, r2, #1
 8020020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020022:	2b00      	cmp	r3, #0
 8020024:	f340 80ee 	ble.w	8020204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8020028:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 802002a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802002c:	1436      	asrs	r6, r6, #16
 802002e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020032:	d406      	bmi.n	8020042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020034:	4286      	cmp	r6, r0
 8020036:	da04      	bge.n	8020042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020038:	2b00      	cmp	r3, #0
 802003a:	db02      	blt.n	8020042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802003c:	42ab      	cmp	r3, r5
 802003e:	f2c0 80e2 	blt.w	8020206 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8020042:	3601      	adds	r6, #1
 8020044:	f100 80cf 	bmi.w	80201e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020048:	42b1      	cmp	r1, r6
 802004a:	f2c0 80cc 	blt.w	80201e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802004e:	3301      	adds	r3, #1
 8020050:	f100 80c9 	bmi.w	80201e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8020054:	429a      	cmp	r2, r3
 8020056:	f2c0 80c6 	blt.w	80201e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802005a:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 802005e:	f1bb 0f00 	cmp.w	fp, #0
 8020062:	f340 80f1 	ble.w	8020248 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020066:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020068:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802006a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 802006c:	141d      	asrs	r5, r3, #16
 802006e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020070:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020074:	68c7      	ldr	r7, [r0, #12]
 8020076:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020078:	1418      	asrs	r0, r3, #16
 802007a:	f3c3 3803 	ubfx	r8, r3, #12, #4
 802007e:	6892      	ldr	r2, [r2, #8]
 8020080:	f100 8137 	bmi.w	80202f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020084:	f102 3cff 	add.w	ip, r2, #4294967295
 8020088:	4560      	cmp	r0, ip
 802008a:	f280 8132 	bge.w	80202f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802008e:	2d00      	cmp	r5, #0
 8020090:	f2c0 812f 	blt.w	80202f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8020094:	f107 3cff 	add.w	ip, r7, #4294967295
 8020098:	4565      	cmp	r5, ip
 802009a:	f280 812a 	bge.w	80202f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802009e:	b212      	sxth	r2, r2
 80200a0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80200a2:	fb05 0002 	mla	r0, r5, r2, r0
 80200a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80200a8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80200ac:	4405      	add	r5, r0
 80200ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80200b2:	eb04 0e0c 	add.w	lr, r4, ip
 80200b6:	f1b8 0f00 	cmp.w	r8, #0
 80200ba:	f000 810c 	beq.w	80202d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 80200be:	786f      	ldrb	r7, [r5, #1]
 80200c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80200c4:	4427      	add	r7, r4
 80200c6:	2900      	cmp	r1, #0
 80200c8:	f000 810d 	beq.w	80202e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 80200cc:	18a8      	adds	r0, r5, r2
 80200ce:	5caa      	ldrb	r2, [r5, r2]
 80200d0:	7840      	ldrb	r0, [r0, #1]
 80200d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200da:	4422      	add	r2, r4
 80200dc:	4420      	add	r0, r4
 80200de:	fa1f f388 	uxth.w	r3, r8
 80200e2:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80200e6:	b289      	uxth	r1, r1
 80200e8:	f897 c000 	ldrb.w	ip, [r7]
 80200ec:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80200f0:	fb03 f901 	mul.w	r9, r3, r1
 80200f4:	011b      	lsls	r3, r3, #4
 80200f6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80200fa:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80200fe:	eba3 0309 	sub.w	r3, r3, r9
 8020102:	b289      	uxth	r1, r1
 8020104:	b29b      	uxth	r3, r3
 8020106:	eba8 0801 	sub.w	r8, r8, r1
 802010a:	fb03 fc0c 	mul.w	ip, r3, ip
 802010e:	fa1f f888 	uxth.w	r8, r8
 8020112:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020116:	fb08 cc0a 	mla	ip, r8, sl, ip
 802011a:	f892 a000 	ldrb.w	sl, [r2]
 802011e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8020122:	f890 a000 	ldrb.w	sl, [r0]
 8020126:	fb09 cc0a 	mla	ip, r9, sl, ip
 802012a:	f896 a000 	ldrb.w	sl, [r6]
 802012e:	fb1a fa03 	smulbb	sl, sl, r3
 8020132:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8020136:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020138:	fb0c ac05 	mla	ip, ip, r5, sl
 802013c:	fa1f fc8c 	uxth.w	ip, ip
 8020140:	f10c 0a01 	add.w	sl, ip, #1
 8020144:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020148:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 802014c:	f886 a000 	strb.w	sl, [r6]
 8020150:	f897 c001 	ldrb.w	ip, [r7, #1]
 8020154:	f89e a001 	ldrb.w	sl, [lr, #1]
 8020158:	fb03 fc0c 	mul.w	ip, r3, ip
 802015c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802015e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8020162:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020166:	fb01 cc0a 	mla	ip, r1, sl, ip
 802016a:	f890 a001 	ldrb.w	sl, [r0, #1]
 802016e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8020172:	f896 a001 	ldrb.w	sl, [r6, #1]
 8020176:	fb1a fa03 	smulbb	sl, sl, r3
 802017a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802017e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020180:	fb0c ac05 	mla	ip, ip, r5, sl
 8020184:	fa1f fc8c 	uxth.w	ip, ip
 8020188:	f10c 0a01 	add.w	sl, ip, #1
 802018c:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8020190:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020194:	f886 c001 	strb.w	ip, [r6, #1]
 8020198:	78bf      	ldrb	r7, [r7, #2]
 802019a:	f89e c002 	ldrb.w	ip, [lr, #2]
 802019e:	437b      	muls	r3, r7
 80201a0:	fb08 330c 	mla	r3, r8, ip, r3
 80201a4:	f892 c002 	ldrb.w	ip, [r2, #2]
 80201a8:	7882      	ldrb	r2, [r0, #2]
 80201aa:	fb01 310c 	mla	r1, r1, ip, r3
 80201ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201b0:	fb09 1902 	mla	r9, r9, r2, r1
 80201b4:	78b1      	ldrb	r1, [r6, #2]
 80201b6:	fb11 f103 	smulbb	r1, r1, r3
 80201ba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80201be:	fb09 1505 	mla	r5, r9, r5, r1
 80201c2:	b2ad      	uxth	r5, r5
 80201c4:	1c6b      	adds	r3, r5, #1
 80201c6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80201ca:	122d      	asrs	r5, r5, #8
 80201cc:	70b5      	strb	r5, [r6, #2]
 80201ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80201d0:	3603      	adds	r6, #3
 80201d2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80201d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80201d8:	4413      	add	r3, r2
 80201da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80201dc:	931d      	str	r3, [sp, #116]	@ 0x74
 80201de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201e0:	4413      	add	r3, r2
 80201e2:	931e      	str	r3, [sp, #120]	@ 0x78
 80201e4:	e73b      	b.n	802005e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80201e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80201e8:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80201ea:	4433      	add	r3, r6
 80201ec:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80201ee:	931d      	str	r3, [sp, #116]	@ 0x74
 80201f0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80201f2:	4433      	add	r3, r6
 80201f4:	931e      	str	r3, [sp, #120]	@ 0x78
 80201f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201f8:	3b01      	subs	r3, #1
 80201fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80201fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201fe:	3303      	adds	r3, #3
 8020200:	930a      	str	r3, [sp, #40]	@ 0x28
 8020202:	e70d      	b.n	8020020 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020204:	d028      	beq.n	8020258 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020208:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802020a:	3b01      	subs	r3, #1
 802020c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802020e:	fb00 5003 	mla	r0, r0, r3, r5
 8020212:	1400      	asrs	r0, r0, #16
 8020214:	f53f af21 	bmi.w	802005a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020218:	3901      	subs	r1, #1
 802021a:	4288      	cmp	r0, r1
 802021c:	f6bf af1d 	bge.w	802005a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020220:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8020222:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8020224:	fb01 0303 	mla	r3, r1, r3, r0
 8020228:	141b      	asrs	r3, r3, #16
 802022a:	f53f af16 	bmi.w	802005a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802022e:	3a01      	subs	r2, #1
 8020230:	4293      	cmp	r3, r2
 8020232:	f6bf af12 	bge.w	802005a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020238:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 802023c:	1cdf      	adds	r7, r3, #3
 802023e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8020242:	f1b9 0f00 	cmp.w	r9, #0
 8020246:	dc73      	bgt.n	8020330 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802024a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802024c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020250:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020254:	441a      	add	r2, r3
 8020256:	920a      	str	r2, [sp, #40]	@ 0x28
 8020258:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802025a:	2b00      	cmp	r3, #0
 802025c:	f340 8129 	ble.w	80204b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8020260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020264:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020266:	ee30 0a04 	vadd.f32	s0, s0, s8
 802026a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802026e:	eef0 6a62 	vmov.f32	s13, s5
 8020272:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020276:	ee31 1a05 	vadd.f32	s2, s2, s10
 802027a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802027e:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8020282:	eef0 6a43 	vmov.f32	s13, s6
 8020286:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802028a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802028e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020292:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020296:	ee77 2a62 	vsub.f32	s5, s14, s5
 802029a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802029e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202a6:	ee12 2a90 	vmov	r2, s5
 80202aa:	eef0 2a47 	vmov.f32	s5, s14
 80202ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80202b2:	ee13 2a10 	vmov	r2, s6
 80202b6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80202b8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80202ba:	eeb0 3a67 	vmov.f32	s6, s15
 80202be:	fb92 f3f3 	sdiv	r3, r2, r3
 80202c2:	9320      	str	r3, [sp, #128]	@ 0x80
 80202c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80202c8:	3b01      	subs	r3, #1
 80202ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80202cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80202ce:	bf08      	it	eq
 80202d0:	4613      	moveq	r3, r2
 80202d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80202d4:	e696      	b.n	8020004 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80202d6:	b149      	cbz	r1, 80202ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80202d8:	5caa      	ldrb	r2, [r5, r2]
 80202da:	4670      	mov	r0, lr
 80202dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80202e0:	4422      	add	r2, r4
 80202e2:	4677      	mov	r7, lr
 80202e4:	e6fb      	b.n	80200de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80202e6:	4670      	mov	r0, lr
 80202e8:	4672      	mov	r2, lr
 80202ea:	e6f8      	b.n	80200de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80202ec:	4670      	mov	r0, lr
 80202ee:	4672      	mov	r2, lr
 80202f0:	e7f7      	b.n	80202e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80202f2:	f110 0c01 	adds.w	ip, r0, #1
 80202f6:	f53f af6a 	bmi.w	80201ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80202fa:	4562      	cmp	r2, ip
 80202fc:	f6ff af67 	blt.w	80201ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020300:	f115 0c01 	adds.w	ip, r5, #1
 8020304:	f53f af63 	bmi.w	80201ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020308:	4567      	cmp	r7, ip
 802030a:	f6ff af60 	blt.w	80201ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 802030e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020310:	b23f      	sxth	r7, r7
 8020312:	b212      	sxth	r2, r2
 8020314:	9002      	str	r0, [sp, #8]
 8020316:	9701      	str	r7, [sp, #4]
 8020318:	9200      	str	r2, [sp, #0]
 802031a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802031c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802031e:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8020322:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8020326:	4623      	mov	r3, r4
 8020328:	4631      	mov	r1, r6
 802032a:	f7ff fd69 	bl	801fe00 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 802032e:	e74e      	b.n	80201ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020330:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020332:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8020334:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020338:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 802033a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802033c:	1400      	asrs	r0, r0, #16
 802033e:	142d      	asrs	r5, r5, #16
 8020340:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8020342:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8020346:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802034a:	fb02 5000 	mla	r0, r2, r0, r5
 802034e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8020350:	f815 e000 	ldrb.w	lr, [r5, r0]
 8020354:	eb05 0c00 	add.w	ip, r5, r0
 8020358:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802035c:	eb04 060e 	add.w	r6, r4, lr
 8020360:	2b00      	cmp	r3, #0
 8020362:	f000 8097 	beq.w	8020494 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8020366:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802036a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802036e:	4425      	add	r5, r4
 8020370:	2900      	cmp	r1, #0
 8020372:	f000 8098 	beq.w	80204a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8020376:	eb0c 0002 	add.w	r0, ip, r2
 802037a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802037e:	7840      	ldrb	r0, [r0, #1]
 8020380:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020384:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020388:	4422      	add	r2, r4
 802038a:	4420      	add	r0, r4
 802038c:	b29b      	uxth	r3, r3
 802038e:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8020392:	b289      	uxth	r1, r1
 8020394:	f895 e000 	ldrb.w	lr, [r5]
 8020398:	3703      	adds	r7, #3
 802039a:	f109 39ff 	add.w	r9, r9, #4294967295
 802039e:	fb03 f801 	mul.w	r8, r3, r1
 80203a2:	011b      	lsls	r3, r3, #4
 80203a4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80203a8:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 80203ac:	eba3 0308 	sub.w	r3, r3, r8
 80203b0:	b289      	uxth	r1, r1
 80203b2:	b29b      	uxth	r3, r3
 80203b4:	ebac 0c01 	sub.w	ip, ip, r1
 80203b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80203bc:	fa1f fc8c 	uxth.w	ip, ip
 80203c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80203c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203c4:	fb0c ee0b 	mla	lr, ip, fp, lr
 80203c8:	f892 b000 	ldrb.w	fp, [r2]
 80203cc:	fb01 ee0b 	mla	lr, r1, fp, lr
 80203d0:	f890 b000 	ldrb.w	fp, [r0]
 80203d4:	fb08 ee0b 	mla	lr, r8, fp, lr
 80203d8:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80203dc:	fb1b fb03 	smulbb	fp, fp, r3
 80203e0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80203e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203e6:	fb0e be0a 	mla	lr, lr, sl, fp
 80203ea:	fa1f fe8e 	uxth.w	lr, lr
 80203ee:	f10e 0b01 	add.w	fp, lr, #1
 80203f2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80203f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80203fa:	f807 ec06 	strb.w	lr, [r7, #-6]
 80203fe:	f895 e001 	ldrb.w	lr, [r5, #1]
 8020402:	f896 b001 	ldrb.w	fp, [r6, #1]
 8020406:	fb03 fe0e 	mul.w	lr, r3, lr
 802040a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802040c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020410:	f892 b001 	ldrb.w	fp, [r2, #1]
 8020414:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020418:	f890 b001 	ldrb.w	fp, [r0, #1]
 802041c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8020420:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8020424:	fb1b fb03 	smulbb	fp, fp, r3
 8020428:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 802042c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802042e:	fb0e be0a 	mla	lr, lr, sl, fp
 8020432:	fa1f fe8e 	uxth.w	lr, lr
 8020436:	f10e 0b01 	add.w	fp, lr, #1
 802043a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 802043e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020442:	f807 ec05 	strb.w	lr, [r7, #-5]
 8020446:	78ad      	ldrb	r5, [r5, #2]
 8020448:	78b6      	ldrb	r6, [r6, #2]
 802044a:	436b      	muls	r3, r5
 802044c:	7895      	ldrb	r5, [r2, #2]
 802044e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020450:	fb0c 3306 	mla	r3, ip, r6, r3
 8020454:	fb01 3305 	mla	r3, r1, r5, r3
 8020458:	7885      	ldrb	r5, [r0, #2]
 802045a:	fb08 3805 	mla	r8, r8, r5, r3
 802045e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8020462:	fb13 f302 	smulbb	r3, r3, r2
 8020466:	f3c8 2807 	ubfx	r8, r8, #8, #8
 802046a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802046c:	fb08 380a 	mla	r8, r8, sl, r3
 8020470:	fa1f f888 	uxth.w	r8, r8
 8020474:	f108 0301 	add.w	r3, r8, #1
 8020478:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 802047c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802047e:	4413      	add	r3, r2
 8020480:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020482:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020486:	931d      	str	r3, [sp, #116]	@ 0x74
 8020488:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802048a:	f807 8c04 	strb.w	r8, [r7, #-4]
 802048e:	4413      	add	r3, r2
 8020490:	931e      	str	r3, [sp, #120]	@ 0x78
 8020492:	e6d6      	b.n	8020242 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8020494:	b151      	cbz	r1, 80204ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8020496:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802049a:	4630      	mov	r0, r6
 802049c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80204a0:	4422      	add	r2, r4
 80204a2:	4635      	mov	r5, r6
 80204a4:	e772      	b.n	802038c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80204a6:	4630      	mov	r0, r6
 80204a8:	4632      	mov	r2, r6
 80204aa:	e76f      	b.n	802038c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80204ac:	4630      	mov	r0, r6
 80204ae:	4632      	mov	r2, r6
 80204b0:	e7f7      	b.n	80204a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80204b2:	b013      	add	sp, #76	@ 0x4c
 80204b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80204b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80204bc:	784c      	ldrb	r4, [r1, #1]
 80204be:	f891 a002 	ldrb.w	sl, [r1, #2]
 80204c2:	0224      	lsls	r4, r4, #8
 80204c4:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80204c8:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 80204cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80204d0:	f891 a000 	ldrb.w	sl, [r1]
 80204d4:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 80204d8:	ea44 040a 	orr.w	r4, r4, sl
 80204dc:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 80204e0:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 80204e4:	9401      	str	r4, [sp, #4]
 80204e6:	fb05 c70e 	mla	r7, r5, lr, ip
 80204ea:	2d00      	cmp	r5, #0
 80204ec:	eb02 0807 	add.w	r8, r2, r7
 80204f0:	db72      	blt.n	80205d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80204f2:	45a9      	cmp	r9, r5
 80204f4:	dd70      	ble.n	80205d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80204f6:	f1bc 0f00 	cmp.w	ip, #0
 80204fa:	db6b      	blt.n	80205d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80204fc:	45e6      	cmp	lr, ip
 80204fe:	dd69      	ble.n	80205d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8020500:	5dd7      	ldrb	r7, [r2, r7]
 8020502:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8020506:	441f      	add	r7, r3
 8020508:	f11c 0201 	adds.w	r2, ip, #1
 802050c:	d467      	bmi.n	80205de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 802050e:	4596      	cmp	lr, r2
 8020510:	dd65      	ble.n	80205de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8020512:	2800      	cmp	r0, #0
 8020514:	d063      	beq.n	80205de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8020516:	f898 4001 	ldrb.w	r4, [r8, #1]
 802051a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802051e:	441c      	add	r4, r3
 8020520:	3501      	adds	r5, #1
 8020522:	d460      	bmi.n	80205e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020524:	45a9      	cmp	r9, r5
 8020526:	dd5e      	ble.n	80205e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8020528:	2e00      	cmp	r6, #0
 802052a:	d05c      	beq.n	80205e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 802052c:	f1bc 0f00 	cmp.w	ip, #0
 8020530:	db57      	blt.n	80205e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8020532:	45e6      	cmp	lr, ip
 8020534:	dd55      	ble.n	80205e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8020536:	f818 500e 	ldrb.w	r5, [r8, lr]
 802053a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802053e:	441d      	add	r5, r3
 8020540:	f11c 0201 	adds.w	r2, ip, #1
 8020544:	d452      	bmi.n	80205ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8020546:	4596      	cmp	lr, r2
 8020548:	dd50      	ble.n	80205ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802054a:	2800      	cmp	r0, #0
 802054c:	d04e      	beq.n	80205ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 802054e:	44c6      	add	lr, r8
 8020550:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020554:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020558:	4413      	add	r3, r2
 802055a:	b280      	uxth	r0, r0
 802055c:	f897 8000 	ldrb.w	r8, [r7]
 8020560:	b2b2      	uxth	r2, r6
 8020562:	fb00 f602 	mul.w	r6, r0, r2
 8020566:	0100      	lsls	r0, r0, #4
 8020568:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 802056c:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 8020570:	1b80      	subs	r0, r0, r6
 8020572:	fa1f fc82 	uxth.w	ip, r2
 8020576:	b282      	uxth	r2, r0
 8020578:	7820      	ldrb	r0, [r4, #0]
 802057a:	ebae 0e0c 	sub.w	lr, lr, ip
 802057e:	4350      	muls	r0, r2
 8020580:	fa1f fe8e 	uxth.w	lr, lr
 8020584:	fb0e 0808 	mla	r8, lr, r8, r0
 8020588:	7828      	ldrb	r0, [r5, #0]
 802058a:	fb0c 8800 	mla	r8, ip, r0, r8
 802058e:	7818      	ldrb	r0, [r3, #0]
 8020590:	fb06 8000 	mla	r0, r6, r0, r8
 8020594:	1200      	asrs	r0, r0, #8
 8020596:	7008      	strb	r0, [r1, #0]
 8020598:	7860      	ldrb	r0, [r4, #1]
 802059a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802059e:	4350      	muls	r0, r2
 80205a0:	fb0e 0808 	mla	r8, lr, r8, r0
 80205a4:	7868      	ldrb	r0, [r5, #1]
 80205a6:	fb0c 8800 	mla	r8, ip, r0, r8
 80205aa:	7858      	ldrb	r0, [r3, #1]
 80205ac:	fb06 8000 	mla	r0, r6, r0, r8
 80205b0:	1200      	asrs	r0, r0, #8
 80205b2:	7048      	strb	r0, [r1, #1]
 80205b4:	78a0      	ldrb	r0, [r4, #2]
 80205b6:	78bf      	ldrb	r7, [r7, #2]
 80205b8:	4350      	muls	r0, r2
 80205ba:	78aa      	ldrb	r2, [r5, #2]
 80205bc:	fb0e 0007 	mla	r0, lr, r7, r0
 80205c0:	fb0c 0c02 	mla	ip, ip, r2, r0
 80205c4:	789a      	ldrb	r2, [r3, #2]
 80205c6:	fb06 c202 	mla	r2, r6, r2, ip
 80205ca:	1212      	asrs	r2, r2, #8
 80205cc:	708a      	strb	r2, [r1, #2]
 80205ce:	b002      	add	sp, #8
 80205d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205d4:	af01      	add	r7, sp, #4
 80205d6:	e797      	b.n	8020508 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80205d8:	ac01      	add	r4, sp, #4
 80205da:	4627      	mov	r7, r4
 80205dc:	e7a0      	b.n	8020520 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80205de:	ac01      	add	r4, sp, #4
 80205e0:	e79e      	b.n	8020520 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80205e2:	ad01      	add	r5, sp, #4
 80205e4:	e7ac      	b.n	8020540 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80205e6:	ab01      	add	r3, sp, #4
 80205e8:	461d      	mov	r5, r3
 80205ea:	e7b6      	b.n	802055a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80205ec:	ab01      	add	r3, sp, #4
 80205ee:	e7b4      	b.n	802055a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080205f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80205f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f4:	b08d      	sub	sp, #52	@ 0x34
 80205f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80205fa:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 80205fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020600:	900b      	str	r0, [sp, #44]	@ 0x2c
 8020602:	9306      	str	r3, [sp, #24]
 8020604:	6850      	ldr	r0, [r2, #4]
 8020606:	6812      	ldr	r2, [r2, #0]
 8020608:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802060a:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 802060e:	fb00 1303 	mla	r3, r0, r3, r1
 8020612:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020616:	18d3      	adds	r3, r2, r3
 8020618:	9307      	str	r3, [sp, #28]
 802061a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	9308      	str	r3, [sp, #32]
 8020620:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020622:	685d      	ldr	r5, [r3, #4]
 8020624:	3504      	adds	r5, #4
 8020626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020628:	2b00      	cmp	r3, #0
 802062a:	dc03      	bgt.n	8020634 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802062c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802062e:	2b00      	cmp	r3, #0
 8020630:	f340 81e6 	ble.w	8020a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8020634:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020636:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802063a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802063e:	1e48      	subs	r0, r1, #1
 8020640:	1e56      	subs	r6, r2, #1
 8020642:	9b06      	ldr	r3, [sp, #24]
 8020644:	2b00      	cmp	r3, #0
 8020646:	f340 80bd 	ble.w	80207c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802064a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802064c:	1427      	asrs	r7, r4, #16
 802064e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8020652:	d406      	bmi.n	8020662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020654:	4287      	cmp	r7, r0
 8020656:	da04      	bge.n	8020662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020658:	2b00      	cmp	r3, #0
 802065a:	db02      	blt.n	8020662 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802065c:	42b3      	cmp	r3, r6
 802065e:	f2c0 80b2 	blt.w	80207c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8020662:	3701      	adds	r7, #1
 8020664:	f100 80a1 	bmi.w	80207aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020668:	42b9      	cmp	r1, r7
 802066a:	f2c0 809e 	blt.w	80207aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802066e:	3301      	adds	r3, #1
 8020670:	f100 809b 	bmi.w	80207aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020674:	429a      	cmp	r2, r3
 8020676:	f2c0 8098 	blt.w	80207aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802067a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 802067e:	f1bb 0f00 	cmp.w	fp, #0
 8020682:	f340 80bf 	ble.w	8020804 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020686:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020688:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802068a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802068c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8020690:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8020694:	1420      	asrs	r0, r4, #16
 8020696:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8020698:	ea4f 4723 	mov.w	r7, r3, asr #16
 802069c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80206a0:	6892      	ldr	r2, [r2, #8]
 80206a2:	f100 8103 	bmi.w	80208ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80206a6:	f102 3eff 	add.w	lr, r2, #4294967295
 80206aa:	4570      	cmp	r0, lr
 80206ac:	f280 80fe 	bge.w	80208ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80206b0:	2f00      	cmp	r7, #0
 80206b2:	f2c0 80fb 	blt.w	80208ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80206b6:	f10c 3eff 	add.w	lr, ip, #4294967295
 80206ba:	4577      	cmp	r7, lr
 80206bc:	f280 80f6 	bge.w	80208ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80206c0:	b212      	sxth	r2, r2
 80206c2:	fb07 0002 	mla	r0, r7, r2, r0
 80206c6:	9f08      	ldr	r7, [sp, #32]
 80206c8:	f817 8000 	ldrb.w	r8, [r7, r0]
 80206cc:	eb07 0e00 	add.w	lr, r7, r0
 80206d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80206d4:	eb05 0c08 	add.w	ip, r5, r8
 80206d8:	2b00      	cmp	r3, #0
 80206da:	f000 80d8 	beq.w	802088e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80206de:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80206e2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80206e6:	442f      	add	r7, r5
 80206e8:	2900      	cmp	r1, #0
 80206ea:	f000 80d9 	beq.w	80208a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80206ee:	eb0e 0002 	add.w	r0, lr, r2
 80206f2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80206f6:	7840      	ldrb	r0, [r0, #1]
 80206f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80206fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020700:	442a      	add	r2, r5
 8020702:	4428      	add	r0, r5
 8020704:	b29b      	uxth	r3, r3
 8020706:	f815 a008 	ldrb.w	sl, [r5, r8]
 802070a:	b289      	uxth	r1, r1
 802070c:	f897 8000 	ldrb.w	r8, [r7]
 8020710:	fb03 f901 	mul.w	r9, r3, r1
 8020714:	011b      	lsls	r3, r3, #4
 8020716:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802071a:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802071e:	eba3 0309 	sub.w	r3, r3, r9
 8020722:	b289      	uxth	r1, r1
 8020724:	b29b      	uxth	r3, r3
 8020726:	ebae 0e01 	sub.w	lr, lr, r1
 802072a:	fb03 f808 	mul.w	r8, r3, r8
 802072e:	fa1f fe8e 	uxth.w	lr, lr
 8020732:	fb0e 880a 	mla	r8, lr, sl, r8
 8020736:	f892 a000 	ldrb.w	sl, [r2]
 802073a:	fb01 880a 	mla	r8, r1, sl, r8
 802073e:	f890 a000 	ldrb.w	sl, [r0]
 8020742:	fb09 880a 	mla	r8, r9, sl, r8
 8020746:	ea4f 2828 	mov.w	r8, r8, asr #8
 802074a:	f886 8000 	strb.w	r8, [r6]
 802074e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020752:	f89c a001 	ldrb.w	sl, [ip, #1]
 8020756:	fb03 f808 	mul.w	r8, r3, r8
 802075a:	fb0e 880a 	mla	r8, lr, sl, r8
 802075e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8020762:	fb01 880a 	mla	r8, r1, sl, r8
 8020766:	f890 a001 	ldrb.w	sl, [r0, #1]
 802076a:	fb09 880a 	mla	r8, r9, sl, r8
 802076e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020772:	f886 8001 	strb.w	r8, [r6, #1]
 8020776:	78bf      	ldrb	r7, [r7, #2]
 8020778:	f89c c002 	ldrb.w	ip, [ip, #2]
 802077c:	437b      	muls	r3, r7
 802077e:	7892      	ldrb	r2, [r2, #2]
 8020780:	fb0e 330c 	mla	r3, lr, ip, r3
 8020784:	fb01 3102 	mla	r1, r1, r2, r3
 8020788:	7882      	ldrb	r2, [r0, #2]
 802078a:	fb09 1902 	mla	r9, r9, r2, r1
 802078e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020792:	f886 9002 	strb.w	r9, [r6, #2]
 8020796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020798:	3603      	adds	r6, #3
 802079a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802079c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80207a0:	441c      	add	r4, r3
 80207a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80207a4:	4413      	add	r3, r2
 80207a6:	9318      	str	r3, [sp, #96]	@ 0x60
 80207a8:	e769      	b.n	802067e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80207aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80207ac:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80207ae:	441c      	add	r4, r3
 80207b0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80207b2:	443b      	add	r3, r7
 80207b4:	9318      	str	r3, [sp, #96]	@ 0x60
 80207b6:	9b06      	ldr	r3, [sp, #24]
 80207b8:	3b01      	subs	r3, #1
 80207ba:	9306      	str	r3, [sp, #24]
 80207bc:	9b07      	ldr	r3, [sp, #28]
 80207be:	3303      	adds	r3, #3
 80207c0:	9307      	str	r3, [sp, #28]
 80207c2:	e73e      	b.n	8020642 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80207c4:	d026      	beq.n	8020814 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80207c6:	9b06      	ldr	r3, [sp, #24]
 80207c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80207ca:	3b01      	subs	r3, #1
 80207cc:	fb00 4003 	mla	r0, r0, r3, r4
 80207d0:	1400      	asrs	r0, r0, #16
 80207d2:	f53f af52 	bmi.w	802067a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80207d6:	3901      	subs	r1, #1
 80207d8:	4288      	cmp	r0, r1
 80207da:	f6bf af4e 	bge.w	802067a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80207de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80207e0:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80207e2:	fb01 0303 	mla	r3, r1, r3, r0
 80207e6:	141b      	asrs	r3, r3, #16
 80207e8:	f53f af47 	bmi.w	802067a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80207ec:	3a01      	subs	r2, #1
 80207ee:	4293      	cmp	r3, r2
 80207f0:	f6bf af43 	bge.w	802067a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80207f4:	9b07      	ldr	r3, [sp, #28]
 80207f6:	f8dd a018 	ldr.w	sl, [sp, #24]
 80207fa:	f103 0803 	add.w	r8, r3, #3
 80207fe:	f1ba 0f00 	cmp.w	sl, #0
 8020802:	dc71      	bgt.n	80208e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020804:	9b06      	ldr	r3, [sp, #24]
 8020806:	9a07      	ldr	r2, [sp, #28]
 8020808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802080c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020810:	441a      	add	r2, r3
 8020812:	9207      	str	r2, [sp, #28]
 8020814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020816:	2b00      	cmp	r3, #0
 8020818:	f340 80f2 	ble.w	8020a00 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 802081c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020820:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020822:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020826:	eeb0 6a62 	vmov.f32	s12, s5
 802082a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802082e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020832:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020836:	ee16 4a10 	vmov	r4, s12
 802083a:	eeb0 6a43 	vmov.f32	s12, s6
 802083e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020842:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 8020846:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802084a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802084e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020852:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020856:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802085a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802085e:	ee12 2a90 	vmov	r2, s5
 8020862:	eef0 2a47 	vmov.f32	s5, s14
 8020866:	fb92 f3f3 	sdiv	r3, r2, r3
 802086a:	ee13 2a10 	vmov	r2, s6
 802086e:	9319      	str	r3, [sp, #100]	@ 0x64
 8020870:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020872:	eeb0 3a67 	vmov.f32	s6, s15
 8020876:	fb92 f3f3 	sdiv	r3, r2, r3
 802087a:	931a      	str	r3, [sp, #104]	@ 0x68
 802087c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802087e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020880:	3b01      	subs	r3, #1
 8020882:	9309      	str	r3, [sp, #36]	@ 0x24
 8020884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020886:	bf08      	it	eq
 8020888:	4613      	moveq	r3, r2
 802088a:	9306      	str	r3, [sp, #24]
 802088c:	e6cb      	b.n	8020626 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 802088e:	b151      	cbz	r1, 80208a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020890:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8020894:	4660      	mov	r0, ip
 8020896:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802089a:	442a      	add	r2, r5
 802089c:	4667      	mov	r7, ip
 802089e:	e731      	b.n	8020704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80208a0:	4660      	mov	r0, ip
 80208a2:	4662      	mov	r2, ip
 80208a4:	e72e      	b.n	8020704 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80208a6:	4660      	mov	r0, ip
 80208a8:	4662      	mov	r2, ip
 80208aa:	e7f7      	b.n	802089c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80208ac:	f110 0e01 	adds.w	lr, r0, #1
 80208b0:	f53f af71 	bmi.w	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80208b4:	4572      	cmp	r2, lr
 80208b6:	f6ff af6e 	blt.w	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80208ba:	f117 0e01 	adds.w	lr, r7, #1
 80208be:	f53f af6a 	bmi.w	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80208c2:	45f4      	cmp	ip, lr
 80208c4:	f6ff af67 	blt.w	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80208c8:	b212      	sxth	r2, r2
 80208ca:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80208ce:	fa0f f38c 	sxth.w	r3, ip
 80208d2:	9200      	str	r2, [sp, #0]
 80208d4:	4631      	mov	r1, r6
 80208d6:	9a08      	ldr	r2, [sp, #32]
 80208d8:	9301      	str	r3, [sp, #4]
 80208da:	462b      	mov	r3, r5
 80208dc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80208e0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80208e2:	f7ff fde9 	bl	80204b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80208e6:	e756      	b.n	8020796 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80208e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80208ea:	1426      	asrs	r6, r4, #16
 80208ec:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80208ee:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80208f2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80208f6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80208f8:	1400      	asrs	r0, r0, #16
 80208fa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80208fe:	fb02 6000 	mla	r0, r2, r0, r6
 8020902:	9e08      	ldr	r6, [sp, #32]
 8020904:	f816 e000 	ldrb.w	lr, [r6, r0]
 8020908:	eb06 0c00 	add.w	ip, r6, r0
 802090c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8020910:	eb05 070e 	add.w	r7, r5, lr
 8020914:	2b00      	cmp	r3, #0
 8020916:	d064      	beq.n	80209e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8020918:	f89c 6001 	ldrb.w	r6, [ip, #1]
 802091c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8020920:	442e      	add	r6, r5
 8020922:	2900      	cmp	r1, #0
 8020924:	d066      	beq.n	80209f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8020926:	eb0c 0002 	add.w	r0, ip, r2
 802092a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 802092e:	7840      	ldrb	r0, [r0, #1]
 8020930:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020934:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020938:	442a      	add	r2, r5
 802093a:	4428      	add	r0, r5
 802093c:	b29b      	uxth	r3, r3
 802093e:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8020942:	b289      	uxth	r1, r1
 8020944:	f896 e000 	ldrb.w	lr, [r6]
 8020948:	f108 0803 	add.w	r8, r8, #3
 802094c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020950:	fb03 f901 	mul.w	r9, r3, r1
 8020954:	011b      	lsls	r3, r3, #4
 8020956:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802095a:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 802095e:	eba3 0309 	sub.w	r3, r3, r9
 8020962:	b289      	uxth	r1, r1
 8020964:	b29b      	uxth	r3, r3
 8020966:	ebac 0c01 	sub.w	ip, ip, r1
 802096a:	fb03 fe0e 	mul.w	lr, r3, lr
 802096e:	fa1f fc8c 	uxth.w	ip, ip
 8020972:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020976:	f892 b000 	ldrb.w	fp, [r2]
 802097a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802097e:	f890 b000 	ldrb.w	fp, [r0]
 8020982:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020986:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802098a:	f808 ec06 	strb.w	lr, [r8, #-6]
 802098e:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020992:	f897 b001 	ldrb.w	fp, [r7, #1]
 8020996:	fb03 fe0e 	mul.w	lr, r3, lr
 802099a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802099e:	f892 b001 	ldrb.w	fp, [r2, #1]
 80209a2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80209a6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80209aa:	fb09 ee0b 	mla	lr, r9, fp, lr
 80209ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80209b2:	f808 ec05 	strb.w	lr, [r8, #-5]
 80209b6:	78b6      	ldrb	r6, [r6, #2]
 80209b8:	78bf      	ldrb	r7, [r7, #2]
 80209ba:	4373      	muls	r3, r6
 80209bc:	7896      	ldrb	r6, [r2, #2]
 80209be:	7882      	ldrb	r2, [r0, #2]
 80209c0:	fb0c 3307 	mla	r3, ip, r7, r3
 80209c4:	fb01 3306 	mla	r3, r1, r6, r3
 80209c8:	fb09 3902 	mla	r9, r9, r2, r3
 80209cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80209ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80209d0:	441c      	add	r4, r3
 80209d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80209d4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80209d8:	4413      	add	r3, r2
 80209da:	f808 9c04 	strb.w	r9, [r8, #-4]
 80209de:	9318      	str	r3, [sp, #96]	@ 0x60
 80209e0:	e70d      	b.n	80207fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80209e2:	b151      	cbz	r1, 80209fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80209e4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80209e8:	4638      	mov	r0, r7
 80209ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80209ee:	442a      	add	r2, r5
 80209f0:	463e      	mov	r6, r7
 80209f2:	e7a3      	b.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80209f4:	4638      	mov	r0, r7
 80209f6:	463a      	mov	r2, r7
 80209f8:	e7a0      	b.n	802093c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80209fa:	4638      	mov	r0, r7
 80209fc:	463a      	mov	r2, r7
 80209fe:	e7f7      	b.n	80209f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8020a00:	b00d      	add	sp, #52	@ 0x34
 8020a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8020a06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a0a:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8020a0e:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020a12:	2d00      	cmp	r5, #0
 8020a14:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020a18:	fb05 700c 	mla	r0, r5, ip, r7
 8020a1c:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8020a20:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 8020a24:	eb02 0800 	add.w	r8, r2, r0
 8020a28:	f2c0 8118 	blt.w	8020c5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020a2c:	45a9      	cmp	r9, r5
 8020a2e:	f340 8115 	ble.w	8020c5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020a32:	2f00      	cmp	r7, #0
 8020a34:	f2c0 8110 	blt.w	8020c58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020a38:	45bc      	cmp	ip, r7
 8020a3a:	f340 810d 	ble.w	8020c58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020a3e:	5c12      	ldrb	r2, [r2, r0]
 8020a40:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020a44:	1c7a      	adds	r2, r7, #1
 8020a46:	f100 810c 	bmi.w	8020c62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020a4a:	4594      	cmp	ip, r2
 8020a4c:	f340 8109 	ble.w	8020c62 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020a50:	2c00      	cmp	r4, #0
 8020a52:	f000 8108 	beq.w	8020c66 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8020a56:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020a5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020a5e:	3501      	adds	r5, #1
 8020a60:	f100 8105 	bmi.w	8020c6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020a64:	45a9      	cmp	r9, r5
 8020a66:	f340 8102 	ble.w	8020c6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020a6a:	f1be 0f00 	cmp.w	lr, #0
 8020a6e:	f000 8101 	beq.w	8020c74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8020a72:	2f00      	cmp	r7, #0
 8020a74:	f2c0 80f9 	blt.w	8020c6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020a78:	45bc      	cmp	ip, r7
 8020a7a:	f340 80f6 	ble.w	8020c6a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020a7e:	f818 200c 	ldrb.w	r2, [r8, ip]
 8020a82:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020a86:	3701      	adds	r7, #1
 8020a88:	f100 80f7 	bmi.w	8020c7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020a8c:	45bc      	cmp	ip, r7
 8020a8e:	f340 80f4 	ble.w	8020c7a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020a92:	2c00      	cmp	r4, #0
 8020a94:	f000 80f3 	beq.w	8020c7e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8020a98:	44c4      	add	ip, r8
 8020a9a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020a9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020aa2:	fa1f fc84 	uxth.w	ip, r4
 8020aa6:	fa1f f48e 	uxth.w	r4, lr
 8020aaa:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020aae:	fb04 fe0c 	mul.w	lr, r4, ip
 8020ab2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8020ab6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020aba:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8020abe:	ebac 070e 	sub.w	r7, ip, lr
 8020ac2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8020ac6:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020aca:	b2a4      	uxth	r4, r4
 8020acc:	b2bf      	uxth	r7, r7
 8020ace:	1b1b      	subs	r3, r3, r4
 8020ad0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020ad4:	fb07 fc0a 	mul.w	ip, r7, sl
 8020ad8:	b29b      	uxth	r3, r3
 8020ada:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020ade:	9300      	str	r3, [sp, #0]
 8020ae0:	fb04 cc09 	mla	ip, r4, r9, ip
 8020ae4:	fb0e cc08 	mla	ip, lr, r8, ip
 8020ae8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020aec:	9301      	str	r3, [sp, #4]
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	f000 80af 	beq.w	8020c52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8020af4:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020af8:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020afc:	fb0b fc0c 	mul.w	ip, fp, ip
 8020b00:	fb0b f606 	mul.w	r6, fp, r6
 8020b04:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020b08:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020b0c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020b10:	44dc      	add	ip, fp
 8020b12:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020b16:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020b1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b1e:	fb0a fb0b 	mul.w	fp, sl, fp
 8020b22:	fb0a fa00 	mul.w	sl, sl, r0
 8020b26:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8020b2a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8020b2e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8020b32:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020b36:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020b3a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020b3e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020b42:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020b46:	0a36      	lsrs	r6, r6, #8
 8020b48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020b4c:	44dc      	add	ip, fp
 8020b4e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020b52:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020b56:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020b5a:	fb09 fb0b 	mul.w	fp, r9, fp
 8020b5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b62:	fb09 f905 	mul.w	r9, r9, r5
 8020b66:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020b6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020b6e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8020b72:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020b76:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020b7a:	fb0c fc07 	mul.w	ip, ip, r7
 8020b7e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020b82:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8020b86:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020b8a:	4458      	add	r0, fp
 8020b8c:	fb08 f505 	mul.w	r5, r8, r5
 8020b90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b94:	fb08 f802 	mul.w	r8, r8, r2
 8020b98:	0a00      	lsrs	r0, r0, #8
 8020b9a:	0a2a      	lsrs	r2, r5, #8
 8020b9c:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020ba0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020ba4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020ba8:	4415      	add	r5, r2
 8020baa:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020bae:	0a2d      	lsrs	r5, r5, #8
 8020bb0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020bb4:	9a00      	ldr	r2, [sp, #0]
 8020bb6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020bba:	fb03 cc02 	mla	ip, r3, r2, ip
 8020bbe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020bc2:	9b01      	ldr	r3, [sp, #4]
 8020bc4:	fb05 c50e 	mla	r5, r5, lr, ip
 8020bc8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020bcc:	fb00 5004 	mla	r0, r0, r4, r5
 8020bd0:	0a00      	lsrs	r0, r0, #8
 8020bd2:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8020bd6:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8020bda:	4378      	muls	r0, r7
 8020bdc:	fb02 0006 	mla	r0, r2, r6, r0
 8020be0:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020be4:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8020be8:	fb04 e000 	mla	r0, r4, r0, lr
 8020bec:	0a00      	lsrs	r0, r0, #8
 8020bee:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020bf2:	4328      	orrs	r0, r5
 8020bf4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8020bf8:	b2ad      	uxth	r5, r5
 8020bfa:	b2c4      	uxtb	r4, r0
 8020bfc:	436b      	muls	r3, r5
 8020bfe:	fb14 f405 	smulbb	r4, r4, r5
 8020c02:	1c5a      	adds	r2, r3, #1
 8020c04:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020c08:	780b      	ldrb	r3, [r1, #0]
 8020c0a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8020c0e:	b2d2      	uxtb	r2, r2
 8020c10:	fb03 4302 	mla	r3, r3, r2, r4
 8020c14:	b29b      	uxth	r3, r3
 8020c16:	1c5c      	adds	r4, r3, #1
 8020c18:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020c1c:	784c      	ldrb	r4, [r1, #1]
 8020c1e:	fb14 f402 	smulbb	r4, r4, r2
 8020c22:	121b      	asrs	r3, r3, #8
 8020c24:	700b      	strb	r3, [r1, #0]
 8020c26:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020c2a:	fb03 4305 	mla	r3, r3, r5, r4
 8020c2e:	b29b      	uxth	r3, r3
 8020c30:	1c5c      	adds	r4, r3, #1
 8020c32:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020c36:	0c04      	lsrs	r4, r0, #16
 8020c38:	7888      	ldrb	r0, [r1, #2]
 8020c3a:	121b      	asrs	r3, r3, #8
 8020c3c:	fb10 f002 	smulbb	r0, r0, r2
 8020c40:	704b      	strb	r3, [r1, #1]
 8020c42:	fb04 0005 	mla	r0, r4, r5, r0
 8020c46:	b280      	uxth	r0, r0
 8020c48:	1c43      	adds	r3, r0, #1
 8020c4a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020c4e:	1200      	asrs	r0, r0, #8
 8020c50:	7088      	strb	r0, [r1, #2]
 8020c52:	b003      	add	sp, #12
 8020c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c58:	2600      	movs	r6, #0
 8020c5a:	e6f3      	b.n	8020a44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8020c5c:	2000      	movs	r0, #0
 8020c5e:	4606      	mov	r6, r0
 8020c60:	e6fd      	b.n	8020a5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020c62:	2000      	movs	r0, #0
 8020c64:	e6fb      	b.n	8020a5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020c66:	4620      	mov	r0, r4
 8020c68:	e6f9      	b.n	8020a5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020c6a:	2500      	movs	r5, #0
 8020c6c:	e70b      	b.n	8020a86 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8020c6e:	2200      	movs	r2, #0
 8020c70:	4615      	mov	r5, r2
 8020c72:	e716      	b.n	8020aa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020c74:	4672      	mov	r2, lr
 8020c76:	4675      	mov	r5, lr
 8020c78:	e713      	b.n	8020aa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020c7a:	2200      	movs	r2, #0
 8020c7c:	e711      	b.n	8020aa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020c7e:	4622      	mov	r2, r4
 8020c80:	e70f      	b.n	8020aa2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08020c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c86:	b09f      	sub	sp, #124	@ 0x7c
 8020c88:	921b      	str	r2, [sp, #108]	@ 0x6c
 8020c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c8c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8020c8e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8020c92:	901d      	str	r0, [sp, #116]	@ 0x74
 8020c94:	931c      	str	r3, [sp, #112]	@ 0x70
 8020c96:	6850      	ldr	r0, [r2, #4]
 8020c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8020c9a:	6812      	ldr	r2, [r2, #0]
 8020c9c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8020c9e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8020ca2:	fb00 1303 	mla	r3, r0, r3, r1
 8020ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020caa:	18d3      	adds	r3, r2, r3
 8020cac:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8020cb4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020cb6:	685e      	ldr	r6, [r3, #4]
 8020cb8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8020cbc:	3604      	adds	r6, #4
 8020cbe:	930d      	str	r3, [sp, #52]	@ 0x34
 8020cc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	dc03      	bgt.n	8020cce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020cc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020cc8:	2b00      	cmp	r3, #0
 8020cca:	f340 8378 	ble.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8020cce:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020cd0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cd4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020cd8:	1e48      	subs	r0, r1, #1
 8020cda:	1e57      	subs	r7, r2, #1
 8020cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	f340 818c 	ble.w	8020ffc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8020ce4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020ce6:	142b      	asrs	r3, r5, #16
 8020ce8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020cec:	d406      	bmi.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020cee:	4584      	cmp	ip, r0
 8020cf0:	da04      	bge.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	db02      	blt.n	8020cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8020cf6:	42bb      	cmp	r3, r7
 8020cf8:	f2c0 8181 	blt.w	8020ffe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8020cfc:	f11c 0c01 	adds.w	ip, ip, #1
 8020d00:	f100 816f 	bmi.w	8020fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020d04:	4561      	cmp	r1, ip
 8020d06:	f2c0 816c 	blt.w	8020fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020d0a:	3301      	adds	r3, #1
 8020d0c:	f100 8169 	bmi.w	8020fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020d10:	429a      	cmp	r2, r3
 8020d12:	f2c0 8166 	blt.w	8020fe2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d18:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8020d1c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	f340 818c 	ble.w	802103c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8020d24:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020d26:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020d2a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020d2e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020d32:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020d34:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8020d38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020d3a:	141b      	asrs	r3, r3, #16
 8020d3c:	f100 81d0 	bmi.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020d40:	f100 38ff 	add.w	r8, r0, #4294967295
 8020d44:	4543      	cmp	r3, r8
 8020d46:	f280 81cb 	bge.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020d4a:	f1bc 0f00 	cmp.w	ip, #0
 8020d4e:	f2c0 81c7 	blt.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020d52:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020d56:	45c4      	cmp	ip, r8
 8020d58:	f280 81c2 	bge.w	80210e0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020d5c:	b200      	sxth	r0, r0
 8020d5e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020d60:	fb0c 3300 	mla	r3, ip, r0, r3
 8020d64:	eb04 0803 	add.w	r8, r4, r3
 8020d68:	5ce3      	ldrb	r3, [r4, r3]
 8020d6a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020d6e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020d72:	2a00      	cmp	r2, #0
 8020d74:	f000 81a9 	beq.w	80210ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8020d78:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020d7c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020d80:	940e      	str	r4, [sp, #56]	@ 0x38
 8020d82:	0e24      	lsrs	r4, r4, #24
 8020d84:	9415      	str	r4, [sp, #84]	@ 0x54
 8020d86:	b179      	cbz	r1, 8020da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020d88:	eb08 0c00 	add.w	ip, r8, r0
 8020d8c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020d90:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020d94:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d96:	0e00      	lsrs	r0, r0, #24
 8020d98:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020d9a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020d9e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020da2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020da4:	0e00      	lsrs	r0, r0, #24
 8020da6:	9016      	str	r0, [sp, #88]	@ 0x58
 8020da8:	b292      	uxth	r2, r2
 8020daa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020dac:	b289      	uxth	r1, r1
 8020dae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020db0:	fb02 f901 	mul.w	r9, r2, r1
 8020db4:	0112      	lsls	r2, r2, #4
 8020db6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020dba:	eba2 0809 	sub.w	r8, r2, r9
 8020dbe:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020dc2:	b289      	uxth	r1, r1
 8020dc4:	fa1f f888 	uxth.w	r8, r8
 8020dc8:	1a52      	subs	r2, r2, r1
 8020dca:	fb08 f000 	mul.w	r0, r8, r0
 8020dce:	b292      	uxth	r2, r2
 8020dd0:	fb02 000e 	mla	r0, r2, lr, r0
 8020dd4:	fb01 0004 	mla	r0, r1, r4, r0
 8020dd8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020dda:	fb09 0004 	mla	r0, r9, r4, r0
 8020dde:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020de2:	2800      	cmp	r0, #0
 8020de4:	f000 80f2 	beq.w	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020de8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020dec:	d01b      	beq.n	8020e26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020dee:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020df2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020df6:	fb0e fa0a 	mul.w	sl, lr, sl
 8020dfa:	fb0e fe03 	mul.w	lr, lr, r3
 8020dfe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020e02:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020e06:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020e0a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020e0e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020e12:	4453      	add	r3, sl
 8020e14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020e18:	0a1b      	lsrs	r3, r3, #8
 8020e1a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020e1e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020e22:	ea43 030c 	orr.w	r3, r3, ip
 8020e26:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e28:	2cff      	cmp	r4, #255	@ 0xff
 8020e2a:	d021      	beq.n	8020e70 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020e2c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e2e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020e32:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e34:	fb04 fb0b 	mul.w	fp, r4, fp
 8020e38:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e3a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e3e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020e40:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020e44:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020e48:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e4c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020e50:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020e54:	44de      	add	lr, fp
 8020e56:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020e5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e62:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020e66:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020e6a:	ea4e 040a 	orr.w	r4, lr, sl
 8020e6e:	940e      	str	r4, [sp, #56]	@ 0x38
 8020e70:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020e72:	2cff      	cmp	r4, #255	@ 0xff
 8020e74:	d021      	beq.n	8020eba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8020e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020e78:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020e7c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020e7e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020e82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020e84:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020e88:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020e8a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020e8e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020e92:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020e9a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020e9e:	44de      	add	lr, fp
 8020ea0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020ea4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ea8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020eac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020eb0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020eb4:	ea4e 040a 	orr.w	r4, lr, sl
 8020eb8:	940a      	str	r4, [sp, #40]	@ 0x28
 8020eba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020ebc:	2cff      	cmp	r4, #255	@ 0xff
 8020ebe:	d021      	beq.n	8020f04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020ec0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020ec2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020ec6:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020ec8:	fb04 fb0b 	mul.w	fp, r4, fp
 8020ecc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020ece:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020ed2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020ed4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020ed8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020edc:	fb04 fa0a 	mul.w	sl, r4, sl
 8020ee0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020ee4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020ee8:	44de      	add	lr, fp
 8020eea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020eee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ef2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ef6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020efa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020efe:	ea4e 040a 	orr.w	r4, lr, sl
 8020f02:	940f      	str	r4, [sp, #60]	@ 0x3c
 8020f04:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020f06:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020f0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020f0e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020f12:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020f14:	fb08 fc0c 	mul.w	ip, r8, ip
 8020f18:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020f1c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020f20:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020f22:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020f26:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020f2a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020f2c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020f30:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020f34:	fb08 f80e 	mul.w	r8, r8, lr
 8020f38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f3c:	fb02 8303 	mla	r3, r2, r3, r8
 8020f40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020f42:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020f46:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020f4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020f4c:	fb01 330a 	mla	r3, r1, sl, r3
 8020f50:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8020f54:	fb09 3901 	mla	r9, r9, r1, r3
 8020f58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020f5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020f5c:	4343      	muls	r3, r0
 8020f5e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020f62:	1c58      	adds	r0, r3, #1
 8020f64:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020f68:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020f6c:	ea4c 0c09 	orr.w	ip, ip, r9
 8020f70:	783b      	ldrb	r3, [r7, #0]
 8020f72:	fa5f f28c 	uxtb.w	r2, ip
 8020f76:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020f7a:	fb12 f201 	smulbb	r2, r2, r1
 8020f7e:	b2c0      	uxtb	r0, r0
 8020f80:	fb03 2300 	mla	r3, r3, r0, r2
 8020f84:	b29b      	uxth	r3, r3
 8020f86:	1c5a      	adds	r2, r3, #1
 8020f88:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f8c:	787a      	ldrb	r2, [r7, #1]
 8020f8e:	fb12 f200 	smulbb	r2, r2, r0
 8020f92:	121b      	asrs	r3, r3, #8
 8020f94:	703b      	strb	r3, [r7, #0]
 8020f96:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020f9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020f9e:	fb03 2301 	mla	r3, r3, r1, r2
 8020fa2:	b29b      	uxth	r3, r3
 8020fa4:	1c5a      	adds	r2, r3, #1
 8020fa6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020faa:	121b      	asrs	r3, r3, #8
 8020fac:	707b      	strb	r3, [r7, #1]
 8020fae:	78bb      	ldrb	r3, [r7, #2]
 8020fb0:	fb13 f000 	smulbb	r0, r3, r0
 8020fb4:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020fb8:	fa1f fc8c 	uxth.w	ip, ip
 8020fbc:	f10c 0301 	add.w	r3, ip, #1
 8020fc0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8020fc4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020fc8:	f887 c002 	strb.w	ip, [r7, #2]
 8020fcc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020fce:	3703      	adds	r7, #3
 8020fd0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020fd2:	441a      	add	r2, r3
 8020fd4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020fd6:	441d      	add	r5, r3
 8020fd8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020fda:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020fdc:	3b01      	subs	r3, #1
 8020fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8020fe0:	e69c      	b.n	8020d1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8020fe2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020fe4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8020fe6:	441c      	add	r4, r3
 8020fe8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020fea:	441d      	add	r5, r3
 8020fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fee:	9429      	str	r4, [sp, #164]	@ 0xa4
 8020ff0:	3b01      	subs	r3, #1
 8020ff2:	9309      	str	r3, [sp, #36]	@ 0x24
 8020ff4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020ff6:	3303      	adds	r3, #3
 8020ff8:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ffa:	e66f      	b.n	8020cdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020ffc:	d026      	beq.n	802104c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8020ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021000:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8021002:	3b01      	subs	r3, #1
 8021004:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021006:	fb00 4003 	mla	r0, r0, r3, r4
 802100a:	1400      	asrs	r0, r0, #16
 802100c:	f53f ae83 	bmi.w	8020d16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021010:	3901      	subs	r1, #1
 8021012:	4288      	cmp	r0, r1
 8021014:	f6bf ae7f 	bge.w	8020d16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021018:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802101a:	fb01 5303 	mla	r3, r1, r3, r5
 802101e:	141b      	asrs	r3, r3, #16
 8021020:	f53f ae79 	bmi.w	8020d16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021024:	3a01      	subs	r2, #1
 8021026:	4293      	cmp	r3, r2
 8021028:	f6bf ae75 	bge.w	8020d16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802102c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802102e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021032:	f103 0e03 	add.w	lr, r3, #3
 8021036:	f1bb 0f00 	cmp.w	fp, #0
 802103a:	dc71      	bgt.n	8021120 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802103c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802103e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021042:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021044:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021048:	4423      	add	r3, r4
 802104a:	930c      	str	r3, [sp, #48]	@ 0x30
 802104c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802104e:	2b00      	cmp	r3, #0
 8021050:	f340 81b5 	ble.w	80213be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8021054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021058:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802105a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802105e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021062:	eef0 6a62 	vmov.f32	s13, s5
 8021066:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802106a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802106e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021072:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8021076:	eef0 6a43 	vmov.f32	s13, s6
 802107a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802107e:	ee16 5a90 	vmov	r5, s13
 8021082:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021086:	ee61 7a27 	vmul.f32	s15, s2, s15
 802108a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802108e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021092:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021096:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802109a:	ee12 2a90 	vmov	r2, s5
 802109e:	eef0 2a47 	vmov.f32	s5, s14
 80210a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80210a6:	ee13 2a10 	vmov	r2, s6
 80210aa:	932b      	str	r3, [sp, #172]	@ 0xac
 80210ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80210ae:	eeb0 3a67 	vmov.f32	s6, s15
 80210b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80210b6:	932c      	str	r3, [sp, #176]	@ 0xb0
 80210b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80210ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80210bc:	3b01      	subs	r3, #1
 80210be:	9319      	str	r3, [sp, #100]	@ 0x64
 80210c0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80210c2:	bf08      	it	eq
 80210c4:	4613      	moveq	r3, r2
 80210c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80210c8:	e5fa      	b.n	8020cc0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80210ca:	2900      	cmp	r1, #0
 80210cc:	f43f ae6c 	beq.w	8020da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80210d0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80210d4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80210d8:	900a      	str	r0, [sp, #40]	@ 0x28
 80210da:	0e00      	lsrs	r0, r0, #24
 80210dc:	9013      	str	r0, [sp, #76]	@ 0x4c
 80210de:	e663      	b.n	8020da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80210e0:	f113 0801 	adds.w	r8, r3, #1
 80210e4:	f53f af72 	bmi.w	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80210e8:	4540      	cmp	r0, r8
 80210ea:	f6ff af6f 	blt.w	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80210ee:	f11c 0801 	adds.w	r8, ip, #1
 80210f2:	f53f af6b 	bmi.w	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80210f6:	45c6      	cmp	lr, r8
 80210f8:	f6ff af68 	blt.w	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80210fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80210fe:	b200      	sxth	r0, r0
 8021100:	9302      	str	r3, [sp, #8]
 8021102:	fa0f f38e 	sxth.w	r3, lr
 8021106:	9000      	str	r0, [sp, #0]
 8021108:	9301      	str	r3, [sp, #4]
 802110a:	4633      	mov	r3, r6
 802110c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802110e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021112:	e9cd c203 	strd	ip, r2, [sp, #12]
 8021116:	4639      	mov	r1, r7
 8021118:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802111a:	f7ff fc74 	bl	8020a06 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 802111e:	e755      	b.n	8020fcc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021120:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021122:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021126:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8021128:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802112c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802112e:	1427      	asrs	r7, r4, #16
 8021130:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021132:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021136:	142b      	asrs	r3, r5, #16
 8021138:	fb01 7303 	mla	r3, r1, r3, r7
 802113c:	18e7      	adds	r7, r4, r3
 802113e:	5ce3      	ldrb	r3, [r4, r3]
 8021140:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021144:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021148:	2a00      	cmp	r2, #0
 802114a:	f000 812e 	beq.w	80213aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 802114e:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021152:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021156:	9410      	str	r4, [sp, #64]	@ 0x40
 8021158:	0e24      	lsrs	r4, r4, #24
 802115a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802115c:	b170      	cbz	r0, 802117c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 802115e:	eb07 0801 	add.w	r8, r7, r1
 8021162:	5c79      	ldrb	r1, [r7, r1]
 8021164:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021168:	910b      	str	r1, [sp, #44]	@ 0x2c
 802116a:	0e09      	lsrs	r1, r1, #24
 802116c:	9114      	str	r1, [sp, #80]	@ 0x50
 802116e:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021172:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021176:	9111      	str	r1, [sp, #68]	@ 0x44
 8021178:	0e09      	lsrs	r1, r1, #24
 802117a:	9118      	str	r1, [sp, #96]	@ 0x60
 802117c:	b292      	uxth	r2, r2
 802117e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021180:	b280      	uxth	r0, r0
 8021182:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021184:	fb02 f900 	mul.w	r9, r2, r0
 8021188:	0112      	lsls	r2, r2, #4
 802118a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802118e:	eba2 0809 	sub.w	r8, r2, r9
 8021192:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021196:	b280      	uxth	r0, r0
 8021198:	fa1f f888 	uxth.w	r8, r8
 802119c:	1a12      	subs	r2, r2, r0
 802119e:	fb08 f101 	mul.w	r1, r8, r1
 80211a2:	b292      	uxth	r2, r2
 80211a4:	fb02 110c 	mla	r1, r2, ip, r1
 80211a8:	fb00 1104 	mla	r1, r0, r4, r1
 80211ac:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80211ae:	fb09 1104 	mla	r1, r9, r4, r1
 80211b2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80211b6:	2900      	cmp	r1, #0
 80211b8:	f000 80ec 	beq.w	8021394 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80211bc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80211c0:	d019      	beq.n	80211f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80211c2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80211c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80211ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80211ce:	fb0c fc03 	mul.w	ip, ip, r3
 80211d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80211d6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80211da:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80211de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80211e2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80211e6:	4453      	add	r3, sl
 80211e8:	0a3f      	lsrs	r7, r7, #8
 80211ea:	0a1b      	lsrs	r3, r3, #8
 80211ec:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80211f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80211f4:	433b      	orrs	r3, r7
 80211f6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80211f8:	2cff      	cmp	r4, #255	@ 0xff
 80211fa:	d020      	beq.n	802123e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80211fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80211fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021202:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021204:	4367      	muls	r7, r4
 8021206:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021208:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802120c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021210:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8021212:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021216:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802121a:	fb04 fa0a 	mul.w	sl, r4, sl
 802121e:	44bc      	add	ip, r7
 8021220:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021224:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021228:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802122c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021230:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021234:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021238:	ea4c 040a 	orr.w	r4, ip, sl
 802123c:	9410      	str	r4, [sp, #64]	@ 0x40
 802123e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021240:	2cff      	cmp	r4, #255	@ 0xff
 8021242:	d020      	beq.n	8021286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8021244:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021246:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802124a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802124c:	4367      	muls	r7, r4
 802124e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021250:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021254:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021258:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802125a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802125e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021262:	fb04 fa0a 	mul.w	sl, r4, sl
 8021266:	44bc      	add	ip, r7
 8021268:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802126c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021270:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021274:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021278:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802127c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021280:	ea4c 040a 	orr.w	r4, ip, sl
 8021284:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021286:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021288:	2cff      	cmp	r4, #255	@ 0xff
 802128a:	d020      	beq.n	80212ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802128c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802128e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021292:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8021294:	4367      	muls	r7, r4
 8021296:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021298:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802129c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80212a0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 80212a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80212a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80212aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80212ae:	44bc      	add	ip, r7
 80212b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80212b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80212b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80212bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80212c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80212c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80212c8:	ea4c 040a 	orr.w	r4, ip, sl
 80212cc:	9411      	str	r4, [sp, #68]	@ 0x44
 80212ce:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80212d0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80212d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80212d8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80212dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80212de:	fb08 f707 	mul.w	r7, r8, r7
 80212e2:	fb02 770c 	mla	r7, r2, ip, r7
 80212e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80212ea:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80212ec:	fb00 770c 	mla	r7, r0, ip, r7
 80212f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80212f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80212f6:	fb09 770c 	mla	r7, r9, ip, r7
 80212fa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80212fe:	fb08 f80c 	mul.w	r8, r8, ip
 8021302:	0a3f      	lsrs	r7, r7, #8
 8021304:	fb02 8303 	mla	r3, r2, r3, r8
 8021308:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802130a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802130e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021312:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021314:	fb00 330a 	mla	r3, r0, sl, r3
 8021318:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802131c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802131e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021324:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021328:	434b      	muls	r3, r1
 802132a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802132e:	1c59      	adds	r1, r3, #1
 8021330:	ea47 070c 	orr.w	r7, r7, ip
 8021334:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021338:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802133c:	b2fa      	uxtb	r2, r7
 802133e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8021342:	fb12 f200 	smulbb	r2, r2, r0
 8021346:	b2c9      	uxtb	r1, r1
 8021348:	fb03 2301 	mla	r3, r3, r1, r2
 802134c:	b29b      	uxth	r3, r3
 802134e:	1c5a      	adds	r2, r3, #1
 8021350:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021354:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8021358:	fb12 f201 	smulbb	r2, r2, r1
 802135c:	121b      	asrs	r3, r3, #8
 802135e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021362:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021366:	0c3f      	lsrs	r7, r7, #16
 8021368:	fb03 2300 	mla	r3, r3, r0, r2
 802136c:	b29b      	uxth	r3, r3
 802136e:	1c5a      	adds	r2, r3, #1
 8021370:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021374:	121b      	asrs	r3, r3, #8
 8021376:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802137a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802137e:	fb13 f101 	smulbb	r1, r3, r1
 8021382:	fb07 1700 	mla	r7, r7, r0, r1
 8021386:	b2bf      	uxth	r7, r7
 8021388:	1c7b      	adds	r3, r7, #1
 802138a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802138e:	123f      	asrs	r7, r7, #8
 8021390:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021394:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021396:	f10e 0e03 	add.w	lr, lr, #3
 802139a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802139c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80213a0:	441a      	add	r2, r3
 80213a2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80213a4:	9229      	str	r2, [sp, #164]	@ 0xa4
 80213a6:	441d      	add	r5, r3
 80213a8:	e645      	b.n	8021036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80213aa:	2800      	cmp	r0, #0
 80213ac:	f43f aee6 	beq.w	802117c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80213b0:	5c79      	ldrb	r1, [r7, r1]
 80213b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80213b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80213b8:	0e09      	lsrs	r1, r1, #24
 80213ba:	9114      	str	r1, [sp, #80]	@ 0x50
 80213bc:	e6de      	b.n	802117c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80213be:	b01f      	add	sp, #124	@ 0x7c
 80213c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080213c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80213c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213c8:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80213cc:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 80213d0:	2d00      	cmp	r5, #0
 80213d2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80213d6:	fb05 700e 	mla	r0, r5, lr, r7
 80213da:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80213de:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 80213e2:	eb02 0800 	add.w	r8, r2, r0
 80213e6:	f2c0 8105 	blt.w	80215f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80213ea:	45a9      	cmp	r9, r5
 80213ec:	f340 8102 	ble.w	80215f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80213f0:	2f00      	cmp	r7, #0
 80213f2:	f2c0 80fd 	blt.w	80215f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80213f6:	45be      	cmp	lr, r7
 80213f8:	f340 80fa 	ble.w	80215f0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80213fc:	5c12      	ldrb	r2, [r2, r0]
 80213fe:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021402:	1c7a      	adds	r2, r7, #1
 8021404:	f100 80f9 	bmi.w	80215fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8021408:	4596      	cmp	lr, r2
 802140a:	f340 80f6 	ble.w	80215fa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 802140e:	2c00      	cmp	r4, #0
 8021410:	f000 80f5 	beq.w	80215fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8021414:	f898 2001 	ldrb.w	r2, [r8, #1]
 8021418:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 802141c:	3501      	adds	r5, #1
 802141e:	f100 80f2 	bmi.w	8021606 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8021422:	45a9      	cmp	r9, r5
 8021424:	f340 80ef 	ble.w	8021606 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8021428:	f1bc 0f00 	cmp.w	ip, #0
 802142c:	f000 80ee 	beq.w	802160c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8021430:	2f00      	cmp	r7, #0
 8021432:	f2c0 80e6 	blt.w	8021602 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8021436:	45be      	cmp	lr, r7
 8021438:	f340 80e3 	ble.w	8021602 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 802143c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8021440:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8021444:	3701      	adds	r7, #1
 8021446:	f100 80e4 	bmi.w	8021612 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 802144a:	45be      	cmp	lr, r7
 802144c:	f340 80e1 	ble.w	8021612 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8021450:	2c00      	cmp	r4, #0
 8021452:	f000 80e0 	beq.w	8021616 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8021456:	44c6      	add	lr, r8
 8021458:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802145c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8021460:	b2a3      	uxth	r3, r4
 8021462:	fa1f fc8c 	uxth.w	ip, ip
 8021466:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802146a:	fb0c fe03 	mul.w	lr, ip, r3
 802146e:	011b      	lsls	r3, r3, #4
 8021470:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8021474:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8021478:	eba3 070e 	sub.w	r7, r3, lr
 802147c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8021480:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8021484:	fa1f f48c 	uxth.w	r4, ip
 8021488:	b2bf      	uxth	r7, r7
 802148a:	1b1b      	subs	r3, r3, r4
 802148c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021490:	fb07 fc0a 	mul.w	ip, r7, sl
 8021494:	b29b      	uxth	r3, r3
 8021496:	fb03 cc0b 	mla	ip, r3, fp, ip
 802149a:	9300      	str	r3, [sp, #0]
 802149c:	fb04 cc09 	mla	ip, r4, r9, ip
 80214a0:	fb0e cc08 	mla	ip, lr, r8, ip
 80214a4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80214a8:	9301      	str	r3, [sp, #4]
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	f000 809d 	beq.w	80215ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 80214b0:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80214b4:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80214b8:	fb0b fc0c 	mul.w	ip, fp, ip
 80214bc:	fb0b f606 	mul.w	r6, fp, r6
 80214c0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80214c4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80214c8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80214cc:	44dc      	add	ip, fp
 80214ce:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80214d2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80214d6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214da:	fb0a fb0b 	mul.w	fp, sl, fp
 80214de:	fb0a fa00 	mul.w	sl, sl, r0
 80214e2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80214e6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80214ea:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80214ee:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80214f2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80214f6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80214fa:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80214fe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021502:	0a36      	lsrs	r6, r6, #8
 8021504:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021508:	44dc      	add	ip, fp
 802150a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802150e:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021512:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021516:	fb09 fb0b 	mul.w	fp, r9, fp
 802151a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802151e:	fb09 f905 	mul.w	r9, r9, r5
 8021522:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8021526:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802152a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802152e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021532:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021536:	fb0c fc07 	mul.w	ip, ip, r7
 802153a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802153e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8021542:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021546:	4458      	add	r0, fp
 8021548:	fb08 f505 	mul.w	r5, r8, r5
 802154c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021550:	fb08 f802 	mul.w	r8, r8, r2
 8021554:	0a00      	lsrs	r0, r0, #8
 8021556:	0a2a      	lsrs	r2, r5, #8
 8021558:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 802155c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021560:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021564:	4415      	add	r5, r2
 8021566:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802156a:	0a2d      	lsrs	r5, r5, #8
 802156c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021570:	9a00      	ldr	r2, [sp, #0]
 8021572:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8021576:	fb03 cc02 	mla	ip, r3, r2, ip
 802157a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802157e:	9b01      	ldr	r3, [sp, #4]
 8021580:	fb05 c50e 	mla	r5, r5, lr, ip
 8021584:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8021588:	43db      	mvns	r3, r3
 802158a:	fb00 5004 	mla	r0, r0, r4, r5
 802158e:	b2db      	uxtb	r3, r3
 8021590:	0a00      	lsrs	r0, r0, #8
 8021592:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8021596:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 802159a:	4378      	muls	r0, r7
 802159c:	fb02 0006 	mla	r0, r2, r6, r0
 80215a0:	780a      	ldrb	r2, [r1, #0]
 80215a2:	fb0e 0e08 	mla	lr, lr, r8, r0
 80215a6:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80215aa:	fb04 e000 	mla	r0, r4, r0, lr
 80215ae:	fb02 f403 	mul.w	r4, r2, r3
 80215b2:	0a00      	lsrs	r0, r0, #8
 80215b4:	1c62      	adds	r2, r4, #1
 80215b6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80215ba:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80215be:	4328      	orrs	r0, r5
 80215c0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80215c4:	700a      	strb	r2, [r1, #0]
 80215c6:	784a      	ldrb	r2, [r1, #1]
 80215c8:	435a      	muls	r2, r3
 80215ca:	1c54      	adds	r4, r2, #1
 80215cc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80215d0:	0a02      	lsrs	r2, r0, #8
 80215d2:	0c00      	lsrs	r0, r0, #16
 80215d4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80215d8:	704a      	strb	r2, [r1, #1]
 80215da:	788a      	ldrb	r2, [r1, #2]
 80215dc:	4353      	muls	r3, r2
 80215de:	1c5a      	adds	r2, r3, #1
 80215e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80215e4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80215e8:	7088      	strb	r0, [r1, #2]
 80215ea:	b003      	add	sp, #12
 80215ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215f0:	2600      	movs	r6, #0
 80215f2:	e706      	b.n	8021402 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80215f4:	2000      	movs	r0, #0
 80215f6:	4606      	mov	r6, r0
 80215f8:	e710      	b.n	802141c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80215fa:	2000      	movs	r0, #0
 80215fc:	e70e      	b.n	802141c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80215fe:	4620      	mov	r0, r4
 8021600:	e70c      	b.n	802141c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8021602:	2500      	movs	r5, #0
 8021604:	e71e      	b.n	8021444 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8021606:	2200      	movs	r2, #0
 8021608:	4615      	mov	r5, r2
 802160a:	e729      	b.n	8021460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 802160c:	4662      	mov	r2, ip
 802160e:	4665      	mov	r5, ip
 8021610:	e726      	b.n	8021460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021612:	2200      	movs	r2, #0
 8021614:	e724      	b.n	8021460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8021616:	4622      	mov	r2, r4
 8021618:	e722      	b.n	8021460 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0802161a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802161a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802161e:	b09b      	sub	sp, #108	@ 0x6c
 8021620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021624:	9218      	str	r2, [sp, #96]	@ 0x60
 8021626:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8021628:	9019      	str	r0, [sp, #100]	@ 0x64
 802162a:	9116      	str	r1, [sp, #88]	@ 0x58
 802162c:	6850      	ldr	r0, [r2, #4]
 802162e:	9307      	str	r3, [sp, #28]
 8021630:	6812      	ldr	r2, [r2, #0]
 8021632:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8021634:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8021638:	fb00 1303 	mla	r3, r0, r3, r1
 802163c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021640:	18d3      	adds	r3, r2, r3
 8021642:	930a      	str	r3, [sp, #40]	@ 0x28
 8021644:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021646:	681b      	ldr	r3, [r3, #0]
 8021648:	930f      	str	r3, [sp, #60]	@ 0x3c
 802164a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802164c:	685e      	ldr	r6, [r3, #4]
 802164e:	3604      	adds	r6, #4
 8021650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021652:	2b00      	cmp	r3, #0
 8021654:	dc03      	bgt.n	802165e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8021656:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021658:	2b00      	cmp	r3, #0
 802165a:	f340 834f 	ble.w	8021cfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 802165e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021660:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021664:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021668:	1e48      	subs	r0, r1, #1
 802166a:	1e57      	subs	r7, r2, #1
 802166c:	9b07      	ldr	r3, [sp, #28]
 802166e:	2b00      	cmp	r3, #0
 8021670:	f340 8178 	ble.w	8021964 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021674:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021676:	142b      	asrs	r3, r5, #16
 8021678:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802167c:	d406      	bmi.n	802168c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802167e:	4584      	cmp	ip, r0
 8021680:	da04      	bge.n	802168c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021682:	2b00      	cmp	r3, #0
 8021684:	db02      	blt.n	802168c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021686:	42bb      	cmp	r3, r7
 8021688:	f2c0 816d 	blt.w	8021966 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 802168c:	f11c 0c01 	adds.w	ip, ip, #1
 8021690:	f100 815b 	bmi.w	802194a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8021694:	4561      	cmp	r1, ip
 8021696:	f2c0 8158 	blt.w	802194a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802169a:	3301      	adds	r3, #1
 802169c:	f100 8155 	bmi.w	802194a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80216a0:	429a      	cmp	r2, r3
 80216a2:	f2c0 8152 	blt.w	802194a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 80216a6:	9b07      	ldr	r3, [sp, #28]
 80216a8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80216aa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80216ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	f340 8178 	ble.w	80219a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80216b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80216b6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80216ba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80216be:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80216c2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80216c4:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80216c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80216ca:	141b      	asrs	r3, r3, #16
 80216cc:	f100 81ba 	bmi.w	8021a44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80216d0:	f101 38ff 	add.w	r8, r1, #4294967295
 80216d4:	4543      	cmp	r3, r8
 80216d6:	f280 81b5 	bge.w	8021a44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80216da:	f1bc 0f00 	cmp.w	ip, #0
 80216de:	f2c0 81b1 	blt.w	8021a44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80216e2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80216e6:	45c4      	cmp	ip, r8
 80216e8:	f280 81ac 	bge.w	8021a44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80216ec:	b209      	sxth	r1, r1
 80216ee:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80216f0:	fb0c 3301 	mla	r3, ip, r1, r3
 80216f4:	eb04 0803 	add.w	r8, r4, r3
 80216f8:	5ce3      	ldrb	r3, [r4, r3]
 80216fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80216fe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8021702:	2a00      	cmp	r2, #0
 8021704:	f000 8193 	beq.w	8021a2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8021708:	f898 c001 	ldrb.w	ip, [r8, #1]
 802170c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8021710:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021712:	0e24      	lsrs	r4, r4, #24
 8021714:	9412      	str	r4, [sp, #72]	@ 0x48
 8021716:	b178      	cbz	r0, 8021738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021718:	eb08 0c01 	add.w	ip, r8, r1
 802171c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021720:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021724:	9108      	str	r1, [sp, #32]
 8021726:	0e09      	lsrs	r1, r1, #24
 8021728:	9110      	str	r1, [sp, #64]	@ 0x40
 802172a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802172e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021732:	910c      	str	r1, [sp, #48]	@ 0x30
 8021734:	0e09      	lsrs	r1, r1, #24
 8021736:	9113      	str	r1, [sp, #76]	@ 0x4c
 8021738:	b292      	uxth	r2, r2
 802173a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802173c:	b280      	uxth	r0, r0
 802173e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021740:	fb02 f900 	mul.w	r9, r2, r0
 8021744:	0112      	lsls	r2, r2, #4
 8021746:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802174a:	eba2 0809 	sub.w	r8, r2, r9
 802174e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8021752:	b280      	uxth	r0, r0
 8021754:	fa1f f888 	uxth.w	r8, r8
 8021758:	1a12      	subs	r2, r2, r0
 802175a:	fb08 f101 	mul.w	r1, r8, r1
 802175e:	b292      	uxth	r2, r2
 8021760:	fb02 110e 	mla	r1, r2, lr, r1
 8021764:	fb00 1104 	mla	r1, r0, r4, r1
 8021768:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802176a:	fb09 1104 	mla	r1, r9, r4, r1
 802176e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021772:	2900      	cmp	r1, #0
 8021774:	f000 80de 	beq.w	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021778:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802177c:	d01b      	beq.n	80217b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802177e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021782:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021786:	fb0e fa0a 	mul.w	sl, lr, sl
 802178a:	fb0e fe03 	mul.w	lr, lr, r3
 802178e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021792:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021796:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802179a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802179e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80217a2:	4453      	add	r3, sl
 80217a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217a8:	0a1b      	lsrs	r3, r3, #8
 80217aa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80217ae:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80217b2:	ea43 030c 	orr.w	r3, r3, ip
 80217b6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80217b8:	2cff      	cmp	r4, #255	@ 0xff
 80217ba:	d021      	beq.n	8021800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80217bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80217be:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80217c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80217c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80217c8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80217ca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80217ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80217d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80217d4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80217d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80217dc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80217e0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80217e4:	44de      	add	lr, fp
 80217e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80217ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80217ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80217f6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80217fa:	ea4e 040a 	orr.w	r4, lr, sl
 80217fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021800:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8021802:	2cff      	cmp	r4, #255	@ 0xff
 8021804:	d021      	beq.n	802184a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8021806:	9c08      	ldr	r4, [sp, #32]
 8021808:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802180c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802180e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021812:	9c08      	ldr	r4, [sp, #32]
 8021814:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021818:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802181a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802181e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021822:	fb04 fa0a 	mul.w	sl, r4, sl
 8021826:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802182a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802182e:	44de      	add	lr, fp
 8021830:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021834:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021838:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802183c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021840:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021844:	ea4e 040a 	orr.w	r4, lr, sl
 8021848:	9408      	str	r4, [sp, #32]
 802184a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802184c:	2cff      	cmp	r4, #255	@ 0xff
 802184e:	d021      	beq.n	8021894 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021850:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021852:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021856:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021858:	fb04 fb0b 	mul.w	fp, r4, fp
 802185c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802185e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021862:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021864:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021868:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802186c:	fb04 fa0a 	mul.w	sl, r4, sl
 8021870:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021874:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021878:	44de      	add	lr, fp
 802187a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802187e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021882:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021886:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802188a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802188e:	ea4e 040a 	orr.w	r4, lr, sl
 8021892:	940c      	str	r4, [sp, #48]	@ 0x30
 8021894:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021896:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 802189a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802189e:	43c9      	mvns	r1, r1
 80218a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80218a4:	9c08      	ldr	r4, [sp, #32]
 80218a6:	b2c9      	uxtb	r1, r1
 80218a8:	fb08 fc0c 	mul.w	ip, r8, ip
 80218ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 80218b0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80218b4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80218b6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80218ba:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80218be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80218c0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80218c4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80218c8:	fb08 f80e 	mul.w	r8, r8, lr
 80218cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218d0:	fb02 8303 	mla	r3, r2, r3, r8
 80218d4:	9a08      	ldr	r2, [sp, #32]
 80218d6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80218da:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80218de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80218e0:	fb00 330a 	mla	r3, r0, sl, r3
 80218e4:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80218e8:	fb09 3900 	mla	r9, r9, r0, r3
 80218ec:	783b      	ldrb	r3, [r7, #0]
 80218ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80218f2:	fb03 f201 	mul.w	r2, r3, r1
 80218f6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80218fa:	1c53      	adds	r3, r2, #1
 80218fc:	ea4c 0c09 	orr.w	ip, ip, r9
 8021900:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021904:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8021908:	703b      	strb	r3, [r7, #0]
 802190a:	787b      	ldrb	r3, [r7, #1]
 802190c:	434b      	muls	r3, r1
 802190e:	1c5a      	adds	r2, r3, #1
 8021910:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021914:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8021918:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802191c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021920:	707b      	strb	r3, [r7, #1]
 8021922:	78bb      	ldrb	r3, [r7, #2]
 8021924:	4359      	muls	r1, r3
 8021926:	1c4b      	adds	r3, r1, #1
 8021928:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802192c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8021930:	f887 c002 	strb.w	ip, [r7, #2]
 8021934:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021936:	3703      	adds	r7, #3
 8021938:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802193a:	441a      	add	r2, r3
 802193c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802193e:	441d      	add	r5, r3
 8021940:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021942:	9225      	str	r2, [sp, #148]	@ 0x94
 8021944:	3b01      	subs	r3, #1
 8021946:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021948:	e6b0      	b.n	80216ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802194a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802194c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802194e:	441c      	add	r4, r3
 8021950:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021952:	441d      	add	r5, r3
 8021954:	9b07      	ldr	r3, [sp, #28]
 8021956:	9425      	str	r4, [sp, #148]	@ 0x94
 8021958:	3b01      	subs	r3, #1
 802195a:	9307      	str	r3, [sp, #28]
 802195c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802195e:	3303      	adds	r3, #3
 8021960:	930a      	str	r3, [sp, #40]	@ 0x28
 8021962:	e683      	b.n	802166c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021964:	d026      	beq.n	80219b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8021966:	9b07      	ldr	r3, [sp, #28]
 8021968:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802196a:	3b01      	subs	r3, #1
 802196c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 802196e:	fb00 4003 	mla	r0, r0, r3, r4
 8021972:	1400      	asrs	r0, r0, #16
 8021974:	f53f ae97 	bmi.w	80216a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021978:	3901      	subs	r1, #1
 802197a:	4288      	cmp	r0, r1
 802197c:	f6bf ae93 	bge.w	80216a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021980:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021982:	fb01 5303 	mla	r3, r1, r3, r5
 8021986:	141b      	asrs	r3, r3, #16
 8021988:	f53f ae8d 	bmi.w	80216a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802198c:	3a01      	subs	r2, #1
 802198e:	4293      	cmp	r3, r2
 8021990:	f6bf ae89 	bge.w	80216a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021996:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802199a:	f103 0e03 	add.w	lr, r3, #3
 802199e:	f1bb 0f00 	cmp.w	fp, #0
 80219a2:	dc6d      	bgt.n	8021a80 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 80219a4:	9b07      	ldr	r3, [sp, #28]
 80219a6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80219aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80219ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80219b0:	4423      	add	r3, r4
 80219b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80219b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	f340 81a0 	ble.w	8021cfc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 80219bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80219c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80219c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80219c6:	eeb0 6a62 	vmov.f32	s12, s5
 80219ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80219ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80219d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219d6:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 80219da:	eeb0 6a43 	vmov.f32	s12, s6
 80219de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80219e2:	ee16 5a10 	vmov	r5, s12
 80219e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80219ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80219ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80219f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80219f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80219fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80219fe:	ee12 2a90 	vmov	r2, s5
 8021a02:	eef0 2a47 	vmov.f32	s5, s14
 8021a06:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a0a:	ee13 2a10 	vmov	r2, s6
 8021a0e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021a10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021a12:	eeb0 3a67 	vmov.f32	s6, s15
 8021a16:	fb92 f3f3 	sdiv	r3, r2, r3
 8021a1a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021a1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021a1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021a20:	3b01      	subs	r3, #1
 8021a22:	9316      	str	r3, [sp, #88]	@ 0x58
 8021a24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021a26:	bf08      	it	eq
 8021a28:	4613      	moveq	r3, r2
 8021a2a:	9307      	str	r3, [sp, #28]
 8021a2c:	e610      	b.n	8021650 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021a2e:	2800      	cmp	r0, #0
 8021a30:	f43f ae82 	beq.w	8021738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021a34:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021a38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021a3c:	9108      	str	r1, [sp, #32]
 8021a3e:	0e09      	lsrs	r1, r1, #24
 8021a40:	9110      	str	r1, [sp, #64]	@ 0x40
 8021a42:	e679      	b.n	8021738 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021a44:	f113 0801 	adds.w	r8, r3, #1
 8021a48:	f53f af74 	bmi.w	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021a4c:	4541      	cmp	r1, r8
 8021a4e:	f6ff af71 	blt.w	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021a52:	f11c 0801 	adds.w	r8, ip, #1
 8021a56:	f53f af6d 	bmi.w	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021a5a:	45c6      	cmp	lr, r8
 8021a5c:	f6ff af6a 	blt.w	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021a60:	b209      	sxth	r1, r1
 8021a62:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8021a66:	fa0f f38e 	sxth.w	r3, lr
 8021a6a:	9100      	str	r1, [sp, #0]
 8021a6c:	4639      	mov	r1, r7
 8021a6e:	9301      	str	r3, [sp, #4]
 8021a70:	4633      	mov	r3, r6
 8021a72:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8021a76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021a78:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021a7a:	f7ff fca3 	bl	80213c4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021a7e:	e759      	b.n	8021934 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021a80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021a82:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021a86:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021a88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021a8c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021a8e:	1427      	asrs	r7, r4, #16
 8021a90:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021a92:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021a96:	142b      	asrs	r3, r5, #16
 8021a98:	fb01 7303 	mla	r3, r1, r3, r7
 8021a9c:	18e7      	adds	r7, r4, r3
 8021a9e:	5ce3      	ldrb	r3, [r4, r3]
 8021aa0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021aa4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021aa8:	2a00      	cmp	r2, #0
 8021aaa:	f000 811d 	beq.w	8021ce8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8021aae:	f897 8001 	ldrb.w	r8, [r7, #1]
 8021ab2:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8021ab6:	940d      	str	r4, [sp, #52]	@ 0x34
 8021ab8:	0e24      	lsrs	r4, r4, #24
 8021aba:	9414      	str	r4, [sp, #80]	@ 0x50
 8021abc:	b170      	cbz	r0, 8021adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021abe:	eb07 0801 	add.w	r8, r7, r1
 8021ac2:	5c79      	ldrb	r1, [r7, r1]
 8021ac4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021ac8:	9109      	str	r1, [sp, #36]	@ 0x24
 8021aca:	0e09      	lsrs	r1, r1, #24
 8021acc:	9111      	str	r1, [sp, #68]	@ 0x44
 8021ace:	f898 1001 	ldrb.w	r1, [r8, #1]
 8021ad2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021ad6:	910e      	str	r1, [sp, #56]	@ 0x38
 8021ad8:	0e09      	lsrs	r1, r1, #24
 8021ada:	9115      	str	r1, [sp, #84]	@ 0x54
 8021adc:	b292      	uxth	r2, r2
 8021ade:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021ae0:	b280      	uxth	r0, r0
 8021ae2:	fb02 f900 	mul.w	r9, r2, r0
 8021ae6:	0112      	lsls	r2, r2, #4
 8021ae8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021aec:	eba2 0809 	sub.w	r8, r2, r9
 8021af0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8021af4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021af6:	b280      	uxth	r0, r0
 8021af8:	fa1f f888 	uxth.w	r8, r8
 8021afc:	1a09      	subs	r1, r1, r0
 8021afe:	fb08 f202 	mul.w	r2, r8, r2
 8021b02:	b289      	uxth	r1, r1
 8021b04:	fb01 220c 	mla	r2, r1, ip, r2
 8021b08:	fb00 2204 	mla	r2, r0, r4, r2
 8021b0c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021b0e:	fb09 2204 	mla	r2, r9, r4, r2
 8021b12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021b16:	2a00      	cmp	r2, #0
 8021b18:	f000 80db 	beq.w	8021cd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021b1c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8021b20:	d019      	beq.n	8021b56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8021b22:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021b26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021b2a:	fb0c fa0a 	mul.w	sl, ip, sl
 8021b2e:	fb0c fc03 	mul.w	ip, ip, r3
 8021b32:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021b36:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021b3a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8021b3e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021b42:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021b46:	4453      	add	r3, sl
 8021b48:	0a3f      	lsrs	r7, r7, #8
 8021b4a:	0a1b      	lsrs	r3, r3, #8
 8021b4c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021b50:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021b54:	433b      	orrs	r3, r7
 8021b56:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021b58:	2cff      	cmp	r4, #255	@ 0xff
 8021b5a:	d020      	beq.n	8021b9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021b5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021b5e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021b62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021b64:	4367      	muls	r7, r4
 8021b66:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021b68:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021b6c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021b70:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021b72:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021b76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021b7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021b7e:	44bc      	add	ip, r7
 8021b80:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021b84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021b88:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021b8c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021b90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021b94:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021b98:	ea4c 040a 	orr.w	r4, ip, sl
 8021b9c:	940d      	str	r4, [sp, #52]	@ 0x34
 8021b9e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021ba0:	2cff      	cmp	r4, #255	@ 0xff
 8021ba2:	d020      	beq.n	8021be6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8021ba4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021ba6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021baa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021bac:	4367      	muls	r7, r4
 8021bae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021bb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021bb4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021bb8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021bba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021bbe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021bc2:	fb04 fa0a 	mul.w	sl, r4, sl
 8021bc6:	44bc      	add	ip, r7
 8021bc8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021bcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bd0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021bd4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021bd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021bdc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021be0:	ea4c 040a 	orr.w	r4, ip, sl
 8021be4:	9409      	str	r4, [sp, #36]	@ 0x24
 8021be6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021be8:	2cff      	cmp	r4, #255	@ 0xff
 8021bea:	d020      	beq.n	8021c2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8021bec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021bee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021bf2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021bf4:	4367      	muls	r7, r4
 8021bf6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021bf8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021bfc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021c00:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021c02:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021c06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021c0a:	fb04 fa0a 	mul.w	sl, r4, sl
 8021c0e:	44bc      	add	ip, r7
 8021c10:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021c14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021c1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021c20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021c24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021c28:	ea4c 040a 	orr.w	r4, ip, sl
 8021c2c:	940e      	str	r4, [sp, #56]	@ 0x38
 8021c2e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021c30:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8021c34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021c38:	43d2      	mvns	r2, r2
 8021c3a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021c3e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021c40:	b2d2      	uxtb	r2, r2
 8021c42:	fb08 f707 	mul.w	r7, r8, r7
 8021c46:	fb01 770c 	mla	r7, r1, ip, r7
 8021c4a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021c4e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021c50:	fb00 770c 	mla	r7, r0, ip, r7
 8021c54:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021c58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021c5a:	fb09 770c 	mla	r7, r9, ip, r7
 8021c5e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8021c62:	fb08 f80c 	mul.w	r8, r8, ip
 8021c66:	0a3f      	lsrs	r7, r7, #8
 8021c68:	fb01 8303 	mla	r3, r1, r3, r8
 8021c6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021c6e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8021c72:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8021c76:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021c78:	fb00 330a 	mla	r3, r0, sl, r3
 8021c7c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8021c80:	fb09 3c0c 	mla	ip, r9, ip, r3
 8021c84:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021c88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021c8c:	fb03 f102 	mul.w	r1, r3, r2
 8021c90:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021c94:	1c4b      	adds	r3, r1, #1
 8021c96:	ea47 070c 	orr.w	r7, r7, ip
 8021c9a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021c9e:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021ca2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8021ca6:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021caa:	4353      	muls	r3, r2
 8021cac:	1c59      	adds	r1, r3, #1
 8021cae:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8021cb2:	0a3b      	lsrs	r3, r7, #8
 8021cb4:	0c3f      	lsrs	r7, r7, #16
 8021cb6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021cba:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021cbe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021cc2:	435a      	muls	r2, r3
 8021cc4:	1c53      	adds	r3, r2, #1
 8021cc6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021cca:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021cce:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021cd2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021cd4:	f10e 0e03 	add.w	lr, lr, #3
 8021cd8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8021cda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021cde:	441a      	add	r2, r3
 8021ce0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021ce2:	9225      	str	r2, [sp, #148]	@ 0x94
 8021ce4:	441d      	add	r5, r3
 8021ce6:	e65a      	b.n	802199e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021ce8:	2800      	cmp	r0, #0
 8021cea:	f43f aef7 	beq.w	8021adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021cee:	5c79      	ldrb	r1, [r7, r1]
 8021cf0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021cf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8021cf6:	0e09      	lsrs	r1, r1, #24
 8021cf8:	9111      	str	r1, [sp, #68]	@ 0x44
 8021cfa:	e6ef      	b.n	8021adc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021cfc:	b01b      	add	sp, #108	@ 0x6c
 8021cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021d02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8021d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d06:	b08d      	sub	sp, #52	@ 0x34
 8021d08:	468b      	mov	fp, r1
 8021d0a:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 8021d0e:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 8021d12:	fb0c 5703 	mla	r7, ip, r3, r5
 8021d16:	f1bc 0f00 	cmp.w	ip, #0
 8021d1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021d1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021d20:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 8021d24:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 8021d28:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 8021d2c:	eb02 0607 	add.w	r6, r2, r7
 8021d30:	f89b 4000 	ldrb.w	r4, [fp]
 8021d34:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8021d38:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8021d3c:	f2c0 80c1 	blt.w	8021ec2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8021d40:	45e6      	cmp	lr, ip
 8021d42:	f340 80be 	ble.w	8021ec2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8021d46:	2d00      	cmp	r5, #0
 8021d48:	f2c0 80b7 	blt.w	8021eba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021d4c:	42ab      	cmp	r3, r5
 8021d4e:	f340 80b4 	ble.w	8021eba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021d52:	5dd2      	ldrb	r2, [r2, r7]
 8021d54:	9205      	str	r2, [sp, #20]
 8021d56:	7872      	ldrb	r2, [r6, #1]
 8021d58:	9206      	str	r2, [sp, #24]
 8021d5a:	78b2      	ldrb	r2, [r6, #2]
 8021d5c:	9207      	str	r2, [sp, #28]
 8021d5e:	1c6a      	adds	r2, r5, #1
 8021d60:	f100 80b6 	bmi.w	8021ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021d64:	4293      	cmp	r3, r2
 8021d66:	f340 80b3 	ble.w	8021ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021d6a:	f1b8 0f00 	cmp.w	r8, #0
 8021d6e:	f000 80af 	beq.w	8021ed0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021d72:	78f2      	ldrb	r2, [r6, #3]
 8021d74:	9201      	str	r2, [sp, #4]
 8021d76:	7932      	ldrb	r2, [r6, #4]
 8021d78:	9202      	str	r2, [sp, #8]
 8021d7a:	7972      	ldrb	r2, [r6, #5]
 8021d7c:	9203      	str	r2, [sp, #12]
 8021d7e:	f11c 0c01 	adds.w	ip, ip, #1
 8021d82:	f100 80ad 	bmi.w	8021ee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021d86:	45e6      	cmp	lr, ip
 8021d88:	f340 80aa 	ble.w	8021ee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021d8c:	f1ba 0f00 	cmp.w	sl, #0
 8021d90:	f000 80a6 	beq.w	8021ee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021d94:	2d00      	cmp	r5, #0
 8021d96:	f2c0 809f 	blt.w	8021ed8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021d9a:	42ab      	cmp	r3, r5
 8021d9c:	f340 809c 	ble.w	8021ed8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021da0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021da4:	f816 9002 	ldrb.w	r9, [r6, r2]
 8021da8:	2203      	movs	r2, #3
 8021daa:	fb03 6c02 	mla	ip, r3, r2, r6
 8021dae:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8021db2:	f89c e002 	ldrb.w	lr, [ip, #2]
 8021db6:	9704      	str	r7, [sp, #16]
 8021db8:	3501      	adds	r5, #1
 8021dba:	f100 8098 	bmi.w	8021eee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021dbe:	42ab      	cmp	r3, r5
 8021dc0:	f340 8095 	ble.w	8021eee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021dc4:	f1b8 0f00 	cmp.w	r8, #0
 8021dc8:	f000 8091 	beq.w	8021eee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021dcc:	f04f 0c03 	mov.w	ip, #3
 8021dd0:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8021dd4:	5cb5      	ldrb	r5, [r6, r2]
 8021dd6:	fb03 620c 	mla	r2, r3, ip, r6
 8021dda:	fb03 630c 	mla	r3, r3, ip, r6
 8021dde:	7912      	ldrb	r2, [r2, #4]
 8021de0:	795e      	ldrb	r6, [r3, #5]
 8021de2:	fa1f f388 	uxth.w	r3, r8
 8021de6:	fa1f fc8a 	uxth.w	ip, sl
 8021dea:	fb03 f70c 	mul.w	r7, r3, ip
 8021dee:	011b      	lsls	r3, r3, #4
 8021df0:	9708      	str	r7, [sp, #32]
 8021df2:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8021df6:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8021dfa:	1bdb      	subs	r3, r3, r7
 8021dfc:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8021e00:	fa1f fc8c 	uxth.w	ip, ip
 8021e04:	b29b      	uxth	r3, r3
 8021e06:	9709      	str	r7, [sp, #36]	@ 0x24
 8021e08:	ebaa 0a0c 	sub.w	sl, sl, ip
 8021e0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8021e10:	fa1f fa8a 	uxth.w	sl, sl
 8021e14:	ea6f 0807 	mvn.w	r8, r7
 8021e18:	9f01      	ldr	r7, [sp, #4]
 8021e1a:	435f      	muls	r7, r3
 8021e1c:	9b05      	ldr	r3, [sp, #20]
 8021e1e:	fa5f f888 	uxtb.w	r8, r8
 8021e22:	fb0a 7703 	mla	r7, sl, r3, r7
 8021e26:	9b08      	ldr	r3, [sp, #32]
 8021e28:	fb14 f408 	smulbb	r4, r4, r8
 8021e2c:	fb0c 7709 	mla	r7, ip, r9, r7
 8021e30:	fb10 f008 	smulbb	r0, r0, r8
 8021e34:	fb11 f108 	smulbb	r1, r1, r8
 8021e38:	fb03 7705 	mla	r7, r3, r5, r7
 8021e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e3e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021e42:	fb07 4703 	mla	r7, r7, r3, r4
 8021e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021e48:	b2bf      	uxth	r7, r7
 8021e4a:	1c7c      	adds	r4, r7, #1
 8021e4c:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8021e50:	1224      	asrs	r4, r4, #8
 8021e52:	f88b 4000 	strb.w	r4, [fp]
 8021e56:	9c02      	ldr	r4, [sp, #8]
 8021e58:	435c      	muls	r4, r3
 8021e5a:	9b06      	ldr	r3, [sp, #24]
 8021e5c:	fb0a 4403 	mla	r4, sl, r3, r4
 8021e60:	9b04      	ldr	r3, [sp, #16]
 8021e62:	fb0c 4403 	mla	r4, ip, r3, r4
 8021e66:	9b08      	ldr	r3, [sp, #32]
 8021e68:	fb03 4402 	mla	r4, r3, r2, r4
 8021e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021e70:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021e74:	fb04 0403 	mla	r4, r4, r3, r0
 8021e78:	9b03      	ldr	r3, [sp, #12]
 8021e7a:	435a      	muls	r2, r3
 8021e7c:	b2a4      	uxth	r4, r4
 8021e7e:	4613      	mov	r3, r2
 8021e80:	9a07      	ldr	r2, [sp, #28]
 8021e82:	1c60      	adds	r0, r4, #1
 8021e84:	fb0a 3a02 	mla	sl, sl, r2, r3
 8021e88:	9b08      	ldr	r3, [sp, #32]
 8021e8a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8021e8e:	fb0c ac0e 	mla	ip, ip, lr, sl
 8021e92:	1224      	asrs	r4, r4, #8
 8021e94:	fb03 c606 	mla	r6, r3, r6, ip
 8021e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e9a:	f88b 4001 	strb.w	r4, [fp, #1]
 8021e9e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021ea2:	fb06 1103 	mla	r1, r6, r3, r1
 8021ea6:	b289      	uxth	r1, r1
 8021ea8:	1c4e      	adds	r6, r1, #1
 8021eaa:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8021eae:	1209      	asrs	r1, r1, #8
 8021eb0:	f88b 1002 	strb.w	r1, [fp, #2]
 8021eb4:	b00d      	add	sp, #52	@ 0x34
 8021eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021ebe:	9405      	str	r4, [sp, #20]
 8021ec0:	e74d      	b.n	8021d5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8021ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021ec6:	9401      	str	r4, [sp, #4]
 8021ec8:	9405      	str	r4, [sp, #20]
 8021eca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021ece:	e756      	b.n	8021d7e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021ed4:	9401      	str	r4, [sp, #4]
 8021ed6:	e752      	b.n	8021d7e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021ed8:	468e      	mov	lr, r1
 8021eda:	9004      	str	r0, [sp, #16]
 8021edc:	46a1      	mov	r9, r4
 8021ede:	e76b      	b.n	8021db8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8021ee0:	460e      	mov	r6, r1
 8021ee2:	4602      	mov	r2, r0
 8021ee4:	4625      	mov	r5, r4
 8021ee6:	468e      	mov	lr, r1
 8021ee8:	9004      	str	r0, [sp, #16]
 8021eea:	46a1      	mov	r9, r4
 8021eec:	e779      	b.n	8021de2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8021eee:	460e      	mov	r6, r1
 8021ef0:	4602      	mov	r2, r0
 8021ef2:	4625      	mov	r5, r4
 8021ef4:	e775      	b.n	8021de2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08021ef6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021efa:	b09f      	sub	sp, #124	@ 0x7c
 8021efc:	920e      	str	r2, [sp, #56]	@ 0x38
 8021efe:	9307      	str	r3, [sp, #28]
 8021f00:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8021f02:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8021f06:	901d      	str	r0, [sp, #116]	@ 0x74
 8021f08:	930c      	str	r3, [sp, #48]	@ 0x30
 8021f0a:	6850      	ldr	r0, [r2, #4]
 8021f0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021f0e:	6812      	ldr	r2, [r2, #0]
 8021f10:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8021f14:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8021f18:	fb00 1303 	mla	r3, r0, r3, r1
 8021f1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021f20:	18d3      	adds	r3, r2, r3
 8021f22:	9308      	str	r3, [sp, #32]
 8021f24:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021f2c:	43db      	mvns	r3, r3
 8021f2e:	b2db      	uxtb	r3, r3
 8021f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	dc03      	bgt.n	8021f40 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	f340 81f5 	ble.w	802232a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021f40:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021f42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021f46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021f4a:	1e48      	subs	r0, r1, #1
 8021f4c:	1e54      	subs	r4, r2, #1
 8021f4e:	9b07      	ldr	r3, [sp, #28]
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	f340 80d5 	ble.w	8022100 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021f56:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021f5a:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021f5e:	d406      	bmi.n	8021f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021f60:	4285      	cmp	r5, r0
 8021f62:	da04      	bge.n	8021f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	db02      	blt.n	8021f6e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021f68:	42a3      	cmp	r3, r4
 8021f6a:	f2c0 80ca 	blt.w	8022102 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021f6e:	3501      	adds	r5, #1
 8021f70:	f100 80bb 	bmi.w	80220ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021f74:	42a9      	cmp	r1, r5
 8021f76:	f2c0 80b8 	blt.w	80220ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021f7a:	3301      	adds	r3, #1
 8021f7c:	f100 80b5 	bmi.w	80220ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021f80:	429a      	cmp	r2, r3
 8021f82:	f2c0 80b2 	blt.w	80220ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021f86:	9b07      	ldr	r3, [sp, #28]
 8021f88:	9d08      	ldr	r5, [sp, #32]
 8021f8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8021f8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021f8e:	2b00      	cmp	r3, #0
 8021f90:	f340 80d6 	ble.w	8022140 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8021f94:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8021f96:	ea4f 4428 	mov.w	r4, r8, asr #16
 8021f9a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021f9c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021fa0:	68c6      	ldr	r6, [r0, #12]
 8021fa2:	ea5f 402a 	movs.w	r0, sl, asr #16
 8021fa6:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8021faa:	689b      	ldr	r3, [r3, #8]
 8021fac:	f100 810f 	bmi.w	80221ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021fb0:	1e5f      	subs	r7, r3, #1
 8021fb2:	42b8      	cmp	r0, r7
 8021fb4:	f280 810b 	bge.w	80221ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021fb8:	2c00      	cmp	r4, #0
 8021fba:	f2c0 8108 	blt.w	80221ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021fbe:	1e77      	subs	r7, r6, #1
 8021fc0:	42bc      	cmp	r4, r7
 8021fc2:	f280 8104 	bge.w	80221ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021fc6:	b21b      	sxth	r3, r3
 8021fc8:	fb04 0003 	mla	r0, r4, r3, r0
 8021fcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021fce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021fd2:	1826      	adds	r6, r4, r0
 8021fd4:	5c24      	ldrb	r4, [r4, r0]
 8021fd6:	78b7      	ldrb	r7, [r6, #2]
 8021fd8:	7870      	ldrb	r0, [r6, #1]
 8021fda:	970f      	str	r7, [sp, #60]	@ 0x3c
 8021fdc:	7977      	ldrb	r7, [r6, #5]
 8021fde:	f896 e003 	ldrb.w	lr, [r6, #3]
 8021fe2:	f896 c004 	ldrb.w	ip, [r6, #4]
 8021fe6:	9710      	str	r7, [sp, #64]	@ 0x40
 8021fe8:	b1c9      	cbz	r1, 802201e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021fea:	f04f 0b03 	mov.w	fp, #3
 8021fee:	f06f 0904 	mvn.w	r9, #4
 8021ff2:	3605      	adds	r6, #5
 8021ff4:	fb13 930b 	smlabb	r3, r3, fp, r9
 8021ff8:	eb06 0b03 	add.w	fp, r6, r3
 8021ffc:	5cf3      	ldrb	r3, [r6, r3]
 8021ffe:	9311      	str	r3, [sp, #68]	@ 0x44
 8022000:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022004:	9313      	str	r3, [sp, #76]	@ 0x4c
 8022006:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802200a:	9315      	str	r3, [sp, #84]	@ 0x54
 802200c:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8022010:	9312      	str	r3, [sp, #72]	@ 0x48
 8022012:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8022016:	9314      	str	r3, [sp, #80]	@ 0x50
 8022018:	f89b 3005 	ldrb.w	r3, [fp, #5]
 802201c:	9316      	str	r3, [sp, #88]	@ 0x58
 802201e:	b292      	uxth	r2, r2
 8022020:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8022022:	b289      	uxth	r1, r1
 8022024:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8022028:	fb02 f601 	mul.w	r6, r2, r1
 802202c:	0112      	lsls	r2, r2, #4
 802202e:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8022032:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 8022036:	1b92      	subs	r2, r2, r6
 8022038:	b289      	uxth	r1, r1
 802203a:	b292      	uxth	r2, r2
 802203c:	eba9 0901 	sub.w	r9, r9, r1
 8022040:	fb02 fe0e 	mul.w	lr, r2, lr
 8022044:	fa1f f989 	uxth.w	r9, r9
 8022048:	fb02 fc0c 	mul.w	ip, r2, ip
 802204c:	fb09 e404 	mla	r4, r9, r4, lr
 8022050:	f895 e000 	ldrb.w	lr, [r5]
 8022054:	fb09 c000 	mla	r0, r9, r0, ip
 8022058:	fb01 4407 	mla	r4, r1, r7, r4
 802205c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 802205e:	fb06 4407 	mla	r4, r6, r7, r4
 8022062:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022064:	fb1e fe07 	smulbb	lr, lr, r7
 8022068:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802206c:	fb04 e403 	mla	r4, r4, r3, lr
 8022070:	b2a4      	uxth	r4, r4
 8022072:	f104 0e01 	add.w	lr, r4, #1
 8022076:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 802207a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802207c:	fb01 0004 	mla	r0, r1, r4, r0
 8022080:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022082:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022086:	fb06 0004 	mla	r0, r6, r4, r0
 802208a:	786c      	ldrb	r4, [r5, #1]
 802208c:	f885 e000 	strb.w	lr, [r5]
 8022090:	fb14 f407 	smulbb	r4, r4, r7
 8022094:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022098:	fb00 4003 	mla	r0, r0, r3, r4
 802209c:	b280      	uxth	r0, r0
 802209e:	1c44      	adds	r4, r0, #1
 80220a0:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 80220a4:	1200      	asrs	r0, r0, #8
 80220a6:	7068      	strb	r0, [r5, #1]
 80220a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80220aa:	4342      	muls	r2, r0
 80220ac:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80220ae:	fb09 2200 	mla	r2, r9, r0, r2
 80220b2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80220b4:	fb01 2100 	mla	r1, r1, r0, r2
 80220b8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80220ba:	fb06 1602 	mla	r6, r6, r2, r1
 80220be:	78a9      	ldrb	r1, [r5, #2]
 80220c0:	fb11 f107 	smulbb	r1, r1, r7
 80220c4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80220c8:	fb06 1303 	mla	r3, r6, r3, r1
 80220cc:	b29b      	uxth	r3, r3
 80220ce:	1c5e      	adds	r6, r3, #1
 80220d0:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80220d4:	121b      	asrs	r3, r3, #8
 80220d6:	70ab      	strb	r3, [r5, #2]
 80220d8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80220da:	3503      	adds	r5, #3
 80220dc:	449a      	add	sl, r3
 80220de:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80220e0:	4498      	add	r8, r3
 80220e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80220e4:	3b01      	subs	r3, #1
 80220e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80220e8:	e750      	b.n	8021f8c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80220ea:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80220ec:	449a      	add	sl, r3
 80220ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80220f0:	4498      	add	r8, r3
 80220f2:	9b07      	ldr	r3, [sp, #28]
 80220f4:	3b01      	subs	r3, #1
 80220f6:	9307      	str	r3, [sp, #28]
 80220f8:	9b08      	ldr	r3, [sp, #32]
 80220fa:	3303      	adds	r3, #3
 80220fc:	9308      	str	r3, [sp, #32]
 80220fe:	e726      	b.n	8021f4e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022100:	d026      	beq.n	8022150 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8022102:	9b07      	ldr	r3, [sp, #28]
 8022104:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8022106:	3b01      	subs	r3, #1
 8022108:	fb00 a003 	mla	r0, r0, r3, sl
 802210c:	1400      	asrs	r0, r0, #16
 802210e:	f53f af3a 	bmi.w	8021f86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022112:	3901      	subs	r1, #1
 8022114:	4288      	cmp	r0, r1
 8022116:	f6bf af36 	bge.w	8021f86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802211a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802211c:	fb01 8303 	mla	r3, r1, r3, r8
 8022120:	141b      	asrs	r3, r3, #16
 8022122:	f53f af30 	bmi.w	8021f86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022126:	3a01      	subs	r2, #1
 8022128:	4293      	cmp	r3, r2
 802212a:	f6bf af2c 	bge.w	8021f86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802212e:	9b08      	ldr	r3, [sp, #32]
 8022130:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022134:	1cdd      	adds	r5, r3, #3
 8022136:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 802213a:	f1bc 0f00 	cmp.w	ip, #0
 802213e:	dc5f      	bgt.n	8022200 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8022140:	9b07      	ldr	r3, [sp, #28]
 8022142:	9a08      	ldr	r2, [sp, #32]
 8022144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022148:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802214c:	441a      	add	r2, r3
 802214e:	9208      	str	r2, [sp, #32]
 8022150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022152:	2b00      	cmp	r3, #0
 8022154:	f340 80e9 	ble.w	802232a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8022158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802215c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802215e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022162:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022166:	eef0 6a62 	vmov.f32	s13, s5
 802216a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802216e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022172:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022176:	ee16 aa90 	vmov	sl, s13
 802217a:	eef0 6a43 	vmov.f32	s13, s6
 802217e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022182:	ee16 8a90 	vmov	r8, s13
 8022186:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802218a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802218e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022192:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022196:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802219a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802219e:	ee12 2a90 	vmov	r2, s5
 80221a2:	eef0 2a47 	vmov.f32	s5, s14
 80221a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80221aa:	ee13 2a10 	vmov	r2, s6
 80221ae:	932b      	str	r3, [sp, #172]	@ 0xac
 80221b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221b2:	eeb0 3a67 	vmov.f32	s6, s15
 80221b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80221ba:	932c      	str	r3, [sp, #176]	@ 0xb0
 80221bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80221be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80221c0:	3b01      	subs	r3, #1
 80221c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80221c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80221c6:	bf08      	it	eq
 80221c8:	4613      	moveq	r3, r2
 80221ca:	9307      	str	r3, [sp, #28]
 80221cc:	e6b1      	b.n	8021f32 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80221ce:	1c47      	adds	r7, r0, #1
 80221d0:	d482      	bmi.n	80220d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80221d2:	42bb      	cmp	r3, r7
 80221d4:	db80      	blt.n	80220d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80221d6:	1c67      	adds	r7, r4, #1
 80221d8:	f53f af7e 	bmi.w	80220d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80221dc:	42be      	cmp	r6, r7
 80221de:	f6ff af7b 	blt.w	80220d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80221e2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80221e4:	b236      	sxth	r6, r6
 80221e6:	9001      	str	r0, [sp, #4]
 80221e8:	b21b      	sxth	r3, r3
 80221ea:	9600      	str	r6, [sp, #0]
 80221ec:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80221ee:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80221f2:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80221f6:	4629      	mov	r1, r5
 80221f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80221fa:	f7ff fd82 	bl	8021d02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80221fe:	e76b      	b.n	80220d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8022200:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8022202:	ea4f 402a 	mov.w	r0, sl, asr #16
 8022206:	f3c8 3203 	ubfx	r2, r8, #12, #4
 802220a:	f3ca 3303 	ubfx	r3, sl, #12, #4
 802220e:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8022212:	ea4f 4128 	mov.w	r1, r8, asr #16
 8022216:	fb07 0101 	mla	r1, r7, r1, r0
 802221a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802221c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022220:	1844      	adds	r4, r0, r1
 8022222:	5c40      	ldrb	r0, [r0, r1]
 8022224:	78a6      	ldrb	r6, [r4, #2]
 8022226:	7861      	ldrb	r1, [r4, #1]
 8022228:	960f      	str	r6, [sp, #60]	@ 0x3c
 802222a:	78e6      	ldrb	r6, [r4, #3]
 802222c:	910d      	str	r1, [sp, #52]	@ 0x34
 802222e:	9610      	str	r6, [sp, #64]	@ 0x40
 8022230:	f894 9004 	ldrb.w	r9, [r4, #4]
 8022234:	f894 b005 	ldrb.w	fp, [r4, #5]
 8022238:	b192      	cbz	r2, 8022260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 802223a:	f06f 0604 	mvn.w	r6, #4
 802223e:	2103      	movs	r1, #3
 8022240:	3405      	adds	r4, #5
 8022242:	fb17 6701 	smlabb	r7, r7, r1, r6
 8022246:	19e6      	adds	r6, r4, r7
 8022248:	5de4      	ldrb	r4, [r4, r7]
 802224a:	9417      	str	r4, [sp, #92]	@ 0x5c
 802224c:	7874      	ldrb	r4, [r6, #1]
 802224e:	9419      	str	r4, [sp, #100]	@ 0x64
 8022250:	78b4      	ldrb	r4, [r6, #2]
 8022252:	941b      	str	r4, [sp, #108]	@ 0x6c
 8022254:	78f4      	ldrb	r4, [r6, #3]
 8022256:	9418      	str	r4, [sp, #96]	@ 0x60
 8022258:	7934      	ldrb	r4, [r6, #4]
 802225a:	941a      	str	r4, [sp, #104]	@ 0x68
 802225c:	7974      	ldrb	r4, [r6, #5]
 802225e:	941c      	str	r4, [sp, #112]	@ 0x70
 8022260:	b29b      	uxth	r3, r3
 8022262:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8022264:	b292      	uxth	r2, r2
 8022266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022268:	3503      	adds	r5, #3
 802226a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802226e:	fb03 f402 	mul.w	r4, r3, r2
 8022272:	011b      	lsls	r3, r3, #4
 8022274:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8022278:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 802227c:	1b1b      	subs	r3, r3, r4
 802227e:	b292      	uxth	r2, r2
 8022280:	b29b      	uxth	r3, r3
 8022282:	1ab6      	subs	r6, r6, r2
 8022284:	435f      	muls	r7, r3
 8022286:	b2b6      	uxth	r6, r6
 8022288:	fb03 f909 	mul.w	r9, r3, r9
 802228c:	fb03 fb0b 	mul.w	fp, r3, fp
 8022290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022292:	fb06 7000 	mla	r0, r6, r0, r7
 8022296:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8022298:	fb06 bb03 	mla	fp, r6, r3, fp
 802229c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802229e:	fb02 0007 	mla	r0, r2, r7, r0
 80222a2:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 80222a4:	fb02 bb03 	mla	fp, r2, r3, fp
 80222a8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80222aa:	fb04 0007 	mla	r0, r4, r7, r0
 80222ae:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80222b2:	fb17 f701 	smulbb	r7, r7, r1
 80222b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80222ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80222bc:	fb00 700e 	mla	r0, r0, lr, r7
 80222c0:	fb06 9101 	mla	r1, r6, r1, r9
 80222c4:	b280      	uxth	r0, r0
 80222c6:	1c47      	adds	r7, r0, #1
 80222c8:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80222cc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80222ce:	1200      	asrs	r0, r0, #8
 80222d0:	f805 0c06 	strb.w	r0, [r5, #-6]
 80222d4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80222d6:	fb02 1100 	mla	r1, r2, r0, r1
 80222da:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80222dc:	fb04 1100 	mla	r1, r4, r0, r1
 80222e0:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80222e4:	fb04 b403 	mla	r4, r4, r3, fp
 80222e8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80222ec:	fb10 f007 	smulbb	r0, r0, r7
 80222f0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80222f4:	fb13 f307 	smulbb	r3, r3, r7
 80222f8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80222fc:	fb01 010e 	mla	r1, r1, lr, r0
 8022300:	fb04 340e 	mla	r4, r4, lr, r3
 8022304:	b289      	uxth	r1, r1
 8022306:	b2a4      	uxth	r4, r4
 8022308:	1c48      	adds	r0, r1, #1
 802230a:	1c63      	adds	r3, r4, #1
 802230c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022310:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022314:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8022316:	1209      	asrs	r1, r1, #8
 8022318:	1224      	asrs	r4, r4, #8
 802231a:	449a      	add	sl, r3
 802231c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802231e:	f805 1c05 	strb.w	r1, [r5, #-5]
 8022322:	f805 4c04 	strb.w	r4, [r5, #-4]
 8022326:	4498      	add	r8, r3
 8022328:	e707      	b.n	802213a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 802232a:	b01f      	add	sp, #124	@ 0x7c
 802232c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022330 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8022330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022334:	b087      	sub	sp, #28
 8022336:	780d      	ldrb	r5, [r1, #0]
 8022338:	784c      	ldrb	r4, [r1, #1]
 802233a:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 802233e:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8022342:	9004      	str	r0, [sp, #16]
 8022344:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8022348:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 802234c:	9005      	str	r0, [sp, #20]
 802234e:	fb06 bc03 	mla	ip, r6, r3, fp
 8022352:	2e00      	cmp	r6, #0
 8022354:	7888      	ldrb	r0, [r1, #2]
 8022356:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802235a:	eb02 090c 	add.w	r9, r2, ip
 802235e:	f2c0 8084 	blt.w	802246a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8022362:	42b7      	cmp	r7, r6
 8022364:	f340 8081 	ble.w	802246a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8022368:	f1bb 0f00 	cmp.w	fp, #0
 802236c:	db79      	blt.n	8022462 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 802236e:	455b      	cmp	r3, fp
 8022370:	dd77      	ble.n	8022462 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8022372:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022376:	9201      	str	r2, [sp, #4]
 8022378:	f899 2001 	ldrb.w	r2, [r9, #1]
 802237c:	9202      	str	r2, [sp, #8]
 802237e:	f899 2002 	ldrb.w	r2, [r9, #2]
 8022382:	9203      	str	r2, [sp, #12]
 8022384:	f11b 0201 	adds.w	r2, fp, #1
 8022388:	d476      	bmi.n	8022478 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802238a:	4293      	cmp	r3, r2
 802238c:	dd74      	ble.n	8022478 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802238e:	9a04      	ldr	r2, [sp, #16]
 8022390:	2a00      	cmp	r2, #0
 8022392:	d071      	beq.n	8022478 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8022394:	f899 8003 	ldrb.w	r8, [r9, #3]
 8022398:	f899 c004 	ldrb.w	ip, [r9, #4]
 802239c:	f899 a005 	ldrb.w	sl, [r9, #5]
 80223a0:	3601      	adds	r6, #1
 80223a2:	d471      	bmi.n	8022488 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80223a4:	42b7      	cmp	r7, r6
 80223a6:	dd6f      	ble.n	8022488 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80223a8:	9a05      	ldr	r2, [sp, #20]
 80223aa:	2a00      	cmp	r2, #0
 80223ac:	d06c      	beq.n	8022488 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80223ae:	f1bb 0f00 	cmp.w	fp, #0
 80223b2:	db65      	blt.n	8022480 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80223b4:	455b      	cmp	r3, fp
 80223b6:	dd63      	ble.n	8022480 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80223b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80223bc:	f819 e002 	ldrb.w	lr, [r9, r2]
 80223c0:	2203      	movs	r2, #3
 80223c2:	fb03 9602 	mla	r6, r3, r2, r9
 80223c6:	7877      	ldrb	r7, [r6, #1]
 80223c8:	78b6      	ldrb	r6, [r6, #2]
 80223ca:	f11b 0b01 	adds.w	fp, fp, #1
 80223ce:	d40c      	bmi.n	80223ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80223d0:	455b      	cmp	r3, fp
 80223d2:	dd0a      	ble.n	80223ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80223d4:	9a04      	ldr	r2, [sp, #16]
 80223d6:	b142      	cbz	r2, 80223ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80223d8:	2203      	movs	r2, #3
 80223da:	fb13 2002 	smlabb	r0, r3, r2, r2
 80223de:	f819 5000 	ldrb.w	r5, [r9, r0]
 80223e2:	fb03 9002 	mla	r0, r3, r2, r9
 80223e6:	7904      	ldrb	r4, [r0, #4]
 80223e8:	7940      	ldrb	r0, [r0, #5]
 80223ea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80223ee:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80223f2:	fb03 fb02 	mul.w	fp, r3, r2
 80223f6:	011b      	lsls	r3, r3, #4
 80223f8:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80223fc:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8022400:	eba3 030b 	sub.w	r3, r3, fp
 8022404:	b292      	uxth	r2, r2
 8022406:	b29b      	uxth	r3, r3
 8022408:	eba9 0902 	sub.w	r9, r9, r2
 802240c:	9304      	str	r3, [sp, #16]
 802240e:	fa1f f989 	uxth.w	r9, r9
 8022412:	fb03 f808 	mul.w	r8, r3, r8
 8022416:	9b01      	ldr	r3, [sp, #4]
 8022418:	fb09 8803 	mla	r8, r9, r3, r8
 802241c:	9b04      	ldr	r3, [sp, #16]
 802241e:	fb03 fc0c 	mul.w	ip, r3, ip
 8022422:	9b02      	ldr	r3, [sp, #8]
 8022424:	fb02 880e 	mla	r8, r2, lr, r8
 8022428:	fb09 cc03 	mla	ip, r9, r3, ip
 802242c:	9b04      	ldr	r3, [sp, #16]
 802242e:	fb0b 8805 	mla	r8, fp, r5, r8
 8022432:	fb02 c707 	mla	r7, r2, r7, ip
 8022436:	fb03 f30a 	mul.w	r3, r3, sl
 802243a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802243e:	fb0b 7404 	mla	r4, fp, r4, r7
 8022442:	f881 8000 	strb.w	r8, [r1]
 8022446:	1224      	asrs	r4, r4, #8
 8022448:	704c      	strb	r4, [r1, #1]
 802244a:	9c03      	ldr	r4, [sp, #12]
 802244c:	fb09 3904 	mla	r9, r9, r4, r3
 8022450:	fb02 9206 	mla	r2, r2, r6, r9
 8022454:	fb0b 2000 	mla	r0, fp, r0, r2
 8022458:	1200      	asrs	r0, r0, #8
 802245a:	7088      	strb	r0, [r1, #2]
 802245c:	b007      	add	sp, #28
 802245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022462:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8022466:	9501      	str	r5, [sp, #4]
 8022468:	e78c      	b.n	8022384 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 802246a:	4682      	mov	sl, r0
 802246c:	46a4      	mov	ip, r4
 802246e:	46a8      	mov	r8, r5
 8022470:	9501      	str	r5, [sp, #4]
 8022472:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8022476:	e793      	b.n	80223a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8022478:	4682      	mov	sl, r0
 802247a:	46a4      	mov	ip, r4
 802247c:	46a8      	mov	r8, r5
 802247e:	e78f      	b.n	80223a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8022480:	4606      	mov	r6, r0
 8022482:	4627      	mov	r7, r4
 8022484:	46ae      	mov	lr, r5
 8022486:	e7a0      	b.n	80223ca <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8022488:	4606      	mov	r6, r0
 802248a:	4627      	mov	r7, r4
 802248c:	46ae      	mov	lr, r5
 802248e:	e7ac      	b.n	80223ea <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08022490 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022494:	b09b      	sub	sp, #108	@ 0x6c
 8022496:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022498:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802249a:	9019      	str	r0, [sp, #100]	@ 0x64
 802249c:	9109      	str	r1, [sp, #36]	@ 0x24
 802249e:	6850      	ldr	r0, [r2, #4]
 80224a0:	9306      	str	r3, [sp, #24]
 80224a2:	6812      	ldr	r2, [r2, #0]
 80224a4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80224a8:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 80224ac:	fb00 1303 	mla	r3, r0, r3, r1
 80224b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80224b4:	18d3      	adds	r3, r2, r3
 80224b6:	9307      	str	r3, [sp, #28]
 80224b8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	9308      	str	r3, [sp, #32]
 80224be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80224c0:	2b00      	cmp	r3, #0
 80224c2:	dc03      	bgt.n	80224cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80224c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	f340 81ab 	ble.w	8022822 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80224cc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80224ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80224d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80224d6:	1e48      	subs	r0, r1, #1
 80224d8:	1e55      	subs	r5, r2, #1
 80224da:	9b06      	ldr	r3, [sp, #24]
 80224dc:	2b00      	cmp	r3, #0
 80224de:	f340 80b1 	ble.w	8022644 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80224e2:	ea5f 462b 	movs.w	r6, fp, asr #16
 80224e6:	ea4f 4324 	mov.w	r3, r4, asr #16
 80224ea:	d406      	bmi.n	80224fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80224ec:	4286      	cmp	r6, r0
 80224ee:	da04      	bge.n	80224fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80224f0:	2b00      	cmp	r3, #0
 80224f2:	db02      	blt.n	80224fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80224f4:	42ab      	cmp	r3, r5
 80224f6:	f2c0 80a6 	blt.w	8022646 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80224fa:	3601      	adds	r6, #1
 80224fc:	f100 8097 	bmi.w	802262e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022500:	42b1      	cmp	r1, r6
 8022502:	f2c0 8094 	blt.w	802262e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022506:	3301      	adds	r3, #1
 8022508:	f100 8091 	bmi.w	802262e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802250c:	429a      	cmp	r2, r3
 802250e:	f2c0 808e 	blt.w	802262e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022512:	9b06      	ldr	r3, [sp, #24]
 8022514:	9e07      	ldr	r6, [sp, #28]
 8022516:	930a      	str	r3, [sp, #40]	@ 0x28
 8022518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802251a:	2b00      	cmp	r3, #0
 802251c:	f340 80b0 	ble.w	8022680 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022520:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8022522:	1425      	asrs	r5, r4, #16
 8022524:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8022526:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802252a:	68c7      	ldr	r7, [r0, #12]
 802252c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022530:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8022534:	689b      	ldr	r3, [r3, #8]
 8022536:	f100 80ea 	bmi.w	802270e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802253a:	f103 3cff 	add.w	ip, r3, #4294967295
 802253e:	4560      	cmp	r0, ip
 8022540:	f280 80e5 	bge.w	802270e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022544:	2d00      	cmp	r5, #0
 8022546:	f2c0 80e2 	blt.w	802270e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 802254a:	f107 3cff 	add.w	ip, r7, #4294967295
 802254e:	4565      	cmp	r5, ip
 8022550:	f280 80dd 	bge.w	802270e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8022554:	b21b      	sxth	r3, r3
 8022556:	fb05 0003 	mla	r0, r5, r3, r0
 802255a:	9d08      	ldr	r5, [sp, #32]
 802255c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022560:	182f      	adds	r7, r5, r0
 8022562:	5c2d      	ldrb	r5, [r5, r0]
 8022564:	7878      	ldrb	r0, [r7, #1]
 8022566:	f897 e002 	ldrb.w	lr, [r7, #2]
 802256a:	900c      	str	r0, [sp, #48]	@ 0x30
 802256c:	f897 9003 	ldrb.w	r9, [r7, #3]
 8022570:	f897 8004 	ldrb.w	r8, [r7, #4]
 8022574:	f897 a005 	ldrb.w	sl, [r7, #5]
 8022578:	b1c9      	cbz	r1, 80225ae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802257a:	f04f 0c03 	mov.w	ip, #3
 802257e:	f06f 0004 	mvn.w	r0, #4
 8022582:	3705      	adds	r7, #5
 8022584:	fb13 030c 	smlabb	r3, r3, ip, r0
 8022588:	eb07 0c03 	add.w	ip, r7, r3
 802258c:	5cfb      	ldrb	r3, [r7, r3]
 802258e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022590:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022594:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022596:	f89c 3002 	ldrb.w	r3, [ip, #2]
 802259a:	9311      	str	r3, [sp, #68]	@ 0x44
 802259c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80225a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80225a2:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80225a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80225a8:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80225ac:	9312      	str	r3, [sp, #72]	@ 0x48
 80225ae:	b292      	uxth	r2, r2
 80225b0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80225b2:	b289      	uxth	r1, r1
 80225b4:	fb02 f301 	mul.w	r3, r2, r1
 80225b8:	0112      	lsls	r2, r2, #4
 80225ba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80225be:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80225c2:	1ad2      	subs	r2, r2, r3
 80225c4:	b289      	uxth	r1, r1
 80225c6:	b292      	uxth	r2, r2
 80225c8:	1a7f      	subs	r7, r7, r1
 80225ca:	fb02 f909 	mul.w	r9, r2, r9
 80225ce:	b2bf      	uxth	r7, r7
 80225d0:	fb02 f808 	mul.w	r8, r2, r8
 80225d4:	fb02 fa0a 	mul.w	sl, r2, sl
 80225d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80225da:	fb07 9905 	mla	r9, r7, r5, r9
 80225de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80225e0:	fb07 8800 	mla	r8, r7, r0, r8
 80225e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80225e6:	fb07 aa0e 	mla	sl, r7, lr, sl
 80225ea:	fb01 9905 	mla	r9, r1, r5, r9
 80225ee:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 80225f0:	fb01 8800 	mla	r8, r1, r0, r8
 80225f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80225f6:	fb01 a102 	mla	r1, r1, r2, sl
 80225fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80225fc:	fb03 9905 	mla	r9, r3, r5, r9
 8022600:	fb03 8800 	mla	r8, r3, r0, r8
 8022604:	fb03 1302 	mla	r3, r3, r2, r1
 8022608:	ea4f 2929 	mov.w	r9, r9, asr #8
 802260c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8022610:	121b      	asrs	r3, r3, #8
 8022612:	f886 9000 	strb.w	r9, [r6]
 8022616:	f886 8001 	strb.w	r8, [r6, #1]
 802261a:	70b3      	strb	r3, [r6, #2]
 802261c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802261e:	3603      	adds	r6, #3
 8022620:	449b      	add	fp, r3
 8022622:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022624:	441c      	add	r4, r3
 8022626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022628:	3b01      	subs	r3, #1
 802262a:	930a      	str	r3, [sp, #40]	@ 0x28
 802262c:	e774      	b.n	8022518 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802262e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022630:	449b      	add	fp, r3
 8022632:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022634:	441c      	add	r4, r3
 8022636:	9b06      	ldr	r3, [sp, #24]
 8022638:	3b01      	subs	r3, #1
 802263a:	9306      	str	r3, [sp, #24]
 802263c:	9b07      	ldr	r3, [sp, #28]
 802263e:	3303      	adds	r3, #3
 8022640:	9307      	str	r3, [sp, #28]
 8022642:	e74a      	b.n	80224da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022644:	d024      	beq.n	8022690 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022646:	9b06      	ldr	r3, [sp, #24]
 8022648:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802264a:	3b01      	subs	r3, #1
 802264c:	fb00 b003 	mla	r0, r0, r3, fp
 8022650:	1400      	asrs	r0, r0, #16
 8022652:	f53f af5e 	bmi.w	8022512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022656:	3901      	subs	r1, #1
 8022658:	4288      	cmp	r0, r1
 802265a:	f6bf af5a 	bge.w	8022512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802265e:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8022660:	fb01 4303 	mla	r3, r1, r3, r4
 8022664:	141b      	asrs	r3, r3, #16
 8022666:	f53f af54 	bmi.w	8022512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802266a:	3a01      	subs	r2, #1
 802266c:	4293      	cmp	r3, r2
 802266e:	f6bf af50 	bge.w	8022512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8022672:	9b07      	ldr	r3, [sp, #28]
 8022674:	f8dd e018 	ldr.w	lr, [sp, #24]
 8022678:	1cde      	adds	r6, r3, #3
 802267a:	f1be 0f00 	cmp.w	lr, #0
 802267e:	dc5f      	bgt.n	8022740 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8022680:	9b06      	ldr	r3, [sp, #24]
 8022682:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022686:	9b07      	ldr	r3, [sp, #28]
 8022688:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802268c:	4423      	add	r3, r4
 802268e:	9307      	str	r3, [sp, #28]
 8022690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022692:	2b00      	cmp	r3, #0
 8022694:	f340 80c5 	ble.w	8022822 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8022698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802269c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802269e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80226a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80226a6:	eef0 6a62 	vmov.f32	s13, s5
 80226aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80226ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80226b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226b6:	ee16 ba90 	vmov	fp, s13
 80226ba:	eef0 6a43 	vmov.f32	s13, s6
 80226be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80226c2:	ee16 4a90 	vmov	r4, s13
 80226c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80226ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80226ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80226d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80226d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80226da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80226de:	ee12 2a90 	vmov	r2, s5
 80226e2:	eef0 2a47 	vmov.f32	s5, s14
 80226e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80226ea:	ee13 2a10 	vmov	r2, s6
 80226ee:	9327      	str	r3, [sp, #156]	@ 0x9c
 80226f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80226f2:	eeb0 3a67 	vmov.f32	s6, s15
 80226f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80226fa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80226fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80226fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022700:	3b01      	subs	r3, #1
 8022702:	9309      	str	r3, [sp, #36]	@ 0x24
 8022704:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022706:	bf08      	it	eq
 8022708:	4613      	moveq	r3, r2
 802270a:	9306      	str	r3, [sp, #24]
 802270c:	e6d7      	b.n	80224be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802270e:	f110 0c01 	adds.w	ip, r0, #1
 8022712:	d483      	bmi.n	802261c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022714:	4563      	cmp	r3, ip
 8022716:	db81      	blt.n	802261c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022718:	f115 0c01 	adds.w	ip, r5, #1
 802271c:	f53f af7e 	bmi.w	802261c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022720:	4567      	cmp	r7, ip
 8022722:	f6ff af7b 	blt.w	802261c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022726:	b23f      	sxth	r7, r7
 8022728:	b21b      	sxth	r3, r3
 802272a:	9700      	str	r7, [sp, #0]
 802272c:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8022730:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8022734:	9a08      	ldr	r2, [sp, #32]
 8022736:	4631      	mov	r1, r6
 8022738:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802273a:	f7ff fdf9 	bl	8022330 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 802273e:	e76d      	b.n	802261c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8022740:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8022742:	ea4f 402b 	mov.w	r0, fp, asr #16
 8022746:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802274a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802274e:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8022752:	1421      	asrs	r1, r4, #16
 8022754:	930a      	str	r3, [sp, #40]	@ 0x28
 8022756:	fb0c 0101 	mla	r1, ip, r1, r0
 802275a:	9808      	ldr	r0, [sp, #32]
 802275c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022760:	1845      	adds	r5, r0, r1
 8022762:	5c40      	ldrb	r0, [r0, r1]
 8022764:	796f      	ldrb	r7, [r5, #5]
 8022766:	7869      	ldrb	r1, [r5, #1]
 8022768:	f895 8002 	ldrb.w	r8, [r5, #2]
 802276c:	f895 a003 	ldrb.w	sl, [r5, #3]
 8022770:	f895 9004 	ldrb.w	r9, [r5, #4]
 8022774:	970c      	str	r7, [sp, #48]	@ 0x30
 8022776:	b1a2      	cbz	r2, 80227a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8022778:	2703      	movs	r7, #3
 802277a:	f06f 0304 	mvn.w	r3, #4
 802277e:	3505      	adds	r5, #5
 8022780:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8022784:	eb05 070c 	add.w	r7, r5, ip
 8022788:	f815 500c 	ldrb.w	r5, [r5, ip]
 802278c:	9513      	str	r5, [sp, #76]	@ 0x4c
 802278e:	787d      	ldrb	r5, [r7, #1]
 8022790:	9515      	str	r5, [sp, #84]	@ 0x54
 8022792:	78bd      	ldrb	r5, [r7, #2]
 8022794:	9517      	str	r5, [sp, #92]	@ 0x5c
 8022796:	78fd      	ldrb	r5, [r7, #3]
 8022798:	9514      	str	r5, [sp, #80]	@ 0x50
 802279a:	793d      	ldrb	r5, [r7, #4]
 802279c:	9516      	str	r5, [sp, #88]	@ 0x58
 802279e:	797d      	ldrb	r5, [r7, #5]
 80227a0:	9518      	str	r5, [sp, #96]	@ 0x60
 80227a2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80227a6:	b292      	uxth	r2, r2
 80227a8:	3603      	adds	r6, #3
 80227aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80227ae:	fb03 f502 	mul.w	r5, r3, r2
 80227b2:	011b      	lsls	r3, r3, #4
 80227b4:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 80227b8:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 80227bc:	1b5b      	subs	r3, r3, r5
 80227be:	b292      	uxth	r2, r2
 80227c0:	b29b      	uxth	r3, r3
 80227c2:	1abf      	subs	r7, r7, r2
 80227c4:	fb03 f909 	mul.w	r9, r3, r9
 80227c8:	b2bf      	uxth	r7, r7
 80227ca:	fb03 fa0a 	mul.w	sl, r3, sl
 80227ce:	fb07 9901 	mla	r9, r7, r1, r9
 80227d2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80227d4:	fb07 aa00 	mla	sl, r7, r0, sl
 80227d8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80227da:	fb02 9901 	mla	r9, r2, r1, r9
 80227de:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80227e0:	fb02 aa00 	mla	sl, r2, r0, sl
 80227e4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80227e6:	fb05 9901 	mla	r9, r5, r1, r9
 80227ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80227ec:	fb05 aa00 	mla	sl, r5, r0, sl
 80227f0:	434b      	muls	r3, r1
 80227f2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80227f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80227f8:	fb07 3308 	mla	r3, r7, r8, r3
 80227fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8022800:	f806 ac06 	strb.w	sl, [r6, #-6]
 8022804:	fb02 3201 	mla	r2, r2, r1, r3
 8022808:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802280a:	f806 9c05 	strb.w	r9, [r6, #-5]
 802280e:	fb05 2503 	mla	r5, r5, r3, r2
 8022812:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8022814:	122d      	asrs	r5, r5, #8
 8022816:	449b      	add	fp, r3
 8022818:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802281a:	f806 5c04 	strb.w	r5, [r6, #-4]
 802281e:	441c      	add	r4, r3
 8022820:	e72b      	b.n	802267a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022822:	b01b      	add	sp, #108	@ 0x6c
 8022824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022828 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8022828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802282c:	b087      	sub	sp, #28
 802282e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8022832:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022836:	fb05 7003 	mla	r0, r5, r3, r7
 802283a:	2d00      	cmp	r5, #0
 802283c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8022840:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8022844:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022848:	f2c0 811f 	blt.w	8022a8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802284c:	45a8      	cmp	r8, r5
 802284e:	f340 811c 	ble.w	8022a8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022852:	2f00      	cmp	r7, #0
 8022854:	f2c0 8117 	blt.w	8022a86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022858:	42bb      	cmp	r3, r7
 802285a:	f340 8114 	ble.w	8022a86 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 802285e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8022862:	1c7a      	adds	r2, r7, #1
 8022864:	f100 8114 	bmi.w	8022a90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022868:	4293      	cmp	r3, r2
 802286a:	f340 8111 	ble.w	8022a90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 802286e:	2c00      	cmp	r4, #0
 8022870:	f000 8110 	beq.w	8022a94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8022874:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022878:	3501      	adds	r5, #1
 802287a:	f100 810f 	bmi.w	8022a9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802287e:	45a8      	cmp	r8, r5
 8022880:	f340 810c 	ble.w	8022a9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022884:	f1be 0f00 	cmp.w	lr, #0
 8022888:	f000 810b 	beq.w	8022aa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 802288c:	2f00      	cmp	r7, #0
 802288e:	f2c0 8103 	blt.w	8022a98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022892:	42bb      	cmp	r3, r7
 8022894:	f340 8100 	ble.w	8022a98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022898:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802289c:	3701      	adds	r7, #1
 802289e:	f100 8103 	bmi.w	8022aa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80228a2:	42bb      	cmp	r3, r7
 80228a4:	f340 8100 	ble.w	8022aa8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 80228a8:	2c00      	cmp	r4, #0
 80228aa:	f000 80ff 	beq.w	8022aac <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 80228ae:	3301      	adds	r3, #1
 80228b0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80228b4:	fa1f fc84 	uxth.w	ip, r4
 80228b8:	fa1f fe8e 	uxth.w	lr, lr
 80228bc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80228c0:	fb0c f90e 	mul.w	r9, ip, lr
 80228c4:	0e13      	lsrs	r3, r2, #24
 80228c6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80228ca:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80228ce:	9302      	str	r3, [sp, #8]
 80228d0:	ebac 0709 	sub.w	r7, ip, r9
 80228d4:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80228d8:	fa1f f48e 	uxth.w	r4, lr
 80228dc:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80228e0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80228e4:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80228e8:	fb0a fe0e 	mul.w	lr, sl, lr
 80228ec:	1b1b      	subs	r3, r3, r4
 80228ee:	fb0a f606 	mul.w	r6, sl, r6
 80228f2:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80228f6:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80228fa:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80228fe:	b29b      	uxth	r3, r3
 8022900:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022904:	b2bf      	uxth	r7, r7
 8022906:	9301      	str	r3, [sp, #4]
 8022908:	44e6      	add	lr, ip
 802290a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802290e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022912:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022916:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802291a:	9303      	str	r3, [sp, #12]
 802291c:	0a33      	lsrs	r3, r6, #8
 802291e:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8022922:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022926:	9304      	str	r3, [sp, #16]
 8022928:	fb0b f606 	mul.w	r6, fp, r6
 802292c:	fb0b f000 	mul.w	r0, fp, r0
 8022930:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8022934:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022938:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802293c:	44b6      	add	lr, r6
 802293e:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8022942:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022946:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802294a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802294e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022952:	fb08 f606 	mul.w	r6, r8, r6
 8022956:	0a03      	lsrs	r3, r0, #8
 8022958:	fb08 f505 	mul.w	r5, r8, r5
 802295c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022960:	0a30      	lsrs	r0, r6, #8
 8022962:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022966:	9305      	str	r3, [sp, #20]
 8022968:	0e13      	lsrs	r3, r2, #24
 802296a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802296e:	fb0e fe07 	mul.w	lr, lr, r7
 8022972:	4430      	add	r0, r6
 8022974:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8022978:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802297c:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022980:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022984:	0a00      	lsrs	r0, r0, #8
 8022986:	435e      	muls	r6, r3
 8022988:	0a2d      	lsrs	r5, r5, #8
 802298a:	435a      	muls	r2, r3
 802298c:	9b03      	ldr	r3, [sp, #12]
 802298e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022992:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022996:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802299a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802299e:	44b4      	add	ip, r6
 80229a0:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80229a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80229a8:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80229ac:	9e01      	ldr	r6, [sp, #4]
 80229ae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80229b2:	fb03 ee06 	mla	lr, r3, r6, lr
 80229b6:	9b04      	ldr	r3, [sp, #16]
 80229b8:	0a12      	lsrs	r2, r2, #8
 80229ba:	fb0c ee09 	mla	lr, ip, r9, lr
 80229be:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80229c2:	9b05      	ldr	r3, [sp, #20]
 80229c4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80229c8:	fb00 ee04 	mla	lr, r0, r4, lr
 80229cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80229d0:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80229d4:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80229d8:	9b01      	ldr	r3, [sp, #4]
 80229da:	fb07 fe0e 	mul.w	lr, r7, lr
 80229de:	fb07 f70b 	mul.w	r7, r7, fp
 80229e2:	fb03 ee06 	mla	lr, r3, r6, lr
 80229e6:	fb03 730a 	mla	r3, r3, sl, r7
 80229ea:	fb09 e202 	mla	r2, r9, r2, lr
 80229ee:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80229f2:	fb04 2e0e 	mla	lr, r4, lr, r2
 80229f6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80229fa:	fb04 3408 	mla	r4, r4, r8, r3
 80229fe:	9b02      	ldr	r3, [sp, #8]
 8022a00:	b292      	uxth	r2, r2
 8022a02:	fb09 4903 	mla	r9, r9, r3, r4
 8022a06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a0a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022a0e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022a12:	fb09 f902 	mul.w	r9, r9, r2
 8022a16:	ea40 0e0e 	orr.w	lr, r0, lr
 8022a1a:	f109 0301 	add.w	r3, r9, #1
 8022a1e:	fa5f f08e 	uxtb.w	r0, lr
 8022a22:	fb10 f002 	smulbb	r0, r0, r2
 8022a26:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022a2a:	780b      	ldrb	r3, [r1, #0]
 8022a2c:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8022a30:	fa5f f989 	uxtb.w	r9, r9
 8022a34:	fb03 0309 	mla	r3, r3, r9, r0
 8022a38:	b29b      	uxth	r3, r3
 8022a3a:	1c58      	adds	r0, r3, #1
 8022a3c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022a40:	7848      	ldrb	r0, [r1, #1]
 8022a42:	fb10 f009 	smulbb	r0, r0, r9
 8022a46:	121b      	asrs	r3, r3, #8
 8022a48:	700b      	strb	r3, [r1, #0]
 8022a4a:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022a4e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022a52:	fb03 0302 	mla	r3, r3, r2, r0
 8022a56:	b29b      	uxth	r3, r3
 8022a58:	1c58      	adds	r0, r3, #1
 8022a5a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022a5e:	121b      	asrs	r3, r3, #8
 8022a60:	704b      	strb	r3, [r1, #1]
 8022a62:	788b      	ldrb	r3, [r1, #2]
 8022a64:	fb13 f909 	smulbb	r9, r3, r9
 8022a68:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022a6c:	fa1f fe8e 	uxth.w	lr, lr
 8022a70:	f10e 0301 	add.w	r3, lr, #1
 8022a74:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022a78:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022a7c:	f881 e002 	strb.w	lr, [r1, #2]
 8022a80:	b007      	add	sp, #28
 8022a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a86:	2600      	movs	r6, #0
 8022a88:	e6eb      	b.n	8022862 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8022a8a:	2000      	movs	r0, #0
 8022a8c:	4606      	mov	r6, r0
 8022a8e:	e6f3      	b.n	8022878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022a90:	2000      	movs	r0, #0
 8022a92:	e6f1      	b.n	8022878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022a94:	4620      	mov	r0, r4
 8022a96:	e6ef      	b.n	8022878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022a98:	2500      	movs	r5, #0
 8022a9a:	e6ff      	b.n	802289c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022a9c:	2200      	movs	r2, #0
 8022a9e:	4615      	mov	r5, r2
 8022aa0:	e708      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022aa2:	4672      	mov	r2, lr
 8022aa4:	4675      	mov	r5, lr
 8022aa6:	e705      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022aa8:	2200      	movs	r2, #0
 8022aaa:	e703      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022aac:	4622      	mov	r2, r4
 8022aae:	e701      	b.n	80228b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08022ab0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ab4:	b09d      	sub	sp, #116	@ 0x74
 8022ab6:	9219      	str	r2, [sp, #100]	@ 0x64
 8022ab8:	9307      	str	r3, [sp, #28]
 8022aba:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8022abc:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8022ac0:	901b      	str	r0, [sp, #108]	@ 0x6c
 8022ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 8022ac4:	6850      	ldr	r0, [r2, #4]
 8022ac6:	9117      	str	r1, [sp, #92]	@ 0x5c
 8022ac8:	6812      	ldr	r2, [r2, #0]
 8022aca:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8022ace:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 8022ad2:	fb00 1303 	mla	r3, r0, r3, r1
 8022ad6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022ada:	18d3      	adds	r3, r2, r3
 8022adc:	930a      	str	r3, [sp, #40]	@ 0x28
 8022ade:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022ae0:	681b      	ldr	r3, [r3, #0]
 8022ae2:	9310      	str	r3, [sp, #64]	@ 0x40
 8022ae4:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022aea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	dc03      	bgt.n	8022af8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022af0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022af2:	2b00      	cmp	r3, #0
 8022af4:	f340 8368 	ble.w	80231c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022af8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022afa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022afe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022b02:	1e48      	subs	r0, r1, #1
 8022b04:	1e57      	subs	r7, r2, #1
 8022b06:	9b07      	ldr	r3, [sp, #28]
 8022b08:	2b00      	cmp	r3, #0
 8022b0a:	f340 8187 	ble.w	8022e1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022b0e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022b12:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022b16:	d406      	bmi.n	8022b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022b18:	4584      	cmp	ip, r0
 8022b1a:	da04      	bge.n	8022b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	db02      	blt.n	8022b26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022b20:	42bb      	cmp	r3, r7
 8022b22:	f2c0 817c 	blt.w	8022e1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8022b26:	f11c 0c01 	adds.w	ip, ip, #1
 8022b2a:	f100 816c 	bmi.w	8022e06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022b2e:	4561      	cmp	r1, ip
 8022b30:	f2c0 8169 	blt.w	8022e06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022b34:	3301      	adds	r3, #1
 8022b36:	f100 8166 	bmi.w	8022e06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022b3a:	429a      	cmp	r2, r3
 8022b3c:	f2c0 8163 	blt.w	8022e06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022b40:	9b07      	ldr	r3, [sp, #28]
 8022b42:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8022b44:	9318      	str	r3, [sp, #96]	@ 0x60
 8022b46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	f340 8186 	ble.w	8022e5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022b4e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022b50:	142a      	asrs	r2, r5, #16
 8022b52:	ea4f 4026 	mov.w	r0, r6, asr #16
 8022b56:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022b5a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022b5e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022b62:	f100 81cb 	bmi.w	8022efc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022b66:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022b6a:	4542      	cmp	r2, r8
 8022b6c:	f280 81c6 	bge.w	8022efc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022b70:	2800      	cmp	r0, #0
 8022b72:	f2c0 81c3 	blt.w	8022efc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022b76:	f103 38ff 	add.w	r8, r3, #4294967295
 8022b7a:	4540      	cmp	r0, r8
 8022b7c:	f280 81be 	bge.w	8022efc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022b80:	fa0f f38e 	sxth.w	r3, lr
 8022b84:	fb00 2203 	mla	r2, r0, r3, r2
 8022b88:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022b8a:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022b8e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022b92:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022b96:	2900      	cmp	r1, #0
 8022b98:	f000 81a6 	beq.w	8022ee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022b9c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022ba0:	900c      	str	r0, [sp, #48]	@ 0x30
 8022ba2:	0e00      	lsrs	r0, r0, #24
 8022ba4:	9013      	str	r0, [sp, #76]	@ 0x4c
 8022ba6:	f1bc 0f00 	cmp.w	ip, #0
 8022baa:	d00f      	beq.n	8022bcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022bb0:	3b01      	subs	r3, #1
 8022bb2:	009b      	lsls	r3, r3, #2
 8022bb4:	3304      	adds	r3, #4
 8022bb6:	eb08 0003 	add.w	r0, r8, r3
 8022bba:	f858 3003 	ldr.w	r3, [r8, r3]
 8022bbe:	9308      	str	r3, [sp, #32]
 8022bc0:	0e1b      	lsrs	r3, r3, #24
 8022bc2:	9311      	str	r3, [sp, #68]	@ 0x44
 8022bc4:	6843      	ldr	r3, [r0, #4]
 8022bc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8022bc8:	0e1b      	lsrs	r3, r3, #24
 8022bca:	9314      	str	r3, [sp, #80]	@ 0x50
 8022bcc:	b289      	uxth	r1, r1
 8022bce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022bd0:	fa1f fc8c 	uxth.w	ip, ip
 8022bd4:	0108      	lsls	r0, r1, #4
 8022bd6:	fb01 f90c 	mul.w	r9, r1, ip
 8022bda:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8022bde:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 8022be2:	eba0 0809 	sub.w	r8, r0, r9
 8022be6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022be8:	fa1f f18c 	uxth.w	r1, ip
 8022bec:	fa1f f888 	uxth.w	r8, r8
 8022bf0:	1a5b      	subs	r3, r3, r1
 8022bf2:	fb08 f000 	mul.w	r0, r8, r0
 8022bf6:	b29b      	uxth	r3, r3
 8022bf8:	fb03 000e 	mla	r0, r3, lr, r0
 8022bfc:	fb01 0004 	mla	r0, r1, r4, r0
 8022c00:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022c02:	fb09 0004 	mla	r0, r9, r4, r0
 8022c06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022c0a:	2800      	cmp	r0, #0
 8022c0c:	f000 80f2 	beq.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022c10:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022c14:	d01b      	beq.n	8022c4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8022c16:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8022c1a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022c1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8022c22:	fb0e fe02 	mul.w	lr, lr, r2
 8022c26:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022c2a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022c2e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022c32:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022c36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022c3a:	4452      	add	r2, sl
 8022c3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022c40:	0a12      	lsrs	r2, r2, #8
 8022c42:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022c46:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022c4a:	ea42 020c 	orr.w	r2, r2, ip
 8022c4e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c50:	2cff      	cmp	r4, #255	@ 0xff
 8022c52:	d021      	beq.n	8022c98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022c54:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022c56:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022c5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c5c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022c60:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022c62:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022c66:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022c68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022c6c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022c70:	fb04 fa0a 	mul.w	sl, r4, sl
 8022c74:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c78:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022c7c:	44de      	add	lr, fp
 8022c7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022c82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022c8a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022c8e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022c92:	ea4e 040a 	orr.w	r4, lr, sl
 8022c96:	940c      	str	r4, [sp, #48]	@ 0x30
 8022c98:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022c9a:	2cff      	cmp	r4, #255	@ 0xff
 8022c9c:	d021      	beq.n	8022ce2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022c9e:	9c08      	ldr	r4, [sp, #32]
 8022ca0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022ca4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022ca6:	fb04 fb0b 	mul.w	fp, r4, fp
 8022caa:	9c08      	ldr	r4, [sp, #32]
 8022cac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022cb0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022cb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022cb6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022cba:	fb04 fa0a 	mul.w	sl, r4, sl
 8022cbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022cc2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022cc6:	44de      	add	lr, fp
 8022cc8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022ccc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022cd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022cd4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022cd8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022cdc:	ea4e 040a 	orr.w	r4, lr, sl
 8022ce0:	9408      	str	r4, [sp, #32]
 8022ce2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022ce4:	2cff      	cmp	r4, #255	@ 0xff
 8022ce6:	d021      	beq.n	8022d2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8022ce8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022cea:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022cee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022cf0:	fb04 fb0b 	mul.w	fp, r4, fp
 8022cf4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022cf6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022cfa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022cfc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022d00:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022d04:	fb04 fa0a 	mul.w	sl, r4, sl
 8022d08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022d0c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022d10:	44de      	add	lr, fp
 8022d12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022d16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022d1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022d1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022d22:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022d26:	ea4e 040a 	orr.w	r4, lr, sl
 8022d2a:	940d      	str	r4, [sp, #52]	@ 0x34
 8022d2c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022d2e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022d32:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022d36:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022d3a:	9c08      	ldr	r4, [sp, #32]
 8022d3c:	fb08 fc0c 	mul.w	ip, r8, ip
 8022d40:	fb03 cc0e 	mla	ip, r3, lr, ip
 8022d44:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022d48:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022d4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022d4e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022d52:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022d54:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022d58:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022d5c:	fb08 f80e 	mul.w	r8, r8, lr
 8022d60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d64:	fb03 8202 	mla	r2, r3, r2, r8
 8022d68:	9b08      	ldr	r3, [sp, #32]
 8022d6a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022d6e:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8022d72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022d74:	fb01 220a 	mla	r2, r1, sl, r2
 8022d78:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8022d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022d7e:	fb09 2901 	mla	r9, r9, r1, r2
 8022d82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022d84:	4343      	muls	r3, r0
 8022d86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022d8a:	1c58      	adds	r0, r3, #1
 8022d8c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022d90:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8022d94:	783b      	ldrb	r3, [r7, #0]
 8022d96:	ea4c 0c09 	orr.w	ip, ip, r9
 8022d9a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022d9e:	fa5f f28c 	uxtb.w	r2, ip
 8022da2:	b2c0      	uxtb	r0, r0
 8022da4:	fb12 f201 	smulbb	r2, r2, r1
 8022da8:	fb03 2300 	mla	r3, r3, r0, r2
 8022dac:	b29b      	uxth	r3, r3
 8022dae:	1c5a      	adds	r2, r3, #1
 8022db0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022db4:	787a      	ldrb	r2, [r7, #1]
 8022db6:	fb12 f200 	smulbb	r2, r2, r0
 8022dba:	121b      	asrs	r3, r3, #8
 8022dbc:	703b      	strb	r3, [r7, #0]
 8022dbe:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8022dc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022dc6:	fb03 2301 	mla	r3, r3, r1, r2
 8022dca:	b29b      	uxth	r3, r3
 8022dcc:	1c5a      	adds	r2, r3, #1
 8022dce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022dd2:	121b      	asrs	r3, r3, #8
 8022dd4:	707b      	strb	r3, [r7, #1]
 8022dd6:	78bb      	ldrb	r3, [r7, #2]
 8022dd8:	fb13 f000 	smulbb	r0, r3, r0
 8022ddc:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022de0:	fa1f fc8c 	uxth.w	ip, ip
 8022de4:	f10c 0301 	add.w	r3, ip, #1
 8022de8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022dec:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8022df0:	f887 c002 	strb.w	ip, [r7, #2]
 8022df4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022df6:	3703      	adds	r7, #3
 8022df8:	441d      	add	r5, r3
 8022dfa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022dfc:	441e      	add	r6, r3
 8022dfe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022e00:	3b01      	subs	r3, #1
 8022e02:	9318      	str	r3, [sp, #96]	@ 0x60
 8022e04:	e69f      	b.n	8022b46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022e06:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8022e08:	441d      	add	r5, r3
 8022e0a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022e0c:	441e      	add	r6, r3
 8022e0e:	9b07      	ldr	r3, [sp, #28]
 8022e10:	3b01      	subs	r3, #1
 8022e12:	9307      	str	r3, [sp, #28]
 8022e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e16:	3303      	adds	r3, #3
 8022e18:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e1a:	e674      	b.n	8022b06 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022e1c:	d025      	beq.n	8022e6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8022e1e:	9b07      	ldr	r3, [sp, #28]
 8022e20:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8022e22:	3b01      	subs	r3, #1
 8022e24:	fb00 5003 	mla	r0, r0, r3, r5
 8022e28:	1400      	asrs	r0, r0, #16
 8022e2a:	f53f ae89 	bmi.w	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e2e:	3901      	subs	r1, #1
 8022e30:	4288      	cmp	r0, r1
 8022e32:	f6bf ae85 	bge.w	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e36:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8022e38:	fb01 6303 	mla	r3, r1, r3, r6
 8022e3c:	141b      	asrs	r3, r3, #16
 8022e3e:	f53f ae7f 	bmi.w	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e42:	3a01      	subs	r2, #1
 8022e44:	4293      	cmp	r3, r2
 8022e46:	f6bf ae7b 	bge.w	8022b40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022e4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e4c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022e50:	f103 0e03 	add.w	lr, r3, #3
 8022e54:	f1bb 0f00 	cmp.w	fp, #0
 8022e58:	dc6e      	bgt.n	8022f38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8022e5a:	9b07      	ldr	r3, [sp, #28]
 8022e5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e66:	4423      	add	r3, r4
 8022e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022e6c:	2b00      	cmp	r3, #0
 8022e6e:	f340 81ab 	ble.w	80231c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e76:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022e78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e80:	eef0 6a62 	vmov.f32	s13, s5
 8022e84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e90:	ee16 5a90 	vmov	r5, s13
 8022e94:	eef0 6a43 	vmov.f32	s13, s6
 8022e98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e9c:	ee16 6a90 	vmov	r6, s13
 8022ea0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022ea4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022ea8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022eac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022eb0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022eb4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022eb8:	ee12 2a90 	vmov	r2, s5
 8022ebc:	eef0 2a47 	vmov.f32	s5, s14
 8022ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ec4:	ee13 2a10 	vmov	r2, s6
 8022ec8:	9329      	str	r3, [sp, #164]	@ 0xa4
 8022eca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022ecc:	eeb0 3a67 	vmov.f32	s6, s15
 8022ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ed4:	932a      	str	r3, [sp, #168]	@ 0xa8
 8022ed6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022ed8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022eda:	3b01      	subs	r3, #1
 8022edc:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022ede:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022ee0:	bf08      	it	eq
 8022ee2:	4613      	moveq	r3, r2
 8022ee4:	9307      	str	r3, [sp, #28]
 8022ee6:	e600      	b.n	8022aea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022ee8:	f1bc 0f00 	cmp.w	ip, #0
 8022eec:	f43f ae6e 	beq.w	8022bcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022ef0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8022ef4:	9308      	str	r3, [sp, #32]
 8022ef6:	0e1b      	lsrs	r3, r3, #24
 8022ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8022efa:	e667      	b.n	8022bcc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022efc:	f112 0801 	adds.w	r8, r2, #1
 8022f00:	f53f af78 	bmi.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f04:	45c6      	cmp	lr, r8
 8022f06:	f6ff af75 	blt.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f0a:	f110 0801 	adds.w	r8, r0, #1
 8022f0e:	f53f af71 	bmi.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f12:	4543      	cmp	r3, r8
 8022f14:	f6ff af6e 	blt.w	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f18:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8022f1a:	b21b      	sxth	r3, r3
 8022f1c:	9201      	str	r2, [sp, #4]
 8022f1e:	9300      	str	r3, [sp, #0]
 8022f20:	fa0f f38e 	sxth.w	r3, lr
 8022f24:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022f26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022f2a:	e9cd c404 	strd	ip, r4, [sp, #16]
 8022f2e:	4639      	mov	r1, r7
 8022f30:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8022f32:	f7ff fc79 	bl	8022828 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8022f36:	e75d      	b.n	8022df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022f38:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022f3a:	142f      	asrs	r7, r5, #16
 8022f3c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022f3e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022f42:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8022f46:	1433      	asrs	r3, r6, #16
 8022f48:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022f4c:	fb02 7303 	mla	r3, r2, r3, r7
 8022f50:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8022f54:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022f58:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022f5c:	2900      	cmp	r1, #0
 8022f5e:	f000 812a 	beq.w	80231b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022f62:	687c      	ldr	r4, [r7, #4]
 8022f64:	940e      	str	r4, [sp, #56]	@ 0x38
 8022f66:	0e24      	lsrs	r4, r4, #24
 8022f68:	9415      	str	r4, [sp, #84]	@ 0x54
 8022f6a:	b178      	cbz	r0, 8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022f6c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8022f70:	3a01      	subs	r2, #1
 8022f72:	0092      	lsls	r2, r2, #2
 8022f74:	3204      	adds	r2, #4
 8022f76:	eb07 0802 	add.w	r8, r7, r2
 8022f7a:	58ba      	ldr	r2, [r7, r2]
 8022f7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8022f7e:	0e12      	lsrs	r2, r2, #24
 8022f80:	9212      	str	r2, [sp, #72]	@ 0x48
 8022f82:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022f86:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022f88:	0e12      	lsrs	r2, r2, #24
 8022f8a:	9216      	str	r2, [sp, #88]	@ 0x58
 8022f8c:	b289      	uxth	r1, r1
 8022f8e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022f90:	b280      	uxth	r0, r0
 8022f92:	fb01 f900 	mul.w	r9, r1, r0
 8022f96:	0109      	lsls	r1, r1, #4
 8022f98:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022f9c:	eba1 0809 	sub.w	r8, r1, r9
 8022fa0:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8022fa4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8022fa6:	b280      	uxth	r0, r0
 8022fa8:	fa1f f888 	uxth.w	r8, r8
 8022fac:	1a12      	subs	r2, r2, r0
 8022fae:	fb08 f101 	mul.w	r1, r8, r1
 8022fb2:	b292      	uxth	r2, r2
 8022fb4:	fb02 110c 	mla	r1, r2, ip, r1
 8022fb8:	fb00 1104 	mla	r1, r0, r4, r1
 8022fbc:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022fbe:	fb09 1104 	mla	r1, r9, r4, r1
 8022fc2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8022fc6:	2900      	cmp	r1, #0
 8022fc8:	f000 80ec 	beq.w	80231a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022fcc:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022fd0:	d019      	beq.n	8023006 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8022fd2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8022fd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022fda:	fb0c fa0a 	mul.w	sl, ip, sl
 8022fde:	fb0c fc03 	mul.w	ip, ip, r3
 8022fe2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022fe6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8022fea:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8022fee:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8022ff2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022ff6:	4453      	add	r3, sl
 8022ff8:	0a3f      	lsrs	r7, r7, #8
 8022ffa:	0a1b      	lsrs	r3, r3, #8
 8022ffc:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8023000:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023004:	433b      	orrs	r3, r7
 8023006:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023008:	2cff      	cmp	r4, #255	@ 0xff
 802300a:	d020      	beq.n	802304e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 802300c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802300e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8023012:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023014:	4367      	muls	r7, r4
 8023016:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023018:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802301c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023020:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8023022:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8023026:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802302a:	fb04 fa0a 	mul.w	sl, r4, sl
 802302e:	44bc      	add	ip, r7
 8023030:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8023034:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023038:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802303c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023044:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023048:	ea4c 040a 	orr.w	r4, ip, sl
 802304c:	940e      	str	r4, [sp, #56]	@ 0x38
 802304e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023050:	2cff      	cmp	r4, #255	@ 0xff
 8023052:	d020      	beq.n	8023096 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8023054:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023056:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802305a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802305c:	4367      	muls	r7, r4
 802305e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023060:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023064:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023068:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802306a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802306e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023072:	fb04 fa0a 	mul.w	sl, r4, sl
 8023076:	44bc      	add	ip, r7
 8023078:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802307c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023080:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023084:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023088:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802308c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023090:	ea4c 040a 	orr.w	r4, ip, sl
 8023094:	9409      	str	r4, [sp, #36]	@ 0x24
 8023096:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8023098:	2cff      	cmp	r4, #255	@ 0xff
 802309a:	d020      	beq.n	80230de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 802309c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802309e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80230a2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80230a4:	4367      	muls	r7, r4
 80230a6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80230a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80230ac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80230b0:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80230b2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80230b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80230ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80230be:	44bc      	add	ip, r7
 80230c0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80230c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80230c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80230cc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80230d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80230d4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80230d8:	ea4c 040a 	orr.w	r4, ip, sl
 80230dc:	940f      	str	r4, [sp, #60]	@ 0x3c
 80230de:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80230e0:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80230e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80230e8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80230ec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80230ee:	fb08 f707 	mul.w	r7, r8, r7
 80230f2:	fb02 770c 	mla	r7, r2, ip, r7
 80230f6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80230fa:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80230fc:	fb00 770c 	mla	r7, r0, ip, r7
 8023100:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023104:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023106:	fb09 770c 	mla	r7, r9, ip, r7
 802310a:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802310e:	fb08 f80c 	mul.w	r8, r8, ip
 8023112:	0a3f      	lsrs	r7, r7, #8
 8023114:	fb02 8303 	mla	r3, r2, r3, r8
 8023118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802311a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802311e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8023122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8023124:	fb00 330a 	mla	r3, r0, sl, r3
 8023128:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 802312c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802312e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023134:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023138:	434b      	muls	r3, r1
 802313a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802313e:	1c59      	adds	r1, r3, #1
 8023140:	ea47 070c 	orr.w	r7, r7, ip
 8023144:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023148:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802314c:	b2fa      	uxtb	r2, r7
 802314e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8023152:	fb12 f200 	smulbb	r2, r2, r0
 8023156:	b2c9      	uxtb	r1, r1
 8023158:	fb03 2301 	mla	r3, r3, r1, r2
 802315c:	b29b      	uxth	r3, r3
 802315e:	1c5a      	adds	r2, r3, #1
 8023160:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023164:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8023168:	fb12 f201 	smulbb	r2, r2, r1
 802316c:	121b      	asrs	r3, r3, #8
 802316e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8023172:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8023176:	0c3f      	lsrs	r7, r7, #16
 8023178:	fb03 2300 	mla	r3, r3, r0, r2
 802317c:	b29b      	uxth	r3, r3
 802317e:	1c5a      	adds	r2, r3, #1
 8023180:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023184:	121b      	asrs	r3, r3, #8
 8023186:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802318a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802318e:	fb13 f101 	smulbb	r1, r3, r1
 8023192:	fb07 1700 	mla	r7, r7, r0, r1
 8023196:	b2bf      	uxth	r7, r7
 8023198:	1c79      	adds	r1, r7, #1
 802319a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802319e:	123f      	asrs	r7, r7, #8
 80231a0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80231a4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80231a6:	f10e 0e03 	add.w	lr, lr, #3
 80231aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80231ae:	441d      	add	r5, r3
 80231b0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80231b2:	441e      	add	r6, r3
 80231b4:	e64e      	b.n	8022e54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80231b6:	2800      	cmp	r0, #0
 80231b8:	f43f aee8 	beq.w	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80231bc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80231c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80231c2:	0e12      	lsrs	r2, r2, #24
 80231c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80231c6:	e6e1      	b.n	8022f8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80231c8:	b01d      	add	sp, #116	@ 0x74
 80231ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80231ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231d2:	b087      	sub	sp, #28
 80231d4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80231d8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80231dc:	fb05 7003 	mla	r0, r5, r3, r7
 80231e0:	2d00      	cmp	r5, #0
 80231e2:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80231e6:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80231ea:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80231ee:	f2c0 810a 	blt.w	8023406 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80231f2:	45a8      	cmp	r8, r5
 80231f4:	f340 8107 	ble.w	8023406 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80231f8:	2f00      	cmp	r7, #0
 80231fa:	f2c0 8102 	blt.w	8023402 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80231fe:	42bb      	cmp	r3, r7
 8023200:	f340 80ff 	ble.w	8023402 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8023204:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8023208:	1c7a      	adds	r2, r7, #1
 802320a:	f100 80ff 	bmi.w	802340c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802320e:	4293      	cmp	r3, r2
 8023210:	f340 80fc 	ble.w	802340c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8023214:	2c00      	cmp	r4, #0
 8023216:	f000 80fb 	beq.w	8023410 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 802321a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802321e:	3501      	adds	r5, #1
 8023220:	f100 80fa 	bmi.w	8023418 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8023224:	45a8      	cmp	r8, r5
 8023226:	f340 80f7 	ble.w	8023418 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802322a:	f1be 0f00 	cmp.w	lr, #0
 802322e:	f000 80f6 	beq.w	802341e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8023232:	2f00      	cmp	r7, #0
 8023234:	f2c0 80ee 	blt.w	8023414 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8023238:	42bb      	cmp	r3, r7
 802323a:	f340 80eb 	ble.w	8023414 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802323e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8023242:	3701      	adds	r7, #1
 8023244:	f100 80ee 	bmi.w	8023424 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8023248:	42bb      	cmp	r3, r7
 802324a:	f340 80eb 	ble.w	8023424 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802324e:	2c00      	cmp	r4, #0
 8023250:	f000 80ea 	beq.w	8023428 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8023254:	3301      	adds	r3, #1
 8023256:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802325a:	fa1f fc84 	uxth.w	ip, r4
 802325e:	fa1f fe8e 	uxth.w	lr, lr
 8023262:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8023266:	fb0c f90e 	mul.w	r9, ip, lr
 802326a:	0e13      	lsrs	r3, r2, #24
 802326c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023270:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8023274:	9302      	str	r3, [sp, #8]
 8023276:	ebac 0709 	sub.w	r7, ip, r9
 802327a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802327e:	fa1f f48e 	uxth.w	r4, lr
 8023282:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8023286:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802328a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 802328e:	fb0a fe0e 	mul.w	lr, sl, lr
 8023292:	1b1b      	subs	r3, r3, r4
 8023294:	fb0a f606 	mul.w	r6, sl, r6
 8023298:	ea4f 6815 	mov.w	r8, r5, lsr #24
 802329c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80232a0:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80232a4:	b29b      	uxth	r3, r3
 80232a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80232aa:	b2bf      	uxth	r7, r7
 80232ac:	9301      	str	r3, [sp, #4]
 80232ae:	44e6      	add	lr, ip
 80232b0:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80232b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232b8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80232bc:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80232c0:	9303      	str	r3, [sp, #12]
 80232c2:	0a33      	lsrs	r3, r6, #8
 80232c4:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80232c8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80232cc:	9304      	str	r3, [sp, #16]
 80232ce:	fb0b f606 	mul.w	r6, fp, r6
 80232d2:	fb0b f000 	mul.w	r0, fp, r0
 80232d6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80232da:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80232de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80232e2:	44b6      	add	lr, r6
 80232e4:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80232e8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80232ec:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80232f0:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80232f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80232f8:	fb08 f606 	mul.w	r6, r8, r6
 80232fc:	0a03      	lsrs	r3, r0, #8
 80232fe:	fb08 f505 	mul.w	r5, r8, r5
 8023302:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023306:	0a30      	lsrs	r0, r6, #8
 8023308:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802330c:	9305      	str	r3, [sp, #20]
 802330e:	0e13      	lsrs	r3, r2, #24
 8023310:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023314:	fb0e fe07 	mul.w	lr, lr, r7
 8023318:	4430      	add	r0, r6
 802331a:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802331e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8023322:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8023326:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802332a:	0a00      	lsrs	r0, r0, #8
 802332c:	435e      	muls	r6, r3
 802332e:	0a2d      	lsrs	r5, r5, #8
 8023330:	435a      	muls	r2, r3
 8023332:	9b03      	ldr	r3, [sp, #12]
 8023334:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8023338:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802333c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8023340:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023344:	44b4      	add	ip, r6
 8023346:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802334a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802334e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8023352:	9e01      	ldr	r6, [sp, #4]
 8023354:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023358:	fb03 ee06 	mla	lr, r3, r6, lr
 802335c:	9b04      	ldr	r3, [sp, #16]
 802335e:	0a12      	lsrs	r2, r2, #8
 8023360:	fb0c ee09 	mla	lr, ip, r9, lr
 8023364:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8023368:	9b05      	ldr	r3, [sp, #20]
 802336a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802336e:	fb00 ee04 	mla	lr, r0, r4, lr
 8023372:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023376:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802337a:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 802337e:	9b01      	ldr	r3, [sp, #4]
 8023380:	fb07 fe0e 	mul.w	lr, r7, lr
 8023384:	fb07 f70b 	mul.w	r7, r7, fp
 8023388:	fb03 ee06 	mla	lr, r3, r6, lr
 802338c:	fb03 730a 	mla	r3, r3, sl, r7
 8023390:	fb09 e202 	mla	r2, r9, r2, lr
 8023394:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8023398:	fb04 2e0e 	mla	lr, r4, lr, r2
 802339c:	fb04 3408 	mla	r4, r4, r8, r3
 80233a0:	9b02      	ldr	r3, [sp, #8]
 80233a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80233a6:	fb09 4903 	mla	r9, r9, r3, r4
 80233aa:	780b      	ldrb	r3, [r1, #0]
 80233ac:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80233b0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80233b4:	ea40 0e0e 	orr.w	lr, r0, lr
 80233b8:	fa5f f989 	uxtb.w	r9, r9
 80233bc:	fb03 f209 	mul.w	r2, r3, r9
 80233c0:	1c53      	adds	r3, r2, #1
 80233c2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80233c6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80233ca:	700b      	strb	r3, [r1, #0]
 80233cc:	784b      	ldrb	r3, [r1, #1]
 80233ce:	fb03 f309 	mul.w	r3, r3, r9
 80233d2:	1c5a      	adds	r2, r3, #1
 80233d4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80233d8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80233dc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80233e0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80233e4:	704b      	strb	r3, [r1, #1]
 80233e6:	788b      	ldrb	r3, [r1, #2]
 80233e8:	fb03 f909 	mul.w	r9, r3, r9
 80233ec:	f109 0301 	add.w	r3, r9, #1
 80233f0:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80233f4:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80233f8:	f881 e002 	strb.w	lr, [r1, #2]
 80233fc:	b007      	add	sp, #28
 80233fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023402:	2600      	movs	r6, #0
 8023404:	e700      	b.n	8023208 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8023406:	2000      	movs	r0, #0
 8023408:	4606      	mov	r6, r0
 802340a:	e708      	b.n	802321e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802340c:	2000      	movs	r0, #0
 802340e:	e706      	b.n	802321e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023410:	4620      	mov	r0, r4
 8023412:	e704      	b.n	802321e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8023414:	2500      	movs	r5, #0
 8023416:	e714      	b.n	8023242 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8023418:	2200      	movs	r2, #0
 802341a:	4615      	mov	r5, r2
 802341c:	e71d      	b.n	802325a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802341e:	4672      	mov	r2, lr
 8023420:	4675      	mov	r5, lr
 8023422:	e71a      	b.n	802325a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023424:	2200      	movs	r2, #0
 8023426:	e718      	b.n	802325a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8023428:	4622      	mov	r2, r4
 802342a:	e716      	b.n	802325a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0802342c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802342c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023430:	b099      	sub	sp, #100	@ 0x64
 8023432:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8023436:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8023438:	9017      	str	r0, [sp, #92]	@ 0x5c
 802343a:	9306      	str	r3, [sp, #24]
 802343c:	6850      	ldr	r0, [r2, #4]
 802343e:	6812      	ldr	r2, [r2, #0]
 8023440:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8023444:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8023448:	fb00 1303 	mla	r3, r0, r3, r1
 802344c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023450:	18d3      	adds	r3, r2, r3
 8023452:	9309      	str	r3, [sp, #36]	@ 0x24
 8023454:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	930e      	str	r3, [sp, #56]	@ 0x38
 802345a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802345c:	2b00      	cmp	r3, #0
 802345e:	dc03      	bgt.n	8023468 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023460:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023462:	2b00      	cmp	r3, #0
 8023464:	f340 8360 	ble.w	8023b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8023468:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802346a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802346e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023472:	1e48      	subs	r0, r1, #1
 8023474:	1e57      	subs	r7, r2, #1
 8023476:	9b06      	ldr	r3, [sp, #24]
 8023478:	2b00      	cmp	r3, #0
 802347a:	f340 817b 	ble.w	8023774 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 802347e:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023482:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023486:	d406      	bmi.n	8023496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023488:	4584      	cmp	ip, r0
 802348a:	da04      	bge.n	8023496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802348c:	2b00      	cmp	r3, #0
 802348e:	db02      	blt.n	8023496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023490:	42bb      	cmp	r3, r7
 8023492:	f2c0 8170 	blt.w	8023776 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8023496:	f11c 0c01 	adds.w	ip, ip, #1
 802349a:	f100 8160 	bmi.w	802375e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802349e:	4561      	cmp	r1, ip
 80234a0:	f2c0 815d 	blt.w	802375e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80234a4:	3301      	adds	r3, #1
 80234a6:	f100 815a 	bmi.w	802375e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80234aa:	429a      	cmp	r2, r3
 80234ac:	f2c0 8157 	blt.w	802375e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80234b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80234b4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80234b6:	f1b8 0f00 	cmp.w	r8, #0
 80234ba:	f340 8179 	ble.w	80237b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80234be:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80234c0:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80234c4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80234c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80234ca:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80234ce:	142a      	asrs	r2, r5, #16
 80234d0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80234d4:	689b      	ldr	r3, [r3, #8]
 80234d6:	f100 81be 	bmi.w	8023856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80234da:	f103 39ff 	add.w	r9, r3, #4294967295
 80234de:	454a      	cmp	r2, r9
 80234e0:	f280 81b9 	bge.w	8023856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80234e4:	f1bc 0f00 	cmp.w	ip, #0
 80234e8:	f2c0 81b5 	blt.w	8023856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80234ec:	f10e 39ff 	add.w	r9, lr, #4294967295
 80234f0:	45cc      	cmp	ip, r9
 80234f2:	f280 81b0 	bge.w	8023856 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80234f6:	b21b      	sxth	r3, r3
 80234f8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80234fa:	fb0c 2203 	mla	r2, ip, r3, r2
 80234fe:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8023502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023506:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802350a:	2900      	cmp	r1, #0
 802350c:	f000 8197 	beq.w	802383e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8023510:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8023514:	940a      	str	r4, [sp, #40]	@ 0x28
 8023516:	0e24      	lsrs	r4, r4, #24
 8023518:	9411      	str	r4, [sp, #68]	@ 0x44
 802351a:	b180      	cbz	r0, 802353e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802351c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8023520:	3b01      	subs	r3, #1
 8023522:	009b      	lsls	r3, r3, #2
 8023524:	3304      	adds	r3, #4
 8023526:	eb09 0c03 	add.w	ip, r9, r3
 802352a:	f859 3003 	ldr.w	r3, [r9, r3]
 802352e:	9307      	str	r3, [sp, #28]
 8023530:	0e1b      	lsrs	r3, r3, #24
 8023532:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023534:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8023538:	930b      	str	r3, [sp, #44]	@ 0x2c
 802353a:	0e1b      	lsrs	r3, r3, #24
 802353c:	9312      	str	r3, [sp, #72]	@ 0x48
 802353e:	b289      	uxth	r1, r1
 8023540:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023542:	b280      	uxth	r0, r0
 8023544:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023546:	fb01 fa00 	mul.w	sl, r1, r0
 802354a:	0109      	lsls	r1, r1, #4
 802354c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023550:	eba1 090a 	sub.w	r9, r1, sl
 8023554:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8023558:	b280      	uxth	r0, r0
 802355a:	fa1f f989 	uxth.w	r9, r9
 802355e:	1a09      	subs	r1, r1, r0
 8023560:	fb09 f303 	mul.w	r3, r9, r3
 8023564:	b289      	uxth	r1, r1
 8023566:	fb01 330e 	mla	r3, r1, lr, r3
 802356a:	fb00 3304 	mla	r3, r0, r4, r3
 802356e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023570:	fb0a 3304 	mla	r3, sl, r4, r3
 8023574:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023578:	2b00      	cmp	r3, #0
 802357a:	f000 80e8 	beq.w	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802357e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023582:	d01b      	beq.n	80235bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8023584:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8023588:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802358c:	fb0e fb0b 	mul.w	fp, lr, fp
 8023590:	fb0e fe02 	mul.w	lr, lr, r2
 8023594:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8023598:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802359c:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80235a0:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80235a4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80235a8:	445a      	add	r2, fp
 80235aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235ae:	0a12      	lsrs	r2, r2, #8
 80235b0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80235b4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80235b8:	ea42 020c 	orr.w	r2, r2, ip
 80235bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80235be:	2cff      	cmp	r4, #255	@ 0xff
 80235c0:	d021      	beq.n	8023606 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80235c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80235c4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80235c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80235ca:	fb04 fc0c 	mul.w	ip, r4, ip
 80235ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80235d0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80235d4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80235d8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80235da:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80235de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80235e6:	44e6      	add	lr, ip
 80235e8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80235ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80235f0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80235f4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80235f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80235fc:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023600:	ea4e 040b 	orr.w	r4, lr, fp
 8023604:	940a      	str	r4, [sp, #40]	@ 0x28
 8023606:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023608:	2cff      	cmp	r4, #255	@ 0xff
 802360a:	d021      	beq.n	8023650 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802360c:	9c07      	ldr	r4, [sp, #28]
 802360e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023612:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023614:	fb04 fc0c 	mul.w	ip, r4, ip
 8023618:	9c07      	ldr	r4, [sp, #28]
 802361a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802361e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8023622:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8023624:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023628:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802362c:	fb04 fb0b 	mul.w	fp, r4, fp
 8023630:	44e6      	add	lr, ip
 8023632:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023636:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802363a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802363e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023642:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023646:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802364a:	ea4e 040b 	orr.w	r4, lr, fp
 802364e:	9407      	str	r4, [sp, #28]
 8023650:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023652:	2cff      	cmp	r4, #255	@ 0xff
 8023654:	d021      	beq.n	802369a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023656:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023658:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802365c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802365e:	fb04 fc0c 	mul.w	ip, r4, ip
 8023662:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023664:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023668:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802366c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802366e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023672:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023676:	fb04 fb0b 	mul.w	fp, r4, fp
 802367a:	44e6      	add	lr, ip
 802367c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8023680:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023684:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023688:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802368c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023690:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8023694:	ea4e 040b 	orr.w	r4, lr, fp
 8023698:	940b      	str	r4, [sp, #44]	@ 0x2c
 802369a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802369c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80236a0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80236a4:	2bff      	cmp	r3, #255	@ 0xff
 80236a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80236aa:	9c07      	ldr	r4, [sp, #28]
 80236ac:	fb09 fc0c 	mul.w	ip, r9, ip
 80236b0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80236b4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80236b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80236ba:	fb00 cc0e 	mla	ip, r0, lr, ip
 80236be:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80236c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80236c4:	fb0a cc0e 	mla	ip, sl, lr, ip
 80236c8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80236cc:	fb09 f90e 	mul.w	r9, r9, lr
 80236d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236d4:	fb01 9202 	mla	r2, r1, r2, r9
 80236d8:	9907      	ldr	r1, [sp, #28]
 80236da:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80236de:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 80236e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80236e4:	fb00 220b 	mla	r2, r0, fp, r2
 80236e8:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80236ec:	fb0a 2a00 	mla	sl, sl, r0, r2
 80236f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80236f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80236f8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80236fc:	fa5f f08c 	uxtb.w	r0, ip
 8023700:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023704:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023708:	f000 80a2 	beq.w	8023850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 802370c:	43db      	mvns	r3, r3
 802370e:	783a      	ldrb	r2, [r7, #0]
 8023710:	f897 a002 	ldrb.w	sl, [r7, #2]
 8023714:	b2db      	uxtb	r3, r3
 8023716:	fb02 fe03 	mul.w	lr, r2, r3
 802371a:	fb0a fa03 	mul.w	sl, sl, r3
 802371e:	f10e 0201 	add.w	r2, lr, #1
 8023722:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8023726:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802372a:	703a      	strb	r2, [r7, #0]
 802372c:	787a      	ldrb	r2, [r7, #1]
 802372e:	fb02 f003 	mul.w	r0, r2, r3
 8023732:	f10a 0301 	add.w	r3, sl, #1
 8023736:	1c42      	adds	r2, r0, #1
 8023738:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802373c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023740:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023744:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023748:	707a      	strb	r2, [r7, #1]
 802374a:	f887 c002 	strb.w	ip, [r7, #2]
 802374e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023750:	3703      	adds	r7, #3
 8023752:	f108 38ff 	add.w	r8, r8, #4294967295
 8023756:	441d      	add	r5, r3
 8023758:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802375a:	441e      	add	r6, r3
 802375c:	e6ab      	b.n	80234b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802375e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023760:	441d      	add	r5, r3
 8023762:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023764:	441e      	add	r6, r3
 8023766:	9b06      	ldr	r3, [sp, #24]
 8023768:	3b01      	subs	r3, #1
 802376a:	9306      	str	r3, [sp, #24]
 802376c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802376e:	3303      	adds	r3, #3
 8023770:	9309      	str	r3, [sp, #36]	@ 0x24
 8023772:	e680      	b.n	8023476 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023774:	d024      	beq.n	80237c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8023776:	9b06      	ldr	r3, [sp, #24]
 8023778:	9825      	ldr	r0, [sp, #148]	@ 0x94
 802377a:	3b01      	subs	r3, #1
 802377c:	fb00 5003 	mla	r0, r0, r3, r5
 8023780:	1400      	asrs	r0, r0, #16
 8023782:	f53f ae95 	bmi.w	80234b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8023786:	3901      	subs	r1, #1
 8023788:	4288      	cmp	r0, r1
 802378a:	f6bf ae91 	bge.w	80234b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802378e:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8023790:	fb01 6303 	mla	r3, r1, r3, r6
 8023794:	141b      	asrs	r3, r3, #16
 8023796:	f53f ae8b 	bmi.w	80234b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802379a:	3a01      	subs	r2, #1
 802379c:	4293      	cmp	r3, r2
 802379e:	f6bf ae87 	bge.w	80234b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80237a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237a4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80237a8:	1cdf      	adds	r7, r3, #3
 80237aa:	f1bb 0f00 	cmp.w	fp, #0
 80237ae:	dc6e      	bgt.n	802388e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80237b0:	9b06      	ldr	r3, [sp, #24]
 80237b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80237b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80237bc:	4423      	add	r3, r4
 80237be:	9309      	str	r3, [sp, #36]	@ 0x24
 80237c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80237c2:	2b00      	cmp	r3, #0
 80237c4:	f340 81b0 	ble.w	8023b28 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80237c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80237cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80237ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 80237d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80237d6:	eef0 6a62 	vmov.f32	s13, s5
 80237da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80237de:	ee31 1a05 	vadd.f32	s2, s2, s10
 80237e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237e6:	ee16 5a90 	vmov	r5, s13
 80237ea:	eef0 6a43 	vmov.f32	s13, s6
 80237ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80237f2:	ee16 6a90 	vmov	r6, s13
 80237f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80237fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80237fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023802:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023806:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802380a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802380e:	ee12 2a90 	vmov	r2, s5
 8023812:	eef0 2a47 	vmov.f32	s5, s14
 8023816:	fb92 f3f3 	sdiv	r3, r2, r3
 802381a:	ee13 2a10 	vmov	r2, s6
 802381e:	9325      	str	r3, [sp, #148]	@ 0x94
 8023820:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023822:	eeb0 3a67 	vmov.f32	s6, s15
 8023826:	fb92 f3f3 	sdiv	r3, r2, r3
 802382a:	9326      	str	r3, [sp, #152]	@ 0x98
 802382c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802382e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023830:	3b01      	subs	r3, #1
 8023832:	9315      	str	r3, [sp, #84]	@ 0x54
 8023834:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023836:	bf08      	it	eq
 8023838:	4613      	moveq	r3, r2
 802383a:	9306      	str	r3, [sp, #24]
 802383c:	e60d      	b.n	802345a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802383e:	2800      	cmp	r0, #0
 8023840:	f43f ae7d 	beq.w	802353e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023844:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023848:	9307      	str	r3, [sp, #28]
 802384a:	0e1b      	lsrs	r3, r3, #24
 802384c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802384e:	e676      	b.n	802353e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023850:	7038      	strb	r0, [r7, #0]
 8023852:	7079      	strb	r1, [r7, #1]
 8023854:	e779      	b.n	802374a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8023856:	f112 0901 	adds.w	r9, r2, #1
 802385a:	f53f af78 	bmi.w	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802385e:	454b      	cmp	r3, r9
 8023860:	f6ff af75 	blt.w	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023864:	f11c 0901 	adds.w	r9, ip, #1
 8023868:	f53f af71 	bmi.w	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802386c:	45ce      	cmp	lr, r9
 802386e:	f6ff af6e 	blt.w	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023872:	b21b      	sxth	r3, r3
 8023874:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023878:	fa0f f28e 	sxth.w	r2, lr
 802387c:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023880:	9200      	str	r2, [sp, #0]
 8023882:	4639      	mov	r1, r7
 8023884:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023886:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8023888:	f7ff fca1 	bl	80231ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 802388c:	e75f      	b.n	802374e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802388e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023890:	1429      	asrs	r1, r5, #16
 8023892:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8023894:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023898:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802389c:	1433      	asrs	r3, r6, #16
 802389e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80238a2:	fb0c 1303 	mla	r3, ip, r3, r1
 80238a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80238a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80238ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80238b0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80238b4:	2a00      	cmp	r2, #0
 80238b6:	f000 8129 	beq.w	8023b0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80238ba:	684c      	ldr	r4, [r1, #4]
 80238bc:	940c      	str	r4, [sp, #48]	@ 0x30
 80238be:	0e24      	lsrs	r4, r4, #24
 80238c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80238c2:	b198      	cbz	r0, 80238ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80238c4:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 80238c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80238cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80238d0:	f10c 0c04 	add.w	ip, ip, #4
 80238d4:	eb01 080c 	add.w	r8, r1, ip
 80238d8:	f851 100c 	ldr.w	r1, [r1, ip]
 80238dc:	9108      	str	r1, [sp, #32]
 80238de:	0e09      	lsrs	r1, r1, #24
 80238e0:	9110      	str	r1, [sp, #64]	@ 0x40
 80238e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80238e6:	910d      	str	r1, [sp, #52]	@ 0x34
 80238e8:	0e09      	lsrs	r1, r1, #24
 80238ea:	9114      	str	r1, [sp, #80]	@ 0x50
 80238ec:	b292      	uxth	r2, r2
 80238ee:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80238f0:	b280      	uxth	r0, r0
 80238f2:	fb02 f900 	mul.w	r9, r2, r0
 80238f6:	0112      	lsls	r2, r2, #4
 80238f8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80238fc:	eba2 0809 	sub.w	r8, r2, r9
 8023900:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8023904:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023906:	b280      	uxth	r0, r0
 8023908:	fa1f f888 	uxth.w	r8, r8
 802390c:	1a09      	subs	r1, r1, r0
 802390e:	fb08 f202 	mul.w	r2, r8, r2
 8023912:	b289      	uxth	r1, r1
 8023914:	fb01 220e 	mla	r2, r1, lr, r2
 8023918:	fb00 2204 	mla	r2, r0, r4, r2
 802391c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802391e:	fb09 2204 	mla	r2, r9, r4, r2
 8023922:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023926:	2a00      	cmp	r2, #0
 8023928:	f000 80e8 	beq.w	8023afc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 802392c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8023930:	d01b      	beq.n	802396a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8023932:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8023936:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802393a:	fb0e fa0a 	mul.w	sl, lr, sl
 802393e:	fb0e fe03 	mul.w	lr, lr, r3
 8023942:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023946:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802394a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802394e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023952:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023956:	4453      	add	r3, sl
 8023958:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802395c:	0a1b      	lsrs	r3, r3, #8
 802395e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8023962:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8023966:	ea43 030c 	orr.w	r3, r3, ip
 802396a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802396c:	2cff      	cmp	r4, #255	@ 0xff
 802396e:	d021      	beq.n	80239b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8023970:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023972:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023976:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023978:	fb04 fc0c 	mul.w	ip, r4, ip
 802397c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802397e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023982:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023986:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023988:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802398c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023990:	fb04 fa0a 	mul.w	sl, r4, sl
 8023994:	44e6      	add	lr, ip
 8023996:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802399a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802399e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239aa:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239ae:	ea4e 040a 	orr.w	r4, lr, sl
 80239b2:	940c      	str	r4, [sp, #48]	@ 0x30
 80239b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80239b6:	2cff      	cmp	r4, #255	@ 0xff
 80239b8:	d021      	beq.n	80239fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80239ba:	9c08      	ldr	r4, [sp, #32]
 80239bc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80239c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80239c2:	fb04 fc0c 	mul.w	ip, r4, ip
 80239c6:	9c08      	ldr	r4, [sp, #32]
 80239c8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80239cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80239ce:	fb04 fa0e 	mul.w	sl, r4, lr
 80239d2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80239d6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80239da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239de:	44e6      	add	lr, ip
 80239e0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80239e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80239e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80239ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80239f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80239f4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80239f8:	ea4e 040a 	orr.w	r4, lr, sl
 80239fc:	9408      	str	r4, [sp, #32]
 80239fe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a00:	2cff      	cmp	r4, #255	@ 0xff
 8023a02:	d021      	beq.n	8023a48 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8023a04:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a06:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a0a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a0c:	fb04 fc0c 	mul.w	ip, r4, ip
 8023a10:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a12:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023a16:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8023a1a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8023a1c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023a20:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a24:	fb04 fa0a 	mul.w	sl, r4, sl
 8023a28:	44e6      	add	lr, ip
 8023a2a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023a2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023a32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023a36:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023a3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023a3e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023a42:	ea4e 040a 	orr.w	r4, lr, sl
 8023a46:	940d      	str	r4, [sp, #52]	@ 0x34
 8023a48:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023a4a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023a4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8023a52:	2aff      	cmp	r2, #255	@ 0xff
 8023a54:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023a58:	9c08      	ldr	r4, [sp, #32]
 8023a5a:	fb08 fc0c 	mul.w	ip, r8, ip
 8023a5e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023a62:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023a66:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023a68:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023a6c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023a70:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023a72:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023a76:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023a7a:	fb08 f80e 	mul.w	r8, r8, lr
 8023a7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023a82:	fb01 8303 	mla	r3, r1, r3, r8
 8023a86:	9908      	ldr	r1, [sp, #32]
 8023a88:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023a8c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8023a90:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023a92:	fb00 330a 	mla	r3, r0, sl, r3
 8023a96:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8023a9a:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023a9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023aa2:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8023aa6:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023aaa:	fa5f f08c 	uxtb.w	r0, ip
 8023aae:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8023ab2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8023ab6:	d032      	beq.n	8023b1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8023ab8:	43d2      	mvns	r2, r2
 8023aba:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023abe:	b2d2      	uxtb	r2, r2
 8023ac0:	fb0e fe02 	mul.w	lr, lr, r2
 8023ac4:	f10e 0301 	add.w	r3, lr, #1
 8023ac8:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023acc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023ad0:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8023ad4:	4350      	muls	r0, r2
 8023ad6:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023ada:	1c43      	adds	r3, r0, #1
 8023adc:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023ae0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8023ae4:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8023ae8:	4353      	muls	r3, r2
 8023aea:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023aee:	1c5a      	adds	r2, r3, #1
 8023af0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023af4:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8023af8:	f807 cc01 	strb.w	ip, [r7, #-1]
 8023afc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023afe:	3703      	adds	r7, #3
 8023b00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023b04:	441d      	add	r5, r3
 8023b06:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023b08:	441e      	add	r6, r3
 8023b0a:	e64e      	b.n	80237aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8023b0c:	2800      	cmp	r0, #0
 8023b0e:	f43f aeed 	beq.w	80238ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023b12:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023b16:	9108      	str	r1, [sp, #32]
 8023b18:	0e09      	lsrs	r1, r1, #24
 8023b1a:	9110      	str	r1, [sp, #64]	@ 0x40
 8023b1c:	e6e6      	b.n	80238ec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023b1e:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023b22:	f807 1c02 	strb.w	r1, [r7, #-2]
 8023b26:	e7e7      	b.n	8023af8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8023b28:	b019      	add	sp, #100	@ 0x64
 8023b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023b30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b34:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8023b38:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023b3c:	2c00      	cmp	r4, #0
 8023b3e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023b42:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8023b46:	fb00 4e03 	mla	lr, r0, r3, r4
 8023b4a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023b4e:	f2c0 80b8 	blt.w	8023cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023b52:	45a1      	cmp	r9, r4
 8023b54:	f340 80b5 	ble.w	8023cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023b58:	2800      	cmp	r0, #0
 8023b5a:	f2c0 80b2 	blt.w	8023cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023b5e:	4580      	cmp	r8, r0
 8023b60:	f340 80af 	ble.w	8023cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023b64:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8023b68:	f01e 0f01 	tst.w	lr, #1
 8023b6c:	5d56      	ldrb	r6, [r2, r5]
 8023b6e:	bf0c      	ite	eq
 8023b70:	f006 060f 	andeq.w	r6, r6, #15
 8023b74:	1136      	asrne	r6, r6, #4
 8023b76:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023b7a:	b2f6      	uxtb	r6, r6
 8023b7c:	f114 0a01 	adds.w	sl, r4, #1
 8023b80:	f100 80a1 	bmi.w	8023cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023b84:	45d1      	cmp	r9, sl
 8023b86:	f340 809e 	ble.w	8023cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023b8a:	2800      	cmp	r0, #0
 8023b8c:	f2c0 809b 	blt.w	8023cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023b90:	4580      	cmp	r8, r0
 8023b92:	f340 8098 	ble.w	8023cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023b96:	2f00      	cmp	r7, #0
 8023b98:	f000 8097 	beq.w	8023cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8023b9c:	f10e 0b01 	add.w	fp, lr, #1
 8023ba0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023ba4:	f01b 0f01 	tst.w	fp, #1
 8023ba8:	5d55      	ldrb	r5, [r2, r5]
 8023baa:	bf0c      	ite	eq
 8023bac:	f005 050f 	andeq.w	r5, r5, #15
 8023bb0:	112d      	asrne	r5, r5, #4
 8023bb2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023bb6:	b2ed      	uxtb	r5, r5
 8023bb8:	f1bc 0f00 	cmp.w	ip, #0
 8023bbc:	f000 8089 	beq.w	8023cd2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8023bc0:	2c00      	cmp	r4, #0
 8023bc2:	f100 0001 	add.w	r0, r0, #1
 8023bc6:	f2c0 8082 	blt.w	8023cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023bca:	45a1      	cmp	r9, r4
 8023bcc:	dd7f      	ble.n	8023cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023bce:	2800      	cmp	r0, #0
 8023bd0:	db7d      	blt.n	8023cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023bd2:	4580      	cmp	r8, r0
 8023bd4:	dd7b      	ble.n	8023cce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023bd6:	eb03 0b0e 	add.w	fp, r3, lr
 8023bda:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023bde:	f01b 0f01 	tst.w	fp, #1
 8023be2:	5d14      	ldrb	r4, [r2, r4]
 8023be4:	bf0c      	ite	eq
 8023be6:	f004 040f 	andeq.w	r4, r4, #15
 8023bea:	1124      	asrne	r4, r4, #4
 8023bec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023bf0:	b2e4      	uxtb	r4, r4
 8023bf2:	f1ba 0f00 	cmp.w	sl, #0
 8023bf6:	db6f      	blt.n	8023cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023bf8:	45d1      	cmp	r9, sl
 8023bfa:	dd6d      	ble.n	8023cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023bfc:	2800      	cmp	r0, #0
 8023bfe:	db6b      	blt.n	8023cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023c00:	4580      	cmp	r8, r0
 8023c02:	dd69      	ble.n	8023cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8023c04:	2f00      	cmp	r7, #0
 8023c06:	d069      	beq.n	8023cdc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8023c08:	3301      	adds	r3, #1
 8023c0a:	449e      	add	lr, r3
 8023c0c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023c10:	f01e 0f01 	tst.w	lr, #1
 8023c14:	5cd0      	ldrb	r0, [r2, r3]
 8023c16:	bf0c      	ite	eq
 8023c18:	f000 000f 	andeq.w	r0, r0, #15
 8023c1c:	1100      	asrne	r0, r0, #4
 8023c1e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023c22:	b2c3      	uxtb	r3, r0
 8023c24:	b2ba      	uxth	r2, r7
 8023c26:	fa1f fc8c 	uxth.w	ip, ip
 8023c2a:	fb02 f00c 	mul.w	r0, r2, ip
 8023c2e:	0112      	lsls	r2, r2, #4
 8023c30:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023c34:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8023c38:	1a12      	subs	r2, r2, r0
 8023c3a:	fa1f fc8c 	uxth.w	ip, ip
 8023c3e:	b292      	uxth	r2, r2
 8023c40:	eba7 070c 	sub.w	r7, r7, ip
 8023c44:	436a      	muls	r2, r5
 8023c46:	b2bf      	uxth	r7, r7
 8023c48:	fb06 2207 	mla	r2, r6, r7, r2
 8023c4c:	fb0c 2404 	mla	r4, ip, r4, r2
 8023c50:	fb00 4303 	mla	r3, r0, r3, r4
 8023c54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023c58:	b38b      	cbz	r3, 8023cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8023c5a:	4a21      	ldr	r2, [pc, #132]	@ (8023ce0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8023c5c:	6814      	ldr	r4, [r2, #0]
 8023c5e:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8023c62:	b2e5      	uxtb	r5, r4
 8023c64:	4353      	muls	r3, r2
 8023c66:	1c5a      	adds	r2, r3, #1
 8023c68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023c6c:	1212      	asrs	r2, r2, #8
 8023c6e:	b290      	uxth	r0, r2
 8023c70:	43d2      	mvns	r2, r2
 8023c72:	fb15 f500 	smulbb	r5, r5, r0
 8023c76:	b2d3      	uxtb	r3, r2
 8023c78:	780a      	ldrb	r2, [r1, #0]
 8023c7a:	fb02 5203 	mla	r2, r2, r3, r5
 8023c7e:	b292      	uxth	r2, r2
 8023c80:	1c55      	adds	r5, r2, #1
 8023c82:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023c86:	784d      	ldrb	r5, [r1, #1]
 8023c88:	fb15 f503 	smulbb	r5, r5, r3
 8023c8c:	1212      	asrs	r2, r2, #8
 8023c8e:	700a      	strb	r2, [r1, #0]
 8023c90:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023c94:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023c98:	fb02 5200 	mla	r2, r2, r0, r5
 8023c9c:	b292      	uxth	r2, r2
 8023c9e:	1c55      	adds	r5, r2, #1
 8023ca0:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023ca4:	1212      	asrs	r2, r2, #8
 8023ca6:	704a      	strb	r2, [r1, #1]
 8023ca8:	788a      	ldrb	r2, [r1, #2]
 8023caa:	fb12 f303 	smulbb	r3, r2, r3
 8023cae:	fb04 3300 	mla	r3, r4, r0, r3
 8023cb2:	b29b      	uxth	r3, r3
 8023cb4:	1c5a      	adds	r2, r3, #1
 8023cb6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023cba:	121b      	asrs	r3, r3, #8
 8023cbc:	708b      	strb	r3, [r1, #2]
 8023cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cc2:	2600      	movs	r6, #0
 8023cc4:	e75a      	b.n	8023b7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8023cc6:	2500      	movs	r5, #0
 8023cc8:	e776      	b.n	8023bb8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8023cca:	463d      	mov	r5, r7
 8023ccc:	e774      	b.n	8023bb8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8023cce:	2400      	movs	r4, #0
 8023cd0:	e78f      	b.n	8023bf2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8023cd2:	4663      	mov	r3, ip
 8023cd4:	4664      	mov	r4, ip
 8023cd6:	e7a5      	b.n	8023c24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023cd8:	2300      	movs	r3, #0
 8023cda:	e7a3      	b.n	8023c24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023cdc:	463b      	mov	r3, r7
 8023cde:	e7a1      	b.n	8023c24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023ce0:	2401bb40 	.word	0x2401bb40

08023ce4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ce8:	b097      	sub	sp, #92	@ 0x5c
 8023cea:	9214      	str	r2, [sp, #80]	@ 0x50
 8023cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cee:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8023cf0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8023cf4:	9015      	str	r0, [sp, #84]	@ 0x54
 8023cf6:	910c      	str	r1, [sp, #48]	@ 0x30
 8023cf8:	6850      	ldr	r0, [r2, #4]
 8023cfa:	930e      	str	r3, [sp, #56]	@ 0x38
 8023cfc:	6812      	ldr	r2, [r2, #0]
 8023cfe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8023d02:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8023d06:	fb00 1303 	mla	r3, r0, r3, r1
 8023d0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023d0e:	eb02 0a03 	add.w	sl, r2, r3
 8023d12:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023d14:	689b      	ldr	r3, [r3, #8]
 8023d16:	3301      	adds	r3, #1
 8023d18:	f023 0301 	bic.w	r3, r3, #1
 8023d1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023d1e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023d20:	681f      	ldr	r7, [r3, #0]
 8023d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023d24:	2b00      	cmp	r3, #0
 8023d26:	dc03      	bgt.n	8023d30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023d28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023d2a:	2b00      	cmp	r3, #0
 8023d2c:	f340 8247 	ble.w	80241be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8023d30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023d32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d3a:	1e48      	subs	r0, r1, #1
 8023d3c:	f102 3cff 	add.w	ip, r2, #4294967295
 8023d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d42:	2b00      	cmp	r3, #0
 8023d44:	f340 80e5 	ble.w	8023f12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023d48:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8023d4c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023d50:	d406      	bmi.n	8023d60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023d52:	4586      	cmp	lr, r0
 8023d54:	da04      	bge.n	8023d60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023d56:	2b00      	cmp	r3, #0
 8023d58:	db02      	blt.n	8023d60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023d5a:	4563      	cmp	r3, ip
 8023d5c:	f2c0 80da 	blt.w	8023f14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023d60:	f11e 0e01 	adds.w	lr, lr, #1
 8023d64:	f100 80cb 	bmi.w	8023efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023d68:	4571      	cmp	r1, lr
 8023d6a:	f2c0 80c8 	blt.w	8023efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023d6e:	3301      	adds	r3, #1
 8023d70:	f100 80c5 	bmi.w	8023efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023d74:	429a      	cmp	r2, r3
 8023d76:	f2c0 80c2 	blt.w	8023efe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d7c:	46d0      	mov	r8, sl
 8023d7e:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023d82:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023d86:	2b00      	cmp	r3, #0
 8023d88:	f340 80e3 	ble.w	8023f52 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023d8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023d8e:	1430      	asrs	r0, r6, #16
 8023d90:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023d94:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023d98:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023d9c:	142b      	asrs	r3, r5, #16
 8023d9e:	f100 812e 	bmi.w	8023ffe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023da2:	f10c 3bff 	add.w	fp, ip, #4294967295
 8023da6:	455b      	cmp	r3, fp
 8023da8:	f280 8129 	bge.w	8023ffe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023dac:	2800      	cmp	r0, #0
 8023dae:	f2c0 8126 	blt.w	8023ffe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023db2:	f10e 3bff 	add.w	fp, lr, #4294967295
 8023db6:	4558      	cmp	r0, fp
 8023db8:	f280 8121 	bge.w	8023ffe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023dbc:	fb00 3309 	mla	r3, r0, r9, r3
 8023dc0:	0858      	lsrs	r0, r3, #1
 8023dc2:	07dc      	lsls	r4, r3, #31
 8023dc4:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023dc8:	bf54      	ite	pl
 8023dca:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023dce:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023dd2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023dd6:	fa5f fc8c 	uxtb.w	ip, ip
 8023dda:	2a00      	cmp	r2, #0
 8023ddc:	f000 80fe 	beq.w	8023fdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023de0:	1c58      	adds	r0, r3, #1
 8023de2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023de6:	07c0      	lsls	r0, r0, #31
 8023de8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023dec:	bf54      	ite	pl
 8023dee:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023df2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023df6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023dfa:	fa5f f08e 	uxtb.w	r0, lr
 8023dfe:	9010      	str	r0, [sp, #64]	@ 0x40
 8023e00:	b1d9      	cbz	r1, 8023e3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023e02:	444b      	add	r3, r9
 8023e04:	0858      	lsrs	r0, r3, #1
 8023e06:	07dc      	lsls	r4, r3, #31
 8023e08:	f103 0301 	add.w	r3, r3, #1
 8023e0c:	5c38      	ldrb	r0, [r7, r0]
 8023e0e:	bf54      	ite	pl
 8023e10:	f000 000f 	andpl.w	r0, r0, #15
 8023e14:	1100      	asrmi	r0, r0, #4
 8023e16:	07dc      	lsls	r4, r3, #31
 8023e18:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023e1c:	b2c0      	uxtb	r0, r0
 8023e1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8023e20:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8023e24:	f817 e000 	ldrb.w	lr, [r7, r0]
 8023e28:	bf54      	ite	pl
 8023e2a:	f00e 030f 	andpl.w	r3, lr, #15
 8023e2e:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8023e32:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023e36:	b2db      	uxtb	r3, r3
 8023e38:	9311      	str	r3, [sp, #68]	@ 0x44
 8023e3a:	b292      	uxth	r2, r2
 8023e3c:	b289      	uxth	r1, r1
 8023e3e:	0113      	lsls	r3, r2, #4
 8023e40:	fb02 f001 	mul.w	r0, r2, r1
 8023e44:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023e46:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023e4a:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8023e4e:	1a1b      	subs	r3, r3, r0
 8023e50:	b289      	uxth	r1, r1
 8023e52:	b29b      	uxth	r3, r3
 8023e54:	ebae 0e01 	sub.w	lr, lr, r1
 8023e58:	4353      	muls	r3, r2
 8023e5a:	fa1f fe8e 	uxth.w	lr, lr
 8023e5e:	fb0c 320e 	mla	r2, ip, lr, r3
 8023e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023e64:	fb01 2203 	mla	r2, r1, r3, r2
 8023e68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023e6a:	fb00 2203 	mla	r2, r0, r3, r2
 8023e6e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023e72:	2a00      	cmp	r2, #0
 8023e74:	d039      	beq.n	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023e76:	4bc7      	ldr	r3, [pc, #796]	@ (8024194 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023e78:	6819      	ldr	r1, [r3, #0]
 8023e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023e7c:	fa5f fc81 	uxtb.w	ip, r1
 8023e80:	435a      	muls	r2, r3
 8023e82:	1c53      	adds	r3, r2, #1
 8023e84:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023e88:	1212      	asrs	r2, r2, #8
 8023e8a:	b290      	uxth	r0, r2
 8023e8c:	43d2      	mvns	r2, r2
 8023e8e:	fb1c fc00 	smulbb	ip, ip, r0
 8023e92:	b2d3      	uxtb	r3, r2
 8023e94:	f898 2000 	ldrb.w	r2, [r8]
 8023e98:	fb02 c203 	mla	r2, r2, r3, ip
 8023e9c:	b292      	uxth	r2, r2
 8023e9e:	f102 0c01 	add.w	ip, r2, #1
 8023ea2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023ea6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023eaa:	fb1c fc03 	smulbb	ip, ip, r3
 8023eae:	1212      	asrs	r2, r2, #8
 8023eb0:	f888 2000 	strb.w	r2, [r8]
 8023eb4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023eb8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023ebc:	fb02 c200 	mla	r2, r2, r0, ip
 8023ec0:	b292      	uxth	r2, r2
 8023ec2:	f102 0c01 	add.w	ip, r2, #1
 8023ec6:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023eca:	1212      	asrs	r2, r2, #8
 8023ecc:	f888 2001 	strb.w	r2, [r8, #1]
 8023ed0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023ed4:	fb12 f303 	smulbb	r3, r2, r3
 8023ed8:	fb01 3300 	mla	r3, r1, r0, r3
 8023edc:	b29b      	uxth	r3, r3
 8023ede:	1c5a      	adds	r2, r3, #1
 8023ee0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023ee4:	121b      	asrs	r3, r3, #8
 8023ee6:	f888 3002 	strb.w	r3, [r8, #2]
 8023eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023eec:	f108 0803 	add.w	r8, r8, #3
 8023ef0:	441d      	add	r5, r3
 8023ef2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023ef4:	441e      	add	r6, r3
 8023ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ef8:	3b01      	subs	r3, #1
 8023efa:	930d      	str	r3, [sp, #52]	@ 0x34
 8023efc:	e742      	b.n	8023d84 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023efe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023f00:	f10a 0a03 	add.w	sl, sl, #3
 8023f04:	441d      	add	r5, r3
 8023f06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023f08:	441e      	add	r6, r3
 8023f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f0c:	3b01      	subs	r3, #1
 8023f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f10:	e716      	b.n	8023d40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023f12:	d024      	beq.n	8023f5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f16:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8023f18:	3b01      	subs	r3, #1
 8023f1a:	fb00 5003 	mla	r0, r0, r3, r5
 8023f1e:	1400      	asrs	r0, r0, #16
 8023f20:	f53f af2b 	bmi.w	8023d7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023f24:	3901      	subs	r1, #1
 8023f26:	4288      	cmp	r0, r1
 8023f28:	f6bf af27 	bge.w	8023d7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023f2c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8023f2e:	fb01 6303 	mla	r3, r1, r3, r6
 8023f32:	141b      	asrs	r3, r3, #16
 8023f34:	f53f af21 	bmi.w	8023d7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023f38:	3a01      	subs	r2, #1
 8023f3a:	4293      	cmp	r3, r2
 8023f3c:	f6bf af1d 	bge.w	8023d7a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023f40:	f10a 0e03 	add.w	lr, sl, #3
 8023f44:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8023f48:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023f4c:	f1b8 0f00 	cmp.w	r8, #0
 8023f50:	dc76      	bgt.n	8024040 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f54:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023f58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023f5c:	44a2      	add	sl, r4
 8023f5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	f340 812c 	ble.w	80241be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8023f66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023f6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023f6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f74:	eef0 6a62 	vmov.f32	s13, s5
 8023f78:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f84:	ee16 5a90 	vmov	r5, s13
 8023f88:	eef0 6a43 	vmov.f32	s13, s6
 8023f8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f90:	ee16 6a90 	vmov	r6, s13
 8023f94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023f98:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023f9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023fa0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023fa4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023fa8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023fac:	ee12 2a90 	vmov	r2, s5
 8023fb0:	eef0 2a47 	vmov.f32	s5, s14
 8023fb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fb8:	ee13 2a10 	vmov	r2, s6
 8023fbc:	9323      	str	r3, [sp, #140]	@ 0x8c
 8023fbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023fc0:	eeb0 3a67 	vmov.f32	s6, s15
 8023fc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8023fc8:	9324      	str	r3, [sp, #144]	@ 0x90
 8023fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023fcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023fce:	3b01      	subs	r3, #1
 8023fd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8023fd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023fd4:	bf08      	it	eq
 8023fd6:	4613      	moveq	r3, r2
 8023fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8023fda:	e6a2      	b.n	8023d22 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023fdc:	2900      	cmp	r1, #0
 8023fde:	f43f af2c 	beq.w	8023e3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023fe2:	eb09 0003 	add.w	r0, r9, r3
 8023fe6:	0843      	lsrs	r3, r0, #1
 8023fe8:	07c0      	lsls	r0, r0, #31
 8023fea:	5cfb      	ldrb	r3, [r7, r3]
 8023fec:	bf54      	ite	pl
 8023fee:	f003 030f 	andpl.w	r3, r3, #15
 8023ff2:	111b      	asrmi	r3, r3, #4
 8023ff4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023ff8:	b2db      	uxtb	r3, r3
 8023ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ffc:	e71d      	b.n	8023e3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8023ffe:	f113 0b01 	adds.w	fp, r3, #1
 8024002:	f53f af72 	bmi.w	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024006:	45dc      	cmp	ip, fp
 8024008:	f6ff af6f 	blt.w	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802400c:	f110 0b01 	adds.w	fp, r0, #1
 8024010:	f53f af6b 	bmi.w	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024014:	45de      	cmp	lr, fp
 8024016:	f6ff af68 	blt.w	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802401a:	9302      	str	r3, [sp, #8]
 802401c:	fa0f f38e 	sxth.w	r3, lr
 8024020:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8024022:	9301      	str	r3, [sp, #4]
 8024024:	fa0f f38c 	sxth.w	r3, ip
 8024028:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802402c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024030:	9300      	str	r3, [sp, #0]
 8024032:	463a      	mov	r2, r7
 8024034:	464b      	mov	r3, r9
 8024036:	4641      	mov	r1, r8
 8024038:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802403a:	f7ff fd79 	bl	8023b30 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 802403e:	e754      	b.n	8023eea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8024040:	142a      	asrs	r2, r5, #16
 8024042:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024046:	1433      	asrs	r3, r6, #16
 8024048:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802404c:	fb09 2303 	mla	r3, r9, r3, r2
 8024050:	085a      	lsrs	r2, r3, #1
 8024052:	07dc      	lsls	r4, r3, #31
 8024054:	5cba      	ldrb	r2, [r7, r2]
 8024056:	bf54      	ite	pl
 8024058:	f002 020f 	andpl.w	r2, r2, #15
 802405c:	1112      	asrmi	r2, r2, #4
 802405e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8024062:	b2d2      	uxtb	r2, r2
 8024064:	2900      	cmp	r1, #0
 8024066:	f000 8097 	beq.w	8024198 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802406a:	f103 0b01 	add.w	fp, r3, #1
 802406e:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8024072:	f01b 0f01 	tst.w	fp, #1
 8024076:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802407a:	bf0c      	ite	eq
 802407c:	f00c 0c0f 	andeq.w	ip, ip, #15
 8024080:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8024084:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024088:	fa5f f48c 	uxtb.w	r4, ip
 802408c:	9412      	str	r4, [sp, #72]	@ 0x48
 802408e:	b300      	cbz	r0, 80240d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024090:	444b      	add	r3, r9
 8024092:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8024096:	07dc      	lsls	r4, r3, #31
 8024098:	f103 0301 	add.w	r3, r3, #1
 802409c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240a0:	bf54      	ite	pl
 80240a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80240a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80240aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80240ae:	fa5f f48c 	uxtb.w	r4, ip
 80240b2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80240b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80240b8:	07dc      	lsls	r4, r3, #31
 80240ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80240be:	bf54      	ite	pl
 80240c0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80240c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80240c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80240cc:	fa5f f38c 	uxtb.w	r3, ip
 80240d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80240d2:	b289      	uxth	r1, r1
 80240d4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80240d6:	b280      	uxth	r0, r0
 80240d8:	fb01 f300 	mul.w	r3, r1, r0
 80240dc:	0109      	lsls	r1, r1, #4
 80240de:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80240e2:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 80240e6:	1ac9      	subs	r1, r1, r3
 80240e8:	b280      	uxth	r0, r0
 80240ea:	b289      	uxth	r1, r1
 80240ec:	ebac 0c00 	sub.w	ip, ip, r0
 80240f0:	4361      	muls	r1, r4
 80240f2:	fa1f fc8c 	uxth.w	ip, ip
 80240f6:	fb02 120c 	mla	r2, r2, ip, r1
 80240fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80240fc:	fb00 2001 	mla	r0, r0, r1, r2
 8024100:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024102:	fb03 0302 	mla	r3, r3, r2, r0
 8024106:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802410a:	2b00      	cmp	r3, #0
 802410c:	d039      	beq.n	8024182 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802410e:	4a21      	ldr	r2, [pc, #132]	@ (8024194 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8024110:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8024114:	6810      	ldr	r0, [r2, #0]
 8024116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024118:	fa5f fc80 	uxtb.w	ip, r0
 802411c:	4353      	muls	r3, r2
 802411e:	1c5a      	adds	r2, r3, #1
 8024120:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8024124:	121b      	asrs	r3, r3, #8
 8024126:	b29a      	uxth	r2, r3
 8024128:	43db      	mvns	r3, r3
 802412a:	fb1c fc02 	smulbb	ip, ip, r2
 802412e:	b2db      	uxtb	r3, r3
 8024130:	fb01 c103 	mla	r1, r1, r3, ip
 8024134:	b289      	uxth	r1, r1
 8024136:	f101 0c01 	add.w	ip, r1, #1
 802413a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802413e:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8024142:	fb1c fc03 	smulbb	ip, ip, r3
 8024146:	1209      	asrs	r1, r1, #8
 8024148:	f80e 1c03 	strb.w	r1, [lr, #-3]
 802414c:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024150:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8024154:	fb01 c102 	mla	r1, r1, r2, ip
 8024158:	b289      	uxth	r1, r1
 802415a:	f101 0c01 	add.w	ip, r1, #1
 802415e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8024162:	1209      	asrs	r1, r1, #8
 8024164:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8024168:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 802416c:	fb11 f303 	smulbb	r3, r1, r3
 8024170:	fb00 3002 	mla	r0, r0, r2, r3
 8024174:	b280      	uxth	r0, r0
 8024176:	1c42      	adds	r2, r0, #1
 8024178:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802417c:	1200      	asrs	r0, r0, #8
 802417e:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8024182:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024184:	f10e 0e03 	add.w	lr, lr, #3
 8024188:	f108 38ff 	add.w	r8, r8, #4294967295
 802418c:	441d      	add	r5, r3
 802418e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024190:	441e      	add	r6, r3
 8024192:	e6db      	b.n	8023f4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024194:	2401bb40 	.word	0x2401bb40
 8024198:	2800      	cmp	r0, #0
 802419a:	d09a      	beq.n	80240d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802419c:	444b      	add	r3, r9
 802419e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80241a2:	07db      	lsls	r3, r3, #31
 80241a4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80241a8:	bf54      	ite	pl
 80241aa:	f00c 0c0f 	andpl.w	ip, ip, #15
 80241ae:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80241b2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80241b6:	fa5f f38c 	uxtb.w	r3, ip
 80241ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80241bc:	e789      	b.n	80240d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80241be:	b017      	add	sp, #92	@ 0x5c
 80241c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80241c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241c8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 80241cc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80241d0:	2d00      	cmp	r5, #0
 80241d2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80241d6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80241da:	fb04 5e03 	mla	lr, r4, r3, r5
 80241de:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80241e2:	f2c0 80b1 	blt.w	8024348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80241e6:	45a9      	cmp	r9, r5
 80241e8:	f340 80ae 	ble.w	8024348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80241ec:	2c00      	cmp	r4, #0
 80241ee:	f2c0 80ab 	blt.w	8024348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80241f2:	45a0      	cmp	r8, r4
 80241f4:	f340 80a8 	ble.w	8024348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80241f8:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80241fc:	f01e 0f01 	tst.w	lr, #1
 8024200:	5d97      	ldrb	r7, [r2, r6]
 8024202:	bf0c      	ite	eq
 8024204:	f007 070f 	andeq.w	r7, r7, #15
 8024208:	113f      	asrne	r7, r7, #4
 802420a:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802420e:	b2ff      	uxtb	r7, r7
 8024210:	f115 0a01 	adds.w	sl, r5, #1
 8024214:	f100 809a 	bmi.w	802434c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024218:	45d1      	cmp	r9, sl
 802421a:	f340 8097 	ble.w	802434c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802421e:	2c00      	cmp	r4, #0
 8024220:	f2c0 8094 	blt.w	802434c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8024224:	45a0      	cmp	r8, r4
 8024226:	f340 8091 	ble.w	802434c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802422a:	2800      	cmp	r0, #0
 802422c:	f000 8090 	beq.w	8024350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8024230:	f10e 0b01 	add.w	fp, lr, #1
 8024234:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8024238:	f01b 0f01 	tst.w	fp, #1
 802423c:	5d96      	ldrb	r6, [r2, r6]
 802423e:	bf0c      	ite	eq
 8024240:	f006 060f 	andeq.w	r6, r6, #15
 8024244:	1136      	asrne	r6, r6, #4
 8024246:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802424a:	b2f6      	uxtb	r6, r6
 802424c:	f1bc 0f00 	cmp.w	ip, #0
 8024250:	f000 8082 	beq.w	8024358 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8024254:	2d00      	cmp	r5, #0
 8024256:	f104 0401 	add.w	r4, r4, #1
 802425a:	db7b      	blt.n	8024354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802425c:	45a9      	cmp	r9, r5
 802425e:	dd79      	ble.n	8024354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024260:	2c00      	cmp	r4, #0
 8024262:	db77      	blt.n	8024354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024264:	45a0      	cmp	r8, r4
 8024266:	dd75      	ble.n	8024354 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8024268:	eb03 0b0e 	add.w	fp, r3, lr
 802426c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8024270:	f01b 0f01 	tst.w	fp, #1
 8024274:	5d55      	ldrb	r5, [r2, r5]
 8024276:	bf0c      	ite	eq
 8024278:	f005 050f 	andeq.w	r5, r5, #15
 802427c:	112d      	asrne	r5, r5, #4
 802427e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8024282:	b2ed      	uxtb	r5, r5
 8024284:	f1ba 0f00 	cmp.w	sl, #0
 8024288:	db69      	blt.n	802435e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802428a:	45d1      	cmp	r9, sl
 802428c:	dd67      	ble.n	802435e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802428e:	2c00      	cmp	r4, #0
 8024290:	db65      	blt.n	802435e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024292:	45a0      	cmp	r8, r4
 8024294:	dd63      	ble.n	802435e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8024296:	2800      	cmp	r0, #0
 8024298:	d063      	beq.n	8024362 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802429a:	3301      	adds	r3, #1
 802429c:	449e      	add	lr, r3
 802429e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80242a2:	f01e 0f01 	tst.w	lr, #1
 80242a6:	5cd4      	ldrb	r4, [r2, r3]
 80242a8:	bf0c      	ite	eq
 80242aa:	f004 040f 	andeq.w	r4, r4, #15
 80242ae:	1124      	asrne	r4, r4, #4
 80242b0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80242b4:	b2e3      	uxtb	r3, r4
 80242b6:	b282      	uxth	r2, r0
 80242b8:	fa1f fc8c 	uxth.w	ip, ip
 80242bc:	fb02 f40c 	mul.w	r4, r2, ip
 80242c0:	0112      	lsls	r2, r2, #4
 80242c2:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80242c6:	fa1f f08c 	uxth.w	r0, ip
 80242ca:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 80242ce:	1b12      	subs	r2, r2, r4
 80242d0:	ebac 0c00 	sub.w	ip, ip, r0
 80242d4:	b292      	uxth	r2, r2
 80242d6:	fa1f fc8c 	uxth.w	ip, ip
 80242da:	4372      	muls	r2, r6
 80242dc:	fb07 220c 	mla	r2, r7, ip, r2
 80242e0:	fb00 2005 	mla	r0, r0, r5, r2
 80242e4:	fb04 0303 	mla	r3, r4, r3, r0
 80242e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80242ec:	b353      	cbz	r3, 8024344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80242ee:	4a1e      	ldr	r2, [pc, #120]	@ (8024368 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80242f0:	7808      	ldrb	r0, [r1, #0]
 80242f2:	6814      	ldr	r4, [r2, #0]
 80242f4:	b29a      	uxth	r2, r3
 80242f6:	43db      	mvns	r3, r3
 80242f8:	b2e5      	uxtb	r5, r4
 80242fa:	b2db      	uxtb	r3, r3
 80242fc:	fb15 f502 	smulbb	r5, r5, r2
 8024300:	fb00 5003 	mla	r0, r0, r3, r5
 8024304:	b280      	uxth	r0, r0
 8024306:	1c45      	adds	r5, r0, #1
 8024308:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802430c:	784d      	ldrb	r5, [r1, #1]
 802430e:	fb15 f503 	smulbb	r5, r5, r3
 8024312:	1200      	asrs	r0, r0, #8
 8024314:	7008      	strb	r0, [r1, #0]
 8024316:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802431a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802431e:	fb00 5002 	mla	r0, r0, r2, r5
 8024322:	b280      	uxth	r0, r0
 8024324:	1c45      	adds	r5, r0, #1
 8024326:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802432a:	1200      	asrs	r0, r0, #8
 802432c:	7048      	strb	r0, [r1, #1]
 802432e:	7888      	ldrb	r0, [r1, #2]
 8024330:	fb10 f303 	smulbb	r3, r0, r3
 8024334:	fb04 3202 	mla	r2, r4, r2, r3
 8024338:	b292      	uxth	r2, r2
 802433a:	1c53      	adds	r3, r2, #1
 802433c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8024340:	1212      	asrs	r2, r2, #8
 8024342:	708a      	strb	r2, [r1, #2]
 8024344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024348:	2700      	movs	r7, #0
 802434a:	e761      	b.n	8024210 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 802434c:	2600      	movs	r6, #0
 802434e:	e77d      	b.n	802424c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8024350:	4606      	mov	r6, r0
 8024352:	e77b      	b.n	802424c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8024354:	2500      	movs	r5, #0
 8024356:	e795      	b.n	8024284 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8024358:	4663      	mov	r3, ip
 802435a:	4665      	mov	r5, ip
 802435c:	e7ab      	b.n	80242b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802435e:	2300      	movs	r3, #0
 8024360:	e7a9      	b.n	80242b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8024362:	4603      	mov	r3, r0
 8024364:	e7a7      	b.n	80242b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8024366:	bf00      	nop
 8024368:	2401bb40 	.word	0x2401bb40

0802436c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024370:	b093      	sub	sp, #76	@ 0x4c
 8024372:	461c      	mov	r4, r3
 8024374:	920c      	str	r2, [sp, #48]	@ 0x30
 8024376:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024378:	9011      	str	r0, [sp, #68]	@ 0x44
 802437a:	9107      	str	r1, [sp, #28]
 802437c:	6850      	ldr	r0, [r2, #4]
 802437e:	6812      	ldr	r2, [r2, #0]
 8024380:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8024384:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8024388:	fb00 1303 	mla	r3, r0, r3, r1
 802438c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024390:	eb02 0b03 	add.w	fp, r2, r3
 8024394:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024396:	689b      	ldr	r3, [r3, #8]
 8024398:	3301      	adds	r3, #1
 802439a:	f023 0301 	bic.w	r3, r3, #1
 802439e:	9309      	str	r3, [sp, #36]	@ 0x24
 80243a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80243a2:	f8d3 8000 	ldr.w	r8, [r3]
 80243a6:	9b07      	ldr	r3, [sp, #28]
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	dc03      	bgt.n	80243b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80243ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	f340 822b 	ble.w	802480a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80243b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80243b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243be:	1e48      	subs	r0, r1, #1
 80243c0:	1e57      	subs	r7, r2, #1
 80243c2:	2c00      	cmp	r4, #0
 80243c4:	f340 80d7 	ble.w	8024576 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80243c8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80243cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80243d0:	d406      	bmi.n	80243e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80243d2:	4584      	cmp	ip, r0
 80243d4:	da04      	bge.n	80243e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80243d6:	2b00      	cmp	r3, #0
 80243d8:	db02      	blt.n	80243e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80243da:	42bb      	cmp	r3, r7
 80243dc:	f2c0 80cc 	blt.w	8024578 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80243e0:	f11c 0c01 	adds.w	ip, ip, #1
 80243e4:	f100 80bf 	bmi.w	8024566 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80243e8:	4561      	cmp	r1, ip
 80243ea:	f2c0 80bc 	blt.w	8024566 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80243ee:	3301      	adds	r3, #1
 80243f0:	f100 80b9 	bmi.w	8024566 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80243f4:	429a      	cmp	r2, r3
 80243f6:	f2c0 80b6 	blt.w	8024566 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80243fa:	46a2      	mov	sl, r4
 80243fc:	465f      	mov	r7, fp
 80243fe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8024402:	f1ba 0f00 	cmp.w	sl, #0
 8024406:	f340 80d4 	ble.w	80245b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802440a:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802440e:	1430      	asrs	r0, r6, #16
 8024410:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024414:	9308      	str	r3, [sp, #32]
 8024416:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024418:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802441c:	142b      	asrs	r3, r5, #16
 802441e:	f100 8124 	bmi.w	802466a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024422:	f10c 32ff 	add.w	r2, ip, #4294967295
 8024426:	4293      	cmp	r3, r2
 8024428:	f280 811f 	bge.w	802466a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802442c:	2800      	cmp	r0, #0
 802442e:	f2c0 811c 	blt.w	802466a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024432:	f10e 32ff 	add.w	r2, lr, #4294967295
 8024436:	4290      	cmp	r0, r2
 8024438:	f280 8117 	bge.w	802466a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802443c:	fb00 3309 	mla	r3, r0, r9, r3
 8024440:	0858      	lsrs	r0, r3, #1
 8024442:	07da      	lsls	r2, r3, #31
 8024444:	9a08      	ldr	r2, [sp, #32]
 8024446:	f818 c000 	ldrb.w	ip, [r8, r0]
 802444a:	bf54      	ite	pl
 802444c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8024450:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8024454:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8024458:	fa5f fc8c 	uxtb.w	ip, ip
 802445c:	2a00      	cmp	r2, #0
 802445e:	f000 80ed 	beq.w	802463c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8024462:	1c58      	adds	r0, r3, #1
 8024464:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8024468:	07c0      	lsls	r0, r0, #31
 802446a:	f818 e00e 	ldrb.w	lr, [r8, lr]
 802446e:	bf54      	ite	pl
 8024470:	f00e 0e0f 	andpl.w	lr, lr, #15
 8024474:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8024478:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802447c:	fa5f fe8e 	uxtb.w	lr, lr
 8024480:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8024484:	b1c9      	cbz	r1, 80244ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024486:	444b      	add	r3, r9
 8024488:	0858      	lsrs	r0, r3, #1
 802448a:	07da      	lsls	r2, r3, #31
 802448c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024490:	bf54      	ite	pl
 8024492:	f000 000f 	andpl.w	r0, r0, #15
 8024496:	1100      	asrmi	r0, r0, #4
 8024498:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802449c:	b2c0      	uxtb	r0, r0
 802449e:	900a      	str	r0, [sp, #40]	@ 0x28
 80244a0:	1c58      	adds	r0, r3, #1
 80244a2:	0843      	lsrs	r3, r0, #1
 80244a4:	07c2      	lsls	r2, r0, #31
 80244a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80244aa:	bf54      	ite	pl
 80244ac:	f003 030f 	andpl.w	r3, r3, #15
 80244b0:	111b      	asrmi	r3, r3, #4
 80244b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80244b6:	b2db      	uxtb	r3, r3
 80244b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80244ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80244be:	b289      	uxth	r1, r1
 80244c0:	fb02 f301 	mul.w	r3, r2, r1
 80244c4:	0112      	lsls	r2, r2, #4
 80244c6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80244ca:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 80244ce:	1ad2      	subs	r2, r2, r3
 80244d0:	b289      	uxth	r1, r1
 80244d2:	b292      	uxth	r2, r2
 80244d4:	1a40      	subs	r0, r0, r1
 80244d6:	fa1f fe80 	uxth.w	lr, r0
 80244da:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80244dc:	4342      	muls	r2, r0
 80244de:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80244e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244e4:	fb01 c102 	mla	r1, r1, r2, ip
 80244e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80244ea:	fb03 1302 	mla	r3, r3, r2, r1
 80244ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80244f2:	b383      	cbz	r3, 8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80244f4:	4ac6      	ldr	r2, [pc, #792]	@ (8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80244f6:	2bff      	cmp	r3, #255	@ 0xff
 80244f8:	6812      	ldr	r2, [r2, #0]
 80244fa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80244fe:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8024502:	b2d2      	uxtb	r2, r2
 8024504:	f000 80ac 	beq.w	8024660 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024508:	b299      	uxth	r1, r3
 802450a:	43db      	mvns	r3, r3
 802450c:	f897 c000 	ldrb.w	ip, [r7]
 8024510:	fb12 f201 	smulbb	r2, r2, r1
 8024514:	b2db      	uxtb	r3, r3
 8024516:	fb10 f001 	smulbb	r0, r0, r1
 802451a:	fb0c 2203 	mla	r2, ip, r3, r2
 802451e:	fb1e f101 	smulbb	r1, lr, r1
 8024522:	b292      	uxth	r2, r2
 8024524:	f102 0c01 	add.w	ip, r2, #1
 8024528:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802452c:	1212      	asrs	r2, r2, #8
 802452e:	703a      	strb	r2, [r7, #0]
 8024530:	787a      	ldrb	r2, [r7, #1]
 8024532:	fb02 0003 	mla	r0, r2, r3, r0
 8024536:	b280      	uxth	r0, r0
 8024538:	1c42      	adds	r2, r0, #1
 802453a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802453e:	78ba      	ldrb	r2, [r7, #2]
 8024540:	fb02 1303 	mla	r3, r2, r3, r1
 8024544:	1200      	asrs	r0, r0, #8
 8024546:	b29b      	uxth	r3, r3
 8024548:	7078      	strb	r0, [r7, #1]
 802454a:	f103 0e01 	add.w	lr, r3, #1
 802454e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8024552:	121b      	asrs	r3, r3, #8
 8024554:	70bb      	strb	r3, [r7, #2]
 8024556:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024558:	3703      	adds	r7, #3
 802455a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802455e:	441d      	add	r5, r3
 8024560:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024562:	441e      	add	r6, r3
 8024564:	e74d      	b.n	8024402 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024566:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024568:	3c01      	subs	r4, #1
 802456a:	f10b 0b03 	add.w	fp, fp, #3
 802456e:	441d      	add	r5, r3
 8024570:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024572:	441e      	add	r6, r3
 8024574:	e725      	b.n	80243c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024576:	d021      	beq.n	80245bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8024578:	1e63      	subs	r3, r4, #1
 802457a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802457c:	fb00 5003 	mla	r0, r0, r3, r5
 8024580:	1400      	asrs	r0, r0, #16
 8024582:	f53f af3a 	bmi.w	80243fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8024586:	3901      	subs	r1, #1
 8024588:	4288      	cmp	r0, r1
 802458a:	f6bf af36 	bge.w	80243fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802458e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8024590:	fb01 6303 	mla	r3, r1, r3, r6
 8024594:	141b      	asrs	r3, r3, #16
 8024596:	f53f af30 	bmi.w	80243fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802459a:	3a01      	subs	r2, #1
 802459c:	4293      	cmp	r3, r2
 802459e:	f6bf af2c 	bge.w	80243fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80245a2:	f10b 0c03 	add.w	ip, fp, #3
 80245a6:	46a6      	mov	lr, r4
 80245a8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80245ac:	f1be 0f00 	cmp.w	lr, #0
 80245b0:	dc79      	bgt.n	80246a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80245b2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80245b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80245ba:	44a3      	add	fp, r4
 80245bc:	9b07      	ldr	r3, [sp, #28]
 80245be:	2b00      	cmp	r3, #0
 80245c0:	f340 8123 	ble.w	802480a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80245c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80245c8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80245ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80245ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80245d2:	eef0 6a62 	vmov.f32	s13, s5
 80245d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80245da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80245de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245e2:	ee16 5a90 	vmov	r5, s13
 80245e6:	eef0 6a43 	vmov.f32	s13, s6
 80245ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245ee:	ee16 6a90 	vmov	r6, s13
 80245f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80245f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80245fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80245fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024602:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024606:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802460a:	ee12 2a90 	vmov	r2, s5
 802460e:	eef0 2a47 	vmov.f32	s5, s14
 8024612:	fb92 f3f3 	sdiv	r3, r2, r3
 8024616:	ee13 2a10 	vmov	r2, s6
 802461a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802461c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802461e:	eeb0 3a67 	vmov.f32	s6, s15
 8024622:	fb92 f3f3 	sdiv	r3, r2, r3
 8024626:	9320      	str	r3, [sp, #128]	@ 0x80
 8024628:	9b07      	ldr	r3, [sp, #28]
 802462a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802462c:	3b01      	subs	r3, #1
 802462e:	9307      	str	r3, [sp, #28]
 8024630:	bf08      	it	eq
 8024632:	4614      	moveq	r4, r2
 8024634:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8024636:	bf18      	it	ne
 8024638:	461c      	movne	r4, r3
 802463a:	e6b4      	b.n	80243a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802463c:	2900      	cmp	r1, #0
 802463e:	f43f af3c 	beq.w	80244ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024642:	eb09 0003 	add.w	r0, r9, r3
 8024646:	0843      	lsrs	r3, r0, #1
 8024648:	07c0      	lsls	r0, r0, #31
 802464a:	f818 3003 	ldrb.w	r3, [r8, r3]
 802464e:	bf54      	ite	pl
 8024650:	f003 030f 	andpl.w	r3, r3, #15
 8024654:	111b      	asrmi	r3, r3, #4
 8024656:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802465a:	b2db      	uxtb	r3, r3
 802465c:	930a      	str	r3, [sp, #40]	@ 0x28
 802465e:	e72c      	b.n	80244ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8024660:	703a      	strb	r2, [r7, #0]
 8024662:	7078      	strb	r0, [r7, #1]
 8024664:	f887 e002 	strb.w	lr, [r7, #2]
 8024668:	e775      	b.n	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802466a:	1c5a      	adds	r2, r3, #1
 802466c:	f53f af73 	bmi.w	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024670:	4594      	cmp	ip, r2
 8024672:	f6ff af70 	blt.w	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024676:	1c42      	adds	r2, r0, #1
 8024678:	f53f af6d 	bmi.w	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802467c:	4596      	cmp	lr, r2
 802467e:	f6ff af6a 	blt.w	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8024682:	9302      	str	r3, [sp, #8]
 8024684:	fa0f f38e 	sxth.w	r3, lr
 8024688:	9a08      	ldr	r2, [sp, #32]
 802468a:	9301      	str	r3, [sp, #4]
 802468c:	fa0f f38c 	sxth.w	r3, ip
 8024690:	9105      	str	r1, [sp, #20]
 8024692:	4639      	mov	r1, r7
 8024694:	9300      	str	r3, [sp, #0]
 8024696:	464b      	mov	r3, r9
 8024698:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802469c:	4642      	mov	r2, r8
 802469e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80246a0:	f7ff fd90 	bl	80241c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 80246a4:	e757      	b.n	8024556 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80246a6:	142a      	asrs	r2, r5, #16
 80246a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80246ac:	1433      	asrs	r3, r6, #16
 80246ae:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80246b2:	fb09 2303 	mla	r3, r9, r3, r2
 80246b6:	085a      	lsrs	r2, r3, #1
 80246b8:	07d9      	lsls	r1, r3, #31
 80246ba:	f818 2002 	ldrb.w	r2, [r8, r2]
 80246be:	bf54      	ite	pl
 80246c0:	f002 020f 	andpl.w	r2, r2, #15
 80246c4:	1112      	asrmi	r2, r2, #4
 80246c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80246ca:	b2d2      	uxtb	r2, r2
 80246cc:	2800      	cmp	r0, #0
 80246ce:	f000 8085 	beq.w	80247dc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80246d2:	f103 0a01 	add.w	sl, r3, #1
 80246d6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80246da:	f01a 0f01 	tst.w	sl, #1
 80246de:	f818 1001 	ldrb.w	r1, [r8, r1]
 80246e2:	bf0c      	ite	eq
 80246e4:	f001 010f 	andeq.w	r1, r1, #15
 80246e8:	1109      	asrne	r1, r1, #4
 80246ea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80246ee:	b2c9      	uxtb	r1, r1
 80246f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80246f2:	b1df      	cbz	r7, 802472c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80246f4:	444b      	add	r3, r9
 80246f6:	0859      	lsrs	r1, r3, #1
 80246f8:	f013 0f01 	tst.w	r3, #1
 80246fc:	f103 0301 	add.w	r3, r3, #1
 8024700:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024704:	bf0c      	ite	eq
 8024706:	f001 010f 	andeq.w	r1, r1, #15
 802470a:	1109      	asrne	r1, r1, #4
 802470c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024710:	b2c9      	uxtb	r1, r1
 8024712:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024714:	0859      	lsrs	r1, r3, #1
 8024716:	07db      	lsls	r3, r3, #31
 8024718:	f818 1001 	ldrb.w	r1, [r8, r1]
 802471c:	bf54      	ite	pl
 802471e:	f001 010f 	andpl.w	r1, r1, #15
 8024722:	1109      	asrmi	r1, r1, #4
 8024724:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8024728:	b2c9      	uxtb	r1, r1
 802472a:	9110      	str	r1, [sp, #64]	@ 0x40
 802472c:	b280      	uxth	r0, r0
 802472e:	b2bf      	uxth	r7, r7
 8024730:	fb00 f307 	mul.w	r3, r0, r7
 8024734:	0100      	lsls	r0, r0, #4
 8024736:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 802473a:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802473e:	1ac0      	subs	r0, r0, r3
 8024740:	b2bf      	uxth	r7, r7
 8024742:	b280      	uxth	r0, r0
 8024744:	1bc9      	subs	r1, r1, r7
 8024746:	fa1f fa81 	uxth.w	sl, r1
 802474a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802474c:	4348      	muls	r0, r1
 802474e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024750:	fb02 020a 	mla	r2, r2, sl, r0
 8024754:	fb07 2701 	mla	r7, r7, r1, r2
 8024758:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802475a:	fb03 7302 	mla	r3, r3, r2, r7
 802475e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024762:	b393      	cbz	r3, 80247ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8024764:	4a2a      	ldr	r2, [pc, #168]	@ (8024810 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8024766:	2bff      	cmp	r3, #255	@ 0xff
 8024768:	6811      	ldr	r1, [r2, #0]
 802476a:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 802476e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8024772:	b2c9      	uxtb	r1, r1
 8024774:	d042      	beq.n	80247fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8024776:	b298      	uxth	r0, r3
 8024778:	43db      	mvns	r3, r3
 802477a:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 802477e:	fb11 f100 	smulbb	r1, r1, r0
 8024782:	b2db      	uxtb	r3, r3
 8024784:	fb17 f700 	smulbb	r7, r7, r0
 8024788:	fb02 1103 	mla	r1, r2, r3, r1
 802478c:	fb1a f000 	smulbb	r0, sl, r0
 8024790:	b289      	uxth	r1, r1
 8024792:	1c4a      	adds	r2, r1, #1
 8024794:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024798:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 802479c:	fb02 7703 	mla	r7, r2, r3, r7
 80247a0:	1209      	asrs	r1, r1, #8
 80247a2:	b2bf      	uxth	r7, r7
 80247a4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80247a8:	1c7a      	adds	r2, r7, #1
 80247aa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80247ae:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80247b2:	fb02 0303 	mla	r3, r2, r3, r0
 80247b6:	123f      	asrs	r7, r7, #8
 80247b8:	b29b      	uxth	r3, r3
 80247ba:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80247be:	1c5a      	adds	r2, r3, #1
 80247c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80247c4:	121b      	asrs	r3, r3, #8
 80247c6:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80247ca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80247cc:	f10c 0c03 	add.w	ip, ip, #3
 80247d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80247d4:	441d      	add	r5, r3
 80247d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80247d8:	441e      	add	r6, r3
 80247da:	e6e7      	b.n	80245ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80247dc:	2f00      	cmp	r7, #0
 80247de:	d0a5      	beq.n	802472c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80247e0:	444b      	add	r3, r9
 80247e2:	0859      	lsrs	r1, r3, #1
 80247e4:	07db      	lsls	r3, r3, #31
 80247e6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80247ea:	bf54      	ite	pl
 80247ec:	f001 010f 	andpl.w	r1, r1, #15
 80247f0:	1109      	asrmi	r1, r1, #4
 80247f2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80247f6:	b2c9      	uxtb	r1, r1
 80247f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80247fa:	e797      	b.n	802472c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80247fc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8024800:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8024804:	f80c ac01 	strb.w	sl, [ip, #-1]
 8024808:	e7df      	b.n	80247ca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802480a:	b013      	add	sp, #76	@ 0x4c
 802480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024810:	2401bb40 	.word	0x2401bb40

08024814 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8024814:	b530      	push	{r4, r5, lr}
 8024816:	b29d      	uxth	r5, r3
 8024818:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 802481c:	780c      	ldrb	r4, [r1, #0]
 802481e:	b298      	uxth	r0, r3
 8024820:	7813      	ldrb	r3, [r2, #0]
 8024822:	fb14 f405 	smulbb	r4, r4, r5
 8024826:	fb13 f300 	smulbb	r3, r3, r0
 802482a:	441c      	add	r4, r3
 802482c:	b2a4      	uxth	r4, r4
 802482e:	1c63      	adds	r3, r4, #1
 8024830:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024834:	7853      	ldrb	r3, [r2, #1]
 8024836:	fb13 f300 	smulbb	r3, r3, r0
 802483a:	1224      	asrs	r4, r4, #8
 802483c:	7014      	strb	r4, [r2, #0]
 802483e:	784c      	ldrb	r4, [r1, #1]
 8024840:	fb14 f405 	smulbb	r4, r4, r5
 8024844:	441c      	add	r4, r3
 8024846:	b2a4      	uxth	r4, r4
 8024848:	1c63      	adds	r3, r4, #1
 802484a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802484e:	1224      	asrs	r4, r4, #8
 8024850:	7054      	strb	r4, [r2, #1]
 8024852:	788b      	ldrb	r3, [r1, #2]
 8024854:	7891      	ldrb	r1, [r2, #2]
 8024856:	fb13 f305 	smulbb	r3, r3, r5
 802485a:	fb11 f000 	smulbb	r0, r1, r0
 802485e:	4403      	add	r3, r0
 8024860:	b29b      	uxth	r3, r3
 8024862:	1c59      	adds	r1, r3, #1
 8024864:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024868:	121b      	asrs	r3, r3, #8
 802486a:	7093      	strb	r3, [r2, #2]
 802486c:	bd30      	pop	{r4, r5, pc}
	...

08024870 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8024870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024874:	461c      	mov	r4, r3
 8024876:	b08b      	sub	sp, #44	@ 0x2c
 8024878:	460e      	mov	r6, r1
 802487a:	4615      	mov	r5, r2
 802487c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802487e:	4682      	mov	sl, r0
 8024880:	6861      	ldr	r1, [r4, #4]
 8024882:	aa06      	add	r2, sp, #24
 8024884:	6820      	ldr	r0, [r4, #0]
 8024886:	2702      	movs	r7, #2
 8024888:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 802488c:	3504      	adds	r5, #4
 802488e:	c203      	stmia	r2!, {r0, r1}
 8024890:	6818      	ldr	r0, [r3, #0]
 8024892:	aa08      	add	r2, sp, #32
 8024894:	6859      	ldr	r1, [r3, #4]
 8024896:	c203      	stmia	r2!, {r0, r1}
 8024898:	a806      	add	r0, sp, #24
 802489a:	f7f3 fc79 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802489e:	4621      	mov	r1, r4
 80248a0:	a808      	add	r0, sp, #32
 80248a2:	f7f3 fc9d 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80248a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80248aa:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 80248ae:	f002 0301 	and.w	r3, r2, #1
 80248b2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80248b6:	9302      	str	r3, [sp, #8]
 80248b8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80248bc:	f003 0101 	and.w	r1, r3, #1
 80248c0:	9101      	str	r1, [sp, #4]
 80248c2:	9801      	ldr	r0, [sp, #4]
 80248c4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80248c8:	4403      	add	r3, r0
 80248ca:	fb01 2303 	mla	r3, r1, r3, r2
 80248ce:	fb93 f3f7 	sdiv	r3, r3, r7
 80248d2:	441e      	add	r6, r3
 80248d4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80248d8:	441a      	add	r2, r3
 80248da:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 80248de:	4419      	add	r1, r3
 80248e0:	4b70      	ldr	r3, [pc, #448]	@ (8024aa4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80248e2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80248e6:	6818      	ldr	r0, [r3, #0]
 80248e8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80248ec:	6803      	ldr	r3, [r0, #0]
 80248ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80248f0:	4798      	blx	r3
 80248f2:	4a6d      	ldr	r2, [pc, #436]	@ (8024aa8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80248f4:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80248f8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80248fc:	8813      	ldrh	r3, [r2, #0]
 80248fe:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8024902:	fb03 1404 	mla	r4, r3, r4, r1
 8024906:	4611      	mov	r1, r2
 8024908:	fb0b f303 	mul.w	r3, fp, r3
 802490c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024914:	4404      	add	r4, r0
 8024916:	4423      	add	r3, r4
 8024918:	d073      	beq.n	8024a02 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 802491a:	9705      	str	r7, [sp, #20]
 802491c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8024920:	9b03      	ldr	r3, [sp, #12]
 8024922:	429c      	cmp	r4, r3
 8024924:	f080 80b5 	bcs.w	8024a92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024928:	9b02      	ldr	r3, [sp, #8]
 802492a:	b35b      	cbz	r3, 8024984 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 802492c:	7831      	ldrb	r1, [r6, #0]
 802492e:	4622      	mov	r2, r4
 8024930:	1c77      	adds	r7, r6, #1
 8024932:	3403      	adds	r4, #3
 8024934:	f001 010f 	and.w	r1, r1, #15
 8024938:	f108 3bff 	add.w	fp, r8, #4294967295
 802493c:	464b      	mov	r3, r9
 802493e:	4650      	mov	r0, sl
 8024940:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024944:	4429      	add	r1, r5
 8024946:	f7ff ff65 	bl	8024814 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802494a:	f1bb 0f01 	cmp.w	fp, #1
 802494e:	dd1c      	ble.n	802498a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8024950:	7839      	ldrb	r1, [r7, #0]
 8024952:	4622      	mov	r2, r4
 8024954:	464b      	mov	r3, r9
 8024956:	4650      	mov	r0, sl
 8024958:	0909      	lsrs	r1, r1, #4
 802495a:	f1ab 0b02 	sub.w	fp, fp, #2
 802495e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024962:	4429      	add	r1, r5
 8024964:	f7ff ff56 	bl	8024814 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024968:	f817 1b01 	ldrb.w	r1, [r7], #1
 802496c:	1ce2      	adds	r2, r4, #3
 802496e:	464b      	mov	r3, r9
 8024970:	f001 010f 	and.w	r1, r1, #15
 8024974:	4650      	mov	r0, sl
 8024976:	3406      	adds	r4, #6
 8024978:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802497c:	4429      	add	r1, r5
 802497e:	f7ff ff49 	bl	8024814 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024982:	e7e2      	b.n	802494a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024984:	4637      	mov	r7, r6
 8024986:	46c3      	mov	fp, r8
 8024988:	e7df      	b.n	802494a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802498a:	d10a      	bne.n	80249a2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 802498c:	7839      	ldrb	r1, [r7, #0]
 802498e:	4622      	mov	r2, r4
 8024990:	3403      	adds	r4, #3
 8024992:	464b      	mov	r3, r9
 8024994:	0909      	lsrs	r1, r1, #4
 8024996:	4650      	mov	r0, sl
 8024998:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802499c:	4429      	add	r1, r5
 802499e:	f7ff ff39 	bl	8024814 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80249a2:	9b04      	ldr	r3, [sp, #16]
 80249a4:	9a01      	ldr	r2, [sp, #4]
 80249a6:	881b      	ldrh	r3, [r3, #0]
 80249a8:	eba3 0308 	sub.w	r3, r3, r8
 80249ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80249b0:	441c      	add	r4, r3
 80249b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80249b6:	4413      	add	r3, r2
 80249b8:	9a05      	ldr	r2, [sp, #20]
 80249ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80249be:	441e      	add	r6, r3
 80249c0:	e7ae      	b.n	8024920 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 80249c2:	4632      	mov	r2, r6
 80249c4:	46c4      	mov	ip, r8
 80249c6:	e037      	b.n	8024a38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80249c8:	d10e      	bne.n	80249e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 80249ca:	7812      	ldrb	r2, [r2, #0]
 80249cc:	3003      	adds	r0, #3
 80249ce:	0912      	lsrs	r2, r2, #4
 80249d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80249d4:	18ac      	adds	r4, r5, r2
 80249d6:	5caa      	ldrb	r2, [r5, r2]
 80249d8:	f800 2c03 	strb.w	r2, [r0, #-3]
 80249dc:	7862      	ldrb	r2, [r4, #1]
 80249de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80249e2:	78a2      	ldrb	r2, [r4, #2]
 80249e4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80249e8:	880c      	ldrh	r4, [r1, #0]
 80249ea:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80249ee:	eba4 0408 	sub.w	r4, r4, r8
 80249f2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80249f6:	4404      	add	r4, r0
 80249f8:	9801      	ldr	r0, [sp, #4]
 80249fa:	4402      	add	r2, r0
 80249fc:	fb92 f2f7 	sdiv	r2, r2, r7
 8024a00:	4416      	add	r6, r2
 8024a02:	429c      	cmp	r4, r3
 8024a04:	d245      	bcs.n	8024a92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8024a06:	9a02      	ldr	r2, [sp, #8]
 8024a08:	2a00      	cmp	r2, #0
 8024a0a:	d0da      	beq.n	80249c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8024a0c:	7830      	ldrb	r0, [r6, #0]
 8024a0e:	1c72      	adds	r2, r6, #1
 8024a10:	3403      	adds	r4, #3
 8024a12:	f000 000f 	and.w	r0, r0, #15
 8024a16:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a1a:	eb05 0c00 	add.w	ip, r5, r0
 8024a1e:	5c28      	ldrb	r0, [r5, r0]
 8024a20:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024a24:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024a28:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024a2c:	f89c 0002 	ldrb.w	r0, [ip, #2]
 8024a30:	f108 3cff 	add.w	ip, r8, #4294967295
 8024a34:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024a38:	f1bc 0f01 	cmp.w	ip, #1
 8024a3c:	4620      	mov	r0, r4
 8024a3e:	f104 0406 	add.w	r4, r4, #6
 8024a42:	ddc1      	ble.n	80249c8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 8024a44:	7810      	ldrb	r0, [r2, #0]
 8024a46:	f1ac 0c02 	sub.w	ip, ip, #2
 8024a4a:	0900      	lsrs	r0, r0, #4
 8024a4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a50:	eb05 0e00 	add.w	lr, r5, r0
 8024a54:	5c28      	ldrb	r0, [r5, r0]
 8024a56:	f804 0c06 	strb.w	r0, [r4, #-6]
 8024a5a:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024a5e:	f804 0c05 	strb.w	r0, [r4, #-5]
 8024a62:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024a66:	f804 0c04 	strb.w	r0, [r4, #-4]
 8024a6a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8024a6e:	f000 000f 	and.w	r0, r0, #15
 8024a72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024a76:	eb05 0e00 	add.w	lr, r5, r0
 8024a7a:	5c28      	ldrb	r0, [r5, r0]
 8024a7c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024a80:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024a84:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024a88:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024a8c:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024a90:	e7d2      	b.n	8024a38 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024a92:	4b04      	ldr	r3, [pc, #16]	@ (8024aa4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8024a94:	6818      	ldr	r0, [r3, #0]
 8024a96:	6803      	ldr	r3, [r0, #0]
 8024a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024a9a:	4798      	blx	r3
 8024a9c:	b00b      	add	sp, #44	@ 0x2c
 8024a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024aa2:	bf00      	nop
 8024aa4:	2401bb38 	.word	0x2401bb38
 8024aa8:	2401bb32 	.word	0x2401bb32

08024aac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8024aac:	b530      	push	{r4, r5, lr}
 8024aae:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8024ab2:	780d      	ldrb	r5, [r1, #0]
 8024ab4:	28ff      	cmp	r0, #255	@ 0xff
 8024ab6:	d107      	bne.n	8024ac8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024ab8:	2bff      	cmp	r3, #255	@ 0xff
 8024aba:	d105      	bne.n	8024ac8 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024abc:	7015      	strb	r5, [r2, #0]
 8024abe:	784b      	ldrb	r3, [r1, #1]
 8024ac0:	7053      	strb	r3, [r2, #1]
 8024ac2:	788b      	ldrb	r3, [r1, #2]
 8024ac4:	7093      	strb	r3, [r2, #2]
 8024ac6:	bd30      	pop	{r4, r5, pc}
 8024ac8:	fb10 f003 	smulbb	r0, r0, r3
 8024acc:	b283      	uxth	r3, r0
 8024ace:	1c58      	adds	r0, r3, #1
 8024ad0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024ad4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024ad8:	b284      	uxth	r4, r0
 8024ada:	43c0      	mvns	r0, r0
 8024adc:	fb15 f504 	smulbb	r5, r5, r4
 8024ae0:	b2c3      	uxtb	r3, r0
 8024ae2:	7810      	ldrb	r0, [r2, #0]
 8024ae4:	fb00 5003 	mla	r0, r0, r3, r5
 8024ae8:	b280      	uxth	r0, r0
 8024aea:	1c45      	adds	r5, r0, #1
 8024aec:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024af0:	7855      	ldrb	r5, [r2, #1]
 8024af2:	fb15 f503 	smulbb	r5, r5, r3
 8024af6:	1200      	asrs	r0, r0, #8
 8024af8:	7010      	strb	r0, [r2, #0]
 8024afa:	7848      	ldrb	r0, [r1, #1]
 8024afc:	fb00 5004 	mla	r0, r0, r4, r5
 8024b00:	b280      	uxth	r0, r0
 8024b02:	1c45      	adds	r5, r0, #1
 8024b04:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8024b08:	1200      	asrs	r0, r0, #8
 8024b0a:	7050      	strb	r0, [r2, #1]
 8024b0c:	7888      	ldrb	r0, [r1, #2]
 8024b0e:	7891      	ldrb	r1, [r2, #2]
 8024b10:	fb11 f303 	smulbb	r3, r1, r3
 8024b14:	fb00 3304 	mla	r3, r0, r4, r3
 8024b18:	b29b      	uxth	r3, r3
 8024b1a:	1c59      	adds	r1, r3, #1
 8024b1c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024b20:	121b      	asrs	r3, r3, #8
 8024b22:	e7cf      	b.n	8024ac4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08024b24 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8024b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b28:	461d      	mov	r5, r3
 8024b2a:	b08f      	sub	sp, #60	@ 0x3c
 8024b2c:	460c      	mov	r4, r1
 8024b2e:	4616      	mov	r6, r2
 8024b30:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024b32:	4680      	mov	r8, r0
 8024b34:	6869      	ldr	r1, [r5, #4]
 8024b36:	aa0a      	add	r2, sp, #40	@ 0x28
 8024b38:	6828      	ldr	r0, [r5, #0]
 8024b3a:	3604      	adds	r6, #4
 8024b3c:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 8024b40:	4f57      	ldr	r7, [pc, #348]	@ (8024ca0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 8024b42:	c203      	stmia	r2!, {r0, r1}
 8024b44:	6818      	ldr	r0, [r3, #0]
 8024b46:	aa0c      	add	r2, sp, #48	@ 0x30
 8024b48:	6859      	ldr	r1, [r3, #4]
 8024b4a:	c203      	stmia	r2!, {r0, r1}
 8024b4c:	a80a      	add	r0, sp, #40	@ 0x28
 8024b4e:	f7f3 fb1f 	bl	8018190 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024b52:	4629      	mov	r1, r5
 8024b54:	a80c      	add	r0, sp, #48	@ 0x30
 8024b56:	2502      	movs	r5, #2
 8024b58:	f7f3 fb42 	bl	80181e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024b5c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024b60:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8024b64:	f002 0301 	and.w	r3, r2, #1
 8024b68:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8024b6c:	9304      	str	r3, [sp, #16]
 8024b6e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024b72:	f003 0101 	and.w	r1, r3, #1
 8024b76:	9103      	str	r1, [sp, #12]
 8024b78:	9803      	ldr	r0, [sp, #12]
 8024b7a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8024b7e:	4403      	add	r3, r0
 8024b80:	6838      	ldr	r0, [r7, #0]
 8024b82:	fb01 2303 	mla	r3, r1, r3, r2
 8024b86:	fb93 f3f5 	sdiv	r3, r3, r5
 8024b8a:	18e5      	adds	r5, r4, r3
 8024b8c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024b90:	441a      	add	r2, r3
 8024b92:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8024b96:	4419      	add	r1, r3
 8024b98:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8024b9c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8024ba0:	6803      	ldr	r3, [r0, #0]
 8024ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024ba4:	4798      	blx	r3
 8024ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8024ca4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8024ba8:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8024bac:	8813      	ldrh	r3, [r2, #0]
 8024bae:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8024bb2:	9207      	str	r2, [sp, #28]
 8024bb4:	fb03 1404 	mla	r4, r3, r4, r1
 8024bb8:	fb0a f303 	mul.w	r3, sl, r3
 8024bbc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024bc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024bc4:	4404      	add	r4, r0
 8024bc6:	18e3      	adds	r3, r4, r3
 8024bc8:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8024bcc:	9b05      	ldr	r3, [sp, #20]
 8024bce:	429c      	cmp	r4, r3
 8024bd0:	d25d      	bcs.n	8024c8e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8024bd2:	9b04      	ldr	r3, [sp, #16]
 8024bd4:	2b00      	cmp	r3, #0
 8024bd6:	d037      	beq.n	8024c48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8024bd8:	782b      	ldrb	r3, [r5, #0]
 8024bda:	1c6f      	adds	r7, r5, #1
 8024bdc:	f003 030f 	and.w	r3, r3, #15
 8024be0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8024be6:	0e1b      	lsrs	r3, r3, #24
 8024be8:	d006      	beq.n	8024bf8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8024bea:	9300      	str	r3, [sp, #0]
 8024bec:	4622      	mov	r2, r4
 8024bee:	464b      	mov	r3, r9
 8024bf0:	a909      	add	r1, sp, #36	@ 0x24
 8024bf2:	4640      	mov	r0, r8
 8024bf4:	f7ff ff5a 	bl	8024aac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024bf8:	3403      	adds	r4, #3
 8024bfa:	f10b 3aff 	add.w	sl, fp, #4294967295
 8024bfe:	f1ba 0f01 	cmp.w	sl, #1
 8024c02:	dd24      	ble.n	8024c4e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8024c04:	783b      	ldrb	r3, [r7, #0]
 8024c06:	091b      	lsrs	r3, r3, #4
 8024c08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024c0c:	9308      	str	r3, [sp, #32]
 8024c0e:	0e1b      	lsrs	r3, r3, #24
 8024c10:	d006      	beq.n	8024c20 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8024c12:	9300      	str	r3, [sp, #0]
 8024c14:	4622      	mov	r2, r4
 8024c16:	464b      	mov	r3, r9
 8024c18:	a908      	add	r1, sp, #32
 8024c1a:	4640      	mov	r0, r8
 8024c1c:	f7ff ff46 	bl	8024aac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024c20:	f817 3b01 	ldrb.w	r3, [r7], #1
 8024c24:	f003 030f 	and.w	r3, r3, #15
 8024c28:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c2e:	0e1b      	lsrs	r3, r3, #24
 8024c30:	d006      	beq.n	8024c40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8024c32:	9300      	str	r3, [sp, #0]
 8024c34:	1ce2      	adds	r2, r4, #3
 8024c36:	464b      	mov	r3, r9
 8024c38:	a909      	add	r1, sp, #36	@ 0x24
 8024c3a:	4640      	mov	r0, r8
 8024c3c:	f7ff ff36 	bl	8024aac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024c40:	3406      	adds	r4, #6
 8024c42:	f1aa 0a02 	sub.w	sl, sl, #2
 8024c46:	e7da      	b.n	8024bfe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024c48:	462f      	mov	r7, r5
 8024c4a:	46da      	mov	sl, fp
 8024c4c:	e7d7      	b.n	8024bfe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024c4e:	d10e      	bne.n	8024c6e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8024c50:	783b      	ldrb	r3, [r7, #0]
 8024c52:	091b      	lsrs	r3, r3, #4
 8024c54:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c5a:	0e1b      	lsrs	r3, r3, #24
 8024c5c:	d006      	beq.n	8024c6c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8024c5e:	9300      	str	r3, [sp, #0]
 8024c60:	4622      	mov	r2, r4
 8024c62:	464b      	mov	r3, r9
 8024c64:	a909      	add	r1, sp, #36	@ 0x24
 8024c66:	4640      	mov	r0, r8
 8024c68:	f7ff ff20 	bl	8024aac <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024c6c:	3403      	adds	r4, #3
 8024c6e:	9b07      	ldr	r3, [sp, #28]
 8024c70:	9a03      	ldr	r2, [sp, #12]
 8024c72:	881b      	ldrh	r3, [r3, #0]
 8024c74:	eba3 030b 	sub.w	r3, r3, fp
 8024c78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024c7c:	441c      	add	r4, r3
 8024c7e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8024c82:	4413      	add	r3, r2
 8024c84:	2202      	movs	r2, #2
 8024c86:	fb93 f3f2 	sdiv	r3, r3, r2
 8024c8a:	441d      	add	r5, r3
 8024c8c:	e79e      	b.n	8024bcc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8024c8e:	9b06      	ldr	r3, [sp, #24]
 8024c90:	6818      	ldr	r0, [r3, #0]
 8024c92:	6803      	ldr	r3, [r0, #0]
 8024c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024c96:	4798      	blx	r3
 8024c98:	b00f      	add	sp, #60	@ 0x3c
 8024c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c9e:	bf00      	nop
 8024ca0:	2401bb38 	.word	0x2401bb38
 8024ca4:	2401bb32 	.word	0x2401bb32

08024ca8 <CRC_Lock>:
 8024ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8024d60 <CRC_Lock+0xb8>)
 8024caa:	b530      	push	{r4, r5, lr}
 8024cac:	6813      	ldr	r3, [r2, #0]
 8024cae:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8024cb2:	f023 0301 	bic.w	r3, r3, #1
 8024cb6:	6013      	str	r3, [r2, #0]
 8024cb8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8024cbc:	4b29      	ldr	r3, [pc, #164]	@ (8024d64 <CRC_Lock+0xbc>)
 8024cbe:	681c      	ldr	r4, [r3, #0]
 8024cc0:	4014      	ands	r4, r2
 8024cc2:	42ac      	cmp	r4, r5
 8024cc4:	d005      	beq.n	8024cd2 <CRC_Lock+0x2a>
 8024cc6:	681c      	ldr	r4, [r3, #0]
 8024cc8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8024ccc:	4014      	ands	r4, r2
 8024cce:	42ac      	cmp	r4, r5
 8024cd0:	d125      	bne.n	8024d1e <CRC_Lock+0x76>
 8024cd2:	4b25      	ldr	r3, [pc, #148]	@ (8024d68 <CRC_Lock+0xc0>)
 8024cd4:	681b      	ldr	r3, [r3, #0]
 8024cd6:	2b00      	cmp	r3, #0
 8024cd8:	d139      	bne.n	8024d4e <CRC_Lock+0xa6>
 8024cda:	4b24      	ldr	r3, [pc, #144]	@ (8024d6c <CRC_Lock+0xc4>)
 8024cdc:	681a      	ldr	r2, [r3, #0]
 8024cde:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024ce2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8024ce6:	d00d      	beq.n	8024d04 <CRC_Lock+0x5c>
 8024ce8:	681a      	ldr	r2, [r3, #0]
 8024cea:	f240 4483 	movw	r4, #1155	@ 0x483
 8024cee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8024cf2:	42a2      	cmp	r2, r4
 8024cf4:	d006      	beq.n	8024d04 <CRC_Lock+0x5c>
 8024cf6:	681b      	ldr	r3, [r3, #0]
 8024cf8:	f240 4285 	movw	r2, #1157	@ 0x485
 8024cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d00:	4293      	cmp	r3, r2
 8024d02:	d124      	bne.n	8024d4e <CRC_Lock+0xa6>
 8024d04:	4b1a      	ldr	r3, [pc, #104]	@ (8024d70 <CRC_Lock+0xc8>)
 8024d06:	2201      	movs	r2, #1
 8024d08:	601a      	str	r2, [r3, #0]
 8024d0a:	681a      	ldr	r2, [r3, #0]
 8024d0c:	2a00      	cmp	r2, #0
 8024d0e:	d1fc      	bne.n	8024d0a <CRC_Lock+0x62>
 8024d10:	4b18      	ldr	r3, [pc, #96]	@ (8024d74 <CRC_Lock+0xcc>)
 8024d12:	6018      	str	r0, [r3, #0]
 8024d14:	6818      	ldr	r0, [r3, #0]
 8024d16:	1a43      	subs	r3, r0, r1
 8024d18:	4258      	negs	r0, r3
 8024d1a:	4158      	adcs	r0, r3
 8024d1c:	e00e      	b.n	8024d3c <CRC_Lock+0x94>
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	4013      	ands	r3, r2
 8024d22:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8024d26:	4293      	cmp	r3, r2
 8024d28:	d111      	bne.n	8024d4e <CRC_Lock+0xa6>
 8024d2a:	4b13      	ldr	r3, [pc, #76]	@ (8024d78 <CRC_Lock+0xd0>)
 8024d2c:	f240 4286 	movw	r2, #1158	@ 0x486
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024d36:	4293      	cmp	r3, r2
 8024d38:	d001      	beq.n	8024d3e <CRC_Lock+0x96>
 8024d3a:	2000      	movs	r0, #0
 8024d3c:	bd30      	pop	{r4, r5, pc}
 8024d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8024d7c <CRC_Lock+0xd4>)
 8024d40:	2201      	movs	r2, #1
 8024d42:	601a      	str	r2, [r3, #0]
 8024d44:	681a      	ldr	r2, [r3, #0]
 8024d46:	2a00      	cmp	r2, #0
 8024d48:	d1fc      	bne.n	8024d44 <CRC_Lock+0x9c>
 8024d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8024d80 <CRC_Lock+0xd8>)
 8024d4c:	e7e1      	b.n	8024d12 <CRC_Lock+0x6a>
 8024d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8024d84 <CRC_Lock+0xdc>)
 8024d50:	2201      	movs	r2, #1
 8024d52:	601a      	str	r2, [r3, #0]
 8024d54:	681a      	ldr	r2, [r3, #0]
 8024d56:	2a00      	cmp	r2, #0
 8024d58:	d1fc      	bne.n	8024d54 <CRC_Lock+0xac>
 8024d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8024d88 <CRC_Lock+0xe0>)
 8024d5c:	e7d9      	b.n	8024d12 <CRC_Lock+0x6a>
 8024d5e:	bf00      	nop
 8024d60:	e0002000 	.word	0xe0002000
 8024d64:	e000ed00 	.word	0xe000ed00
 8024d68:	e0042000 	.word	0xe0042000
 8024d6c:	5c001000 	.word	0x5c001000
 8024d70:	58024c08 	.word	0x58024c08
 8024d74:	58024c00 	.word	0x58024c00
 8024d78:	46008ff0 	.word	0x46008ff0
 8024d7c:	46024c08 	.word	0x46024c08
 8024d80:	46024c00 	.word	0x46024c00
 8024d84:	40023008 	.word	0x40023008
 8024d88:	40023000 	.word	0x40023000

08024d8c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024d8c:	6101      	str	r1, [r0, #16]
 8024d8e:	4770      	bx	lr

08024d90 <_ZN8touchgfx8Gestures4tickEv>:
 8024d90:	7b83      	ldrb	r3, [r0, #14]
 8024d92:	b14b      	cbz	r3, 8024da8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8024d94:	8903      	ldrh	r3, [r0, #8]
 8024d96:	3301      	adds	r3, #1
 8024d98:	b29b      	uxth	r3, r3
 8024d9a:	2b07      	cmp	r3, #7
 8024d9c:	8103      	strh	r3, [r0, #8]
 8024d9e:	bf81      	itttt	hi
 8024da0:	2300      	movhi	r3, #0
 8024da2:	8143      	strhhi	r3, [r0, #10]
 8024da4:	8183      	strhhi	r3, [r0, #12]
 8024da6:	7383      	strbhi	r3, [r0, #14]
 8024da8:	4770      	bx	lr
	...

08024dac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024dac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024db0:	4698      	mov	r8, r3
 8024db2:	8883      	ldrh	r3, [r0, #4]
 8024db4:	4604      	mov	r4, r0
 8024db6:	4617      	mov	r7, r2
 8024db8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024dbc:	eba8 0303 	sub.w	r3, r8, r3
 8024dc0:	4a19      	ldr	r2, [pc, #100]	@ (8024e28 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8024dc2:	460e      	mov	r6, r1
 8024dc4:	b21b      	sxth	r3, r3
 8024dc6:	88c1      	ldrh	r1, [r0, #6]
 8024dc8:	9200      	str	r2, [sp, #0]
 8024dca:	2000      	movs	r0, #0
 8024dcc:	2b00      	cmp	r3, #0
 8024dce:	8aa2      	ldrh	r2, [r4, #20]
 8024dd0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8024dd4:	bfb8      	it	lt
 8024dd6:	425b      	neglt	r3, r3
 8024dd8:	f88d 0004 	strb.w	r0, [sp, #4]
 8024ddc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024de0:	b21b      	sxth	r3, r3
 8024de2:	f8ad 800a 	strh.w	r8, [sp, #10]
 8024de6:	f8ad 500c 	strh.w	r5, [sp, #12]
 8024dea:	4293      	cmp	r3, r2
 8024dec:	dc07      	bgt.n	8024dfe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8024dee:	1a69      	subs	r1, r5, r1
 8024df0:	b209      	sxth	r1, r1
 8024df2:	2900      	cmp	r1, #0
 8024df4:	bfb8      	it	lt
 8024df6:	4249      	neglt	r1, r1
 8024df8:	b209      	sxth	r1, r1
 8024dfa:	428a      	cmp	r2, r1
 8024dfc:	da10      	bge.n	8024e20 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8024dfe:	6920      	ldr	r0, [r4, #16]
 8024e00:	4669      	mov	r1, sp
 8024e02:	eba8 0606 	sub.w	r6, r8, r6
 8024e06:	1bef      	subs	r7, r5, r7
 8024e08:	6803      	ldr	r3, [r0, #0]
 8024e0a:	685b      	ldr	r3, [r3, #4]
 8024e0c:	4798      	blx	r3
 8024e0e:	2300      	movs	r3, #0
 8024e10:	2001      	movs	r0, #1
 8024e12:	8166      	strh	r6, [r4, #10]
 8024e14:	8123      	strh	r3, [r4, #8]
 8024e16:	81a7      	strh	r7, [r4, #12]
 8024e18:	f8a4 8004 	strh.w	r8, [r4, #4]
 8024e1c:	80e5      	strh	r5, [r4, #6]
 8024e1e:	73a0      	strb	r0, [r4, #14]
 8024e20:	b004      	add	sp, #16
 8024e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e26:	bf00      	nop
 8024e28:	080285ec 	.word	0x080285ec

08024e2c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8024e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e2e:	461e      	mov	r6, r3
 8024e30:	1e4b      	subs	r3, r1, #1
 8024e32:	b085      	sub	sp, #20
 8024e34:	4604      	mov	r4, r0
 8024e36:	2b01      	cmp	r3, #1
 8024e38:	460d      	mov	r5, r1
 8024e3a:	4617      	mov	r7, r2
 8024e3c:	d84b      	bhi.n	8024ed6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8024e3e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8024e42:	1cd3      	adds	r3, r2, #3
 8024e44:	b29b      	uxth	r3, r3
 8024e46:	2b06      	cmp	r3, #6
 8024e48:	d916      	bls.n	8024e78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024e4a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8024eec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024e4e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024e52:	f8cd c004 	str.w	ip, [sp, #4]
 8024e56:	f04f 0c00 	mov.w	ip, #0
 8024e5a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024e5e:	6900      	ldr	r0, [r0, #16]
 8024e60:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024e64:	a901      	add	r1, sp, #4
 8024e66:	f88d c008 	strb.w	ip, [sp, #8]
 8024e6a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024e6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024e72:	6803      	ldr	r3, [r0, #0]
 8024e74:	689b      	ldr	r3, [r3, #8]
 8024e76:	4798      	blx	r3
 8024e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024e7c:	1cd3      	adds	r3, r2, #3
 8024e7e:	b29b      	uxth	r3, r3
 8024e80:	2b06      	cmp	r3, #6
 8024e82:	d916      	bls.n	8024eb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024e84:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8024eec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024e88:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024e8c:	f8cd c004 	str.w	ip, [sp, #4]
 8024e90:	f04f 0c01 	mov.w	ip, #1
 8024e94:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024e98:	6920      	ldr	r0, [r4, #16]
 8024e9a:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024e9e:	a901      	add	r1, sp, #4
 8024ea0:	f88d c008 	strb.w	ip, [sp, #8]
 8024ea4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024ea8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024eac:	6803      	ldr	r3, [r0, #0]
 8024eae:	689b      	ldr	r3, [r3, #8]
 8024eb0:	4798      	blx	r3
 8024eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8024ee8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8024eb4:	a901      	add	r1, sp, #4
 8024eb6:	6920      	ldr	r0, [r4, #16]
 8024eb8:	9301      	str	r3, [sp, #4]
 8024eba:	2300      	movs	r3, #0
 8024ebc:	f88d 5008 	strb.w	r5, [sp, #8]
 8024ec0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8024ec4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024ec8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ecc:	6803      	ldr	r3, [r0, #0]
 8024ece:	681b      	ldr	r3, [r3, #0]
 8024ed0:	4798      	blx	r3
 8024ed2:	b005      	add	sp, #20
 8024ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ed6:	2900      	cmp	r1, #0
 8024ed8:	d1eb      	bne.n	8024eb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024eda:	80a2      	strh	r2, [r4, #4]
 8024edc:	80c6      	strh	r6, [r0, #6]
 8024ede:	60a1      	str	r1, [r4, #8]
 8024ee0:	81a1      	strh	r1, [r4, #12]
 8024ee2:	73a1      	strb	r1, [r4, #14]
 8024ee4:	e7e5      	b.n	8024eb2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024ee6:	bf00      	nop
 8024ee8:	080285d8 	.word	0x080285d8
 8024eec:	08028600 	.word	0x08028600

08024ef0 <__aeabi_atexit>:
 8024ef0:	460b      	mov	r3, r1
 8024ef2:	4601      	mov	r1, r0
 8024ef4:	4618      	mov	r0, r3
 8024ef6:	f000 b911 	b.w	802511c <__cxa_atexit>

08024efa <_ZdlPvj>:
 8024efa:	f000 b812 	b.w	8024f22 <_ZdlPv>

08024efe <__cxa_guard_acquire>:
 8024efe:	6802      	ldr	r2, [r0, #0]
 8024f00:	07d2      	lsls	r2, r2, #31
 8024f02:	4603      	mov	r3, r0
 8024f04:	d405      	bmi.n	8024f12 <__cxa_guard_acquire+0x14>
 8024f06:	7842      	ldrb	r2, [r0, #1]
 8024f08:	b102      	cbz	r2, 8024f0c <__cxa_guard_acquire+0xe>
 8024f0a:	deff      	udf	#255	@ 0xff
 8024f0c:	2001      	movs	r0, #1
 8024f0e:	7058      	strb	r0, [r3, #1]
 8024f10:	4770      	bx	lr
 8024f12:	2000      	movs	r0, #0
 8024f14:	4770      	bx	lr

08024f16 <__cxa_guard_release>:
 8024f16:	2301      	movs	r3, #1
 8024f18:	6003      	str	r3, [r0, #0]
 8024f1a:	4770      	bx	lr

08024f1c <__cxa_pure_virtual>:
 8024f1c:	b508      	push	{r3, lr}
 8024f1e:	f000 f80f 	bl	8024f40 <_ZSt9terminatev>

08024f22 <_ZdlPv>:
 8024f22:	f000 b845 	b.w	8024fb0 <free>

08024f26 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024f26:	b508      	push	{r3, lr}
 8024f28:	4780      	blx	r0
 8024f2a:	f000 f80e 	bl	8024f4a <abort>
	...

08024f30 <_ZSt13get_terminatev>:
 8024f30:	4b02      	ldr	r3, [pc, #8]	@ (8024f3c <_ZSt13get_terminatev+0xc>)
 8024f32:	6818      	ldr	r0, [r3, #0]
 8024f34:	f3bf 8f5b 	dmb	ish
 8024f38:	4770      	bx	lr
 8024f3a:	bf00      	nop
 8024f3c:	240000ac 	.word	0x240000ac

08024f40 <_ZSt9terminatev>:
 8024f40:	b508      	push	{r3, lr}
 8024f42:	f7ff fff5 	bl	8024f30 <_ZSt13get_terminatev>
 8024f46:	f7ff ffee 	bl	8024f26 <_ZN10__cxxabiv111__terminateEPFvvE>

08024f4a <abort>:
 8024f4a:	b508      	push	{r3, lr}
 8024f4c:	2006      	movs	r0, #6
 8024f4e:	f000 fa3b 	bl	80253c8 <raise>
 8024f52:	2001      	movs	r0, #1
 8024f54:	f7dc f92c 	bl	80011b0 <_exit>

08024f58 <__assert_func>:
 8024f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024f5a:	4614      	mov	r4, r2
 8024f5c:	461a      	mov	r2, r3
 8024f5e:	4b09      	ldr	r3, [pc, #36]	@ (8024f84 <__assert_func+0x2c>)
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	4605      	mov	r5, r0
 8024f64:	68d8      	ldr	r0, [r3, #12]
 8024f66:	b954      	cbnz	r4, 8024f7e <__assert_func+0x26>
 8024f68:	4b07      	ldr	r3, [pc, #28]	@ (8024f88 <__assert_func+0x30>)
 8024f6a:	461c      	mov	r4, r3
 8024f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024f70:	9100      	str	r1, [sp, #0]
 8024f72:	462b      	mov	r3, r5
 8024f74:	4905      	ldr	r1, [pc, #20]	@ (8024f8c <__assert_func+0x34>)
 8024f76:	f000 f983 	bl	8025280 <fiprintf>
 8024f7a:	f7ff ffe6 	bl	8024f4a <abort>
 8024f7e:	4b04      	ldr	r3, [pc, #16]	@ (8024f90 <__assert_func+0x38>)
 8024f80:	e7f4      	b.n	8024f6c <__assert_func+0x14>
 8024f82:	bf00      	nop
 8024f84:	240000bc 	.word	0x240000bc
 8024f88:	080288ab 	.word	0x080288ab
 8024f8c:	0802887d 	.word	0x0802887d
 8024f90:	08028870 	.word	0x08028870

08024f94 <atexit>:
 8024f94:	2300      	movs	r3, #0
 8024f96:	4601      	mov	r1, r0
 8024f98:	461a      	mov	r2, r3
 8024f9a:	4618      	mov	r0, r3
 8024f9c:	f000 bb18 	b.w	80255d0 <__register_exitproc>

08024fa0 <malloc>:
 8024fa0:	4b02      	ldr	r3, [pc, #8]	@ (8024fac <malloc+0xc>)
 8024fa2:	4601      	mov	r1, r0
 8024fa4:	6818      	ldr	r0, [r3, #0]
 8024fa6:	f000 b82d 	b.w	8025004 <_malloc_r>
 8024faa:	bf00      	nop
 8024fac:	240000bc 	.word	0x240000bc

08024fb0 <free>:
 8024fb0:	4b02      	ldr	r3, [pc, #8]	@ (8024fbc <free+0xc>)
 8024fb2:	4601      	mov	r1, r0
 8024fb4:	6818      	ldr	r0, [r3, #0]
 8024fb6:	f000 bb67 	b.w	8025688 <_free_r>
 8024fba:	bf00      	nop
 8024fbc:	240000bc 	.word	0x240000bc

08024fc0 <sbrk_aligned>:
 8024fc0:	b570      	push	{r4, r5, r6, lr}
 8024fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8025000 <sbrk_aligned+0x40>)
 8024fc4:	460c      	mov	r4, r1
 8024fc6:	6831      	ldr	r1, [r6, #0]
 8024fc8:	4605      	mov	r5, r0
 8024fca:	b911      	cbnz	r1, 8024fd2 <sbrk_aligned+0x12>
 8024fcc:	f000 faa2 	bl	8025514 <_sbrk_r>
 8024fd0:	6030      	str	r0, [r6, #0]
 8024fd2:	4621      	mov	r1, r4
 8024fd4:	4628      	mov	r0, r5
 8024fd6:	f000 fa9d 	bl	8025514 <_sbrk_r>
 8024fda:	1c43      	adds	r3, r0, #1
 8024fdc:	d103      	bne.n	8024fe6 <sbrk_aligned+0x26>
 8024fde:	f04f 34ff 	mov.w	r4, #4294967295
 8024fe2:	4620      	mov	r0, r4
 8024fe4:	bd70      	pop	{r4, r5, r6, pc}
 8024fe6:	1cc4      	adds	r4, r0, #3
 8024fe8:	f024 0403 	bic.w	r4, r4, #3
 8024fec:	42a0      	cmp	r0, r4
 8024fee:	d0f8      	beq.n	8024fe2 <sbrk_aligned+0x22>
 8024ff0:	1a21      	subs	r1, r4, r0
 8024ff2:	4628      	mov	r0, r5
 8024ff4:	f000 fa8e 	bl	8025514 <_sbrk_r>
 8024ff8:	3001      	adds	r0, #1
 8024ffa:	d1f2      	bne.n	8024fe2 <sbrk_aligned+0x22>
 8024ffc:	e7ef      	b.n	8024fde <sbrk_aligned+0x1e>
 8024ffe:	bf00      	nop
 8025000:	2401c464 	.word	0x2401c464

08025004 <_malloc_r>:
 8025004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025008:	1ccd      	adds	r5, r1, #3
 802500a:	f025 0503 	bic.w	r5, r5, #3
 802500e:	3508      	adds	r5, #8
 8025010:	2d0c      	cmp	r5, #12
 8025012:	bf38      	it	cc
 8025014:	250c      	movcc	r5, #12
 8025016:	2d00      	cmp	r5, #0
 8025018:	4606      	mov	r6, r0
 802501a:	db01      	blt.n	8025020 <_malloc_r+0x1c>
 802501c:	42a9      	cmp	r1, r5
 802501e:	d904      	bls.n	802502a <_malloc_r+0x26>
 8025020:	230c      	movs	r3, #12
 8025022:	6033      	str	r3, [r6, #0]
 8025024:	2000      	movs	r0, #0
 8025026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802502a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025100 <_malloc_r+0xfc>
 802502e:	f000 f869 	bl	8025104 <__malloc_lock>
 8025032:	f8d8 3000 	ldr.w	r3, [r8]
 8025036:	461c      	mov	r4, r3
 8025038:	bb44      	cbnz	r4, 802508c <_malloc_r+0x88>
 802503a:	4629      	mov	r1, r5
 802503c:	4630      	mov	r0, r6
 802503e:	f7ff ffbf 	bl	8024fc0 <sbrk_aligned>
 8025042:	1c43      	adds	r3, r0, #1
 8025044:	4604      	mov	r4, r0
 8025046:	d158      	bne.n	80250fa <_malloc_r+0xf6>
 8025048:	f8d8 4000 	ldr.w	r4, [r8]
 802504c:	4627      	mov	r7, r4
 802504e:	2f00      	cmp	r7, #0
 8025050:	d143      	bne.n	80250da <_malloc_r+0xd6>
 8025052:	2c00      	cmp	r4, #0
 8025054:	d04b      	beq.n	80250ee <_malloc_r+0xea>
 8025056:	6823      	ldr	r3, [r4, #0]
 8025058:	4639      	mov	r1, r7
 802505a:	4630      	mov	r0, r6
 802505c:	eb04 0903 	add.w	r9, r4, r3
 8025060:	f000 fa58 	bl	8025514 <_sbrk_r>
 8025064:	4581      	cmp	r9, r0
 8025066:	d142      	bne.n	80250ee <_malloc_r+0xea>
 8025068:	6821      	ldr	r1, [r4, #0]
 802506a:	1a6d      	subs	r5, r5, r1
 802506c:	4629      	mov	r1, r5
 802506e:	4630      	mov	r0, r6
 8025070:	f7ff ffa6 	bl	8024fc0 <sbrk_aligned>
 8025074:	3001      	adds	r0, #1
 8025076:	d03a      	beq.n	80250ee <_malloc_r+0xea>
 8025078:	6823      	ldr	r3, [r4, #0]
 802507a:	442b      	add	r3, r5
 802507c:	6023      	str	r3, [r4, #0]
 802507e:	f8d8 3000 	ldr.w	r3, [r8]
 8025082:	685a      	ldr	r2, [r3, #4]
 8025084:	bb62      	cbnz	r2, 80250e0 <_malloc_r+0xdc>
 8025086:	f8c8 7000 	str.w	r7, [r8]
 802508a:	e00f      	b.n	80250ac <_malloc_r+0xa8>
 802508c:	6822      	ldr	r2, [r4, #0]
 802508e:	1b52      	subs	r2, r2, r5
 8025090:	d420      	bmi.n	80250d4 <_malloc_r+0xd0>
 8025092:	2a0b      	cmp	r2, #11
 8025094:	d917      	bls.n	80250c6 <_malloc_r+0xc2>
 8025096:	1961      	adds	r1, r4, r5
 8025098:	42a3      	cmp	r3, r4
 802509a:	6025      	str	r5, [r4, #0]
 802509c:	bf18      	it	ne
 802509e:	6059      	strne	r1, [r3, #4]
 80250a0:	6863      	ldr	r3, [r4, #4]
 80250a2:	bf08      	it	eq
 80250a4:	f8c8 1000 	streq.w	r1, [r8]
 80250a8:	5162      	str	r2, [r4, r5]
 80250aa:	604b      	str	r3, [r1, #4]
 80250ac:	4630      	mov	r0, r6
 80250ae:	f000 f82f 	bl	8025110 <__malloc_unlock>
 80250b2:	f104 000b 	add.w	r0, r4, #11
 80250b6:	1d23      	adds	r3, r4, #4
 80250b8:	f020 0007 	bic.w	r0, r0, #7
 80250bc:	1ac2      	subs	r2, r0, r3
 80250be:	bf1c      	itt	ne
 80250c0:	1a1b      	subne	r3, r3, r0
 80250c2:	50a3      	strne	r3, [r4, r2]
 80250c4:	e7af      	b.n	8025026 <_malloc_r+0x22>
 80250c6:	6862      	ldr	r2, [r4, #4]
 80250c8:	42a3      	cmp	r3, r4
 80250ca:	bf0c      	ite	eq
 80250cc:	f8c8 2000 	streq.w	r2, [r8]
 80250d0:	605a      	strne	r2, [r3, #4]
 80250d2:	e7eb      	b.n	80250ac <_malloc_r+0xa8>
 80250d4:	4623      	mov	r3, r4
 80250d6:	6864      	ldr	r4, [r4, #4]
 80250d8:	e7ae      	b.n	8025038 <_malloc_r+0x34>
 80250da:	463c      	mov	r4, r7
 80250dc:	687f      	ldr	r7, [r7, #4]
 80250de:	e7b6      	b.n	802504e <_malloc_r+0x4a>
 80250e0:	461a      	mov	r2, r3
 80250e2:	685b      	ldr	r3, [r3, #4]
 80250e4:	42a3      	cmp	r3, r4
 80250e6:	d1fb      	bne.n	80250e0 <_malloc_r+0xdc>
 80250e8:	2300      	movs	r3, #0
 80250ea:	6053      	str	r3, [r2, #4]
 80250ec:	e7de      	b.n	80250ac <_malloc_r+0xa8>
 80250ee:	230c      	movs	r3, #12
 80250f0:	6033      	str	r3, [r6, #0]
 80250f2:	4630      	mov	r0, r6
 80250f4:	f000 f80c 	bl	8025110 <__malloc_unlock>
 80250f8:	e794      	b.n	8025024 <_malloc_r+0x20>
 80250fa:	6005      	str	r5, [r0, #0]
 80250fc:	e7d6      	b.n	80250ac <_malloc_r+0xa8>
 80250fe:	bf00      	nop
 8025100:	2401c468 	.word	0x2401c468

08025104 <__malloc_lock>:
 8025104:	4801      	ldr	r0, [pc, #4]	@ (802510c <__malloc_lock+0x8>)
 8025106:	f000 ba52 	b.w	80255ae <__retarget_lock_acquire_recursive>
 802510a:	bf00      	nop
 802510c:	2401c5ac 	.word	0x2401c5ac

08025110 <__malloc_unlock>:
 8025110:	4801      	ldr	r0, [pc, #4]	@ (8025118 <__malloc_unlock+0x8>)
 8025112:	f000 ba4d 	b.w	80255b0 <__retarget_lock_release_recursive>
 8025116:	bf00      	nop
 8025118:	2401c5ac 	.word	0x2401c5ac

0802511c <__cxa_atexit>:
 802511c:	b510      	push	{r4, lr}
 802511e:	4604      	mov	r4, r0
 8025120:	4804      	ldr	r0, [pc, #16]	@ (8025134 <__cxa_atexit+0x18>)
 8025122:	4613      	mov	r3, r2
 8025124:	b120      	cbz	r0, 8025130 <__cxa_atexit+0x14>
 8025126:	460a      	mov	r2, r1
 8025128:	2002      	movs	r0, #2
 802512a:	4621      	mov	r1, r4
 802512c:	f000 fa50 	bl	80255d0 <__register_exitproc>
 8025130:	bd10      	pop	{r4, pc}
 8025132:	bf00      	nop
 8025134:	080255d1 	.word	0x080255d1

08025138 <std>:
 8025138:	2300      	movs	r3, #0
 802513a:	b510      	push	{r4, lr}
 802513c:	4604      	mov	r4, r0
 802513e:	e9c0 3300 	strd	r3, r3, [r0]
 8025142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025146:	6083      	str	r3, [r0, #8]
 8025148:	8181      	strh	r1, [r0, #12]
 802514a:	6643      	str	r3, [r0, #100]	@ 0x64
 802514c:	81c2      	strh	r2, [r0, #14]
 802514e:	6183      	str	r3, [r0, #24]
 8025150:	4619      	mov	r1, r3
 8025152:	2208      	movs	r2, #8
 8025154:	305c      	adds	r0, #92	@ 0x5c
 8025156:	f000 f906 	bl	8025366 <memset>
 802515a:	4b0d      	ldr	r3, [pc, #52]	@ (8025190 <std+0x58>)
 802515c:	6263      	str	r3, [r4, #36]	@ 0x24
 802515e:	4b0d      	ldr	r3, [pc, #52]	@ (8025194 <std+0x5c>)
 8025160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025162:	4b0d      	ldr	r3, [pc, #52]	@ (8025198 <std+0x60>)
 8025164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025166:	4b0d      	ldr	r3, [pc, #52]	@ (802519c <std+0x64>)
 8025168:	6323      	str	r3, [r4, #48]	@ 0x30
 802516a:	4b0d      	ldr	r3, [pc, #52]	@ (80251a0 <std+0x68>)
 802516c:	6224      	str	r4, [r4, #32]
 802516e:	429c      	cmp	r4, r3
 8025170:	d006      	beq.n	8025180 <std+0x48>
 8025172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8025176:	4294      	cmp	r4, r2
 8025178:	d002      	beq.n	8025180 <std+0x48>
 802517a:	33d0      	adds	r3, #208	@ 0xd0
 802517c:	429c      	cmp	r4, r3
 802517e:	d105      	bne.n	802518c <std+0x54>
 8025180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8025184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025188:	f000 ba10 	b.w	80255ac <__retarget_lock_init_recursive>
 802518c:	bd10      	pop	{r4, pc}
 802518e:	bf00      	nop
 8025190:	080252e1 	.word	0x080252e1
 8025194:	08025303 	.word	0x08025303
 8025198:	0802533b 	.word	0x0802533b
 802519c:	0802535f 	.word	0x0802535f
 80251a0:	2401c46c 	.word	0x2401c46c

080251a4 <stdio_exit_handler>:
 80251a4:	4a02      	ldr	r2, [pc, #8]	@ (80251b0 <stdio_exit_handler+0xc>)
 80251a6:	4903      	ldr	r1, [pc, #12]	@ (80251b4 <stdio_exit_handler+0x10>)
 80251a8:	4803      	ldr	r0, [pc, #12]	@ (80251b8 <stdio_exit_handler+0x14>)
 80251aa:	f000 b87b 	b.w	80252a4 <_fwalk_sglue>
 80251ae:	bf00      	nop
 80251b0:	240000b0 	.word	0x240000b0
 80251b4:	08025dc5 	.word	0x08025dc5
 80251b8:	240000c0 	.word	0x240000c0

080251bc <cleanup_stdio>:
 80251bc:	6841      	ldr	r1, [r0, #4]
 80251be:	4b0c      	ldr	r3, [pc, #48]	@ (80251f0 <cleanup_stdio+0x34>)
 80251c0:	4299      	cmp	r1, r3
 80251c2:	b510      	push	{r4, lr}
 80251c4:	4604      	mov	r4, r0
 80251c6:	d001      	beq.n	80251cc <cleanup_stdio+0x10>
 80251c8:	f000 fdfc 	bl	8025dc4 <_fflush_r>
 80251cc:	68a1      	ldr	r1, [r4, #8]
 80251ce:	4b09      	ldr	r3, [pc, #36]	@ (80251f4 <cleanup_stdio+0x38>)
 80251d0:	4299      	cmp	r1, r3
 80251d2:	d002      	beq.n	80251da <cleanup_stdio+0x1e>
 80251d4:	4620      	mov	r0, r4
 80251d6:	f000 fdf5 	bl	8025dc4 <_fflush_r>
 80251da:	68e1      	ldr	r1, [r4, #12]
 80251dc:	4b06      	ldr	r3, [pc, #24]	@ (80251f8 <cleanup_stdio+0x3c>)
 80251de:	4299      	cmp	r1, r3
 80251e0:	d004      	beq.n	80251ec <cleanup_stdio+0x30>
 80251e2:	4620      	mov	r0, r4
 80251e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80251e8:	f000 bdec 	b.w	8025dc4 <_fflush_r>
 80251ec:	bd10      	pop	{r4, pc}
 80251ee:	bf00      	nop
 80251f0:	2401c46c 	.word	0x2401c46c
 80251f4:	2401c4d4 	.word	0x2401c4d4
 80251f8:	2401c53c 	.word	0x2401c53c

080251fc <global_stdio_init.part.0>:
 80251fc:	b510      	push	{r4, lr}
 80251fe:	4b0b      	ldr	r3, [pc, #44]	@ (802522c <global_stdio_init.part.0+0x30>)
 8025200:	4c0b      	ldr	r4, [pc, #44]	@ (8025230 <global_stdio_init.part.0+0x34>)
 8025202:	4a0c      	ldr	r2, [pc, #48]	@ (8025234 <global_stdio_init.part.0+0x38>)
 8025204:	601a      	str	r2, [r3, #0]
 8025206:	4620      	mov	r0, r4
 8025208:	2200      	movs	r2, #0
 802520a:	2104      	movs	r1, #4
 802520c:	f7ff ff94 	bl	8025138 <std>
 8025210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8025214:	2201      	movs	r2, #1
 8025216:	2109      	movs	r1, #9
 8025218:	f7ff ff8e 	bl	8025138 <std>
 802521c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8025220:	2202      	movs	r2, #2
 8025222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025226:	2112      	movs	r1, #18
 8025228:	f7ff bf86 	b.w	8025138 <std>
 802522c:	2401c5a4 	.word	0x2401c5a4
 8025230:	2401c46c 	.word	0x2401c46c
 8025234:	080251a5 	.word	0x080251a5

08025238 <__sfp_lock_acquire>:
 8025238:	4801      	ldr	r0, [pc, #4]	@ (8025240 <__sfp_lock_acquire+0x8>)
 802523a:	f000 b9b8 	b.w	80255ae <__retarget_lock_acquire_recursive>
 802523e:	bf00      	nop
 8025240:	2401c5ae 	.word	0x2401c5ae

08025244 <__sfp_lock_release>:
 8025244:	4801      	ldr	r0, [pc, #4]	@ (802524c <__sfp_lock_release+0x8>)
 8025246:	f000 b9b3 	b.w	80255b0 <__retarget_lock_release_recursive>
 802524a:	bf00      	nop
 802524c:	2401c5ae 	.word	0x2401c5ae

08025250 <__sinit>:
 8025250:	b510      	push	{r4, lr}
 8025252:	4604      	mov	r4, r0
 8025254:	f7ff fff0 	bl	8025238 <__sfp_lock_acquire>
 8025258:	6a23      	ldr	r3, [r4, #32]
 802525a:	b11b      	cbz	r3, 8025264 <__sinit+0x14>
 802525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025260:	f7ff bff0 	b.w	8025244 <__sfp_lock_release>
 8025264:	4b04      	ldr	r3, [pc, #16]	@ (8025278 <__sinit+0x28>)
 8025266:	6223      	str	r3, [r4, #32]
 8025268:	4b04      	ldr	r3, [pc, #16]	@ (802527c <__sinit+0x2c>)
 802526a:	681b      	ldr	r3, [r3, #0]
 802526c:	2b00      	cmp	r3, #0
 802526e:	d1f5      	bne.n	802525c <__sinit+0xc>
 8025270:	f7ff ffc4 	bl	80251fc <global_stdio_init.part.0>
 8025274:	e7f2      	b.n	802525c <__sinit+0xc>
 8025276:	bf00      	nop
 8025278:	080251bd 	.word	0x080251bd
 802527c:	2401c5a4 	.word	0x2401c5a4

08025280 <fiprintf>:
 8025280:	b40e      	push	{r1, r2, r3}
 8025282:	b503      	push	{r0, r1, lr}
 8025284:	4601      	mov	r1, r0
 8025286:	ab03      	add	r3, sp, #12
 8025288:	4805      	ldr	r0, [pc, #20]	@ (80252a0 <fiprintf+0x20>)
 802528a:	f853 2b04 	ldr.w	r2, [r3], #4
 802528e:	6800      	ldr	r0, [r0, #0]
 8025290:	9301      	str	r3, [sp, #4]
 8025292:	f000 fa6d 	bl	8025770 <_vfiprintf_r>
 8025296:	b002      	add	sp, #8
 8025298:	f85d eb04 	ldr.w	lr, [sp], #4
 802529c:	b003      	add	sp, #12
 802529e:	4770      	bx	lr
 80252a0:	240000bc 	.word	0x240000bc

080252a4 <_fwalk_sglue>:
 80252a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80252a8:	4607      	mov	r7, r0
 80252aa:	4688      	mov	r8, r1
 80252ac:	4614      	mov	r4, r2
 80252ae:	2600      	movs	r6, #0
 80252b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80252b4:	f1b9 0901 	subs.w	r9, r9, #1
 80252b8:	d505      	bpl.n	80252c6 <_fwalk_sglue+0x22>
 80252ba:	6824      	ldr	r4, [r4, #0]
 80252bc:	2c00      	cmp	r4, #0
 80252be:	d1f7      	bne.n	80252b0 <_fwalk_sglue+0xc>
 80252c0:	4630      	mov	r0, r6
 80252c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80252c6:	89ab      	ldrh	r3, [r5, #12]
 80252c8:	2b01      	cmp	r3, #1
 80252ca:	d907      	bls.n	80252dc <_fwalk_sglue+0x38>
 80252cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80252d0:	3301      	adds	r3, #1
 80252d2:	d003      	beq.n	80252dc <_fwalk_sglue+0x38>
 80252d4:	4629      	mov	r1, r5
 80252d6:	4638      	mov	r0, r7
 80252d8:	47c0      	blx	r8
 80252da:	4306      	orrs	r6, r0
 80252dc:	3568      	adds	r5, #104	@ 0x68
 80252de:	e7e9      	b.n	80252b4 <_fwalk_sglue+0x10>

080252e0 <__sread>:
 80252e0:	b510      	push	{r4, lr}
 80252e2:	460c      	mov	r4, r1
 80252e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252e8:	f000 f8ee 	bl	80254c8 <_read_r>
 80252ec:	2800      	cmp	r0, #0
 80252ee:	bfab      	itete	ge
 80252f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80252f2:	89a3      	ldrhlt	r3, [r4, #12]
 80252f4:	181b      	addge	r3, r3, r0
 80252f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80252fa:	bfac      	ite	ge
 80252fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80252fe:	81a3      	strhlt	r3, [r4, #12]
 8025300:	bd10      	pop	{r4, pc}

08025302 <__swrite>:
 8025302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025306:	461f      	mov	r7, r3
 8025308:	898b      	ldrh	r3, [r1, #12]
 802530a:	05db      	lsls	r3, r3, #23
 802530c:	4605      	mov	r5, r0
 802530e:	460c      	mov	r4, r1
 8025310:	4616      	mov	r6, r2
 8025312:	d505      	bpl.n	8025320 <__swrite+0x1e>
 8025314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025318:	2302      	movs	r3, #2
 802531a:	2200      	movs	r2, #0
 802531c:	f000 f8c2 	bl	80254a4 <_lseek_r>
 8025320:	89a3      	ldrh	r3, [r4, #12]
 8025322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802532a:	81a3      	strh	r3, [r4, #12]
 802532c:	4632      	mov	r2, r6
 802532e:	463b      	mov	r3, r7
 8025330:	4628      	mov	r0, r5
 8025332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025336:	f000 b8fd 	b.w	8025534 <_write_r>

0802533a <__sseek>:
 802533a:	b510      	push	{r4, lr}
 802533c:	460c      	mov	r4, r1
 802533e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025342:	f000 f8af 	bl	80254a4 <_lseek_r>
 8025346:	1c43      	adds	r3, r0, #1
 8025348:	89a3      	ldrh	r3, [r4, #12]
 802534a:	bf15      	itete	ne
 802534c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802534e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8025352:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8025356:	81a3      	strheq	r3, [r4, #12]
 8025358:	bf18      	it	ne
 802535a:	81a3      	strhne	r3, [r4, #12]
 802535c:	bd10      	pop	{r4, pc}

0802535e <__sclose>:
 802535e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025362:	f000 b839 	b.w	80253d8 <_close_r>

08025366 <memset>:
 8025366:	4402      	add	r2, r0
 8025368:	4603      	mov	r3, r0
 802536a:	4293      	cmp	r3, r2
 802536c:	d100      	bne.n	8025370 <memset+0xa>
 802536e:	4770      	bx	lr
 8025370:	f803 1b01 	strb.w	r1, [r3], #1
 8025374:	e7f9      	b.n	802536a <memset+0x4>

08025376 <_raise_r>:
 8025376:	291f      	cmp	r1, #31
 8025378:	b538      	push	{r3, r4, r5, lr}
 802537a:	4605      	mov	r5, r0
 802537c:	460c      	mov	r4, r1
 802537e:	d904      	bls.n	802538a <_raise_r+0x14>
 8025380:	2316      	movs	r3, #22
 8025382:	6003      	str	r3, [r0, #0]
 8025384:	f04f 30ff 	mov.w	r0, #4294967295
 8025388:	bd38      	pop	{r3, r4, r5, pc}
 802538a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802538c:	b112      	cbz	r2, 8025394 <_raise_r+0x1e>
 802538e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025392:	b94b      	cbnz	r3, 80253a8 <_raise_r+0x32>
 8025394:	4628      	mov	r0, r5
 8025396:	f000 f8bb 	bl	8025510 <_getpid_r>
 802539a:	4622      	mov	r2, r4
 802539c:	4601      	mov	r1, r0
 802539e:	4628      	mov	r0, r5
 80253a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80253a4:	f000 b8a2 	b.w	80254ec <_kill_r>
 80253a8:	2b01      	cmp	r3, #1
 80253aa:	d00a      	beq.n	80253c2 <_raise_r+0x4c>
 80253ac:	1c59      	adds	r1, r3, #1
 80253ae:	d103      	bne.n	80253b8 <_raise_r+0x42>
 80253b0:	2316      	movs	r3, #22
 80253b2:	6003      	str	r3, [r0, #0]
 80253b4:	2001      	movs	r0, #1
 80253b6:	e7e7      	b.n	8025388 <_raise_r+0x12>
 80253b8:	2100      	movs	r1, #0
 80253ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80253be:	4620      	mov	r0, r4
 80253c0:	4798      	blx	r3
 80253c2:	2000      	movs	r0, #0
 80253c4:	e7e0      	b.n	8025388 <_raise_r+0x12>
	...

080253c8 <raise>:
 80253c8:	4b02      	ldr	r3, [pc, #8]	@ (80253d4 <raise+0xc>)
 80253ca:	4601      	mov	r1, r0
 80253cc:	6818      	ldr	r0, [r3, #0]
 80253ce:	f7ff bfd2 	b.w	8025376 <_raise_r>
 80253d2:	bf00      	nop
 80253d4:	240000bc 	.word	0x240000bc

080253d8 <_close_r>:
 80253d8:	b538      	push	{r3, r4, r5, lr}
 80253da:	4d06      	ldr	r5, [pc, #24]	@ (80253f4 <_close_r+0x1c>)
 80253dc:	2300      	movs	r3, #0
 80253de:	4604      	mov	r4, r0
 80253e0:	4608      	mov	r0, r1
 80253e2:	602b      	str	r3, [r5, #0]
 80253e4:	f7db ff28 	bl	8001238 <_close>
 80253e8:	1c43      	adds	r3, r0, #1
 80253ea:	d102      	bne.n	80253f2 <_close_r+0x1a>
 80253ec:	682b      	ldr	r3, [r5, #0]
 80253ee:	b103      	cbz	r3, 80253f2 <_close_r+0x1a>
 80253f0:	6023      	str	r3, [r4, #0]
 80253f2:	bd38      	pop	{r3, r4, r5, pc}
 80253f4:	2401c5a8 	.word	0x2401c5a8

080253f8 <_reclaim_reent>:
 80253f8:	4b29      	ldr	r3, [pc, #164]	@ (80254a0 <_reclaim_reent+0xa8>)
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	4283      	cmp	r3, r0
 80253fe:	b570      	push	{r4, r5, r6, lr}
 8025400:	4604      	mov	r4, r0
 8025402:	d04b      	beq.n	802549c <_reclaim_reent+0xa4>
 8025404:	69c3      	ldr	r3, [r0, #28]
 8025406:	b1ab      	cbz	r3, 8025434 <_reclaim_reent+0x3c>
 8025408:	68db      	ldr	r3, [r3, #12]
 802540a:	b16b      	cbz	r3, 8025428 <_reclaim_reent+0x30>
 802540c:	2500      	movs	r5, #0
 802540e:	69e3      	ldr	r3, [r4, #28]
 8025410:	68db      	ldr	r3, [r3, #12]
 8025412:	5959      	ldr	r1, [r3, r5]
 8025414:	2900      	cmp	r1, #0
 8025416:	d13b      	bne.n	8025490 <_reclaim_reent+0x98>
 8025418:	3504      	adds	r5, #4
 802541a:	2d80      	cmp	r5, #128	@ 0x80
 802541c:	d1f7      	bne.n	802540e <_reclaim_reent+0x16>
 802541e:	69e3      	ldr	r3, [r4, #28]
 8025420:	4620      	mov	r0, r4
 8025422:	68d9      	ldr	r1, [r3, #12]
 8025424:	f000 f930 	bl	8025688 <_free_r>
 8025428:	69e3      	ldr	r3, [r4, #28]
 802542a:	6819      	ldr	r1, [r3, #0]
 802542c:	b111      	cbz	r1, 8025434 <_reclaim_reent+0x3c>
 802542e:	4620      	mov	r0, r4
 8025430:	f000 f92a 	bl	8025688 <_free_r>
 8025434:	6961      	ldr	r1, [r4, #20]
 8025436:	b111      	cbz	r1, 802543e <_reclaim_reent+0x46>
 8025438:	4620      	mov	r0, r4
 802543a:	f000 f925 	bl	8025688 <_free_r>
 802543e:	69e1      	ldr	r1, [r4, #28]
 8025440:	b111      	cbz	r1, 8025448 <_reclaim_reent+0x50>
 8025442:	4620      	mov	r0, r4
 8025444:	f000 f920 	bl	8025688 <_free_r>
 8025448:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802544a:	b111      	cbz	r1, 8025452 <_reclaim_reent+0x5a>
 802544c:	4620      	mov	r0, r4
 802544e:	f000 f91b 	bl	8025688 <_free_r>
 8025452:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025454:	b111      	cbz	r1, 802545c <_reclaim_reent+0x64>
 8025456:	4620      	mov	r0, r4
 8025458:	f000 f916 	bl	8025688 <_free_r>
 802545c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802545e:	b111      	cbz	r1, 8025466 <_reclaim_reent+0x6e>
 8025460:	4620      	mov	r0, r4
 8025462:	f000 f911 	bl	8025688 <_free_r>
 8025466:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8025468:	b111      	cbz	r1, 8025470 <_reclaim_reent+0x78>
 802546a:	4620      	mov	r0, r4
 802546c:	f000 f90c 	bl	8025688 <_free_r>
 8025470:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8025472:	b111      	cbz	r1, 802547a <_reclaim_reent+0x82>
 8025474:	4620      	mov	r0, r4
 8025476:	f000 f907 	bl	8025688 <_free_r>
 802547a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802547c:	b111      	cbz	r1, 8025484 <_reclaim_reent+0x8c>
 802547e:	4620      	mov	r0, r4
 8025480:	f000 f902 	bl	8025688 <_free_r>
 8025484:	6a23      	ldr	r3, [r4, #32]
 8025486:	b14b      	cbz	r3, 802549c <_reclaim_reent+0xa4>
 8025488:	4620      	mov	r0, r4
 802548a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802548e:	4718      	bx	r3
 8025490:	680e      	ldr	r6, [r1, #0]
 8025492:	4620      	mov	r0, r4
 8025494:	f000 f8f8 	bl	8025688 <_free_r>
 8025498:	4631      	mov	r1, r6
 802549a:	e7bb      	b.n	8025414 <_reclaim_reent+0x1c>
 802549c:	bd70      	pop	{r4, r5, r6, pc}
 802549e:	bf00      	nop
 80254a0:	240000bc 	.word	0x240000bc

080254a4 <_lseek_r>:
 80254a4:	b538      	push	{r3, r4, r5, lr}
 80254a6:	4d07      	ldr	r5, [pc, #28]	@ (80254c4 <_lseek_r+0x20>)
 80254a8:	4604      	mov	r4, r0
 80254aa:	4608      	mov	r0, r1
 80254ac:	4611      	mov	r1, r2
 80254ae:	2200      	movs	r2, #0
 80254b0:	602a      	str	r2, [r5, #0]
 80254b2:	461a      	mov	r2, r3
 80254b4:	f7db fee7 	bl	8001286 <_lseek>
 80254b8:	1c43      	adds	r3, r0, #1
 80254ba:	d102      	bne.n	80254c2 <_lseek_r+0x1e>
 80254bc:	682b      	ldr	r3, [r5, #0]
 80254be:	b103      	cbz	r3, 80254c2 <_lseek_r+0x1e>
 80254c0:	6023      	str	r3, [r4, #0]
 80254c2:	bd38      	pop	{r3, r4, r5, pc}
 80254c4:	2401c5a8 	.word	0x2401c5a8

080254c8 <_read_r>:
 80254c8:	b538      	push	{r3, r4, r5, lr}
 80254ca:	4d07      	ldr	r5, [pc, #28]	@ (80254e8 <_read_r+0x20>)
 80254cc:	4604      	mov	r4, r0
 80254ce:	4608      	mov	r0, r1
 80254d0:	4611      	mov	r1, r2
 80254d2:	2200      	movs	r2, #0
 80254d4:	602a      	str	r2, [r5, #0]
 80254d6:	461a      	mov	r2, r3
 80254d8:	f7db fe75 	bl	80011c6 <_read>
 80254dc:	1c43      	adds	r3, r0, #1
 80254de:	d102      	bne.n	80254e6 <_read_r+0x1e>
 80254e0:	682b      	ldr	r3, [r5, #0]
 80254e2:	b103      	cbz	r3, 80254e6 <_read_r+0x1e>
 80254e4:	6023      	str	r3, [r4, #0]
 80254e6:	bd38      	pop	{r3, r4, r5, pc}
 80254e8:	2401c5a8 	.word	0x2401c5a8

080254ec <_kill_r>:
 80254ec:	b538      	push	{r3, r4, r5, lr}
 80254ee:	4d07      	ldr	r5, [pc, #28]	@ (802550c <_kill_r+0x20>)
 80254f0:	2300      	movs	r3, #0
 80254f2:	4604      	mov	r4, r0
 80254f4:	4608      	mov	r0, r1
 80254f6:	4611      	mov	r1, r2
 80254f8:	602b      	str	r3, [r5, #0]
 80254fa:	f7db fe49 	bl	8001190 <_kill>
 80254fe:	1c43      	adds	r3, r0, #1
 8025500:	d102      	bne.n	8025508 <_kill_r+0x1c>
 8025502:	682b      	ldr	r3, [r5, #0]
 8025504:	b103      	cbz	r3, 8025508 <_kill_r+0x1c>
 8025506:	6023      	str	r3, [r4, #0]
 8025508:	bd38      	pop	{r3, r4, r5, pc}
 802550a:	bf00      	nop
 802550c:	2401c5a8 	.word	0x2401c5a8

08025510 <_getpid_r>:
 8025510:	f7db be36 	b.w	8001180 <_getpid>

08025514 <_sbrk_r>:
 8025514:	b538      	push	{r3, r4, r5, lr}
 8025516:	4d06      	ldr	r5, [pc, #24]	@ (8025530 <_sbrk_r+0x1c>)
 8025518:	2300      	movs	r3, #0
 802551a:	4604      	mov	r4, r0
 802551c:	4608      	mov	r0, r1
 802551e:	602b      	str	r3, [r5, #0]
 8025520:	f7db febe 	bl	80012a0 <_sbrk>
 8025524:	1c43      	adds	r3, r0, #1
 8025526:	d102      	bne.n	802552e <_sbrk_r+0x1a>
 8025528:	682b      	ldr	r3, [r5, #0]
 802552a:	b103      	cbz	r3, 802552e <_sbrk_r+0x1a>
 802552c:	6023      	str	r3, [r4, #0]
 802552e:	bd38      	pop	{r3, r4, r5, pc}
 8025530:	2401c5a8 	.word	0x2401c5a8

08025534 <_write_r>:
 8025534:	b538      	push	{r3, r4, r5, lr}
 8025536:	4d07      	ldr	r5, [pc, #28]	@ (8025554 <_write_r+0x20>)
 8025538:	4604      	mov	r4, r0
 802553a:	4608      	mov	r0, r1
 802553c:	4611      	mov	r1, r2
 802553e:	2200      	movs	r2, #0
 8025540:	602a      	str	r2, [r5, #0]
 8025542:	461a      	mov	r2, r3
 8025544:	f7db fe5c 	bl	8001200 <_write>
 8025548:	1c43      	adds	r3, r0, #1
 802554a:	d102      	bne.n	8025552 <_write_r+0x1e>
 802554c:	682b      	ldr	r3, [r5, #0]
 802554e:	b103      	cbz	r3, 8025552 <_write_r+0x1e>
 8025550:	6023      	str	r3, [r4, #0]
 8025552:	bd38      	pop	{r3, r4, r5, pc}
 8025554:	2401c5a8 	.word	0x2401c5a8

08025558 <__errno>:
 8025558:	4b01      	ldr	r3, [pc, #4]	@ (8025560 <__errno+0x8>)
 802555a:	6818      	ldr	r0, [r3, #0]
 802555c:	4770      	bx	lr
 802555e:	bf00      	nop
 8025560:	240000bc 	.word	0x240000bc

08025564 <__libc_init_array>:
 8025564:	b570      	push	{r4, r5, r6, lr}
 8025566:	4d0d      	ldr	r5, [pc, #52]	@ (802559c <__libc_init_array+0x38>)
 8025568:	4c0d      	ldr	r4, [pc, #52]	@ (80255a0 <__libc_init_array+0x3c>)
 802556a:	1b64      	subs	r4, r4, r5
 802556c:	10a4      	asrs	r4, r4, #2
 802556e:	2600      	movs	r6, #0
 8025570:	42a6      	cmp	r6, r4
 8025572:	d109      	bne.n	8025588 <__libc_init_array+0x24>
 8025574:	4d0b      	ldr	r5, [pc, #44]	@ (80255a4 <__libc_init_array+0x40>)
 8025576:	4c0c      	ldr	r4, [pc, #48]	@ (80255a8 <__libc_init_array+0x44>)
 8025578:	f000 fd64 	bl	8026044 <_init>
 802557c:	1b64      	subs	r4, r4, r5
 802557e:	10a4      	asrs	r4, r4, #2
 8025580:	2600      	movs	r6, #0
 8025582:	42a6      	cmp	r6, r4
 8025584:	d105      	bne.n	8025592 <__libc_init_array+0x2e>
 8025586:	bd70      	pop	{r4, r5, r6, pc}
 8025588:	f855 3b04 	ldr.w	r3, [r5], #4
 802558c:	4798      	blx	r3
 802558e:	3601      	adds	r6, #1
 8025590:	e7ee      	b.n	8025570 <__libc_init_array+0xc>
 8025592:	f855 3b04 	ldr.w	r3, [r5], #4
 8025596:	4798      	blx	r3
 8025598:	3601      	adds	r6, #1
 802559a:	e7f2      	b.n	8025582 <__libc_init_array+0x1e>
 802559c:	0802890c 	.word	0x0802890c
 80255a0:	0802890c 	.word	0x0802890c
 80255a4:	0802890c 	.word	0x0802890c
 80255a8:	08028920 	.word	0x08028920

080255ac <__retarget_lock_init_recursive>:
 80255ac:	4770      	bx	lr

080255ae <__retarget_lock_acquire_recursive>:
 80255ae:	4770      	bx	lr

080255b0 <__retarget_lock_release_recursive>:
 80255b0:	4770      	bx	lr

080255b2 <memcpy>:
 80255b2:	440a      	add	r2, r1
 80255b4:	4291      	cmp	r1, r2
 80255b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80255ba:	d100      	bne.n	80255be <memcpy+0xc>
 80255bc:	4770      	bx	lr
 80255be:	b510      	push	{r4, lr}
 80255c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80255c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80255c8:	4291      	cmp	r1, r2
 80255ca:	d1f9      	bne.n	80255c0 <memcpy+0xe>
 80255cc:	bd10      	pop	{r4, pc}
	...

080255d0 <__register_exitproc>:
 80255d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80255d4:	4d27      	ldr	r5, [pc, #156]	@ (8025674 <__register_exitproc+0xa4>)
 80255d6:	4607      	mov	r7, r0
 80255d8:	6828      	ldr	r0, [r5, #0]
 80255da:	4691      	mov	r9, r2
 80255dc:	460e      	mov	r6, r1
 80255de:	4698      	mov	r8, r3
 80255e0:	f7ff ffe5 	bl	80255ae <__retarget_lock_acquire_recursive>
 80255e4:	4a24      	ldr	r2, [pc, #144]	@ (8025678 <__register_exitproc+0xa8>)
 80255e6:	6814      	ldr	r4, [r2, #0]
 80255e8:	b93c      	cbnz	r4, 80255fa <__register_exitproc+0x2a>
 80255ea:	4b24      	ldr	r3, [pc, #144]	@ (802567c <__register_exitproc+0xac>)
 80255ec:	6013      	str	r3, [r2, #0]
 80255ee:	4a24      	ldr	r2, [pc, #144]	@ (8025680 <__register_exitproc+0xb0>)
 80255f0:	b112      	cbz	r2, 80255f8 <__register_exitproc+0x28>
 80255f2:	6812      	ldr	r2, [r2, #0]
 80255f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80255f8:	4c20      	ldr	r4, [pc, #128]	@ (802567c <__register_exitproc+0xac>)
 80255fa:	6863      	ldr	r3, [r4, #4]
 80255fc:	2b1f      	cmp	r3, #31
 80255fe:	dd06      	ble.n	802560e <__register_exitproc+0x3e>
 8025600:	6828      	ldr	r0, [r5, #0]
 8025602:	f7ff ffd5 	bl	80255b0 <__retarget_lock_release_recursive>
 8025606:	f04f 30ff 	mov.w	r0, #4294967295
 802560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802560e:	b32f      	cbz	r7, 802565c <__register_exitproc+0x8c>
 8025610:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8025614:	b968      	cbnz	r0, 8025632 <__register_exitproc+0x62>
 8025616:	4b1b      	ldr	r3, [pc, #108]	@ (8025684 <__register_exitproc+0xb4>)
 8025618:	2b00      	cmp	r3, #0
 802561a:	d0f1      	beq.n	8025600 <__register_exitproc+0x30>
 802561c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8025620:	f7ff fcbe 	bl	8024fa0 <malloc>
 8025624:	2800      	cmp	r0, #0
 8025626:	d0eb      	beq.n	8025600 <__register_exitproc+0x30>
 8025628:	2300      	movs	r3, #0
 802562a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802562e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8025632:	6863      	ldr	r3, [r4, #4]
 8025634:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025638:	2201      	movs	r2, #1
 802563a:	409a      	lsls	r2, r3
 802563c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8025640:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8025644:	4313      	orrs	r3, r2
 8025646:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802564a:	2f02      	cmp	r7, #2
 802564c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8025650:	bf02      	ittt	eq
 8025652:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8025656:	4313      	orreq	r3, r2
 8025658:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802565c:	6863      	ldr	r3, [r4, #4]
 802565e:	6828      	ldr	r0, [r5, #0]
 8025660:	1c5a      	adds	r2, r3, #1
 8025662:	3302      	adds	r3, #2
 8025664:	6062      	str	r2, [r4, #4]
 8025666:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802566a:	f7ff ffa1 	bl	80255b0 <__retarget_lock_release_recursive>
 802566e:	2000      	movs	r0, #0
 8025670:	e7cb      	b.n	802560a <__register_exitproc+0x3a>
 8025672:	bf00      	nop
 8025674:	2400010c 	.word	0x2400010c
 8025678:	2401c63c 	.word	0x2401c63c
 802567c:	2401c5b0 	.word	0x2401c5b0
 8025680:	080288ac 	.word	0x080288ac
 8025684:	08024fa1 	.word	0x08024fa1

08025688 <_free_r>:
 8025688:	b538      	push	{r3, r4, r5, lr}
 802568a:	4605      	mov	r5, r0
 802568c:	2900      	cmp	r1, #0
 802568e:	d041      	beq.n	8025714 <_free_r+0x8c>
 8025690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025694:	1f0c      	subs	r4, r1, #4
 8025696:	2b00      	cmp	r3, #0
 8025698:	bfb8      	it	lt
 802569a:	18e4      	addlt	r4, r4, r3
 802569c:	f7ff fd32 	bl	8025104 <__malloc_lock>
 80256a0:	4a1d      	ldr	r2, [pc, #116]	@ (8025718 <_free_r+0x90>)
 80256a2:	6813      	ldr	r3, [r2, #0]
 80256a4:	b933      	cbnz	r3, 80256b4 <_free_r+0x2c>
 80256a6:	6063      	str	r3, [r4, #4]
 80256a8:	6014      	str	r4, [r2, #0]
 80256aa:	4628      	mov	r0, r5
 80256ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80256b0:	f7ff bd2e 	b.w	8025110 <__malloc_unlock>
 80256b4:	42a3      	cmp	r3, r4
 80256b6:	d908      	bls.n	80256ca <_free_r+0x42>
 80256b8:	6820      	ldr	r0, [r4, #0]
 80256ba:	1821      	adds	r1, r4, r0
 80256bc:	428b      	cmp	r3, r1
 80256be:	bf01      	itttt	eq
 80256c0:	6819      	ldreq	r1, [r3, #0]
 80256c2:	685b      	ldreq	r3, [r3, #4]
 80256c4:	1809      	addeq	r1, r1, r0
 80256c6:	6021      	streq	r1, [r4, #0]
 80256c8:	e7ed      	b.n	80256a6 <_free_r+0x1e>
 80256ca:	461a      	mov	r2, r3
 80256cc:	685b      	ldr	r3, [r3, #4]
 80256ce:	b10b      	cbz	r3, 80256d4 <_free_r+0x4c>
 80256d0:	42a3      	cmp	r3, r4
 80256d2:	d9fa      	bls.n	80256ca <_free_r+0x42>
 80256d4:	6811      	ldr	r1, [r2, #0]
 80256d6:	1850      	adds	r0, r2, r1
 80256d8:	42a0      	cmp	r0, r4
 80256da:	d10b      	bne.n	80256f4 <_free_r+0x6c>
 80256dc:	6820      	ldr	r0, [r4, #0]
 80256de:	4401      	add	r1, r0
 80256e0:	1850      	adds	r0, r2, r1
 80256e2:	4283      	cmp	r3, r0
 80256e4:	6011      	str	r1, [r2, #0]
 80256e6:	d1e0      	bne.n	80256aa <_free_r+0x22>
 80256e8:	6818      	ldr	r0, [r3, #0]
 80256ea:	685b      	ldr	r3, [r3, #4]
 80256ec:	6053      	str	r3, [r2, #4]
 80256ee:	4408      	add	r0, r1
 80256f0:	6010      	str	r0, [r2, #0]
 80256f2:	e7da      	b.n	80256aa <_free_r+0x22>
 80256f4:	d902      	bls.n	80256fc <_free_r+0x74>
 80256f6:	230c      	movs	r3, #12
 80256f8:	602b      	str	r3, [r5, #0]
 80256fa:	e7d6      	b.n	80256aa <_free_r+0x22>
 80256fc:	6820      	ldr	r0, [r4, #0]
 80256fe:	1821      	adds	r1, r4, r0
 8025700:	428b      	cmp	r3, r1
 8025702:	bf04      	itt	eq
 8025704:	6819      	ldreq	r1, [r3, #0]
 8025706:	685b      	ldreq	r3, [r3, #4]
 8025708:	6063      	str	r3, [r4, #4]
 802570a:	bf04      	itt	eq
 802570c:	1809      	addeq	r1, r1, r0
 802570e:	6021      	streq	r1, [r4, #0]
 8025710:	6054      	str	r4, [r2, #4]
 8025712:	e7ca      	b.n	80256aa <_free_r+0x22>
 8025714:	bd38      	pop	{r3, r4, r5, pc}
 8025716:	bf00      	nop
 8025718:	2401c468 	.word	0x2401c468

0802571c <__sfputc_r>:
 802571c:	6893      	ldr	r3, [r2, #8]
 802571e:	3b01      	subs	r3, #1
 8025720:	2b00      	cmp	r3, #0
 8025722:	b410      	push	{r4}
 8025724:	6093      	str	r3, [r2, #8]
 8025726:	da08      	bge.n	802573a <__sfputc_r+0x1e>
 8025728:	6994      	ldr	r4, [r2, #24]
 802572a:	42a3      	cmp	r3, r4
 802572c:	db01      	blt.n	8025732 <__sfputc_r+0x16>
 802572e:	290a      	cmp	r1, #10
 8025730:	d103      	bne.n	802573a <__sfputc_r+0x1e>
 8025732:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025736:	f000 bb6d 	b.w	8025e14 <__swbuf_r>
 802573a:	6813      	ldr	r3, [r2, #0]
 802573c:	1c58      	adds	r0, r3, #1
 802573e:	6010      	str	r0, [r2, #0]
 8025740:	7019      	strb	r1, [r3, #0]
 8025742:	4608      	mov	r0, r1
 8025744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025748:	4770      	bx	lr

0802574a <__sfputs_r>:
 802574a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802574c:	4606      	mov	r6, r0
 802574e:	460f      	mov	r7, r1
 8025750:	4614      	mov	r4, r2
 8025752:	18d5      	adds	r5, r2, r3
 8025754:	42ac      	cmp	r4, r5
 8025756:	d101      	bne.n	802575c <__sfputs_r+0x12>
 8025758:	2000      	movs	r0, #0
 802575a:	e007      	b.n	802576c <__sfputs_r+0x22>
 802575c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025760:	463a      	mov	r2, r7
 8025762:	4630      	mov	r0, r6
 8025764:	f7ff ffda 	bl	802571c <__sfputc_r>
 8025768:	1c43      	adds	r3, r0, #1
 802576a:	d1f3      	bne.n	8025754 <__sfputs_r+0xa>
 802576c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025770 <_vfiprintf_r>:
 8025770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025774:	460d      	mov	r5, r1
 8025776:	b09d      	sub	sp, #116	@ 0x74
 8025778:	4614      	mov	r4, r2
 802577a:	4698      	mov	r8, r3
 802577c:	4606      	mov	r6, r0
 802577e:	b118      	cbz	r0, 8025788 <_vfiprintf_r+0x18>
 8025780:	6a03      	ldr	r3, [r0, #32]
 8025782:	b90b      	cbnz	r3, 8025788 <_vfiprintf_r+0x18>
 8025784:	f7ff fd64 	bl	8025250 <__sinit>
 8025788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802578a:	07d9      	lsls	r1, r3, #31
 802578c:	d405      	bmi.n	802579a <_vfiprintf_r+0x2a>
 802578e:	89ab      	ldrh	r3, [r5, #12]
 8025790:	059a      	lsls	r2, r3, #22
 8025792:	d402      	bmi.n	802579a <_vfiprintf_r+0x2a>
 8025794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025796:	f7ff ff0a 	bl	80255ae <__retarget_lock_acquire_recursive>
 802579a:	89ab      	ldrh	r3, [r5, #12]
 802579c:	071b      	lsls	r3, r3, #28
 802579e:	d501      	bpl.n	80257a4 <_vfiprintf_r+0x34>
 80257a0:	692b      	ldr	r3, [r5, #16]
 80257a2:	b99b      	cbnz	r3, 80257cc <_vfiprintf_r+0x5c>
 80257a4:	4629      	mov	r1, r5
 80257a6:	4630      	mov	r0, r6
 80257a8:	f000 fb72 	bl	8025e90 <__swsetup_r>
 80257ac:	b170      	cbz	r0, 80257cc <_vfiprintf_r+0x5c>
 80257ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80257b0:	07dc      	lsls	r4, r3, #31
 80257b2:	d504      	bpl.n	80257be <_vfiprintf_r+0x4e>
 80257b4:	f04f 30ff 	mov.w	r0, #4294967295
 80257b8:	b01d      	add	sp, #116	@ 0x74
 80257ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257be:	89ab      	ldrh	r3, [r5, #12]
 80257c0:	0598      	lsls	r0, r3, #22
 80257c2:	d4f7      	bmi.n	80257b4 <_vfiprintf_r+0x44>
 80257c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80257c6:	f7ff fef3 	bl	80255b0 <__retarget_lock_release_recursive>
 80257ca:	e7f3      	b.n	80257b4 <_vfiprintf_r+0x44>
 80257cc:	2300      	movs	r3, #0
 80257ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80257d0:	2320      	movs	r3, #32
 80257d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80257d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80257da:	2330      	movs	r3, #48	@ 0x30
 80257dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802598c <_vfiprintf_r+0x21c>
 80257e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80257e4:	f04f 0901 	mov.w	r9, #1
 80257e8:	4623      	mov	r3, r4
 80257ea:	469a      	mov	sl, r3
 80257ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257f0:	b10a      	cbz	r2, 80257f6 <_vfiprintf_r+0x86>
 80257f2:	2a25      	cmp	r2, #37	@ 0x25
 80257f4:	d1f9      	bne.n	80257ea <_vfiprintf_r+0x7a>
 80257f6:	ebba 0b04 	subs.w	fp, sl, r4
 80257fa:	d00b      	beq.n	8025814 <_vfiprintf_r+0xa4>
 80257fc:	465b      	mov	r3, fp
 80257fe:	4622      	mov	r2, r4
 8025800:	4629      	mov	r1, r5
 8025802:	4630      	mov	r0, r6
 8025804:	f7ff ffa1 	bl	802574a <__sfputs_r>
 8025808:	3001      	adds	r0, #1
 802580a:	f000 80a7 	beq.w	802595c <_vfiprintf_r+0x1ec>
 802580e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025810:	445a      	add	r2, fp
 8025812:	9209      	str	r2, [sp, #36]	@ 0x24
 8025814:	f89a 3000 	ldrb.w	r3, [sl]
 8025818:	2b00      	cmp	r3, #0
 802581a:	f000 809f 	beq.w	802595c <_vfiprintf_r+0x1ec>
 802581e:	2300      	movs	r3, #0
 8025820:	f04f 32ff 	mov.w	r2, #4294967295
 8025824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025828:	f10a 0a01 	add.w	sl, sl, #1
 802582c:	9304      	str	r3, [sp, #16]
 802582e:	9307      	str	r3, [sp, #28]
 8025830:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025834:	931a      	str	r3, [sp, #104]	@ 0x68
 8025836:	4654      	mov	r4, sl
 8025838:	2205      	movs	r2, #5
 802583a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802583e:	4853      	ldr	r0, [pc, #332]	@ (802598c <_vfiprintf_r+0x21c>)
 8025840:	f7da fd56 	bl	80002f0 <memchr>
 8025844:	9a04      	ldr	r2, [sp, #16]
 8025846:	b9d8      	cbnz	r0, 8025880 <_vfiprintf_r+0x110>
 8025848:	06d1      	lsls	r1, r2, #27
 802584a:	bf44      	itt	mi
 802584c:	2320      	movmi	r3, #32
 802584e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025852:	0713      	lsls	r3, r2, #28
 8025854:	bf44      	itt	mi
 8025856:	232b      	movmi	r3, #43	@ 0x2b
 8025858:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802585c:	f89a 3000 	ldrb.w	r3, [sl]
 8025860:	2b2a      	cmp	r3, #42	@ 0x2a
 8025862:	d015      	beq.n	8025890 <_vfiprintf_r+0x120>
 8025864:	9a07      	ldr	r2, [sp, #28]
 8025866:	4654      	mov	r4, sl
 8025868:	2000      	movs	r0, #0
 802586a:	f04f 0c0a 	mov.w	ip, #10
 802586e:	4621      	mov	r1, r4
 8025870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025874:	3b30      	subs	r3, #48	@ 0x30
 8025876:	2b09      	cmp	r3, #9
 8025878:	d94b      	bls.n	8025912 <_vfiprintf_r+0x1a2>
 802587a:	b1b0      	cbz	r0, 80258aa <_vfiprintf_r+0x13a>
 802587c:	9207      	str	r2, [sp, #28]
 802587e:	e014      	b.n	80258aa <_vfiprintf_r+0x13a>
 8025880:	eba0 0308 	sub.w	r3, r0, r8
 8025884:	fa09 f303 	lsl.w	r3, r9, r3
 8025888:	4313      	orrs	r3, r2
 802588a:	9304      	str	r3, [sp, #16]
 802588c:	46a2      	mov	sl, r4
 802588e:	e7d2      	b.n	8025836 <_vfiprintf_r+0xc6>
 8025890:	9b03      	ldr	r3, [sp, #12]
 8025892:	1d19      	adds	r1, r3, #4
 8025894:	681b      	ldr	r3, [r3, #0]
 8025896:	9103      	str	r1, [sp, #12]
 8025898:	2b00      	cmp	r3, #0
 802589a:	bfbb      	ittet	lt
 802589c:	425b      	neglt	r3, r3
 802589e:	f042 0202 	orrlt.w	r2, r2, #2
 80258a2:	9307      	strge	r3, [sp, #28]
 80258a4:	9307      	strlt	r3, [sp, #28]
 80258a6:	bfb8      	it	lt
 80258a8:	9204      	strlt	r2, [sp, #16]
 80258aa:	7823      	ldrb	r3, [r4, #0]
 80258ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80258ae:	d10a      	bne.n	80258c6 <_vfiprintf_r+0x156>
 80258b0:	7863      	ldrb	r3, [r4, #1]
 80258b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80258b4:	d132      	bne.n	802591c <_vfiprintf_r+0x1ac>
 80258b6:	9b03      	ldr	r3, [sp, #12]
 80258b8:	1d1a      	adds	r2, r3, #4
 80258ba:	681b      	ldr	r3, [r3, #0]
 80258bc:	9203      	str	r2, [sp, #12]
 80258be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80258c2:	3402      	adds	r4, #2
 80258c4:	9305      	str	r3, [sp, #20]
 80258c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802599c <_vfiprintf_r+0x22c>
 80258ca:	7821      	ldrb	r1, [r4, #0]
 80258cc:	2203      	movs	r2, #3
 80258ce:	4650      	mov	r0, sl
 80258d0:	f7da fd0e 	bl	80002f0 <memchr>
 80258d4:	b138      	cbz	r0, 80258e6 <_vfiprintf_r+0x176>
 80258d6:	9b04      	ldr	r3, [sp, #16]
 80258d8:	eba0 000a 	sub.w	r0, r0, sl
 80258dc:	2240      	movs	r2, #64	@ 0x40
 80258de:	4082      	lsls	r2, r0
 80258e0:	4313      	orrs	r3, r2
 80258e2:	3401      	adds	r4, #1
 80258e4:	9304      	str	r3, [sp, #16]
 80258e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80258ea:	4829      	ldr	r0, [pc, #164]	@ (8025990 <_vfiprintf_r+0x220>)
 80258ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80258f0:	2206      	movs	r2, #6
 80258f2:	f7da fcfd 	bl	80002f0 <memchr>
 80258f6:	2800      	cmp	r0, #0
 80258f8:	d03f      	beq.n	802597a <_vfiprintf_r+0x20a>
 80258fa:	4b26      	ldr	r3, [pc, #152]	@ (8025994 <_vfiprintf_r+0x224>)
 80258fc:	bb1b      	cbnz	r3, 8025946 <_vfiprintf_r+0x1d6>
 80258fe:	9b03      	ldr	r3, [sp, #12]
 8025900:	3307      	adds	r3, #7
 8025902:	f023 0307 	bic.w	r3, r3, #7
 8025906:	3308      	adds	r3, #8
 8025908:	9303      	str	r3, [sp, #12]
 802590a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802590c:	443b      	add	r3, r7
 802590e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025910:	e76a      	b.n	80257e8 <_vfiprintf_r+0x78>
 8025912:	fb0c 3202 	mla	r2, ip, r2, r3
 8025916:	460c      	mov	r4, r1
 8025918:	2001      	movs	r0, #1
 802591a:	e7a8      	b.n	802586e <_vfiprintf_r+0xfe>
 802591c:	2300      	movs	r3, #0
 802591e:	3401      	adds	r4, #1
 8025920:	9305      	str	r3, [sp, #20]
 8025922:	4619      	mov	r1, r3
 8025924:	f04f 0c0a 	mov.w	ip, #10
 8025928:	4620      	mov	r0, r4
 802592a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802592e:	3a30      	subs	r2, #48	@ 0x30
 8025930:	2a09      	cmp	r2, #9
 8025932:	d903      	bls.n	802593c <_vfiprintf_r+0x1cc>
 8025934:	2b00      	cmp	r3, #0
 8025936:	d0c6      	beq.n	80258c6 <_vfiprintf_r+0x156>
 8025938:	9105      	str	r1, [sp, #20]
 802593a:	e7c4      	b.n	80258c6 <_vfiprintf_r+0x156>
 802593c:	fb0c 2101 	mla	r1, ip, r1, r2
 8025940:	4604      	mov	r4, r0
 8025942:	2301      	movs	r3, #1
 8025944:	e7f0      	b.n	8025928 <_vfiprintf_r+0x1b8>
 8025946:	ab03      	add	r3, sp, #12
 8025948:	9300      	str	r3, [sp, #0]
 802594a:	462a      	mov	r2, r5
 802594c:	4b12      	ldr	r3, [pc, #72]	@ (8025998 <_vfiprintf_r+0x228>)
 802594e:	a904      	add	r1, sp, #16
 8025950:	4630      	mov	r0, r6
 8025952:	f3af 8000 	nop.w
 8025956:	4607      	mov	r7, r0
 8025958:	1c78      	adds	r0, r7, #1
 802595a:	d1d6      	bne.n	802590a <_vfiprintf_r+0x19a>
 802595c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802595e:	07d9      	lsls	r1, r3, #31
 8025960:	d405      	bmi.n	802596e <_vfiprintf_r+0x1fe>
 8025962:	89ab      	ldrh	r3, [r5, #12]
 8025964:	059a      	lsls	r2, r3, #22
 8025966:	d402      	bmi.n	802596e <_vfiprintf_r+0x1fe>
 8025968:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802596a:	f7ff fe21 	bl	80255b0 <__retarget_lock_release_recursive>
 802596e:	89ab      	ldrh	r3, [r5, #12]
 8025970:	065b      	lsls	r3, r3, #25
 8025972:	f53f af1f 	bmi.w	80257b4 <_vfiprintf_r+0x44>
 8025976:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025978:	e71e      	b.n	80257b8 <_vfiprintf_r+0x48>
 802597a:	ab03      	add	r3, sp, #12
 802597c:	9300      	str	r3, [sp, #0]
 802597e:	462a      	mov	r2, r5
 8025980:	4b05      	ldr	r3, [pc, #20]	@ (8025998 <_vfiprintf_r+0x228>)
 8025982:	a904      	add	r1, sp, #16
 8025984:	4630      	mov	r0, r6
 8025986:	f000 f879 	bl	8025a7c <_printf_i>
 802598a:	e7e4      	b.n	8025956 <_vfiprintf_r+0x1e6>
 802598c:	080288b0 	.word	0x080288b0
 8025990:	080288ba 	.word	0x080288ba
 8025994:	00000000 	.word	0x00000000
 8025998:	0802574b 	.word	0x0802574b
 802599c:	080288b6 	.word	0x080288b6

080259a0 <_printf_common>:
 80259a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80259a4:	4616      	mov	r6, r2
 80259a6:	4698      	mov	r8, r3
 80259a8:	688a      	ldr	r2, [r1, #8]
 80259aa:	690b      	ldr	r3, [r1, #16]
 80259ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80259b0:	4293      	cmp	r3, r2
 80259b2:	bfb8      	it	lt
 80259b4:	4613      	movlt	r3, r2
 80259b6:	6033      	str	r3, [r6, #0]
 80259b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80259bc:	4607      	mov	r7, r0
 80259be:	460c      	mov	r4, r1
 80259c0:	b10a      	cbz	r2, 80259c6 <_printf_common+0x26>
 80259c2:	3301      	adds	r3, #1
 80259c4:	6033      	str	r3, [r6, #0]
 80259c6:	6823      	ldr	r3, [r4, #0]
 80259c8:	0699      	lsls	r1, r3, #26
 80259ca:	bf42      	ittt	mi
 80259cc:	6833      	ldrmi	r3, [r6, #0]
 80259ce:	3302      	addmi	r3, #2
 80259d0:	6033      	strmi	r3, [r6, #0]
 80259d2:	6825      	ldr	r5, [r4, #0]
 80259d4:	f015 0506 	ands.w	r5, r5, #6
 80259d8:	d106      	bne.n	80259e8 <_printf_common+0x48>
 80259da:	f104 0a19 	add.w	sl, r4, #25
 80259de:	68e3      	ldr	r3, [r4, #12]
 80259e0:	6832      	ldr	r2, [r6, #0]
 80259e2:	1a9b      	subs	r3, r3, r2
 80259e4:	42ab      	cmp	r3, r5
 80259e6:	dc26      	bgt.n	8025a36 <_printf_common+0x96>
 80259e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80259ec:	6822      	ldr	r2, [r4, #0]
 80259ee:	3b00      	subs	r3, #0
 80259f0:	bf18      	it	ne
 80259f2:	2301      	movne	r3, #1
 80259f4:	0692      	lsls	r2, r2, #26
 80259f6:	d42b      	bmi.n	8025a50 <_printf_common+0xb0>
 80259f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80259fc:	4641      	mov	r1, r8
 80259fe:	4638      	mov	r0, r7
 8025a00:	47c8      	blx	r9
 8025a02:	3001      	adds	r0, #1
 8025a04:	d01e      	beq.n	8025a44 <_printf_common+0xa4>
 8025a06:	6823      	ldr	r3, [r4, #0]
 8025a08:	6922      	ldr	r2, [r4, #16]
 8025a0a:	f003 0306 	and.w	r3, r3, #6
 8025a0e:	2b04      	cmp	r3, #4
 8025a10:	bf02      	ittt	eq
 8025a12:	68e5      	ldreq	r5, [r4, #12]
 8025a14:	6833      	ldreq	r3, [r6, #0]
 8025a16:	1aed      	subeq	r5, r5, r3
 8025a18:	68a3      	ldr	r3, [r4, #8]
 8025a1a:	bf0c      	ite	eq
 8025a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025a20:	2500      	movne	r5, #0
 8025a22:	4293      	cmp	r3, r2
 8025a24:	bfc4      	itt	gt
 8025a26:	1a9b      	subgt	r3, r3, r2
 8025a28:	18ed      	addgt	r5, r5, r3
 8025a2a:	2600      	movs	r6, #0
 8025a2c:	341a      	adds	r4, #26
 8025a2e:	42b5      	cmp	r5, r6
 8025a30:	d11a      	bne.n	8025a68 <_printf_common+0xc8>
 8025a32:	2000      	movs	r0, #0
 8025a34:	e008      	b.n	8025a48 <_printf_common+0xa8>
 8025a36:	2301      	movs	r3, #1
 8025a38:	4652      	mov	r2, sl
 8025a3a:	4641      	mov	r1, r8
 8025a3c:	4638      	mov	r0, r7
 8025a3e:	47c8      	blx	r9
 8025a40:	3001      	adds	r0, #1
 8025a42:	d103      	bne.n	8025a4c <_printf_common+0xac>
 8025a44:	f04f 30ff 	mov.w	r0, #4294967295
 8025a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025a4c:	3501      	adds	r5, #1
 8025a4e:	e7c6      	b.n	80259de <_printf_common+0x3e>
 8025a50:	18e1      	adds	r1, r4, r3
 8025a52:	1c5a      	adds	r2, r3, #1
 8025a54:	2030      	movs	r0, #48	@ 0x30
 8025a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025a5a:	4422      	add	r2, r4
 8025a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025a64:	3302      	adds	r3, #2
 8025a66:	e7c7      	b.n	80259f8 <_printf_common+0x58>
 8025a68:	2301      	movs	r3, #1
 8025a6a:	4622      	mov	r2, r4
 8025a6c:	4641      	mov	r1, r8
 8025a6e:	4638      	mov	r0, r7
 8025a70:	47c8      	blx	r9
 8025a72:	3001      	adds	r0, #1
 8025a74:	d0e6      	beq.n	8025a44 <_printf_common+0xa4>
 8025a76:	3601      	adds	r6, #1
 8025a78:	e7d9      	b.n	8025a2e <_printf_common+0x8e>
	...

08025a7c <_printf_i>:
 8025a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025a80:	7e0f      	ldrb	r7, [r1, #24]
 8025a82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025a84:	2f78      	cmp	r7, #120	@ 0x78
 8025a86:	4691      	mov	r9, r2
 8025a88:	4680      	mov	r8, r0
 8025a8a:	460c      	mov	r4, r1
 8025a8c:	469a      	mov	sl, r3
 8025a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025a92:	d807      	bhi.n	8025aa4 <_printf_i+0x28>
 8025a94:	2f62      	cmp	r7, #98	@ 0x62
 8025a96:	d80a      	bhi.n	8025aae <_printf_i+0x32>
 8025a98:	2f00      	cmp	r7, #0
 8025a9a:	f000 80d2 	beq.w	8025c42 <_printf_i+0x1c6>
 8025a9e:	2f58      	cmp	r7, #88	@ 0x58
 8025aa0:	f000 80b9 	beq.w	8025c16 <_printf_i+0x19a>
 8025aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025aac:	e03a      	b.n	8025b24 <_printf_i+0xa8>
 8025aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025ab2:	2b15      	cmp	r3, #21
 8025ab4:	d8f6      	bhi.n	8025aa4 <_printf_i+0x28>
 8025ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8025abc <_printf_i+0x40>)
 8025ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025abc:	08025b15 	.word	0x08025b15
 8025ac0:	08025b29 	.word	0x08025b29
 8025ac4:	08025aa5 	.word	0x08025aa5
 8025ac8:	08025aa5 	.word	0x08025aa5
 8025acc:	08025aa5 	.word	0x08025aa5
 8025ad0:	08025aa5 	.word	0x08025aa5
 8025ad4:	08025b29 	.word	0x08025b29
 8025ad8:	08025aa5 	.word	0x08025aa5
 8025adc:	08025aa5 	.word	0x08025aa5
 8025ae0:	08025aa5 	.word	0x08025aa5
 8025ae4:	08025aa5 	.word	0x08025aa5
 8025ae8:	08025c29 	.word	0x08025c29
 8025aec:	08025b53 	.word	0x08025b53
 8025af0:	08025be3 	.word	0x08025be3
 8025af4:	08025aa5 	.word	0x08025aa5
 8025af8:	08025aa5 	.word	0x08025aa5
 8025afc:	08025c4b 	.word	0x08025c4b
 8025b00:	08025aa5 	.word	0x08025aa5
 8025b04:	08025b53 	.word	0x08025b53
 8025b08:	08025aa5 	.word	0x08025aa5
 8025b0c:	08025aa5 	.word	0x08025aa5
 8025b10:	08025beb 	.word	0x08025beb
 8025b14:	6833      	ldr	r3, [r6, #0]
 8025b16:	1d1a      	adds	r2, r3, #4
 8025b18:	681b      	ldr	r3, [r3, #0]
 8025b1a:	6032      	str	r2, [r6, #0]
 8025b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025b24:	2301      	movs	r3, #1
 8025b26:	e09d      	b.n	8025c64 <_printf_i+0x1e8>
 8025b28:	6833      	ldr	r3, [r6, #0]
 8025b2a:	6820      	ldr	r0, [r4, #0]
 8025b2c:	1d19      	adds	r1, r3, #4
 8025b2e:	6031      	str	r1, [r6, #0]
 8025b30:	0606      	lsls	r6, r0, #24
 8025b32:	d501      	bpl.n	8025b38 <_printf_i+0xbc>
 8025b34:	681d      	ldr	r5, [r3, #0]
 8025b36:	e003      	b.n	8025b40 <_printf_i+0xc4>
 8025b38:	0645      	lsls	r5, r0, #25
 8025b3a:	d5fb      	bpl.n	8025b34 <_printf_i+0xb8>
 8025b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025b40:	2d00      	cmp	r5, #0
 8025b42:	da03      	bge.n	8025b4c <_printf_i+0xd0>
 8025b44:	232d      	movs	r3, #45	@ 0x2d
 8025b46:	426d      	negs	r5, r5
 8025b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025b4c:	4859      	ldr	r0, [pc, #356]	@ (8025cb4 <_printf_i+0x238>)
 8025b4e:	230a      	movs	r3, #10
 8025b50:	e011      	b.n	8025b76 <_printf_i+0xfa>
 8025b52:	6821      	ldr	r1, [r4, #0]
 8025b54:	6833      	ldr	r3, [r6, #0]
 8025b56:	0608      	lsls	r0, r1, #24
 8025b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8025b5c:	d402      	bmi.n	8025b64 <_printf_i+0xe8>
 8025b5e:	0649      	lsls	r1, r1, #25
 8025b60:	bf48      	it	mi
 8025b62:	b2ad      	uxthmi	r5, r5
 8025b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8025b66:	4853      	ldr	r0, [pc, #332]	@ (8025cb4 <_printf_i+0x238>)
 8025b68:	6033      	str	r3, [r6, #0]
 8025b6a:	bf14      	ite	ne
 8025b6c:	230a      	movne	r3, #10
 8025b6e:	2308      	moveq	r3, #8
 8025b70:	2100      	movs	r1, #0
 8025b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025b76:	6866      	ldr	r6, [r4, #4]
 8025b78:	60a6      	str	r6, [r4, #8]
 8025b7a:	2e00      	cmp	r6, #0
 8025b7c:	bfa2      	ittt	ge
 8025b7e:	6821      	ldrge	r1, [r4, #0]
 8025b80:	f021 0104 	bicge.w	r1, r1, #4
 8025b84:	6021      	strge	r1, [r4, #0]
 8025b86:	b90d      	cbnz	r5, 8025b8c <_printf_i+0x110>
 8025b88:	2e00      	cmp	r6, #0
 8025b8a:	d04b      	beq.n	8025c24 <_printf_i+0x1a8>
 8025b8c:	4616      	mov	r6, r2
 8025b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8025b92:	fb03 5711 	mls	r7, r3, r1, r5
 8025b96:	5dc7      	ldrb	r7, [r0, r7]
 8025b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025b9c:	462f      	mov	r7, r5
 8025b9e:	42bb      	cmp	r3, r7
 8025ba0:	460d      	mov	r5, r1
 8025ba2:	d9f4      	bls.n	8025b8e <_printf_i+0x112>
 8025ba4:	2b08      	cmp	r3, #8
 8025ba6:	d10b      	bne.n	8025bc0 <_printf_i+0x144>
 8025ba8:	6823      	ldr	r3, [r4, #0]
 8025baa:	07df      	lsls	r7, r3, #31
 8025bac:	d508      	bpl.n	8025bc0 <_printf_i+0x144>
 8025bae:	6923      	ldr	r3, [r4, #16]
 8025bb0:	6861      	ldr	r1, [r4, #4]
 8025bb2:	4299      	cmp	r1, r3
 8025bb4:	bfde      	ittt	le
 8025bb6:	2330      	movle	r3, #48	@ 0x30
 8025bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025bc0:	1b92      	subs	r2, r2, r6
 8025bc2:	6122      	str	r2, [r4, #16]
 8025bc4:	f8cd a000 	str.w	sl, [sp]
 8025bc8:	464b      	mov	r3, r9
 8025bca:	aa03      	add	r2, sp, #12
 8025bcc:	4621      	mov	r1, r4
 8025bce:	4640      	mov	r0, r8
 8025bd0:	f7ff fee6 	bl	80259a0 <_printf_common>
 8025bd4:	3001      	adds	r0, #1
 8025bd6:	d14a      	bne.n	8025c6e <_printf_i+0x1f2>
 8025bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8025bdc:	b004      	add	sp, #16
 8025bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025be2:	6823      	ldr	r3, [r4, #0]
 8025be4:	f043 0320 	orr.w	r3, r3, #32
 8025be8:	6023      	str	r3, [r4, #0]
 8025bea:	4833      	ldr	r0, [pc, #204]	@ (8025cb8 <_printf_i+0x23c>)
 8025bec:	2778      	movs	r7, #120	@ 0x78
 8025bee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025bf2:	6823      	ldr	r3, [r4, #0]
 8025bf4:	6831      	ldr	r1, [r6, #0]
 8025bf6:	061f      	lsls	r7, r3, #24
 8025bf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8025bfc:	d402      	bmi.n	8025c04 <_printf_i+0x188>
 8025bfe:	065f      	lsls	r7, r3, #25
 8025c00:	bf48      	it	mi
 8025c02:	b2ad      	uxthmi	r5, r5
 8025c04:	6031      	str	r1, [r6, #0]
 8025c06:	07d9      	lsls	r1, r3, #31
 8025c08:	bf44      	itt	mi
 8025c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8025c0e:	6023      	strmi	r3, [r4, #0]
 8025c10:	b11d      	cbz	r5, 8025c1a <_printf_i+0x19e>
 8025c12:	2310      	movs	r3, #16
 8025c14:	e7ac      	b.n	8025b70 <_printf_i+0xf4>
 8025c16:	4827      	ldr	r0, [pc, #156]	@ (8025cb4 <_printf_i+0x238>)
 8025c18:	e7e9      	b.n	8025bee <_printf_i+0x172>
 8025c1a:	6823      	ldr	r3, [r4, #0]
 8025c1c:	f023 0320 	bic.w	r3, r3, #32
 8025c20:	6023      	str	r3, [r4, #0]
 8025c22:	e7f6      	b.n	8025c12 <_printf_i+0x196>
 8025c24:	4616      	mov	r6, r2
 8025c26:	e7bd      	b.n	8025ba4 <_printf_i+0x128>
 8025c28:	6833      	ldr	r3, [r6, #0]
 8025c2a:	6825      	ldr	r5, [r4, #0]
 8025c2c:	6961      	ldr	r1, [r4, #20]
 8025c2e:	1d18      	adds	r0, r3, #4
 8025c30:	6030      	str	r0, [r6, #0]
 8025c32:	062e      	lsls	r6, r5, #24
 8025c34:	681b      	ldr	r3, [r3, #0]
 8025c36:	d501      	bpl.n	8025c3c <_printf_i+0x1c0>
 8025c38:	6019      	str	r1, [r3, #0]
 8025c3a:	e002      	b.n	8025c42 <_printf_i+0x1c6>
 8025c3c:	0668      	lsls	r0, r5, #25
 8025c3e:	d5fb      	bpl.n	8025c38 <_printf_i+0x1bc>
 8025c40:	8019      	strh	r1, [r3, #0]
 8025c42:	2300      	movs	r3, #0
 8025c44:	6123      	str	r3, [r4, #16]
 8025c46:	4616      	mov	r6, r2
 8025c48:	e7bc      	b.n	8025bc4 <_printf_i+0x148>
 8025c4a:	6833      	ldr	r3, [r6, #0]
 8025c4c:	1d1a      	adds	r2, r3, #4
 8025c4e:	6032      	str	r2, [r6, #0]
 8025c50:	681e      	ldr	r6, [r3, #0]
 8025c52:	6862      	ldr	r2, [r4, #4]
 8025c54:	2100      	movs	r1, #0
 8025c56:	4630      	mov	r0, r6
 8025c58:	f7da fb4a 	bl	80002f0 <memchr>
 8025c5c:	b108      	cbz	r0, 8025c62 <_printf_i+0x1e6>
 8025c5e:	1b80      	subs	r0, r0, r6
 8025c60:	6060      	str	r0, [r4, #4]
 8025c62:	6863      	ldr	r3, [r4, #4]
 8025c64:	6123      	str	r3, [r4, #16]
 8025c66:	2300      	movs	r3, #0
 8025c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025c6c:	e7aa      	b.n	8025bc4 <_printf_i+0x148>
 8025c6e:	6923      	ldr	r3, [r4, #16]
 8025c70:	4632      	mov	r2, r6
 8025c72:	4649      	mov	r1, r9
 8025c74:	4640      	mov	r0, r8
 8025c76:	47d0      	blx	sl
 8025c78:	3001      	adds	r0, #1
 8025c7a:	d0ad      	beq.n	8025bd8 <_printf_i+0x15c>
 8025c7c:	6823      	ldr	r3, [r4, #0]
 8025c7e:	079b      	lsls	r3, r3, #30
 8025c80:	d413      	bmi.n	8025caa <_printf_i+0x22e>
 8025c82:	68e0      	ldr	r0, [r4, #12]
 8025c84:	9b03      	ldr	r3, [sp, #12]
 8025c86:	4298      	cmp	r0, r3
 8025c88:	bfb8      	it	lt
 8025c8a:	4618      	movlt	r0, r3
 8025c8c:	e7a6      	b.n	8025bdc <_printf_i+0x160>
 8025c8e:	2301      	movs	r3, #1
 8025c90:	4632      	mov	r2, r6
 8025c92:	4649      	mov	r1, r9
 8025c94:	4640      	mov	r0, r8
 8025c96:	47d0      	blx	sl
 8025c98:	3001      	adds	r0, #1
 8025c9a:	d09d      	beq.n	8025bd8 <_printf_i+0x15c>
 8025c9c:	3501      	adds	r5, #1
 8025c9e:	68e3      	ldr	r3, [r4, #12]
 8025ca0:	9903      	ldr	r1, [sp, #12]
 8025ca2:	1a5b      	subs	r3, r3, r1
 8025ca4:	42ab      	cmp	r3, r5
 8025ca6:	dcf2      	bgt.n	8025c8e <_printf_i+0x212>
 8025ca8:	e7eb      	b.n	8025c82 <_printf_i+0x206>
 8025caa:	2500      	movs	r5, #0
 8025cac:	f104 0619 	add.w	r6, r4, #25
 8025cb0:	e7f5      	b.n	8025c9e <_printf_i+0x222>
 8025cb2:	bf00      	nop
 8025cb4:	080288c1 	.word	0x080288c1
 8025cb8:	080288d2 	.word	0x080288d2

08025cbc <__sflush_r>:
 8025cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cc4:	0716      	lsls	r6, r2, #28
 8025cc6:	4605      	mov	r5, r0
 8025cc8:	460c      	mov	r4, r1
 8025cca:	d454      	bmi.n	8025d76 <__sflush_r+0xba>
 8025ccc:	684b      	ldr	r3, [r1, #4]
 8025cce:	2b00      	cmp	r3, #0
 8025cd0:	dc02      	bgt.n	8025cd8 <__sflush_r+0x1c>
 8025cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025cd4:	2b00      	cmp	r3, #0
 8025cd6:	dd48      	ble.n	8025d6a <__sflush_r+0xae>
 8025cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025cda:	2e00      	cmp	r6, #0
 8025cdc:	d045      	beq.n	8025d6a <__sflush_r+0xae>
 8025cde:	2300      	movs	r3, #0
 8025ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025ce4:	682f      	ldr	r7, [r5, #0]
 8025ce6:	6a21      	ldr	r1, [r4, #32]
 8025ce8:	602b      	str	r3, [r5, #0]
 8025cea:	d030      	beq.n	8025d4e <__sflush_r+0x92>
 8025cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025cee:	89a3      	ldrh	r3, [r4, #12]
 8025cf0:	0759      	lsls	r1, r3, #29
 8025cf2:	d505      	bpl.n	8025d00 <__sflush_r+0x44>
 8025cf4:	6863      	ldr	r3, [r4, #4]
 8025cf6:	1ad2      	subs	r2, r2, r3
 8025cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025cfa:	b10b      	cbz	r3, 8025d00 <__sflush_r+0x44>
 8025cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025cfe:	1ad2      	subs	r2, r2, r3
 8025d00:	2300      	movs	r3, #0
 8025d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025d04:	6a21      	ldr	r1, [r4, #32]
 8025d06:	4628      	mov	r0, r5
 8025d08:	47b0      	blx	r6
 8025d0a:	1c43      	adds	r3, r0, #1
 8025d0c:	89a3      	ldrh	r3, [r4, #12]
 8025d0e:	d106      	bne.n	8025d1e <__sflush_r+0x62>
 8025d10:	6829      	ldr	r1, [r5, #0]
 8025d12:	291d      	cmp	r1, #29
 8025d14:	d82b      	bhi.n	8025d6e <__sflush_r+0xb2>
 8025d16:	4a2a      	ldr	r2, [pc, #168]	@ (8025dc0 <__sflush_r+0x104>)
 8025d18:	410a      	asrs	r2, r1
 8025d1a:	07d6      	lsls	r6, r2, #31
 8025d1c:	d427      	bmi.n	8025d6e <__sflush_r+0xb2>
 8025d1e:	2200      	movs	r2, #0
 8025d20:	6062      	str	r2, [r4, #4]
 8025d22:	04d9      	lsls	r1, r3, #19
 8025d24:	6922      	ldr	r2, [r4, #16]
 8025d26:	6022      	str	r2, [r4, #0]
 8025d28:	d504      	bpl.n	8025d34 <__sflush_r+0x78>
 8025d2a:	1c42      	adds	r2, r0, #1
 8025d2c:	d101      	bne.n	8025d32 <__sflush_r+0x76>
 8025d2e:	682b      	ldr	r3, [r5, #0]
 8025d30:	b903      	cbnz	r3, 8025d34 <__sflush_r+0x78>
 8025d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8025d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025d36:	602f      	str	r7, [r5, #0]
 8025d38:	b1b9      	cbz	r1, 8025d6a <__sflush_r+0xae>
 8025d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025d3e:	4299      	cmp	r1, r3
 8025d40:	d002      	beq.n	8025d48 <__sflush_r+0x8c>
 8025d42:	4628      	mov	r0, r5
 8025d44:	f7ff fca0 	bl	8025688 <_free_r>
 8025d48:	2300      	movs	r3, #0
 8025d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8025d4c:	e00d      	b.n	8025d6a <__sflush_r+0xae>
 8025d4e:	2301      	movs	r3, #1
 8025d50:	4628      	mov	r0, r5
 8025d52:	47b0      	blx	r6
 8025d54:	4602      	mov	r2, r0
 8025d56:	1c50      	adds	r0, r2, #1
 8025d58:	d1c9      	bne.n	8025cee <__sflush_r+0x32>
 8025d5a:	682b      	ldr	r3, [r5, #0]
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d0c6      	beq.n	8025cee <__sflush_r+0x32>
 8025d60:	2b1d      	cmp	r3, #29
 8025d62:	d001      	beq.n	8025d68 <__sflush_r+0xac>
 8025d64:	2b16      	cmp	r3, #22
 8025d66:	d11e      	bne.n	8025da6 <__sflush_r+0xea>
 8025d68:	602f      	str	r7, [r5, #0]
 8025d6a:	2000      	movs	r0, #0
 8025d6c:	e022      	b.n	8025db4 <__sflush_r+0xf8>
 8025d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025d72:	b21b      	sxth	r3, r3
 8025d74:	e01b      	b.n	8025dae <__sflush_r+0xf2>
 8025d76:	690f      	ldr	r7, [r1, #16]
 8025d78:	2f00      	cmp	r7, #0
 8025d7a:	d0f6      	beq.n	8025d6a <__sflush_r+0xae>
 8025d7c:	0793      	lsls	r3, r2, #30
 8025d7e:	680e      	ldr	r6, [r1, #0]
 8025d80:	bf08      	it	eq
 8025d82:	694b      	ldreq	r3, [r1, #20]
 8025d84:	600f      	str	r7, [r1, #0]
 8025d86:	bf18      	it	ne
 8025d88:	2300      	movne	r3, #0
 8025d8a:	eba6 0807 	sub.w	r8, r6, r7
 8025d8e:	608b      	str	r3, [r1, #8]
 8025d90:	f1b8 0f00 	cmp.w	r8, #0
 8025d94:	dde9      	ble.n	8025d6a <__sflush_r+0xae>
 8025d96:	6a21      	ldr	r1, [r4, #32]
 8025d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025d9a:	4643      	mov	r3, r8
 8025d9c:	463a      	mov	r2, r7
 8025d9e:	4628      	mov	r0, r5
 8025da0:	47b0      	blx	r6
 8025da2:	2800      	cmp	r0, #0
 8025da4:	dc08      	bgt.n	8025db8 <__sflush_r+0xfc>
 8025da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025dae:	81a3      	strh	r3, [r4, #12]
 8025db0:	f04f 30ff 	mov.w	r0, #4294967295
 8025db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025db8:	4407      	add	r7, r0
 8025dba:	eba8 0800 	sub.w	r8, r8, r0
 8025dbe:	e7e7      	b.n	8025d90 <__sflush_r+0xd4>
 8025dc0:	dfbffffe 	.word	0xdfbffffe

08025dc4 <_fflush_r>:
 8025dc4:	b538      	push	{r3, r4, r5, lr}
 8025dc6:	690b      	ldr	r3, [r1, #16]
 8025dc8:	4605      	mov	r5, r0
 8025dca:	460c      	mov	r4, r1
 8025dcc:	b913      	cbnz	r3, 8025dd4 <_fflush_r+0x10>
 8025dce:	2500      	movs	r5, #0
 8025dd0:	4628      	mov	r0, r5
 8025dd2:	bd38      	pop	{r3, r4, r5, pc}
 8025dd4:	b118      	cbz	r0, 8025dde <_fflush_r+0x1a>
 8025dd6:	6a03      	ldr	r3, [r0, #32]
 8025dd8:	b90b      	cbnz	r3, 8025dde <_fflush_r+0x1a>
 8025dda:	f7ff fa39 	bl	8025250 <__sinit>
 8025dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025de2:	2b00      	cmp	r3, #0
 8025de4:	d0f3      	beq.n	8025dce <_fflush_r+0xa>
 8025de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025de8:	07d0      	lsls	r0, r2, #31
 8025dea:	d404      	bmi.n	8025df6 <_fflush_r+0x32>
 8025dec:	0599      	lsls	r1, r3, #22
 8025dee:	d402      	bmi.n	8025df6 <_fflush_r+0x32>
 8025df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025df2:	f7ff fbdc 	bl	80255ae <__retarget_lock_acquire_recursive>
 8025df6:	4628      	mov	r0, r5
 8025df8:	4621      	mov	r1, r4
 8025dfa:	f7ff ff5f 	bl	8025cbc <__sflush_r>
 8025dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025e00:	07da      	lsls	r2, r3, #31
 8025e02:	4605      	mov	r5, r0
 8025e04:	d4e4      	bmi.n	8025dd0 <_fflush_r+0xc>
 8025e06:	89a3      	ldrh	r3, [r4, #12]
 8025e08:	059b      	lsls	r3, r3, #22
 8025e0a:	d4e1      	bmi.n	8025dd0 <_fflush_r+0xc>
 8025e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025e0e:	f7ff fbcf 	bl	80255b0 <__retarget_lock_release_recursive>
 8025e12:	e7dd      	b.n	8025dd0 <_fflush_r+0xc>

08025e14 <__swbuf_r>:
 8025e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e16:	460e      	mov	r6, r1
 8025e18:	4614      	mov	r4, r2
 8025e1a:	4605      	mov	r5, r0
 8025e1c:	b118      	cbz	r0, 8025e26 <__swbuf_r+0x12>
 8025e1e:	6a03      	ldr	r3, [r0, #32]
 8025e20:	b90b      	cbnz	r3, 8025e26 <__swbuf_r+0x12>
 8025e22:	f7ff fa15 	bl	8025250 <__sinit>
 8025e26:	69a3      	ldr	r3, [r4, #24]
 8025e28:	60a3      	str	r3, [r4, #8]
 8025e2a:	89a3      	ldrh	r3, [r4, #12]
 8025e2c:	071a      	lsls	r2, r3, #28
 8025e2e:	d501      	bpl.n	8025e34 <__swbuf_r+0x20>
 8025e30:	6923      	ldr	r3, [r4, #16]
 8025e32:	b943      	cbnz	r3, 8025e46 <__swbuf_r+0x32>
 8025e34:	4621      	mov	r1, r4
 8025e36:	4628      	mov	r0, r5
 8025e38:	f000 f82a 	bl	8025e90 <__swsetup_r>
 8025e3c:	b118      	cbz	r0, 8025e46 <__swbuf_r+0x32>
 8025e3e:	f04f 37ff 	mov.w	r7, #4294967295
 8025e42:	4638      	mov	r0, r7
 8025e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e46:	6823      	ldr	r3, [r4, #0]
 8025e48:	6922      	ldr	r2, [r4, #16]
 8025e4a:	1a98      	subs	r0, r3, r2
 8025e4c:	6963      	ldr	r3, [r4, #20]
 8025e4e:	b2f6      	uxtb	r6, r6
 8025e50:	4283      	cmp	r3, r0
 8025e52:	4637      	mov	r7, r6
 8025e54:	dc05      	bgt.n	8025e62 <__swbuf_r+0x4e>
 8025e56:	4621      	mov	r1, r4
 8025e58:	4628      	mov	r0, r5
 8025e5a:	f7ff ffb3 	bl	8025dc4 <_fflush_r>
 8025e5e:	2800      	cmp	r0, #0
 8025e60:	d1ed      	bne.n	8025e3e <__swbuf_r+0x2a>
 8025e62:	68a3      	ldr	r3, [r4, #8]
 8025e64:	3b01      	subs	r3, #1
 8025e66:	60a3      	str	r3, [r4, #8]
 8025e68:	6823      	ldr	r3, [r4, #0]
 8025e6a:	1c5a      	adds	r2, r3, #1
 8025e6c:	6022      	str	r2, [r4, #0]
 8025e6e:	701e      	strb	r6, [r3, #0]
 8025e70:	6962      	ldr	r2, [r4, #20]
 8025e72:	1c43      	adds	r3, r0, #1
 8025e74:	429a      	cmp	r2, r3
 8025e76:	d004      	beq.n	8025e82 <__swbuf_r+0x6e>
 8025e78:	89a3      	ldrh	r3, [r4, #12]
 8025e7a:	07db      	lsls	r3, r3, #31
 8025e7c:	d5e1      	bpl.n	8025e42 <__swbuf_r+0x2e>
 8025e7e:	2e0a      	cmp	r6, #10
 8025e80:	d1df      	bne.n	8025e42 <__swbuf_r+0x2e>
 8025e82:	4621      	mov	r1, r4
 8025e84:	4628      	mov	r0, r5
 8025e86:	f7ff ff9d 	bl	8025dc4 <_fflush_r>
 8025e8a:	2800      	cmp	r0, #0
 8025e8c:	d0d9      	beq.n	8025e42 <__swbuf_r+0x2e>
 8025e8e:	e7d6      	b.n	8025e3e <__swbuf_r+0x2a>

08025e90 <__swsetup_r>:
 8025e90:	b538      	push	{r3, r4, r5, lr}
 8025e92:	4b29      	ldr	r3, [pc, #164]	@ (8025f38 <__swsetup_r+0xa8>)
 8025e94:	4605      	mov	r5, r0
 8025e96:	6818      	ldr	r0, [r3, #0]
 8025e98:	460c      	mov	r4, r1
 8025e9a:	b118      	cbz	r0, 8025ea4 <__swsetup_r+0x14>
 8025e9c:	6a03      	ldr	r3, [r0, #32]
 8025e9e:	b90b      	cbnz	r3, 8025ea4 <__swsetup_r+0x14>
 8025ea0:	f7ff f9d6 	bl	8025250 <__sinit>
 8025ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025ea8:	0719      	lsls	r1, r3, #28
 8025eaa:	d422      	bmi.n	8025ef2 <__swsetup_r+0x62>
 8025eac:	06da      	lsls	r2, r3, #27
 8025eae:	d407      	bmi.n	8025ec0 <__swsetup_r+0x30>
 8025eb0:	2209      	movs	r2, #9
 8025eb2:	602a      	str	r2, [r5, #0]
 8025eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025eb8:	81a3      	strh	r3, [r4, #12]
 8025eba:	f04f 30ff 	mov.w	r0, #4294967295
 8025ebe:	e033      	b.n	8025f28 <__swsetup_r+0x98>
 8025ec0:	0758      	lsls	r0, r3, #29
 8025ec2:	d512      	bpl.n	8025eea <__swsetup_r+0x5a>
 8025ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025ec6:	b141      	cbz	r1, 8025eda <__swsetup_r+0x4a>
 8025ec8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025ecc:	4299      	cmp	r1, r3
 8025ece:	d002      	beq.n	8025ed6 <__swsetup_r+0x46>
 8025ed0:	4628      	mov	r0, r5
 8025ed2:	f7ff fbd9 	bl	8025688 <_free_r>
 8025ed6:	2300      	movs	r3, #0
 8025ed8:	6363      	str	r3, [r4, #52]	@ 0x34
 8025eda:	89a3      	ldrh	r3, [r4, #12]
 8025edc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8025ee0:	81a3      	strh	r3, [r4, #12]
 8025ee2:	2300      	movs	r3, #0
 8025ee4:	6063      	str	r3, [r4, #4]
 8025ee6:	6923      	ldr	r3, [r4, #16]
 8025ee8:	6023      	str	r3, [r4, #0]
 8025eea:	89a3      	ldrh	r3, [r4, #12]
 8025eec:	f043 0308 	orr.w	r3, r3, #8
 8025ef0:	81a3      	strh	r3, [r4, #12]
 8025ef2:	6923      	ldr	r3, [r4, #16]
 8025ef4:	b94b      	cbnz	r3, 8025f0a <__swsetup_r+0x7a>
 8025ef6:	89a3      	ldrh	r3, [r4, #12]
 8025ef8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8025efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8025f00:	d003      	beq.n	8025f0a <__swsetup_r+0x7a>
 8025f02:	4621      	mov	r1, r4
 8025f04:	4628      	mov	r0, r5
 8025f06:	f000 f83f 	bl	8025f88 <__smakebuf_r>
 8025f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025f0e:	f013 0201 	ands.w	r2, r3, #1
 8025f12:	d00a      	beq.n	8025f2a <__swsetup_r+0x9a>
 8025f14:	2200      	movs	r2, #0
 8025f16:	60a2      	str	r2, [r4, #8]
 8025f18:	6962      	ldr	r2, [r4, #20]
 8025f1a:	4252      	negs	r2, r2
 8025f1c:	61a2      	str	r2, [r4, #24]
 8025f1e:	6922      	ldr	r2, [r4, #16]
 8025f20:	b942      	cbnz	r2, 8025f34 <__swsetup_r+0xa4>
 8025f22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025f26:	d1c5      	bne.n	8025eb4 <__swsetup_r+0x24>
 8025f28:	bd38      	pop	{r3, r4, r5, pc}
 8025f2a:	0799      	lsls	r1, r3, #30
 8025f2c:	bf58      	it	pl
 8025f2e:	6962      	ldrpl	r2, [r4, #20]
 8025f30:	60a2      	str	r2, [r4, #8]
 8025f32:	e7f4      	b.n	8025f1e <__swsetup_r+0x8e>
 8025f34:	2000      	movs	r0, #0
 8025f36:	e7f7      	b.n	8025f28 <__swsetup_r+0x98>
 8025f38:	240000bc 	.word	0x240000bc

08025f3c <__swhatbuf_r>:
 8025f3c:	b570      	push	{r4, r5, r6, lr}
 8025f3e:	460c      	mov	r4, r1
 8025f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025f44:	2900      	cmp	r1, #0
 8025f46:	b096      	sub	sp, #88	@ 0x58
 8025f48:	4615      	mov	r5, r2
 8025f4a:	461e      	mov	r6, r3
 8025f4c:	da0d      	bge.n	8025f6a <__swhatbuf_r+0x2e>
 8025f4e:	89a3      	ldrh	r3, [r4, #12]
 8025f50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025f54:	f04f 0100 	mov.w	r1, #0
 8025f58:	bf14      	ite	ne
 8025f5a:	2340      	movne	r3, #64	@ 0x40
 8025f5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025f60:	2000      	movs	r0, #0
 8025f62:	6031      	str	r1, [r6, #0]
 8025f64:	602b      	str	r3, [r5, #0]
 8025f66:	b016      	add	sp, #88	@ 0x58
 8025f68:	bd70      	pop	{r4, r5, r6, pc}
 8025f6a:	466a      	mov	r2, sp
 8025f6c:	f000 f848 	bl	8026000 <_fstat_r>
 8025f70:	2800      	cmp	r0, #0
 8025f72:	dbec      	blt.n	8025f4e <__swhatbuf_r+0x12>
 8025f74:	9901      	ldr	r1, [sp, #4]
 8025f76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025f7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025f7e:	4259      	negs	r1, r3
 8025f80:	4159      	adcs	r1, r3
 8025f82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025f86:	e7eb      	b.n	8025f60 <__swhatbuf_r+0x24>

08025f88 <__smakebuf_r>:
 8025f88:	898b      	ldrh	r3, [r1, #12]
 8025f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f8c:	079d      	lsls	r5, r3, #30
 8025f8e:	4606      	mov	r6, r0
 8025f90:	460c      	mov	r4, r1
 8025f92:	d507      	bpl.n	8025fa4 <__smakebuf_r+0x1c>
 8025f94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025f98:	6023      	str	r3, [r4, #0]
 8025f9a:	6123      	str	r3, [r4, #16]
 8025f9c:	2301      	movs	r3, #1
 8025f9e:	6163      	str	r3, [r4, #20]
 8025fa0:	b003      	add	sp, #12
 8025fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fa4:	ab01      	add	r3, sp, #4
 8025fa6:	466a      	mov	r2, sp
 8025fa8:	f7ff ffc8 	bl	8025f3c <__swhatbuf_r>
 8025fac:	9f00      	ldr	r7, [sp, #0]
 8025fae:	4605      	mov	r5, r0
 8025fb0:	4639      	mov	r1, r7
 8025fb2:	4630      	mov	r0, r6
 8025fb4:	f7ff f826 	bl	8025004 <_malloc_r>
 8025fb8:	b948      	cbnz	r0, 8025fce <__smakebuf_r+0x46>
 8025fba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025fbe:	059a      	lsls	r2, r3, #22
 8025fc0:	d4ee      	bmi.n	8025fa0 <__smakebuf_r+0x18>
 8025fc2:	f023 0303 	bic.w	r3, r3, #3
 8025fc6:	f043 0302 	orr.w	r3, r3, #2
 8025fca:	81a3      	strh	r3, [r4, #12]
 8025fcc:	e7e2      	b.n	8025f94 <__smakebuf_r+0xc>
 8025fce:	89a3      	ldrh	r3, [r4, #12]
 8025fd0:	6020      	str	r0, [r4, #0]
 8025fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025fd6:	81a3      	strh	r3, [r4, #12]
 8025fd8:	9b01      	ldr	r3, [sp, #4]
 8025fda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8025fde:	b15b      	cbz	r3, 8025ff8 <__smakebuf_r+0x70>
 8025fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025fe4:	4630      	mov	r0, r6
 8025fe6:	f000 f81d 	bl	8026024 <_isatty_r>
 8025fea:	b128      	cbz	r0, 8025ff8 <__smakebuf_r+0x70>
 8025fec:	89a3      	ldrh	r3, [r4, #12]
 8025fee:	f023 0303 	bic.w	r3, r3, #3
 8025ff2:	f043 0301 	orr.w	r3, r3, #1
 8025ff6:	81a3      	strh	r3, [r4, #12]
 8025ff8:	89a3      	ldrh	r3, [r4, #12]
 8025ffa:	431d      	orrs	r5, r3
 8025ffc:	81a5      	strh	r5, [r4, #12]
 8025ffe:	e7cf      	b.n	8025fa0 <__smakebuf_r+0x18>

08026000 <_fstat_r>:
 8026000:	b538      	push	{r3, r4, r5, lr}
 8026002:	4d07      	ldr	r5, [pc, #28]	@ (8026020 <_fstat_r+0x20>)
 8026004:	2300      	movs	r3, #0
 8026006:	4604      	mov	r4, r0
 8026008:	4608      	mov	r0, r1
 802600a:	4611      	mov	r1, r2
 802600c:	602b      	str	r3, [r5, #0]
 802600e:	f7db f91f 	bl	8001250 <_fstat>
 8026012:	1c43      	adds	r3, r0, #1
 8026014:	d102      	bne.n	802601c <_fstat_r+0x1c>
 8026016:	682b      	ldr	r3, [r5, #0]
 8026018:	b103      	cbz	r3, 802601c <_fstat_r+0x1c>
 802601a:	6023      	str	r3, [r4, #0]
 802601c:	bd38      	pop	{r3, r4, r5, pc}
 802601e:	bf00      	nop
 8026020:	2401c5a8 	.word	0x2401c5a8

08026024 <_isatty_r>:
 8026024:	b538      	push	{r3, r4, r5, lr}
 8026026:	4d06      	ldr	r5, [pc, #24]	@ (8026040 <_isatty_r+0x1c>)
 8026028:	2300      	movs	r3, #0
 802602a:	4604      	mov	r4, r0
 802602c:	4608      	mov	r0, r1
 802602e:	602b      	str	r3, [r5, #0]
 8026030:	f7db f91e 	bl	8001270 <_isatty>
 8026034:	1c43      	adds	r3, r0, #1
 8026036:	d102      	bne.n	802603e <_isatty_r+0x1a>
 8026038:	682b      	ldr	r3, [r5, #0]
 802603a:	b103      	cbz	r3, 802603e <_isatty_r+0x1a>
 802603c:	6023      	str	r3, [r4, #0]
 802603e:	bd38      	pop	{r3, r4, r5, pc}
 8026040:	2401c5a8 	.word	0x2401c5a8

08026044 <_init>:
 8026044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026046:	bf00      	nop
 8026048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802604a:	bc08      	pop	{r3}
 802604c:	469e      	mov	lr, r3
 802604e:	4770      	bx	lr

08026050 <_fini>:
 8026050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026052:	bf00      	nop
 8026054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026056:	bc08      	pop	{r3}
 8026058:	469e      	mov	lr, r3
 802605a:	4770      	bx	lr
